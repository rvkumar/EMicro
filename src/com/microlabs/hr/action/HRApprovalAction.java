package com.microlabs.hr.action;


import java.io.BufferedInputStream;

import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.upload.FormFile;

import com.microlabs.admin.form.ESSApproverForm;
import com.microlabs.admin.form.HolidayForm;
import com.microlabs.db.AttConnectionFactory;
import com.microlabs.ess.action.Permission;
import com.microlabs.ess.dao.AttDao;
import com.microlabs.ess.dao.EssDao;
import com.microlabs.ess.form.JoiningFormalityForm;
import com.microlabs.ess.form.LeaveForm;
import com.microlabs.ess.form.OnDutyForm;
import com.microlabs.ess.form.PermissionForm;
import com.microlabs.hr.dao.SAPAttendenceDAO;
import com.microlabs.hr.form.EmpOfficalInformationForm;
import com.microlabs.hr.form.HRApprovalForm;
import com.microlabs.hr.form.SAPAttendenceForm;
import com.microlabs.main.action.MailInboxAction;
import com.microlabs.main.db.MainDao;
import com.microlabs.main.form.ApprovalsForm;
import com.microlabs.myrequest.form.MyRequestForm;
import com.microlabs.newsandmedia.dao.NewsandMediaDao;
import com.microlabs.toDoTask.dao.ToDoTaskDao;
import com.microlabs.utilities.EMicroUtils;
import com.microlabs.utilities.UserInfo;
import com.sap.conn.jco.JCoDestination;
import com.sap.conn.jco.JCoDestinationManager;
import com.sap.conn.jco.JCoFunction;
import com.sap.conn.jco.JCoTable;
import com.sap.conn.jco.ext.DestinationDataProvider;



public class HRApprovalAction  extends DispatchAction{

	AttDao ad=new AttDao();
	private ResultSet rs=null;
	private Statement st=null;
	private Connection conn=null;
	private static final String DESTINATION = "SAP_DESTINATION";
	private String query1;
	private String query2;
	private String query3;
	private String query4;
	private String query5;
	private String query6;
	private String query7;

	
	public ActionForward statmusterrollreport(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
		
		Calendar mycal = Calendar.getInstance();
		help.setFrommonth(Integer.toString(mycal.get(Calendar.MONTH) + 1));
		
		
		ArrayList workList=new ArrayList();
		ArrayList workLabelList=new ArrayList();
		ResultSet rs14 = ad.selectQuery("select loc_id," +
				"loc_name from working_location order by loc_name"); 
				try {
					while(rs14.next()) {
						workList.add(rs14.getString("loc_id"));
						workLabelList.add(rs14.getString("loc_name"));
					}
					rs14.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
		help.setWorkList(workList);
		help.setWorkLabelList(workLabelList);
		
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		   ArrayList locationList=new ArrayList();
					ArrayList locationLabelList=new ArrayList();
					ResultSet rs11 = ad.selectQuery("select LOCID," +
							"LOCNAME,location_code from location where location_code in ("+locations+") "); 
							try {
								while(rs11.next()) {
									locationList.add(rs11.getString("location_code"));
									locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
									
								}
								rs11.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							help.setLocationIdList(locationList);
							help.setLocationLabelList(locationLabelList);
	
		
		ArrayList categoryList=new ArrayList();
		ArrayList categoryLabelList=new ArrayList();
		ResultSet rs13 = ad.selectQuery("select STAFFCAT," +
				"CATLTEXT from category order by CATLTEXT "); 
				try {
					while(rs13.next()) {
						categoryList.add(rs13.getString("STAFFCAT"));
						categoryLabelList.add(rs13.getString("CATLTEXT"));
					}
					rs13.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setCategoryList(categoryList);
				help.setCategoryLabelList(categoryLabelList);
		
				ArrayList payGroupList=new ArrayList();
				ArrayList payGroupLabelList=new ArrayList();
				ResultSet rs12 = ad.selectQuery("select Paygroup," +
				"Long_Desc from Paygroup_Master order by Long_Desc"); 
				try {
					while(rs12.next()) {
						payGroupList.add(rs12.getString("Paygroup"));
						payGroupLabelList.add(rs12.getString("Long_Desc"));
					}
					rs12.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setPayGroupList(payGroupList);
				help.setPayGroupLabelList(payGroupLabelList);	
				
				//repgrp
				ArrayList repgrptList=new ArrayList();
				ArrayList repgrpLabelList=new ArrayList();
				ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
						"Grp_LTXT from REPORTING_GROUP   order by Grp_LTXT "); 
						try {
							while(reprs15.next()) {
								repgrptList.add(reprs15.getString("Grp_ID"));
								repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
							}
							reprs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						help.setRepgrpList(repgrptList);
						help.setRepgrpLabelList(repgrpLabelList);
				
	
				ArrayList deptList=new ArrayList();
				ArrayList deptLabelList=new ArrayList();
				ResultSet rs15 = ad.selectQuery("select dptid," +
						"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
				try {
							while(rs15.next()) {
								deptList.add(rs15.getString("dptid"));
								deptLabelList.add(rs15.getString("DPTLTXT"));
							}
							rs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						help.setDeptList(deptList);
						help.setDeptLabelList(deptLabelList);
				
				ArrayList desgList=new ArrayList();
				ArrayList desgLabelList=new ArrayList();
				ResultSet rs16 = ad.selectQuery("select dsgid," +
						"DSGLTXT from DESIGNATION order by DSGLTXT"); 
						try {
							while(rs16.next()) {
								desgList.add(rs16.getString("dsgid"));
								desgLabelList.add(rs16.getString("DSGLTXT"));
							}
							rs16.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
				help.setDesgList(desgList);
				help.setDesgLabelList(desgLabelList);
				
				ArrayList yearList=new ArrayList();
				ResultSet rs17 = ad.selectQuery("select distinct year from EMP_IN_OUT_Status order by year desc"); 
						try {
							while(rs17.next()) {
								yearList.add(rs17.getString("year"));
							}
							rs17.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
				help.setYearList(yearList);
				
				request.setAttribute("result", "result");
				try {
					rs14.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs13.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs12.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					cc.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs16.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					reprs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs17.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return mapping.findForward("musterRollreport");	
	
	}
	
	
	public ActionForward adultworkersreport(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
		
		Calendar mycal = Calendar.getInstance();
		help.setFrommonth(Integer.toString(mycal.get(Calendar.MONTH) + 1));
		
		
		ArrayList workList=new ArrayList();
		ArrayList workLabelList=new ArrayList();
		ResultSet rs14 = ad.selectQuery("select loc_id," +
				"loc_name from working_location order by loc_name"); 
				try {
					while(rs14.next()) {
						workList.add(rs14.getString("loc_id"));
						workLabelList.add(rs14.getString("loc_name"));
					}
					rs14.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
		help.setWorkList(workList);
		help.setWorkLabelList(workLabelList);
		
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		   ArrayList locationList=new ArrayList();
					ArrayList locationLabelList=new ArrayList();
					ResultSet rs11 = ad.selectQuery("select LOCID," +
							"LOCNAME,location_code from location where location_code in ("+locations+") "); 
							try {
								while(rs11.next()) {
									locationList.add(rs11.getString("location_code"));
									locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
									
								}
								rs11.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							help.setLocationIdList(locationList);
							help.setLocationLabelList(locationLabelList);
	
		
		ArrayList categoryList=new ArrayList();
		ArrayList categoryLabelList=new ArrayList();
		ResultSet rs13 = ad.selectQuery("select STAFFCAT," +
				"CATLTEXT from category order by CATLTEXT "); 
				try {
					while(rs13.next()) {
						categoryList.add(rs13.getString("STAFFCAT"));
						categoryLabelList.add(rs13.getString("CATLTEXT"));
					}
					rs13.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setCategoryList(categoryList);
				help.setCategoryLabelList(categoryLabelList);
		
				ArrayList payGroupList=new ArrayList();
				ArrayList payGroupLabelList=new ArrayList();
				ResultSet rs12 = ad.selectQuery("select Paygroup," +
				"Long_Desc from Paygroup_Master order by Long_Desc"); 
				try {
					while(rs12.next()) {
						payGroupList.add(rs12.getString("Paygroup"));
						payGroupLabelList.add(rs12.getString("Long_Desc"));
					}
					rs12.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setPayGroupList(payGroupList);
				help.setPayGroupLabelList(payGroupLabelList);	
				
				//repgrp
				ArrayList repgrptList=new ArrayList();
				ArrayList repgrpLabelList=new ArrayList();
				ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
						"Grp_LTXT from REPORTING_GROUP   order by Grp_LTXT "); 
						try {
							while(reprs15.next()) {
								repgrptList.add(reprs15.getString("Grp_ID"));
								repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
							}
							reprs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						help.setRepgrpList(repgrptList);
						help.setRepgrpLabelList(repgrpLabelList);
				
	
				ArrayList deptList=new ArrayList();
				ArrayList deptLabelList=new ArrayList();
				ResultSet rs15 = ad.selectQuery("select dptid," +
						"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
				try {
							while(rs15.next()) {
								deptList.add(rs15.getString("dptid"));
								deptLabelList.add(rs15.getString("DPTLTXT"));
							}
							rs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						help.setDeptList(deptList);
						help.setDeptLabelList(deptLabelList);
				
				ArrayList desgList=new ArrayList();
				ArrayList desgLabelList=new ArrayList();
				ResultSet rs16 = ad.selectQuery("select dsgid," +
						"DSGLTXT from DESIGNATION order by DSGLTXT"); 
						try {
							while(rs16.next()) {
								desgList.add(rs16.getString("dsgid"));
								desgLabelList.add(rs16.getString("DSGLTXT"));
							}
							rs16.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
				help.setDesgList(desgList);
				help.setDesgLabelList(desgLabelList);
				
				ArrayList yearList=new ArrayList();
				ResultSet rs17 = ad.selectQuery("select distinct year from EMP_IN_OUT_Status order by year desc"); 
						try {
							while(rs17.next()) {
								yearList.add(rs17.getString("year"));
							}
							rs17.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
				help.setYearList(yearList);
				
				request.setAttribute("result", "result");
				try {
					rs14.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs13.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs12.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					cc.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs16.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					reprs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs17.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return mapping.findForward("adultworkersreport");	
	
	}
	
	public ActionForward bonuspaid(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
		
		Calendar mycal = Calendar.getInstance();
		help.setFrommonth(Integer.toString(mycal.get(Calendar.MONTH) + 1));
		
		
		ArrayList workList=new ArrayList();
		ArrayList workLabelList=new ArrayList();
		ResultSet rs14 = ad.selectQuery("select loc_id," +
				"loc_name from working_location order by loc_name"); 
				try {
					while(rs14.next()) {
						workList.add(rs14.getString("loc_id"));
						workLabelList.add(rs14.getString("loc_name"));
					}
					rs14.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
		help.setWorkList(workList);
		help.setWorkLabelList(workLabelList);
		
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		   ArrayList locationList=new ArrayList();
					ArrayList locationLabelList=new ArrayList();
					ResultSet rs11 = ad.selectQuery("select LOCID," +
							"LOCNAME,location_code from location where location_code in ("+locations+") "); 
							try {
								while(rs11.next()) {
									locationList.add(rs11.getString("location_code"));
									locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
									
								}
								rs11.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							help.setLocationIdList(locationList);
							help.setLocationLabelList(locationLabelList);
	
		
		ArrayList categoryList=new ArrayList();
		ArrayList categoryLabelList=new ArrayList();
		ResultSet rs13 = ad.selectQuery("select STAFFCAT," +
				"CATLTEXT from category order by CATLTEXT "); 
				try {
					while(rs13.next()) {
						categoryList.add(rs13.getString("STAFFCAT"));
						categoryLabelList.add(rs13.getString("CATLTEXT"));
					}
					rs13.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setCategoryList(categoryList);
				help.setCategoryLabelList(categoryLabelList);
		
				ArrayList payGroupList=new ArrayList();
				ArrayList payGroupLabelList=new ArrayList();
				ResultSet rs12 = ad.selectQuery("select Paygroup," +
				"Long_Desc from Paygroup_Master order by Long_Desc"); 
				try {
					while(rs12.next()) {
						payGroupList.add(rs12.getString("Paygroup"));
						payGroupLabelList.add(rs12.getString("Long_Desc"));
					}
					rs12.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setPayGroupList(payGroupList);
				help.setPayGroupLabelList(payGroupLabelList);	
				
				//repgrp
				ArrayList repgrptList=new ArrayList();
				ArrayList repgrpLabelList=new ArrayList();
				ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
						"Grp_LTXT from REPORTING_GROUP   order by Grp_LTXT "); 
						try {
							while(reprs15.next()) {
								repgrptList.add(reprs15.getString("Grp_ID"));
								repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
							}
							reprs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						help.setRepgrpList(repgrptList);
						help.setRepgrpLabelList(repgrpLabelList);
				
	
				ArrayList deptList=new ArrayList();
				ArrayList deptLabelList=new ArrayList();
				ResultSet rs15 = ad.selectQuery("select dptid," +
						"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
				try {
							while(rs15.next()) {
								deptList.add(rs15.getString("dptid"));
								deptLabelList.add(rs15.getString("DPTLTXT"));
							}
							rs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						help.setDeptList(deptList);
						help.setDeptLabelList(deptLabelList);
				
				ArrayList desgList=new ArrayList();
				ArrayList desgLabelList=new ArrayList();
				ResultSet rs16 = ad.selectQuery("select dsgid," +
						"DSGLTXT from DESIGNATION order by DSGLTXT"); 
						try {
							while(rs16.next()) {
								desgList.add(rs16.getString("dsgid"));
								desgLabelList.add(rs16.getString("DSGLTXT"));
							}
							rs16.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
				help.setDesgList(desgList);
				help.setDesgLabelList(desgLabelList);
				
				ArrayList yearList=new ArrayList();
				ResultSet rs17 = ad.selectQuery("select distinct year from EMP_IN_OUT_Status order by year desc"); 
						try {
							while(rs17.next()) {
								yearList.add(rs17.getString("year"));
							}
							rs17.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
				help.setYearList(yearList);
				
				request.setAttribute("result", "result");
				try {
					rs14.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs13.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs12.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					cc.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs16.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					reprs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs17.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return mapping.findForward("bonuspaidreport");	
	
	}
	
	public ActionForward equalRenumerationreport(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
		
		Calendar mycal = Calendar.getInstance();
		help.setFrommonth(Integer.toString(mycal.get(Calendar.MONTH) + 1));
		
		
		ArrayList workList=new ArrayList();
		ArrayList workLabelList=new ArrayList();
		ResultSet rs14 = ad.selectQuery("select loc_id," +
				"loc_name from working_location order by loc_name"); 
				try {
					while(rs14.next()) {
						workList.add(rs14.getString("loc_id"));
						workLabelList.add(rs14.getString("loc_name"));
					}
					rs14.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
		help.setWorkList(workList);
		help.setWorkLabelList(workLabelList);
		
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		   ArrayList locationList=new ArrayList();
					ArrayList locationLabelList=new ArrayList();
					ResultSet rs11 = ad.selectQuery("select LOCID," +
							"LOCNAME,location_code from location where location_code in ("+locations+") "); 
							try {
								while(rs11.next()) {
									locationList.add(rs11.getString("location_code"));
									locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
									
								}
								rs11.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							help.setLocationIdList(locationList);
							help.setLocationLabelList(locationLabelList);
	
		
		ArrayList categoryList=new ArrayList();
		ArrayList categoryLabelList=new ArrayList();
		ResultSet rs13 = ad.selectQuery("select STAFFCAT," +
				"CATLTEXT from category order by CATLTEXT "); 
				try {
					while(rs13.next()) {
						categoryList.add(rs13.getString("STAFFCAT"));
						categoryLabelList.add(rs13.getString("CATLTEXT"));
					}
					rs13.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setCategoryList(categoryList);
				help.setCategoryLabelList(categoryLabelList);
		
				ArrayList payGroupList=new ArrayList();
				ArrayList payGroupLabelList=new ArrayList();
				ResultSet rs12 = ad.selectQuery("select Paygroup," +
				"Long_Desc from Paygroup_Master order by Long_Desc"); 
				try {
					while(rs12.next()) {
						payGroupList.add(rs12.getString("Paygroup"));
						payGroupLabelList.add(rs12.getString("Long_Desc"));
					}
					rs12.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setPayGroupList(payGroupList);
				help.setPayGroupLabelList(payGroupLabelList);	
				
				//repgrp
				ArrayList repgrptList=new ArrayList();
				ArrayList repgrpLabelList=new ArrayList();
				ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
						"Grp_LTXT from REPORTING_GROUP   order by Grp_LTXT "); 
						try {
							while(reprs15.next()) {
								repgrptList.add(reprs15.getString("Grp_ID"));
								repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
							}
							reprs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						help.setRepgrpList(repgrptList);
						help.setRepgrpLabelList(repgrpLabelList);
				
	
				ArrayList deptList=new ArrayList();
				ArrayList deptLabelList=new ArrayList();
				ResultSet rs15 = ad.selectQuery("select dptid," +
						"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
				try {
							while(rs15.next()) {
								deptList.add(rs15.getString("dptid"));
								deptLabelList.add(rs15.getString("DPTLTXT"));
							}
							rs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						help.setDeptList(deptList);
						help.setDeptLabelList(deptLabelList);
				
				ArrayList desgList=new ArrayList();
				ArrayList desgLabelList=new ArrayList();
				ResultSet rs16 = ad.selectQuery("select dsgid," +
						"DSGLTXT from DESIGNATION order by DSGLTXT"); 
						try {
							while(rs16.next()) {
								desgList.add(rs16.getString("dsgid"));
								desgLabelList.add(rs16.getString("DSGLTXT"));
							}
							rs16.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
				help.setDesgList(desgList);
				help.setDesgLabelList(desgLabelList);
				
				ArrayList yearList=new ArrayList();
				ResultSet rs17 = ad.selectQuery("select distinct year from EMP_IN_OUT_Status order by year desc"); 
						try {
							while(rs17.next()) {
								yearList.add(rs17.getString("year"));
							}
							rs17.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
				help.setYearList(yearList);
				
				request.setAttribute("result", "result");
				try {
					rs14.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs13.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs12.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					cc.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs16.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					reprs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs17.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return mapping.findForward("equalRenumerationreport");	
	
	}
	
	
	public ActionForward leavewagesreport(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
		
		Calendar mycal = Calendar.getInstance();
		help.setFrommonth(Integer.toString(mycal.get(Calendar.MONTH) + 1));
		
		
		ArrayList workList=new ArrayList();
		ArrayList workLabelList=new ArrayList();
		ResultSet rs14 = ad.selectQuery("select loc_id," +
				"loc_name from working_location order by loc_name"); 
				try {
					while(rs14.next()) {
						workList.add(rs14.getString("loc_id"));
						workLabelList.add(rs14.getString("loc_name"));
					}
					rs14.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
		help.setWorkList(workList);
		help.setWorkLabelList(workLabelList);
		
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		   ArrayList locationList=new ArrayList();
					ArrayList locationLabelList=new ArrayList();
					ResultSet rs11 = ad.selectQuery("select LOCID," +
							"LOCNAME,location_code from location where location_code in ("+locations+") "); 
							try {
								while(rs11.next()) {
									locationList.add(rs11.getString("location_code"));
									locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
									
								}
								rs11.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							help.setLocationIdList(locationList);
							help.setLocationLabelList(locationLabelList);
	
		
		ArrayList categoryList=new ArrayList();
		ArrayList categoryLabelList=new ArrayList();
		ResultSet rs13 = ad.selectQuery("select STAFFCAT," +
				"CATLTEXT from category order by CATLTEXT "); 
				try {
					while(rs13.next()) {
						categoryList.add(rs13.getString("STAFFCAT"));
						categoryLabelList.add(rs13.getString("CATLTEXT"));
					}
					rs13.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setCategoryList(categoryList);
				help.setCategoryLabelList(categoryLabelList);
		
				ArrayList payGroupList=new ArrayList();
				ArrayList payGroupLabelList=new ArrayList();
				ResultSet rs12 = ad.selectQuery("select Paygroup," +
				"Long_Desc from Paygroup_Master order by Long_Desc"); 
				try {
					while(rs12.next()) {
						payGroupList.add(rs12.getString("Paygroup"));
						payGroupLabelList.add(rs12.getString("Long_Desc"));
					}
					rs12.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setPayGroupList(payGroupList);
				help.setPayGroupLabelList(payGroupLabelList);	
				
				//repgrp
				ArrayList repgrptList=new ArrayList();
				ArrayList repgrpLabelList=new ArrayList();
				ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
						"Grp_LTXT from REPORTING_GROUP   order by Grp_LTXT "); 
						try {
							while(reprs15.next()) {
								repgrptList.add(reprs15.getString("Grp_ID"));
								repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
							}
							reprs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						help.setRepgrpList(repgrptList);
						help.setRepgrpLabelList(repgrpLabelList);
				
	
				ArrayList deptList=new ArrayList();
				ArrayList deptLabelList=new ArrayList();
				ResultSet rs15 = ad.selectQuery("select dptid," +
						"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
				try {
							while(rs15.next()) {
								deptList.add(rs15.getString("dptid"));
								deptLabelList.add(rs15.getString("DPTLTXT"));
							}
							rs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						help.setDeptList(deptList);
						help.setDeptLabelList(deptLabelList);
				
		
		
				
				request.setAttribute("result", "result");
				try {
					rs14.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs13.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs12.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					cc.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				try {
					reprs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				return mapping.findForward("displayleavewagesreport");	
	
	}
	
	public ActionForward nationalFestivalreport(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
		
		Calendar mycal = Calendar.getInstance();
		help.setFrommonth(Integer.toString(mycal.get(Calendar.MONTH) + 1));
		
		ArrayList yearList=new ArrayList();
		ResultSet rs17 = ad.selectQuery("select distinct year from EMP_IN_OUT_Status order by year desc"); 
				try {
					while(rs17.next()) {
						yearList.add(rs17.getString("year"));
					}
					rs17.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
		help.setYearList(yearList);
		
		
		ArrayList workList=new ArrayList();
		ArrayList workLabelList=new ArrayList();
		ResultSet rs14 = ad.selectQuery("select loc_id," +
				"loc_name from working_location order by loc_name"); 
				try {
					while(rs14.next()) {
						workList.add(rs14.getString("loc_id"));
						workLabelList.add(rs14.getString("loc_name"));
					}
					rs14.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
		help.setWorkList(workList);
		help.setWorkLabelList(workLabelList);
		
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		   ArrayList locationList=new ArrayList();
					ArrayList locationLabelList=new ArrayList();
					ResultSet rs11 = ad.selectQuery("select LOCID," +
							"LOCNAME,location_code from location where location_code in ("+locations+") "); 
							try {
								while(rs11.next()) {
									locationList.add(rs11.getString("location_code"));
									locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
									
								}
								rs11.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							help.setLocationIdList(locationList);
							help.setLocationLabelList(locationLabelList);
	
		
		ArrayList categoryList=new ArrayList();
		ArrayList categoryLabelList=new ArrayList();
		ResultSet rs13 = ad.selectQuery("select STAFFCAT," +
				"CATLTEXT from category order by CATLTEXT "); 
				try {
					while(rs13.next()) {
						categoryList.add(rs13.getString("STAFFCAT"));
						categoryLabelList.add(rs13.getString("CATLTEXT"));
					}
					rs13.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setCategoryList(categoryList);
				help.setCategoryLabelList(categoryLabelList);
		
				ArrayList payGroupList=new ArrayList();
				ArrayList payGroupLabelList=new ArrayList();
				ResultSet rs12 = ad.selectQuery("select Paygroup," +
				"Long_Desc from Paygroup_Master order by Long_Desc"); 
				try {
					while(rs12.next()) {
						payGroupList.add(rs12.getString("Paygroup"));
						payGroupLabelList.add(rs12.getString("Long_Desc"));
					}
					rs12.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setPayGroupList(payGroupList);
				help.setPayGroupLabelList(payGroupLabelList);	
				
				//repgrp
				ArrayList repgrptList=new ArrayList();
				ArrayList repgrpLabelList=new ArrayList();
				ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
						"Grp_LTXT from REPORTING_GROUP   order by Grp_LTXT "); 
						try {
							while(reprs15.next()) {
								repgrptList.add(reprs15.getString("Grp_ID"));
								repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
							}
							reprs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						help.setRepgrpList(repgrptList);
						help.setRepgrpLabelList(repgrpLabelList);
				
	
				ArrayList deptList=new ArrayList();
				ArrayList deptLabelList=new ArrayList();
				ResultSet rs15 = ad.selectQuery("select dptid," +
						"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
				try {
							while(rs15.next()) {
								deptList.add(rs15.getString("dptid"));
								deptLabelList.add(rs15.getString("DPTLTXT"));
							}
							rs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						help.setDeptList(deptList);
						help.setDeptLabelList(deptLabelList);
				
		
		
				
				request.setAttribute("result", "result");
				try {
					rs14.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs13.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs12.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					cc.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				try {
					reprs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				return mapping.findForward("nationalFestivalreport");	
	
	}
	
	public ActionForward statutoryreports(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
		HRApprovalForm help = (HRApprovalForm) form;
		HttpSession sesion=request.getSession();
		UserInfo user=(UserInfo)sesion.getAttribute("user");
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		
		LinkedList StatIDList=new LinkedList();
		LinkedList StatNameList=new LinkedList();
		ResultSet rs14 = ad.selectQuery("select * from STATUTORY_REPORTS where location in ("+locations+")"); 
	
				try {
					while(rs14.next()) {
						StatIDList.add(rs14.getString("Form_Num"));
						StatNameList.add(rs14.getString("Form_Num")+" - "+rs14.getString("Report_Name"));
					}
					rs14.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
		help.setStatId(StatIDList);
		help.setStatName(StatNameList);
		
		
		if(help.getForm_type()!=null)
		{
			if(!help.getForm_type().equalsIgnoreCase(""))
			{
				if(help.getForm_type().equalsIgnoreCase("FORM 15"))
				{
					leavewagesreport(mapping, form, request, response);
					return mapping.findForward("displayleavewagesreport");
				}
				if(help.getForm_type().equalsIgnoreCase("FORM 06"))
				{
					nationalFestivalreport(mapping, form, request, response);
					return mapping.findForward("nationalFestivalreport");
				}
				if(help.getForm_type().equalsIgnoreCase("FORM 25"))
				{
					statmusterrollreport(mapping, form, request, response);
					return mapping.findForward("musterRollreport");
				}
				if(help.getForm_type().equalsIgnoreCase("FORM 11"))
				{
					adultworkersreport(mapping, form, request, response);
					return mapping.findForward("adultworkersreport");
				}
				if(help.getForm_type().equalsIgnoreCase("FORM D"))
				{
					equalRenumerationreport(mapping, form, request, response);
					return mapping.findForward("equalRenumerationreport");
				}
				if(help.getForm_type().equalsIgnoreCase("FORM C"))
				{
					bonuspaid(mapping, form, request, response);
					return mapping.findForward("bonuspaidreport");
				}
			}
			
		}
		
		
		
		return mapping.findForward("statutoryReport");
	}
	
	public String Empfathername(String a)
	{
		
		String b = "";
		if(a==null)
		{
		  return b;	
		}
		
		if(!a.equalsIgnoreCase(""))
		{	
			
		
		String emp = "select f_first_name+''+f_middle_name+''+f_last_name  as father from emp_family_details where family_dependent_type_id=2 and user_id='"+a+"'";
		ResultSet rs = ad.selectQuery(emp);
		try {
			if(rs.next())
			{
				b=rs.getString("father"); 
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		}
		
		
		return b;
		
	}
 	private String[] empAddressDet( String empno) {
 		
		String[] a = new String[10];
 
		if(empno==null)
		{
		  return a;	
		}
		if(!empno.equalsIgnoreCase(""))
		{
		String emp=" select house_no,address_line1,address_line2,address_line3,postal_code,a_city,BEZEI,a_country from emp_address,State where a_state=bland and a_country=LAND1 "
				+ "  and user_id='"+empno+"' and address_type='003'";
						
		ResultSet ae=ad.selectQuery(emp);


	
		try {
			while(ae.next())
			{
			
			

			    a[0]=ae.getString("house_no");
			    a[1]=ae.getString("address_line1");
			    a[2]=ae.getString("address_line2");
			    a[3]=ae.getString("address_line3");
			    a[4]=ae.getString("postal_code");
			    a[5]=ae.getString("a_city");
			    a[6]=ae.getString("BEZEI");
			    a[7]=ae.getString("a_country");
		


			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		}
		return a;
		}
 
	
	public String Empname(String a)
	{
		
		String b = "";
		if(a==null)
		{
		  return b;	
		}
		
		if(!a.equalsIgnoreCase(""))
		{	
			
		
		String emp = "select EMP_FULLNAME from emp_official_info where pernr = '"+a+"'";
		ResultSet rs = ad.selectQuery(emp);
		try {
			if(rs.next())
			{
				b=rs.getString("emp_fullname"); 
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		}
		
		
		return b;
		
	}
	
	
	public ActionForward empManualAuditreportexe(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
				HttpServletResponse response) {
		
		try {
			Thread.sleep(2000);
		} catch (InterruptedException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} 
		
		HRApprovalForm help = (HRApprovalForm) form;
		
		int i = 0;
	    ArrayList llist = new ArrayList();
		
		ResultSet rsk = ad.selectQuery(query7);
		try {
			while(rsk.next())
			{
				i++;
				HRApprovalForm help1 = new HRApprovalForm();
				help1.setEmployeeno(rsk.getString("pernr"));
				help1.setEmployeeName(rsk.getString("EMP_FULLNAME"));
				help1.setStartDate(rsk.getString("Startdate"));
				if(rsk.getString("in_out").equalsIgnoreCase("I"))
					help1.setSwipe_Type("IN");	
				if(rsk.getString("in_out").equalsIgnoreCase("O"))
				help1.setSwipe_Type("OUT");
				help1.setReason_Type(rsk.getString("lost_entry_reason_Type"));
				if(rsk.getString("start")!=null)
				help1.setTime(rsk.getString("start").substring(0, 5));
				help1.setRemarks(rsk.getString("remarks"));
				help1.setDate(rsk.getString("Created_date1"));
				help1.setDepartment(rsk.getString("DPTSTXT"));
				help1.setDesignation(rsk.getString("DSGSTXT"));
				help1.setEmployeeNumber(Empname(rsk.getString("Username")));
				help1.setId(rsk.getString("ip_addr"));
				if(rsk.getString("prev_time")!=null)
				help1.setPrev_time(rsk.getString("prev_time").substring(0, 5));
				help1.setLocationId(rsk.getString("locid"));
				help1.setDate(rsk.getString("createddate"));
				help.setMonth(rsk.getString("mon"));
				
				llist.add(help1);

			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		request.setAttribute("llist", llist);
		
		try {
			rsk.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return mapping.findForward("displayempManualAuditreport");
		
	}
	
	public ActionForward empManualAuditreport(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		HRApprovalForm help = (HRApprovalForm) form;
		HttpSession sesion=request.getSession();
		UserInfo user=(UserInfo)sesion.getAttribute("user");
		
		
		
		String selectedmon=help.getFrommonth();
		String selectedyear=help.getYear();
	
		
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		ArrayList locationList=new ArrayList();
		ArrayList locationLabelList=new ArrayList();
		ResultSet rs11 = ad.selectQuery("select LOCID," +
				"LOCNAME,location_code from location where location_code in ("+locations+") "); 
				try {
					while(rs11.next()) {
						locationList.add(rs11.getString("location_code"));
						locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
						
					}
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setLocationIdList(locationList);
				help.setLocationLabelList(locationLabelList);
				
				
		ArrayList yearList=new ArrayList();
		
		ResultSet rs17 = ad.selectQuery("select  year from EMP_IN_OUT_Status group by year order by 1 desc"); 
				try {
					while(rs17.next()) {
						yearList.add(rs17.getString("year"));
					}
					rs17.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setYearList(yearList);
		
		request.setAttribute("result", "result");
		
		try {
			rs11.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs17.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			cc.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
			return mapping.findForward("empManualAuditreport");
	}
	
	public ActionForward empManualAuditreportSearch(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		HRApprovalForm approvalsForm = (HRApprovalForm) form;
		HttpSession sesion=request.getSession();
		UserInfo user=(UserInfo)sesion.getAttribute("user");
		
		
		String location = approvalsForm.getLocationId();
		String year= approvalsForm.getYear();
		String[] month=approvalsForm.getMonths();
		
		
		String ACtualmonth="";
	    if(month.length>0)
	    {	
	    
	    StringBuffer reqmonth = new StringBuffer();
		for (int i = 0; i < month.length; i++) {
			reqmonth.append("'"+month[i]+"'" + ",");
		}
		ACtualmonth= reqmonth.substring(0, reqmonth.length() - 1).toString();
	    }
		
		 query7="select left(DATENAME(MONTH,start_date),3) as mon,CONVERT(varchar(10),EMP_MANUAL_SWIPE.created_date,103)+' '+ CONVERT(varchar(5),EMP_MANUAL_SWIPE."
		 		+ "created_date,108) as createddate , designation.DSGSTXT,department.DPTSTXT, CONVERT(varchar(10),Start_date,103) as Startdate ,EMP_MANUAL_SWIPE. *,emp_official_info.locid ,emp_official_info.EMP_FULLNAME,CONVERT(varchar(10),EMP_MANUAL_SWIPE.Created_date,103)+' '+ CONVERT(varchar(5),EMP_MANUAL_SWIPE.Created_date,108) as Created_date1 "
				+ "   from EMP_MANUAL_SWIPE,emp_official_info , emp_official_info e , designation,department where EMP_MANUAL_SWIPE.Pernr=emp_official_info.pernr  "
						+ "and month(start_date) in ("+ACtualmonth+") and year(start_date)='"+year+"' and emp_official_info.LOCID='"+location+"'  "
						+ "  and EMP_MANUAL_SWIPE.username=e.pernr and designation.dsgid=e.DSGID and department.dptid = e.DPTID  order by date desc ";
		
		empManualAuditreport(mapping, approvalsForm, request, response);
		
		return mapping.findForward("empManualAuditreportSearch");
	}
	
	public ActionForward exportempManualAuditreportSearch(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		HRApprovalForm approvalsForm = (HRApprovalForm) form;
		HttpSession sesion=request.getSession();
		UserInfo user=(UserInfo)sesion.getAttribute("user");
		Date dNow = new Date( );
		SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd");
		String exportdate=ft.format(dNow);

		response.setHeader("Content-Disposition", "inline; filename="+exportdate+"_Manual_Entry_Audit_Report.xls");
		
		String location = approvalsForm.getLocationId();
		String year= approvalsForm.getYear();
		String[] month=approvalsForm.getMonths();
		
		
		String ACtualmonth="";
	    if(month.length>0)
	    {	
	    
	    StringBuffer reqmonth = new StringBuffer();
		for (int i = 0; i < month.length; i++) {
			reqmonth.append("'"+month[i]+"'" + ",");
		}
		ACtualmonth= reqmonth.substring(0, reqmonth.length() - 1).toString();
	    }
		
		 query7="select left(DATENAME(MONTH,start_date),3) as mon,CONVERT(varchar(10),EMP_MANUAL_SWIPE.created_date,103)+' '+ CONVERT(varchar(5),EMP_MANUAL_SWIPE."
		 		+ "created_date,108) as createddate , designation.DSGSTXT,department.DPTSTXT, CONVERT(varchar(10),Start_date,103) as Startdate ,EMP_MANUAL_SWIPE. *,emp_official_info.locid ,emp_official_info.EMP_FULLNAME,CONVERT(varchar(10),EMP_MANUAL_SWIPE.Created_date,103)+' '+ CONVERT(varchar(5),EMP_MANUAL_SWIPE.Created_date,108) as Created_date1 "
				+ "   from EMP_MANUAL_SWIPE,emp_official_info , emp_official_info e , designation,department where EMP_MANUAL_SWIPE.Pernr=emp_official_info.pernr  "
						+ "and month(start_date) in ("+ACtualmonth+") and year(start_date)='"+year+"' and emp_official_info.LOCID='"+location+"'  "
						+ "  and EMP_MANUAL_SWIPE.username=e.pernr and designation.dsgid=e.DSGID and department.dptid = e.DPTID  order by date desc ";
		
		empManualAuditreport(mapping, approvalsForm, request, response);
		
		
		int i = 0;
	    ArrayList llist = new ArrayList();
		
		ResultSet rsk = ad.selectQuery(query7);
		try {
			while(rsk.next())
			{
				i++;
				HRApprovalForm help1 = new HRApprovalForm();
				help1.setEmployeeno(rsk.getString("pernr"));
				help1.setEmployeeName(rsk.getString("EMP_FULLNAME"));
				help1.setStartDate(rsk.getString("Startdate"));
				if(rsk.getString("in_out").equalsIgnoreCase("I"))
					help1.setSwipe_Type("IN");	
				if(rsk.getString("in_out").equalsIgnoreCase("O"))
				help1.setSwipe_Type("OUT");
				help1.setReason_Type(rsk.getString("lost_entry_reason_Type"));
				if(rsk.getString("start")!=null)
					help1.setTime(rsk.getString("start").substring(0, 5));	
				help1.setRemarks(rsk.getString("remarks"));
				help1.setDate(rsk.getString("Created_date1"));
				help1.setDepartment(rsk.getString("DPTSTXT"));
				help1.setDesignation(rsk.getString("DSGSTXT"));
				help1.setEmployeeNumber(Empname(rsk.getString("Username")));
				help1.setId(rsk.getString("ip_addr"));
				if(rsk.getString("prev_time")!=null)
					help1.setPrev_time(rsk.getString("prev_time").substring(0, 5));
				help1.setLocationId(rsk.getString("locid"));
				help1.setDate(rsk.getString("createddate"));
				approvalsForm.setMonth(rsk.getString("mon"));
				llist.add(help1);

			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		request.setAttribute("llist", llist);
		
		try {
			rsk.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return mapping.findForward("exportempManualAuditreportSearch");
	}
	
	
	public String insertTEMPEMP(String query) throws Exception {
		String datecurrent="";
		synchronized (this) {
			
		
		
		DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
		Calendar cal1 = Calendar.getInstance();							
		 datecurrent=dateFormat.format(cal1.getTime());
	  
	////insert empNos
		String insert="insert into Temp_Emp(Pernr,Date_Time,Swipe_count) select pernr,'"+datecurrent+"',Swipe_count from ("+query+ ")t";
		int bqb=ad.SqlExecuteUpdate(insert);	
		System.out.println(insert);
		
	}
		
		return datecurrent;
	}
	
	
	public ActionForward downloadExceltemplate(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		
	
		HRApprovalForm approvalsForm = (HRApprovalForm) form;
		Date dNow = new Date( );
		SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd");
		String exportdate=ft.format(dNow);

		response.setHeader("Content-Disposition", "inline; filename="+exportdate+"_Shift_Register_Template.xls");
		
		
		ArrayList yearList=new ArrayList();
		ResultSet rs17 = ad.selectQuery("select distinct year from EMP_IN_OUT_Status  order by year desc"); 
				try {
					while(rs17.next()) {
						yearList.add(rs17.getString("year"));
					}
					rs17.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				approvalsForm.setYearList(yearList);
				
				HttpSession session=request.getSession();
				UserInfo user=(UserInfo)session.getAttribute("user");
				
				String cmpcode="";
				int id=user.getGroupId();
				String cmp[]=new String[0]; 
				String locations="";
				
				String aa="select * from user_group where id='"+id+"'";
				ResultSet cc=ad.selectQuery(aa);
				try {
					if(cc.next())
					{
						cmpcode=cc.getString("Attendance_Loc");
						
						if(cmpcode.contains(","))
						{
						 cmp=cmpcode.split(",");
						
						for(int b=0;b<cmp.length;b++)
						{
							locations=locations+"'"+cmp[b]+"',";
						}
						
						locations=locations.substring(0, locations.length()-1);
						}
						else
						{
							locations="'"+cmpcode+"'";
						}
					}
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
		
		ArrayList locationList=new ArrayList();
		ArrayList locationLabelList=new ArrayList();
		ResultSet rs11 = ad.selectQuery("select LOCID," +
				"LOCNAME,location_code from location where location_code in ("+locations+") "); 
				try {
					while(rs11.next()) {
						locationList.add(rs11.getString("location_code"));
						locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
						
					}
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				approvalsForm.setLocationIdList(locationList);
				approvalsForm.setLocationLabelList(locationLabelList);
		
	
				ArrayList payGroupList=new ArrayList();
				ArrayList payGroupLabelList=new ArrayList();
				ResultSet rs12 = ad.selectQuery("select Paygroup," +
						"Long_Desc from Paygroup_Master order by Long_Desc "); 
						try {
							while(rs12.next()) {
								payGroupList.add(rs12.getString("Paygroup"));
								payGroupLabelList.add(rs12.getString("Long_Desc"));
							}
							rs12.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
				approvalsForm.setPayGroupList(payGroupList);
				approvalsForm.setPayGroupLabelList(payGroupLabelList);
				
				ArrayList categoryList=new ArrayList();
				ArrayList categoryLabelList=new ArrayList();
				ResultSet rs13 = ad.selectQuery("select STAFFCAT," +
						"CATLTEXT from category order by CATLTEXT"); 
						try {
							while(rs13.next()) {
								categoryList.add(rs13.getString("STAFFCAT"));
								categoryLabelList.add(rs13.getString("CATLTEXT"));
							}
							rs13.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
				approvalsForm.setCategoryList(categoryList);
				approvalsForm.setCategoryLabelList(categoryLabelList);
				
				
				ArrayList workList=new ArrayList();
				ArrayList workLabelList=new ArrayList();
				ResultSet rs14 = ad.selectQuery("select loc_id," +
						"loc_name from working_location order by loc_name"); 
						try {
							while(rs14.next()) {
								workList.add(rs14.getString("loc_id"));
								workLabelList.add(rs14.getString("loc_name"));
							}
							rs14.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
				approvalsForm.setWorkList(workList);
				approvalsForm.setWorkLabelList(workLabelList);
				
				
				ArrayList shiftList=new ArrayList();
				ArrayList shiftLabelList=new ArrayList();
				ResultSet rs15 = ad.selectQuery("select shift_code," +
						"Shift_Name from EMP_SHIFT_MASTER order by shift_name "); 
						try {
							while(rs15.next()) {
								shiftList.add(rs15.getString("shift_code"));
								shiftLabelList.add(rs15.getString("Shift_Name"));
							}
							rs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
				approvalsForm.setShiftList(shiftList);
				approvalsForm.setShiftLabelList(shiftLabelList);
				
				ArrayList deptList=new ArrayList();
				ArrayList deptLabelList=new ArrayList();
				ResultSet rs16 = ad.selectQuery("select dptid," +
						"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
						try {
							while(rs16.next()) {
								deptList.add(rs16.getString("dptid"));
								deptLabelList.add(rs16.getString("DPTLTXT"));
							}
							rs16.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						approvalsForm.setDeptList(deptList);
						approvalsForm.setDeptLabelList(deptLabelList);
				
						
						String ACtualdept="";
					    if(approvalsForm.getDeptArray()!=null)
					    {	
					    String[] dept = approvalsForm.getDeptArray();
					    
					    StringBuffer reqdept = new StringBuffer();
						for (int i = 0; i < dept.length; i++) {
							reqdept.append("'"+dept[i]+"'" + ",");
						}
						 ACtualdept= reqdept.substring(0, reqdept.length() - 1).toString();
					    }
					    
					    
						//repgrp
						ArrayList repgrptList=new ArrayList();
						ArrayList repgrpLabelList=new ArrayList();
						ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
								"Grp_LTXT from REPORTING_GROUP   order by Grp_LTXT "); 
								try {
									while(reprs15.next()) {
										repgrptList.add(reprs15.getString("Grp_ID"));
										repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
									}
									reprs15.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								
								approvalsForm.setRepgrpList(repgrptList);
								approvalsForm.setRepgrpLabelList(repgrpLabelList);
				
			    String ACtualloc="";
			    if(approvalsForm.getLocArray()!=null)
			    {
			    
				String[] loc = approvalsForm.getLocArray();
			    StringBuffer reqloc = new StringBuffer();
				for (int i = 0; i < loc.length; i++) {
					reqloc.append("'"+loc[i]+"'" + ",");
				}
				ACtualloc = reqloc.substring(0, reqloc.length() - 1).toString();
			    
			    }
			    
			    String ACtualpay="";
			    if(approvalsForm.getPayArray()!=null)
			    {
			    
				String[] pay = approvalsForm.getPayArray();
			    StringBuffer reqpay = new StringBuffer();
				for (int i = 0; i < pay.length; i++) {
					reqpay.append("'"+pay[i]+"'" + ",");
				}
				ACtualpay = reqpay.substring(0, reqpay.length() - 1).toString();
			    
			    }
			    
			    //catArray
			    String ACtualcat="";
			    if(approvalsForm.getCatArray()!=null)
			    {
			    
				String[] cat = approvalsForm.getCatArray();
			    StringBuffer reqcat = new StringBuffer();
				for (int i = 0; i < cat.length; i++) {
					reqcat.append("'"+cat[i]+"'" + ",");
				}
				ACtualcat = reqcat.substring(0, reqcat.length() - 1).toString();
			    
			    }
				
			    
			    //reporting
			    
			    String ACtualrepgrp="";
			    if(approvalsForm.getRepgrpArray()!=null)
			    {	
			    String[] repgrp = approvalsForm.getRepgrpArray();
			    
			    StringBuffer reqrepgrp = new StringBuffer();
				for (int i = 0; i < repgrp.length; i++) {
					reqrepgrp.append("'"+repgrp[i]+"'" + ",");
				}
				ACtualrepgrp= reqrepgrp.substring(0, reqrepgrp.length() - 1).toString();
			    }
			    
			    LinkedList shiftlist = new LinkedList();
			    LinkedList list = new LinkedList();
				String query1="select pernr from emp_official_info ,location ,DEPARTMENT ,DESIGNATION where Location.LOCATION_CODE=emp_official_info.LOCID and "
						+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID";
				String sqlfromdate="";
				String sqltodate="";
				
				
					
				if(!approvalsForm.getLocationId().equalsIgnoreCase(""))
				{
					query1=query1+" and emp_official_info.LOCID = '"+approvalsForm.getLocationId()+"' ";
				
				}
				
					
				if(!ACtualloc.equalsIgnoreCase(""))
				{
					query1=query1+" and emp_official_info.Work_ID in("+ACtualloc+") ";
				
				}
					
				if(!ACtualpay.equalsIgnoreCase(""))
				{
					query1=query1+" and emp_official_info.PAY_GROUP in("+ACtualpay+")  ";
				
				}

				if(!ACtualcat.equalsIgnoreCase(""))
				{
					query1=query1+" and emp_official_info.STAFFCAT in ("+ACtualcat+") ";
				
				}
				
				if(!ACtualdept.equalsIgnoreCase(""))
				{
					query1=query1+" and emp_official_info.DPTID in ("+ACtualdept+") ";
				}
				
				if(!ACtualrepgrp.equalsIgnoreCase(""))
				{
					query1=query1+" and emp_official_info.Reporting_Grp in("+ACtualrepgrp+") ";
				
				}
				
				if(!approvalsForm.getFromDate().equalsIgnoreCase(""))
				{
					String from[]=approvalsForm.getFromDate().split("/");
				    sqlfromdate=from[2]+"-"+from[1]+"-"+from[0]; 
				    
				    String to[]=approvalsForm.getToDate().split("/");
				    sqltodate=to[2]+"-"+to[1]+"-"+to[0];
				    
				    query1=query1+" and doj between '"+sqlfromdate+"' and '"+sqltodate+"' ";
					
				}
				
				
				if(!approvalsForm.getFrompernr().equalsIgnoreCase(""))
				{
					query1=query1+" and emp_official_info.pernr = '"+approvalsForm.getFrompernr()+"'  ";
				
				}
				query1=query1+" and ACTIVE =1 ";
				
				String abc="select * from EMP_Shift_Register where Month='"+approvalsForm.getMonth()+"' and Year='"+approvalsForm.getYear()+"' and Pernr in("+query1+")";
			
				ResultSet rs = ad.selectQuery(abc);
				try {
					while(rs.next())
					{
						
						HRApprovalForm help = new HRApprovalForm();
						help.setEmployeeno(Integer.toString(getPunchNo(Integer.parseInt(rs.getString("pernr")))));
						help.setMonth(rs.getString("Month"));
						help.setYear(rs.getString("year"));
						help.setDay1(rs.getString("day1"));								
						help.setDay2(rs.getString("day2"));
						help.setDay3(rs.getString("day3"));
						help.setDay4(rs.getString("day4"));
						help.setDay5(rs.getString("day5"));
						help.setDay6(rs.getString("day6"));
						help.setDay7(rs.getString("day7"));
						help.setDay8(rs.getString("day8"));
						help.setDay9(rs.getString("day9"));
						help.setDay10(rs.getString("day10"));
						help.setDay11(rs.getString("day11"));
						help.setDay12(rs.getString("day12"));
						help.setDay13(rs.getString("day13"));
						help.setDay14(rs.getString("day14"));
						help.setDay15(rs.getString("day15"));
						help.setDay16(rs.getString("day16"));
						help.setDay17(rs.getString("day17"));
						help.setDay18(rs.getString("day18"));
						help.setDay19(rs.getString("day19"));
						help.setDay20(rs.getString("day20"));
						help.setDay21(rs.getString("day21"));
						help.setDay22(rs.getString("day22"));
						help.setDay23(rs.getString("day23"));
						help.setDay24(rs.getString("day24"));
						help.setDay25(rs.getString("day25"));
						help.setDay26(rs.getString("day26"));
						help.setDay27(rs.getString("day27"));
						help.setDay28(rs.getString("day28"));
						help.setDay29(rs.getString("day29"));
						help.setDay30(rs.getString("day30"));
						help.setDay31(rs.getString("day31"));
						list.add(help);

					}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				String shift="select Shift_code,Shift_Name,Shift_start_time,Shift_End_Time from EMP_SHIFT_MASTER where loc like '%"+approvalsForm.getLocationId()+"%' order by 1";
				ResultSet ab = ad.selectQuery(shift);
				try {
					while(ab.next())
					{
						HRApprovalForm help = new HRApprovalForm();
					    help.setSh(ab.getFloat("Shift_code"));
						help.setShift(ab.getString("Shift_Name"));
						help.setStartTime(ab.getString("Shift_start_time"));
						help.setEndTime(ab.getString("Shift_End_Time"));
						shiftlist.add(help);
					}
				}catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					
				request.setAttribute("list", list);
				request.setAttribute("shiftlist", shiftlist);
				
				try {
					rs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs16.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					ab.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs13.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					cc.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs14.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs17.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				try {
					rs12.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				try {
					rs.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				try {
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
		return mapping.findForward("exportshifttemp");
	}
	
	public int getActualEmpNo(int pernr) throws Exception {
		
		int emp=0;
		
		
		String per="Select pernr from emp_official_info where (PERNR='"+pernr+"' or Swipe_No='"+pernr+"')";
		ResultSet a=ad.selectQuery(per);
			if(a.next())	
			{
			emp=a.getInt("pernr");
				}
		
			try {
				a.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			
		return emp;
	}
	
	
	
	public int getPunchNo(int pernr) throws Exception {
		
		int emp=0;
		
		
		String per="Select case when Swipe_No=0 then PERNR else isnULL(Swipe_No,pernr) end as pernr from emp_official_info where PERNR='"+pernr+"'";
		ResultSet a=ad.selectQuery(per);
			if(a.next())	
			{
			emp=a.getInt("pernr");
				}
		
			try {
				a.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		return emp;
	}
	
	
	public ActionForward uploadManualFileAction(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		HRApprovalForm approvalsForm=(HRApprovalForm)form;
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		if(user==null){
			request.setAttribute("message","Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}

		FormFile f1 = approvalsForm.getDocumentFile();  
		String documentName=f1.getFileName();
		if(!f1.getFileName().equalsIgnoreCase(""))
		{
			
			 String ext = documentName.substring(documentName.lastIndexOf('.') + 1);
				

				if((ext.equalsIgnoreCase("xls")||ext.equalsIgnoreCase("xlsx")))
				{	
			
		InputStream is = new BufferedInputStream(f1.getInputStream());  
		XSSFWorkbook workbook =new XSSFWorkbook(is);
		

		
		int numberOfSheets = workbook.getNumberOfSheets();
		//loop through each of the sheets
	    boolean rowskip=false;
		int count=0;
		int j=0;
		for(int i=0; i < numberOfSheets; i++){
			
			//Get the nth sheet from the workbook
			XSSFSheet sheet = workbook.getSheetAt(i);
			int noofrows=sheet.getLastRowNum();
	        System.out.println(	noofrows);
			

	
			//every sheet has rows, iterate over them
			Iterator<org.apache.poi.ss.usermodel.Row> rowIterator = sheet.iterator();
			 LinkedList list = new LinkedList();
			 org.apache.poi.ss.usermodel.Row row=null;
			 row = rowIterator.next();
				//two time iterate
			 row = rowIterator.next();
		
			 
			while (rowIterator.hasNext()) 
	        {
			
				if(count<noofrows)
				{
				
			    row = rowIterator.next();
				//Every row has columns, get the column iterator and iterate over them
				
				Iterator<org.apache.poi.ss.usermodel.Cell> cellIterator = row.cellIterator();
				
				
				if(cellIterator!=null)
				{
	           
				  i = 0;
				 HRApprovalForm per=new HRApprovalForm();  
	            while (cellIterator.hasNext()) 
	            {
	            	
	            	i++;
	            	         
	            	// Get the Cell object
	            	org.apache.poi.ss.usermodel.Cell cell = cellIterator.next();
	            	
	            	if(i==6)
	            	{
	            		break;
	            	}
	            	if(i == 1)
	            	{
	            	
	            	per.setEmployeeNo(Integer.toString((int)cell.getNumericCellValue()));
	            	}
	            	
	            	if(i == 2)
	            	{
	            		DateFormat df = new SimpleDateFormat("yyyy-MM-dd");         		        
	            		
	            		String reportDate = df.format(cell.getDateCellValue());	            	
	            		 per.setDate(reportDate);
	            	}
	            	if(i == 3)
	            	{
	            		 per.setSwipe_Type(cell.getStringCellValue());
	            	}
	            	
	            	if(i == 4)
	            	{
	            		
	            		 per.setTime(cell.getStringCellValue().trim());
	            	}
	            	
	            	if(i == 5)
	            	{
	            		 per.setReason_Type(cell.getStringCellValue());
	            	}
				
	            	
	            	
	            	
	            	
	            }
	            list.add(per);
				}
				count++;
//end of cell iterator
				}
				else
				{
					break;
				}
	        
	        } //end of rows iterator
			
			 DateFormat dateFormat1 = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
				Calendar cal11 = Calendar.getInstance();							
				String datecurren11t=dateFormat1.format(cal11.getTime());
	int a=uploadManualTempData(list, request, datecurren11t);
	if(a==0)
	{
		uploadfinalManualFile(list, request, datecurren11t);
		approvalsForm.setMessage("Data Uploaded Succesfully");
	}
	else
	{
		approvalsForm.setMessage("List Contains employees who does not belong to your location ..Delete those records and upload again");
	}
	
	
	
	String kq="delete EMP_MANUAL_SWIPE_test where Created_date='"+datecurren11t+"'";
	int y=ad.SqlExecuteUpdate(kq);
	
			
		} 
		
		
					
				}
				else
				{
approvalsForm.setMessage   ("Please upload only xls,xlsx extension files");
				
					return mapping.findForward("manual_entry");
				}
		}
		
		else
		{
			approvalsForm.setMessage("Please upload File");

			return mapping.findForward("manual_entry");
		}

	
	return mapping.findForward("manual_entry");
		
	}
	
	
	
	public ActionForward uploadFileAction(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		HRApprovalForm approvalsForm=(HRApprovalForm)form;
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		if(user==null){
			request.setAttribute("message","Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
	int chk=0;
	try 
	{
		
		FormFile f1 = approvalsForm.getDocumentFile();  
		InputStream is = new BufferedInputStream(f1.getInputStream());  
		XSSFWorkbook workbook =new XSSFWorkbook(is);
		
		int numberOfSheets = workbook.getNumberOfSheets();
		//loop through each of the sheets
	    boolean rowskip=false;
	    
	    boolean skiploop=false;
		
		int j=0;
		for(int i=0; i < numberOfSheets; i++){
			
			//Get the nth sheet from the workbook
			XSSFSheet sheet = workbook.getSheetAt(i);
			
		/*	String a="select count(*)+3 as co from EMP_SHIFT_MASTER";
			ResultSet c=ad.selectQuery(a);
			if(c.next())
			{
				count=c.getInt(1);
			}*/
			
			String text1="Shift Code";
			String text="Employee No";
			  int k=0;
			   for(Row row : sheet) {
				 
				   k=k+1;
				   if(skiploop==true)
				   {
					   break;
				   }
			        for(Cell cell : row) {
			        	
			        	if(cell.getCellType()==cell.CELL_TYPE_NUMERIC)
			            {
			        		 row = sheet.iterator().next();
                         break;
			            }
			        	if(text1.equals(cell.getStringCellValue()))
			            {
			        		 row = sheet.iterator().next();
                         break;
			            }
			            if(text.equals(cell.getStringCellValue()))
			            {
			            	System.out.println(k);
			            	
			            	skiploop=true;
			                break;
			            }
			                
			        }
			        System.out.println(k);
			   }
			
			//every sheet has rows, iterate over them
			Iterator<org.apache.poi.ss.usermodel.Row> rowIterator = sheet.iterator();
			 LinkedList list = new LinkedList();
			while (rowIterator.hasNext()) 
	        {
				
				org.apache.poi.ss.usermodel.Row row=null;
				
				if(rowskip==true)
				{
					
					list.removeLast();
					break;
					
				}
				
				if(j<(k-1))
				{
					 row = rowIterator.next();
					j++;
				}
			


				else
				{
					 row = rowIterator.next();
				//Every row has columns, get the column iterator and iterate over them
				
				Iterator<org.apache.poi.ss.usermodel.Cell> cellIterator = row.cellIterator();
				
				
				if(cellIterator!=null)
				{
	           
				  i = 0;
				  HRApprovalForm per=new HRApprovalForm();  
	            while (cellIterator.hasNext()) 
	            {
	            	
	            	i++;
	            	System.out.println(i);
	            	// Get the Cell object
	            	org.apache.poi.ss.usermodel.Cell cell = cellIterator.next();
	            	
	            	if(cell.getNumericCellValue()!=0)
	            	{
	            	if(i == 1)
	            	{
	            	    per.setEmployeeno(Integer.toString(getActualEmpNo((int)cell.getNumericCellValue())));
	            	    System.out.println(per.getEmployeeno());
	            	}
	            	
	            	if(i == 2)
	            	{
	            		per.setMonth(Integer.toString((int)cell.getNumericCellValue()));
	            	}
	            	if(i == 3)
	            	{
	            		per.setYear(Integer.toString((int)cell.getNumericCellValue()));
	            	}
	            	
	            	if(i == 4)
	            	{
	            		if((int)cell.getNumericCellValue()<10)
	            		{
	            			per.setDay1("000"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            		else
	            		{
	            			per.setDay1("00"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            		
	            	}
	            	
	            	if(i == 5)
	            	{
	            		if((int)cell.getNumericCellValue()<10)
	            		{
	            			per.setDay2("000"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            		else
	            		{
	            			per.setDay2("00"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            	}
					
	            	if(i == 6)
	            	{
	            		if((int)cell.getNumericCellValue()<10)
	            		{
	            			per.setDay3("000"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            		else
	            		{
	            			per.setDay3("00"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            	}
	            	
	            	
	            	if(i == 7)
	            	{
	            		if((int)cell.getNumericCellValue()<10)
	            		{
	            			per.setDay4("000"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            		else
	            		{
	            			per.setDay4("00"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            	}
	            	
	            	if(i == 8)
	            	{
	            		if((int)cell.getNumericCellValue()<10)
	            		{
	            			per.setDay5("000"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            		else
	            		{
	            			per.setDay5("00"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            	}
	            	
	            	if(i == 9)
	            	{
	            		if((int)cell.getNumericCellValue()<10)
	            		{
	            			per.setDay6("000"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            		else
	            		{
	            			per.setDay6("00"+Integer.toString((int)cell.getNumericCellValue()));
	            		}	
	            	}
	            	
	            	
	            	if(i == 10)
	            	{
	            		if((int)cell.getNumericCellValue()<10)
	            		{
	            			per.setDay7("000"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            		else
	            		{
	            			per.setDay7("00"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            	}
	            	
	            	if(i == 11)
	            	{
	            		if((int)cell.getNumericCellValue()<10)
	            		{
	            			per.setDay8("000"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            		else
	            		{
	            			per.setDay8("00"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            	}
	            	
	            	if(i == 12)
	            	{
	            		if((int)cell.getNumericCellValue()<10)
	            		{
	            			per.setDay9("000"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            		else
	            		{
	            			per.setDay9("00"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            	}
	            	
	            	if(i == 13)
	            	{
	            		if((int)cell.getNumericCellValue()<10)
	            		{
	            			per.setDay10("000"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            		else
	            		{
	            			per.setDay10("00"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            	}	
	            	if(i == 14)
	            	{
	            		if((int)cell.getNumericCellValue()<10)
	            		{
	            			per.setDay11("000"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            		else
	            		{
	            			per.setDay11("00"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            	}
	            	if(i == 15)
	            	{
	            		if((int)cell.getNumericCellValue()<10)
	            		{
	            			per.setDay12("000"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            		else
	            		{
	            			per.setDay12("00"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            	}
	            	if(i == 16)
	            	{
	            		if((int)cell.getNumericCellValue()<10)
	            		{
	            			per.setDay13("000"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            		else
	            		{
	            			per.setDay13("00"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            	}
	            	if(i == 17)
	            	{
	            		if((int)cell.getNumericCellValue()<10)
	            		{
	            			per.setDay14("000"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            		else
	            		{
	            			per.setDay14("00"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            	}
	            	if(i == 18)
	            	{
	            		if((int)cell.getNumericCellValue()<10)
	            		{
	            			per.setDay15("000"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            		else
	            		{
	            			per.setDay15("00"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            	}
	            	if(i == 19)
	            	{
	            		if((int)cell.getNumericCellValue()<10)
	            		{
	            			per.setDay16("000"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            		else
	            		{
	            			per.setDay16("00"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            	}
	            	if(i == 20)
	            	{
	            		if((int)cell.getNumericCellValue()<10)
	            		{
	            			per.setDay17("000"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            		else
	            		{
	            			per.setDay17("00"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            	}
	            	if(i == 21)
	            	{
	            		if((int)cell.getNumericCellValue()<10)
	            		{
	            			per.setDay18("000"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            		else
	            		{
	            			per.setDay18("00"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            	}
	            	if(i == 22)
	            	{
	            		if((int)cell.getNumericCellValue()<10)
	            		{
	            			per.setDay19("000"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            		else
	            		{
	            			per.setDay19("00"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            	}
	            	if(i == 23)
	            	{
	            		if((int)cell.getNumericCellValue()<10)
	            		{
	            			per.setDay20("000"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            		else
	            		{
	            			per.setDay20("00"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            	}
	            	if(i == 24)
	            	{
	            		if((int)cell.getNumericCellValue()<10)
	            		{
	            			per.setDay21("000"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            		else
	            		{
	            			per.setDay21("00"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            	}
	            	if(i == 25)
	            	{
	            		if((int)cell.getNumericCellValue()<10)
	            		{
	            			per.setDay22("000"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            		else
	            		{
	            			per.setDay22("00"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            	}
	            	if(i == 26)
	            	{
	            		if((int)cell.getNumericCellValue()<10)
	            		{
	            			per.setDay23("000"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            		else
	            		{
	            			per.setDay23("00"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            	}
	            	if(i == 27)
	            	{
	            		if((int)cell.getNumericCellValue()<10)
	            		{
	            			per.setDay24("000"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            		else
	            		{
	            			per.setDay24("00"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            	}
	            	if(i == 28)
	            	{
	            		if((int)cell.getNumericCellValue()<10)
	            		{
	            			per.setDay25("000"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            		else
	            		{
	            			per.setDay25("00"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            	}
	            	if(i == 29)
	            	{
	            		if((int)cell.getNumericCellValue()<10)
	            		{
	            			per.setDay26("000"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            		else
	            		{
	            			per.setDay26("00"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            	}
	            	if(i == 30)
	            	{
	            		if((int)cell.getNumericCellValue()<10)
	            		{
	            			per.setDay27("000"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            		else
	            		{
	            			per.setDay27("00"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            	}
	            	if(i == 31)
	            	{
	            		if((int)cell.getNumericCellValue()<10)
	            		{
	            			per.setDay28("000"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            		else
	            		{
	            			per.setDay28("00"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            	}
	            	if(i == 32)
	            	{
	            		if((int)cell.getNumericCellValue()<10)
	            		{
	            			per.setDay29("000"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            		else
	            		{
	            			per.setDay29("00"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            	}
	            	if(i == 33)
	            	{
	            		if((int)cell.getNumericCellValue()<10)
	            		{
	            			per.setDay30("000"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            		else
	            		{
	            			per.setDay30("00"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            	}
	            	if(i == 34)
	            	{
	            		if((int)cell.getNumericCellValue()<10)
	            		{
	            			per.setDay31("000"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            		else
	            		{
	            			per.setDay31("00"+Integer.toString((int)cell.getNumericCellValue()));
	            		}
	            	}
	            	}
	            	else
	            	{
	            		break;
	            	}
	            	
	            }
	            list.add(per);
				}
				
				else
				{
					break;
				}
				}
				
//end of cell iterator
	        } //end of rows iterator
			
			
			 DateFormat dateFormat1 = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
				Calendar cal11 = Calendar.getInstance();							
				String datecurren11t=dateFormat1.format(cal11.getTime());
	int a=uploadData(list,request,datecurren11t);
	
	if(a==0)
	{
		uploadfinalDatatoshiftregister(list, request, datecurren11t);
		approvalsForm.setMessage("Data Uploaded Succesfully");
	}
	else
	{
		approvalsForm.setMessage("List Contains employees who does not belong to your location ..Delete those records and upload again");
	}
	 
	 
	String kq="delete emp_shift_register_test where changedon='"+datecurren11t+"'";
	int y=ad.SqlExecuteUpdate(kq);
	
		} //end of sheets for loop
		
		//close file input stream
		//fis.close();
	} 
	catch (Exception e) 
	{
	       e.printStackTrace();
	       approvalsForm.setMessage("Error Uploading File...Please check whether all values are numeric");
	       
	}
	
	 ArrayList yearList=new ArrayList();
		ResultSet rs17 = ad.selectQuery("select distinct year from EMP_IN_OUT_Status  order by year desc"); 
				try {
					while(rs17.next()) {
						yearList.add(rs17.getString("year"));
					}
					rs17.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				approvalsForm.setYearList(yearList);
				 session=request.getSession();
				 user=(UserInfo)session.getAttribute("user");
				
				String cmpcode="";
				int id=user.getGroupId();
				String cmp[]=new String[0]; 
				String locations="";
				
				String aa="select * from user_group where id='"+id+"'";
				ResultSet cc=ad.selectQuery(aa);
				try {
					if(cc.next())
					{
						cmpcode=cc.getString("Attendance_Loc");
						
						if(cmpcode.contains(","))
						{
						 cmp=cmpcode.split(",");
						
						for(int b=0;b<cmp.length;b++)
						{
							locations=locations+"'"+cmp[b]+"',";
						}
						
						locations=locations.substring(0, locations.length()-1);
						}
						else
						{
							locations="'"+cmpcode+"'";
						}
					}
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				
				
				
		ArrayList locationList=new ArrayList();
		ArrayList locationLabelList=new ArrayList();
		ResultSet rs11 = ad.selectQuery("select LOCID," +
				"LOCNAME,location_code from location where location_code in ("+locations+") "); 
				try {
					while(rs11.next()) {
						locationList.add(rs11.getString("location_code"));
						locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
						
					}
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				approvalsForm.setLocationIdList(locationList);
				approvalsForm.setLocationLabelList(locationLabelList);
		
	
				ArrayList payGroupList=new ArrayList();
				ArrayList payGroupLabelList=new ArrayList();
				ResultSet rs12 = ad.selectQuery("select Paygroup," +
						"Long_Desc from Paygroup_Master order by Long_Desc "); 
						try {
							while(rs12.next()) {
								payGroupList.add(rs12.getString("Paygroup"));
								payGroupLabelList.add(rs12.getString("Long_Desc"));
							}
							rs12.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
				approvalsForm.setPayGroupList(payGroupList);
				approvalsForm.setPayGroupLabelList(payGroupLabelList);
				
				ArrayList categoryList=new ArrayList();
				ArrayList categoryLabelList=new ArrayList();
				ResultSet rs13 = ad.selectQuery("select STAFFCAT," +
						"CATLTEXT from category order by CATLTEXT"); 
						try {
							while(rs13.next()) {
								categoryList.add(rs13.getString("STAFFCAT"));
								categoryLabelList.add(rs13.getString("CATLTEXT"));
							}
							rs13.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
				approvalsForm.setCategoryList(categoryList);
				approvalsForm.setCategoryLabelList(categoryLabelList);
				
				
				ArrayList workList=new ArrayList();
				ArrayList workLabelList=new ArrayList();
				ResultSet rs14 = ad.selectQuery("select loc_id," +
						"loc_name from working_location order by loc_name"); 
						try {
							while(rs14.next()) {
								workList.add(rs14.getString("loc_id"));
								workLabelList.add(rs14.getString("loc_name"));
							}
							rs14.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
				approvalsForm.setWorkList(workList);
				approvalsForm.setWorkLabelList(workLabelList);
				
				
				ArrayList shiftList=new ArrayList();
				ArrayList shiftLabelList=new ArrayList();
				ResultSet rs15 = ad.selectQuery("select shift_code," +
						"Shift_Name from EMP_SHIFT_MASTER order by shift_name "); 
						try {
							while(rs15.next()) {
								shiftList.add(rs15.getString("shift_code"));
								shiftLabelList.add(rs15.getString("Shift_Name"));
							}
							rs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
				approvalsForm.setShiftList(shiftList);
				approvalsForm.setShiftLabelList(shiftLabelList);
				
				ArrayList deptList=new ArrayList();
				ArrayList deptLabelList=new ArrayList();
				ResultSet rs16 = ad.selectQuery("select dptid," +
						"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
						try {
							while(rs16.next()) {
								deptList.add(rs16.getString("dptid"));
								deptLabelList.add(rs16.getString("DPTLTXT"));
							}
							rs16.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						approvalsForm.setDeptList(deptList);
						approvalsForm.setDeptLabelList(deptLabelList);
	 
			
						try {
							rs13.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						try {
							cc.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						try {
							rs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						try {
							rs16.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						try {
							rs17.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						try {
							rs14.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						try {
							rs12.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						try {
							rs11.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}

	return mapping.findForward("shiftassign");
	}
	
	public int uploadfinalDatatoshiftregister(LinkedList list,HttpServletRequest request,String datecurren11t ){
		
		
		String delete="Delete EMP_Shift_Register from  EMP_Shift_Register_test where EMP_Shift_Register.pernr=EMP_Shift_Register_test.pernr and "
				+ "EMP_Shift_Register.month=EMP_Shift_Register_test.month and EMP_Shift_Register.year=EMP_Shift_Register_test.year and EMP_Shift_Register_test.changedon='"+datecurren11t+"'";
		int b=ad.SqlExecuteUpdate(delete);
		
		String s=" insert into  EMP_Shift_Register select * from EMP_Shift_Register_test where changedon='"+datecurren11t+"'";
		int j=ad.SqlExecuteUpdate(s);
				
				
		return 0;
		
	}
	
	public int uploadfinalManualFile(LinkedList list,HttpServletRequest request,String datecurren11t ){
		
		
		
		
		String up="update EMP_MANUAL_SWIPE set Status_Flag=0  from EMP_MANUAL_SWIPE_test where EMP_MANUAL_SWIPE.pernr=EMP_MANUAL_SWIPE_test.pernr and "
				+ "EMP_MANUAL_SWIPE.Start_date=EMP_MANUAL_SWIPE_test.Start_date and EMP_MANUAL_SWIPE.In_Out=EMP_MANUAL_SWIPE_test.In_Out and EMP_MANUAL_SWIPE_test.Created_date='"+datecurren11t+"'";
	    int s1d= ad.SqlExecuteUpdate(up);
		
		String s=" insert into  EMP_MANUAL_SWIPE select * from EMP_MANUAL_SWIPE_test where Created_date='"+datecurren11t+"'";
		int j=ad.SqlExecuteUpdate(s);
		
		
		String rer="select day(start_date) as day,month(start_date) as month,year(start_date) as year,in_out,pernr,Lost_Entry_Reason_Type,start from EMP_MANUAL_SWIPE where Created_date='"+datecurren11t+"'";
		ResultSet f=ad.selectQuery(rer);
		try {
			while(f.next())
			{
				
				String time_Status="";
			//emp_inout
			String time = "update EMP_IN_OUT set  day"+f.getString("day")+" ='"+f.getString("start")+"' where year ='"+f.getString("year")+"'  "
		    		+ "and month ='"+f.getString("month")+"'  and pernr= '"+f.getString("pernr")+"' and in_out='"+f.getString("in_out")+"'  ";
					 int s1 = ad.SqlExecuteUpdate(time);
					
					 
					 if(!f.getString("Lost_Entry_Reason_Type").equalsIgnoreCase("Early"))
					 {
			///empp status
					 if(f.getString("in_out").equalsIgnoreCase("I"))
					 {
						 time_Status= "update EMP_IN_OUT_STATUS set day"+f.getString("day")+" ='PP'+RIGHT(day"+f.getString("day")+",2) where year ='"+f.getString("year")+"'  "
				    		+ "and month ='"+f.getString("month")+"'  and pernr= '"+f.getString("pernr")+"'  ";
						 int s2 = ad.SqlExecuteUpdate(time_Status);
						 
					 }
					 else
					 {
						 time_Status= "update EMP_IN_OUT_STATUS set day"+f.getString("day")+" =LEFT(day"+f.getString("day")+",2)+'PP'  where year ='"+f.getString("year")+"'  "
						    		+ "and month ='"+f.getString("month")+"'  and pernr= '"+f.getString("pernr")+"'  ";
						  int s3 = ad.SqlExecuteUpdate(time_Status);
						 
					 }
					 }
					 
					 
					 else
					 {

							///empp status
									 if(f.getString("in_out").equalsIgnoreCase("I"))
									 {
										 time_Status= "update EMP_IN_OUT_STATUS set day"+f.getString("day")+" ='PM'+RIGHT(day"+f.getString("day")+",2) where year ='"+f.getString("year")+"'  "
								    		+ "and month ='"+f.getString("month")+"'  and pernr= '"+f.getString("pernr")+"'  ";
										 int s2 = ad.SqlExecuteUpdate(time_Status);
										 
									 }
									 else
									 {
										 time_Status= "update EMP_IN_OUT_STATUS set day"+f.getString("day")+" =LEFT(day"+f.getString("day")+",2)+'PM'  where year ='"+f.getString("year")+"'  "
										    		+ "and month ='"+f.getString("month")+"'  and pernr= '"+f.getString("pernr")+"'  ";
										  int s3 = ad.SqlExecuteUpdate(time_Status);
										 
									 }
									 
					 }
						 
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
				
		return 0;
		
	}
	
	
	public int uploadManualTempData(LinkedList list,HttpServletRequest request,String datecurren11t ){
		
		
		int cou=0;
		
		 try {
			 System.out.println(list.size());
			 Connection	conn=AttConnectionFactory.getConnection();
			 
				HttpSession session=request.getSession();
				UserInfo user=(UserInfo)session.getAttribute("user");
			 
				 
			PreparedStatement set=conn.prepareStatement("INSERT INTO EMP_MANUAL_SWIPE_Test (Pernr	,Start_date,	In_Out,	Start,	Lost_Entry_Reason_Type,	remarks,	"
					+ "date,	time,	Username,	Created_date,	Status_Flag,late_flag)"
			+ "VALUES(?,?,?,?,?,?,getdate(),getdate(),?,?,1,?) ") ;
			Iterator attdItr = list.iterator();
			while(attdItr.hasNext()) {
				
				HRApprovalForm a=(HRApprovalForm)attdItr.next();
				/*
				String delete="Delete EMP_Shift_Register where pernr='"+a.getEmployeeno()+"' and month='"+a.getMonth()+"' and year='"+a.getYear()+"'";
				int b=ad.SqlExecuteUpdate(delete);*/
				
				System.out.println(a.getEmployeeNo());
                 set.setString(1, a.getEmployeeNo());
                 set.setString(2, a.getDate());
                 set.setString(3, a.getSwipe_Type());
                 set.setString(4,a.getTime());
                 set.setString(5,a.getReason_Type());
                 set.setString(6,"EXCEL UPLOAD");
                 set.setString(7,user.getEmployeeNo());               
                 set.setString(8,datecurren11t);
                 if(a.getReason_Type().equalsIgnoreCase("Late"))
                	 set.setString(9,"1");
                 else
                	 set.setString(9,"0"); 
                
                 set.addBatch();
				

			}
			if(!list.isEmpty()){			
				 set.executeBatch();
			}
			
			
			String cmpcode1="";
			int id=user.getGroupId();
			String cmp[]=new String[0]; 
			String locations="";
			
			String aa="select * from user_group where id='"+id+"'";
			ResultSet cc=ad.selectQuery(aa);
			try {
				if(cc.next())
				{
					cmpcode1=cc.getString("Attendance_Loc");
					
					if(cmpcode1.contains(","))
					{
					 cmp=cmpcode1.split(",");
					
					for(int b=0;b<cmp.length;b++)
					{
						locations=locations+"'"+cmp[b]+"',";
					}
					
					locations=locations.substring(0, locations.length()-1);
					}
					else
					{
						locations="'"+cmpcode1+"'";
					}
				}
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
			try {
				cc.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			///chekc emp belong to hr location
			
			
			String b="select count(*) as cou from EMP_MANUAL_SWIPE_Test where Pernr not in (select pernr from emp_official_info where LOCID in ("+locations+")) and Created_date='"+datecurren11t+"'";
			ResultSet adv=ad.selectQuery(b);
			if(adv.next())
			{
				cou=adv.getInt("cou");
			}
			
			
			try {
				adv.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} catch (SQLException e) {
			
			e.printStackTrace();// TODO Change to log
		}
	 catch (Exception e) {
		e.printStackTrace();// TODO Change to log
	}
		 
		 
		 
		return cou; 
	 }
	
	public int uploadData(LinkedList list,HttpServletRequest request,String datecurren11t ){
		
		
		int cou=0;
		
		 try {
			 System.out.println(list.size());
			 Connection	conn=AttConnectionFactory.getConnection();
			 
				HttpSession session=request.getSession();
				UserInfo user=(UserInfo)session.getAttribute("user");
			 
				 
			PreparedStatement set=conn.prepareStatement("INSERT INTO EMP_Shift_Register_test (Pernr	,Month,	Year,	Day1,	Day2,	Day3,	Day4,	Day5,	Day6,	Day7,	Day8,	Day9,	Day10,	Day11,	Day12,	Day13,	Day14,	Day15,	Day16,	Day17,	Day18,	Day19,	Day20,"
					+ "	Day21,	Day22,	Day23,	Day24,	Day25,	Day26,	Day27,	Day28,	Day29,	Day30,	Day31,ChangedOn)"
			+ "VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ") ;
			Iterator attdItr = list.iterator();
			while(attdItr.hasNext()) {
				
				HRApprovalForm a=(HRApprovalForm)attdItr.next();
				/*
				String delete="Delete EMP_Shift_Register where pernr='"+a.getEmployeeno()+"' and month='"+a.getMonth()+"' and year='"+a.getYear()+"'";
				int b=ad.SqlExecuteUpdate(delete);*/
				
				System.out.println(a.getEmployeeno());
                 set.setString(1, a.getEmployeeno());
                 set.setString(2, a.getMonth());
                 set.setString(3, a.getYear());
                 set.setString(4,a.getDay1());
                 set.setString(5,a.getDay2());
                 set.setString(6,a.getDay3());
                 set.setString(7,a.getDay4());
                 set.setString(8,a.getDay5());
                 set.setString(9,a.getDay6());
                 set.setString(10,a.getDay7());
                 set.setString(11,a.getDay8());
                 set.setString(12,a.getDay9());
                 set.setString(13,a.getDay10());
                 set.setString(14,a.getDay11());
                 set.setString(15,a.getDay12());
                 set.setString(16,a.getDay13());
                 set.setString(17,a.getDay14());
                 set.setString(18,a.getDay15());
                 set.setString(19,a.getDay16());
                 set.setString(20,a.getDay17());
                 set.setString(21,a.getDay18());
                 set.setString(22,a.getDay19());
                 set.setString(23,a.getDay20());
                 set.setString(24,a.getDay21());
                 set.setString(25,a.getDay22());
                 set.setString(26,a.getDay23());
                 set.setString(27,a.getDay24());
                 set.setString(28,a.getDay25());
                 set.setString(29,a.getDay26());
                 set.setString(30,a.getDay27());
                 set.setString(31,a.getDay28());
                 set.setString(32,a.getDay29());
                 set.setString(33,a.getDay30());
                 set.setString(34,a.getDay31());
                 set.setString(35, datecurren11t);
                 set.addBatch();
				

			}
			if(!list.isEmpty()){			
				 set.executeBatch();
			}
			
			
			String cmpcode1="";
			int id=user.getGroupId();
			String cmp[]=new String[0]; 
			String locations="";
			
			String aa="select * from user_group where id='"+id+"'";
			ResultSet cc=ad.selectQuery(aa);
			try {
				if(cc.next())
				{
					cmpcode1=cc.getString("Attendance_Loc");
					
					if(cmpcode1.contains(","))
					{
					 cmp=cmpcode1.split(",");
					
					for(int b=0;b<cmp.length;b++)
					{
						locations=locations+"'"+cmp[b]+"',";
					}
					
					locations=locations.substring(0, locations.length()-1);
					}
					else
					{
						locations="'"+cmpcode1+"'";
					}
				}
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
			try {
				cc.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			///chekc emp belong to hr location
			
			
			String b="select count(*) as cou from emp_shift_register_test where Pernr not in (select pernr from emp_official_info where LOCID in ("+locations+")) and ChangedOn='"+datecurren11t+"'";
			ResultSet adv=ad.selectQuery(b);
			if(adv.next())
			{
				cou=adv.getInt("cou");
			}
			
			
			try {
				adv.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} catch (SQLException e) {
			
			e.printStackTrace();// TODO Change to log
		}
	 catch (Exception e) {
		e.printStackTrace();// TODO Change to log
	}
		 
		 
		 
		return cou; 
	 }
	
	
	public String prevmonthdays(String selectedyear,String selectedmon)
	{
		String b="";
		// Create a calendar object and set year and month
		Calendar mycal = Calendar.getInstance();

		mycal.set(Integer.parseInt(selectedyear), Integer.parseInt(selectedmon)-1, 1);
		
		// Get the number of days in that month
		int daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
		
		for(int j=21;j<=daysInMonth;j++)
		{
			b=b+"day"+j+"+";
			
		}
		
		b=b.substring(0, b.length()-1);
		return b;
	}
	
	
	public String prevabsentdays(String selectedyear,String selectedmon,int startday)
	{
		String b="";
		// Create a calendar object and set year and month
		Calendar mycal = Calendar.getInstance();

		mycal.set(Integer.parseInt(selectedyear), Integer.parseInt(selectedmon)-1, 1);
		
		// Get the number of days in that month
		int daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
		
		for(int j=startday;j<=daysInMonth;j++)
		{
			b=b+"day"+j+"+";
			
		}
		
		b=b.substring(0, b.length()-1);
		return b;
	}
	
	public String currentmonthdays(String selectedyear,String selectedmon,int days)
	{
		String b="";
		// Create a calendar object and set year and month
		Calendar mycal = Calendar.getInstance();

		mycal.set(Integer.parseInt(selectedyear), Integer.parseInt(selectedmon)-1, 1);
		
		// Get the number of days in that month
		int daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
		if(days!=0)
		{
			daysInMonth=days;
		}
		else
		{
			daysInMonth=daysInMonth;
		}
		
		for(int j=1;j<=daysInMonth;j++)
		{
			b=b+"day"+j+"+";
			
		}
		
		b=b.substring(0, b.length()-1);
		return b;
	}
	
	public String currentabsentdays(String selectedyear,String selectedmon,int fromdays,int todays)
	{
		String b="";
		
		
		for(int j=fromdays;j<=todays;j++)
		{
			b=b+"day"+j+"+";
			
		}
		
		b=b.substring(0, b.length()-1);
		return b;
	}
	
	public String EmpLoc(String a)
	{
		
		String b = "";
		if(a==null)
		{
		  return b;	
		}
		
		if(!a.equalsIgnoreCase(""))
		{	
			
			
		String emp = "select LOCID from emp_official_info where pernr = '"+a+"'";
		ResultSet rs = ad.selectQuery(emp);
		try {
			if(rs.next())
			{
				b=rs.getString("LOCID"); 
			}
			
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		try {
			rs.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		}
		return b;
		
	}
	
	public ActionForward attendanceReport(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
		HRApprovalForm help = (HRApprovalForm) form;
		if(help.getType()!=null)
		{	
		
		if(!help.getType().equalsIgnoreCase(""))
		{
			if(help.getType().equalsIgnoreCase("Daily Report"))
			{
				dailyreport(mapping, form, request, response);
				return mapping.findForward("displaydialyreport");
			}	
			if(help.getType().equalsIgnoreCase("Daily Shift Report"))
			{
				dailyreport(mapping, form, request, response);
				return mapping.findForward("displayshiftreport");
			}
			if(help.getType().equalsIgnoreCase("HOD Shift Report"))
			{
				dailyreport(mapping, form, request, response);
				return mapping.findForward("displayhodshiftreport");
			}

			if(help.getType().equalsIgnoreCase("Monthly Report"))
			{
				monthlyreport(mapping, form, request, response);
				return mapping.findForward("displaymonthlyreport");
			}
			if(help.getType().equalsIgnoreCase("Monthly Attendance Summary report"))
			{
				
				musterreport(mapping, form, request, response);
				return mapping.findForward("montlysummaryreport");
			}
			
			if(help.getType().equalsIgnoreCase("Muster Report"))
			{
				
				musterreport(mapping, form, request, response);
				return mapping.findForward("displaymusterreport");
			}
			
			if(help.getType().equalsIgnoreCase("Man Power Report"))
			{
				
				manpowerreport(mapping, form, request, response);
				return mapping.findForward("manpowerreport");
			}
			if(help.getType().equalsIgnoreCase("Daywise Man Power Report"))
			{
				
				Daywisemanpowerreport(mapping, form, request, response);
				return mapping.findForward("Daywisemanpowerreport");
			}
			
			if(help.getType().equalsIgnoreCase("Casual absenteeism report"))
			{
				
				Daywisemanpowerreport(mapping, form, request, response);
				return mapping.findForward("casualabsenteeismreport");
			}
			
			
			
			
			if(help.getType().equalsIgnoreCase("Contractual Report"))
			{
				
			contractreport(mapping, form, request, response);
				return mapping.findForward("contractreport");
			}
			
			if(help.getType().equalsIgnoreCase("Daily Performance Report"))
			{
				dailyPerformancereport(mapping, form, request, response);
				return mapping.findForward("dailyPerformancereport");
			}
			
			if(help.getType().equalsIgnoreCase("Daily Arrival Report"))
			{
				dailyArrivalreport(mapping, form, request, response);
				return mapping.findForward("dailyArrivalreport");
			}
			if(help.getType().equalsIgnoreCase("Department Summary Report"))
			{
				departmentsummary(mapping, form, request, response);
				return mapping.findForward("deptSummaryreport");
			}
			if(help.getType().equalsIgnoreCase("Attrition Report"))
			{
				attritionreport(mapping, form, request, response);
				return mapping.findForward("attritionreport");
			}
			
			if(help.getType().equalsIgnoreCase("Man Power Cumulative"))
			{
			  cumulativemanpowerreport(mapping, form, request, response);
				return mapping.findForward("cumulativemanpowerreport");
			}
			if(help.getType().equalsIgnoreCase("Leave Balance Report"))
			{
				leavebalanceReport(mapping, form, request, response);
				return mapping.findForward("leavbalancereport");
			}
			
			if(help.getType().equalsIgnoreCase("Holiday Details Report"))
			{
				displayHolidays(mapping, form, request, response);
				return mapping.findForward("Holidays");
			}
			
			if(help.getType().equalsIgnoreCase("Employee Detail Report"))
			{
				empdetailreport(mapping, form, request, response);
				return mapping.findForward("empdetailreport");
			}
			if(help.getType().equalsIgnoreCase("Man Power Organogram"))
			{
			organogrammanpowerreport(mapping, form, request, response);
				return mapping.findForward("organogrammanpowerreport");
			}
			
			if(help.getType().equalsIgnoreCase("Missing Punch Report"))
			{
			missingpunchreport(mapping, form, request, response);
				return mapping.findForward("missingpunchreport");
			}
			
			if(help.getType().equalsIgnoreCase("Employee Manual Audit Report"))
			{
				empManualAuditreport(mapping, form, request, response);
				return mapping.findForward("empManualAuditreport");
			}
			
			if(help.getType().equalsIgnoreCase("Portal Status Report"))
			{
                   getlist(mapping, form, request, response);
				return mapping.findForward("displayAll");
			}
			
			if(help.getType().equalsIgnoreCase("Payable Month Status Report"))
			{
				payablemusterreport(mapping, form, request, response);
				return mapping.findForward("displaypayablemusterreport");
			}
			if(help.getType().equalsIgnoreCase("FORM 15"))
			{
				leavewagesreport(mapping, form, request, response);
				return mapping.findForward("displayleavewagesreport");
			}
			if(help.getType().equalsIgnoreCase("FORM 06"))
			{
				nationalFestivalreport(mapping, form, request, response);
				return mapping.findForward("nationalFestivalreport");
			}
			if(help.getType().equalsIgnoreCase("FORM 25"))
			{
				statmusterrollreport(mapping, form, request, response);
				return mapping.findForward("musterRollreport");
			}
			if(help.getType().equalsIgnoreCase("FORM 11"))
			{
				adultworkersreport(mapping, form, request, response);
				return mapping.findForward("adultworkersreport");
			}
			if(help.getType().equalsIgnoreCase("FORM D"))
			{
				equalRenumerationreport(mapping, form, request, response);
				return mapping.findForward("equalRenumerationreport");
			}
			if(help.getType().equalsIgnoreCase("FORM C"))
			{
				bonuspaid(mapping, form, request, response);
				return mapping.findForward("bonuspaidreport");
			}
		}
		}
		
		return mapping.findForward("attendanceReport");
	}
	
	public ActionForward payablemusterreport(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
		
		Calendar mycal = Calendar.getInstance();
		help.setFrommonth(Integer.toString(mycal.get(Calendar.MONTH) + 1));
		
		
		ArrayList workList=new ArrayList();
		ArrayList workLabelList=new ArrayList();
		ResultSet rs14 = ad.selectQuery("select loc_id," +
				"loc_name from working_location order by loc_name"); 
				try {
					while(rs14.next()) {
						workList.add(rs14.getString("loc_id"));
						workLabelList.add(rs14.getString("loc_name"));
					}
					rs14.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
		help.setWorkList(workList);
		help.setWorkLabelList(workLabelList);
		
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		   ArrayList locationList=new ArrayList();
					ArrayList locationLabelList=new ArrayList();
					ResultSet rs11 = ad.selectQuery("select LOCID," +
							"LOCNAME,location_code from location where location_code in ("+locations+") "); 
							try {
								while(rs11.next()) {
									locationList.add(rs11.getString("location_code"));
									locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
									
								}
								rs11.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							help.setLocationIdList(locationList);
							help.setLocationLabelList(locationLabelList);
	
		
		ArrayList categoryList=new ArrayList();
		ArrayList categoryLabelList=new ArrayList();
		ResultSet rs13 = ad.selectQuery("select STAFFCAT," +
				"CATLTEXT from category order by CATLTEXT "); 
				try {
					while(rs13.next()) {
						categoryList.add(rs13.getString("STAFFCAT"));
						categoryLabelList.add(rs13.getString("CATLTEXT"));
					}
					rs13.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setCategoryList(categoryList);
				help.setCategoryLabelList(categoryLabelList);
		
				ArrayList payGroupList=new ArrayList();
				ArrayList payGroupLabelList=new ArrayList();
				ResultSet rs12 = ad.selectQuery("select Paygroup," +
				"Long_Desc from Paygroup_Master order by Long_Desc"); 
				try {
					while(rs12.next()) {
						payGroupList.add(rs12.getString("Paygroup"));
						payGroupLabelList.add(rs12.getString("Long_Desc"));
					}
					rs12.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setPayGroupList(payGroupList);
				help.setPayGroupLabelList(payGroupLabelList);	
				
				//repgrp
				ArrayList repgrptList=new ArrayList();
				ArrayList repgrpLabelList=new ArrayList();
				ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
						"Grp_LTXT from REPORTING_GROUP   order by Grp_LTXT "); 
						try {
							while(reprs15.next()) {
								repgrptList.add(reprs15.getString("Grp_ID"));
								repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
							}
							reprs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						help.setRepgrpList(repgrptList);
						help.setRepgrpLabelList(repgrpLabelList);
				
	
				ArrayList deptList=new ArrayList();
				ArrayList deptLabelList=new ArrayList();
				ResultSet rs15 = ad.selectQuery("select dptid," +
						"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
				try {
							while(rs15.next()) {
								deptList.add(rs15.getString("dptid"));
								deptLabelList.add(rs15.getString("DPTLTXT"));
							}
							rs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						help.setDeptList(deptList);
						help.setDeptLabelList(deptLabelList);
				
				ArrayList desgList=new ArrayList();
				ArrayList desgLabelList=new ArrayList();
				ResultSet rs16 = ad.selectQuery("select dsgid," +
						"DSGLTXT from DESIGNATION order by DSGLTXT"); 
						try {
							while(rs16.next()) {
								desgList.add(rs16.getString("dsgid"));
								desgLabelList.add(rs16.getString("DSGLTXT"));
							}
							rs16.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
				help.setDesgList(desgList);
				help.setDesgLabelList(desgLabelList);
				
				ArrayList yearList=new ArrayList();
				ResultSet rs17 = ad.selectQuery("select distinct year from EMP_IN_OUT_Status order by year desc"); 
						try {
							while(rs17.next()) {
								yearList.add(rs17.getString("year"));
							}
							rs17.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
				help.setYearList(yearList);
				
				request.setAttribute("result", "result");
				
				//attendancelocation
				
				String location="";
				String rep="";
				String typ="select distinct Location,LOCNAME from Location,Attendance_Locations   where Attendance_Locations.Location=Location.LOCATION_CODE order by 1";
				ResultSet h=ad.selectQuery(typ);
				try {
					while(h.next())
					{
						
						location=location+h.getString("Location")+"-"+h.getString("LOCNAME")+" , ";
					}
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				
if(location.contains(","))
location=location.substring(0, location.length());

help.setLocationId(location);
				
				try {
					rs14.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs13.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs12.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					cc.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs16.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					reprs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs17.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return mapping.findForward("displaypayablemusterreport");	
	
	}
	public ActionForward exportpayablemusterReportSearch(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
				HttpServletResponse response) {
		

		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");

		HRApprovalForm help = (HRApprovalForm) form;
		ArrayList locationList=new ArrayList();
		ArrayList locationLabelList=new ArrayList();
		
		ArrayList list1=new ArrayList();
		ArrayList list2=new ArrayList();
		ArrayList list3=new ArrayList();
		ArrayList list4=new ArrayList();
		ArrayList datelist = new ArrayList();
		
		String[] monthName = {"","JAN", "FEB",
				  "MAR", "APR", "MAY", "JUN", "JUL",
				  "AUG", "SEP", "OCT", "NOV",
				  "DEC"
				  };
		String key="";

		Date dNow = new Date( );
		SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd");
		String exportdate=ft.format(dNow);
		
		HashMap ab=shiftmap();
		
		
		response.setHeader("Content-Disposition", "inline; filename="+exportdate+"_muster_Report.xls");
		
						
		String ACtualdept="";
	    if(help.getDeptArray()!=null)
	    {	
	    String[] dept = help.getDeptArray();
	    
	    StringBuffer reqdept = new StringBuffer();
		for (int i = 0; i < dept.length; i++) {
			reqdept.append("'"+dept[i]+"'" + ",");
		}
		 ACtualdept= reqdept.substring(0, reqdept.length() - 1).toString();
	    }
		
		
	    String ACtualdesg="";
	    if(help.getDesgArray()!=null)
	    {
	    
		String[] desg = help.getDesgArray();
	    StringBuffer reqdesg = new StringBuffer();
		for (int i = 0; i < desg.length; i++) {
			reqdesg.append("'"+desg[i]+"'" + ",");
		}
		ACtualdesg = reqdesg.substring(0, reqdesg.length() - 1).toString();
	    
	    }
	    
	 
	    
	    String ACtualpay="";
	    if(help.getPayArray()!=null)
	    {
	    
		String[] pay = help.getPayArray();
	    StringBuffer reqpay = new StringBuffer();
		for (int i = 0; i < pay.length; i++) {
			reqpay.append("'"+pay[i]+"'" + ",");
		}
		ACtualpay = reqpay.substring(0, reqpay.length() - 1).toString();
	    
	    }
	    
	    //catArray
	    String ACtualcat="";
	    if(help.getCatArray()!=null)
	    {
	    
		String[] cat = help.getCatArray();
	    StringBuffer reqcat = new StringBuffer();
		for (int i = 0; i < cat.length; i++) {
			reqcat.append("'"+cat[i]+"'" + ",");
		}
		ACtualcat = reqcat.substring(0, reqcat.length() - 1).toString();
	    
	    }
	    
		
	    String ACtualloc="";
	    if(help.getLocArray()!=null)
	    {
	    
		String[] loc = help.getLocArray();
	    StringBuffer reqloc = new StringBuffer();
		for (int i = 0; i < loc.length; i++) {
			reqloc.append("'"+loc[i]+"'" + ",");
		}
		ACtualloc = reqloc.substring(0, reqloc.length() - 1).toString();
	    
	    }
	    
	    //reporting
	    
	    String ACtualrepgrp="";
	    if(help.getRepgrpArray()!=null)
	    {	
	    String[] repgrp = help.getRepgrpArray();
	    
	    StringBuffer reqrepgrp = new StringBuffer();
		for (int i = 0; i < repgrp.length; i++) {
			reqrepgrp.append("'"+repgrp[i]+"'" + ",");
		}
		ACtualrepgrp= reqrepgrp.substring(0, reqrepgrp.length() - 1).toString();
	    }
	    
	    
		String query1="select distinct pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,"
				+ "DEPARTMENT ,DESIGNATION,Paygroup_Master,Attendance_Locations where Location.LOCATION_CODE=emp_official_info.LOCID and  "
				+ "DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP"
				+ "   and emp_official_info.LOCID = Attendance_Locations.Location   and Attendance_Locations.Rep_grp! =0 and emp_official_info.Reporting_Grp in "
				+ "( Attendance_Locations.Rep_grp) and active=1 and emp_official_info.STAFFCAT!=8 union"
				+ " select distinct pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from "
				+ "emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master,Attendance_Locations where Location.LOCATION_CODE=emp_official_info.LOCID and"
				+ "  DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP  "
				+ " and emp_official_info.LOCID = Attendance_Locations.Location   and Attendance_Locations.Rep_grp =0   and active=1 and emp_official_info.STAFFCAT!=8 ";
		String sqlfromdate="";
		String sqltodate="";
					
		
	
		
	/*	if(!help.getLocationId().equalsIgnoreCase(""))
		{
			query1=query1+" and emp_official_info.LOCID ='"+help.getLocationId()+"' ";
		
		}
			
		if(!ACtualpay.equalsIgnoreCase(""))
		{
			query1=query1+" and emp_official_info.PAY_GROUP in("+ACtualpay+")  ";
		
		}

		if(!ACtualcat.equalsIgnoreCase(""))
		{
			query1=query1+" and emp_official_info.STAFFCAT in ("+ACtualcat+") ";
		
		}

		if(!ACtualdept.equalsIgnoreCase(""))
		{
			query1=query1+" and emp_official_info.DPTID in ("+ACtualdept+") ";
		}
		
		if(!ACtualdesg.equalsIgnoreCase(""))
		{
			query1=query1+" and emp_official_info.DSGID in ("+ACtualdesg+") ";
		}
		
		
		if(!help.getFrompernr().equalsIgnoreCase(""))
		{
			query1=query1+" and emp_official_info.pernr in ("+help.getFrompernr()+")  ";
		}
		
		if(!ACtualloc.equalsIgnoreCase(""))
		{
			query1=query1+" and emp_official_info.Work_ID in("+ACtualloc+") ";
		
		}
		
		if(!ACtualrepgrp.equalsIgnoreCase(""))
		{
			query1=query1+" and emp_official_info.Reporting_Grp in("+ACtualrepgrp+") ";
		
		}
		
		*/

			
			
			
		
		
				 float pp=0;
				 float od=0;				
				 float cl=0;
				 float sl=0;
				 float el=0;
				 float lp=0;			
				 float ph=0;
				 float wo=0;
				 float ss=0;
				 float sh=0;
				 float paid_days=0;
				 float total=0;
				
		
				
				
				
				
				
				try {
					
					String selectedmon=help.getFrommonth();
					String selectedyear=help.getYear();
					String prevmont=Integer.toString((Integer.parseInt(selectedmon)-1));
					String prevyear="";
					if(prevmont.equalsIgnoreCase("0"))
					{
					 prevmont="12";
					 prevyear=Integer.toString((Integer.parseInt(selectedyear)-1));	
					}
					else
						prevyear=selectedyear;
				
					try {
						key = insertTEMPEMP(query1);
					} catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
						
					HRApprovalForm app1 =new HRApprovalForm();
						
						
						
						
						String b = "";		
				
						
							
							if(help.getAttntype().equalsIgnoreCase("Calendar Month")  )
							{
								
							    b = " select emp_official_info.locid,emp_official_info.EMP_FULLNAME,t.*,month ,year,day1,	day2,	day3,	day4,	day5,	day6,	day7,	day8,	day9,	day10,	day11,	day12,	day13,	day14,	day15,	day16,	day17,	day18,	day19,	day20,	day21,	day22,	day23,	day24,	day25,	day26,	day27,	day28,	day29,	day30,	day31  from EMP_IN_OUT_Status  ,"
							    		+ "  ( select k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,sum(k.WO+k.ss+k.PH+k.PP+k.SH+k.od+k.SL+k.CL+k.EL) as totpaid,k.Pernr from (  SELECT 	Pernr,(LEN(day) - LEN(REPLACE(day, 'PP', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'PM', '')))*0.25 as PP,(LEN(day) - LEN(REPLACE(day, 'WO', '')))*0.25 as WO,(LEN(day) - LEN(REPLACE(day, 'SS', '')))*0.25 as SS,(LEN(day) - LEN(REPLACE(day, 'PH', '')))*0.25 as PH,"
							    		+ " (LEN(day) - LEN(REPLACE(day, 'SH', '')))*0.25 as SH,(LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25 as od, (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl, "
							    		+ "(LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl, (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL, (LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as LP "
							    		+ " from( select "+currentmonthdays(help.getYear(),help.getFrommonth(), 0)+" as day,Temp_emp.pernr  from EMP_IN_OUT_Status,Temp_emp where  EMP_IN_OUT_Status.pernr =Temp_emp.pernr and month = '"+help.getFrommonth()+"' and year ='"+help.getYear()+"')t  ) k group by k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,k.Pernr)t,Temp_emp,emp_official_info where emp_official_info.PERNR=Temp_emp.pernr and  t.pernr =Temp_emp.pernr "
							    		+ "   and  month = '"+help.getFrommonth()+"' and year ='"+help.getYear()+"'  and t.Pernr=EMP_IN_OUT_Status.Pernr and Temp_Emp.Date_Time='"+key+"' and Temp_Emp.Swipe_count!=0 "
				    				+ "union"
				    				+ "	select emp_official_info.locid,emp_official_info.EMP_FULLNAME, t.*,month ,year,replace(day1,'AA','PP')as day1,	replace(day2,'AA','PP')as day2,	replace(day3,'AA','PP')as day3,	replace(day4,'AA','PP')as day4,	replace(day5,'AA','PP')as day5,	replace(day6,'AA','PP')as day6,	replace(day7,'AA','PP')as day7,	replace(day8,'AA','PP')as day8,	replace(day9,'AA','PP')as day9,	replace(day10,'AA','PP')as day10,	replace(day11,'AA','PP')as day11,	replace(day12,'AA','PP')as day12,	replace(day13,'AA','PP')as day13,	replace(day14,'AA','PP')as day14,	replace(day15,'AA','PP')as day15,	replace(day16,'AA','PP')as day16,	replace(day17,'AA','PP')as day17,	replace(day18,'AA','PP')as day18,	replace(day19,'AA','PP')as day19,	replace(day20,'AA','PP')as day20,	replace(day21,'AA','PP')as day21,	replace(day22,'AA','PP')as day22,	replace(day23,'AA','PP')as day23,	replace(day24,'AA','PP')as day24,	replace(day25,'AA','PP')as day25,	replace(day26,'AA','PP')as day26,	replace(day27,'AA','PP')as day27,	replace(day28,'AA','PP')as day28,	replace(day29,'AA','PP')as day29,	replace(day30,'AA','PP')as day30,	replace(day31,'AA','PP')as day31  from EMP_IN_OUT_Status  ,"
						    		+ "  ( select k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,sum(k.WO+k.ss+k.PH+k.PP+k.SH+k.od+k.SL+k.CL+k.EL) as totpaid,k.Pernr from (  SELECT 	Pernr,(LEN(day) - LEN(REPLACE(day, 'PP', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as PP,(LEN(day) - LEN(REPLACE(day, 'WO', '')))*0.25 as WO,(LEN(day) - LEN(REPLACE(day, 'SS', '')))*0.25 as SS,(LEN(day) - LEN(REPLACE(day, 'PH', '')))*0.25 as PH,"
						    		+ " (LEN(day) - LEN(REPLACE(day, 'SH', '')))*0.25 as SH,(LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25 as od, (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl, "
						    		+ "(LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl, (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL, (LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25 as LP "
						    		+ " from( select "+currentmonthdays(help.getYear(),help.getFrommonth(), 0)+" as day,Temp_emp.pernr  from EMP_IN_OUT_Status,Temp_emp where  EMP_IN_OUT_Status.pernr =Temp_emp.pernr and month = '"+help.getFrommonth()+"' and year ='"+help.getYear()+"')t  ) k group by k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,k.Pernr)t,Temp_emp,emp_official_info where emp_official_info.PERNR=Temp_emp.pernr and  t.pernr =Temp_emp.pernr "
						    		+ "   and  month = '"+help.getFrommonth()+"' and year ='"+help.getYear()+"'  and t.Pernr=EMP_IN_OUT_Status.Pernr and Temp_Emp.Date_Time='"+key+"' and Temp_Emp.Swipe_count=0 ";
			    			}
							
		
						 
							
							if(help.getAttntype().equalsIgnoreCase("Payable Month")  )
							{
			
			        b="  select emp_official_info.locid,emp_official_info.PERNR,EMP_FULLNAME,(t.PP + k.PP) as PP,(t.cl+k.cl)CL,(t.EL+k.EL) as EL,(t.sl+k.Sl) as SL,(t.wo+k.WO) as wo,(t.ss+k.ss) as ss,(t.PH+k.ph) "
			        		+ "as ph,(t.lp+k.lp) as lp,(t.SH+k.SH) as sh,(t.od+k.od) as od,t.totpaid, day1,	day2,	day3,	day4,	day5,	day6,	day7,	day8,	day9,"
			        		+ "	day10,	day11,	day12,	day13,	day14,	day15,	day16,	day17,	day18,	day19,	day20 ,  day21,	day22,	day23,	day24,"
			        		+ "	day25,	day26,	day27,	day28,	day29,	day30,	day31  from (  select t.*,month ,	day21,	day22,	day23,	day24,	day25,"
			        		+ "	day26,	day27,	day28,	day29,	day30,	day31 from EMP_IN_OUT_Status, "
			        		+ " ( select k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,sum(k.WO+k.ss+k.PH+k.PP+k.SH+k.od+k.SL+k.CL+k.EL) as totpaid,k.Pernr from"
			        		+ " (  SELECT 	Pernr,(LEN(day) - LEN(REPLACE(day, 'PP', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'PM', '')))*0.25 as PP,"
			        		+ "(LEN(day) - LEN(REPLACE(day, 'WO', '')))*0.25 as WO,(LEN(day) - LEN(REPLACE(day, 'SS', '')))*0.25 as ss,(LEN(day) - LEN(REPLACE(day, 'PH', '')))*0.25 as PH,"
			        		+ " (LEN(day) - LEN(REPLACE(day, 'SH', '')))*0.25 as SH,(LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25 as od,"
			        		+ " (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl, (LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl, "
			        		+ "(LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL, (LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'AA', '')))"
			        		+ "*0.25 as LP  from( select "+prevmonthdays(prevyear, prevmont)+" as day,Temp_Emp.Pernr "
			        		+ " from EMP_IN_OUT_Status,Temp_Emp where Temp_Emp.pernr=EMP_IN_OUT_Status.Pernr and month ='"+prevmont+"' and year ='"+prevyear+"')t  ) k,Temp_Emp where"
			        		+ "  Temp_Emp.Pernr=k.Pernr group by k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,k.Pernr)t,Temp_Emp   where EMP_IN_OUT_Status.pernr =Temp_Emp.Pernr "
			        		+ "and  month ='"+prevmont+"' and year ='"+prevyear+"' and t.Pernr=EMP_IN_OUT_Status.Pernr and Date_Time='"+key+"' and temp_emp.Swipe_count!=0)t ,  "
			        		+ " ( select t.*,month ,	day1,	day2,	day3,	day4,	day5,	day6,	day7,	day8,	day9,	day10,	day11,	day12,	day13,	day14,	day15,	"
			        		+ "day16,	day17,	day18,	day19,	day20  from EMP_IN_OUT_Status,  ( select k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,"
			        		+ "sum(k.WO+k.ss+k.PH+k.PP+k.SH+k.od+k.SL+k.CL+k.EL) as totpaid,k.Pernr from "
			        		+ "(  SELECT 	Pernr,(LEN(day) - LEN(REPLACE(day, 'PP', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'PM', '')))*0.25 as PP,"
			        		+ "(LEN(day) - LEN(REPLACE(day, 'WO', '')))*0.25 as WO,(LEN(day) - LEN(REPLACE(day, 'SS', '')))*0.25 as ss,(LEN(day) - LEN(REPLACE(day, 'PH', '')))*0.25 as PH, (LEN(day) - LEN(REPLACE(day, 'SH', '')))*0.25"
			        		+ " as SH,(LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25 as od, (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl,"
			        		+ " (LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl, (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL,"
			        		+ " (LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as LP from"
			        		+ "( select "+currentmonthdays(help.getYear(),help.getFrommonth(), 20)+" as day,Temp_Emp.Pernr"
			        		+ "  from EMP_IN_OUT_Status,Temp_Emp where Temp_Emp.Pernr=EMP_IN_OUT_Status.Pernr and month ='"+help.getFrommonth()+"' and year ='"+help.getYear()+"' and Date_Time='"+key+"'  and temp_emp.Swipe_count!=0)t  )"
			        		+ " k,Temp_Emp where  Temp_Emp.Pernr=k.Pernr group by k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,k.Pernr)t,Temp_Emp "
			        		+ "  where EMP_IN_OUT_Status.pernr =Temp_Emp.Pernr and  month ='"+help.getFrommonth()+"' and year ='"+help.getYear()+"'  and t.Pernr=EMP_IN_OUT_Status.Pernr and"
			        		+ " Date_Time='"+key+"'  and temp_emp.Swipe_count!=0)k,emp_official_info where t.Pernr=k.Pernr and emp_official_info.PERNR=k.Pernr"
			        				+ " union "
    				   + "	select emp_official_info.locid,emp_official_info.PERNR,EMP_FULLNAME,(t.PP + k.PP) as PP,(t.cl+k.cl)CL,(t.EL+k.EL) as EL,(t.sl+k.Sl) as SL,(t.wo+k.WO) as wo,(t.ss+k.ss) as ss,(t.PH+k.ph) "
			        		+ "as ph,(t.lp+k.lp) as lp,(t.SH+k.SH) as sh,(t.od+k.od) as od,t.totpaid, day1,	day2,	day3,	day4,	day5,	day6,	day7,	day8,	day9,"
			        		+ "	day10,	day11,	day12,	day13,	day14,	day15,	day16,	day17,	day18,	day19,	day20 ,  day21,	day22,	day23,	day24,"
			        		+ "	day25,	day26,	day27,	day28,	day29,	day30,	day31  from (  select t.*,month ,	replace(day21,'AA','PP')as day21,	replace(day22,'AA','PP')as day22,"
			        		+ "	replace(day23,'AA','PP')as day23,	replace(day24,'AA','PP')as day24,	replace(day25,'AA','PP')as day25,	replace(day26,'AA','PP')as day26,	replace(day27,'AA','PP')as day27,	replace(day28,'AA','PP')as day28,	replace(day29,'AA','PP')as day29,	replace(day30,'AA','PP')as day30,	replace(day31,'AA','PP')as day31 from EMP_IN_OUT_Status, "
			        		+ " ( select k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,sum(k.WO+k.ss+k.PH+k.PP+k.SH+k.od+k.SL+k.CL+k.EL) as totpaid,k.Pernr from"
			        		+ " (  SELECT 	Pernr,(LEN(day) - LEN(REPLACE(day, 'PP', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as PP,(LEN(day) - LEN(REPLACE(day, 'WO', '')))*0.25 as WO,(LEN(day) - LEN(REPLACE(day, 'SS', '')))*0.25 as ss,(LEN(day) - LEN(REPLACE(day, 'PH', '')))*0.25 as PH, (LEN(day) - LEN(REPLACE(day, 'SH', '')))*0.25 as SH,(LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25 as od, (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl, (LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl, (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL,(LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25 as LP  from( select "+prevmonthdays(prevyear, prevmont)+" as day,Temp_Emp.Pernr "
			        		+ " from EMP_IN_OUT_Status,Temp_Emp where Temp_Emp.pernr=EMP_IN_OUT_Status.Pernr and month ='"+prevmont+"' and year ='"+prevyear+"')t  ) k,Temp_Emp where"
			        		+ "  Temp_Emp.Pernr=k.Pernr group by k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,k.Pernr)t,Temp_Emp   where EMP_IN_OUT_Status.pernr =Temp_Emp.Pernr "
			        		+ "and  month ='"+prevmont+"' and year ='"+prevyear+"' and t.Pernr=EMP_IN_OUT_Status.Pernr and Date_Time='"+key+"' and temp_emp.Swipe_count=0)t ,  "
			        		+ " ( select t.*,month ,	replace(day1,'AA','PP')as day1,	replace(day2,'AA','PP')as day2,	replace(day3,'AA','PP')as day3,	replace(day4,'AA','PP')as day4,	replace(day5,'AA','PP')as day5,	"
			        		+ "replace(day6,'AA','PP')as day6,	replace(day7,'AA','PP')as day7,	replace(day8,'AA','PP')as day8,	replace(day9,'AA','PP')as day9,	replace(day10,'AA','PP')as day10,	replace(day11,'AA','PP')as day11,	replace(day12,'AA','PP')as day12,	replace(day13,'AA','PP')as day13,	replace(day14,'AA','PP')as day14,	replace(day15,'AA','PP')as day15,	replace(day16,'AA','PP')as day16,	replace(day17,'AA','PP')as day17,	replace(day18,'AA','PP')as day18,	replace(day19,'AA','PP')as day19,	replace(day20,'AA','PP')as day20  from EMP_IN_OUT_Status,  ( select k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,"
			        		+ "sum(k.WO+k.ss+k.PH+k.PP+k.SH+k.od+k.SL+k.CL+k.EL) as totpaid,k.Pernr from "
			        		+ "(  SELECT 	Pernr,(LEN(day) - LEN(REPLACE(day, 'PP', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as PP,(LEN(day) - LEN(REPLACE(day, 'WO', '')))*0.25 as WO,(LEN(day) - LEN(REPLACE(day, 'SS', '')))*0.25 as ss,(LEN(day) - LEN(REPLACE(day, 'PH', '')))*0.25 as PH, (LEN(day) - LEN(REPLACE(day, 'SH', '')))*0.25 as SH,(LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25 as od, (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl, (LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl, (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL,"
						+ " (LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25 as LP from"
			        		+ "( select "+currentmonthdays(help.getYear(),help.getFrommonth(), 20)+" as day,Temp_Emp.Pernr"
			        		+ "  from EMP_IN_OUT_Status,Temp_Emp where Temp_Emp.Pernr=EMP_IN_OUT_Status.Pernr and month ='"+help.getFrommonth()+"' and year ='"+help.getYear()+"' and Date_Time='"+key+"'  and temp_emp.Swipe_count=0)t  )"
			        		+ " k,Temp_Emp where  Temp_Emp.Pernr=k.Pernr group by k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,k.Pernr)t,Temp_Emp "
			        		+ "  where EMP_IN_OUT_Status.pernr =Temp_Emp.Pernr and  month ='"+help.getFrommonth()+"' and year ='"+help.getYear()+"'  and t.Pernr=EMP_IN_OUT_Status.Pernr and"
			        		+ " Date_Time='"+key+"'  and temp_emp.Swipe_count=0)k,emp_official_info where t.Pernr=k.Pernr and emp_official_info.PERNR=k.Pernr";
			        		
							}
						
						
						
				ResultSet rs20 = ad.selectQuery(b);
				while(rs20.next())
				{	
					HRApprovalForm app =new HRApprovalForm();
					app.setLocationId(rs20.getString("locid"));
					app.setEmployeeno(rs20.getString("pernr"));
					app.setEmployeeName(rs20.getString("EMP_FULLNAME"));
					app1.setMonth(help.getFrommonth());
					app.setMonth(help.getFrommonth());
					
					app1.setYear(help.getYear());
					app.setYear(help.getYear());
					
					
					if(rs20.getString("day1")!=null)
					{
					if(rs20.getString("day1").contains("NL"))
					app.setDay1(rs20.getString("day1").replace("NL", "LP"));	
					else
					app.setDay1(rs20.getString("day1"));	
					}
					
					if(rs20.getString("day2")!=null)
					{
					if(rs20.getString("day2").contains("NL"))
					app.setDay2(rs20.getString("day2").replace("NL", "LP"));
					else
				    app.setDay2(rs20.getString("day2"));
					}
					
					if(rs20.getString("day3")!=null)
					{
					if(rs20.getString("day3").contains("NL"))
					app.setDay3(rs20.getString("day3").replace("NL", "LP"));
					else
					app.setDay3(rs20.getString("day3"));
					}
					
					if(rs20.getString("day4")!=null)
					{
					if(rs20.getString("day4").contains("NL"))
					app.setDay4(rs20.getString("day4").replace("NL", "LP"));
					else
					app.setDay4(rs20.getString("day4"));
					}
					
					if(rs20.getString("day5")!=null)
					{
					if(rs20.getString("day5").contains("NL"))
					app.setDay5(rs20.getString("day5").replace("NL", "LP"));
					else
					app.setDay5(rs20.getString("day5"));
					}
					
					if(rs20.getString("day6")!=null)
					{
					if(rs20.getString("day6").contains("NL"))
					app.setDay6(rs20.getString("day6").replace("NL", "LP"));
					else
					app.setDay6(rs20.getString("day6"));
					}
					
					
					if(rs20.getString("day7")!=null)
					{
					if(rs20.getString("day7").contains("NL"))
					app.setDay7(rs20.getString("day7").replace("NL", "LP"));
					else
					app.setDay7(rs20.getString("day7"));
					}
					
					if(rs20.getString("day8")!=null)
					{
					if(rs20.getString("day8").contains("NL"))
					app.setDay8(rs20.getString("day8").replace("NL", "LP"));
					else
					app.setDay8(rs20.getString("day8"));
					}
					if(rs20.getString("day9")!=null)
					{
					if(rs20.getString("day9").contains("NL"))
					app.setDay9(rs20.getString("day9").replace("NL", "LP"));
					else
					app.setDay9(rs20.getString("day9"));
					}
					if(rs20.getString("day10")!=null)
					{
					if(rs20.getString("day10").contains("NL"))
					app.setDay10(rs20.getString("day10").replace("NL", "LP"));
					else
					app.setDay10(rs20.getString("day10"));
					}
					if(rs20.getString("day11")!=null)
					{
					if(rs20.getString("day11").contains("NL"))
					app.setDay11(rs20.getString("day11").replace("NL", "LP"));
					else
					app.setDay11(rs20.getString("day11"));
					}
					if(rs20.getString("day12")!=null)
					{
					if(rs20.getString("day12").contains("NL"))
					app.setDay12(rs20.getString("day12").replace("NL", "LP"));
					else
					app.setDay12(rs20.getString("day12"));
					}
					if(rs20.getString("day13")!=null)
					{
					if(rs20.getString("day13").contains("NL"))
					app.setDay13(rs20.getString("day13").replace("NL", "LP"));
					else
					app.setDay13(rs20.getString("day13"));
					}
					if(rs20.getString("day14")!=null)
					{
					if(rs20.getString("day14").contains("NL"))
					app.setDay14(rs20.getString("day14").replace("NL", "LP"));
					else
					app.setDay14(rs20.getString("day14"));
					}
					if(rs20.getString("day15")!=null)
					{
					if(rs20.getString("day15").contains("NL"))
					app.setDay15(rs20.getString("day15").replace("NL", "LP"));
					else
					app.setDay15(rs20.getString("day15"));
					}
					if(rs20.getString("day16")!=null)
					{
					if(rs20.getString("day16").contains("NL"))
					app.setDay16(rs20.getString("day16").replace("NL", "LP"));
					else
					app.setDay16(rs20.getString("day16"));
					}
					if(rs20.getString("day17")!=null)
					{
					if(rs20.getString("day17").contains("NL"))
					app.setDay17(rs20.getString("day17").replace("NL", "LP"));
					else
					app.setDay17(rs20.getString("day17"));
					}
					if(rs20.getString("day18")!=null)
					{
					if(rs20.getString("day18").contains("NL"))
					app.setDay18(rs20.getString("day18").replace("NL", "LP"));
					else
					app.setDay18(rs20.getString("day18"));
					}
					if(rs20.getString("day19")!=null)
					{
					if(rs20.getString("day19").contains("NL"))
					app.setDay19(rs20.getString("day19").replace("NL", "LP"));
					else
					app.setDay19(rs20.getString("day19"));
					}
					if(rs20.getString("day20")!=null)
					{
					if(rs20.getString("day20").contains("NL"))
					app.setDay20(rs20.getString("day20").replace("NL", "LP"));
					else
					app.setDay20(rs20.getString("day20"));
					}
					if(rs20.getString("day21")!=null)
					{
					if(rs20.getString("day21").contains("NL"))
					app.setDay21(rs20.getString("day21").replace("NL", "LP"));
					else
					app.setDay21(rs20.getString("day21"));
					}
					if(rs20.getString("day22")!=null)
					{
					if(rs20.getString("day22").contains("NL"))
					app.setDay22(rs20.getString("day22").replace("NL", "LP"));
					else
					app.setDay22(rs20.getString("day22"));
					}
					if(rs20.getString("day23")!=null)
					{
					if(rs20.getString("day23").contains("NL"))
					app.setDay23(rs20.getString("day23").replace("NL", "LP"));
					else
					app.setDay23(rs20.getString("day23"));
					}
					if(rs20.getString("day24")!=null)
					{
					if(rs20.getString("day24").contains("NL"))
					app.setDay24(rs20.getString("day24").replace("NL", "LP"));
					else
					app.setDay24(rs20.getString("day24"));
					}
					if(rs20.getString("day25")!=null)
					{
					if(rs20.getString("day25").contains("NL"))
					app.setDay25(rs20.getString("day25").replace("NL", "LP"));
					else
					app.setDay25(rs20.getString("day25"));
					}
					if(rs20.getString("day26")!=null)
					{
					if(rs20.getString("day26").contains("NL"))
					app.setDay26(rs20.getString("day26").replace("NL", "LP"));
					else
					app.setDay26(rs20.getString("day26"));
					}
					if(rs20.getString("day27")!=null)
					{
					if(rs20.getString("day27").contains("NL"))
					app.setDay27(rs20.getString("day27").replace("NL", "LP"));
					else
					app.setDay27(rs20.getString("day27"));
					}
					if(rs20.getString("day28")!=null)
					{
					if(rs20.getString("day28").contains("NL"))
					app.setDay28(rs20.getString("day28").replace("NL", "LP"));
					else
					app.setDay28(rs20.getString("day28"));
					}
					if(rs20.getString("day29")!=null)
					{
					if(rs20.getString("day29").contains("NL"))
					app.setDay29(rs20.getString("day29").replace("NL", "LP"));
					else
					app.setDay29(rs20.getString("day29"));
					}
					if(rs20.getString("day30")!=null)
					{
					if(rs20.getString("day30").contains("NL"))
					app.setDay30(rs20.getString("day30").replace("NL", "LP"));
					else
					app.setDay30(rs20.getString("day30"));
					}
					if(rs20.getString("day31")!=null)
					{
					if(rs20.getString("day31").contains("NL"))
					app.setDay31(rs20.getString("day31").replace("NL", "LP"));
					else
					app.setDay31(rs20.getString("day31"));
					}
						
						app.setOd(rs20.getFloat("Od"));
                       od=od+rs20.getFloat("Od");
						app.setCl(rs20.getFloat("cl"));
						cl=cl+rs20.getFloat("cl");
						app.setSl(rs20.getFloat("sl"));
						sl=sl+rs20.getFloat("sl");
						app.setEl(rs20.getFloat("el"));		
						el=el+rs20.getFloat("el");
						app.setLp(rs20.getFloat("lp"));		
						lp=lp+rs20.getFloat("lp");
				  	    app.setPh(rs20.getFloat("PH"));
				  	    ph=ph+rs20.getFloat("ph");
						app.setWo(rs20.getFloat("wo"));
				  	    wo=wo+rs20.getFloat("wo");
				  	  app.setSs( rs20.getFloat("ss"));
				  	    ss=ss+rs20.getFloat("ss");
						app.setSh(rs20.getFloat("SH"));
				  	    sh=sh+rs20.getFloat("sh");
						app.setPp(rs20.getFloat("PP"));
				  	    pp=pp+rs20.getFloat("pp");
						app.setPaid_days(rs20.getFloat("totpaid"));
						paid_days=paid_days+rs20.getFloat("totpaid");						
						app.setTotal(Float.toString((app.getLp()+app.getPaid_days())));
						total=total+Float.parseFloat((app.getTotal()));
					
						list3.add(app);
				}	
				rs20.close();
						
				help.setOd(od);
  
				help.setCl(cl);
			
				help.setSl(sl);
				
				help.setEl(el);		
	
				help.setLp(lp);		
				
		  	    help.setPh(ph);
		  	  
				help.setWo(wo);
				
				help.setSs(ss);
		
				help.setSh(sh);
		  	
				help.setPp(pp);
		  
				help.setPaid_days(paid_days);
				
				help.setTotal(Float.toString(total));
				
				list4.add(app1);
				
					
					
					if(help.getAttntype().equalsIgnoreCase("Calendar Month")  )
					{
						
						// Create a calendar object and set year and month
						Calendar mycal = Calendar.getInstance();

						mycal.set(Integer.parseInt(help.getYear()), Integer.parseInt(help.getFrommonth())-1, 1);
						
						// Get the number of days in that month
						int daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
						
						String countdays="SELECT day(thedate) as day FROM dbo.ExplodeDates('"+help.getYear()+"-"+help.getFrommonth()+"-01','"+help.getYear()+"-"+help.getFrommonth()+"-"+daysInMonth+"') as thedate";
			    	    ResultSet rscount=ad.selectQuery(countdays);
			    	    
			    			while(rscount.next())
			    			{
			                   
			                    HRApprovalForm date=new  HRApprovalForm();
			                    date.setDay(rscount.getString("day"));
			                    date.setDate("day"+rscount.getString("day"));
			                    datelist.add(date);
			    			}
			    			rscount.close();
			    			help.setDay(Integer.toString(datelist.size()+4));
			    			request.setAttribute("datelist", datelist);
					}
					if(help.getAttntype().equalsIgnoreCase("Payable Month")  )
					{
						// Create a calendar object and set year and month
						Calendar mycal = Calendar.getInstance();

						mycal.set(Integer.parseInt(help.getYear()), Integer.parseInt(help.getFrommonth())-1, 1);
						
						// Get the number of days in that month
						int daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
						
						String countdays="SELECT day(thedate) as day FROM dbo.ExplodeDates('"+prevyear+"-"+prevmont+"-21','"+help.getYear()+"-"+help.getFrommonth()+"-20') as thedate";
			    	    ResultSet rscount=ad.selectQuery(countdays);
			    	    
			    			while(rscount.next())
			    			{
			                   
			                    HRApprovalForm date=new  HRApprovalForm();
			                    date.setDay(rscount.getString("day"));
			                    date.setDate("day"+rscount.getString("day"));
			                    datelist.add(date);
			    			}
			    			rscount.close();
			    			help.setDay(Integer.toString(datelist.size()+4));
			    			request.setAttribute("datelist", datelist);
					}
					
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				finally{
	    			query1="";
	    			query2="";
	    			query3="";
	    			query4="";
	    			query5="";
	    			query6="";
	    			
	    			  //delete empNos
				    
				    String delete="delete Temp_Emp where Date_Time='"+key+"'";						    
				   int lldd=ad.SqlExecuteUpdate(delete);
	    		}
				request.setAttribute("list3", list3);
			
				
				
		
		
			help.setMonth(monthName[Integer.parseInt(help.getFrommonth())]);
		
						request.setAttribute("result", "");
						return mapping.findForward("exportdisplaypayablemusterreport");
						
					
		
	}
	
	public ActionForward getlist(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
	
		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		
		HRApprovalForm por=(HRApprovalForm)form;
		EssDao ad=new EssDao();
		
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		ArrayList locid=new ArrayList();
		ArrayList locnamelist=new ArrayList();
		String sql="select LOCID," +
							"LOCNAME,location_code from location where location_code in ("+locations+")";
		ResultSet rs=ad.selectQuery(sql);
		try {
			while(rs.next())
			{
				locid.add(rs.getString("LOCATION_CODE"));
				locnamelist.add(rs.getString("LOCATION_CODE")+"-"+rs.getString("LOCNAME"));

			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	
		
		por.setLocationIdList(locid);
		por.setLocationLabelList(locnamelist);
		
		
		
		return mapping.findForward("displayAll");
	}
	
	public ActionForward exportdata(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		
		EssDao ad=new EssDao();
		HRApprovalForm por1=(HRApprovalForm)form;
		
		Date dNow = new Date( );
		SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd");
		String exportdate=ft.format(dNow);

		response.setHeader("Content-Disposition", "inline; filename="+exportdate+"_Portal_Status_Report.xls");
		
		String link=request.getParameter("linkname");		
		
		
		String sql="";
		
		String loc=por1.getExplocid();
		String cat=por1.getExpcat();
		
		if(link.equalsIgnoreCase("Login"))
		{
			sql="select usr.username,emp.EMP_FULLNAME,desg.DSGSTXT,dept.DPTSTXT,usr.loginCount from users as usr,emp_official_info as emp,DEPARTMENT as dept,"
			+ "DESIGNATION as desg where usr.employeenumber=emp.PERNR and desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID and usr.loginCount!=0 and LOCID='"+loc+"' and emp.ACTIVE=1";
		
			if(!cat.equalsIgnoreCase(""))
			{
				sql=sql+" and STAFFCAT='"+cat+"' ";
			}
		sql=sql+"  order by username";
		ResultSet rs=ad.selectQuery(sql);
		LinkedList loginlist=new LinkedList();
		try {
						
			while(rs.next())
			{
				HRApprovalForm por=new HRApprovalForm();
				por.setEmployeeNo(rs.getString("username"));
				por.setEmployeeName(rs.getString("EMP_FULLNAME"));
				por.setDepartment(rs.getString("DPTSTXT"));
				por.setDesignation(rs.getString("DSGSTXT"));
				por.setStatus("Yes");
				loginlist.add(por);				
				
			}}
			catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			sql="select usr.username,emp.EMP_FULLNAME,desg.DSGSTXT,dept.DPTSTXT,usr.loginCount from users as usr,emp_official_info as emp,DEPARTMENT as dept,"
					+ "DESIGNATION as desg where usr.employeenumber=emp.PERNR and desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID and usr.loginCount=0 and LOCID='"+loc+"' and emp.ACTIVE=1";
				
			
			if(!cat.equalsIgnoreCase(""))
			{
				sql=sql+" and STAFFCAT='"+cat+"' ";
			}
			
			sql=sql+"  order by username";
			ResultSet rs1=ad.selectQuery(sql);
			try {
				while(rs1.next())
				{
					HRApprovalForm por=new HRApprovalForm();
					por.setEmployeeNo(rs1.getString("username"));
					por.setEmployeeName(rs1.getString("EMP_FULLNAME"));
					por.setDepartment(rs1.getString("DPTSTXT"));
					por.setDesignation(rs1.getString("DSGSTXT"));
					
					por.setStatus("No");
					loginlist.add(por);				
					
				}
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
			
		request.setAttribute("loginlist", loginlist);
		}
		
		if(link.equalsIgnoreCase("Leave"))
		{
			sql="select lv.user_id,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT from leave_details as lv,emp_official_info as emp,"
			+ "DEPARTMENT as dept,DESIGNATION as desg where lv.user_id =emp.PERNR  and desg.DSGID=emp.DSGID and "
			+ "dept.DPTID=emp.DPTID and LOCID='"+loc+"' and emp.ACTIVE=1";
		
			if(!cat.equalsIgnoreCase(""))
			{
				sql=sql+" and STAFFCAT='"+cat+"' ";
			}
			
			sql=sql+"  group by lv.user_id,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT";
		ResultSet rs=ad.selectQuery(sql);
		LinkedList leavlist=new LinkedList();
		try {
						
			while(rs.next())
			{
				HRApprovalForm por=new HRApprovalForm();
				por.setEmployeeNo(rs.getString("user_id"));
				por.setEmployeeName(rs.getString("EMP_FULLNAME"));
				por.setDepartment(rs.getString("DPTSTXT"));
				por.setDesignation(rs.getString("DSGSTXT"));
				por.setStatus("Yes");
				leavlist.add(por);				
				
			}}
			catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			sql="select emp.PERNR,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT from emp_official_info as emp,DEPARTMENT as dept,"
			+ "DESIGNATION as desg where    desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID and pernr not in"
			+ "(select lv.user_id from leave_details as lv,emp_official_info as emp,DEPARTMENT as dept,DESIGNATION as desg where lv.user_id =emp.PERNR "
			+ " and desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID  ) and LOCID='"+loc+"' and emp.ACTIVE=1";
				
			
			if(!cat.equalsIgnoreCase(""))
			{
				sql=sql+" and STAFFCAT='"+cat+"' ";
			}
			
			sql=sql+"  order by PERNR";
			ResultSet rs1=ad.selectQuery(sql);
			try {
				while(rs1.next())
				{
					HRApprovalForm por=new HRApprovalForm();
					por.setEmployeeNo(rs1.getString("PERNR"));
					por.setEmployeeName(rs1.getString("EMP_FULLNAME"));
					por.setDepartment(rs1.getString("DPTSTXT"));
					por.setDesignation(rs1.getString("DSGSTXT"));
					por.setStatus("No");
					leavlist.add(por);				
					
				}
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
			
		request.setAttribute("leavlist", leavlist);
		
			
		}
		
		if(link.equalsIgnoreCase("ALL"))
		{
			
			sql="select PERNR,EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT,(select employee_no from emp_personal_info where employee_no=main.PERNR ) as pers,"
					+ "(select distinct(employee_no) from emp_address where employee_no=main.PERNR ) as addr,(select distinct(employee_no) from emp_family_details"
					+ " where employee_no=main.PERNR ) as family,(select distinct(employee_no) from emp_education_details where employee_no=main.PERNR ) as education,"
					+ "(select distinct(employee_no) from emp_experience_details where employee_no=main.PERNR ) as exper,(select distinct(employee_no) "
					+ "from emp_language_details where employee_no=main.PERNR ) as lang from emp_official_info as main,DEPARTMENT as dept,DESIGNATION as desg where"
					+ " desg.DSGID=main.DSGID and dept.DPTID=main.DPTID and LOCID='"+loc+"' and main.ACTIVE=1";
			
			if(!cat.equalsIgnoreCase(""))
			{
				sql=sql+" and STAFFCAT='"+cat+"' ";
			}
			sql=sql+"order by PERNR";
			ResultSet rs=ad.selectQuery(sql);
			LinkedList All=new LinkedList();
			try {
							
				while(rs.next())
				{
					HRApprovalForm por=new HRApprovalForm();
					por.setEmployeeNo(rs.getString("PERNR"));
					por.setEmployeeName(rs.getString("EMP_FULLNAME"));
					por.setDepartment(rs.getString("DPTSTXT"));
					por.setDesignation(rs.getString("DSGSTXT"));
				    String a=rs.getString("pers");
				    String b=rs.getString("addr");
				    String c=rs.getString("family");
				    String d=rs.getString("education");
				    String e=rs.getString("exper");
				    String f=rs.getString("lang");
					if(a==null)
					{
						por.setPerstatus("No");
					}
					else
					{
						por.setPerstatus("Yes");
					}
					if(b==null)
					{
						por.setAddstatus("No");
					}
					else
					{
						por.setAddstatus("Yes");
					}
					if(c==null)
					{
						por.setFamstatus("No");
					}
					else
					{
						por.setFamstatus("Yes");
					}
					if(d==null)
					{
						por.setEdustatus("No");
					}
					else
					{
						por.setEdustatus("Yes");
					}
					if(e==null)
					{
						por.setExpstatus("No");
					}
					else
					{
						por.setExpstatus("Yes");
					}
					if(f==null)
					{
						por.setLanstatus("No");
					}
					else
					{
						por.setLanstatus("Yes");
					}
					
					All.add(por);				
					
				}}
				catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			request.setAttribute("alllist", All);
		}
		
		if(link.equalsIgnoreCase("Personal Information"))
		{
			sql="select per.user_id,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT from emp_personal_info as per,emp_official_info as emp,DEPARTMENT as dept,"
				+ "DESIGNATION as desg where per.user_id =emp.PERNR  and desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID  and LOCID='"+loc+"'  and emp.ACTIVE=1";
		
			
			if(!cat.equalsIgnoreCase(""))
			{
				sql=sql+" and STAFFCAT='"+cat+"' ";
			}
			
			sql=sql+"  group by per.user_id,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT";
		ResultSet rs=ad.selectQuery(sql);
		LinkedList perlist=new LinkedList();
		try {
						
			while(rs.next())
			{
				HRApprovalForm por=new HRApprovalForm();
				por.setEmployeeNo(rs.getString("user_id"));
				por.setEmployeeName(rs.getString("EMP_FULLNAME"));
				por.setDepartment(rs.getString("DPTSTXT"));
				por.setDesignation(rs.getString("DSGSTXT"));
				por.setStatus("1");
				perlist.add(por);				
				
			}}
			catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			sql="select emp.PERNR,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT from emp_official_info as emp,DEPARTMENT as dept,DESIGNATION as desg where  "
					+ "  desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID and pernr not in(select per.user_id from emp_personal_info"
					+ " as per,emp_official_info as emp,DEPARTMENT as dept,DESIGNATION as desg where per.user_id =emp.PERNR  and"
					+ " desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID   )and LOCID='"+loc+"' and emp.ACTIVE=1";
				
			
			if(!cat.equalsIgnoreCase(""))
			{
				sql=sql+" and STAFFCAT='"+cat+"' ";
			}
			
			sql=sql+"  order by PERNR";
			ResultSet rs1=ad.selectQuery(sql);
			try {
				while(rs1.next())
				{
					HRApprovalForm por=new HRApprovalForm();
					por.setEmployeeNo(rs.getString("PERNR"));
					por.setEmployeeName(rs.getString("EMP_FULLNAME"));
					por.setDepartment(rs.getString("DPTSTXT"));
					por.setDesignation(rs.getString("DSGSTXT"));
					por.setStatus("0");
					perlist.add(por);				
					
				}
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
			
		request.setAttribute("perlist", perlist);
		
			
		}
		
		if(link.equalsIgnoreCase("Address"))
		{

			sql="select per.user_id,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT from emp_address as per,emp_official_info as emp,DEPARTMENT as dept,"
				+ "DESIGNATION as desg where per.user_id =emp.PERNR  and desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID  and LOCID='"+loc+"' and emp.ACTIVE=1";
		
			
			if(!cat.equalsIgnoreCase(""))
			{
				sql=sql+" and STAFFCAT='"+cat+"' ";
			}
			
			sql=sql+"  group by per.user_id,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT";
		ResultSet rs=ad.selectQuery(sql);
		LinkedList addrlist=new LinkedList();
		try {
						
			while(rs.next())
			{
				HRApprovalForm por=new HRApprovalForm();
				por.setEmployeeNo(rs.getString("user_id"));
				por.setEmployeeName(rs.getString("EMP_FULLNAME"));
				por.setDepartment(rs.getString("DPTSTXT"));
				por.setDesignation(rs.getString("DSGSTXT"));
				por.setStatus("1");
				addrlist.add(por);				
				
			}}
			catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			sql="select emp.PERNR,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT from emp_official_info as emp,DEPARTMENT as dept,"
					+ "DESIGNATION as desg where    desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID and "
					+ "pernr not in(select per.user_id from emp_address as per,emp_official_info as emp,DEPARTMENT as dept,"
					+ "DESIGNATION as desg where per.user_id =emp.PERNR  and desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID   )and LOCID='"+loc+"' and emp.ACTIVE=1";
				
			if(!cat.equalsIgnoreCase(""))
			{
				sql=sql+" and STAFFCAT='"+cat+"' ";
			}
			
			sql=sql+"  order by PERNR";
			ResultSet rs1=ad.selectQuery(sql);
			try {
				while(rs1.next())
				{
					HRApprovalForm por=new HRApprovalForm();
					por.setEmployeeNo(rs.getString("PERNR"));
					por.setEmployeeName(rs.getString("EMP_FULLNAME"));
					por.setDepartment(rs.getString("DPTSTXT"));
					por.setDesignation(rs.getString("DSGSTXT"));
					por.setStatus("0");
					addrlist.add(por);				
					
				}
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
			
		request.setAttribute("addrlist", addrlist);	
					
			
		}
		if(link.equalsIgnoreCase("Family"))
		{


			sql="select per.user_id,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT from emp_family_details as per,"
					+ "emp_official_info as emp,DEPARTMENT as dept,DESIGNATION as desg where per.user_id =emp.PERNR  "
					+ "and desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID   and LOCID='"+loc+"' and emp.ACTIVE=1";
		
			
			if(!cat.equalsIgnoreCase(""))
			{
				sql=sql+" and STAFFCAT='"+cat+"' ";
			}
			
			sql=sql+"  group by per.user_id,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT";
		ResultSet rs=ad.selectQuery(sql);
		LinkedList familist=new LinkedList();
		try {
						
			while(rs.next())
			{
				HRApprovalForm por=new HRApprovalForm();
				por.setEmployeeNo(rs.getString("user_id"));
				por.setEmployeeName(rs.getString("EMP_FULLNAME"));
				por.setDepartment(rs.getString("DPTSTXT"));
				por.setDesignation(rs.getString("DSGSTXT"));
				por.setStatus("1");
				familist.add(por);				
				
			}}
			catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			sql="select emp.PERNR,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT from emp_official_info as emp,DEPARTMENT as dept,"
					+ "DESIGNATION as desg where    desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID and pernr "
					+ "not in(select per.user_id from emp_family_details as per,emp_official_info as emp,DEPARTMENT as dept,"
					+ "DESIGNATION as desg where per.user_id =emp.PERNR  and desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID   )and LOCID='"+loc+"' and emp.ACTIVE=1";
				
			
			if(!cat.equalsIgnoreCase(""))
			{
				sql=sql+" and STAFFCAT='"+cat+"' ";
			}
			
			sql=sql+"  order by PERNR";
			ResultSet rs1=ad.selectQuery(sql);
			try {
				while(rs1.next())
				{
					HRApprovalForm por=new HRApprovalForm();
					por.setEmployeeNo(rs.getString("PERNR"));
					por.setEmployeeName(rs.getString("EMP_FULLNAME"));
					por.setDepartment(rs.getString("DPTSTXT"));
					por.setDesignation(rs.getString("DSGSTXT"));
					por.setStatus("0");
					familist.add(por);				
					
				}
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
			
		request.setAttribute("familist", familist);						
					
			
		}
		
		if(link.equalsIgnoreCase("Education"))
		{


			sql="select per.user_id,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT from emp_education_details as per,"
					+ "emp_official_info as emp,DEPARTMENT as dept,DESIGNATION as desg where per.user_id =emp.PERNR  "
					+ "and desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID  and LOCID='"+loc+"' and emp.ACTIVE=1";
		
			
			if(!cat.equalsIgnoreCase(""))
			{
				sql=sql+" and STAFFCAT='"+cat+"' ";
			}
			
			sql=sql+"  group by per.user_id,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT";
		ResultSet rs=ad.selectQuery(sql);
		LinkedList edulist=new LinkedList();
		try {
						
			while(rs.next())
			{
				HRApprovalForm por=new HRApprovalForm();
				por.setEmployeeNo(rs.getString("user_id"));
				por.setEmployeeName(rs.getString("EMP_FULLNAME"));
				por.setDepartment(rs.getString("DPTSTXT"));
				por.setDesignation(rs.getString("DSGSTXT"));
				por.setStatus("1");
				edulist.add(por);				
				
			}}
			catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			sql="select emp.PERNR,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT from emp_official_info as emp,DEPARTMENT as dept,"
					+ "DESIGNATION as desg where    desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID and pernr not in"
					+ "(select per.user_id from emp_education_details as per,emp_official_info as emp,DEPARTMENT as dept,"
					+ "DESIGNATION as desg where per.user_id =emp.PERNR  and desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID   )and LOCID='"+loc+"' and emp.ACTIVE=1";
				
			
			if(!cat.equalsIgnoreCase(""))
			{
				sql=sql+" and STAFFCAT='"+cat+"' ";
			}
			
			sql=sql+"  order by PERNR";
			ResultSet rs1=ad.selectQuery(sql);
			try {
				while(rs1.next())
				{
					HRApprovalForm por=new HRApprovalForm();
					por.setEmployeeNo(rs.getString("PERNR"));
					por.setEmployeeName(rs.getString("EMP_FULLNAME"));
					por.setDepartment(rs.getString("DPTSTXT"));
					por.setDesignation(rs.getString("DSGSTXT"));
					por.setStatus("0");
					edulist.add(por);				
					
				}
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
			
		request.setAttribute("edulist", edulist);						
					
					
		}
		
		if(link.equalsIgnoreCase("Experience"))
		{
			sql="select per.user_id,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT from emp_experience_details as per,emp_official_info as emp,DEPARTMENT as dept,"
					+ "DESIGNATION as desg where per.user_id =emp.PERNR  and desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID  and LOCID='"+loc+"' and emp.ACTIVE=1";
			
			if(!cat.equalsIgnoreCase(""))
			{
				sql=sql+" and STAFFCAT='"+cat+"' ";
			}
			
			sql=sql+"  group by per.user_id,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT";
		
		ResultSet rs=ad.selectQuery(sql);
		LinkedList explist=new LinkedList();
		try {
						
			while(rs.next())
			{
				HRApprovalForm por=new HRApprovalForm();
				por.setEmployeeNo(rs.getString("user_id"));
				por.setEmployeeName(rs.getString("EMP_FULLNAME"));
				por.setDepartment(rs.getString("DPTSTXT"));
				por.setDesignation(rs.getString("DSGSTXT"));
				por.setStatus("1");
				explist.add(por);				
				
			}}
			catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			sql="select emp.PERNR,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT from emp_official_info as emp,DEPARTMENT as dept,"
					+ "DESIGNATION as desg where    desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID and pernr not in"
					+ "(select per.user_id from emp_experience_details as per,emp_official_info as emp,DEPARTMENT as dept,"
					+ "DESIGNATION as desg where per.user_id =emp.PERNR  and desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID   )and LOCID='"+loc+"' and emp.ACTIVE=1";
				
			
			if(!cat.equalsIgnoreCase(""))
			{
				sql=sql+" and STAFFCAT='"+cat+"' ";
			}
			
			sql=sql+"  order by PERNR";
			ResultSet rs1=ad.selectQuery(sql);
			try {
				while(rs1.next())
				{
					HRApprovalForm por=new HRApprovalForm();
					por.setEmployeeNo(rs.getString("PERNR"));
					por.setEmployeeName(rs.getString("EMP_FULLNAME"));
					por.setDepartment(rs.getString("DPTSTXT"));
					por.setDesignation(rs.getString("DSGSTXT"));
					por.setStatus("0");
					explist.add(por);				
					
				}
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
			
		request.setAttribute("explist", explist);						
							
		}
		
		if(link.equalsIgnoreCase("Language"))
		{
			sql="select per.user_id,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT from emp_language_details as per,"
					+ "emp_official_info as emp,DEPARTMENT as dept,DESIGNATION as desg where per.user_id =emp.PERNR  "
					+ "and desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID  and LOCID='"+loc+"' and emp.ACTIVE=1 ";
		
			if(!cat.equalsIgnoreCase(""))
			{
				sql=sql+" and STAFFCAT='"+cat+"' ";
			}
			
			sql=sql+"  group by per.user_id,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT";
			
			
		ResultSet rs=ad.selectQuery(sql);
		LinkedList langlist=new LinkedList();
		try {
						
			while(rs.next())
			{
				HRApprovalForm por=new HRApprovalForm();
				por.setEmployeeNo(rs.getString("user_id"));
				por.setEmployeeName(rs.getString("EMP_FULLNAME"));
				por.setDepartment(rs.getString("DPTSTXT"));
				por.setDesignation(rs.getString("DSGSTXT"));
				por.setStatus("1");
				langlist.add(por);				
				
			}}
			catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			sql="select emp.PERNR,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT from emp_official_info as emp,DEPARTMENT as dept,"
					+ "DESIGNATION as desg where    desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID and pernr not in"
					+ "(select per.user_id from emp_language_details as per,emp_official_info as emp,DEPARTMENT as dept,"
					+ "DESIGNATION as desg where per.user_id =emp.PERNR  and desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID   )and LOCID='"+loc+"' and emp.ACTIVE=1";
				
			
			if(!cat.equalsIgnoreCase(""))
			{
				sql=sql+" and STAFFCAT='"+cat+"' ";
			}
			
			sql=sql+"  order by PERNR";
			ResultSet rs1=ad.selectQuery(sql);
			try {
				while(rs1.next())
				{
					HRApprovalForm por=new HRApprovalForm();
					por.setEmployeeNo(rs.getString("PERNR"));
					por.setEmployeeName(rs.getString("EMP_FULLNAME"));
					por.setDepartment(rs.getString("DPTSTXT"));
					por.setDesignation(rs.getString("DSGSTXT"));
					por.setStatus("0");
					langlist.add(por);				
					
				}
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
			
		request.setAttribute("langlist", langlist);						
							
		
		
							
		
			
		}
		
		
		return mapping.findForward("exportdata");
	
		
	}
	
	
	public ActionForward displaydata(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		EssDao ad=new EssDao();
		HRApprovalForm por1=(HRApprovalForm)form;
		
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		ArrayList locid=new ArrayList();
		ArrayList locnamelist=new ArrayList();
		String sql1="select LOCID," +
							"LOCNAME,location_code from location where location_code in ("+locations+")";
		ResultSet rs11=ad.selectQuery(sql1);
		try {
			while(rs11.next())
			{
				locid.add(rs11.getString("LOCATION_CODE"));
				locnamelist.add(rs11.getString("LOCATION_CODE")+"-"+rs11.getString("LOCNAME"));

			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	
		
		por1.setLocationIdList(locid);
		por1.setLocationLabelList(locnamelist);
		
		String link=request.getParameter("linkname");		
		System.out.println(link);
		
		String sql="";
		
		String loc=por1.getLocationId();
		por1.setExplocid(loc);
		String cat=por1.getStaffcat();
		por1.setExpcat(cat);
		
		if(link.equalsIgnoreCase("Login"))
		{
			sql="select usr.username,emp.EMP_FULLNAME,desg.DSGSTXT,dept.DPTSTXT,usr.loginCount from users as usr,emp_official_info as emp,DEPARTMENT as dept,"
			+ "DESIGNATION as desg where usr.employeenumber=emp.PERNR and desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID and usr.loginCount!=0 and LOCID='"+loc+"' and emp.ACTIVE=1";
		
			if(!cat.equalsIgnoreCase(""))
			{
				sql=sql+" and STAFFCAT='"+cat+"' ";
			}
		sql=sql+"  order by username";
		ResultSet rs=ad.selectQuery(sql);
		LinkedList loginlist=new LinkedList();
		try {
						
			while(rs.next())
			{
				HRApprovalForm por=new HRApprovalForm();
				por.setEmployeeNo(rs.getString("username"));
				por.setEmployeeName(rs.getString("EMP_FULLNAME"));
				por.setDepartment(rs.getString("DPTSTXT"));
				por.setDesignation(rs.getString("DSGSTXT"));
				por.setStatus("Yes");
				loginlist.add(por);				
				
			}}
			catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			sql="select usr.username,emp.EMP_FULLNAME,desg.DSGSTXT,dept.DPTSTXT,usr.loginCount from users as usr,emp_official_info as emp,DEPARTMENT as dept,"
					+ "DESIGNATION as desg where usr.employeenumber=emp.PERNR and desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID and usr.loginCount=0 and LOCID='"+loc+"' and emp.ACTIVE=1";
				
			
			if(!cat.equalsIgnoreCase(""))
			{
				sql=sql+" and STAFFCAT='"+cat+"' ";
			}
			
			sql=sql+"  order by username";
			ResultSet rs1=ad.selectQuery(sql);
			try {
				while(rs1.next())
				{
					HRApprovalForm por=new HRApprovalForm();
					por.setEmployeeNo(rs1.getString("username"));
					por.setEmployeeName(rs1.getString("EMP_FULLNAME"));
					por.setDepartment(rs1.getString("DPTSTXT"));
					por.setDesignation(rs1.getString("DSGSTXT"));
					
					por.setStatus("No");
					loginlist.add(por);				
					
				}
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
			
		request.setAttribute("loginlist", loginlist);
		}
		
		if(link.equalsIgnoreCase("Leave"))
		{
			sql="select lv.user_id,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT from leave_details as lv,emp_official_info as emp,"
			+ "DEPARTMENT as dept,DESIGNATION as desg where lv.user_id =emp.PERNR  and desg.DSGID=emp.DSGID and "
			+ "dept.DPTID=emp.DPTID and LOCID='"+loc+"' and emp.ACTIVE=1";
		
			if(!cat.equalsIgnoreCase(""))
			{
				sql=sql+" and STAFFCAT='"+cat+"' ";
			}
			
			sql=sql+"  group by lv.user_id,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT";
		ResultSet rs=ad.selectQuery(sql);
		LinkedList leavlist=new LinkedList();
		try {
						
			while(rs.next())
			{
				HRApprovalForm por=new HRApprovalForm();
				por.setEmployeeNo(rs.getString("user_id"));
				por.setEmployeeName(rs.getString("EMP_FULLNAME"));
				por.setDepartment(rs.getString("DPTSTXT"));
				por.setDesignation(rs.getString("DSGSTXT"));
				por.setStatus("Yes");
				leavlist.add(por);				
				
			}}
			catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			sql="select emp.PERNR,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT from emp_official_info as emp,DEPARTMENT as dept,"
			+ "DESIGNATION as desg where    desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID and pernr not in"
			+ "(select lv.user_id from leave_details as lv,emp_official_info as emp,DEPARTMENT as dept,DESIGNATION as desg where lv.user_id =emp.PERNR "
			+ " and desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID  ) and LOCID='"+loc+"' and emp.ACTIVE=1";
				
			
			if(!cat.equalsIgnoreCase(""))
			{
				sql=sql+" and STAFFCAT='"+cat+"' ";
			}
			
			sql=sql+"  order by PERNR";
			ResultSet rs1=ad.selectQuery(sql);
			try {
				while(rs1.next())
				{
					HRApprovalForm por=new HRApprovalForm();
					por.setEmployeeNo(rs1.getString("PERNR"));
					por.setEmployeeName(rs1.getString("EMP_FULLNAME"));
					por.setDepartment(rs1.getString("DPTSTXT"));
					por.setDesignation(rs1.getString("DSGSTXT"));
					por.setStatus("No");
					leavlist.add(por);				
					
				}
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
			
		request.setAttribute("leavlist", leavlist);
		
			
		}
		
		if(link.equalsIgnoreCase("ALL"))
		{
			
			sql="select PERNR,EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT,(select employee_no from emp_personal_info where employee_no=main.PERNR ) as pers,"
					+ "(select distinct(employee_no) from emp_address where employee_no=main.PERNR ) as addr,(select distinct(employee_no) from emp_family_details"
					+ " where employee_no=main.PERNR ) as family,(select distinct(employee_no) from emp_education_details where employee_no=main.PERNR ) as education,"
					+ "(select distinct(employee_no) from emp_experience_details where employee_no=main.PERNR ) as exper,(select distinct(employee_no) "
					+ "from emp_language_details where employee_no=main.PERNR ) as lang from emp_official_info as main,DEPARTMENT as dept,DESIGNATION as desg where"
					+ " desg.DSGID=main.DSGID and dept.DPTID=main.DPTID and LOCID='"+loc+"' and main.ACTIVE=1";
			
			if(!cat.equalsIgnoreCase(""))
			{
				sql=sql+" and STAFFCAT='"+cat+"' ";
			}
			sql=sql+"order by PERNR";
			ResultSet rs=ad.selectQuery(sql);
			LinkedList All=new LinkedList();
			try {
							
				while(rs.next())
				{
					HRApprovalForm por=new HRApprovalForm();
					por.setEmployeeNo(rs.getString("PERNR"));
					por.setEmployeeName(rs.getString("EMP_FULLNAME"));
					por.setDepartment(rs.getString("DPTSTXT"));
					por.setDesignation(rs.getString("DSGSTXT"));
				    String a=rs.getString("pers");
				    String b=rs.getString("addr");
				    String c=rs.getString("family");
				    String d=rs.getString("education");
				    String e=rs.getString("exper");
				    String f=rs.getString("lang");
					if(a==null)
					{
						por.setPerstatus("No");
					}
					else
					{
						por.setPerstatus("Yes");
					}
					if(b==null)
					{
						por.setAddstatus("No");
					}
					else
					{
						por.setAddstatus("Yes");
					}
					if(c==null)
					{
						por.setFamstatus("No");
					}
					else
					{
						por.setFamstatus("Yes");
					}
					if(d==null)
					{
						por.setEdustatus("No");
					}
					else
					{
						por.setEdustatus("Yes");
					}
					if(e==null)
					{
						por.setExpstatus("No");
					}
					else
					{
						por.setExpstatus("Yes");
					}
					if(f==null)
					{
						por.setLanstatus("No");
					}
					else
					{
						por.setLanstatus("Yes");
					}
					
					All.add(por);				
					
				}}
				catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			request.setAttribute("alllist", All);
		}
		
		if(link.equalsIgnoreCase("Personal Information"))
		{
			sql="select per.user_id,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT from emp_personal_info as per,emp_official_info as emp,DEPARTMENT as dept,"
				+ "DESIGNATION as desg where per.user_id =emp.PERNR  and desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID  and LOCID='"+loc+"'  and emp.ACTIVE=1";
		
			
			if(!cat.equalsIgnoreCase(""))
			{
				sql=sql+" and STAFFCAT='"+cat+"' ";
			}
			
			sql=sql+"  group by per.user_id,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT";
		ResultSet rs=ad.selectQuery(sql);
		LinkedList perlist=new LinkedList();
		try {
						
			while(rs.next())
			{
				HRApprovalForm por=new HRApprovalForm();
				por.setEmployeeNo(rs.getString("user_id"));
				por.setEmployeeName(rs.getString("EMP_FULLNAME"));
				por.setDepartment(rs.getString("DPTSTXT"));
				por.setDesignation(rs.getString("DSGSTXT"));
				por.setStatus("1");
				perlist.add(por);				
				
			}}
			catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			sql="select emp.PERNR,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT from emp_official_info as emp,DEPARTMENT as dept,DESIGNATION as desg where  "
					+ "  desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID and pernr not in(select per.user_id from emp_personal_info"
					+ " as per,emp_official_info as emp,DEPARTMENT as dept,DESIGNATION as desg where per.user_id =emp.PERNR  and"
					+ " desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID   )and LOCID='"+loc+"' and emp.ACTIVE=1";
				
			
			if(!cat.equalsIgnoreCase(""))
			{
				sql=sql+" and STAFFCAT='"+cat+"' ";
			}
			
			sql=sql+"  order by PERNR";
			ResultSet rs1=ad.selectQuery(sql);
			try {
				while(rs1.next())
				{
					HRApprovalForm por=new HRApprovalForm();
					por.setEmployeeNo(rs.getString("PERNR"));
					por.setEmployeeName(rs.getString("EMP_FULLNAME"));
					por.setDepartment(rs.getString("DPTSTXT"));
					por.setDesignation(rs.getString("DSGSTXT"));
					por.setStatus("0");
					perlist.add(por);				
					
				}
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
			
		request.setAttribute("perlist", perlist);
		
			
		}
		
		if(link.equalsIgnoreCase("Address"))
		{

			sql="select per.user_id,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT from emp_address as per,emp_official_info as emp,DEPARTMENT as dept,"
				+ "DESIGNATION as desg where per.user_id =emp.PERNR  and desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID  and LOCID='"+loc+"' and emp.ACTIVE=1";
		
			
			if(!cat.equalsIgnoreCase(""))
			{
				sql=sql+" and STAFFCAT='"+cat+"' ";
			}
			
			sql=sql+"  group by per.user_id,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT";
		ResultSet rs=ad.selectQuery(sql);
		LinkedList addrlist=new LinkedList();
		try {
						
			while(rs.next())
			{
				HRApprovalForm por=new HRApprovalForm();
				por.setEmployeeNo(rs.getString("user_id"));
				por.setEmployeeName(rs.getString("EMP_FULLNAME"));
				por.setDepartment(rs.getString("DPTSTXT"));
				por.setDesignation(rs.getString("DSGSTXT"));
				por.setStatus("1");
				addrlist.add(por);				
				
			}}
			catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			sql="select emp.PERNR,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT from emp_official_info as emp,DEPARTMENT as dept,"
					+ "DESIGNATION as desg where    desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID and "
					+ "pernr not in(select per.user_id from emp_address as per,emp_official_info as emp,DEPARTMENT as dept,"
					+ "DESIGNATION as desg where per.user_id =emp.PERNR  and desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID   )and LOCID='"+loc+"' and emp.ACTIVE=1";
				
			if(!cat.equalsIgnoreCase(""))
			{
				sql=sql+" and STAFFCAT='"+cat+"' ";
			}
			
			sql=sql+"  order by PERNR";
			ResultSet rs1=ad.selectQuery(sql);
			try {
				while(rs1.next())
				{
					HRApprovalForm por=new HRApprovalForm();
					por.setEmployeeNo(rs.getString("PERNR"));
					por.setEmployeeName(rs.getString("EMP_FULLNAME"));
					por.setDepartment(rs.getString("DPTSTXT"));
					por.setDesignation(rs.getString("DSGSTXT"));
					por.setStatus("0");
					addrlist.add(por);				
					
				}
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
			
		request.setAttribute("addrlist", addrlist);	
					
			
		}
		if(link.equalsIgnoreCase("Family"))
		{


			sql="select per.user_id,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT from emp_family_details as per,"
					+ "emp_official_info as emp,DEPARTMENT as dept,DESIGNATION as desg where per.user_id =emp.PERNR  "
					+ "and desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID   and LOCID='"+loc+"' and emp.ACTIVE=1";
		
			
			if(!cat.equalsIgnoreCase(""))
			{
				sql=sql+" and STAFFCAT='"+cat+"' ";
			}
			
			sql=sql+"  group by per.user_id,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT";
		ResultSet rs=ad.selectQuery(sql);
		LinkedList familist=new LinkedList();
		try {
						
			while(rs.next())
			{
				HRApprovalForm por=new HRApprovalForm();
				por.setEmployeeNo(rs.getString("user_id"));
				por.setEmployeeName(rs.getString("EMP_FULLNAME"));
				por.setDepartment(rs.getString("DPTSTXT"));
				por.setDesignation(rs.getString("DSGSTXT"));
				por.setStatus("1");
				familist.add(por);				
				
			}}
			catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			sql="select emp.PERNR,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT from emp_official_info as emp,DEPARTMENT as dept,"
					+ "DESIGNATION as desg where    desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID and pernr "
					+ "not in(select per.user_id from emp_family_details as per,emp_official_info as emp,DEPARTMENT as dept,"
					+ "DESIGNATION as desg where per.user_id =emp.PERNR  and desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID   )and LOCID='"+loc+"' and emp.ACTIVE=1";
				
			
			if(!cat.equalsIgnoreCase(""))
			{
				sql=sql+" and STAFFCAT='"+cat+"' ";
			}
			
			sql=sql+"  order by PERNR";
			ResultSet rs1=ad.selectQuery(sql);
			try {
				while(rs1.next())
				{
					HRApprovalForm por=new HRApprovalForm();
					por.setEmployeeNo(rs.getString("PERNR"));
					por.setEmployeeName(rs.getString("EMP_FULLNAME"));
					por.setDepartment(rs.getString("DPTSTXT"));
					por.setDesignation(rs.getString("DSGSTXT"));
					por.setStatus("0");
					familist.add(por);				
					
				}
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
			
		request.setAttribute("familist", familist);						
					
			
		}
		
		if(link.equalsIgnoreCase("Education"))
		{


			sql="select per.user_id,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT from emp_education_details as per,"
					+ "emp_official_info as emp,DEPARTMENT as dept,DESIGNATION as desg where per.user_id =emp.PERNR  "
					+ "and desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID  and LOCID='"+loc+"' and emp.ACTIVE=1";
		
			
			if(!cat.equalsIgnoreCase(""))
			{
				sql=sql+" and STAFFCAT='"+cat+"' ";
			}
			
			sql=sql+"  group by per.user_id,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT";
		ResultSet rs=ad.selectQuery(sql);
		LinkedList edulist=new LinkedList();
		try {
						
			while(rs.next())
			{
				HRApprovalForm por=new HRApprovalForm();
				por.setEmployeeNo(rs.getString("user_id"));
				por.setEmployeeName(rs.getString("EMP_FULLNAME"));
				por.setDepartment(rs.getString("DPTSTXT"));
				por.setDesignation(rs.getString("DSGSTXT"));
				por.setStatus("1");
				edulist.add(por);				
				
			}}
			catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			sql="select emp.PERNR,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT from emp_official_info as emp,DEPARTMENT as dept,"
					+ "DESIGNATION as desg where    desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID and pernr not in"
					+ "(select per.user_id from emp_education_details as per,emp_official_info as emp,DEPARTMENT as dept,"
					+ "DESIGNATION as desg where per.user_id =emp.PERNR  and desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID   )and LOCID='"+loc+"' and emp.ACTIVE=1";
				
			
			if(!cat.equalsIgnoreCase(""))
			{
				sql=sql+" and STAFFCAT='"+cat+"' ";
			}
			
			sql=sql+"  order by PERNR";
			ResultSet rs1=ad.selectQuery(sql);
			try {
				while(rs1.next())
				{
					HRApprovalForm por=new HRApprovalForm();
					por.setEmployeeNo(rs.getString("PERNR"));
					por.setEmployeeName(rs.getString("EMP_FULLNAME"));
					por.setDepartment(rs.getString("DPTSTXT"));
					por.setDesignation(rs.getString("DSGSTXT"));
					por.setStatus("0");
					edulist.add(por);				
					
				}
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
			
		request.setAttribute("edulist", edulist);						
					
					
		}
		
		if(link.equalsIgnoreCase("Experience"))
		{
			sql="select per.user_id,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT from emp_experience_details as per,emp_official_info as emp,DEPARTMENT as dept,"
					+ "DESIGNATION as desg where per.user_id =emp.PERNR  and desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID  and LOCID='"+loc+"' and emp.ACTIVE=1";
			
			if(!cat.equalsIgnoreCase(""))
			{
				sql=sql+" and STAFFCAT='"+cat+"' ";
			}
			
			sql=sql+"  group by per.user_id,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT";
		
		ResultSet rs=ad.selectQuery(sql);
		LinkedList explist=new LinkedList();
		try {
						
			while(rs.next())
			{
				HRApprovalForm por=new HRApprovalForm();
				por.setEmployeeNo(rs.getString("user_id"));
				por.setEmployeeName(rs.getString("EMP_FULLNAME"));
				por.setDepartment(rs.getString("DPTSTXT"));
				por.setDesignation(rs.getString("DSGSTXT"));
				por.setStatus("1");
				explist.add(por);				
				
			}}
			catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			sql="select emp.PERNR,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT from emp_official_info as emp,DEPARTMENT as dept,"
					+ "DESIGNATION as desg where    desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID and pernr not in"
					+ "(select per.user_id from emp_experience_details as per,emp_official_info as emp,DEPARTMENT as dept,"
					+ "DESIGNATION as desg where per.user_id =emp.PERNR  and desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID   )and LOCID='"+loc+"' and emp.ACTIVE=1";
				
			
			if(!cat.equalsIgnoreCase(""))
			{
				sql=sql+" and STAFFCAT='"+cat+"' ";
			}
			
			sql=sql+"  order by PERNR";
			ResultSet rs1=ad.selectQuery(sql);
			try {
				while(rs1.next())
				{
					HRApprovalForm por=new HRApprovalForm();
					por.setEmployeeNo(rs.getString("PERNR"));
					por.setEmployeeName(rs.getString("EMP_FULLNAME"));
					por.setDepartment(rs.getString("DPTSTXT"));
					por.setDesignation(rs.getString("DSGSTXT"));
					por.setStatus("0");
					explist.add(por);				
					
				}
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
			
		request.setAttribute("explist", explist);						
							
		}
		
		if(link.equalsIgnoreCase("Language"))
		{
			sql="select per.user_id,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT from emp_language_details as per,"
					+ "emp_official_info as emp,DEPARTMENT as dept,DESIGNATION as desg where per.user_id =emp.PERNR  "
					+ "and desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID  and LOCID='"+loc+"' and emp.ACTIVE=1 ";
		
			if(!cat.equalsIgnoreCase(""))
			{
				sql=sql+" and STAFFCAT='"+cat+"' ";
			}
			
			sql=sql+"  group by per.user_id,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT";
			
			
		ResultSet rs=ad.selectQuery(sql);
		LinkedList langlist=new LinkedList();
		try {
						
			while(rs.next())
			{
				HRApprovalForm por=new HRApprovalForm();
				por.setEmployeeNo(rs.getString("user_id"));
				por.setEmployeeName(rs.getString("EMP_FULLNAME"));
				por.setDepartment(rs.getString("DPTSTXT"));
				por.setDesignation(rs.getString("DSGSTXT"));
				por.setStatus("1");
				langlist.add(por);				
				
			}}
			catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			sql="select emp.PERNR,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT from emp_official_info as emp,DEPARTMENT as dept,"
					+ "DESIGNATION as desg where    desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID and pernr not in"
					+ "(select per.user_id from emp_language_details as per,emp_official_info as emp,DEPARTMENT as dept,"
					+ "DESIGNATION as desg where per.user_id =emp.PERNR  and desg.DSGID=emp.DSGID and dept.DPTID=emp.DPTID   )and LOCID='"+loc+"' and emp.ACTIVE=1";
				
			
			if(!cat.equalsIgnoreCase(""))
			{
				sql=sql+" and STAFFCAT='"+cat+"' ";
			}
			
			sql=sql+"  order by PERNR";
			ResultSet rs1=ad.selectQuery(sql);
			try {
				while(rs1.next())
				{
					HRApprovalForm por=new HRApprovalForm();
					por.setEmployeeNo(rs.getString("PERNR"));
					por.setEmployeeName(rs.getString("EMP_FULLNAME"));
					por.setDepartment(rs.getString("DPTSTXT"));
					por.setDesignation(rs.getString("DSGSTXT"));
					por.setStatus("0");
					langlist.add(por);				
					
				}
			
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
			
		request.setAttribute("langlist", langlist);						
							
		
			
		}
		
		
		return mapping.findForward("displayAll");
	}

	
	public ActionForward empdetailreport(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		HRApprovalForm holidayForm = (HRApprovalForm) form;
		HttpSession sesion=request.getSession();
		UserInfo user=(UserInfo)sesion.getAttribute("user");
		
		
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		
		
		ArrayList locationList=new ArrayList();
		ArrayList locationLabelList=new ArrayList();
		ResultSet rs11 = ad.selectQuery("select LOCID," +
				"LOCNAME,location_code from location where location_code in ("+locations+") "); 
				try {
					while(rs11.next()) {
						locationList.add(rs11.getString("location_code"));
						locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
						
					}
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				holidayForm.setLocationIdList(locationList);
				holidayForm.setLocationLabelList(locationLabelList);
				
				
				try {
					cc.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				try {
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				return mapping.findForward("empdetailreport");
		
	}
	
	
	public ActionForward empdetailreportsearch(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		HRApprovalForm holidayForm = (HRApprovalForm) form;
		HttpSession sesion=request.getSession();
		UserInfo user=(UserInfo)sesion.getAttribute("user");
		
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		ArrayList locationList=new ArrayList();
		ArrayList locationLabelList=new ArrayList();
		ResultSet rs11 = ad.selectQuery("select LOCID," +
				"LOCNAME,location_code from location where location_code in ("+locations+")"); 
				try {
					while(rs11.next()) {
						locationList.add(rs11.getString("location_code"));
						locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
						
					}
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				holidayForm.setLocationIdList(locationList);
				holidayForm.setLocationLabelList(locationLabelList);
				
				try {
					cc.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				try {
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				return mapping.findForward("empdetailreport");
		
		
	}
	
	
	public ActionForward empdetailreportEXE(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		HRApprovalForm emp = (HRApprovalForm) form;
		HttpSession sesion=request.getSession();
		UserInfo user=(UserInfo)sesion.getAttribute("user");
		
		try {
			Thread.sleep(2000);
		} catch (InterruptedException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}
		
		ArrayList emplist=new ArrayList();
		
		   emp.setLocationId(request.getParameter("loc"));
		   emp.setSummbrkup(request.getParameter("summbrkup"));
		   
		   String a="select emp_official_info.LOCID,Location.LOCNAME,Paygroup_Master.Short_desc,emp_official_info.PERNR,emp_official_info.TITLE,emp_official_info.EMP_FULLNAME,"
		   		+ "emp_personal_info.marital_status,emp_official_info.DOB,emp_personal_info.blood_group,emp_personal_info.telephone_no,emp_personal_info.mobile_no,emp_official_info.EMAIL_ID,PANNO,"
		   		+ "emp_personal_info.number_of_childrens, Category.CATLTEXT,doj,DOC,State.BEZEI,GRDID,DSGSTXT,DPTSTXT,ESINO,PFNO,PAYMENT_METHOD,BACCNO,Bank.BNAME,"
		   		+ "emp_official_info.IFSC_CODE,emp_official_info.MICR_CODE,emp_official_info.Created_date from  DEPARTMENT,DESIGNATION,Location,Paygroup_Master,Category,state,"
		   		+ "emp_official_info left outer join  emp_personal_info  on emp_personal_info.employee_no=emp_official_info.pernr  left outer join Bank on  Bank.BANKID=emp_official_info.BANKID  where emp_official_info.LOCID='"+emp.getLocationId()+"' and"
		   		+ " emp_official_info.LOCID=Location.LOCATION_CODE and emp_official_info.DPTID=DEPARTMENT.DPTID and DESIGNATION.DSGID=emp_official_info.DSGID and "
		   		+ "emp_official_info.PAY_GROUP=Paygroup_Master.Paygroup and emp_official_info.STAFFCAT=Category.STAFFCAT and State.LAND1=emp_official_info.LAND1 and"
		   		+ " State.BLAND=convert(nvarchar(10),emp_official_info.state) ";
		   
		   
		   if(emp.getSummbrkup().equalsIgnoreCase("All"))
		     {
			   a=a+" order by PERNR";
		     }
		     if(emp.getSummbrkup().equalsIgnoreCase("Active"))
		     {
		    	a=a+" and ACTIVE=1 order by PERNR";
		     }
		   
		   ResultSet b=ad.selectQuery(a);
		   try {
			while(b.next())
			   {
				JoiningFormalityForm jo=new JoiningFormalityForm();
				jo.setLocation(b.getString("LOCID"));
				jo.setLocation_name(b.getString("LOCNAME"));
				jo.setPaygrp(b.getString("Short_desc"));
				jo.setEmpId(b.getString("PERNR"));
				jo.setTitle(b.getString("TITLE"));
				jo.setEmpname(b.getString("EMP_FULLNAME"));
				jo.setMaritalStatus(b.getString("marital_status"));
				jo.setDateofBirth(b.getString("DOB"));
				jo.setTelephoneNumber(b.getString("telephone_no"));
				jo.setMobileNumber(b.getString("mobile_no"));
				jo.setEmailAddress(b.getString("EMAIL_ID"));
				jo.setPermanentAccountNumber(b.getString("PANNO"));
				jo.setNoOfChildrens(b.getString("number_of_childrens"));
				jo.setCategory(b.getString("CATLTEXT"));
				jo.setDoc(b.getString("doc"));
				jo.setDoj(b.getString("doj"));
				jo.setState(b.getString("BEZEI"));
				jo.setGrade(b.getString("GRDID"));
				jo.setDept(b.getString("DPTSTXT"));
				jo.setDesg(b.getString("DSGSTXT"));
				jo.setEsino(b.getString("ESINO"));
				jo.setPfno(b.getString("PFNO"));
				jo.setPaymentmethod(b.getString("PAYMENT_METHOD"));
				jo.setBankacno(b.getString("BACCNO"));
				jo.setBankname(b.getString("BNAME"));
				jo.setIfsc(b.getString("IFSC_CODE"));
				jo.setMicr(b.getString("MICR_CODE"));
				jo.setCreated_date(b.getString("Created_date"));
				jo.setBloodGroup(b.getString("blood_group"));
				String qual="select top 1 Priority,Qualification.Qualification from emp_education_details,QUALIFICATION where user_id='"+b.getString("PERNR")+"' and emp_education_details.qualification=QUALIFICATION.Id  order by Priority desc";
				ResultSet qal=ad.selectQuery(qual);
				if(qal.next())
				{
					jo.setQualification(qal.getString("Qualification"));
				}
				qal.close();
				
				
				emplist.add(jo);
				
			   }
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		   
		   try {
				b.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		   finally{
   			query1="";
   			query2="";
   			query3="";
   			query4="";
   			query5="";
   			query6="";
   		}
		   
		   request.setAttribute("emplist", emplist);
		   
		   
		   
				
				return mapping.findForward("displayempdetailreport");
		
		
	}
	
	public ActionForward Exportempdetailreport(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		HRApprovalForm emp = (HRApprovalForm) form;
		HttpSession sesion=request.getSession();
		UserInfo user=(UserInfo)sesion.getAttribute("user");
		Date dNow = new Date( );
		SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd");
		String exportdate=ft.format(dNow);

		response.setHeader("Content-Disposition", "inline; filename="+exportdate+"_Employee_Detail_Report.xls");
		
		ArrayList emplist=new ArrayList();
		
		   emp.setLocationId(request.getParameter("loc"));
		   emp.setSummbrkup(request.getParameter("summbrkup"));
		   
		   String a="select emp_official_info.LOCID,Location.LOCNAME,Paygroup_Master.Short_desc,emp_official_info.PERNR,emp_official_info.TITLE,emp_official_info.EMP_FULLNAME,"
			   		+ "emp_personal_info.marital_status,emp_official_info.DOB,emp_personal_info.blood_group,emp_personal_info.telephone_no,emp_personal_info.mobile_no,emp_official_info.EMAIL_ID,PANNO,"
			   		+ "emp_personal_info.number_of_childrens, Category.CATLTEXT,doj,DOC,State.BEZEI,GRDID,DSGSTXT,DPTSTXT,ESINO,PFNO,PAYMENT_METHOD,BACCNO,Bank.BNAME,"
			   		+ "emp_official_info.IFSC_CODE,emp_official_info.MICR_CODE,emp_official_info.Created_date from  DEPARTMENT,DESIGNATION,Location,Paygroup_Master,Category,state,"
			   		+ "emp_official_info left outer join  emp_personal_info  on emp_personal_info.employee_no=emp_official_info.pernr  left outer join Bank on  Bank.BANKID=emp_official_info.BANKID  where emp_official_info.LOCID='"+emp.getLocationId()+"' and"
			   		+ " emp_official_info.LOCID=Location.LOCATION_CODE and emp_official_info.DPTID=DEPARTMENT.DPTID and DESIGNATION.DSGID=emp_official_info.DSGID and "
			   		+ "emp_official_info.PAY_GROUP=Paygroup_Master.Paygroup and emp_official_info.STAFFCAT=Category.STAFFCAT and State.LAND1=emp_official_info.LAND1 and"
			   		+ " State.BLAND=convert(nvarchar(10),emp_official_info.state) ";
		 
		   
		   if(emp.getSummbrkup().equalsIgnoreCase("All"))
		     {
			   a=a+" order by PERNR";
		     }
		     if(emp.getSummbrkup().equalsIgnoreCase("Active"))
		     {
		    	a=a+" and ACTIVE=1 order by PERNR";
		     }
		   
		   ResultSet b=ad.selectQuery(a);
		   try {
			while(b.next())
			   {
				JoiningFormalityForm jo=new JoiningFormalityForm();
				jo.setLocation(b.getString("LOCID"));
				jo.setLocation_name(b.getString("LOCNAME"));
				jo.setPaygrp(b.getString("Short_desc"));
				jo.setEmpId(b.getString("PERNR"));
				jo.setTitle(b.getString("TITLE"));
				jo.setEmpname(b.getString("EMP_FULLNAME"));
				jo.setMaritalStatus(b.getString("marital_status"));
				jo.setDateofBirth(b.getString("DOB"));
				jo.setTelephoneNumber(b.getString("telephone_no"));
				jo.setMobileNumber(b.getString("mobile_no"));
				jo.setEmailAddress(b.getString("EMAIL_ID"));
				jo.setPermanentAccountNumber(b.getString("PANNO"));
				jo.setNoOfChildrens(b.getString("number_of_childrens"));
				jo.setCategory(b.getString("CATLTEXT"));
				jo.setDoc(b.getString("doc"));
				jo.setDoj(b.getString("doj"));
				jo.setState(b.getString("BEZEI"));
				jo.setGrade(b.getString("GRDID"));
				jo.setDept(b.getString("DPTSTXT"));
				jo.setDesg(b.getString("DSGSTXT"));
				jo.setEsino(b.getString("ESINO"));
				jo.setPfno(b.getString("PFNO"));
				jo.setPaymentmethod(b.getString("PAYMENT_METHOD"));
				jo.setBankacno(b.getString("BACCNO"));
				jo.setBankname(b.getString("BNAME"));
				jo.setIfsc(b.getString("IFSC_CODE"));
				jo.setMicr(b.getString("MICR_CODE"));
				jo.setCreated_date(b.getString("Created_date"));
				jo.setBloodGroup(b.getString("blood_group"));
				
				String qual="select top 1 Priority,Qualification.Qualification from emp_education_details,QUALIFICATION where user_id='"+b.getString("PERNR")+"' and emp_education_details.qualification=QUALIFICATION.Id  order by Priority desc";
				ResultSet qal=ad.selectQuery(qual);
				if(qal.next())
				{
					jo.setQualification(qal.getString("Qualification"));
				}
				
				qal.close();
				emplist.add(jo);
				
			   }
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		   
		   try {
				b.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		   
		   
		   request.setAttribute("emplist", emplist);
				
				return mapping.findForward("exportempdetailreport");
	}
	
	
	public ActionForward displayHolidays(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
	
		HRApprovalForm holidayForm = (HRApprovalForm) form;
		HttpSession sesion=request.getSession();
		UserInfo user=(UserInfo)sesion.getAttribute("user");
		try
		{
			ArrayList list = null;
			ArrayList locationList=new ArrayList();
			ArrayList locationLabelList=new ArrayList();
			
			String cmpcode="";
			int id=user.getGroupId();
			String cmp[]=new String[0]; 
			String locations="";
			
			String aa="select * from user_group where id='"+id+"'";
			ResultSet cc=ad.selectQuery(aa);
			try {
				if(cc.next())
				{
					cmpcode=cc.getString("Attendance_Loc");
					
					if(cmpcode.contains(","))
					{
					 cmp=cmpcode.split(",");
					
					for(int b=0;b<cmp.length;b++)
					{
						locations=locations+"'"+cmp[b]+"',";
					}
					
					locations=locations.substring(0, locations.length()-1);
					}
					else
					{
						locations="'"+cmpcode+"'";
					}
				}
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			try {
				cc.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			ResultSet rs11 = ad.selectQuery("select LOCID," +
					"LOCNAME,location_code from location where location_code in ("+locations+") "); 
					try {
						while(rs11.next()) {
							locationList.add(rs11.getString("locid"));
							locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
							
						}
					
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					try {
						rs11.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					holidayForm.setLocationIdList(locationList);
					holidayForm.setLocationLabelList(locationLabelList);
					
					
					ArrayList yearList=new ArrayList();
					ResultSet rs17 = ad.selectQuery("select distinct year from holidays"); 
							try {
								while(rs17.next()) {
									yearList.add(rs17.getString("year"));
								}
								rs17.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							  Calendar cal=Calendar.getInstance();
							     int year=cal.get(Calendar.YEAR);
							holidayForm.setYearList(yearList);
							holidayForm.setYear(Integer.toString(year));
			
							try {
								rs17.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
			
	} catch (Exception e) {
		e.printStackTrace();
	}

		return mapping.findForward("Holidays");
	}
	
	
	public ActionForward displayHolidayexe(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {


		
		HRApprovalForm holidayForm = (HRApprovalForm) form;
		HttpSession sesion=request.getSession();
		UserInfo user=(UserInfo)sesion.getAttribute("user");
		try
		{
			ArrayList list = null;
	
			
			String year=request.getParameter("year");
			holidayForm.setYear(year);
			int userlocationID=Integer.parseInt(request.getParameter("loc"));
		
			String getHolidays="select h.Year,h.Holiday_Name,h.Day_Name,h.Holiday_Date,h.Day_Name,loc.LOCNAME,loc.location_code  from holidays as h,Location as loc " +
					"where h.Location='"+userlocationID+"' and h.Location=loc.LOCID  and h.Year='"+year+"' order by h.Date ";
			
			ResultSet rs = ad.selectQuery(getHolidays);
			
			
			list = new ArrayList();
			HolidayForm holidayForms = null;
			while (rs.next()) {
				holidayForms = new HolidayForm();
              
               
				holidayForms.setLocation(rs.getString("location_code")+"-"+rs.getString("LOCNAME"));
				holidayForms.setHolidayName(rs.getString("Holiday_Name"));
				holidayForms.setDayName(rs.getString("Day_Name"));
				holidayForms.setHolidayDate(rs.getString("Holiday_Date"));
				holidayForm.setLocationId(rs.getString("location_code")+"-"+rs.getString("LOCNAME"));
				list.add(holidayForms);
			}
			request.setAttribute("listDetails", list);
			try {
				rs.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			
	} catch (Exception e) {
		e.printStackTrace();
	}finally{
		query1="";
		query2="";
		query3="";
		query4="";
		query5="";
		query6="";
	}

		
		
		
		return mapping.findForward("displayHolidays");
	}
	
	public ActionForward exportDailyWagesReport(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {


		
		HRApprovalForm holidayForm = (HRApprovalForm) form;
		HttpSession sesion=request.getSession();
		UserInfo user=(UserInfo)sesion.getAttribute("user");
		
		Date dNow = new Date( );
		SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd");
		String exportdate=ft.format(dNow);

		response.setHeader("Content-Disposition", "inline; filename="+exportdate+"_DailyWages_Register.xls");
		
		return mapping.findForward("exportDailyWagesReport");
	}
	
	
	public ActionForward exportBonusPaidReport(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		



		
		HRApprovalForm help = (HRApprovalForm) form;
		HttpSession sesion=request.getSession();
		UserInfo user=(UserInfo)sesion.getAttribute("user");
		
		Date dNow = new Date( );
		SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd");
		String exportdate=ft.format(dNow);

		response.setHeader("Content-Disposition", "inline; filename="+exportdate+"_BONUS_PAID_Report.xls");
		String[] monthName = {"","JAN", "FEB",
				  "MAR", "APR", "MAY", "JUN", "JUL",
				  "AUG", "SEP", "OCT", "NOV",
				  "DEC"
				  };
		
		String key="";
		ArrayList adult=new ArrayList();
	
		
String ACtualdept="";
if(help.getDeptArray()!=null)
{	
String[] dept = help.getDeptArray();

StringBuffer reqdept = new StringBuffer();
for (int i = 0; i < dept.length; i++) {
	reqdept.append("'"+dept[i]+"'" + ",");
}
 ACtualdept= reqdept.substring(0, reqdept.length() - 1).toString();
}


String ACtualdesg="";
if(help.getDesgArray()!=null)
{

String[] desg = help.getDesgArray();
StringBuffer reqdesg = new StringBuffer();
for (int i = 0; i < desg.length; i++) {
	reqdesg.append("'"+desg[i]+"'" + ",");
}
ACtualdesg = reqdesg.substring(0, reqdesg.length() - 1).toString();

}



String ACtualpay="";
if(help.getPayArray()!=null)
{

String[] pay = help.getPayArray();
StringBuffer reqpay = new StringBuffer();
for (int i = 0; i < pay.length; i++) {
	reqpay.append("'"+pay[i]+"'" + ",");
}
ACtualpay = reqpay.substring(0, reqpay.length() - 1).toString();

}

//catArray
String ACtualcat="";
if(help.getCatArray()!=null)
{

String[] cat = help.getCatArray();
StringBuffer reqcat = new StringBuffer();
for (int i = 0; i < cat.length; i++) {
	reqcat.append("'"+cat[i]+"'" + ",");
}
ACtualcat = reqcat.substring(0, reqcat.length() - 1).toString();

}


String ACtualloc="";
if(help.getLocArray()!=null)
{

String[] loc = help.getLocArray();
StringBuffer reqloc = new StringBuffer();
for (int i = 0; i < loc.length; i++) {
	reqloc.append("'"+loc[i]+"'" + ",");
}
ACtualloc = reqloc.substring(0, reqloc.length() - 1).toString();

}

//reporting

String ACtualrepgrp="";
if(help.getRepgrpArray()!=null)
{	
String[] repgrp = help.getRepgrpArray();

StringBuffer reqrepgrp = new StringBuffer();
for (int i = 0; i < repgrp.length; i++) {
	reqrepgrp.append("'"+repgrp[i]+"'" + ",");
}
ACtualrepgrp= reqrepgrp.substring(0, reqrepgrp.length() - 1).toString();
}


String query1="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master where Location.LOCATION_CODE=emp_official_info.LOCID and "
		+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP  ";
String sqlfromdate="";
String sqltodate="";
			



if(!help.getLocationId().equalsIgnoreCase(""))
{
	query1=query1+" and emp_official_info.LOCID ='"+help.getLocationId()+"' ";

}
	
if(!ACtualpay.equalsIgnoreCase(""))
{
	query1=query1+" and emp_official_info.PAY_GROUP in("+ACtualpay+")  ";

}

if(!ACtualcat.equalsIgnoreCase(""))
{
	query1=query1+" and emp_official_info.STAFFCAT in ("+ACtualcat+") ";

}

if(!ACtualdept.equalsIgnoreCase(""))
{
	query1=query1+" and emp_official_info.DPTID in ("+ACtualdept+") ";
}

if(!ACtualdesg.equalsIgnoreCase(""))
{
	query1=query1+" and emp_official_info.DSGID in ("+ACtualdesg+") ";
}


if(!help.getFrompernr().equalsIgnoreCase(""))
{
	query1=query1+" and emp_official_info.pernr in ("+help.getFrompernr()+")  ";
}

if(!ACtualloc.equalsIgnoreCase(""))
{
	query1=query1+" and emp_official_info.Work_ID in("+ACtualloc+") ";

}

if(!ACtualrepgrp.equalsIgnoreCase(""))
{
	query1=query1+" and emp_official_info.Reporting_Grp in("+ACtualrepgrp+") ";

}

	query1 =query1+" and active=1 ";

	
	
		
	

		try {
			key = insertTEMPEMP(query1);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
			
		HRApprovalForm app1 =new HRApprovalForm();
			
			
	
		
			
			String b = "";		

			
				
				if(true)
				{
					
				    b = " select emp_official_info.pernr,emp_official_info.EMP_FULLNAME,dob,dep.dptstxt,des.dsgstxt from Temp_emp,emp_official_info,department dep,designation des where emp_official_info.dptid=dep.dptid and "
				    		+ "emp_official_info.dsgid=des.dsgid and emp_official_info.PERNR=Temp_emp.pernr  "
				    		+ "  and Temp_Emp.Date_Time='"+key+"'  ";
	   			}
				
	ResultSet rs20 = ad.selectQuery(b);
	try {
		while(rs20.next())
		{	
			HRApprovalForm app =new HRApprovalForm();
			
			app.setEmployeeno(rs20.getString("pernr"));
			app.setEmployeeName(rs20.getString("EMP_FULLNAME"));		
			app.setDate(rs20.getString("dob"));
			app.setDepartment(rs20.getString("dptstxt"));
			app.setDesignation(rs20.getString("dsgstxt"));
			app.setFileName(Empfathername(rs20.getString("pernr")));
			adult.add(app);
			
		}
		
		request.setAttribute("adult", adult);
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
finally{
	
	    
	    String delete="delete Temp_Emp where Date_Time='"+key+"'";						    
	   int lldd=ad.SqlExecuteUpdate(delete);
	}
	
	
	
		return mapping.findForward("exportBonusPaidReport");
	
	}
	
	public ActionForward exportAdultWorkersReport(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {


		
		HRApprovalForm help = (HRApprovalForm) form;
		HttpSession sesion=request.getSession();
		UserInfo user=(UserInfo)sesion.getAttribute("user");
		
		Date dNow = new Date( );
		SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd");
		String exportdate=ft.format(dNow);

		response.setHeader("Content-Disposition", "inline; filename="+exportdate+"_Adult_Workers_Report.xls");
		String[] monthName = {"","JAN", "FEB",
				  "MAR", "APR", "MAY", "JUN", "JUL",
				  "AUG", "SEP", "OCT", "NOV",
				  "DEC"
				  };
		
		String key="";
		ArrayList adult=new ArrayList();
	
		
String ACtualdept="";
if(help.getDeptArray()!=null)
{	
String[] dept = help.getDeptArray();

StringBuffer reqdept = new StringBuffer();
for (int i = 0; i < dept.length; i++) {
	reqdept.append("'"+dept[i]+"'" + ",");
}
 ACtualdept= reqdept.substring(0, reqdept.length() - 1).toString();
}


String ACtualdesg="";
if(help.getDesgArray()!=null)
{

String[] desg = help.getDesgArray();
StringBuffer reqdesg = new StringBuffer();
for (int i = 0; i < desg.length; i++) {
	reqdesg.append("'"+desg[i]+"'" + ",");
}
ACtualdesg = reqdesg.substring(0, reqdesg.length() - 1).toString();

}



String ACtualpay="";
if(help.getPayArray()!=null)
{

String[] pay = help.getPayArray();
StringBuffer reqpay = new StringBuffer();
for (int i = 0; i < pay.length; i++) {
	reqpay.append("'"+pay[i]+"'" + ",");
}
ACtualpay = reqpay.substring(0, reqpay.length() - 1).toString();

}

//catArray
String ACtualcat="";
if(help.getCatArray()!=null)
{

String[] cat = help.getCatArray();
StringBuffer reqcat = new StringBuffer();
for (int i = 0; i < cat.length; i++) {
	reqcat.append("'"+cat[i]+"'" + ",");
}
ACtualcat = reqcat.substring(0, reqcat.length() - 1).toString();

}


String ACtualloc="";
if(help.getLocArray()!=null)
{

String[] loc = help.getLocArray();
StringBuffer reqloc = new StringBuffer();
for (int i = 0; i < loc.length; i++) {
	reqloc.append("'"+loc[i]+"'" + ",");
}
ACtualloc = reqloc.substring(0, reqloc.length() - 1).toString();

}

//reporting

String ACtualrepgrp="";
if(help.getRepgrpArray()!=null)
{	
String[] repgrp = help.getRepgrpArray();

StringBuffer reqrepgrp = new StringBuffer();
for (int i = 0; i < repgrp.length; i++) {
	reqrepgrp.append("'"+repgrp[i]+"'" + ",");
}
ACtualrepgrp= reqrepgrp.substring(0, reqrepgrp.length() - 1).toString();
}


String query1="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master where Location.LOCATION_CODE=emp_official_info.LOCID and "
		+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP  ";
String sqlfromdate="";
String sqltodate="";
			



if(!help.getLocationId().equalsIgnoreCase(""))
{
	query1=query1+" and emp_official_info.LOCID ='"+help.getLocationId()+"' ";

}
	
if(!ACtualpay.equalsIgnoreCase(""))
{
	query1=query1+" and emp_official_info.PAY_GROUP in("+ACtualpay+")  ";

}

if(!ACtualcat.equalsIgnoreCase(""))
{
	query1=query1+" and emp_official_info.STAFFCAT in ("+ACtualcat+") ";

}

if(!ACtualdept.equalsIgnoreCase(""))
{
	query1=query1+" and emp_official_info.DPTID in ("+ACtualdept+") ";
}

if(!ACtualdesg.equalsIgnoreCase(""))
{
	query1=query1+" and emp_official_info.DSGID in ("+ACtualdesg+") ";
}


if(!help.getFrompernr().equalsIgnoreCase(""))
{
	query1=query1+" and emp_official_info.pernr in ("+help.getFrompernr()+")  ";
}

if(!ACtualloc.equalsIgnoreCase(""))
{
	query1=query1+" and emp_official_info.Work_ID in("+ACtualloc+") ";

}

if(!ACtualrepgrp.equalsIgnoreCase(""))
{
	query1=query1+" and emp_official_info.Reporting_Grp in("+ACtualrepgrp+") ";

}

	query1 =query1+" and active=1 ";

	
	
		
	

		try {
			key = insertTEMPEMP(query1);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
			
		HRApprovalForm app1 =new HRApprovalForm();
			
			
	
		
			
			String b = "";		

			
				
				if(true)
				{
					
				    b = " select emp_official_info.pernr,emp_official_info.EMP_FULLNAME,dob,dep.dptstxt,des.dsgstxt from Temp_emp,emp_official_info,department dep,designation des where emp_official_info.dptid=dep.dptid and "
				    		+ "emp_official_info.dsgid=des.dsgid and emp_official_info.PERNR=Temp_emp.pernr  "
				    		+ "  and Temp_Emp.Date_Time='"+key+"'  ";
	   			}
				
	ResultSet rs20 = ad.selectQuery(b);
	try {
		while(rs20.next())
		{	
			HRApprovalForm app =new HRApprovalForm();
			
			app.setEmployeeno(rs20.getString("pernr"));
			app.setEmployeeName(rs20.getString("EMP_FULLNAME"));		
			app.setDate(rs20.getString("dob"));
			app.setDepartment(rs20.getString("dptstxt"));
			app.setDesignation(rs20.getString("dsgstxt"));
			app.setFileName(Empfathername(rs20.getString("pernr")));
			
			String g[]=empAddressDet(rs20.getString("pernr"));
			if(g[0]!=null)
			{
			if(!g[0].equalsIgnoreCase("null"))
			app.setApproverStatus(g[0]+" "+g[1]+" "+g[2]+" "+g[3]+" "+g[4]+" "+g[5]+" "+g[6]+" "+g[7]);
			}
			adult.add(app);
			
		}
		
		request.setAttribute("adult", adult);
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
finally{
	
	    
	    String delete="delete Temp_Emp where Date_Time='"+key+"'";						    
	   int lldd=ad.SqlExecuteUpdate(delete);
	}
	
	
	
		return mapping.findForward("exportadultworkersreport");
	}
	
	public ActionForward exportEqualRenumerationReport(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {


		
		HRApprovalForm help = (HRApprovalForm) form;
		HttpSession sesion=request.getSession();
		UserInfo user=(UserInfo)sesion.getAttribute("user");
		
		Date dNow = new Date( );
		SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd");
		String exportdate=ft.format(dNow);

		response.setHeader("Content-Disposition", "inline; filename="+exportdate+"_EQUAL_RENUMERATION_Report.xls");
		String[] monthName = {"","JAN", "FEB",
				  "MAR", "APR", "MAY", "JUN", "JUL",
				  "AUG", "SEP", "OCT", "NOV",
				  "DEC"
				  };
		
		String key="";
		ArrayList adult=new ArrayList();
	
		
String ACtualdept="";
if(help.getDeptArray()!=null)
{	
String[] dept = help.getDeptArray();

StringBuffer reqdept = new StringBuffer();
for (int i = 0; i < dept.length; i++) {
	reqdept.append("'"+dept[i]+"'" + ",");
}
 ACtualdept= reqdept.substring(0, reqdept.length() - 1).toString();
}


String ACtualdesg="";
if(help.getDesgArray()!=null)
{

String[] desg = help.getDesgArray();
StringBuffer reqdesg = new StringBuffer();
for (int i = 0; i < desg.length; i++) {
	reqdesg.append("'"+desg[i]+"'" + ",");
}
ACtualdesg = reqdesg.substring(0, reqdesg.length() - 1).toString();

}



String ACtualpay="";
if(help.getPayArray()!=null)
{

String[] pay = help.getPayArray();
StringBuffer reqpay = new StringBuffer();
for (int i = 0; i < pay.length; i++) {
	reqpay.append("'"+pay[i]+"'" + ",");
}
ACtualpay = reqpay.substring(0, reqpay.length() - 1).toString();

}

//catArray
String ACtualcat="";
if(help.getCatArray()!=null)
{

String[] cat = help.getCatArray();
StringBuffer reqcat = new StringBuffer();
for (int i = 0; i < cat.length; i++) {
	reqcat.append("'"+cat[i]+"'" + ",");
}
ACtualcat = reqcat.substring(0, reqcat.length() - 1).toString();

}


String ACtualloc="";
if(help.getLocArray()!=null)
{

String[] loc = help.getLocArray();
StringBuffer reqloc = new StringBuffer();
for (int i = 0; i < loc.length; i++) {
	reqloc.append("'"+loc[i]+"'" + ",");
}
ACtualloc = reqloc.substring(0, reqloc.length() - 1).toString();

}

//reporting

String ACtualrepgrp="";
if(help.getRepgrpArray()!=null)
{	
String[] repgrp = help.getRepgrpArray();

StringBuffer reqrepgrp = new StringBuffer();
for (int i = 0; i < repgrp.length; i++) {
	reqrepgrp.append("'"+repgrp[i]+"'" + ",");
}
ACtualrepgrp= reqrepgrp.substring(0, reqrepgrp.length() - 1).toString();
}


String query1="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master where Location.LOCATION_CODE=emp_official_info.LOCID and "
		+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP  ";
String sqlfromdate="";
String sqltodate="";
			



if(!help.getLocationId().equalsIgnoreCase(""))
{
	query1=query1+" and emp_official_info.LOCID ='"+help.getLocationId()+"' ";

}
	
if(!ACtualpay.equalsIgnoreCase(""))
{
	query1=query1+" and emp_official_info.PAY_GROUP in("+ACtualpay+")  ";

}

if(!ACtualcat.equalsIgnoreCase(""))
{
	query1=query1+" and emp_official_info.STAFFCAT in ("+ACtualcat+") ";

}

if(!ACtualdept.equalsIgnoreCase(""))
{
	query1=query1+" and emp_official_info.DPTID in ("+ACtualdept+") ";
}

if(!ACtualdesg.equalsIgnoreCase(""))
{
	query1=query1+" and emp_official_info.DSGID in ("+ACtualdesg+") ";
}

/*
if(!help.getFrompernr().equalsIgnoreCase(""))
{
	query1=query1+" and emp_official_info.pernr in ("+help.getFrompernr()+")  ";
}*/

if(!ACtualloc.equalsIgnoreCase(""))
{
	query1=query1+" and emp_official_info.Work_ID in("+ACtualloc+") ";

}

if(!ACtualrepgrp.equalsIgnoreCase(""))
{
	query1=query1+" and emp_official_info.Reporting_Grp in("+ACtualrepgrp+") ";

}

	query1 =query1+" and active=1 ";

	
	
		
	

		try {
			key = insertTEMPEMP(query1);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
			
		HRApprovalForm app1 =new HRApprovalForm();
			
			
	
		
			
			String b = "";		

			
				
				if(true)
				{
					
				    b = " select CATLTEXT,sum(case when sex='M' then 1 else 0 end) male,sum(case when sex='F' then 1 else 0 end) female from Temp_emp,emp_official_info,department dep,designation des,Category where emp_official_info.dptid=dep.dptid and "
				    		+ "emp_official_info.dsgid=des.dsgid and emp_official_info.PERNR=Temp_emp.pernr and emp_official_info.STAFFCAT=Category.ID "
				    		+ "  and Temp_Emp.Date_Time='"+key+"'  group by  CATLTEXT  ";
	   			}
				int male=0;
				int female=0;
	ResultSet rs20 = ad.selectQuery(b);
	try {
		while(rs20.next())
		{	
			HRApprovalForm app =new HRApprovalForm();
		
			app.setCatFrom(rs20.getString("CATLTEXT"));
            app.setAdditioncount(rs20.getInt("male"));
            app.setAttritioncount(rs20.getInt("female"));
            male=male+rs20.getInt("male");
            female=female+rs20.getInt("female");
			adult.add(app);
			
		}
		help.setAdditioncount(male);
		help.setAttritioncount(female);
		request.setAttribute("adult", adult);
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
finally{
	    String delete="delete Temp_Emp where Date_Time='"+key+"'";						    
	   int lldd=ad.SqlExecuteUpdate(delete);
	}
	
	
	
		return mapping.findForward("exportEqualRenumerationReport");
	}
	
	public ActionForward exportStatMusterrollReport(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {


		
		HRApprovalForm help = (HRApprovalForm) form;
		HttpSession sesion=request.getSession();
		UserInfo user=(UserInfo)sesion.getAttribute("user");
		
		Date dNow = new Date( );
		SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd");
		String exportdate=ft.format(dNow);

		response.setHeader("Content-Disposition", "inline; filename="+exportdate+"_MusterRoll_Report.xls");
		String[] monthName = {"","JAN", "FEB",
				  "MAR", "APR", "MAY", "JUN", "JUL",
				  "AUG", "SEP", "OCT", "NOV",
				  "DEC"
				  };
		
		String key="";
		ArrayList list1=new ArrayList();
		ArrayList list2=new ArrayList();
		ArrayList list3=new ArrayList();
		ArrayList list4=new ArrayList();
		ArrayList datelist = new ArrayList();
		
String ACtualdept="";
if(help.getDeptArray()!=null)
{	
String[] dept = help.getDeptArray();

StringBuffer reqdept = new StringBuffer();
for (int i = 0; i < dept.length; i++) {
	reqdept.append("'"+dept[i]+"'" + ",");
}
 ACtualdept= reqdept.substring(0, reqdept.length() - 1).toString();
}


String ACtualdesg="";
if(help.getDesgArray()!=null)
{

String[] desg = help.getDesgArray();
StringBuffer reqdesg = new StringBuffer();
for (int i = 0; i < desg.length; i++) {
	reqdesg.append("'"+desg[i]+"'" + ",");
}
ACtualdesg = reqdesg.substring(0, reqdesg.length() - 1).toString();

}



String ACtualpay="";
if(help.getPayArray()!=null)
{

String[] pay = help.getPayArray();
StringBuffer reqpay = new StringBuffer();
for (int i = 0; i < pay.length; i++) {
	reqpay.append("'"+pay[i]+"'" + ",");
}
ACtualpay = reqpay.substring(0, reqpay.length() - 1).toString();

}

//catArray
String ACtualcat="";
if(help.getCatArray()!=null)
{

String[] cat = help.getCatArray();
StringBuffer reqcat = new StringBuffer();
for (int i = 0; i < cat.length; i++) {
	reqcat.append("'"+cat[i]+"'" + ",");
}
ACtualcat = reqcat.substring(0, reqcat.length() - 1).toString();

}


String ACtualloc="";
if(help.getLocArray()!=null)
{

String[] loc = help.getLocArray();
StringBuffer reqloc = new StringBuffer();
for (int i = 0; i < loc.length; i++) {
	reqloc.append("'"+loc[i]+"'" + ",");
}
ACtualloc = reqloc.substring(0, reqloc.length() - 1).toString();

}

//reporting

String ACtualrepgrp="";
if(help.getRepgrpArray()!=null)
{	
String[] repgrp = help.getRepgrpArray();

StringBuffer reqrepgrp = new StringBuffer();
for (int i = 0; i < repgrp.length; i++) {
	reqrepgrp.append("'"+repgrp[i]+"'" + ",");
}
ACtualrepgrp= reqrepgrp.substring(0, reqrepgrp.length() - 1).toString();
}


String query1="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master where Location.LOCATION_CODE=emp_official_info.LOCID and "
		+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP  ";
String sqlfromdate="";
String sqltodate="";
			



if(!help.getLocationId().equalsIgnoreCase(""))
{
	query1=query1+" and emp_official_info.LOCID ='"+help.getLocationId()+"' ";

}
	
if(!ACtualpay.equalsIgnoreCase(""))
{
	query1=query1+" and emp_official_info.PAY_GROUP in("+ACtualpay+")  ";

}

if(!ACtualcat.equalsIgnoreCase(""))
{
	query1=query1+" and emp_official_info.STAFFCAT in ("+ACtualcat+") ";

}

if(!ACtualdept.equalsIgnoreCase(""))
{
	query1=query1+" and emp_official_info.DPTID in ("+ACtualdept+") ";
}

if(!ACtualdesg.equalsIgnoreCase(""))
{
	query1=query1+" and emp_official_info.DSGID in ("+ACtualdesg+") ";
}


if(!help.getFrompernr().equalsIgnoreCase(""))
{
	query1=query1+" and emp_official_info.pernr in ("+help.getFrompernr()+")  ";
}

if(!ACtualloc.equalsIgnoreCase(""))
{
	query1=query1+" and emp_official_info.Work_ID in("+ACtualloc+") ";

}

if(!ACtualrepgrp.equalsIgnoreCase(""))
{
	query1=query1+" and emp_official_info.Reporting_Grp in("+ACtualrepgrp+") ";

}

	query1 =query1+" and active=1 ";



float pp=0;
float od=0;				
float cl=0;
float sl=0;
float el=0;
float lp=0;			
float ph=0;
float wo=0;
float ss=0;
float sh=0;
float paid_days=0;
float total=0;







try {
	
	String selectedmon=help.getFrommonth();
	String selectedyear=help.getYear();
	String prevmont=Integer.toString((Integer.parseInt(selectedmon)-1));
	String prevyear="";
	if(prevmont.equalsIgnoreCase("0"))
	{
	 prevmont="12";
	 prevyear=Integer.toString((Integer.parseInt(selectedyear)-1));	
	}
	else
		prevyear=selectedyear;

	try {
		key = insertTEMPEMP(query1);
	} catch (Exception e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
		
	HRApprovalForm app1 =new HRApprovalForm();
		
		
		
		
		String b = "";		

		
			
			if(true)
			{
				
			    b = " select emp_official_info.EMP_FULLNAME,dob,dep.dptstxt,des.dsgstxt,t.*,month ,year,day1,	day2,	day3,	day4,	day5,	day6,	day7,	day8,	day9,	day10,	day11,	day12,	day13,	day14,	day15,	day16,	day17,	day18,	day19,	day20,	day21,	day22,	day23,	day24,	day25,	day26,	day27,	day28,	day29,	day30,	day31  from EMP_IN_OUT_Status  ,"
			    		+ "  ( select k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,sum(k.WO+k.ss+k.PH+k.PP+k.SH+k.od+k.SL+k.CL+k.EL) as totpaid,k.Pernr from (  SELECT 	Pernr,(LEN(day) - LEN(REPLACE(day, 'PP', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'PM', '')))*0.25 as PP,(LEN(day) - LEN(REPLACE(day, 'WO', '')))*0.25 as WO,(LEN(day) - LEN(REPLACE(day, 'SS', '')))*0.25 as SS,(LEN(day) - LEN(REPLACE(day, 'PH', '')))*0.25 as PH,"
			    		+ " (LEN(day) - LEN(REPLACE(day, 'SH', '')))*0.25 as SH,(LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25 as od, (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl, "
			    		+ "(LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl, (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL, (LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as LP "
			    		+ " from( select "+currentmonthdays(help.getYear(),help.getFrommonth(), 0)+" as day,Temp_emp.pernr  from EMP_IN_OUT_Status,Temp_emp where  EMP_IN_OUT_Status.pernr =Temp_emp.pernr and month = '"+help.getFrommonth()+"' and year ='"+help.getYear()+"')t  ) k group by k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,k.Pernr)t,Temp_emp,emp_official_info,department dep,designation des where emp_official_info.dptid=dep.dptid and emp_official_info.dsgid=des.dsgid and emp_official_info.PERNR=Temp_emp.pernr and  t.pernr =Temp_emp.pernr "
			    		+ "   and  month = '"+help.getFrommonth()+"' and year ='"+help.getYear()+"'  and t.Pernr=EMP_IN_OUT_Status.Pernr and Temp_Emp.Date_Time='"+key+"' and Temp_Emp.Swipe_count!=0 "
   				+ "union"
   				+ "	select emp_official_info.EMP_FULLNAME,dob,dep.dptstxt,des.dsgstxt, t.*,month ,year,replace(day1,'AA','PP')as day1,	replace(day2,'AA','PP')as day2,	replace(day3,'AA','PP')as day3,	replace(day4,'AA','PP')as day4,	replace(day5,'AA','PP')as day5,	replace(day6,'AA','PP')as day6,	replace(day7,'AA','PP')as day7,	replace(day8,'AA','PP')as day8,	replace(day9,'AA','PP')as day9,	replace(day10,'AA','PP')as day10,	replace(day11,'AA','PP')as day11,	replace(day12,'AA','PP')as day12,	replace(day13,'AA','PP')as day13,	replace(day14,'AA','PP')as day14,	replace(day15,'AA','PP')as day15,	replace(day16,'AA','PP')as day16,	replace(day17,'AA','PP')as day17,	replace(day18,'AA','PP')as day18,	replace(day19,'AA','PP')as day19,	replace(day20,'AA','PP')as day20,	replace(day21,'AA','PP')as day21,	replace(day22,'AA','PP')as day22,	replace(day23,'AA','PP')as day23,	replace(day24,'AA','PP')as day24,	replace(day25,'AA','PP')as day25,	replace(day26,'AA','PP')as day26,	replace(day27,'AA','PP')as day27,	replace(day28,'AA','PP')as day28,	replace(day29,'AA','PP')as day29,	replace(day30,'AA','PP')as day30,	replace(day31,'AA','PP')as day31  from EMP_IN_OUT_Status  ,"
		    		+ "  ( select k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,sum(k.WO+k.ss+k.PH+k.PP+k.SH+k.od+k.SL+k.CL+k.EL) as totpaid,k.Pernr from (  SELECT 	Pernr,(LEN(day) - LEN(REPLACE(day, 'PP', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as PP,(LEN(day) - LEN(REPLACE(day, 'WO', '')))*0.25 as WO,(LEN(day) - LEN(REPLACE(day, 'SS', '')))*0.25 as SS,(LEN(day) - LEN(REPLACE(day, 'PH', '')))*0.25 as PH,"
		    		+ " (LEN(day) - LEN(REPLACE(day, 'SH', '')))*0.25 as SH,(LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25 as od, (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl, "
		    		+ "(LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl, (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL, (LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25 as LP "
		    		+ " from( select "+currentmonthdays(help.getYear(),help.getFrommonth(), 0)+" as day,Temp_emp.pernr  from EMP_IN_OUT_Status,Temp_emp where  EMP_IN_OUT_Status.pernr =Temp_emp.pernr and month = '"+help.getFrommonth()+"' and year ='"+help.getYear()+"')t  ) k group by k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,k.Pernr)t,Temp_emp,emp_official_info,department dep,designation des where emp_official_info.dptid=dep.dptid and emp_official_info.dsgid=des.dsgid and  emp_official_info.PERNR=Temp_emp.pernr and  t.pernr =Temp_emp.pernr "
		    		+ "   and  month = '"+help.getFrommonth()+"' and year ='"+help.getYear()+"'  and t.Pernr=EMP_IN_OUT_Status.Pernr and Temp_Emp.Date_Time='"+key+"' and Temp_Emp.Swipe_count=0 ";
			}
			
ResultSet rs20 = ad.selectQuery(b);
while(rs20.next())
{	
	HRApprovalForm app =new HRApprovalForm();
	
	app.setEmployeeno(rs20.getString("pernr"));
	app.setEmployeeName(rs20.getString("EMP_FULLNAME"));
	app1.setMonth(help.getFrommonth());
	app.setMonth(help.getFrommonth());
	app.setDate(rs20.getString("dob"));
	app.setDepartment(rs20.getString("dptstxt"));
	app.setDesignation(rs20.getString("dsgstxt"));
	app.setFileName(Empfathername(rs20.getString("pernr")));
	
	app1.setYear(help.getYear());
	app.setYear(help.getYear());
	
	
	if(rs20.getString("day1")!=null)
	{
	if(rs20.getString("day1").contains("NL"))
	app.setDay1(rs20.getString("day1").replace("NL", "LP"));	
	else
	app.setDay1(rs20.getString("day1"));	
	}
	
	if(rs20.getString("day2")!=null)
	{
	if(rs20.getString("day2").contains("NL"))
	app.setDay2(rs20.getString("day2").replace("NL", "LP"));
	else
   app.setDay2(rs20.getString("day2"));
	}
	
	if(rs20.getString("day3")!=null)
	{
	if(rs20.getString("day3").contains("NL"))
	app.setDay3(rs20.getString("day3").replace("NL", "LP"));
	else
	app.setDay3(rs20.getString("day3"));
	}
	
	if(rs20.getString("day4")!=null)
	{
	if(rs20.getString("day4").contains("NL"))
	app.setDay4(rs20.getString("day4").replace("NL", "LP"));
	else
	app.setDay4(rs20.getString("day4"));
	}
	
	if(rs20.getString("day5")!=null)
	{
	if(rs20.getString("day5").contains("NL"))
	app.setDay5(rs20.getString("day5").replace("NL", "LP"));
	else
	app.setDay5(rs20.getString("day5"));
	}
	
	if(rs20.getString("day6")!=null)
	{
	if(rs20.getString("day6").contains("NL"))
	app.setDay6(rs20.getString("day6").replace("NL", "LP"));
	else
	app.setDay6(rs20.getString("day6"));
	}
	
	
	if(rs20.getString("day7")!=null)
	{
	if(rs20.getString("day7").contains("NL"))
	app.setDay7(rs20.getString("day7").replace("NL", "LP"));
	else
	app.setDay7(rs20.getString("day7"));
	}
	
	if(rs20.getString("day8")!=null)
	{
	if(rs20.getString("day8").contains("NL"))
	app.setDay8(rs20.getString("day8").replace("NL", "LP"));
	else
	app.setDay8(rs20.getString("day8"));
	}
	if(rs20.getString("day9")!=null)
	{
	if(rs20.getString("day9").contains("NL"))
	app.setDay9(rs20.getString("day9").replace("NL", "LP"));
	else
	app.setDay9(rs20.getString("day9"));
	}
	if(rs20.getString("day10")!=null)
	{
	if(rs20.getString("day10").contains("NL"))
	app.setDay10(rs20.getString("day10").replace("NL", "LP"));
	else
	app.setDay10(rs20.getString("day10"));
	}
	if(rs20.getString("day11")!=null)
	{
	if(rs20.getString("day11").contains("NL"))
	app.setDay11(rs20.getString("day11").replace("NL", "LP"));
	else
	app.setDay11(rs20.getString("day11"));
	}
	if(rs20.getString("day12")!=null)
	{
	if(rs20.getString("day12").contains("NL"))
	app.setDay12(rs20.getString("day12").replace("NL", "LP"));
	else
	app.setDay12(rs20.getString("day12"));
	}
	if(rs20.getString("day13")!=null)
	{
	if(rs20.getString("day13").contains("NL"))
	app.setDay13(rs20.getString("day13").replace("NL", "LP"));
	else
	app.setDay13(rs20.getString("day13"));
	}
	if(rs20.getString("day14")!=null)
	{
	if(rs20.getString("day14").contains("NL"))
	app.setDay14(rs20.getString("day14").replace("NL", "LP"));
	else
	app.setDay14(rs20.getString("day14"));
	}
	if(rs20.getString("day15")!=null)
	{
	if(rs20.getString("day15").contains("NL"))
	app.setDay15(rs20.getString("day15").replace("NL", "LP"));
	else
	app.setDay15(rs20.getString("day15"));
	}
	if(rs20.getString("day16")!=null)
	{
	if(rs20.getString("day16").contains("NL"))
	app.setDay16(rs20.getString("day16").replace("NL", "LP"));
	else
	app.setDay16(rs20.getString("day16"));
	}
	if(rs20.getString("day17")!=null)
	{
	if(rs20.getString("day17").contains("NL"))
	app.setDay17(rs20.getString("day17").replace("NL", "LP"));
	else
	app.setDay17(rs20.getString("day17"));
	}
	if(rs20.getString("day18")!=null)
	{
	if(rs20.getString("day18").contains("NL"))
	app.setDay18(rs20.getString("day18").replace("NL", "LP"));
	else
	app.setDay18(rs20.getString("day18"));
	}
	if(rs20.getString("day19")!=null)
	{
	if(rs20.getString("day19").contains("NL"))
	app.setDay19(rs20.getString("day19").replace("NL", "LP"));
	else
	app.setDay19(rs20.getString("day19"));
	}
	if(rs20.getString("day20")!=null)
	{
	if(rs20.getString("day20").contains("NL"))
	app.setDay20(rs20.getString("day20").replace("NL", "LP"));
	else
	app.setDay20(rs20.getString("day20"));
	}
	if(rs20.getString("day21")!=null)
	{
	if(rs20.getString("day21").contains("NL"))
	app.setDay21(rs20.getString("day21").replace("NL", "LP"));
	else
	app.setDay21(rs20.getString("day21"));
	}
	if(rs20.getString("day22")!=null)
	{
	if(rs20.getString("day22").contains("NL"))
	app.setDay22(rs20.getString("day22").replace("NL", "LP"));
	else
	app.setDay22(rs20.getString("day22"));
	}
	if(rs20.getString("day23")!=null)
	{
	if(rs20.getString("day23").contains("NL"))
	app.setDay23(rs20.getString("day23").replace("NL", "LP"));
	else
	app.setDay23(rs20.getString("day23"));
	}
	if(rs20.getString("day24")!=null)
	{
	if(rs20.getString("day24").contains("NL"))
	app.setDay24(rs20.getString("day24").replace("NL", "LP"));
	else
	app.setDay24(rs20.getString("day24"));
	}
	if(rs20.getString("day25")!=null)
	{
	if(rs20.getString("day25").contains("NL"))
	app.setDay25(rs20.getString("day25").replace("NL", "LP"));
	else
	app.setDay25(rs20.getString("day25"));
	}
	if(rs20.getString("day26")!=null)
	{
	if(rs20.getString("day26").contains("NL"))
	app.setDay26(rs20.getString("day26").replace("NL", "LP"));
	else
	app.setDay26(rs20.getString("day26"));
	}
	if(rs20.getString("day27")!=null)
	{
	if(rs20.getString("day27").contains("NL"))
	app.setDay27(rs20.getString("day27").replace("NL", "LP"));
	else
	app.setDay27(rs20.getString("day27"));
	}
	if(rs20.getString("day28")!=null)
	{
	if(rs20.getString("day28").contains("NL"))
	app.setDay28(rs20.getString("day28").replace("NL", "LP"));
	else
	app.setDay28(rs20.getString("day28"));
	}
	if(rs20.getString("day29")!=null)
	{
	if(rs20.getString("day29").contains("NL"))
	app.setDay29(rs20.getString("day29").replace("NL", "LP"));
	else
	app.setDay29(rs20.getString("day29"));
	}
	if(rs20.getString("day30")!=null)
	{
	if(rs20.getString("day30").contains("NL"))
	app.setDay30(rs20.getString("day30").replace("NL", "LP"));
	else
	app.setDay30(rs20.getString("day30"));
	}
	if(rs20.getString("day31")!=null)
	{
	if(rs20.getString("day31").contains("NL"))
	app.setDay31(rs20.getString("day31").replace("NL", "LP"));
	else
	app.setDay31(rs20.getString("day31"));
	}
		
		app.setOd(rs20.getFloat("Od"));
      od=od+rs20.getFloat("Od");
		app.setCl(rs20.getFloat("cl"));
		cl=cl+rs20.getFloat("cl");
		app.setSl(rs20.getFloat("sl"));
		sl=sl+rs20.getFloat("sl");
		app.setEl(rs20.getFloat("el"));		
		el=el+rs20.getFloat("el");
		app.setLp(rs20.getFloat("lp"));		
		lp=lp+rs20.getFloat("lp");
 	    app.setPh(rs20.getFloat("PH"));
 	    ph=ph+rs20.getFloat("ph");
		app.setWo(rs20.getFloat("wo"));
 	    wo=wo+rs20.getFloat("wo");
 	  app.setSs( rs20.getFloat("ss"));
 	    ss=ss+rs20.getFloat("ss");
		app.setSh(rs20.getFloat("SH"));
 	    sh=sh+rs20.getFloat("sh");
		app.setPp(rs20.getFloat("PP"));
 	    pp=pp+rs20.getFloat("pp");
		app.setPaid_days(rs20.getFloat("totpaid"));
		paid_days=paid_days+rs20.getFloat("totpaid");						
		app.setTotal(Float.toString((app.getLp()+app.getPaid_days())));
		total=total+Float.parseFloat((app.getTotal()));
	
		list3.add(app);
}	
rs20.close();
		
help.setOd(od);

help.setCl(cl);

help.setSl(sl);

help.setEl(el);		

help.setLp(lp);		

 help.setPh(ph);

help.setWo(wo);

help.setSs(ss);

help.setSh(sh);

help.setPp(pp);

help.setPaid_days(paid_days);

help.setTotal(Float.toString(total));

list4.add(app1);

	
	
	
		// Create a calendar object and set year and month
		Calendar mycal = Calendar.getInstance();

		mycal.set(Integer.parseInt(help.getYear()), Integer.parseInt(help.getFrommonth())-1, 1);
		
		// Get the number of days in that month
		int daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
		
		String countdays="SELECT day(thedate) as day FROM dbo.ExplodeDates('"+help.getYear()+"-"+help.getFrommonth()+"-01','"+help.getYear()+"-"+help.getFrommonth()+"-"+daysInMonth+"') as thedate";
	    ResultSet rscount=ad.selectQuery(countdays);
	    
			while(rscount.next())
			{
              
               HRApprovalForm date=new  HRApprovalForm();
               date.setDay(rscount.getString("day"));
               date.setDate("day"+rscount.getString("day"));
               datelist.add(date);
			}
			rscount.close();
			help.setDay(Integer.toString(datelist.size()+4));
			request.setAttribute("datelist", datelist);

	
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}
finally{
	query1="";
	query2="";
	query3="";
	query4="";
	query5="";
	query6="";
	
	  //delete empNos
    
    String delete="delete Temp_Emp where Date_Time='"+key+"'";						    
   int lldd=ad.SqlExecuteUpdate(delete);
}
request.setAttribute("list3", list3);



	
help.setMonth(monthName[Integer.parseInt(help.getFrommonth())]);
		return mapping.findForward("exportmusterRollReport");
	}
	
	public ActionForward exportNationalfestivalReport(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {


		
		HRApprovalForm holidayForm = (HRApprovalForm) form;
		HttpSession sesion=request.getSession();
		UserInfo user=(UserInfo)sesion.getAttribute("user");
		
		Date dNow = new Date( );
		SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd");
		String exportdate=ft.format(dNow);

		response.setHeader("Content-Disposition", "inline; filename="+exportdate+"_NationalHolidays&Festival_Register.xls");
		
ArrayList hol=new ArrayList();
StringBuffer reqholiday = new StringBuffer(); 
String actualholiday="";		

		String ye="select convert(nvarchar(10),date,104) as date1,* from holidays where Location=(select locid from Location where LOCATION_CODE='"+holidayForm.getLocationId()+"') and year="+holidayForm.getYear()+"  order by date";
		ResultSet ty=ad.selectQuery(ye);
		try {
			while(ty.next())
			{
				HRApprovalForm y=new HRApprovalForm();
				y.setHolidayType(ty.getString("Holiday_Name"));
				y.setDate(ty.getString("date1"));
				reqholiday.append("max(case when Report_Daily_wise.date='"+ty.getString("date")+"' and status='PHPH' then '1' else '0' end) ,"); 
				hol.add(y);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		actualholiday = reqholiday.substring(0, reqholiday.length() - 1)
				.toString(); 
		
		request.setAttribute("holist", hol);
		
		
		
		String ACtualdept="";
	    if(holidayForm.getDeptArray()!=null)
	    {	
	    String[] dept = holidayForm.getDeptArray();
	    
	    StringBuffer reqdept = new StringBuffer();
		for (int i = 0; i < dept.length; i++) {
			reqdept.append("'"+dept[i]+"'" + ",");
		}
		 ACtualdept= reqdept.substring(0, reqdept.length() - 1).toString();
	    }
		
		
	  
	    
	 
	    
	    String ACtualpay="";
	    if(holidayForm.getPayArray()!=null)
	    {
	    
		String[] pay = holidayForm.getPayArray();
	    StringBuffer reqpay = new StringBuffer();
		for (int i = 0; i < pay.length; i++) {
			reqpay.append("'"+pay[i]+"'" + ",");
		}
		ACtualpay = reqpay.substring(0, reqpay.length() - 1).toString();
	    
	    }
	    
	    //catArray
	    String ACtualcat="";
	    if(holidayForm.getCatArray()!=null)
	    {
	    
		String[] cat = holidayForm.getCatArray();
	    StringBuffer reqcat = new StringBuffer();
		for (int i = 0; i < cat.length; i++) {
			reqcat.append("'"+cat[i]+"'" + ",");
		}
		ACtualcat = reqcat.substring(0, reqcat.length() - 1).toString();
	    
	    }
	    
		
	   
	    
	    //reporting
	    
	    String ACtualrepgrp="";
	    if(holidayForm.getRepgrpArray()!=null)
	    {	
	    String[] repgrp = holidayForm.getRepgrpArray();
	    
	    StringBuffer reqrepgrp = new StringBuffer();
		for (int i = 0; i < repgrp.length; i++) {
			reqrepgrp.append("'"+repgrp[i]+"'" + ",");
		}
		ACtualrepgrp= reqrepgrp.substring(0, reqrepgrp.length() - 1).toString();
	    }
	    
	    
		String query1="select Report_Daily_wise.pernr,EMP_FULLNAME,"+actualholiday+" from emp_official_info ,location ,DEPARTMENT,Report_Daily_wise,holidays  where Location.LOCATION_CODE=emp_official_info.LOCID and "
				+ "  DEPARTMENT.DPTID =emp_official_info.DPTID  and Report_Daily_wise.Pernr=emp_official_info.PERNR and Report_Daily_wise.Date=holidays.date   and holidays.year="+holidayForm.getYear()+" ";
		String sqlfromdate="";
		String sqltodate="";
					
		
	
		
		if(!holidayForm.getLocationId().equalsIgnoreCase(""))
		{
			query1=query1+" and emp_official_info.LOCID ='"+holidayForm.getLocationId()+"' ";
		
		}
			
		if(!ACtualpay.equalsIgnoreCase(""))
		{
			query1=query1+" and emp_official_info.PAY_GROUP in("+ACtualpay+")  ";
		
		}

		if(!ACtualcat.equalsIgnoreCase(""))
		{
			query1=query1+" and emp_official_info.STAFFCAT in ("+ACtualcat+") ";
		
		}

		if(!ACtualdept.equalsIgnoreCase(""))
		{
			query1=query1+" and emp_official_info.DPTID in ("+ACtualdept+") ";
		}
		
		
		
		
		if(!holidayForm.getFrompernr().equalsIgnoreCase(""))
		{
			query1=query1+" and emp_official_info.pernr in ("+holidayForm.getFrompernr()+")  ";
		}
		
		
		
		if(!ACtualrepgrp.equalsIgnoreCase(""))
		{
			query1=query1+" and emp_official_info.Reporting_Grp in("+ACtualrepgrp+") ";
		
		}
	
			query1 =query1+" and active=1  group by Report_Daily_wise.pernr,EMP_FULLNAME";
			
			ArrayList gp=new ArrayList();
			ResultSet g=ad.selectQuery(query1);
			try {
				while(g.next())
				{
					HRApprovalForm w=new HRApprovalForm();
					w.setEmployeeno(g.getString("pernr"));
					w.setEmployeeName(g.getString("EMP_FULLNAME"));
					w.setHoldate1("H");
					w.setHoldate2("H");
					w.setHoldate3("H");
					w.setHoldate4("H");
					w.setHoldate5("H");
					w.setHoldate6("H");
					w.setHoldate7("H");
					w.setHoldate8("H");	
					w.setHoldate9("H");
					w.setHoldate10("H");
					gp.add(w);
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			
			request.setAttribute("list", gp);
	
		
		
		return mapping.findForward("exportNationalfestivalReport");
	}
	
	
	public ActionForward exportdisplayHoliday(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {


		
		HRApprovalForm holidayForm = (HRApprovalForm) form;
		HttpSession sesion=request.getSession();
		UserInfo user=(UserInfo)sesion.getAttribute("user");
		
		Date dNow = new Date( );
		SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd");
		String exportdate=ft.format(dNow);

		response.setHeader("Content-Disposition", "inline; filename="+exportdate+"_Holiday_Details_Report.xls");
		
		try
		{
			ArrayList list = null;
	
			
			String year=request.getParameter("year");
			holidayForm.setYear(year);
			int userlocationID=Integer.parseInt(request.getParameter("loc"));
		
			String getHolidays="select h.Year,h.Holiday_Name,h.Day_Name,h.Holiday_Date,h.Day_Name,loc.LOCNAME,loc.location_code  from holidays as h,Location as loc " +
					"where h.Location='"+userlocationID+"' and h.Location=loc.LOCID  and h.Year='"+year+"' order by h.Date ";
			
			ResultSet rs = ad.selectQuery(getHolidays);
			
			
			list = new ArrayList();
			HolidayForm holidayForms = null;
			while (rs.next()) {
				holidayForms = new HolidayForm();
              
               
				holidayForms.setLocation(rs.getString("location_code")+"-"+rs.getString("LOCNAME"));
				holidayForms.setHolidayName(rs.getString("Holiday_Name"));
				holidayForms.setDayName(rs.getString("Day_Name"));
				holidayForms.setHolidayDate(rs.getString("Holiday_Date"));
				holidayForm.setLocationId(rs.getString("location_code")+"-"+rs.getString("LOCNAME"));
				list.add(holidayForms);
			}
			request.setAttribute("listDetails", list);
			try {
				rs.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			
	} catch (Exception e) {
		e.printStackTrace();
	}

		return mapping.findForward("exportHolidays");
	}
	
	
	public ActionForward leavebalanceReport(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		HRApprovalForm hr=(HRApprovalForm)form;
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		NewsandMediaDao ad=new NewsandMediaDao();
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		ArrayList locationList=new ArrayList();
		ArrayList locationLabelList=new ArrayList();
		ResultSet rs11 = ad.selectQuery("select LOCID," +
				"LOCNAME,location_code from location where location_code in ("+locations+") "); 
				try {
					while(rs11.next()) {
						locationList.add(rs11.getString("location_code"));
						locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
						
					}
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				hr.setLocationIdList(locationList);
				hr.setLocationLabelList(locationLabelList);
		
		ArrayList deptList=new ArrayList();
		ArrayList deptLabelList=new ArrayList();
		ResultSet rs15 = ad.selectQuery("select dptid," +
				"DPTLTXT from DEPARTMENT order by dptid "); 
				try {
					while(rs15.next()) {
						deptList.add(rs15.getString("dptid"));
						deptLabelList.add(rs15.getString("DPTLTXT"));
					}
					rs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				hr.setDeptList(deptList);
				hr.setDeptLabelList(deptLabelList);
				
				
				//subdep
				ArrayList subdeptList=new ArrayList();
				ArrayList subdeptLabelList=new ArrayList();
				ResultSet subrs15 = ad.selectQuery("select SDPTID," +
						"SDPTID_LTXT from SUBDEPARTMENT order by SDPTID_LTXT "); 
						try {
							while(subrs15.next()) {
								subdeptList.add(subrs15.getString("SDPTID"));
								subdeptLabelList.add(subrs15.getString("SDPTID_LTXT"));
							}
							subrs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						hr.setSubdeptList(subdeptList);
						hr.setSubdeptLabelList(subdeptLabelList);
					
						//repgrp
						ArrayList repgrptList=new ArrayList();
						ArrayList repgrpLabelList=new ArrayList();
						ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
								"Grp_LTXT from REPORTING_GROUP   order by Grp_LTXT "); 
								try {
									while(reprs15.next()) {
										repgrptList.add(reprs15.getString("Grp_ID"));
										repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
									}
									reprs15.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								
								hr.setRepgrpList(repgrptList);
								hr.setRepgrpLabelList(repgrpLabelList);
								
								ArrayList workList=new ArrayList();
								ArrayList workLabelList=new ArrayList();
								ResultSet rs14 = ad.selectQuery("select loc_id," +
										"loc_name from working_location order by loc_name"); 
										try {
											while(rs14.next()) {
												workList.add(rs14.getString("loc_id"));
												workLabelList.add(rs14.getString("loc_name"));
											}
											rs14.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										
								hr.setWorkList(workList);
								hr.setWorkLabelList(workLabelList);
	
								
								ArrayList yearList=new ArrayList();
								ResultSet rs17 = ad.selectQuery("select distinct year from EMP_IN_OUT_Status  order by year desc"); 
										try {
											while(rs17.next()) {
												yearList.add(rs17.getString("year"));
											}
											rs17.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										
										hr.setYearList(yearList);
										
										
										try {
											rs15.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										try {
											cc.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
		
										try {
											subrs15.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										try {
											rs14.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										try {
											rs17.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										try {
											reprs15.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										try {
											rs11.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
		return mapping.findForward("leavbalancereport");
}
	
	
	public String checknightshift(String shft ) {
	
		
		String night="";
		
		String g="Select * from EMP_SHIFT_MASTER where shift_code='"+shft+"'";
		ResultSet n=ad.selectQuery(g);
		try {
			if(n.next())
			{
				night=n.getString("Night_shift");
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		try {
			n.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return night;
	}
	
	public ActionForward updateMissingppunchlist(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		
		String fullpunch=request.getParameter("fullpunch");
		String date=request.getParameter("date");
		String c[]=date.split("-");
		String type=request.getParameter("type");
		String empno=request.getParameter("empno");
		String time=request.getParameter("time");
		System.out.println(fullpunch);
		
		//update atten_trAn
		
		String a="update ATTENDANCE_MASTER_Tran set updated=1,updated_by='"+user.getEmployeeNo()+"',updated_date=getdate() where id='"+fullpunch+"'";
		int y=ad.SqlExecuteUpdate(a);
		
		
		//Insert into manual Swipe
		

		String up="update EMP_MANUAL_SWIPE set Status_Flag=0 where pernr='"+empno+"' and Start_date='"+date+"' and In_Out='"+type+"'";
	    int s1d= ad.SqlExecuteUpdate(up);
	    
	    String s ="insert into EMP_MANUAL_SWIPE(Pernr,Start_date,In_Out,Start,Lost_Entry_Reason_Type,Remarks,Date,Time,Username,Created_date,Status_Flag) "
	    		+ "values('"+empno+"','"+date+"', '"+type+"','"+time+"', 'Missing','Missing Punch Request',getdate(),getdate(),'"+user.getEmployeeNo()+"',getdate(),'1')";
		
		int k = ad.SqlExecuteUpdate(s);
		
		String timeup= "";
		String time_Status="";
		if(type .equalsIgnoreCase("I"))
		{
			timeup = "update EMP_IN_OUT set  day"+Integer.parseInt(c[2])+" ='"+time+"' where year ='"+Integer.parseInt(c[0])+"'  "
		    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empno+"' and in_out = 'I' ";
				 int s1 = ad.SqlExecuteUpdate(timeup);
				 
			 time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" ='PP'+RIGHT(day"+Integer.parseInt(c[2])+",2) where year ='"+Integer.parseInt(c[0])+"'  "
				    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empno+"'  ";
						 int s2 = ad.SqlExecuteUpdate(time_Status);	
		}
		else
			
		{
			
			time = "update EMP_IN_OUT set  day"+Integer.parseInt(c[2])+" ='"+time+"' where year ='"+Integer.parseInt(c[0])+"'  "
		    + "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empno+"' and in_out = 'O' ";
			 int s1 = ad.SqlExecuteUpdate(time);
				 
				 
		 time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" =LEFT(day"+Integer.parseInt(c[2])+",2)+'PP' where year ='"+Integer.parseInt(c[0])+"'  "
			+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empno+"'  ";
			int s2 = ad.SqlExecuteUpdate(time_Status);	
		}
		
		
		showMissingppunchlist(mapping, form, request, response);
		return mapping.findForward("missingpunchreport");	
		
	}
	
	public ActionForward showMissingppunchlist(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
	    String fromdate=help.getFromDate();
	    String todate=help.getToDate();
	    String sqlfromdate="";	    
	    String sqltodat="";
	    
		   String from[]=fromdate.split("/");
		    sqlfromdate=from[2]+"-"+from[1]+"-"+from[0];
		    
		    String to[]=todate.split("/");
		    sqltodat=to[2]+"-"+to[1]+"-"+to[0];
		
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		   ArrayList locationList=new ArrayList();
					ArrayList locationLabelList=new ArrayList();
					ResultSet rs11 = ad.selectQuery("select LOCID," +
							"LOCNAME,location_code from location where location_code in ("+locations+") "); 
							try {
								while(rs11.next()) {
									locationList.add(rs11.getString("location_code"));
									locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
									
								}
								rs11.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							help.setLocationIdList(locationList);
							help.setLocationLabelList(locationLabelList);
							
							
							
							///missing list
							ArrayList bb=new ArrayList();
							
							String show="select * from(select left(id,2) as day,right(left(id,4),2) as mont,right(left(id,6),2)+':'+right(left(id,8),2) as time,"
									+ "convert(int,SUBSTRING ( id ,9 ,len(id)) ) as tpernr,ATTENDANCE_MASTER_Tran.Id as fullpunch,ATTEN"
									+ "DANCE_MASTER_Tran.Location as punchloc,ATTENDANCE_MASTER_Tran.date as punchdate,updated from  "
									+ "		ATTENDANCE_MASTER_Tran where Date>='"+sqlfromdate+"' and date<='"+sqltodat+"' and Location='"+help.getLocationId()+"' )t,emp_official_info,"
	+ "DEPARTMENT,DESIGNATION,Report_Daily_wise where t.tpernr=emp_official_info.pernr and DEPARTMENT.DPTID=emp_official_info.DPTID and "
	+ "DESIGNATION.DSGID=emp_official_info.DSGID and t.tpernr=Report_Daily_wise.Pernr and Report_Daily_wise.Date=t.punchdate and t.updated='"+help.getSelectedFilter()+"'"	;
							ResultSet as=ad.selectQuery(show);
							try {
								int i=1;
								while(as.next())
								{
									HRApprovalForm bc=new HRApprovalForm();
									bc.setSlsize(i);
									bc.setEmployeeName(as.getString("emp_fullname"));
									bc.setEmployeeno(as.getString("pernr"));
									bc.setDepartment(as.getString("dptstxt"));
									bc.setDesignation(as.getString("dsgstxt"));
									bc.setPunchdate(as.getString("punchdate"));
									bc.setFullpunch(as.getString("fullpunch"));
									bc.setTime(as.getString("time"));
									bc.setShift(as.getString("shift"));
									bc.setSelectedFilter(as.getString("updated"));
									bc.setStatus(checknightshift(as.getString("shift")));
										bb.add(bc);	
										i++;
									
								}
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							
							
							request.setAttribute("missinglist", bb);
		
							try {
								cc.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							try {
								as.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							try {
								rs11.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
		return mapping.findForward("missingpunchreport");	
	}
	
	public ActionForward showprocesslist(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
	HRApprovalForm approvalsForm = (HRApprovalForm) form;
		
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		if(user==null){
			request.setAttribute("message","Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		
		approvalsForm.setLock_id("0"); 
		approvalsForm.setProgress(0);
		
		//update pedning attendace transcdaiton to compl
		
	   String aqq ="  update  Attendance_Process_log set End_Time=getdate(),process_Status='Force Completed'"
				+ " where emp_id ='"+user.getEmployeeNo()+"' and process_Status='Pending'";
			int kff11=ad.SqlExecuteUpdate(aqq); 
		
		ArrayList workList=new ArrayList();
		ArrayList workLabelList=new ArrayList();
		ResultSet rs14 = ad.selectQuery("select loc_id," +
				"loc_name from working_location order by loc_name"); 
				try {
					while(rs14.next()) {
						workList.add(rs14.getString("loc_id"));
						workLabelList.add(rs14.getString("loc_name"));
					}
					rs14.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
		approvalsForm.setWorkList(workList);
		approvalsForm.setWorkLabelList(workLabelList);
		
		String cmpcode1="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode1=cc.getString("Attendance_Loc");
				
				if(cmpcode1.contains(","))
				{
				 cmp=cmpcode1.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode1+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		ArrayList locationList=new ArrayList();
		ArrayList locationLabelList=new ArrayList();
		ResultSet rs11 = ad.selectQuery("select LOCID," +
				"LOCNAME,location_code from location where location_code in ("+locations+") "); 
				try {
					while(rs11.next()) {
						locationList.add(rs11.getString("location_code"));
						locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
						
					}
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				approvalsForm.setLocationIdList(locationList);
				approvalsForm.setLocationLabelList(locationLabelList);
				
				
				ArrayList categoryList=new ArrayList();
				ArrayList categoryLabelList=new ArrayList();
				ResultSet rs13 = ad.selectQuery("select STAFFCAT," +
						"CATLTEXT from category order by CATLTEXT "); 
						try {
							while(rs13.next()) {
								categoryList.add(rs13.getString("STAFFCAT"));
								categoryLabelList.add(rs13.getString("CATLTEXT"));
							}
							rs13.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						approvalsForm.setCategoryList(categoryList);
						approvalsForm.setCategoryLabelList(categoryLabelList);
				
						ArrayList payGroupList=new ArrayList();
						ArrayList payGroupLabelList=new ArrayList();
						ResultSet rs12 = ad.selectQuery("select Paygroup," +
						"Long_Desc from Paygroup_Master"); 
						try {
							while(rs12.next()) {
								payGroupList.add(rs12.getString("Paygroup"));
								payGroupLabelList.add(rs12.getString("Long_Desc"));
							}
							rs12.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						approvalsForm.setPayGroupList(payGroupList);
						approvalsForm.setPayGroupLabelList(payGroupLabelList);		
						
						
						
						
						ArrayList deptList=new ArrayList();
						ArrayList deptLabelList=new ArrayList();
						ResultSet rs15 = ad.selectQuery("select dptid," +
								"DPTLTXT from DEPARTMENT order by dptid "); 
								try {
									while(rs15.next()) {
										deptList.add(rs15.getString("dptid"));
										deptLabelList.add(rs15.getString("DPTLTXT"));
									}
									rs15.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								
								approvalsForm.setDeptList(deptList);
								approvalsForm.setDeptLabelList(deptLabelList);
						
						ArrayList desgList=new ArrayList();
						ArrayList desgLabelList=new ArrayList();
						ResultSet rs16 = ad.selectQuery("select dsgid," +
								"DSGLTXT from DESIGNATION order by DSGLTXT"); 
								try {
									while(rs16.next()) {
										desgList.add(rs16.getString("dsgid"));
										desgLabelList.add(rs16.getString("DSGLTXT"));
									}
									rs16.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								
								approvalsForm.setDesgList(desgList);
								approvalsForm.setDesgLabelList(desgLabelList);
								
								//repgrp
								ArrayList repgrptList=new ArrayList();
								ArrayList repgrpLabelList=new ArrayList();
								ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
										"Grp_LTXT from REPORTING_GROUP   order by Grp_LTXT "); 
										try {
											while(reprs15.next()) {
												repgrptList.add(reprs15.getString("Grp_ID"));
												repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
											}
											reprs15.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										
										approvalsForm.setRepgrpList(repgrptList);
										approvalsForm.setRepgrpLabelList(repgrpLabelList);
		
		
		String frompernr=approvalsForm.getFrompernr();
		String topernr=approvalsForm.getTopernr();
		String cmpcode=approvalsForm.getLocationId();
		String paygrp=approvalsForm.getPaygrp();
	    String category=approvalsForm.getStaffcat();
	    String fromdate=approvalsForm.getFromDate();
	    String todate=approvalsForm.getToDate();

	    String ACtualloc="";
	    if(approvalsForm.getLocArray()!=null)
	    {
	    
		String[] loc = approvalsForm.getLocArray();
	    StringBuffer reqloc = new StringBuffer();
		for (int i = 0; i < loc.length; i++) {
			reqloc.append("'"+loc[i]+"'" + ",");
		}
		ACtualloc = reqloc.substring(0, reqloc.length() - 1).toString();
	    
	    }
	    
	    
	    String tabledate="";
	    String sqlfromdate="";	    
	    String sqltodat="";
	    String filedate="";
	    int filedateday=0;
	    String filedatemonth="";
	    String filedateyear="";
	    
	    String from[]=fromdate.split("/");
	    sqlfromdate=from[2]+"-"+from[1]+"-"+from[0];
	    
	    String to[]=todate.split("/");
	    sqltodat=to[2]+"-"+to[1]+"-"+to[0];
	    
	    
	    LinkedList in=new LinkedList();
        LinkedList out=new LinkedList();
        LinkedList datelist=new LinkedList();
        LinkedList leave=new LinkedList();
        LinkedList onduty=new LinkedList();
        LinkedList compff=new LinkedList();
        LinkedList allleave=new LinkedList();
        LinkedList allonduty=new LinkedList();
        LinkedList allcompff=new LinkedList();
        String emptyshiftregister= "";
        String emptyshiftmaster= "";
        
	    String countdays="SELECT * FROM dbo.ExplodeDates('"+sqlfromdate+"','"+sqltodat+"') as thedate";
	    ResultSet rscount=ad.selectQuery(countdays);
	    try {
			while(rscount.next())
			{
               
                HRApprovalForm date=new  HRApprovalForm();
                

               
				
				String b[]=rscount.getString("thedate").split("-");
				tabledate=b[2]+b[1]+b[0].substring(2, b[0].length())+"-T";
				filedate= rscount.getString("thedate");
				filedateday=Integer.parseInt(b[2]);
				filedatemonth=b[1];
				filedateyear=b[0];
				
                date.setId("Day"+filedateday);
         	   datelist.add(date);
         	   
			String filepath="";
		
		    String empno="";
			File f = new File(filepath);
			if(true) {
			
			
		
	
			    
			    //Flat file processing
			    String empoff="";
		
			    String empshift="";
			    String pernrs="";
			    int parseempno=0;
			    empoff="select * from emp_official_info,Paygroup_Master,DEPARTMENT,DESIGNATION,Category where Paygroup_Master.Paygroup=emp_official_info.PAY_GROUP and DEPARTMENT.DPTID=emp_official_info.DPTID and DESIGNATION.DSGID=emp_official_info.DSGID and Category.STAFFCAT=emp_official_info.STAFFCAT";
			   
			    if(!approvalsForm.getLocationId().equalsIgnoreCase(""))
				{
					empoff=empoff+" and emp_official_info.LOCID =  '"+approvalsForm.getLocationId()+"' ";
				
				}
				if(!approvalsForm.getPaygrp().equalsIgnoreCase(""))
				{
					empoff=empoff+" and emp_official_info.PAY_GROUP =  '"+approvalsForm.getPaygrp()+"' ";
				
				}

				if(!approvalsForm.getStaffcat().equalsIgnoreCase(""))
				{
					empoff=empoff+" and emp_official_info.STAFFCAT = '"+approvalsForm.getStaffcat()+"'  ";
				
				}

				if(!approvalsForm.getDepartment().equalsIgnoreCase(""))
				{
					empoff=empoff+" and emp_official_info.DPTID = '"+approvalsForm.getDepartment()+"' ";
				}
				
				if(!approvalsForm.getDesignation().equalsIgnoreCase(""))
				{
					empoff=empoff+" and emp_official_info.DSGID = '"+approvalsForm.getDesignation()+"'  ";
				}
				
				if(!approvalsForm.getEmployeeno().equalsIgnoreCase(""))
				{
					empoff=empoff+" and emp_official_info.pernr = '"+approvalsForm.getEmployeeno()+"'  ";
				}
			    
				if(!ACtualloc.equalsIgnoreCase(""))
				{
					empoff=empoff+" and emp_official_info.Work_ID in("+ACtualloc+") ";
				
				}
				
				if(!approvalsForm.getRepgrp().equalsIgnoreCase(""))
				{
					empoff=empoff+" and emp_official_info.Reporting_Grp ='"+approvalsForm.getRepgrp()+"' ";
				
				}
				
				if(approvalsForm.getEmptype().equalsIgnoreCase("Active"))
				empoff=empoff+" and Active=1 order by pernr";
				else
					empoff=empoff+" and Active=0 order by pernr";	
				
				
				
			    ResultSet rssempoffr=ad.selectQuery(empoff);
			    int j=1;
			    LinkedList abc=new LinkedList();
			    while(rssempoffr.next())
			    {
			    	
			    	EmpOfficalInformationForm emp=new EmpOfficalInformationForm();
			    	emp.setEmployeeName(rssempoffr.getString("EMP_FULLNAME"));
			    	emp.setEmployeeNumber(rssempoffr.getString("pernr"));
			    	emp.setDepartment(rssempoffr.getString("dptstxt"));
			    	emp.setDesignation(rssempoffr.getString("dsgstxt"));
			    	emp.setDateofJoining(rssempoffr.getString("doj"));
			    	abc.add(emp);
			    }
			    
			   rssempoffr.close();
			    request.setAttribute("emplist", abc);
			    
			    
			    
			}
		
	
			}
			
			
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
	    
	    	
		request.setAttribute("processbutton", "processbutton");
		
		try {
			rs15.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs16.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			cc.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		try {
			rs12.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		try {
			rscount.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs11.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			reprs15.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs14.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs13.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return mapping.findForward("processemptimeentry");
		
	}
	
	public ActionForward displayprocessattendancefile(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
           HRApprovalForm approvalsForm = (HRApprovalForm) form;
		
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		if(user==null){
			request.setAttribute("message","Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		
		
		String hk="select count(*) as cou from Attendance_Process_log  where convert(date,getdate())=convert(date,date) and process_Status='Pending' having count(*)>=2";
		ResultSet s=ad.selectQuery(hk);
		try {
			if(s.next())
			{
				approvalsForm.setMessage("Server Busy Try After Few Minutes..");
				return mapping.findForward("emptimeentry");
			}
		} catch (SQLException e3) {
			// TODO Auto-generated catch block
			e3.printStackTrace();
		}
		
		approvalsForm.setLock_id("0"); 
		approvalsForm.setProgress(0);
		///Attendance Cut oFF
				String get="select case when Param<day(getdate()) then '20'+'/'+convert(nvarchar(10),month(getdate()))+'/'+"
						+ "convert(nvarchar(10),year(getdate())) else '20'+'/'+convert(nvarchar(10),month(DATEADD(MONTH, -1, getdate()) ) )"
						+ "+'/'+convert(nvarchar(10),year(DATEADD(MONTH, -1, getdate()) )) end as mindate from ATTENDANCE_CUT_OFF  where"
						+ " LocID='"+EmpLoc(user.getEmployeeNo())+"'";
				ResultSet cgetc=ad.selectQuery(get);
				try {
					if(cgetc.next())
					{
						approvalsForm.setMessage3(cgetc.getString("mindate"));
					}
				} catch (SQLException e2) {
					// TODO Auto-generated catch block
					e2.printStackTrace();
				}
		
		
		
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
	    ArrayList locationList=new ArrayList();
			ArrayList locationLabelList=new ArrayList();
			ResultSet rs11 = ad.selectQuery("select LOCID," +
					"LOCNAME,location_code from location where location_code in ("+locations+") "); 
					try {
						while(rs11.next()) {
							locationList.add(rs11.getString("location_code"));
							locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
							
						}
						rs11.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					approvalsForm.setLocationIdList(locationList);
					approvalsForm.setLocationLabelList(locationLabelList);
					
					ArrayList categoryList=new ArrayList();
					ArrayList categoryLabelList=new ArrayList();
					ResultSet rs13 = ad.selectQuery("select STAFFCAT," +
							"CATLTEXT from category order by CATLTEXT "); 
							try {
								while(rs13.next()) {
									categoryList.add(rs13.getString("STAFFCAT"));
									categoryLabelList.add(rs13.getString("CATLTEXT"));
								}
								rs13.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							approvalsForm.setCategoryList(categoryList);
							approvalsForm.setCategoryLabelList(categoryLabelList);
					
							ArrayList payGroupList=new ArrayList();
							ArrayList payGroupLabelList=new ArrayList();
							ResultSet rs12 = ad.selectQuery("select Paygroup," +
							"Long_Desc from Paygroup_Master"); 
							try {
								while(rs12.next()) {
									payGroupList.add(rs12.getString("Paygroup"));
									payGroupLabelList.add(rs12.getString("Long_Desc"));
								}
								rs12.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							approvalsForm.setPayGroupList(payGroupList);
							approvalsForm.setPayGroupLabelList(payGroupLabelList);		
							
							
							ArrayList workList=new ArrayList();
							ArrayList workLabelList=new ArrayList();
							ResultSet rs14 = ad.selectQuery("select loc_id," +
									"loc_name from working_location order by loc_name"); 
									try {
										while(rs14.next()) {
											workList.add(rs14.getString("loc_id"));
											workLabelList.add(rs14.getString("loc_name"));
										}
										rs14.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
									
									approvalsForm.setWorkList(workList);
									approvalsForm.setWorkLabelList(workLabelList);
							
							ArrayList deptList=new ArrayList();
							ArrayList deptLabelList=new ArrayList();
							ResultSet rs15 = ad.selectQuery("select dptid," +
									" DPTLTXT from DEPARTMENT order by DPTLTXT "); 
									try {
										while(rs15.next()) {
											deptList.add(rs15.getString("dptid"));
											deptLabelList.add(rs15.getString("DPTLTXT"));
										}
										rs15.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
									
									approvalsForm.setDeptList(deptList);
									approvalsForm.setDeptLabelList(deptLabelList);
							
							ArrayList desgList=new ArrayList();
							ArrayList desgLabelList=new ArrayList();
							ResultSet rs16 = ad.selectQuery("select dsgid," +
									"DSGLTXT from DESIGNATION order by DSGLTXT"); 
									try {
										while(rs16.next()) {
											desgList.add(rs16.getString("dsgid"));
											desgLabelList.add(rs16.getString("DSGLTXT"));
										}
										rs16.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										
										
										
										
										
										e.printStackTrace();
									}
									
									approvalsForm.setDesgList(desgList);
									approvalsForm.setDesgLabelList(desgLabelList);
									
									
									//repgrp
									ArrayList repgrptList=new ArrayList();
									ArrayList repgrpLabelList=new ArrayList();
									ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
											"Grp_LTXT from REPORTING_GROUP   order by Grp_LTXT "); 
											try {
												while(reprs15.next()) {
													repgrptList.add(reprs15.getString("Grp_ID"));
													repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
												}
												reprs15.close();
											} catch (SQLException e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
											
											approvalsForm.setRepgrpList(repgrptList);
											approvalsForm.setRepgrpLabelList(repgrpLabelList);
											
											try {
												cgetc.close();
											} catch (SQLException e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
											try {
												rs15.close();
											} catch (SQLException e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
											try {
												cc.close();
											} catch (SQLException e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
											try {
												rs16.close();
											} catch (SQLException e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
											try {
												rs13.close();
											} catch (SQLException e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
											try {
												reprs15.close();
											} catch (SQLException e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
											
											try {
												rs12.close();
											} catch (SQLException e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
											
											try {
												rs14.close();
											} catch (SQLException e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
											try {
												rs11.close();
											} catch (SQLException e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
		
		return mapping.findForward("processemptimeentry");
		
	}
	
	public ActionForward processattendancefile(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
		HRApprovalForm approvalsForm = (HRApprovalForm) form;
			
			HttpSession session=request.getSession();
			UserInfo user=(UserInfo)session.getAttribute("user");
			if(user==null){
				request.setAttribute("message","Session Expried! Try to Login again!");
				return mapping.findForward("displayiFrameSession");
			}
			
			String cmpcode1="";
			int id=user.getGroupId();
			String cmp[]=new String[0]; 
			String locations="";
			
			String aa1="select * from user_group where id='"+id+"'";
			ResultSet cc1=ad.selectQuery(aa1);
			try {
				if(cc1.next())
				{
					cmpcode1=cc1.getString("Attendance_Loc");
					
					if(cmpcode1.contains(","))
					{
					 cmp=cmpcode1.split(",");
					
					for(int b=0;b<cmp.length;b++)
					{
						locations=locations+"'"+cmp[b]+"',";
					}
					
					locations=locations.substring(0, locations.length()-1);
					}
					else
					{
						locations="'"+cmpcode1+"'";
					}
				}
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
			ArrayList locationList=new ArrayList();
			ArrayList locationLabelList=new ArrayList();
			ResultSet rs11 = ad.selectQuery("select LOCID," +
					"LOCNAME,location_code from location where location_code in ("+locations+") "); 
					try {
						while(rs11.next()) {
							locationList.add(rs11.getString("location_code"));
							locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
							
						}
						rs11.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					approvalsForm.setLocationIdList(locationList);
					approvalsForm.setLocationLabelList(locationLabelList);
					
					
					ArrayList categoryList=new ArrayList();
					ArrayList categoryLabelList=new ArrayList();
					ResultSet rs13 = ad.selectQuery("select STAFFCAT," +
							"CATLTEXT from category order by CATLTEXT "); 
							try {
								while(rs13.next()) {
									categoryList.add(rs13.getString("STAFFCAT"));
									categoryLabelList.add(rs13.getString("CATLTEXT"));
								}
								rs13.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							approvalsForm.setCategoryList(categoryList);
							approvalsForm.setCategoryLabelList(categoryLabelList);
					
							ArrayList payGroupList=new ArrayList();
							ArrayList payGroupLabelList=new ArrayList();
							ResultSet rs12 = ad.selectQuery("select Paygroup," +
							"Long_Desc from Paygroup_Master"); 
							try {
								while(rs12.next()) {
									payGroupList.add(rs12.getString("Paygroup"));
									payGroupLabelList.add(rs12.getString("Long_Desc"));
								}
								rs12.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							approvalsForm.setPayGroupList(payGroupList);
							approvalsForm.setPayGroupLabelList(payGroupLabelList);		
							
							
							ArrayList workList=new ArrayList();
							ArrayList workLabelList=new ArrayList();
							ResultSet rs14 = ad.selectQuery("select loc_id," +
									"loc_name from working_location order by loc_name"); 
									try {
										while(rs14.next()) {
											workList.add(rs14.getString("loc_id"));
											workLabelList.add(rs14.getString("loc_name"));
										}
										rs14.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
									
									approvalsForm.setWorkList(workList);
									approvalsForm.setWorkLabelList(workLabelList);
							
							ArrayList deptList=new ArrayList();
							ArrayList deptLabelList=new ArrayList();
							ResultSet rs15 = ad.selectQuery("select dptid," +
									"DPTLTXT from DEPARTMENT order by dptid "); 
									try {
										while(rs15.next()) {
											deptList.add(rs15.getString("dptid"));
											deptLabelList.add(rs15.getString("DPTLTXT"));
										}
										rs15.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
									
									approvalsForm.setDeptList(deptList);
									approvalsForm.setDeptLabelList(deptLabelList);
							
							ArrayList desgList=new ArrayList();
							ArrayList desgLabelList=new ArrayList();
							ResultSet rs16 = ad.selectQuery("select dsgid," +
									"DSGLTXT from DESIGNATION order by DSGLTXT"); 
									try {
										while(rs16.next()) {
											desgList.add(rs16.getString("dsgid"));
											desgLabelList.add(rs16.getString("DSGLTXT"));
										}
										rs16.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
									
									approvalsForm.setDesgList(desgList);
									approvalsForm.setDesgLabelList(desgLabelList);
									
									//repgrp
									ArrayList repgrptList=new ArrayList();
									ArrayList repgrpLabelList=new ArrayList();
									ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
											"Grp_LTXT from REPORTING_GROUP   order by Grp_LTXT "); 
											try {
												while(reprs15.next()) {
													repgrptList.add(reprs15.getString("Grp_ID"));
													repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
												}
												reprs15.close();
											} catch (SQLException e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
											
											approvalsForm.setRepgrpList(repgrptList);
											approvalsForm.setRepgrpLabelList(repgrpLabelList);
		
			
			
			String frompernr=approvalsForm.getFrompernr();
			String topernr=approvalsForm.getTopernr();
			String cmpcode=approvalsForm.getLocationId();
			String tempcmpcode="";
			if(cmpcode.equalsIgnoreCase("ML90"))
			{
				tempcmpcode="ML18";
			}
			if(cmpcode.equalsIgnoreCase("ML25"))
			{
				tempcmpcode="ML11";
			}
			if(cmpcode.equalsIgnoreCase("ML27"))
			{
				tempcmpcode="ML15";
			}
			
			if(cmpcode.equalsIgnoreCase("ML92")||cmpcode.equalsIgnoreCase("ML54")||cmpcode.equalsIgnoreCase("ML26"))
			{
				tempcmpcode="ML22";
			}
			
			if(cmpcode.equalsIgnoreCase("ML02")||cmpcode.equalsIgnoreCase("ML03"))
			{
				tempcmpcode="ML01";
			}
			
			String paygrp=approvalsForm.getPaygrp();
		    String category=approvalsForm.getStaffcat();
		    String fromdate=approvalsForm.getFromDate();
		    String todate=approvalsForm.getToDate();
		    String workID[]=approvalsForm.getLocArray();
		    String repgrp=approvalsForm.getRepgrp();
		    
		    if(cmpcode.equalsIgnoreCase("ML00"))
			{
		    	/*if(workID!=null)
		    	{
		    	for (int i = 0; i < workID.length; i++) {
		    		  if(workID[i].equalsIgnoreCase("2") || workID[i].equalsIgnoreCase("789"))
		    		    {
		    		    	tempcmpcode="ML18";
		    		    }
				}
		    	}*/
		    	if(repgrp!=null)
		    	{
		    	
		    		  if(repgrp.equalsIgnoreCase("12"))
		    		    {
		    		    	tempcmpcode="ML18";
		    		    }
		    		  if(repgrp.equalsIgnoreCase("13"))
		    		    {
		    		    	tempcmpcode="ML21";
		    		    }
		    		
				
		    	}
		    
			}
		    
		    String reqemp=approvalsForm.getEmployeeno();
		    
		    String tabledate="";
		    String sqlfromdate="";	    
		    String sqltodat="";
		    String filedate="";
		    int filedateday=0;
		    String filedatemonth="";
		    String filedateyear="";
		    
		    
		    int curnoofdays=0;
		    String curmonth="";
		    String curyear="";
		    
		    int prenoofdays=0;
		    String prevmont="";
		    String prevyear="";
		    
		    String from[]=fromdate.split("/");
		    sqlfromdate=from[2]+"-"+from[1]+"-"+from[0];
		    
		    String to[]=todate.split("/");
		    sqltodat=to[2]+"-"+to[1]+"-"+to[0];
		    
		    LinkedList miss=new LinkedList();
		    LinkedList in=new LinkedList();
	        LinkedList out=new LinkedList();
	        LinkedList datelist=new LinkedList();
	        LinkedList caldatelist=new LinkedList();
	        LinkedList leave=new LinkedList();
	        LinkedList onduty=new LinkedList();
	        LinkedList compff=new LinkedList();
	        LinkedList allleave=new LinkedList();
	        LinkedList allonduty=new LinkedList();
	        LinkedList allcompff=new LinkedList();
	        String emptyshiftregister= "";
	        String emptyshiftmaster= "";
	 		String ACtualemps ="";
	 		 String prevdate="";
	 		 HRApprovalForm date=new  HRApprovalForm();
	 		 
	 		int allowprocess=0;
	 		 ///check files imported are not
	 		 String ch="select case when count(distinct date)=(SELECT count (*) FROM dbo.ExplodeDates('"+sqlfromdate+"','"+sqltodat+"')) then 1 else 0 end  as allow from ATTENDANCE_MASTER"
	 		 		+ " where Location in (select LOCATION_CODE from Location where locid='"+user.getPlantId()+"') and date between '"+sqlfromdate+"' and '"+sqltodat+"'";
	 		 ResultSet rsf=ad.selectQuery(ch);
	 	
	 			try {
					while(rsf.next())
					{
						
						allowprocess=rsf.getInt("allow");
					}
				} catch (SQLException e2) {
					// TODO Auto-generated catch block
					e2.printStackTrace();
				}
	 		 
	 			/*if(allowprocess==0)
	 			{
	 				approvalsForm.setMessage("Punch Files Missing for the selected dates ..Import Files First and then process");
	 				return mapping.findForward("processemptimeentry");
	 			}*/
	 		 
	 		String daysreq="select day(DATEADD(day,-2,'"+sqlfromdate+"')) as lastbutone,day(DATEADD(day,-1,'"+sqlfromdate+"')) as last";
			  ResultSet rss=ad.selectQuery(daysreq);
			try {
				if(rss.next())
					
				{
					date=new  HRApprovalForm();
					date.setId("Day"+rss.getString("lastbutone"));		
					date.setDay(rss.getString("lastbutone"));
					datelist.add(date);
					
					date=new  HRApprovalForm();
					date.setId("Day"+rss.getString("last"));	
					date.setDay(rss.getString("last"));
					datelist.add(date);
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			
			
			String pern[]=  request.getParameterValues("selectedRequestNo");
		       
	        
			 
	  		if(pern!=null)
	  		{
	  	
	  		if(pern.length!=0)
	  		{
	  		StringBuffer reqemps = new StringBuffer();
	  		for (int i = 0; i < pern.length; i++) {
	  			reqemps.append("'"+pern[i]+"'" + ",");
	  		}
	  		ACtualemps = reqemps.substring(0, reqemps.length() - 1)
	  				.toString();
	  		}
	  		}

			///reset to deafuklt 00:00:00 and AAAA before proces
	  		
	  		DateFormat dateFormat1 = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
			Calendar cal11 = Calendar.getInstance();							
			String datecurren11t=dateFormat1.format(cal11.getTime());
		  
			approvalsForm.setLock_id(datecurren11t); 
		////insert empNos
			String insert4="EXEC EMP_Split '"+(ACtualemps.replace(",", "$")).replace("'", "")+"','"+datecurren11t+"' ";
			int bqb4=ad.SqlExecuteUpdate(insert4);	
			System.out.println(insert4);
			
			
			
			
		

			String aqq =" Insert into Attendance_Process_log(emp_id,emp_name,emp_loc,process_Name,process_Location,process_Status,emp_count,lock_id,start_date,end_date,start_time) values "
					+ " ('"+user.getEmployeeNo()+"','"+user.getFullName()+"','"+user.getPlantId()+"','Attendance','"+approvalsForm.getLocationId()+"', "
					+ " 'Pending',(select count(*) from temp_emp where Date_Time='"+approvalsForm.getLock_id()+"'),'"+approvalsForm.getLock_id()+"','"+approvalsForm.getFromDate()+"','"+approvalsForm.getToDate()+"' ,getdate())" ;
			int kff11=ad.SqlExecuteUpdate(aqq);
			
			 String q2t="EXEC ResetEmpAttd '"+sqlfromdate+"','"+sqltodat+"','"+datecurren11t+"'";
				int kff1=ad.SqlExecuteUpdate(q2t);
				
				
	//delete empNos
			    
			    String delete3="delete Temp_Emp where Date_Time='"+datecurren11t+"'";						    
			   int lldd1=ad.SqlExecuteUpdate(delete3);
	 		
		    String countdays="SELECT * FROM dbo.ExplodeDates('"+sqlfromdate+"','"+sqltodat+"') as thedate";
		    ResultSet rscount=ad.selectQuery(countdays);
		    try {
				while(rscount.next())
				{
	               
	             
					  date=new  HRApprovalForm();
					  HRApprovalForm cal=new HRApprovalForm();
						
						String rtr="select day(DATEADD(day,0,'"+rscount.getString("thedate")+"')) as day,month(DATEADD(day,0,'"+rscount.getString("thedate")+"')) as mon,year(DATEADD(day,0,'"+rscount.getString("thedate")+"')) as year,"
								+ "day(DATEADD(day,-1,'"+rscount.getString("thedate")+"')) as prevday,month(DATEADD(day,0,'"+rscount.getString("thedate")+"')) as prevmon,year(DATEADD(day,0,'"+rscount.getString("thedate")+"')) as prevyear";
						  ResultSet rrr=ad.selectQuery(rtr);
						if(rrr.next())
							
						{
							date.setId("Day"+rrr.getString("day"));	
							date.setDay(rrr.getString("day"));						
			         	    datelist.add(date);
			         	    
			         	    cal.setId("Day"+rrr.getString("day"));	
			         	    cal.setDay(rrr.getString("day"));
			         	    cal.setMonth(rrr.getString("mon"));
			         	    cal.setYear(rrr.getString("year"));
			         	
			         	    caldatelist.add(cal);
			         	    
			         		   
						}
						rrr.close();

					
					String b[]=rscount.getString("thedate").split("-");
					tabledate=b[2]+b[1]+b[0].substring(2, b[0].length())+"-T";
					filedate= rscount.getString("thedate");
					filedateday=Integer.parseInt(b[2]);
					filedatemonth=b[1];
					filedateyear=b[0];
						//start date, to date
					String st[]=sqlfromdate.split("-");
					
					curmonth=to[1];
					curyear=to[2];
					
					 prevmont=Integer.toString((Integer.parseInt(from[1])));
					 prevyear="";
					if(prevmont.equalsIgnoreCase("0"))
					{
					 prevmont="12";
					 prevyear=Integer.toString((Integer.parseInt(from[2])));	
					}
					else
						prevyear=curyear;
					
			

					// Create a calendar object and set year and month
					Calendar mycal = Calendar.getInstance();

					mycal.set(Integer.parseInt(curyear), Integer.parseInt(curmonth)-1, 1);
					
					// Get the number of days in that month
					curnoofdays = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
					
					
					mycal.set(Integer.parseInt(prevyear), Integer.parseInt(prevmont)-1, 1);
					
					prenoofdays = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
					
					
	             
	         	   
				String filepath="";
			
			    String empno="";
				File f = new File(filepath);
				if(true) {
				
				
			
		          
		  		
				    
				    //Flat file processing
				    String empoff="";
			
				    String empshift="";
				    String pernrs="";
				    int parseempno=0;
				    
				    if(tempcmpcode.equalsIgnoreCase(""))
				    {
				    empoff="select * from(select left(id,2) as day,right(left(id,4),2) as mont,right(left(id,6),2)+':'+right(left(id,8),2) as time,SUBSTRING ( id ,9 ,len(id))  as tpernr,ATTENDANCE_MASTER.Id as fullpunch,ATTENDANCE_MASTER.Location as punchloc,ATTENDANCE_MASTER.date as punchdate from "
				    		+ "ATTENDANCE_MASTER where Date='"+filedate+"' and Location='"+cmpcode+"' )t,emp_official_info,Paygroup_Master,DEPARTMENT,DESIGNATION,Category"
				    		+ " where (emp_official_info.PERNR=t.tpernr or emp_official_info.swipe_no=t.tpernr)  and Paygroup_Master.Paygroup=emp_official_info.PAY_GROUP "
				    		+ "and DEPARTMENT.DPTID=emp_official_info.DPTID and DESIGNATION.DSGID=emp_official_info.DSGID and Category.STAFFCAT=emp_official_info.STAFFCAT";
				    }
				    else
				    {
				    	 empoff="select * from(select left(id,2) as day,right(left(id,4),2) as mont,right(left(id,6),2)+':'+right(left(id,8),2) as time,SUBSTRING ( id ,9 ,len(id))  as tpernr,ATTENDANCE_MASTER.Id as fullpunch,ATTENDANCE_MASTER.Location as punchloc,ATTENDANCE_MASTER.date as punchdate from "
						    		+ "ATTENDANCE_MASTER where Date='"+filedate+"' and Location='"+tempcmpcode+"' )t,emp_official_info,Paygroup_Master,DEPARTMENT,DESIGNATION,Category"
						    		+ " where (emp_official_info.PERNR=t.tpernr or emp_official_info.swipe_no=t.tpernr)  and Paygroup_Master.Paygroup=emp_official_info.PAY_GROUP "
						    		+ "and DEPARTMENT.DPTID=emp_official_info.DPTID and DESIGNATION.DSGID=emp_official_info.DSGID and Category.STAFFCAT=emp_official_info.STAFFCAT";
						  	
				    }
			
					
				    if(approvalsForm.getEmptype().equalsIgnoreCase("Active"))
						empoff=empoff+" and emp_official_info.pernr in ("+ACtualemps+") and ACTIVE=1 ";
					else
						empoff=empoff+" and emp_official_info.pernr in ("+ACtualemps+") and ACTIVE=0 ";	
					
				    
					
					empoff=empoff+" order by t.time";
				    ResultSet rssempoffr=ad.selectQuery(empoff);
				    int j=1;
				   
				   
				    aqq ="  update  Attendance_Process_log set fetch_st=getdate(),progress=15"
							+ " where lock_id ='"+approvalsForm.getLock_id()+"' and (fetch_st is  null or fetch_st='')";
						kff11=ad.SqlExecuteUpdate(aqq); 
				    while(rssempoffr.next())
				    {
				    	System.out.println(j);
				    	j++;
				    	
				    	 HRApprovalForm intime=new  HRApprovalForm();
				    
			             
				    	 //add full punch
				    	 intime.setFullpunch(rssempoffr.getString("fullpunch"));
				    	 intime.setPunchloc(rssempoffr.getString("punchloc"));
				    	 intime.setPunchdate(rssempoffr.getString("punchdate"));
				    	 
			             parseempno=Integer.parseInt(rssempoffr.getString("pernr"));
				     empno=Integer.toString(parseempno);
				     System.out.println(empno);
				     
				     if(rssempoffr.getString("Shift_Code").equalsIgnoreCase(""))
				     {
				    	 emptyshiftmaster=emptyshiftmaster+","+empno;
				     }
				     else
				     {
				     empshift=getempshift(filedateday, empno, filedatemonth, filedateyear);
				     }
				     
				     String currentshifttime[]=new String[0];
				     String prevshifttime[]=new String[0];			    
				     String empshiftmaster[]=new String[0];
				     
				     
				     if(!empshift.equalsIgnoreCase(""))
				     {
				    	 empshiftmaster=empshift.split(",");
				      currentshifttime=getempshifttime(empshiftmaster[1]);
				      prevshifttime=getempshifttime(empshiftmaster[0]);
				     }
				     else
				     {
				    	 emptyshiftregister=emptyshiftregister+","+empno;
				     }
				     String curshftstart="";
				     String curshftend="";
				     String curfrsthalfend="";
				     String cursechalfstart="";
				     String curnightshift="";
				     String curpunchstart="";
				     String curpunchend="";
				     String curpunchvalid="";
				     
				     String prevshftstart="";
				     String prevshftend="";
				     String prevfrsthalfend="";
				     String prevsechalfstart="";
				     String prevnightshift="";
				     String prevpunchstart="";
				     String prevpunchend="";
				     String prevpunchvalid="";
				     
				    
				     if(currentshifttime.length!=0)
				     {
				    	
				      curshftstart=currentshifttime[0].substring(0, 5);
				      curshftend=currentshifttime[1].substring(0, 5);
				      curfrsthalfend=currentshifttime[2].substring(0, 5);
				      cursechalfstart=currentshifttime[3].substring(0, 5);
				      curnightshift=currentshifttime[4];
				      curpunchstart=currentshifttime[5].substring(0, 5);
				      curpunchend=currentshifttime[6].substring(0, 5);
				      curpunchvalid=currentshifttime[7].substring(0, 5);
				     }
				     if(prevshifttime.length!=0)
				     {
				    	 prevshftstart=prevshifttime[0].substring(0, 5);
				    	 prevshftend=prevshifttime[1].substring(0, 5);
				    	 prevfrsthalfend=prevshifttime[2].substring(0, 5);
				    	 prevsechalfstart=prevshifttime[3].substring(0, 5);
				    	 prevnightshift=prevshifttime[4];
				    	 prevpunchstart=prevshifttime[5].substring(0, 5);
				    	 prevpunchend=prevshifttime[6].substring(0, 5);
				    	 prevpunchvalid=prevshifttime[7].substring(0, 5);
				     }

				     
				     
				     String punchtime="";
		
				     		     
				      punchtime=rssempoffr.getString("time");
			         
					         
			    
			         
	           if(curnightshift.equalsIgnoreCase("0")&&prevnightshift.equalsIgnoreCase("0"))
	            {
	        	   String actualcurshftstart="";
	        	   String actualcurfrsthalfend="";
	        	   String actualcursechalfstart="";
	        	   String actualcurshftend="";
	        	   actualcurshftstart=curshftstart;
	        	   actualcurfrsthalfend=curfrsthalfend;
	        	   actualcursechalfstart=cursechalfstart;
	        	   actualcurshftend=curshftend;
	        	   if(curshftstart.substring(0, 2).equalsIgnoreCase("00"))
	        	   {
	        		  
	        		   curshftstart=Integer.toString(Integer.parseInt(curshftstart.substring(0, 2))+24)+curshftstart.substring(2, 5);
	        		   curfrsthalfend=Integer.toString(Integer.parseInt(curfrsthalfend.substring(0, 2))+24)+curfrsthalfend.substring(2, 5);
	        		   cursechalfstart=Integer.toString(Integer.parseInt(cursechalfstart.substring(0, 2))+24)+cursechalfstart.substring(2, 5);
	        	   }
	        	   
			        if(punchtime.compareTo(prevpunchvalid)>0 && punchtime.compareTo(curshftstart)<=0 || punchtime.compareTo(curfrsthalfend)>=0 && punchtime.compareTo(cursechalfstart)<=0)
			        {
			            intime.setStatus("I");
			            
			            if(!curfrsthalfend.equalsIgnoreCase("00:00") && !cursechalfstart.equalsIgnoreCase("00:00") )
			            	
			            {
			            	if(punchtime.compareTo(curfrsthalfend)>=0 )
					        {
					        	intime.setMessage("S");
					        }
			            }
			            
			            
			            
			            if(pernrs.contains(empno+"I"))
		                {
			            	if(punchtime.compareTo(curfrsthalfend)>=0 )
					        {
			            	  intime.setStatus("O");
					        }
		                }
			            
			            curshftstart=actualcurshftstart;
			            curfrsthalfend=actualcurfrsthalfend;
			            cursechalfstart=actualcursechalfstart;
			        }
			        
			        
	            
			        if(punchtime.compareTo(curshftstart)>0  && punchtime.compareTo(curfrsthalfend)<0)
			        
			        {
			        	intime.setStatus("I");
			        	intime.setMessage("S");
			        	if(pernrs.contains(empno+"I"))
			                {
				            	
				            	  intime.setStatus("O");
						        
			               }
			        }
			       
			        if(curshftend.substring(0, 2).equalsIgnoreCase("00"))
		        	   {
		        		  
			        	curshftend=Integer.toString(Integer.parseInt(curshftend.substring(0, 2))+24)+curshftend.substring(2, 5);
		        	
		        	   }
			       
			        
			        if(punchtime.compareTo(cursechalfstart)>0)
			        {
			        	if(punchtime.compareTo(cursechalfstart)>0 && punchtime.compareTo(curshftend)<0)
			        	{
			        		if(pernrs.contains(empno+"I"))
			                {
			        		 intime.setStatus("O");
					         intime.setMessage("S");
			                }
			        		else
			        		{
			        			intime.setStatus("I");
						         intime.setMessage("S");
			        		}
			        	}
			        	else
			        	{
			        		 intime.setStatus("O");
					         intime.setMessage("");
			        	}
			        }
			        curshftend=actualcurshftend;
	            
			         intime.setId("Day"+filedateday);
			         intime.setTime(punchtime);
			         intime.setEmployeeNo(empno);
			         intime.setFrommonth(filedatemonth);
			         intime.setCalyear(filedateyear);
			         
			         
	                //punch valid till
			         if(prevpunchvalid.compareTo(curshftstart)<=0)
				     {
			         
			         if(punchtime.compareTo("00:00")>=0 && punchtime.compareTo(prevpunchvalid)<=0)
			         {

				        	int prevday=0;
				    		int prevmonth=0;
				    		int preyear=0;
				        	int tempfiledateday=0;
				        	
				        	String actualpunch="";
				 
				            intime.setStatus("O");
				            actualpunch=punchtime;
				            if(curshftend.substring(0, 2).equalsIgnoreCase("00"))
				        	   {
				            	curshftend=Integer.toString(Integer.parseInt(curshftend.substring(0, 2))+24)+curshftend.substring(2, 5);
				        		  punchtime=Integer.toString(Integer.parseInt(punchtime.substring(0, 2))+24)+punchtime.substring(2, 5);
				        		  
				        	   }
				            if(punchtime.substring(0, 2).equalsIgnoreCase("00"))
				        	   {
				         
				        		  punchtime=Integer.toString(Integer.parseInt(punchtime.substring(0, 2))+24)+punchtime.substring(2, 5);
				        		  
				        	   }
				            
				          
				            intime.setMessage("");
				            
				           
				            punchtime=actualpunch;
				            tempfiledateday=filedateday-1;
				            if(tempfiledateday==0)
				    		{
				            		
				            	
				            	mycal = Calendar.getInstance();
				    			if(filedateday==Integer.parseInt(filedatemonth))
				    			{
				    			mycal.set(Integer.parseInt(filedateyear)-1, Integer.parseInt(filedatemonth)-2, 1);	
				    			prevmonth=12;
				    			preyear=Integer.parseInt(filedateyear)-1;
				    	
				    			}
				    			else
				    			{
				    			mycal.set(Integer.parseInt(filedateyear), Integer.parseInt(filedatemonth)-2, 1);	
				    			prevmonth=Integer.parseInt(filedatemonth)-1;
				    			preyear=Integer.parseInt(filedateyear);
				    		
				    			}
				    			int daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
				    			tempfiledateday=daysInMonth;
				    		
				            	
				    		}
				    		else
				    		{
				    			tempfiledateday=tempfiledateday;	
				    			prevmonth=Integer.parseInt(filedatemonth);
				    			preyear=Integer.parseInt(filedateyear);
				    		} 
				            intime.setId("Day"+tempfiledateday);	          
					         intime.setTime(punchtime);
					         intime.setFrommonth(Integer.toString(prevmonth));
					         intime.setCalyear(Integer.toString(preyear));
					         intime.setEmployeeNo(empno);
				          
				        
			         }
				     }
			         
			         
			         //////TS or SS1combined with FS
				        
				        if(prevshftend.equalsIgnoreCase(curshftstart))
				        {/*


				        	int prevday=0;
				    		int prevmonth=0;
				    		int preyear=0;
				        	int tempfiledateday=0;
				 
				        	String actualpunch="";
							 
				            intime.setStatus("O");
				            actualpunch=punchtime;
				            if(prevshftend.substring(0, 2).equalsIgnoreCase("00"))
				        	   {
				            	prevshftend=Integer.toString(Integer.parseInt(curshftend.substring(0, 2))+24)+curshftend.substring(2, 5);
				        		  punchtime=Integer.toString(Integer.parseInt(punchtime.substring(0, 2))+24)+punchtime.substring(2, 5);
				        		  
				        	   }
				           
				            intime.setMessage("");
				            
				           
				            punchtime=actualpunch;
				           
				            tempfiledateday=filedateday-1;
				            if(tempfiledateday==0)
				    		{
				            		
				            	
				            	mycal = Calendar.getInstance();
				    			if(filedateday==Integer.parseInt(filedatemonth))
				    			{
				    			mycal.set(Integer.parseInt(filedateyear)-1, Integer.parseInt(filedatemonth)-2, 1);	
				    			prevmonth=12;
				    			preyear=Integer.parseInt(filedateyear)-1;
				    	
				    			}
				    			else
				    			{
				    			mycal.set(Integer.parseInt(filedateyear), Integer.parseInt(filedatemonth)-2, 1);	
				    			prevmonth=Integer.parseInt(filedatemonth)-1;
				    			preyear=Integer.parseInt(filedateyear);
				    		
				    			}
				    			int daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
				    			tempfiledateday=daysInMonth;
				    		
				            	
				    		}
				    		else
				    		{
				    			tempfiledateday=tempfiledateday;	
				    			prevmonth=Integer.parseInt(filedatemonth);
				    			preyear=Integer.parseInt(filedateyear);
				    		} 
				            intime.setId("Day"+tempfiledateday);	          
					         intime.setTime(punchtime);
					         intime.setFrommonth(Integer.toString(prevmonth));
					         intime.setCalyear(Integer.toString(preyear));
					         intime.setEmployeeNo(empno);
				          
				        
			         
				        */}
			         
			         
	            }
	           
	           if(curnightshift.equalsIgnoreCase("1")&&prevnightshift.equalsIgnoreCase("0"))
	           {
	        	   String actualcurshftstart="";
	        	   String actualcurfrsthalfend="";
	        	   String actualcursechalfstart="";
	        	   String actualcurshftend="";
	        	   actualcurshftstart=curshftstart;	        
	        	   actualcurfrsthalfend=curfrsthalfend;
	        	   actualcursechalfstart=cursechalfstart;
	        	   actualcurshftend=curshftend;
	        	   if(curshftstart.substring(0, 2).equalsIgnoreCase("00"))
	        	   {
	        		  
	        		   curshftstart=Integer.toString(Integer.parseInt(curshftstart.substring(0, 2))+24)+curshftstart.substring(2, 5);
	        		   curfrsthalfend=Integer.toString(Integer.parseInt(curfrsthalfend.substring(0, 2))+24)+curfrsthalfend.substring(2, 5);
	        		   cursechalfstart=Integer.toString(Integer.parseInt(cursechalfstart.substring(0, 2))+24)+cursechalfstart.substring(2, 5);
	        	   }
			        if(punchtime.compareTo(prevpunchvalid)>0 && punchtime.compareTo(curshftstart)<=0 || punchtime.compareTo(curfrsthalfend)>=0 && punchtime.compareTo(cursechalfstart)<=0)
			        {
			            intime.setStatus("I");
			            
	                  if(!curfrsthalfend.equalsIgnoreCase("00:00") && !cursechalfstart.equalsIgnoreCase("00:00") )
			            	
			            {
	                	  if(curshftstart.compareTo(curfrsthalfend)>0)
	                	   {
	                		   curfrsthalfend=Integer.toString(Integer.parseInt(curfrsthalfend.substring(0, 2))+24)+curfrsthalfend.substring(2, 5);
	                	   }
	                	  
	                	  
			            if(punchtime.compareTo(curfrsthalfend)>=0 )
				        {
				        	intime.setMessage("S");
				        }
			            
			            }
			            if(pernrs.contains(empno+"I"))
		                {
			            	if(punchtime.compareTo(curfrsthalfend)>=0 )
					        {
			            	  intime.setStatus("O");
					        }
		                }
			            
			            curshftstart=actualcurshftstart;
			            curfrsthalfend=actualcurfrsthalfend;
			            cursechalfstart=actualcursechalfstart;
			        }
			        
			        if(curshftstart.compareTo(curfrsthalfend)>0)
	         	   {
	         		   curfrsthalfend=Integer.toString(Integer.parseInt(curfrsthalfend.substring(0, 2))+24)+curfrsthalfend.substring(2, 5);
	         		  cursechalfstart=Integer.toString(Integer.parseInt(cursechalfstart.substring(0, 2))+24)+cursechalfstart.substring(2, 5);
	         	   }
	           
			        if(punchtime.compareTo(curshftstart)>0  && punchtime.compareTo(curfrsthalfend)<0)
				        
			        {
			        	intime.setStatus("I");
			        	intime.setMessage("S");
			        	if(pernrs.contains(empno+"I"))
		                {
			            	
			            	  intime.setStatus("O");
					        
		               }
			        }
			        curfrsthalfend=actualcurfrsthalfend;
			        
			        
			        if(curshftend.substring(0, 2).equalsIgnoreCase("00"))
		        	   {
		        		  
			        	curshftend=Integer.toString(Integer.parseInt(curshftend.substring(0, 2))+24)+curshftend.substring(2, 5);
		        	
		        	   }
			       
			        if(cursechalfstart.substring(0, 2).equalsIgnoreCase("00"))
		        	   {
		        		  	
		        		   cursechalfstart=Integer.toString(Integer.parseInt(cursechalfstart.substring(0, 2))+24)+cursechalfstart.substring(2, 5);
		        	   }
			        
			        if(punchtime.compareTo(cursechalfstart)>0)
			        {
			        	if(punchtime.compareTo(cursechalfstart)>0 && punchtime.compareTo(curshftend)<0)
			        	{
			        		if(pernrs.contains(empno+"I"))
			                {
			        		 intime.setStatus("O");
					         intime.setMessage("S");
			                }
			        		else
			        		{
			        			intime.setStatus("I");
						         intime.setMessage("S");
			        		}
			        	}
			        	else
			        	{
			        		 intime.setStatus("O");
					         intime.setMessage("");
			        	}
			        }
			        curshftend=actualcurshftend;
			        cursechalfstart=actualcursechalfstart;
			              
			         intime.setId("Day"+filedateday);
			         intime.setTime(punchtime);
			         intime.setEmployeeNo(empno);
			         intime.setFrommonth(filedatemonth);
			         intime.setCalyear(filedateyear);
			         
			         
			         
			         
			         
	//punch valid till
			         if(prevpunchvalid.compareTo(curshftstart)<=0)
				     {
			         
			         if(punchtime.compareTo("00:00")>=0 && punchtime.compareTo(prevpunchvalid)<=0)
			         {

				        	int prevday=0;
				    		int prevmonth=0;
				    		int preyear=0;
				        	int tempfiledateday=0;
				 
				        	String actualpunch="";
							 
				            intime.setStatus("O");
				            actualpunch=punchtime;
				            if(curshftend.substring(0, 2).equalsIgnoreCase("00"))
				        	   {
				            	curshftend=Integer.toString(Integer.parseInt(curshftend.substring(0, 2))+24)+curshftend.substring(2, 5);
				        		  punchtime=Integer.toString(Integer.parseInt(punchtime.substring(0, 2))+24)+punchtime.substring(2, 5);
				        		  
				        	   }
				            if(punchtime.substring(0, 2).equalsIgnoreCase("00"))
				        	   {
				         
				        		  punchtime=Integer.toString(Integer.parseInt(punchtime.substring(0, 2))+24)+punchtime.substring(2, 5);
				        		  
				        	   }
				          
				            intime.setMessage("");
				            
				           
				            punchtime=actualpunch;
				           
				            tempfiledateday=filedateday-1;
				            if(tempfiledateday==0)
				    		{
				            		
				            	
				            	mycal = Calendar.getInstance();
				    			if(filedateday==Integer.parseInt(filedatemonth))
				    			{
				    			mycal.set(Integer.parseInt(filedateyear)-1, Integer.parseInt(filedatemonth)-2, 1);	
				    			prevmonth=12;
				    			preyear=Integer.parseInt(filedateyear)-1;
				    	
				    			}
				    			else
				    			{
				    			mycal.set(Integer.parseInt(filedateyear), Integer.parseInt(filedatemonth)-2, 1);	
				    			prevmonth=Integer.parseInt(filedatemonth)-1;
				    			preyear=Integer.parseInt(filedateyear);
				    		
				    			}
				    			int daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
				    			tempfiledateday=daysInMonth;
				    		
				            	
				    		}
				    		else
				    		{
				    			tempfiledateday=tempfiledateday;	
				    			prevmonth=Integer.parseInt(filedatemonth);
				    			preyear=Integer.parseInt(filedateyear);
				    		} 
				            intime.setId("Day"+tempfiledateday);	          
					         intime.setTime(punchtime);
					         intime.setFrommonth(Integer.toString(prevmonth));
					         intime.setCalyear(Integer.toString(preyear));
					         intime.setEmployeeNo(empno);
				          
				        
			         }
				     }
			         
			         
			         //////TS or SS1combined with FS
				        
				        if(prevshftend.equalsIgnoreCase(curshftstart))
				        {/*


				        	int prevday=0;
				    		int prevmonth=0;
				    		int preyear=0;
				        	int tempfiledateday=0;
				 
				        	String actualpunch="";
							 
				            intime.setStatus("O");
				            actualpunch=punchtime;
				            if(prevshftend.substring(0, 2).equalsIgnoreCase("00"))
				        	   {
				            	prevshftend=Integer.toString(Integer.parseInt(curshftend.substring(0, 2))+24)+curshftend.substring(2, 5);
				        		  punchtime=Integer.toString(Integer.parseInt(punchtime.substring(0, 2))+24)+punchtime.substring(2, 5);
				        		  
				        	   }
				          
				            intime.setMessage("");
				            
				           
				            punchtime=actualpunch;
				           
				            tempfiledateday=filedateday-1;
				            if(tempfiledateday==0)
				    		{
				            		
				            	
				            	mycal = Calendar.getInstance();
				    			if(filedateday==Integer.parseInt(filedatemonth))
				    			{
				    			mycal.set(Integer.parseInt(filedateyear)-1, Integer.parseInt(filedatemonth)-2, 1);	
				    			prevmonth=12;
				    			preyear=Integer.parseInt(filedateyear)-1;
				    	
				    			}
				    			else
				    			{
				    			mycal.set(Integer.parseInt(filedateyear), Integer.parseInt(filedatemonth)-2, 1);	
				    			prevmonth=Integer.parseInt(filedatemonth)-1;
				    			preyear=Integer.parseInt(filedateyear);
				    		
				    			}
				    			int daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
				    			tempfiledateday=daysInMonth;
				    		
				            	
				    		}
				    		else
				    		{
				    			tempfiledateday=tempfiledateday;	
				    			prevmonth=Integer.parseInt(filedatemonth);
				    			preyear=Integer.parseInt(filedateyear);
				    		} 
				            intime.setId("Day"+tempfiledateday);	          
					         intime.setTime(punchtime);
					         intime.setFrommonth(Integer.toString(prevmonth));
					         intime.setCalyear(Integer.toString(preyear));
					         intime.setEmployeeNo(empno);
				          
				        
			         
				        */}
			      }
	           if(curnightshift.equalsIgnoreCase("0")&&prevnightshift.equalsIgnoreCase("1"))
	           {
		     
	        	   String actualcurshftstart="";
	        	   String actualcurfrsthalfend="";
	        	   String actualcursechalfstart="";
	        	   String actualcurshftend="";
	        	   
	        	   actualcurshftstart=curshftstart;
	        	   actualcurfrsthalfend=curfrsthalfend;
	        	   actualcursechalfstart=cursechalfstart;
	        	   actualcurshftend=curshftend;
	        	   

	        	   if(curshftstart.substring(0, 2).equalsIgnoreCase("00"))
	        	   {
	        		  
	        		   curshftstart=Integer.toString(Integer.parseInt(curshftstart.substring(0, 2))+24)+curshftstart.substring(2, 5);
	        		   curfrsthalfend=Integer.toString(Integer.parseInt(curfrsthalfend.substring(0, 2))+24)+curfrsthalfend.substring(2, 5);
	        		   cursechalfstart=Integer.toString(Integer.parseInt(cursechalfstart.substring(0, 2))+24)+cursechalfstart.substring(2, 5);
	        	   }
	        	   if(prevpunchvalid.compareTo(curshftstart)<=0)
	    		     {
	        	   
		        if(punchtime.compareTo(prevpunchvalid)>0 && punchtime.compareTo(curshftstart)<=0 || punchtime.compareTo(curfrsthalfend)>=0 && punchtime.compareTo(cursechalfstart)<=0)
		        {
		            intime.setStatus("I");
		            
		            if(!curfrsthalfend.equalsIgnoreCase("00:00") && !cursechalfstart.equalsIgnoreCase("00:00") )
		            	
		            {
		            if(punchtime.compareTo(curfrsthalfend)>=0 )
			        {
			        	intime.setMessage("S");
			        }
		            }
		            if(pernrs.contains(empno+"I"))
	                {
		            	if(punchtime.compareTo(curfrsthalfend)>=0 )
				        {
		            	  intime.setStatus("O");
				        }
	                }
		            
		            intime.setId("Day"+filedateday);
			         intime.setTime(punchtime);
			         intime.setEmployeeNo(empno);
			         intime.setFrommonth(filedatemonth);
			         intime.setCalyear(filedateyear);
		            
			         curshftstart=actualcurshftstart;
			            curfrsthalfend=actualcurfrsthalfend;
			            cursechalfstart=actualcursechalfstart;
		        }
	    		     }
	        	   
	        	   if( punchtime.compareTo(curshftstart)<=0 || punchtime.compareTo(curfrsthalfend)>=0 && punchtime.compareTo(cursechalfstart)<=0)
	   	        {
	   	            intime.setStatus("I");
	   	            
	   	            if(!curfrsthalfend.equalsIgnoreCase("00:00") && !cursechalfstart.equalsIgnoreCase("00:00") )
	   	            	
	   	            {
	   	            if(punchtime.compareTo(curfrsthalfend)>=0 )
	   		        {
	   		        	intime.setMessage("S");
	   		        }
	   	            }
	   	            if(pernrs.contains(empno+"I"))
	                   {
	   	            	if(punchtime.compareTo(curfrsthalfend)>=0 )
	   			        {
	   	            	  intime.setStatus("O");
	   			        }
	                   }
	   	            
	   	            intime.setId("Day"+filedateday);
	   		         intime.setTime(punchtime);
	   		         intime.setEmployeeNo(empno);
	   		         intime.setFrommonth(filedatemonth);
	   		         intime.setCalyear(filedateyear);
	   	            
	   		         curshftstart=actualcurshftstart;
	   		            curfrsthalfend=actualcurfrsthalfend;
	   		            cursechalfstart=actualcursechalfstart;
	   	        }
	        	   
		        if(punchtime.compareTo(curshftstart)>0  && punchtime.compareTo(curfrsthalfend)<0)
		        {
		        	 intime.setStatus("I");
		        	 intime.setMessage("S");
		        	 if(pernrs.contains(empno+"I"))
		                {
			            	
			            	  intime.setStatus("O");
					        
		               }
		        	 
		        	 intime.setId("Day"+filedateday);
			         intime.setTime(punchtime);
			         intime.setEmployeeNo(empno);
			         intime.setFrommonth(filedatemonth);
			         intime.setCalyear(filedateyear);
		        }
		       
		        if(curshftend.substring(0, 2).equalsIgnoreCase("00"))
	        	   {
	        		  
		        	curshftend=Integer.toString(Integer.parseInt(curshftend.substring(0, 2))+24)+curshftend.substring(2, 5);
	        	
	        	   }
		        if(punchtime.compareTo(cursechalfstart)>0)
		        {
		        	if(punchtime.compareTo(cursechalfstart)>0 && punchtime.compareTo(curshftend)<0)
		        	{
		        		if(pernrs.contains(empno+"I"))
		                {
		        			   intime.setStatus("O");
		        		         intime.setMessage("S");
		        		         intime.setTime(punchtime);
		        		         intime.setId("Day"+filedateday);
		        		         intime.setFrommonth(filedatemonth);
		        		         intime.setCalyear(filedateyear);
		        		         intime.setEmployeeNo(empno);
		                }
		        		else
		        		{
		        			   intime.setStatus("I");
		        		         intime.setMessage("S");
		        		         intime.setTime(punchtime);
		        		         intime.setId("Day"+filedateday);
		        		         intime.setFrommonth(filedatemonth);
		        		         intime.setCalyear(filedateyear);
		        		         intime.setEmployeeNo(empno);
		        		}
		        	}
		        	else
		        	{
		        		  intime.setStatus("O");
		     	         intime.setMessage("");
		     	         intime.setTime(punchtime);
		     	         intime.setId("Day"+filedateday);
		     	         intime.setFrommonth(filedatemonth);
		     	         intime.setCalyear(filedateyear);
		     	         intime.setEmployeeNo(empno);
		        	}
		        }
		        curshftend=actualcurshftend;
		        curshftstart=actualcurshftstart;
	            curfrsthalfend=actualcurfrsthalfend;
	            cursechalfstart=actualcursechalfstart;
	            
	            //punch exceeds 24: but less than shiuft
	            
	            if(curshftend.substring(0, 2).equalsIgnoreCase("00"))
	        	   {
	        		  
		        	curshftend=Integer.toString(Integer.parseInt(curshftend.substring(0, 2))+24)+curshftend.substring(2, 5);
	        	
	        	   }
	            
	            
		    	
		        if(punchtime.compareTo(prevshftend)>=0 && punchtime.compareTo(prevpunchend)<=0 )
		        {
		        
		        	
		        	int prevday=0;
		    		int prevmonth=0;
		    		int preyear=0;
		        	int tempfiledateday=0;
		        	 date=new  HRApprovalForm();
		            intime.setStatus("O");
		            intime.setMessage("");
		            
		            tempfiledateday=filedateday-1;
		            if(tempfiledateday==0)
		    		{
		            		
		            	
		            	mycal = Calendar.getInstance();
		    			if(filedateday==Integer.parseInt(filedatemonth))
		    			{
		    			mycal.set(Integer.parseInt(filedateyear)-1, Integer.parseInt(filedatemonth)-2, 1);	
		    			prevmonth=12;
		    			preyear=Integer.parseInt(filedateyear)-1;
		    	
		    			}
		    			else
		    			{
		    			mycal.set(Integer.parseInt(filedateyear), Integer.parseInt(filedatemonth)-2, 1);	
		    			prevmonth=Integer.parseInt(filedatemonth)-1;
		    			preyear=Integer.parseInt(filedateyear);
		    		
		    			}
		    			int daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
		    			tempfiledateday=daysInMonth;
		    		
		            	
		    		}
		    		else
		    		{
		    			tempfiledateday=tempfiledateday;	
		    			prevmonth=Integer.parseInt(filedatemonth);
		    			preyear=Integer.parseInt(filedateyear);
		    		} 
		            intime.setId("Day"+tempfiledateday);	          
			         intime.setTime(punchtime);
			         intime.setFrommonth(Integer.toString(prevmonth));
			         intime.setCalyear(Integer.toString(preyear));
			         intime.setEmployeeNo(empno);
		          
		        }
		        else
		        {
	        
		         intime.setId("Day"+filedateday);
		         intime.setTime(punchtime);
		         intime.setFrommonth(filedatemonth);
		         intime.setCalyear(filedateyear);
		         intime.setEmployeeNo(empno);
		        }  
			        
		        
		      //only if punch in time exceeds 24;00
		        if(prevshftstart.substring(0, 2).equalsIgnoreCase("00"))
	        	   {
		        if(punchtime.compareTo(prevshftstart)>0  && punchtime.compareTo(prevfrsthalfend)<0)
			        
		        {
		        	intime.setStatus("I");
		        	 intime.setMessage("S");
		        	
		        	int prevday=0;
		    		int prevmonth=0;
		    		int preyear=0;
		        	int tempfiledateday=0;
		        	 date=new  HRApprovalForm();
		          
		 
		            tempfiledateday=filedateday-1;
		            if(tempfiledateday==0)
		    		{
	            		
	            	
	            	 mycal = Calendar.getInstance();
	    			if(filedateday==Integer.parseInt(filedatemonth))
	    			{
	    			mycal.set(Integer.parseInt(filedateyear)-1, Integer.parseInt(filedatemonth)-2, 1);	
	    			prevmonth=12;
	    			preyear=Integer.parseInt(filedateyear)-1;
	    	
	    			}
	    			else
	    			{
	    			mycal.set(Integer.parseInt(filedateyear), Integer.parseInt(filedatemonth)-2, 1);	
	    			prevmonth=Integer.parseInt(filedatemonth)-1;
	    			preyear=Integer.parseInt(filedateyear);
	    	
	    			}
	    			int daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
	    			tempfiledateday=daysInMonth;
	    		
	            	
	    		}
		    		else
		    		{
		    			tempfiledateday=tempfiledateday;	
		    			prevmonth=Integer.parseInt(filedatemonth);
		    			preyear=Integer.parseInt(filedateyear);
		    		}
		            
		            
		            intime.setId("Day"+tempfiledateday);	          
			         intime.setTime(punchtime);
			         intime.setFrommonth(Integer.toString(prevmonth));
			         intime.setCalyear(Integer.toString(preyear));
			         intime.setEmployeeNo(empno);
		        }
	        	   }
		        
		      //punchin time 24.00
				   if(curshftstart.substring(0, 2).equalsIgnoreCase("00"))
			        	   {
				        if( punchtime.compareTo(curshftstart)<=0 && punchtime.compareTo("00:00")>=0)
				        {
				        	intime.setStatus("I");
				        	 
				        	
				        	int prevday=0;
				    		int prevmonth=0;
				    		int preyear=0;
				        	int tempfiledateday=0;
				        	 date=new  HRApprovalForm();
				          
				 
				            tempfiledateday=filedateday-1;
				            if(tempfiledateday==0)
				    		{
			            		
			            	
			            	 mycal = Calendar.getInstance();
			    			if(filedateday==Integer.parseInt(filedatemonth))
			    			{
			    			mycal.set(Integer.parseInt(filedateyear)-1, Integer.parseInt(filedatemonth)-2, 1);	
			    			prevmonth=12;
			    			preyear=Integer.parseInt(filedateyear)-1;
			    	
			    			}
			    			else
			    			{
			    			mycal.set(Integer.parseInt(filedateyear), Integer.parseInt(filedatemonth)-2, 1);	
			    			prevmonth=Integer.parseInt(filedatemonth)-1;
			    			preyear=Integer.parseInt(filedateyear);
			    	
			    			}
			    			int daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
			    			tempfiledateday=daysInMonth;
			    		
			            	
			    		}
				    		else
				    		{
				    			tempfiledateday=tempfiledateday;	
				    			prevmonth=Integer.parseInt(filedatemonth);
				    			preyear=Integer.parseInt(filedateyear);
				    		}
				            
				            
				            intime.setId("Day"+tempfiledateday);	          
					         intime.setTime(punchtime);
					         intime.setFrommonth(Integer.toString(prevmonth));
					         intime.setCalyear(Integer.toString(preyear));
					         intime.setEmployeeNo(empno);
				        }
				        }
			      
		      ///punch valid
				   
				   
		        
		        if(!pernrs.contains(empno+"O"))
	            {
		        	 if(prevpunchvalid.compareTo(curshftstart)<=0)
				     {
		        	
		         if(punchtime.compareTo("00:00")>=0 && punchtime.compareTo(prevpunchvalid)<=0)
		         {

			        	int prevday=0;
			    		int prevmonth=0;
			    		int preyear=0;
			        	int tempfiledateday=0;
			        	  String actualprevshftend="";
			        	String actualpunch="";
						 
			            intime.setStatus("O");
			            actualpunch=punchtime;
			            actualprevshftend=prevshftend;
			            if(prevshftend.substring(0, 2).equalsIgnoreCase("00"))
			        	   {
			            	prevshftend=Integer.toString(Integer.parseInt(prevshftend.substring(0, 2))+24)+prevshftend.substring(2, 5);
			        		  punchtime=Integer.toString(Integer.parseInt(punchtime.substring(0, 2))+24)+punchtime.substring(2, 5);
			        		  
			        	   }
			            
			            if(punchtime.substring(0, 2).equalsIgnoreCase("00"))
			        	   {
			         
			        		  punchtime=Integer.toString(Integer.parseInt(punchtime.substring(0, 2))+24)+punchtime.substring(2, 5);
			        		  
			        	   }
			            if(punchtime.compareTo(prevshftend)<0)
				        {
				        	
				        	 intime.setMessage("S");
				        
				        }
			            else
			            {
			            intime.setMessage("");
			            }
			           
			            punchtime=actualpunch;
			            prevshftend=actualprevshftend;
			            tempfiledateday=filedateday-1;
			            if(tempfiledateday==0)
			    		{
			            		
			            	
			            	mycal = Calendar.getInstance();
			    			if(filedateday==Integer.parseInt(filedatemonth))
			    			{
			    			mycal.set(Integer.parseInt(filedateyear)-1, Integer.parseInt(filedatemonth)-2, 1);	
			    			prevmonth=12;
			    			preyear=Integer.parseInt(filedateyear)-1;
			    	
			    			}
			    			else
			    			{
			    			mycal.set(Integer.parseInt(filedateyear), Integer.parseInt(filedatemonth)-2, 1);	
			    			prevmonth=Integer.parseInt(filedatemonth)-1;
			    			preyear=Integer.parseInt(filedateyear);
			    		
			    			}
			    			int daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
			    			tempfiledateday=daysInMonth;
			    		
			            	
			    		}
			    		else
			    		{
			    			tempfiledateday=tempfiledateday;	
			    			prevmonth=Integer.parseInt(filedatemonth);
			    			preyear=Integer.parseInt(filedateyear);
			    		} 
			            intime.setId("Day"+tempfiledateday);	          
				         intime.setTime(punchtime);
				         intime.setFrommonth(Integer.toString(prevmonth));
				         intime.setCalyear(Integer.toString(preyear));
				         intime.setEmployeeNo(empno);
			          
			        
		         }
				     }
	            }
			       
		        
		        
		        //////TS or SS1combined with FS
		        
		        if(prevshftend.equalsIgnoreCase(curshftstart))
		        {


		        	int prevday=0;
		    		int prevmonth=0;
		    		int preyear=0;
		        	int tempfiledateday=0;
		 
		        	String actualpunch="";
					 
		            intime.setStatus("O");
		            actualpunch=punchtime;
		            if(prevshftend.substring(0, 2).equalsIgnoreCase("00"))
		        	   {
		            	prevshftend=Integer.toString(Integer.parseInt(curshftend.substring(0, 2))+24)+curshftend.substring(2, 5);
		        		  punchtime=Integer.toString(Integer.parseInt(punchtime.substring(0, 2))+24)+punchtime.substring(2, 5);
		        		  
		        	   }
		         
		            intime.setMessage("");
		            
		           
		            punchtime=actualpunch;
		           
		            tempfiledateday=filedateday-1;
		            if(tempfiledateday==0)
		    		{
		            		
		            	
		            	mycal = Calendar.getInstance();
		    			if(filedateday==Integer.parseInt(filedatemonth))
		    			{
		    			mycal.set(Integer.parseInt(filedateyear)-1, Integer.parseInt(filedatemonth)-2, 1);	
		    			prevmonth=12;
		    			preyear=Integer.parseInt(filedateyear)-1;
		    	
		    			}
		    			else
		    			{
		    			mycal.set(Integer.parseInt(filedateyear), Integer.parseInt(filedatemonth)-2, 1);	
		    			prevmonth=Integer.parseInt(filedatemonth)-1;
		    			preyear=Integer.parseInt(filedateyear);
		    		
		    			}
		    			int daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
		    			tempfiledateday=daysInMonth;
		    		
		            	
		    		}
		    		else
		    		{
		    			tempfiledateday=tempfiledateday;	
		    			prevmonth=Integer.parseInt(filedatemonth);
		    			preyear=Integer.parseInt(filedateyear);
		    		} 
		            intime.setId("Day"+tempfiledateday);	          
			         intime.setTime(punchtime);
			         intime.setFrommonth(Integer.toString(prevmonth));
			         intime.setCalyear(Integer.toString(preyear));
			         intime.setEmployeeNo(empno);
		          
		        
	         
		        }
		        
		        
	            }
			         
	           
	           if(curnightshift.equalsIgnoreCase("1")&&prevnightshift.equalsIgnoreCase("1"))
	           {
	        	   
	        	   String actualcurshftstart="";
	        	   String actualcurfrsthalfend="";
	        	   String actualcursechalfstart="";
	        	   String actualpunch="";
	        	   String actualcurshftend="";
	        	   actualcurshftstart=curshftstart;
	        	   actualcurfrsthalfend=curfrsthalfend;
	        	   actualcursechalfstart=cursechalfstart;
	        	   actualpunch=punchtime;
	        	   actualcurshftend=curshftend;
	        	   if(curshftstart.substring(0, 2).equalsIgnoreCase("00"))
	        	   {
	        		  
	        		   curshftstart=Integer.toString(Integer.parseInt(curshftstart.substring(0, 2))+24)+curshftstart.substring(2, 5);
	        		   curfrsthalfend=Integer.toString(Integer.parseInt(curfrsthalfend.substring(0, 2))+24)+curfrsthalfend.substring(2, 5);
	        		   cursechalfstart=Integer.toString(Integer.parseInt(cursechalfstart.substring(0, 2))+24)+cursechalfstart.substring(2, 5);
	        		   punchtime=Integer.toString(Integer.parseInt(punchtime.substring(0, 2))+24)+punchtime.substring(2, 5);
	        	   }
	        	   if(curshftstart.substring(0, 2).equalsIgnoreCase("24"))
	        	   {
			        if(punchtime.compareTo(prevpunchvalid)>0 && punchtime.compareTo(curshftstart)<=0 || punchtime.compareTo(curfrsthalfend)>=0 && punchtime.compareTo(cursechalfstart)<=0)
			        {
			            intime.setStatus("I");
			            
	                    if(!curfrsthalfend.equalsIgnoreCase("00:00") && !cursechalfstart.equalsIgnoreCase("00:00") )
			            	
			            {
	                    	
	                    	if(curshftstart.compareTo(curfrsthalfend)>0)
	                 	   {
	                 		   curfrsthalfend=Integer.toString(Integer.parseInt(curfrsthalfend.substring(0, 2))+24)+curfrsthalfend.substring(2, 5);
	                 	   }
	                    	
			            if(punchtime.compareTo(curfrsthalfend)>=0 )
				        {
				        	intime.setMessage("S");
				        }
			            }
			            if(pernrs.contains(empno+"I"))
		                {
			            	if(punchtime.compareTo(curfrsthalfend)>=0 )
					        {
			            	  intime.setStatus("O");
					        }
		                }
			            
			            intime.setId("Day"+filedateday);
				         intime.setTime(actualpunch);
				         intime.setFrommonth(filedatemonth);
				         intime.setCalyear(filedateyear);
				         intime.setEmployeeNo(empno);
				         
				         curshftstart=actualcurshftstart;
				            curfrsthalfend=actualcurfrsthalfend;
				            cursechalfstart=actualcursechalfstart;
				       
			        }
			        if(actualpunch.compareTo(prevpunchvalid)>0 && actualpunch.compareTo(curshftstart)<=0 || actualpunch.compareTo(curfrsthalfend)>=0 && actualpunch.compareTo(cursechalfstart)<=0)
			        {
			        	  intime.setStatus("I");
				            
		                    if(!curfrsthalfend.equalsIgnoreCase("00:00") && !cursechalfstart.equalsIgnoreCase("00:00") )
				            	
				            {
				            if(actualpunch.compareTo(curfrsthalfend)>=0 )
					        {
					        	intime.setMessage("S");
					        }
				            }
				            if(pernrs.contains(empno+"I"))
			                {
				            	if(actualpunch.compareTo(curfrsthalfend)>=0 )
						        {
				            	  intime.setStatus("O");
						        }
			                }
				            
				            intime.setId("Day"+filedateday);
					         intime.setTime(actualpunch);
					         intime.setFrommonth(filedatemonth);
					         intime.setCalyear(filedateyear);
					         intime.setEmployeeNo(empno);
					         
					         curshftstart=actualcurshftstart;
					            curfrsthalfend=actualcurfrsthalfend;
					            cursechalfstart=actualcursechalfstart;
			        }
			        
	        	   }
	        	   else
	        	   {
	        		   
	        		   if(prevpunchvalid.compareTo(curshftstart)<=0)
	      		     {
	        		   if(punchtime.compareTo(prevpunchvalid)>0 && punchtime.compareTo(curshftstart)<=0 || punchtime.compareTo(curfrsthalfend)>=0 && punchtime.compareTo(cursechalfstart)<=0)
	   		        {
	   		            intime.setStatus("I");
	   		            
	                       if(!curfrsthalfend.equalsIgnoreCase("00:00") && !cursechalfstart.equalsIgnoreCase("00:00") )
	   		            	
	   		            {
	                    	   
	                    	   if(curshftstart.compareTo(curfrsthalfend)>0)
	                     	   {
	                     		   curfrsthalfend=Integer.toString(Integer.parseInt(curfrsthalfend.substring(0, 2))+24)+curfrsthalfend.substring(2, 5);
	                     	   }
	                    	   
	   		            if(punchtime.compareTo(curfrsthalfend)>=0 )
	   			        {
	   			        	intime.setMessage("S");
	   			        }
	   		            }
	   		            if(pernrs.contains(empno+"I"))
	   	                {
	   		            	if(punchtime.compareTo(curfrsthalfend)>=0 )
	   				        {
	   		            	  intime.setStatus("O");
	   				        }
	   	                }
	   		            
	   		            intime.setId("Day"+filedateday);
	   			         intime.setTime(actualpunch);
	   			         intime.setFrommonth(filedatemonth);
	   			         intime.setCalyear(filedateyear);
	   			         intime.setEmployeeNo(empno);
	   			         
	   			         curshftstart=actualcurshftstart;
	   			            curfrsthalfend=actualcurfrsthalfend;
	   			            cursechalfstart=actualcursechalfstart;
	   			       
	   		        }
	        		  
	        	   }
	        		   actualcurfrsthalfend=curfrsthalfend;
	            	   if(curshftstart.compareTo(curfrsthalfend)>0)
	            	   {
	            		   curfrsthalfend=Integer.toString(Integer.parseInt(curfrsthalfend.substring(0, 2))+24)+curfrsthalfend.substring(2, 5);
	            	   }
	        		   
	        		   if( punchtime.compareTo(curshftstart)<=0 || punchtime.compareTo(curfrsthalfend)>=0 && punchtime.compareTo(cursechalfstart)<=0)
	      		        {
	      		            intime.setStatus("I");
	      		            
	                          if(!curfrsthalfend.equalsIgnoreCase("00:00") && !cursechalfstart.equalsIgnoreCase("00:00") )
	      		            	
	      		            {
	      		            if(punchtime.compareTo(curfrsthalfend)>=0 )
	      			        {
	      			        	intime.setMessage("S");
	      			        }
	      		            }
	      		            if(pernrs.contains(empno+"I"))
	      	                {
	      		            	if(punchtime.compareTo(curfrsthalfend)>=0 )
	      				        {
	      		            	  intime.setStatus("O");
	      				        }
	      	                }
	      		            
	      		            intime.setId("Day"+filedateday);
	      			         intime.setTime(actualpunch);
	      			         intime.setFrommonth(filedatemonth);
	      			         intime.setCalyear(filedateyear);
	      			         intime.setEmployeeNo(empno);
	      			         
	      			         curshftstart=actualcurshftstart;
	      			            curfrsthalfend=actualcurfrsthalfend;
	      			            cursechalfstart=actualcursechalfstart;
	      			       
	      		        }  
	        		   
	        		   curshftstart=actualcurshftstart;
				            curfrsthalfend=actualcurfrsthalfend;
				            cursechalfstart=actualcursechalfstart;
	        	   }
	        	   actualcurfrsthalfend=curfrsthalfend;
	        	   if(curshftstart.compareTo(curfrsthalfend)>0)
	        	   {
	        		   curfrsthalfend=Integer.toString(Integer.parseInt(curfrsthalfend.substring(0, 2))+24)+curfrsthalfend.substring(2, 5);
	        	   }
			        
			        if(actualpunch.compareTo(curshftstart)>0  && actualpunch.compareTo(curfrsthalfend)<0)
			        {
			        	 intime.setStatus("I");
			        	 intime.setMessage("S");
			        	 if(pernrs.contains(empno+"I"))
			                {
				            	
				            	  intime.setStatus("O");
						        
			               }
			        	 intime.setId("Day"+filedateday);
				         intime.setTime(actualpunch);
				         intime.setEmployeeNo(empno);
				         intime.setFrommonth(filedatemonth);
				         intime.setCalyear(filedateyear);
			        }
			        
			        curshftstart=actualcurshftstart;
			            curfrsthalfend=actualcurfrsthalfend;
			            cursechalfstart=actualcursechalfstart;
			        
			     
			        
			        
			        if(actualpunch.compareTo(prevshftend)>=0 && actualpunch.compareTo(prevpunchend)<=0 )
			        {
			        	int prevday=0;
			    		int prevmonth=0;
			    		int preyear=0;
			        	int tempfiledateday=0;
			        	 date=new  HRApprovalForm();
			            intime.setStatus("O");
			            intime.setMessage("");
			 
			            tempfiledateday=filedateday-1;
			            if(tempfiledateday==0)
			    		{
		            		
		            	
		            	 mycal = Calendar.getInstance();
		    			if(filedateday==Integer.parseInt(filedatemonth))
		    			{
		    			mycal.set(Integer.parseInt(filedateyear)-1, Integer.parseInt(filedatemonth)-2, 1);	
		    			prevmonth=12;
		    			preyear=Integer.parseInt(filedateyear)-1;
		    	
		    			}
		    			else
		    			{
		    			mycal.set(Integer.parseInt(filedateyear), Integer.parseInt(filedatemonth)-2, 1);	
		    			prevmonth=Integer.parseInt(filedatemonth)-1;
		    			preyear=Integer.parseInt(filedateyear);
		    	
		    			}
		    			int daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
		    			tempfiledateday=daysInMonth;
		    		
		            	
		    		}
			    		else
			    		{
			    			tempfiledateday=tempfiledateday;	
			    			prevmonth=Integer.parseInt(filedatemonth);
			    			preyear=Integer.parseInt(filedateyear);
			    		} 
			            intime.setId("Day"+tempfiledateday);	          
				         intime.setTime(actualpunch);
				         intime.setFrommonth(Integer.toString(prevmonth));
				         intime.setCalyear(Integer.toString(preyear));
				         intime.setEmployeeNo(empno);
			         
			        }
			        else
			        {
		        
			            intime.setId("Day"+filedateday);
				         intime.setTime(actualpunch);
				         intime.setFrommonth(filedatemonth);
				         intime.setCalyear(filedateyear);
				         intime.setEmployeeNo(empno);
			        } 
			        
			        //only if punch in time exceeds 24;00
			        if(prevshftstart.substring(0, 2).equalsIgnoreCase("00"))
		        	   {
			        if(actualpunch.compareTo(prevshftstart)>0  && actualpunch.compareTo(prevfrsthalfend)<0)
				        
			        {
			        	intime.setStatus("I");
			        	 intime.setMessage("S");
			        	
			        	int prevday=0;
			    		int prevmonth=0;
			    		int preyear=0;
			        	int tempfiledateday=0;
			        	 date=new  HRApprovalForm();
			          
			 
			            tempfiledateday=filedateday-1;
			            if(tempfiledateday==0)
			    		{
		            		
		            	
		            	 mycal = Calendar.getInstance();
		    			if(filedateday==Integer.parseInt(filedatemonth))
		    			{
		    			mycal.set(Integer.parseInt(filedateyear)-1, Integer.parseInt(filedatemonth)-2, 1);	
		    			prevmonth=12;
		    			preyear=Integer.parseInt(filedateyear)-1;
		    	
		    			}
		    			else
		    			{
		    			mycal.set(Integer.parseInt(filedateyear), Integer.parseInt(filedatemonth)-2, 1);	
		    			prevmonth=Integer.parseInt(filedatemonth)-1;
		    			preyear=Integer.parseInt(filedateyear);
		    	
		    			}
		    			int daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
		    			tempfiledateday=daysInMonth;
		    		
		            	
		    		}
			    		else
			    		{
			    			tempfiledateday=tempfiledateday;	
			    			prevmonth=Integer.parseInt(filedatemonth);
			    			preyear=Integer.parseInt(filedateyear);
			    		}
			            
			            
			            intime.setId("Day"+tempfiledateday);	          
				         intime.setTime(actualpunch);
				         intime.setFrommonth(Integer.toString(prevmonth));
				         intime.setCalyear(Integer.toString(preyear));
				         intime.setEmployeeNo(empno);
			        }
		        	   }
			      //punchin time 24.00
			   if(curshftstart.substring(0, 2).equalsIgnoreCase("00"))
		        	   {
			        if( actualpunch.compareTo(curshftstart)<=0 && actualpunch.compareTo("00:00")>=0)
			        {
			        	intime.setStatus("I");
			        	 
			        	
			        	int prevday=0;
			    		int prevmonth=0;
			    		int preyear=0;
			        	int tempfiledateday=0;
			        	 date=new  HRApprovalForm();
			          
			 
			            tempfiledateday=filedateday-1;
			            if(tempfiledateday==0)
			    		{
		            		
		            	
		            	 mycal = Calendar.getInstance();
		    			if(filedateday==Integer.parseInt(filedatemonth))
		    			{
		    			mycal.set(Integer.parseInt(filedateyear)-1, Integer.parseInt(filedatemonth)-2, 1);	
		    			prevmonth=12;
		    			preyear=Integer.parseInt(filedateyear)-1;
		    	
		    			}
		    			else
		    			{
		    			mycal.set(Integer.parseInt(filedateyear), Integer.parseInt(filedatemonth)-2, 1);	
		    			prevmonth=Integer.parseInt(filedatemonth)-1;
		    			preyear=Integer.parseInt(filedateyear);
		    	
		    			}
		    			int daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
		    			tempfiledateday=daysInMonth;
		    		
		            	
		    		}
			    		else
			    		{
			    			tempfiledateday=tempfiledateday;	
			    			prevmonth=Integer.parseInt(filedatemonth);
			    			preyear=Integer.parseInt(filedateyear);
			    		}
			            
			            
			            intime.setId("Day"+tempfiledateday);	          
				         intime.setTime(actualpunch);
				         intime.setFrommonth(Integer.toString(prevmonth));
				         intime.setCalyear(Integer.toString(preyear));
				         intime.setEmployeeNo(empno);
			        }
			        }
			        
			        
			        
			        ///punch valid
			        
			     if(prevpunchvalid.compareTo(curshftstart)<=0)
			     {
			         if(punchtime.compareTo("00:00")>=0 && punchtime.compareTo(prevpunchvalid)<=0)
			         {

				        	int prevday=0;
				    		int prevmonth=0;
				    		int preyear=0;
				        	int tempfiledateday=0;
				        	
				        	 if(!pernrs.contains(empno+"O"))
				                {
					            	
					            
				 
				            intime.setStatus("O");
				            
				            actualpunch=punchtime;
				            if(curshftend.substring(0, 2).equalsIgnoreCase("00"))
				        	   {
				            	curshftend=Integer.toString(Integer.parseInt(curshftend.substring(0, 2))+24)+curshftend.substring(2, 5);
				        		  punchtime=Integer.toString(Integer.parseInt(punchtime.substring(0, 2))+24)+punchtime.substring(2, 5);
				        		  
				        	   }
				            
				            if(punchtime.substring(0, 2).equalsIgnoreCase("00"))
				        	   {
				         
				        		  punchtime=Integer.toString(Integer.parseInt(punchtime.substring(0, 2))+24)+punchtime.substring(2, 5);
				        		  
				        	   }
				            if(punchtime.compareTo(curshftend)<0)
					        {
					        	
					        	 intime.setMessage("S");
					        
					        }
				            else
				            {
				            intime.setMessage("");
				            }
				           
				            punchtime=actualpunch;
				            tempfiledateday=filedateday-1;
				            if(tempfiledateday==0)
				    		{
				            		
				            	
				            	mycal = Calendar.getInstance();
				    			if(filedateday==Integer.parseInt(filedatemonth))
				    			{
				    			mycal.set(Integer.parseInt(filedateyear)-1, Integer.parseInt(filedatemonth)-2, 1);	
				    			prevmonth=12;
				    			preyear=Integer.parseInt(filedateyear)-1;
				    	
				    			}
				    			else
				    			{
				    			mycal.set(Integer.parseInt(filedateyear), Integer.parseInt(filedatemonth)-2, 1);	
				    			prevmonth=Integer.parseInt(filedatemonth)-1;
				    			preyear=Integer.parseInt(filedateyear);
				    		
				    			}
				    			int daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
				    			tempfiledateday=daysInMonth;
				    		
				            	
				    		}
				    		else
				    		{
				    			tempfiledateday=tempfiledateday;	
				    			prevmonth=Integer.parseInt(filedatemonth);
				    			preyear=Integer.parseInt(filedateyear);
				    		} 
			         
				        
				            intime.setId("Day"+tempfiledateday);	          
					         intime.setTime(actualpunch);
					         intime.setFrommonth(Integer.toString(prevmonth));
					         intime.setCalyear(Integer.toString(preyear));
					         intime.setEmployeeNo(empno);
			         }  
				        
			         }
	           }
			         pernrs=pernrs+","+empno+intime.getStatus();
			         
			         
			         
			         //////TS or SS1combined with FS
				        
				        if(prevshftend.equalsIgnoreCase(curshftstart))
				        {


				        	int prevday=0;
				    		int prevmonth=0;
				    		int preyear=0;
				        	int tempfiledateday=0;
				 
				        	 actualpunch="";
							 
				            intime.setStatus("O");
				            actualpunch=punchtime;
				            if(prevshftend.substring(0, 2).equalsIgnoreCase("00"))
				        	   {
				            	prevshftend=Integer.toString(Integer.parseInt(curshftend.substring(0, 2))+24)+curshftend.substring(2, 5);
				        		  punchtime=Integer.toString(Integer.parseInt(punchtime.substring(0, 2))+24)+punchtime.substring(2, 5);
				        		  
				        	   }
				           
				            intime.setMessage("");
				            
				           
				            punchtime=actualpunch;
				           
				            tempfiledateday=filedateday-1;
				            if(tempfiledateday==0)
				    		{
				            		
				            	
				            	mycal = Calendar.getInstance();
				    			if(filedateday==Integer.parseInt(filedatemonth))
				    			{
				    			mycal.set(Integer.parseInt(filedateyear)-1, Integer.parseInt(filedatemonth)-2, 1);	
				    			prevmonth=12;
				    			preyear=Integer.parseInt(filedateyear)-1;
				    	
				    			}
				    			else
				    			{
				    			mycal.set(Integer.parseInt(filedateyear), Integer.parseInt(filedatemonth)-2, 1);	
				    			prevmonth=Integer.parseInt(filedatemonth)-1;
				    			preyear=Integer.parseInt(filedateyear);
				    		
				    			}
				    			int daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
				    			tempfiledateday=daysInMonth;
				    		
				            	
				    		}
				    		else
				    		{
				    			tempfiledateday=tempfiledateday;	
				    			prevmonth=Integer.parseInt(filedatemonth);
				    			preyear=Integer.parseInt(filedateyear);
				    		} 
				            intime.setId("Day"+tempfiledateday);	          
					         intime.setTime(punchtime);
					         intime.setFrommonth(Integer.toString(prevmonth));
					         intime.setCalyear(Integer.toString(preyear));
					         intime.setEmployeeNo(empno);
				          
				        
			         
				        }
			
	           }
		
	
	           if(intime.getStatus()==null)
	           {
	        	   intime.setStatus("");
	        	   
	           }
	           if(intime.getStatus().equalsIgnoreCase("") )
	           {
	        	   miss.add(intime);
	           }
	           else
	           {
				    in.add(intime);
	           }
				
				    pernrs=pernrs+","+empno+intime.getStatus();
				    
				   
				  
				    }
				  rssempoffr.close();
				}
			      
		          if(!emptyshiftmaster.equalsIgnoreCase(""))
		          {
		         LinkedList abc= getofficaldetails(emptyshiftmaster.substring(1, emptyshiftmaster.length()),request);
		          }
		          
		          System.out.println("Empty Shift regsiter:------"+emptyshiftregister);
				   System.out.println("Empty Shift MAster:------"+emptyshiftmaster);
				   
				 //insert into transaction
				    
				  	String quer3="insert into ATTENDANCE_FILE_Upload_Tran values('"+filepath+"','"+cmpcode+"','"+user.getEmployeeNo()+"',getdate())";
				    int a3=ad.SqlExecuteUpdate(quer3);
				   
				}
				
				 aqq ="  update  Attendance_Process_log set fetch_et=getdate(),leave_st=getdate() "
							+ " where lock_id ='"+approvalsForm.getLock_id()+"' and (fetch_et is  null or fetch_et='')";
						kff11=ad.SqlExecuteUpdate(aqq); 
			
				///leaves onduty
				
				String lV_t="SELECT * FROM dbo.ExplodeDates('"+sqlfromdate+"','"+sqltodat+"') as thedate";
			    ResultSet rslV_t=ad.selectQuery(lV_t);
			    try {
					while(rslV_t.next())
					{
						
						String b[]=rslV_t.getString("thedate").split("-");
						
						String newfiledate= rslV_t.getString("thedate");
						String newfiledateday=b[2];
						int ondutyfiledateday=Integer.parseInt(b[2]);
						String newfiledatemonth=b[1];
						String newfiledateyear=b[0];
						 //leave 
				          leave=getempleave(newfiledate,ACtualemps, newfiledatemonth, newfiledateday,cmpcode);
				          allleave.addAll(leave);
				  	 
				         //onduty
				          onduty=getemponduty(newfiledate, ACtualemps, ondutyfiledateday,newfiledatemonth, newfiledateyear,cmpcode);
				          allonduty.addAll(onduty);
						
					}
			    }
		     catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
				
			    
			    aqq ="  update  Attendance_Process_log set leave_et=getdate(),punch_st=getdate(),progress=30 "
						+ " where lock_id ='"+approvalsForm.getLock_id()+"' and (leave_et is  null or leave_et='')";
					kff11=ad.SqlExecuteUpdate(aqq);
			    
			    //update punch records
				  updateAttendanceDetails(in,datelist);
				  
				  
				  
			
				  
				   aqq ="  update  Attendance_Process_log set punch_et=getdate(),manual_st=getdate(),progress=50 "
							+ " where lock_id ='"+approvalsForm.getLock_id()+"' and (punch_et is  null or punch_et='')";
						kff11=ad.SqlExecuteUpdate(aqq);
				  
				  if(miss.size()>0)
				  updateMissingAttendanceDetails(miss);
				    
				
					DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
					Calendar cal1 = Calendar.getInstance();							
					String datecurrent=dateFormat.format(cal1.getTime());
				  
				////insert empNos
					String insert="EXEC EMP_Split '"+(ACtualemps.replace(",", "$")).replace("'", "")+"','"+datecurrent+"' ";
					int bqb=ad.SqlExecuteUpdate(insert);	
					System.out.println(insert);
				  
				  
			        
					
					  
					  String man="SELECT * FROM dbo.ExplodeDates('"+sqlfromdate+"','"+sqltodat+"') as thedate";
					    ResultSet rsman=ad.selectQuery(man);
					    try {
							while(rsman.next())
							{
								
								String b[]=rsman.getString("thedate").split("-");
								
								String newfiledate= rsman.getString("thedate");
								int newfiledateday=Integer.parseInt(b[2]);
								String newfiledatemonth=b[1];
								String newfiledateyear=b[0];
									  ///late count update 
								//Check emp_inout status latecount flag it shoul be less than 3
								
								String manua="insert into  EMP_MANUAL_SWIPE(Pernr,Start_date,In_Out,Start,Lost_Entry_Reason_Type,Remarks,late_flag,Status_Flag)"
										+ "select EMP_IN_OUT.pernr,'"+newfiledate+"','I',EMP_IN_OUT.Day"+newfiledateday+",'Late','System Generated','1','1' from EMP_IN_OUT,EMP_IN_OUT_Status,EMP_Shift_Register,"
										+ "EMP_SHIFT_MASTER,emp_official_info where EMP_IN_OUT.Day"+newfiledateday+">EMP_SHIFT_MASTER.Shift_start_time and EMP_IN_OUT.day"+newfiledateday+"<=EMP_SHIFT_MASTER.Come_Late and  "
										+ "EMP_IN_OUT.Month="+newfiledatemonth+" and In_Out='I' and EMP_IN_OUT.year='"+newfiledateyear+"'and EMP_IN_OUT_Status.Pernr=EMP_IN_OUT.Pernr and "
										+ "EMP_IN_OUT_Status.Month=EMP_IN_OUT.Month and EMP_IN_OUT_Status.Year=EMP_IN_OUT.Year and Late_count<(select Late_count from Location where LOCATION_CODE='"+cmpcode+"') and "
										+ "EMP_Shift_Register.Pernr=EMP_IN_OUT.Pernr and EMP_Shift_Register.Month=EMP_IN_OUT.Month and EMP_Shift_Register.Year=EMP_IN_OUT.Year   "
										+ "and EMP_Shift_Register.Day"+newfiledateday+"=EMP_SHIFT_MASTER.Shift_code and emp_official_info.PERNR=EMP_IN_OUT_Status.Pernr and LOCID='"+cmpcode+"' and  left(EMP_IN_OUT_Status.day"+newfiledateday+",2)='AA'";						
										int ab=ad.SqlExecuteUpdate(manua);
										
										
													
										
										String late="update EMP_IN_OUT_Status set day"+newfiledateday+"='PP'+RIGHT(Day"+newfiledateday+",2),Late_count=Late_count+1 where left(day"+newfiledateday+",2)='AA' and Pernr in ("
												+ "select EMP_IN_OUT.pernr from EMP_IN_OUT,EMP_IN_OUT_Status,EMP_Shift_Register,"
												+ "EMP_SHIFT_MASTER,emp_official_info where EMP_IN_OUT.Day"+newfiledateday+">EMP_SHIFT_MASTER.Shift_start_time and EMP_IN_OUT.day"+newfiledateday+"<=EMP_SHIFT_MASTER.Come_Late and  "
												+ "EMP_IN_OUT.Month="+newfiledatemonth+" and In_Out='I' and EMP_IN_OUT.year='"+newfiledateyear+"'and EMP_IN_OUT_Status.Pernr=EMP_IN_OUT.Pernr and "
												+ "EMP_IN_OUT_Status.Month=EMP_IN_OUT.Month and EMP_IN_OUT_Status.Year=EMP_IN_OUT.Year and Late_count<(select Late_count from Location where LOCATION_CODE='"+cmpcode+"') and "
												+ "EMP_Shift_Register.Pernr=EMP_IN_OUT.Pernr and EMP_Shift_Register.Month=EMP_IN_OUT.Month and EMP_Shift_Register.Year=EMP_IN_OUT.Year   "
												+ "and EMP_Shift_Register.Day"+newfiledateday+"=EMP_SHIFT_MASTER.Shift_code and emp_official_info.PERNR=EMP_IN_OUT_Status.Pernr and LOCID='"+cmpcode+"' and left(EMP_IN_OUT_Status.day"+newfiledateday+",2)='AA')and Month="+newfiledatemonth+" and Year='"+newfiledateyear+"'";						
										int ab1=ad.SqlExecuteUpdate(late);	
								
								
								  String requesry="select distinct EMP_MANUAL_SWIPE.Start,EMP_IN_OUT.Pernr,EMP_IN_OUT.Day"+newfiledateday+" as d from"
											+ " EMP_MANUAL_SWIPE,EMP_IN_OUT,EMP_SHIFT_LATE_RULES,EMP_Shift_Register where Start_date =  '"+newfiledate+"' "
											+ "and EMP_IN_OUT.In_Out=EMP_MANUAL_SWIPE.In_Out and EMP_MANUAL_SWIPE.Pernr=EMP_IN_OUT.Pernr and EMP_MANUAL_SWIPE.In_Out='I' "
											+ "and EMP_IN_OUT.Month=EMP_Shift_Register.Month and EMP_MANUAL_SWIPE.Lost_Entry_Reason_Type not in ('Early','Personal') and EMP_IN_OUT.day"+newfiledateday+"!=start and "
											+ "EMP_IN_OUT.day"+newfiledateday+">Come_Late_by  and EMP_IN_OUT.day"+newfiledateday+">'00:00:00'  and EMP_Shift_Register.day"+newfiledateday+"=EMP_SHIFT_LATE_RULES.Rule_Code and"
											+ " EMP_Shift_Register.Pernr=EMP_IN_OUT.Pernr and  EMP_IN_OUT.Month="+newfiledatemonth+" and EMP_IN_OUT.Year='"+newfiledateyear+"'";
											
											ResultSet rsa=ad.selectQuery(requesry);
											while(rsa.next())
											{
											String up1="update EMP_IN_OUT set Day"+newfiledateday+"='"+rsa.getString("Start")+"' where Month="+newfiledatemonth+" and Year='"+newfiledateyear+"' and Pernr='"+rsa.getString("pernr")+"' and In_Out='I'";
											int ab5=ad.SqlExecuteUpdate(up1);
											
											String up2="update EMP_IN_OUT set Day"+newfiledateday+"='"+rsa.getString("d")+"' where Month="+newfiledatemonth+" and Year='"+newfiledateyear+"' and Pernr='"+rsa.getString("pernr")+"' and In_Out='O' and Day"+newfiledateday+"='00:00:00' ";
											int ab16=ad.SqlExecuteUpdate(up2);
													
											}
												
											rsa.close();
								
	                          //override all record which are in manual entry
								
							/*String overide="update EMP_IN_OUT set day"+newfiledateday+"=Start from EMP_MANUAL_SWIPE where EMP_MANUAL_SWIPE.In_Out=EMP_IN_OUT.In_Out and  EMP_IN_OUT.Month="+newfiledatemonth+" and EMP_IN_OUT.Year='"+newfiledateyear+"' and EMP_MANUAL_SWIPE.pernr=EMP_IN_OUT.Pernr and EMP_IN_OUT.Pernr in ("+ACtualemps+") and Start_date='"+rsman.getString("thedate")+"' and Status_Flag='1'";
								int ov=ad.SqlExecuteUpdate(overide);*/
											
											///update attendance Status =0 if biometri has punch in forgot swipe.
											
											String attoveride="update Permission_details set attendance_status=0 from  Permission_details,EMP_IN_OUT where EMP_IN_OUT.Month="+newfiledatemonth+" and "
													+ "EMP_IN_OUT.Year='"+newfiledateyear+"' and Permission_details.user_id=EMP_IN_OUT.Pernr and EMP_IN_OUT.Pernr in ("+ACtualemps+") and Permission_details.date='"+rsman.getString("thedate")+"'"
													+ " and EMP_IN_OUT.In_Out=case when swipe_type='In' then REPLACE(swipe_type,'In','I') else  REPLACE(swipe_type,'Out','O') end "
													+ " and Approver_Status=1  and day"+newfiledateday+"!='00:00:00' and Permission_details.type='Forgot Swipe'";
														   int ovj=ad.SqlExecuteUpdate(attoveride);
														   
										//only for ml14 new attendance logic
														   
								if(cmpcode.equalsIgnoreCase("ML00"))
								{
									if(repgrp!=null)
							    	{
							    	
							    		  if(repgrp.equalsIgnoreCase("10"))
							    		    {
											
						String overide="update EMP_IN_OUT set day"+newfiledateday+"=Start from EMP_MANUAL_SWIPE where EMP_MANUAL_SWIPE.In_Out=EMP_IN_OUT.In_Out and  EMP_IN_OUT.Month="+newfiledatemonth+" and EMP_IN_OUT.Year='"+newfiledateyear+"' and EMP_MANUAL_SWIPE.pernr=EMP_IN_OUT.Pernr and EMP_IN_OUT.Pernr in ("+ACtualemps+") and Start_date='"+rsman.getString("thedate")+"' and Status_Flag='1' and day"+newfiledateday+"='00:00:00'";
							int ov=ad.SqlExecuteUpdate(overide);
							    		    }
							    		  else
							    		  {
							    			//PM update only if timings are not der
												String overide="update EMP_IN_OUT set day"+newfiledateday+"=Start from EMP_MANUAL_SWIPE where EMP_MANUAL_SWIPE.In_Out=EMP_IN_OUT.In_Out and  EMP_IN_OUT.Month="+newfiledatemonth+" and EMP_IN_OUT.Year='"+newfiledateyear+"' and EMP_MANUAL_SWIPE.pernr=EMP_IN_OUT.Pernr and EMP_IN_OUT.Pernr in ("+ACtualemps+") and Start_date='"+rsman.getString("thedate")+"' and Status_Flag='1' and Lost_Entry_Reason_Type in ('Early','Personal')  and day"+newfiledateday+"='00:00:00' ";
												int ov=ad.SqlExecuteUpdate(overide);
												
											  //overide all if other than permission request
												String overide1="update EMP_IN_OUT set day"+newfiledateday+"=Start from EMP_MANUAL_SWIPE where EMP_MANUAL_SWIPE.In_Out=EMP_IN_OUT.In_Out and  EMP_IN_OUT.Month="+newfiledatemonth+" and EMP_IN_OUT.Year='"+newfiledateyear+"' and EMP_MANUAL_SWIPE.pernr=EMP_IN_OUT.Pernr and EMP_IN_OUT.Pernr in ("+ACtualemps+") and Start_date='"+rsman.getString("thedate")+"' and Status_Flag='1' and Lost_Entry_Reason_Type not in ('Early','Personal')   ";
												int ov1=ad.SqlExecuteUpdate(overide1);
							    		  }
								}
								else
								{
									//PM update only if timings are not der
									String overide="update EMP_IN_OUT set day"+newfiledateday+"=Start from EMP_MANUAL_SWIPE where EMP_MANUAL_SWIPE.In_Out=EMP_IN_OUT.In_Out and  EMP_IN_OUT.Month="+newfiledatemonth+" and EMP_IN_OUT.Year='"+newfiledateyear+"' and EMP_MANUAL_SWIPE.pernr=EMP_IN_OUT.Pernr and EMP_IN_OUT.Pernr in ("+ACtualemps+") and Start_date='"+rsman.getString("thedate")+"' and Status_Flag='1' and Lost_Entry_Reason_Type in ('Early','Personal')  and day"+newfiledateday+"='00:00:00' ";
									int ov=ad.SqlExecuteUpdate(overide);
									
								  //overide all if other than permission request
									String overide1="update EMP_IN_OUT set day"+newfiledateday+"=Start from EMP_MANUAL_SWIPE where EMP_MANUAL_SWIPE.In_Out=EMP_IN_OUT.In_Out and  EMP_IN_OUT.Month="+newfiledatemonth+" and EMP_IN_OUT.Year='"+newfiledateyear+"' and EMP_MANUAL_SWIPE.pernr=EMP_IN_OUT.Pernr and EMP_IN_OUT.Pernr in ("+ACtualemps+") and Start_date='"+rsman.getString("thedate")+"' and Status_Flag='1' and Lost_Entry_Reason_Type not in ('Early','Personal')   ";
									int ov1=ad.SqlExecuteUpdate(overide1);
								}
								}
								else
								{
									
									//PM update only if timings are not der
									String overide="update EMP_IN_OUT set day"+newfiledateday+"=Start from EMP_MANUAL_SWIPE where EMP_MANUAL_SWIPE.In_Out=EMP_IN_OUT.In_Out and  EMP_IN_OUT.Month="+newfiledatemonth+" and EMP_IN_OUT.Year='"+newfiledateyear+"' and EMP_MANUAL_SWIPE.pernr=EMP_IN_OUT.Pernr and EMP_IN_OUT.Pernr in ("+ACtualemps+") and Start_date='"+rsman.getString("thedate")+"' and Status_Flag='1' and Lost_Entry_Reason_Type in ('Early','Personal')  and day"+newfiledateday+"='00:00:00' ";
									int ov=ad.SqlExecuteUpdate(overide);
									
								  //overide all if other than permission request
									String overide1="update EMP_IN_OUT set day"+newfiledateday+"=Start from EMP_MANUAL_SWIPE where EMP_MANUAL_SWIPE.In_Out=EMP_IN_OUT.In_Out and  EMP_IN_OUT.Month="+newfiledatemonth+" and EMP_IN_OUT.Year='"+newfiledateyear+"' and EMP_MANUAL_SWIPE.pernr=EMP_IN_OUT.Pernr and EMP_IN_OUT.Pernr in ("+ACtualemps+") and Start_date='"+rsman.getString("thedate")+"' and Status_Flag='1' and Lost_Entry_Reason_Type not in ('Early','Personal')   ";
									int ov1=ad.SqlExecuteUpdate(overide1);
									
								}
								
								//PP i nempp_status manual swipe overide(I)
								String overidestatus="update EMP_IN_OUT_Status set day"+newfiledateday+"= 'PP'+RIGHT(day"+newfiledateday+",2) from EMP_MANUAL_SWIPE where   EMP_IN_OUT_Status.Month="+newfiledatemonth+" and EMP_IN_OUT_Status.Year='"+newfiledateyear+"' and EMP_MANUAL_SWIPE.pernr=EMP_IN_OUT_Status.Pernr and EMP_IN_OUT_Status.Pernr in ("+ACtualemps+") and Start_date='"+rsman.getString("thedate")+"' and Status_Flag='1' and Lost_Entry_Reason_Type in ('Forgot Swipe','Missing','Late','Special Approval','Mark Attendance') and EMP_MANUAL_SWIPE.In_Out='I'";
								int ove1=ad.SqlExecuteUpdate(overidestatus);
								
								//PP i nempp_status manual swipe overide (O)
								String wer="update EMP_IN_OUT_Status set day"+newfiledateday+"=LEFT(day"+newfiledateday+",2)+'PP'  from EMP_MANUAL_SWIPE where   EMP_IN_OUT_Status.Month="+newfiledatemonth+" and EMP_IN_OUT_Status.Year='"+newfiledateyear+"' and EMP_MANUAL_SWIPE.pernr=EMP_IN_OUT_Status.Pernr and EMP_IN_OUT_Status.Pernr in ("+ACtualemps+") and Start_date='"+rsman.getString("thedate")+"' and Status_Flag='1' and Lost_Entry_Reason_Type in ('Forgot Swipe','Missing','Late','Special Approval','Mark Attendance') and EMP_MANUAL_SWIPE.In_Out='O'";
								int ovefg1=ad.SqlExecuteUpdate(wer);
								
								//PM i nempp_status manual swipe overide
								String overidestatu1s="update EMP_IN_OUT_Status set day"+newfiledateday+"= 'PM'+RIGHT(day"+newfiledateday+",2)  from EMP_MANUAL_SWIPE where  EMP_IN_OUT_Status.Month="+newfiledatemonth+" and EMP_IN_OUT_Status.Year='"+newfiledateyear+"' and EMP_MANUAL_SWIPE.pernr=EMP_IN_OUT_Status.Pernr and EMP_IN_OUT_Status.Pernr in ("+ACtualemps+") and Start_date='"+rsman.getString("thedate")+"' and Status_Flag='1' and Lost_Entry_Reason_Type in ('Early','Personal') and EMP_MANUAL_SWIPE.In_Out='I'  and LEFT(day"+newfiledateday+",2)='AA'";
								int ove11=ad.SqlExecuteUpdate(overidestatu1s);
								
								//PM i nempp_status manual swipe overide
								String wersfd="update EMP_IN_OUT_Status set day"+newfiledateday+"= LEFT(day"+newfiledateday+",2)+'PM'  from EMP_MANUAL_SWIPE where  EMP_IN_OUT_Status.Month="+newfiledatemonth+" and EMP_IN_OUT_Status.Year='"+newfiledateyear+"' and EMP_MANUAL_SWIPE.pernr=EMP_IN_OUT_Status.Pernr and EMP_IN_OUT_Status.Pernr in ("+ACtualemps+") and Start_date='"+rsman.getString("thedate")+"' and Status_Flag='1' and Lost_Entry_Reason_Type in ('Early','Personal') and EMP_MANUAL_SWIPE.In_Out='O'  and RIGHT(day"+newfiledateday+",2)='AA'";
								int fgfg=ad.SqlExecuteUpdate(wersfd);
								
								//AA i nempp_status manual swipe overide
								String overidestatu3s="update EMP_IN_OUT_Status set day"+newfiledateday+"='AA'+RIGHT(day"+newfiledateday+",2)  from EMP_MANUAL_SWIPE where   EMP_IN_OUT_Status.Month="+newfiledatemonth+" and EMP_IN_OUT_Status.Year='"+newfiledateyear+"' and EMP_MANUAL_SWIPE.pernr=EMP_IN_OUT_Status.Pernr and EMP_IN_OUT_Status.Pernr in ("+ACtualemps+") and Start_date='"+rsman.getString("thedate")+"' and Status_Flag='1' and Lost_Entry_Reason_Type in ('Absent') and EMP_MANUAL_SWIPE.In_Out='I'";
								int ove12=ad.SqlExecuteUpdate(overidestatu3s);
								
								
								//AA i nempp_status manual swipe overide
								String tyrt="update EMP_IN_OUT_Status set day"+newfiledateday+"= LEFT(day"+newfiledateday+",2)+'AA'  from EMP_MANUAL_SWIPE where   EMP_IN_OUT_Status.Month="+newfiledatemonth+" and EMP_IN_OUT_Status.Year='"+newfiledateyear+"' and EMP_MANUAL_SWIPE.pernr=EMP_IN_OUT_Status.Pernr and EMP_IN_OUT_Status.Pernr in ("+ACtualemps+") and Start_date='"+rsman.getString("thedate")+"' and Status_Flag='1' and Lost_Entry_Reason_Type in ('Absent') and EMP_MANUAL_SWIPE.In_Out='O'";
								int gds=ad.SqlExecuteUpdate(tyrt);
								
								
								
								/////restore sum of manual entry count ot empstatus
									
									
									 String q2tf="EXEC Restorelatecount '"+sqlfromdate+"','"+sqltodat+"','"+ACtualemps.replace("'", "")+"' ";
										int kfhf1=ad.SqlExecuteUpdate(q2tf);	
												///compoff
							          compff=getcompoff(rsman.getString("thedate"), ACtualemps, filedateday,filedatemonth, filedateyear,cmpcode);
							          allcompff.addAll(compff);
									  ///manual entry update for 1st swip in OUT status
											  
							}
					  
							
							
					    } catch (SQLException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					  
				
					    rsman.close();
					
					    
					    aqq ="  update  Attendance_Process_log set manual_et=getdate(),week_st=getdate(),progress=60 "
								+ " where lock_id ='"+approvalsForm.getLock_id()+"' and (manual_et is  null or manual_et='')";
							kff11=ad.SqlExecuteUpdate(aqq);
					    
							
							
							
							String monName="";
					          
							
							 ///update working calendar
				        	
				        	
				        	Iterator daylist=caldatelist.iterator();
				        	 while(daylist.hasNext()) {
				        		 
				        	 HRApprovalForm abc=(HRApprovalForm)daylist.next();
				        		   
				        		   
				        		if (abc.getMonth().equals("1"))
				   	        		monName = "Jan";
				   	        	if (abc.getMonth().equals("2"))
				   	        		monName = "Feb";
				   	        	if (abc.getMonth().equals("3"))
				   	        		monName = "Mar";
				   	        	if (abc.getMonth().equals("4"))
				   	        		monName = "Apr";
				   	        	if (abc.getMonth().equals("5"))
				   	        		monName = "May";
				   	        	if (abc.getMonth().equals("6"))
				   	        		monName = "Jun";
				   	        	if (abc.getMonth().equals("7"))
				   	        		monName = "Jul";
				   	        	if (abc.getMonth().equals("8"))
				   	        		monName = "Aug";
				   	        	if (abc.getMonth().equals("9"))
				   	        		monName = "Sep";
				   	        	if (abc.getMonth().equals("10"))
				   	        		monName = "Oct";
				   	        	if (abc.getMonth().equals("11"))
				   	        		monName = "Nov";
				   	        	if (abc.getMonth().equals("12"))
				   	        		monName = "Dec";
				   			
				        		 
				        		 //emp cal list
				        		   String WOempcal="";
				        		   String SSempcal="";
				        		   String PHempcal="";
				        		   
				        		   //WO
				        		   String checkWOempcal="select distinct pernr from  emp_cal where DAY="+abc.getDay()+" and "+monName+"='WO' and CYEAR='"+abc.getYear()+"' and pernr in ("+ACtualemps+" )";
				        		   ResultSet WOrsempcal = ad.selectQuery(checkWOempcal);
				        		   while(WOrsempcal.next())
				        		   {
				        			   WOempcal=WOempcal+","+WOrsempcal.getString("pernr");
				        		   }
				        		   WOrsempcal.close();
				        	 if(!WOempcal.equalsIgnoreCase(""))
				        		 WOempcal=WOempcal.substring(1, WOempcal.length());
				        	 
				        	 
				        	 //SS
				        	   String checkSSempcal="select distinct pernr from  emp_cal where DAY="+abc.getDay()+" and "+monName+"='SS' and CYEAR='"+abc.getYear()+"' and pernr in ("+ACtualemps+" )";
			        		   ResultSet SSrsempcal = ad.selectQuery(checkSSempcal);
			        		   while(SSrsempcal.next())
			        		   {
			        			   SSempcal=SSempcal+","+SSrsempcal.getString("pernr");
			        		   }
			        		   SSrsempcal.close();
			        	 if(!SSempcal.equalsIgnoreCase(""))
			        		 SSempcal=SSempcal.substring(1, SSempcal.length());
			        	 
			        	 
			        	 //PH
			        	   String checkPHempcal="select distinct pernr from  emp_cal where DAY="+abc.getDay()+" and "+monName+"='PH' and CYEAR='"+abc.getYear()+"' and pernr in ("+ACtualemps+" )";
		        		   ResultSet PHrsempcal = ad.selectQuery(checkPHempcal);
		        		   while(PHrsempcal.next())
		        		   {
		        			   PHempcal=PHempcal+","+PHrsempcal.getString("pernr");
		        		   }
		        		   PHrsempcal.close();
		        	 if(!PHempcal.equalsIgnoreCase(""))
		        		 PHempcal=PHempcal.substring(1, PHempcal.length());	 
				        	 
				        	 //emp cal list
			      		   String allempcal="";
			      		   String allcheckempcal="select distinct pernr from  emp_cal where  CYEAR='"+abc.getYear()+"' and pernr in ("+ACtualemps+" )";
			      		   ResultSet allrsempcal = ad.selectQuery(allcheckempcal);
			      		   while(allrsempcal.next())
			      		   {
			      			 allempcal=allempcal+","+allrsempcal.getString("pernr");
			      		   }
			      		   allrsempcal.close();
			      	 if(!allempcal.equalsIgnoreCase(""))
			      		allempcal=allempcal.substring(1, allempcal.length());
			      	String check="";
				        	/*if(cmpcode.equalsIgnoreCase("ML15") || cmpcode.equalsIgnoreCase("ML27")){
				        		 check="select "+monName+" from emp_cal where DAY="+abc.getDay()+" and  CYEAR='"+abc.getYear()+"'  and pernr in ("+ACtualemps+" )";
					        	
				        	}else{*/
				        	 check="select "+monName+" from "+getTableName(cmpcode)+" where DAY="+abc.getDay()+" and  CYEAR='"+abc.getYear()+"'";
				        	
				        //	}
				        	ResultSet rs = ad.selectQuery(check);
				        	if(rs.next())
				        	{
				        		if(!rs.getString(1).equalsIgnoreCase("W"))
				        		{
				    	        	if(rs.getString(1).equalsIgnoreCase("PH")||rs.getString(1).equalsIgnoreCase("SH")||rs.getString(1).equalsIgnoreCase("SS"))
				    	        	{
				    	        		
				    	        		String prevvalue="";
				    	        		String predate="";
				    	        		String preMont="";
				    	        		String preYEAR="";
				    	        		
				    	        		String nextvalue="";
				    	        		String nextdate="";
				    	        		String nextMont="";
				    	        		String nextYEAR="";
				    	        		
				    	        		
				    	        		int startcount=1;
				    	        		do{
				    	        		 String[] reqmonth = {"","JAN", "FEB",
				    	       				  "MAR", "APR", "MAY", "JUN", "JUL",
				    	       				  "AUG", "SEP", "OCT", "NOV",
				    	       				  "DEC"
				    	       				  };
				    	        		String previday="";
										String previmonth="";
										String previyear="";
										
										
										
				    	        		
				    	        		String prwrk="Select day(DATEADD(DD, DATEDIFF(DY, 0, '"+abc.getYear()+"-"+abc.getMonth()+"-"+abc.getDay()+"'), -"+startcount+")) as prevday , month(DATEADD(DD, DATEDIFF(DY, 0, '"+abc.getYear()+"-"+abc.getMonth()+"-"+abc.getDay()+"'), -"+startcount+")) as prevmon,year(DATEADD(DD, DATEDIFF(DY, 0, '"+abc.getYear()+"-"+abc.getMonth()+"-"+abc.getDay()+"'), -"+startcount+")) as prevyear";
				    	        		  ResultSet rsprwrk=ad.selectQuery(prwrk);
				    					  while(rsprwrk.next())	    						 
				    						{
				    						  previday=rsprwrk.getString("prevday");
				    						  previmonth=rsprwrk.getString("prevmon");
				    						  previyear=rsprwrk.getString("prevyear");
				    						  
				    						  preMont=previmonth;
				    						  preYEAR=previyear;
				    						}
				    					  
				    					  rsprwrk.close();
				    	        		//get prev and next working day
				    	        	
				    	        		String nextwrk="select "+reqmonth[Integer.parseInt(previmonth)]+" as m,DAY from "+getTableName(cmpcode)+" where DAY="+previday+" and  CYEAR='"+previyear+"'";
				    	        		  ResultSet rstable=ad.selectQuery(nextwrk);
				    					  while(rstable.next())	    						 
				    						{
				    						  prevvalue=rstable.getString("m");
				    						  predate=rstable.getString("DAY");
				    						}
		                                   rstable.close();
				    					  startcount=startcount+1;
				    	        		
				    	        	}while(!prevvalue.equalsIgnoreCase("W"));
				    	        		
				    	        		int endcount=1;
				    	        		do{
					    	        		 String[] reqmonth = {"","JAN", "FEB",
					    	       				  "MAR", "APR", "MAY", "JUN", "JUL",
					    	       				  "AUG", "SEP", "OCT", "NOV",
					    	       				  "DEC"
					    	       				  };
					    	        
											
											String nextday="";
											String nextdaymonth="";
											String nextyear="";
											
										
					    	        		
											String prwrk="Select day(DATEADD(DD, DATEDIFF(DY, 0, '"+abc.getYear()+"-"+abc.getMonth()+"-"+abc.getDay()+"'), "+endcount+")) as nextday , month(DATEADD(DD, DATEDIFF(DY, 0, '"+abc.getYear()+"-"+abc.getMonth()+"-"+abc.getDay()+"'),"+endcount+" )) as nextmon,year(DATEADD(DD, DATEDIFF(DY, 0, '"+abc.getYear()+"-"+abc.getMonth()+"-"+abc.getDay()+"'), "+endcount+")) as nextyear";
					    	        		  ResultSet rsprwrk=ad.selectQuery(prwrk);
					    					  while(rsprwrk.next())	    						 
					    						{
					    						  nextday=rsprwrk.getString("nextday");
					    						  nextdaymonth=rsprwrk.getString("nextmon");
					    						  nextyear=rsprwrk.getString("nextyear");
					    						  
					    						  nextMont=nextdaymonth;
					    						  nextYEAR=nextyear;
					    						}
					    					  rsprwrk.close();
					    					  
					    	        		//get prev and next working day
					    	        	
					    	        		String nextwrk="select "+reqmonth[Integer.parseInt(nextdaymonth)]+" as m,DAY from "+getTableName(cmpcode)+" where DAY="+nextday+" and  CYEAR='"+nextyear+"'";
					    	        		  ResultSet rstable=ad.selectQuery(nextwrk);
					    					  while(rstable.next())	    						 
					    						{
					    						  nextvalue=rstable.getString("m");
					    						  nextdate=rstable.getString("DAY");
					    						}
					    					  rstable.close();
					    					  
					    					  endcount=endcount+1;
					    	        		
					    	        	}while(!nextvalue.equalsIgnoreCase("W"));
								 
			  	        		      System.out.println(predate+"-"+preMont+"-"+preYEAR);
				    	        		System.out.println(nextdate+"-"+nextMont+"-"+nextYEAR);
				    	        		
				    	        	
				    	        		

				    	        		String cal="update EMP_IN_OUT_Status set day"+abc.getDay()+"='"+rs.getString(1)+""+rs.getString(1)+"' where Month='"+abc.getMonth()+"' and Year='"+abc.getYear()+"' and Pernr in"
				    	        				+ " (select  pernr from EMP_IN_OUT_Status where month= '"+preMont+"' and Year= '"+preYEAR+"' and RIGHT(day"+predate+",2) not in ('AA','CL','SL','NL') and pernr in  "
				    	        			+ "(select pernr from Temp_Emp where Date_Time='"+datecurrent+"') union select  pernr from EMP_IN_OUT_Status where month= '"+nextMont+"' and Year= '"+nextYEAR+"'  and"
				    	        			+ " left(Day"+nextdate+",2) not in ('AA','CL','SL','NL') and pernr in ( select pernr from Temp_Emp where Date_Time='"+datecurrent+"'))";
					        	          int a=ad.SqlExecuteUpdate(cal)	;  
					        	          
					        	          
					        	        
				    	        	}
				    	        	else
				    	        	{
				    	        		if(allempcal.equalsIgnoreCase(""))
				    	        		{
				    	        		 String cal="update EMP_IN_OUT_Status set day"+abc.getDay()+"='"+rs.getString(1)+""+rs.getString(1)+"' where Month='"+abc.getMonth()+"' and Year='"+abc.getYear()+"' and Pernr in ("+ACtualemps+" )";
					        	          int a=ad.SqlExecuteUpdate(cal)	;   
				    	        		}
				    	        		else
				    	        		{
				    	        			String cal="update EMP_IN_OUT_Status set day"+abc.getDay()+"='"+rs.getString(1)+""+rs.getString(1)+"' where Month='"+abc.getMonth()+"' and Year='"+abc.getYear()+"' and pernr not in ("+allempcal+") and Pernr in ("+ACtualemps+" )";
						        	          int a=ad.SqlExecuteUpdate(cal)	;  
				    	        		}
				    	        	}
				        		}
				        	}
				        	
				        	rs.close();
				        	if(!WOempcal.equalsIgnoreCase(""))
				        	{
				        		String cal="update EMP_IN_OUT_Status set day"+abc.getDay()+"='WOWO' where Month='"+abc.getMonth()+"' and Year='"+abc.getYear()+"' and Pernr in ("+WOempcal+" )";
				        	           int a=ad.SqlExecuteUpdate(cal)	; 
				        			
				        	}
				        	if(!SSempcal.equalsIgnoreCase(""))
				        	{
				        		String cal="update EMP_IN_OUT_Status set day"+abc.getDay()+"='SSSS' where Month='"+abc.getMonth()+"' and Year='"+abc.getYear()+"' and Pernr in ("+SSempcal+" )";
				        	           int a=ad.SqlExecuteUpdate(cal)	; 
				        			
				        	}
				        	if(!PHempcal.equalsIgnoreCase(""))
				        	{
				        		String cal="update EMP_IN_OUT_Status set day"+abc.getDay()+"='PHPH' where Month='"+abc.getMonth()+"' and Year='"+abc.getYear()+"' and Pernr in ("+PHempcal+" )";
				        	           int a=ad.SqlExecuteUpdate(cal)	; 
				        			
				        	}
				        	
				        	 }
				        	 
				        
				        	 //weekoff reduction
				        	 
				        	 
				        	 String man1="SELECT * FROM dbo.ExplodeDates('"+sqlfromdate+"','"+sqltodat+"') as thedate";
							    ResultSet rsman1=ad.selectQuery(man1);
							    try {
									while(rsman1.next())
									{
										String b[]=rsman1.getString("thedate").split("-");
										
										String newfiledate= rsman1.getString("thedate");
										int newfiledateday=Integer.parseInt(b[2]);
										String newfiledatemonth=b[1];
										String newfiledateyear=b[0];
										
										String lastbutoneday="";
										String lastbutonemonth="";
										String lastbutoneyear="";
										
										String previday="";
										String previmonth="";
										String previyear="";
										
										String currday="";
										String currmonth="";
										String curryear="";
										
										String nextday="";
										String nextdaymonth="";
										String nextyear="";
										
										String days="Select day(DATEADD(DD, DATEDIFF(DY, 0, '"+newfiledate+"'), -2)) as lastbutoneday , month(DATEADD(DD, DATEDIFF(DY, 0, '"+newfiledate+"'), -2)) as lastbutonemonth,year(DATEADD(DD, DATEDIFF(DY, 0, '"+newfiledate+"'), -2)) as lastbutoneyear,"
												+ " day(DATEADD(DD, DATEDIFF(DY, 0, '"+newfiledate+"'), -1)) as prevday , month(DATEADD(DD, DATEDIFF(DY, 0, '"+newfiledate+"'), -1)) as prevmonth,year(DATEADD(DD, DATEDIFF(DY, 0, '"+newfiledate+"'), -1)) as prevyear,"
												+ "day(DATEADD(DD, DATEDIFF(DY, 0, '"+newfiledate+"'), 0)) as curday , month(DATEADD(DD, DATEDIFF(DY, 0, '"+newfiledate+"'), 0)) as curmonth,year(DATEADD(DD, DATEDIFF(DY, 0, '"+newfiledate+"'), 0)) as curyear, "
												+ "day(DATEADD(DD, DATEDIFF(DY, 0, '"+newfiledate+"'), 1)) as nextday , month(DATEADD(DD, DATEDIFF(DY, 0, '"+newfiledate+"'), 1)) as nextmonth,year(DATEADD(DD, DATEDIFF(DY, 0, '"+newfiledate+"'), 1)) as nextyear";
										ResultSet rs=ad.selectQuery(days);
										if(rs.next())
										{
											lastbutoneday=rs.getString("lastbutoneday");
											lastbutonemonth=rs.getString("lastbutonemonth");
											lastbutoneyear=rs.getString("lastbutoneyear");
											
											previday=rs.getString("prevday");
											previmonth=rs.getString("prevmonth");
											previyear=rs.getString("prevyear");
											
											currday=rs.getString("curday");
											currmonth=rs.getString("curmonth");
											curryear=rs.getString("curyear");
											
											 nextday=rs.getString("nextday");
											 nextdaymonth=rs.getString("nextmonth");
											 nextyear=rs.getString("nextyear");
											
											
										}
										
										
										rs.close();
										if(previmonth.equalsIgnoreCase(currmonth))
										{
											String same="update EMP_IN_OUT_Status set Day"+newfiledateday+"=t.Output from (select * from EMP_IN_OUT_Status,WeekOff_Matrix where  "
						+ "(right(Day"+previday+",2) like WeekOff_Matrix.Value1 and Day"+newfiledateday+" = WeekOff_Matrix.Value2 and left(Day"+nextday+",2) like WeekOff_Matrix.Value3)and Month='"+currmonth+"' and year='"+curryear+"'"
						+ " and Pernr in (select pernr from Temp_Emp where Date_Time='"+datecurrent+"'))t where  EMP_IN_OUT_Status.Pernr=t.Pernr and EMP_IN_OUT_Status.Pernr in (select pernr from Temp_Emp where Date_Time='"+datecurrent+"') and EMP_IN_OUT_Status.Month='"+currmonth+"' and EMP_IN_OUT_Status.year='"+curryear+"'";
											int aa=ad.SqlExecuteUpdate(same);
											
											
											//sec sat
											
											
											String secsat="update EMP_IN_OUT_Status set Day"+previday+"=t.Output,Day"+newfiledateday+"=t.Output from "
									+ "(select * from EMP_IN_OUT_Status,WeekOff_Matrix where(right(Day"+lastbutoneday+",2) like WeekOff_Matrix.Value1 and Day"+previday+" = WeekOff_Matrix.Value4 and Day"+newfiledateday+" = WeekOff_Matrix.Value2 and left(Day"+nextday+",2)"
									+ " like WeekOff_Matrix.Value3)and Month='"+currmonth+"' and year='"+curryear+"' and Pernr in ("+ACtualemps+"))t where EMP_IN_OUT_Status.Pernr=t.Pernr and  EMP_IN_OUT_Status.Pernr in (select pernr from Temp_Emp where Date_Time='"+datecurrent+"') and EMP_IN_OUT_Status.Month='"+currmonth+"' and EMP_IN_OUT_Status.year='"+curryear+"'";					
											int cc=ad.SqlExecuteUpdate(secsat);
										}
										
										
										if(previmonth.compareTo(currmonth)<0)
										{
											String prev="update EMP_IN_OUT_Status set Day"+newfiledateday+"=WeekOff_Matrix.Output from(select pernr,day"+previday+" from EMP_IN_OUT_Status where "
													+ " Month='"+previmonth+"' and year='"+previyear+"'  and EMP_IN_OUT_Status.Pernr in (select pernr from Temp_Emp where Date_Time='"+datecurrent+"') )t, "
													+ "(select Pernr,day"+newfiledateday+",day"+nextday+" from EMP_IN_OUT_Status where    Month='"+currmonth+"' and year='"+curryear+"' and EMP_IN_OUT_Status.Pernr in"
													+ " (select pernr from Temp_Emp where Date_Time='"+datecurrent+"'))l,WeekOff_Matrix where t.pernr=l.Pernr and  EMP_IN_OUT_Status.Pernr=l.Pernr and"
													+ " EMP_IN_OUT_Status.Pernr in (select pernr from Temp_Emp where Date_Time='"+datecurrent+"') and EMP_IN_OUT_Status.Month='"+currmonth+"' and EMP_IN_OUT_Status.year='"+curryear+"' "
													+ "and WeekOff_Matrix.Value1=right(t.Day"+previday+",2) and WeekOff_Matrix.Value2=l.Day"+newfiledateday+" and WeekOff_Matrix.Value3=left(l.Day"+nextday+",2)";	
											
											int bb=ad.SqlExecuteUpdate(prev);	
										}
										
										if(currmonth.compareTo(nextdaymonth)<0)
										{
											
											String next="update EMP_IN_OUT_Status set Day"+newfiledateday+"=WeekOff_Matrix.Output from (select pernr,day"+previday+",day"+newfiledateday+" from EMP_IN_OUT_Status where  Month='"+currmonth+"'"
									+ " and year='"+curryear+"'  and EMP_IN_OUT_Status.Pernr in (select pernr from Temp_Emp where Date_Time='"+datecurrent+"') )t, (select Pernr,day"+nextday+" from EMP_IN_OUT_Status where    "
									+ "Month='"+nextdaymonth+"' and year='"+nextyear+"' and EMP_IN_OUT_Status.Pernr in (select pernr from Temp_Emp where Date_Time='"+datecurrent+"'))l,WeekOff_Matrix where t.pernr=l.Pernr and  "
									+ "EMP_IN_OUT_Status.Pernr=l.Pernr and EMP_IN_OUT_Status.Pernr in (select pernr from Temp_Emp where Date_Time='"+datecurrent+"') and EMP_IN_OUT_Status.Month='"+currmonth+"' and"
								+ " EMP_IN_OUT_Status.year='"+curryear+"' and WeekOff_Matrix.Value1=right(t.Day"+previday+",2) and WeekOff_Matrix.Value2=t.Day"+newfiledateday+" and WeekOff_Matrix.Value3=left(l.Day"+nextday+",2)";
											
											int ll=ad.SqlExecuteUpdate(next);
										}
									}
							    } catch (SQLException e1) {
									// TODO Auto-generated catch block
									e1.printStackTrace();
								}
							    rsman1.close();
							    
							    ///system generated manaul entry							    
							    String eman="SELECT * FROM dbo.ExplodeDates('"+sqlfromdate+"','"+sqltodat+"') as thedate";
							    ResultSet ersman=ad.selectQuery(eman);
							    try {
									while(ersman.next())
									{
										String b[]=ersman.getString("thedate").split("-");
										
										String newfiledate= ersman.getString("thedate");
										int newfiledateday=Integer.parseInt(b[2]);
										String newfiledatemonth=b[1];
										String newfiledateyear=b[0];
											  ///late count update 
										//Check emp_inout status latecount flag it shoul be less than 3
										
										String manua="insert into  EMP_MANUAL_SWIPE(Pernr,Start_date,In_Out,Start,Lost_Entry_Reason_Type,Remarks,late_flag,Status_Flag)"
										+ "select EMP_IN_OUT.pernr,'"+newfiledate+"','I',EMP_IN_OUT.Day"+newfiledateday+",'Late','System Generated','1','1' from EMP_IN_OUT,EMP_IN_OUT_Status,EMP_Shift_Register,"
										+ "EMP_SHIFT_MASTER,emp_official_info where EMP_IN_OUT.Day"+newfiledateday+">EMP_SHIFT_MASTER.Shift_start_time and EMP_IN_OUT.day"+newfiledateday+"<=EMP_SHIFT_MASTER.Come_Late and  "
										+ "EMP_IN_OUT.Month="+newfiledatemonth+" and In_Out='I' and EMP_IN_OUT.year='"+newfiledateyear+"'and EMP_IN_OUT_Status.Pernr=EMP_IN_OUT.Pernr and "
										+ "EMP_IN_OUT_Status.Month=EMP_IN_OUT.Month and EMP_IN_OUT_Status.Year=EMP_IN_OUT.Year and Late_count<(select Late_count from Location where LOCATION_CODE='"+cmpcode+"') and "
										+ "EMP_Shift_Register.Pernr=EMP_IN_OUT.Pernr and EMP_Shift_Register.Month=EMP_IN_OUT.Month and EMP_Shift_Register.Year=EMP_IN_OUT.Year   "
										+ "and EMP_Shift_Register.Day"+newfiledateday+"=EMP_SHIFT_MASTER.Shift_code and emp_official_info.PERNR=EMP_IN_OUT_Status.Pernr and LOCID='"+cmpcode+"' and  left(EMP_IN_OUT_Status.day"+newfiledateday+",2)='AA'";						
										int ab=ad.SqlExecuteUpdate(manua);
										
										
													
										
										String late="update EMP_IN_OUT_Status set day"+newfiledateday+"='PP'+RIGHT(Day"+newfiledateday+",2),Late_count=Late_count+1 where left(day"+newfiledateday+",2)='AA' and Pernr in ("
												+ "select EMP_IN_OUT.pernr from EMP_IN_OUT,EMP_IN_OUT_Status,EMP_Shift_Register,"
												+ "EMP_SHIFT_MASTER,emp_official_info where EMP_IN_OUT.Day"+newfiledateday+">EMP_SHIFT_MASTER.Shift_start_time and EMP_IN_OUT.day"+newfiledateday+"<=EMP_SHIFT_MASTER.Come_Late and  "
												+ "EMP_IN_OUT.Month="+newfiledatemonth+" and In_Out='I' and EMP_IN_OUT.year='"+newfiledateyear+"'and EMP_IN_OUT_Status.Pernr=EMP_IN_OUT.Pernr and "
												+ "EMP_IN_OUT_Status.Month=EMP_IN_OUT.Month and EMP_IN_OUT_Status.Year=EMP_IN_OUT.Year and Late_count<(select Late_count from Location where LOCATION_CODE='"+cmpcode+"') and "
												+ "EMP_Shift_Register.Pernr=EMP_IN_OUT.Pernr and EMP_Shift_Register.Month=EMP_IN_OUT.Month and EMP_Shift_Register.Year=EMP_IN_OUT.Year   "
												+ "and EMP_Shift_Register.Day"+newfiledateday+"=EMP_SHIFT_MASTER.Shift_code and emp_official_info.PERNR=EMP_IN_OUT_Status.Pernr and LOCID='"+cmpcode+"' and left(EMP_IN_OUT_Status.day"+newfiledateday+",2)='AA')and Month="+newfiledatemonth+" and Year='"+newfiledateyear+"'";						
										int ab1=ad.SqlExecuteUpdate(late);	
										
										
										
										/////restore sum of manual entry count ot empstatus
										
										
										 String q2tf="EXEC Restorelatecount '"+sqlfromdate+"','"+sqltodat+"','"+ACtualemps.replace("'", "")+"' ";
											int kfhf1=ad.SqlExecuteUpdate(q2tf);
									}
							    } catch (SQLException e1) {
									// TODO Auto-generated catch block
									e1.printStackTrace();
								}
							    ersman.close();
							    
							    
							    aqq ="  update  Attendance_Process_log set week_et=getdate(),rep_st=getdate(),progress=80 "
										+ " where lock_id ='"+approvalsForm.getLock_id()+"' and (week_et is  null or week_et='')";
									kff11=ad.SqlExecuteUpdate(aqq);
	
						
			  ///last 2 months reports wise table generation
			  
			  String m="Select day(dateadd(mm,DateDiff(mm, -1, '"+sqltodat+"'),0) -1) as days1 , month('"+sqltodat+"') as month1 ,year('"+sqltodat+"') as year1 ,"
	+ "day(dateadd(mm,DateDiff(mm, -1, DATEADD(MONTH, -1, '"+sqltodat+"') ),0) -1) as days2 , month(DATEADD(MONTH, -1, '"+sqltodat+"') ) as month2 ,year(DATEADD(MONTH, -1, '"+sqltodat+"') ) as year2 "
	+ ", day(dateadd(mm,DateDiff(mm, -1, DATEADD(MONTH, -2, '"+sqltodat+"') ),0) -1) as days3 , month(DATEADD(MONTH, -2, '"+sqltodat+"') ) as month3 ,year(DATEADD(MONTH, -2, '"+sqltodat+"') ) as year3 ";
			  
			 ResultSet rsas=ad.selectQuery(m);
			 if(rsas.next())
			 {
				 if(reqemp.equalsIgnoreCase(""))
				 {
				 String q2="EXEC daily_report_status '"+rsas.getString("days1")+"','"+rsas.getString("month1")+"','"+rsas.getString("year1")+"','"+cmpcode+"','"+datecurrent+"' ";
					int k1=ad.SqlExecuteUpdate(q2);
					
					 String q12=" EXEC daily_report_status '"+rsas.getString("days2")+"','"+rsas.getString("month2")+"','"+rsas.getString("year2")+"','"+cmpcode+"','"+datecurrent+"'";
						int k12=ad.SqlExecuteUpdate(q12);	
						
					/*	
						String q21=" EXEC daily_report_status '"+rsas.getString("days3")+"','"+rsas.getString("month3")+"','"+rsas.getString("year3")+"','"+cmpcode+"','"+datecurrent+"'";
						int k31=ad.SqlExecuteUpdate(q21);*/
						
	//First half Late
						
						String late="update Report_Daily_wise set late = convert(nvarchar(10),floor(datediff(minute,Come_Late_by,In_time)/60))+':'+convert(nvarchar(10),"
					+ "datediff(minute,Come_Late_by,In_time)%60) from EMP_SHIFT_LATE_RULES ,EMP_SHIFT_MASTER where  EMP_SHIFT_MASTER.Shift_code = EMP_SHIFT_LATE_RULES.Rule_Code   "
					+ "   and  Report_Daily_wise.Shift=EMP_SHIFT_LATE_RULES.Rule_Code  and In_time>Come_Late_by and In_time < First_Half_End_Time and Location='"+cmpcode+"' "
					+ "and Report_Daily_wise.Date between DATEADD(MONTH,-4,'"+sqltodat+"') and DATEADD(MONTH,1,'"+sqltodat+"')";			 
						int klate=ad.SqlExecuteUpdate(late);
						
						/*//Second half Late
						
						String slate="update Report_Daily_wise set late = convert(nvarchar(10),floor(datediff(minute,SH_Start_Time,In_time)/60))+':'+convert(nvarchar(10),	"
					+ "datediff(minute,SH_Start_Time,In_time)%60) from EMP_SHIFT_LATE_RULES ,EMP_SHIFT_MASTER where  EMP_SHIFT_MASTER.Shift_code = EMP_SHIFT_LATE_RULES.Rule_Code"
					+ "  and  Report_Daily_wise.Shift=EMP_SHIFT_LATE_RULES.Rule_Code  and  In_time > SH_Start_Time and SH_Start_Time>'00:00' and Location='"+cmpcode+"' and "
					+ "month(Report_Daily_wise.Date) between Month(DATEADD(MONTH,-4,'"+sqltodat+"')) and Month(DATEADD(MONTH,0,'"+sqltodat+"'))";		 
									int sqlate=ad.SqlExecuteUpdate(slate);*/
									
						///go early by 		
									
					String early="update Report_Daily_wise set early= convert(nvarchar(10),floor(datediff(minute,Out_time,Go_Early_by)/60))+':'+convert(nvarchar(10),"
			+ "datediff(minute,Out_time,Go_Early_by)%60) from EMP_SHIFT_LATE_RULES ,EMP_SHIFT_MASTER	where  EMP_SHIFT_MASTER.Shift_code = EMP_SHIFT_LATE_RULES.Rule_Code  "
			+ "   and  Report_Daily_wise.Shift=EMP_SHIFT_LATE_RULES.Rule_Code  and Out_time < Go_Early_by and Out_time > SH_Start_Time   and Location='"+cmpcode+"'"
			+ " and Report_Daily_wise.Date between DATEADD(MONTH,-4,'"+sqltodat+"') and DATEADD(MONTH,1,'"+sqltodat+"')";				
					int earsly=ad.SqlExecuteUpdate(early);			
					
					
					//Total hrs
						
					
					String tot="update Report_Daily_wise set total=case  when datediff(minute,In_time,Out_time)>0 then  convert(nvarchar(10),floor(datediff(minute,In_time,Out_time)/60))+':'+convert(nvarchar(10),datediff(minute,In_time,Out_time)%60) else convert(nvarchar(10),floor(datediff(minute,cast(In_time as DATETIME),dateadd(day,1,cast(Out_time as DATETIME)))/60))+':'+convert(nvarchar(10),datediff(minute,cast(In_time as DATETIME),dateadd(day,1,cast(Out_time as DATETIME)))%60) end "
							+ "from EMP_SHIFT_LATE_RULES ,EMP_SHIFT_MASTER	where  EMP_SHIFT_MASTER.Shift_code = EMP_SHIFT_LATE_RULES.Rule_Code "
							+ "  and  Report_Daily_wise.Shift=EMP_SHIFT_LATE_RULES.Rule_Code 	and Location='"+cmpcode+"' and Report_Daily_wise.Date"
							+ " between DATEADD(MONTH,-4,'"+sqltodat+"') and DATEADD(MONTH,1,'"+sqltodat+"') and Total is null and In_time>'00:00:00' and Out_time>'00:00:00'";
							int rr=ad.SqlExecuteUpdate(tot);		
							
							/*
								if(cmpcode.equalsIgnoreCase("ML12")){
								
								String totalwork="";
								String flate="";
								String Loc="select * from Location where LOCATION_CODE='"+cmpcode+"'";
								ResultSet fs10 = ad.selectQuery(Loc);
								while (fs10.next()) {
									totalwork=fs10.getString("Ftotal");
									flate=fs10.getString("Flate");
								}
								String flexs="update Report_Daily_wise set  Status='PPPP'where Location='"+cmpcode+"' "
												+ "and Report_Daily_wise.Date between DATEADD(MONTH,-4,'"+sqltodat+"') and DATEADD(MONTH,1,'"+sqltodat+"') and CONVERT( TIME, Report_Daily_wise.Total) >='"+totalwork+"' and  CONVERT( TIME, Report_Daily_wise.Late)<='"+flate+"'";
								int fx=ad.SqlExecuteUpdate(flexs);	
							
							}*/
							
							
							
				///OT HRS FULL TIME
							
							String otful="update Report_Daily_wise set OT=convert(nvarchar(10),floor((case when t.min<(case  when datediff(minute,In_time,Out_time)>0 then"
	+ " convert(nvarchar(10),datediff(minute,In_time,Out_time))-EMP_SHIFT_MASTER.OT_FULL else convert(nvarchar(10),datediff(minute,cast(In_time as DATETIME),"
	+ " dateadd(day,1,cast(Out_time as DATETIME)))) -EMP_SHIFT_MASTER.OT_FULL end)  then t.min  else (case  when datediff(minute,In_time,Out_time)>0 then  "
	+ "convert(nvarchar(10),datediff(minute,In_time,Out_time))-EMP_SHIFT_MASTER.OT_FULL else convert(nvarchar(10),datediff(minute,cast(In_time as DATETIME), "
	+ "dateadd(day,1,cast(Out_time as DATETIME)))) -EMP_SHIFT_MASTER.OT_FULL end)end)/60))+':'+ convert(nvarchar(10),(case when t.min<(case  when "
	+ "datediff(minute,In_time,Out_time)>0 then convert(nvarchar(10),datediff(minute,In_time,Out_time))-EMP_SHIFT_MASTER.OT_FULL else "
	+ "convert(nvarchar(10),datediff(minute,cast(In_time as DATETIME), dateadd(day,1,cast(Out_time as DATETIME)))) -EMP_SHIFT_MASTER.OT_FULL end)  then t.min   "
	+ " else (case  when datediff(minute,In_time,Out_time)>0 then  convert(nvarchar(10),datediff(minute,In_time,Out_time))-EMP_SHIFT_MASTER.OT_FULL else "
	+ "convert(nvarchar(10),datediff(minute,cast(In_time as DATETIME), dateadd(day,1,cast(Out_time as DATETIME)))) -EMP_SHIFT_MASTER.OT_FULL end)end)%60) from "
	+ "EMP_SHIFT_LATE_RULES ,EMP_SHIFT_MASTER,(select sum(NoHRS)*60 as min,Pernr,FromDate from OVER_TIME_DETAILS where FromDate between DATEADD(MONTH,-4,'"+sqltodat+"')"
	+ " and DATEADD(MONTH,1,'"+sqltodat+"') and ApprvrStatus='Approved' group by Pernr,FromDate)t	where  EMP_SHIFT_MASTER.Shift_code = EMP_SHIFT_LATE_RULES.Rule_Code "
	+ "and t.Pernr=Report_Daily_wise.Pernr  and t.FromDate=Report_Daily_wise.Date and	0<case  when datediff(minute,In_time,Out_time)>0 then  "
	+ "convert(nvarchar(10),datediff(minute,In_time,Out_time))-EMP_SHIFT_MASTER.OT_FULL else convert(nvarchar(10),datediff(minute,cast(In_time as DATETIME), "
	+ "dateadd(day,1,cast(Out_time as DATETIME)))) -EMP_SHIFT_MASTER.OT_FULL end and  Report_Daily_wise.Shift=EMP_SHIFT_LATE_RULES.Rule_Code 	and Location='"+cmpcode+"' "
	+ "and Report_Daily_wise.Date between DATEADD(MONTH,-4,'"+sqltodat+"') and DATEADD(MONTH,1,'"+sqltodat+"') and Report_Daily_wise.Status not like '%AA%' "
	+ "and In_time>'00:00:00' and Out_time>'00:00:00'";			
							int rr6=ad.SqlExecuteUpdate(otful);	
							
							
							//OT hrs half time
							
							String othalf="update Report_Daily_wise set OT=convert(nvarchar(10),floor((case when t.min<(case  when datediff(minute,In_time,Out_time)>0 then"
	+ " convert(nvarchar(10),datediff(minute,In_time,Out_time))-EMP_SHIFT_MASTER.OT_half else convert(nvarchar(10),datediff(minute,cast(In_time as DATETIME),"
	+ " dateadd(day,1,cast(Out_time as DATETIME)))) -EMP_SHIFT_MASTER.OT_half end)  then t.min  else (case  when datediff(minute,In_time,Out_time)>0 then  "
	+ "convert(nvarchar(10),datediff(minute,In_time,Out_time))-EMP_SHIFT_MASTER.OT_half else convert(nvarchar(10),datediff(minute,cast(In_time as DATETIME), "
	+ "dateadd(day,1,cast(Out_time as DATETIME)))) -EMP_SHIFT_MASTER.OT_half end)end)/60))+':'+ convert(nvarchar(10),(case when t.min<(case  when "
	+ "datediff(minute,In_time,Out_time)>0 then convert(nvarchar(10),datediff(minute,In_time,Out_time))-EMP_SHIFT_MASTER.OT_half else "
	+ "convert(nvarchar(10),datediff(minute,cast(In_time as DATETIME), dateadd(day,1,cast(Out_time as DATETIME)))) -EMP_SHIFT_MASTER.OT_half end)  then t.min   "
	+ " else (case  when datediff(minute,In_time,Out_time)>0 then  convert(nvarchar(10),datediff(minute,In_time,Out_time))-EMP_SHIFT_MASTER.OT_half else "
	+ "convert(nvarchar(10),datediff(minute,cast(In_time as DATETIME), dateadd(day,1,cast(Out_time as DATETIME)))) -EMP_SHIFT_MASTER.OT_half end)end)%60) from "
	+ "EMP_SHIFT_LATE_RULES ,EMP_SHIFT_MASTER,(select sum(NoHRS)*60 as min,Pernr,FromDate from OVER_TIME_DETAILS where FromDate between DATEADD(MONTH,-4,'"+sqltodat+"')"
	+ " and DATEADD(MONTH,1,'"+sqltodat+"') and ApprvrStatus='Approved' group by Pernr,FromDate)t	where  EMP_SHIFT_MASTER.Shift_code = EMP_SHIFT_LATE_RULES.Rule_Code "
	+ "and t.Pernr=Report_Daily_wise.Pernr  and t.FromDate=Report_Daily_wise.Date and	0<case  when datediff(minute,In_time,Out_time)>0 then  "
	+ "convert(nvarchar(10),datediff(minute,In_time,Out_time))-EMP_SHIFT_MASTER.OT_half else convert(nvarchar(10),datediff(minute,cast(In_time as DATETIME), "
	+ "dateadd(day,1,cast(Out_time as DATETIME)))) -EMP_SHIFT_MASTER.OT_half end and  Report_Daily_wise.Shift=EMP_SHIFT_LATE_RULES.Rule_Code 	and Location='"+cmpcode+"' "
	+ "and Report_Daily_wise.Date between DATEADD(MONTH,-4,'"+sqltodat+"') and DATEADD(MONTH,1,'"+sqltodat+"') and Report_Daily_wise.Status  like '%AA%'"
			+ "  and Report_Daily_wise.Status not like '%AAAA%'  and ( In_time>'00:00:00' or Out_time>'00:00:00')";
							int rr7=ad.SqlExecuteUpdate(othalf);	
							
							
							
				 }
				 else
				 {
					 String q2="EXEC daily_report_status_Att '"+rsas.getString("days1")+"','"+rsas.getString("month1")+"','"+rsas.getString("year1")+"','"+reqemp+"'";
					int k1=ad.SqlExecuteUpdate(q2);
						
					String q21=" EXEC daily_report_status_Att '"+rsas.getString("days2")+"','"+rsas.getString("month2")+"','"+rsas.getString("year2")+"','"+reqemp+"'";
					int k11=ad.SqlExecuteUpdate(q21);
							
					/*String q121="EXEC daily_report_status_Att '"+rsas.getString("days3")+"','"+rsas.getString("month3")+"','"+rsas.getString("year3")+"','"+reqemp+"'";
					int k21=ad.SqlExecuteUpdate(q121);*/
					
					
	//First half Late
					
					String late="update Report_Daily_wise set late = convert(nvarchar(10),floor(datediff(minute,Come_Late_by,In_time)/60))+':'+convert(nvarchar(10),"
				+ "datediff(minute,Come_Late_by,In_time)%60) from EMP_SHIFT_LATE_RULES ,EMP_SHIFT_MASTER where  EMP_SHIFT_MASTER.Shift_code = EMP_SHIFT_LATE_RULES.Rule_Code   "
				+ "   and  Report_Daily_wise.Shift=EMP_SHIFT_LATE_RULES.Rule_Code  and In_time>Come_Late_by and In_time < First_Half_End_Time and pernr='"+reqemp+"' "
				+ "and Report_Daily_wise.Date between DATEADD(MONTH,-4,'"+sqltodat+"') and DATEADD(MONTH,1,'"+sqltodat+"')";			 
					int klate=ad.SqlExecuteUpdate(late);
					
					//Second half Late
					
				/*	String slate="update Report_Daily_wise set late = convert(nvarchar(10),floor(datediff(minute,SH_Start_Time,In_time)/60))+':'+convert(nvarchar(10),	"
				+ "datediff(minute,SH_Start_Time,In_time)%60) from EMP_SHIFT_LATE_RULES ,EMP_SHIFT_MASTER where  EMP_SHIFT_MASTER.Shift_code = EMP_SHIFT_LATE_RULES.Rule_Code"
				+ "  and  Report_Daily_wise.Shift=EMP_SHIFT_LATE_RULES.Rule_Code  and  In_time > SH_Start_Time and SH_Start_Time>'00:00' and pernr='"+reqemp+"' and "
				+ "month(Report_Daily_wise.Date) between Month(DATEADD(MONTH,-4,'"+sqltodat+"')) and Month(DATEADD(MONTH,0,'"+sqltodat+"'))";		 
								int sqlate=ad.SqlExecuteUpdate(slate);
								*/
					///go early by 		
								
				String early="update Report_Daily_wise set early= convert(nvarchar(10),floor(datediff(minute,Out_time,Go_Early_by)/60))+':'+convert(nvarchar(10),"
		+ "datediff(minute,Out_time,Go_Early_by)%60) from EMP_SHIFT_LATE_RULES ,EMP_SHIFT_MASTER	where  EMP_SHIFT_MASTER.Shift_code = EMP_SHIFT_LATE_RULES.Rule_Code  "
		+ "   and  Report_Daily_wise.Shift=EMP_SHIFT_LATE_RULES.Rule_Code  and Out_time < Go_Early_by and Out_time > SH_Start_Time   and pernr='"+reqemp+"'"
		+ " and Report_Daily_wise.Date between DATEADD(MONTH,-4,'"+sqltodat+"') and DATEADD(MONTH,1,'"+sqltodat+"')";				
				int earsly=ad.SqlExecuteUpdate(early);			
				
				
				//Total hrs
					
				
				String tot="update Report_Daily_wise set total=case  when datediff(minute,In_time,Out_time)>0 then  convert(nvarchar(10),floor(datediff(minute,In_time,Out_time)/60))+':'+convert(nvarchar(10),datediff(minute,In_time,Out_time)%60) else convert(nvarchar(10),floor(datediff(minute,cast(In_time as DATETIME),dateadd(day,1,cast(Out_time as DATETIME)))/60))+':'+convert(nvarchar(10),datediff(minute,cast(In_time as DATETIME),dateadd(day,1,cast(Out_time as DATETIME)))%60) end "
						+ " from EMP_SHIFT_LATE_RULES ,EMP_SHIFT_MASTER	where  EMP_SHIFT_MASTER.Shift_code = EMP_SHIFT_LATE_RULES.Rule_Code "
						+ "  and  Report_Daily_wise.Shift=EMP_SHIFT_LATE_RULES.Rule_Code 	and pernr='"+reqemp+"' and Report_Daily_wise.Date"
						+ " between DATEADD(MONTH,-4,'"+sqltodat+"') and DATEADD(MONTH,1,'"+sqltodat+"') and Total is null and In_time>'00:00:00' and Out_time>'00:00:00'";
						int rr=ad.SqlExecuteUpdate(tot);
						
						/*if(cmpcode.equalsIgnoreCase("ML12")){
							
							String totalwork="";
							String flate="";
							String Loc="select * from Location where LOCATION_CODE='"+cmpcode+"'";
							ResultSet fs10 = ad.selectQuery(Loc);
							while (fs10.next()) {
								totalwork=fs10.getString("Ftotal");
								flate=fs10.getString("Flate");
							}
							String flexs="update Report_Daily_wise set  Status='PPPP' where  pernr='"+reqemp+"' "
											+ "and Report_Daily_wise.Date between DATEADD(MONTH,-4,'"+sqltodat+"') and DATEADD(MONTH,1,'"+sqltodat+"') and   CONVERT( TIME, Report_Daily_wise.Total) >='"+totalwork+"' and  CONVERT( TIME, Report_Daily_wise.Late)<='"+flate+"'";
							int fx=ad.SqlExecuteUpdate(flexs);	
						
						}
						
						*/
						
						///OT HRS FULL TIME
						
						String otful="update Report_Daily_wise set OT=convert(nvarchar(10),floor((case when t.min<(case  when datediff(minute,In_time,Out_time)>0 then"
	+ " convert(nvarchar(10),datediff(minute,In_time,Out_time))-EMP_SHIFT_MASTER.OT_FULL else convert(nvarchar(10),datediff(minute,cast(In_time as DATETIME),"
	+ " dateadd(day,1,cast(Out_time as DATETIME)))) -EMP_SHIFT_MASTER.OT_FULL end)  then t.min  else (case  when datediff(minute,In_time,Out_time)>0 then  "
	+ "convert(nvarchar(10),datediff(minute,In_time,Out_time))-EMP_SHIFT_MASTER.OT_FULL else convert(nvarchar(10),datediff(minute,cast(In_time as DATETIME), "
	+ "dateadd(day,1,cast(Out_time as DATETIME)))) -EMP_SHIFT_MASTER.OT_FULL end)end)/60))+':'+ convert(nvarchar(10),(case when t.min<(case  when "
	+ "datediff(minute,In_time,Out_time)>0 then convert(nvarchar(10),datediff(minute,In_time,Out_time))-EMP_SHIFT_MASTER.OT_FULL else "
	+ "convert(nvarchar(10),datediff(minute,cast(In_time as DATETIME), dateadd(day,1,cast(Out_time as DATETIME)))) -EMP_SHIFT_MASTER.OT_FULL end)  then t.min   "
	+ " else (case  when datediff(minute,In_time,Out_time)>0 then  convert(nvarchar(10),datediff(minute,In_time,Out_time))-EMP_SHIFT_MASTER.OT_FULL else "
	+ "convert(nvarchar(10),datediff(minute,cast(In_time as DATETIME), dateadd(day,1,cast(Out_time as DATETIME)))) -EMP_SHIFT_MASTER.OT_FULL end)end)%60) from "
	+ "EMP_SHIFT_LATE_RULES ,EMP_SHIFT_MASTER,(select sum(NoHRS)*60 as min,Pernr,FromDate from OVER_TIME_DETAILS where FromDate between DATEADD(MONTH,-4,'"+sqltodat+"')"
	+ " and DATEADD(MONTH,1,'"+sqltodat+"') and ApprvrStatus='Approved' group by Pernr,FromDate)t	where  EMP_SHIFT_MASTER.Shift_code = EMP_SHIFT_LATE_RULES.Rule_Code "
	+ "and t.Pernr=Report_Daily_wise.Pernr  and t.FromDate=Report_Daily_wise.Date and	0<case  when datediff(minute,In_time,Out_time)>0 then  "
	+ "convert(nvarchar(10),datediff(minute,In_time,Out_time))-EMP_SHIFT_MASTER.OT_FULL else convert(nvarchar(10),datediff(minute,cast(In_time as DATETIME), "
	+ "dateadd(day,1,cast(Out_time as DATETIME)))) -EMP_SHIFT_MASTER.OT_FULL end and  Report_Daily_wise.Shift=EMP_SHIFT_LATE_RULES.Rule_Code 	and Report_Daily_wise.pernr='"+reqemp+"' "
	+ "and Report_Daily_wise.Date between DATEADD(MONTH,-4,'"+sqltodat+"') and DATEADD(MONTH,1,'"+sqltodat+"') and Report_Daily_wise.Status not like '%AA%' "
	+ "and In_time>'00:00:00' and Out_time>'00:00:00'";			
						int rr6=ad.SqlExecuteUpdate(otful);	
						
						
						//OT hrs half time
						
						String othalf="update Report_Daily_wise set OT=convert(nvarchar(10),floor((case when t.min<(case  when datediff(minute,In_time,Out_time)>0 then"
	+ " convert(nvarchar(10),datediff(minute,In_time,Out_time))-EMP_SHIFT_MASTER.OT_half else convert(nvarchar(10),datediff(minute,cast(In_time as DATETIME),"
	+ " dateadd(day,1,cast(Out_time as DATETIME)))) -EMP_SHIFT_MASTER.OT_half end)  then t.min  else (case  when datediff(minute,In_time,Out_time)>0 then  "
	+ "convert(nvarchar(10),datediff(minute,In_time,Out_time))-EMP_SHIFT_MASTER.OT_half else convert(nvarchar(10),datediff(minute,cast(In_time as DATETIME), "
	+ "dateadd(day,1,cast(Out_time as DATETIME)))) -EMP_SHIFT_MASTER.OT_half end)end)/60))+':'+ convert(nvarchar(10),(case when t.min<(case  when "
	+ "datediff(minute,In_time,Out_time)>0 then convert(nvarchar(10),datediff(minute,In_time,Out_time))-EMP_SHIFT_MASTER.OT_half else "
	+ "convert(nvarchar(10),datediff(minute,cast(In_time as DATETIME), dateadd(day,1,cast(Out_time as DATETIME)))) -EMP_SHIFT_MASTER.OT_half end)  then t.min   "
	+ " else (case  when datediff(minute,In_time,Out_time)>0 then  convert(nvarchar(10),datediff(minute,In_time,Out_time))-EMP_SHIFT_MASTER.OT_half else "
	+ "convert(nvarchar(10),datediff(minute,cast(In_time as DATETIME), dateadd(day,1,cast(Out_time as DATETIME)))) -EMP_SHIFT_MASTER.OT_half end)end)%60) from "
	+ "EMP_SHIFT_LATE_RULES ,EMP_SHIFT_MASTER,(select sum(NoHRS)*60 as min,Pernr,FromDate from OVER_TIME_DETAILS where FromDate between DATEADD(MONTH,-4,'"+sqltodat+"')"
	+ " and DATEADD(MONTH,1,'"+sqltodat+"') and ApprvrStatus='Approved' group by Pernr,FromDate)t	where  EMP_SHIFT_MASTER.Shift_code = EMP_SHIFT_LATE_RULES.Rule_Code "
	+ "and t.Pernr=Report_Daily_wise.Pernr  and t.FromDate=Report_Daily_wise.Date and	0<case  when datediff(minute,In_time,Out_time)>0 then  "
	+ "convert(nvarchar(10),datediff(minute,In_time,Out_time))-EMP_SHIFT_MASTER.OT_half else convert(nvarchar(10),datediff(minute,cast(In_time as DATETIME), "
	+ "dateadd(day,1,cast(Out_time as DATETIME)))) -EMP_SHIFT_MASTER.OT_half end and  Report_Daily_wise.Shift=EMP_SHIFT_LATE_RULES.Rule_Code 	and Report_Daily_wise.pernr='"+reqemp+"' "
	+ "and Report_Daily_wise.Date between DATEADD(MONTH,-4,'"+sqltodat+"') and DATEADD(MONTH,1,'"+sqltodat+"') and Report_Daily_wise.Status  like '%AA%'"
		+ "  and Report_Daily_wise.Status not like '%AAAA%'  and ( In_time>'00:00:00' or Out_time>'00:00:00')";
						int rr7=ad.SqlExecuteUpdate(othalf);	
				 }
					
			 }
			 rsas.close();
			 
			
			
			 
			  //delete empNos
			    
			    String delete="delete Temp_Emp where Date_Time='"+datecurrent+"'";						    
			   int lldd=ad.SqlExecuteUpdate(delete);
				
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		    
		    
		  
		    
		    aqq ="  update  Attendance_Process_log set rep_et=getdate(),end_time=getdate(),process_status='Completed',progress=100 "
					+ " where lock_id ='"+approvalsForm.getLock_id()+"'  and (rep_et is  null or rep_et='')";
				kff11=ad.SqlExecuteUpdate(aqq);
		
		    
		   /* try {
				conn.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}*/
		    
		    
		    try {
				finalize();
			} catch (Throwable e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} 
		    
		    approvalsForm.setMessage("File Processed Successfully");
		    
		    try {
				reprs15.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		    try {
				rs16.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		    try {
				rs11.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		    try {
				cc1.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		    try {
				rss.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		    try {
				rs13.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		    try {
				rscount.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		    try {
				rs14.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}try {
				rs15.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			try {
				rs12.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return mapping.findForward("processemptimeentry");
			
		}
	public LinkedList getofficaldetails(String empnos,HttpServletRequest request) {
		LinkedList off=new LinkedList();
	
		String b="";
		String emp = "select dpt.DPTSTXT as DPTSTXT,EMP_FULLNAME, LOCID,DSGSTXT,emp.pernr,emp.doj from emp_official_info as emp,DEPARTMENT as dpt ,DESIGNATION  where emp.dsgid  = DESIGNATION.dsgid and dpt.DPTID=emp.DPTID and pernr in ("+empnos+")";
		ResultSet rs = ad.selectQuery(emp);
		try {
			while(rs.next())
			{
				EmpOfficalInformationForm a=new EmpOfficalInformationForm();
				a.setEmployeeNumber(rs.getString("PERNR"));
				a.setEmployeeName(rs.getString("EMP_FULLNAME"));
				a.setDepartment(rs.getString("DPTSTXT"));
				a.setDesignation(rs.getString("DSGSTXT"));
				a.setDoj(rs.getString("doj"));
				
				off.add(a);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		request.setAttribute("emptyshiftnos", off);
		
		
		try {
			rs.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return off;
	
	}
	
	public ActionForward progressbar(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {HRApprovalForm approvalsForm = (HRApprovalForm) form;
			
			HttpSession session=request.getSession();
			UserInfo user=(UserInfo)session.getAttribute("user");
			System.out.println(approvalsForm.getLock_id());
		/*	if(progress==15)
				approvalsForm.setMessage2("Fetching Records");	
			if(progress==30)
				approvalsForm.setMessage2("Leave & Onduty Records Updated");			
			if(progress==50)
				approvalsForm.setMessage2("Punch Records Updated");
			if(progress==60)
				approvalsForm.setMessage2("Manual Records Updated");
			if(progress==80)
				approvalsForm.setMessage2("Week Offs  Updated");
			if(progress==90)
				approvalsForm.setMessage2("Attendance Reports Updated");
			if(progress==95)
				progress=0;*/

			String a ="select top 1 *,CONVERT(varchar(5),fetch_st,108) as fetch_st1,CONVERT(varchar(5),fetch_et,108) as fetch_et1,"
					+ "CONVERT(varchar(5),leave_st,108) as leave_st1,CONVERT(varchar(5),leave_et,108) as leave_et1"
					+ ",CONVERT(varchar(5),punch_st,108) as punch_st1,CONVERT(varchar(5),punch_et,108) as punch_et1"
					+ ",CONVERT(varchar(5),manual_st,108) as manual_st1,CONVERT(varchar(5),rep_et,108) as rep_et1  from Attendance_Process_log where emp_id='"+user.getEmployeeNo()+"' and process_Status='Pending' order by Start_Time desc ";
			System.out.println(a);
			ResultSet rs = ad.selectQuery(a);
			try {
				if(rs.next())
				{
					approvalsForm.setProgress(rs.getInt("progress"));
					approvalsForm.setFromDate(rs.getString("Start_date"));
					approvalsForm.setToDate(rs.getString("End_date"));
					approvalsForm.setStart_time(rs.getString("start_time"));
					approvalsForm.setEnd_time(rs.getString("end_time"));
					approvalsForm.setLock_id(rs.getString("lock_id"));
					approvalsForm.setEmp_count(rs.getString("emp_count"));
					approvalsForm.setFetch_st(rs.getString("fetch_st1"));
					approvalsForm.setFetch_et(rs.getString("fetch_et1"));
					approvalsForm.setLeave_st(rs.getString("leave_st1"));
					approvalsForm.setLeave_et(rs.getString("leave_et1"));
					approvalsForm.setPunch_st(rs.getString("punch_st1"));
					approvalsForm.setPunch_et(rs.getString("punch_et1"));
					approvalsForm.setManual_st(rs.getString("manual_st1"));
					approvalsForm.setManual_et(rs.getString("manual_et"));
					approvalsForm.setWeek_st(rs.getString("week_st"));
					approvalsForm.setWeek_et(rs.getString("week_et"));
					approvalsForm.setRep_st(rs.getString("rep_st"));
					approvalsForm.setRep_et(rs.getString("rep_et1"));

				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}


			return mapping.findForward("progressbar");}
	
	
	/*public ActionForward progressbarinitial(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {HRApprovalForm approvalsForm = (HRApprovalForm) form;
			approvalsForm.setProgress(0);
			
			
			HttpSession session=request.getSession();
			UserInfo user=(UserInfo)session.getAttribute("user");
			System.out.println(approvalsForm.getLock_id());
			if(progress==15)
				approvalsForm.setMessage2("Fetching Records");	
			if(progress==30)
				approvalsForm.setMessage2("Leave & Onduty Records Updated");			
			if(progress==50)
				approvalsForm.setMessage2("Punch Records Updated");
			if(progress==60)
				approvalsForm.setMessage2("Manual Records Updated");
			if(progress==80)
				approvalsForm.setMessage2("Week Offs  Updated");
			if(progress==90)
				approvalsForm.setMessage2("Attendance Reports Updated");
			if(progress==95)
				progress=0;

			String a ="select top 1 * from Attendance_Process_log where emp_id='"+user.getEmployeeNo()+"' and process_Status='Pending' order by Start_Time desc ";
			System.out.println(a);
			ResultSet rs = ad.selectQuery(a);
			try {
				if(rs.next())
				{
					approvalsForm.setProgress(rs.getInt("progress"));
					approvalsForm.setFromDate(rs.getString("Start_date"));
					approvalsForm.setToDate(rs.getString("End_date"));
					approvalsForm.setStart_time(rs.getString("start_time"));
					approvalsForm.setEnd_time(rs.getString("end_time"));
					approvalsForm.setLock_id(rs.getString("lock_id"));
					approvalsForm.setEmp_count(rs.getString("emp_count"));
					approvalsForm.setFetch_st(rs.getString("fetch_st"));
					approvalsForm.setFetch_et(rs.getString("fetch_et"));
					approvalsForm.setLeave_st(rs.getString("leave_st"));
					approvalsForm.setLeave_et(rs.getString("leave_et"));
					approvalsForm.setPunch_st(rs.getString("punch_st"));
					approvalsForm.setPunch_et(rs.getString("punch_et"));
					approvalsForm.setManual_st(rs.getString("manual_st"));
					approvalsForm.setManual_et(rs.getString("manual_et"));
					approvalsForm.setWeek_st(rs.getString("week_st"));
					approvalsForm.setWeek_et(rs.getString("week_et"));
					approvalsForm.setRep_st(rs.getString("rep_st"));
					approvalsForm.setRep_et(rs.getString("rep_et"));

				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

	return mapping.findForward("progressbar");}*/

	public ActionForward readattendancefile(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
	HRApprovalForm approvalsForm = (HRApprovalForm) form;
		
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		if(user==null){
			request.setAttribute("message","Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		String cmpcode1="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
	
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode1=cc.getString("Attendance_Loc");
				
				if(cmpcode1.contains(","))
				{
				 cmp=cmpcode1.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode1+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
	    ArrayList locationList=new ArrayList();
		ArrayList locationLabelList=new ArrayList();
		ResultSet rs11 = ad.selectQuery("select LOCID," +
				"LOCNAME,location_code from location where locid ='"+user.getPlantId()+"'"); 
		
		//updated on 23-05-2017
		if(user.getPlantId().equalsIgnoreCase("18")||user.getPlantId().equalsIgnoreCase("19"))
		{
			locationList.add("ML01");
			locationLabelList.add(("ML01")+"-"+("HOSUR"));
			
			approvalsForm.setLocationIdList(locationList);
			approvalsForm.setLocationLabelList(locationLabelList);
	
		}
		else
		{
			//updated on 23-05-2017
				try {
					while(rs11.next()) {
						locationList.add(rs11.getString("location_code"));
						locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
						
					}
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				approvalsForm.setLocationIdList(locationList);
				approvalsForm.setLocationLabelList(locationLabelList);
		
		}
		String frompernr=approvalsForm.getFrompernr();
		String topernr=approvalsForm.getTopernr();
		String cmpcode=approvalsForm.getLocationId();
		String paygrp=approvalsForm.getPaygrp();
	    String category=approvalsForm.getStaffcat();
	    String fromdate=approvalsForm.getFromDate();
	    String todate=approvalsForm.getToDate();
	    
	    String tabledate="";
	    String sqlfromdate="";	    
	    String sqltodat="";
	    String filedate="";
	    int filedateday=0;
	    String filedatemonth="";
	    String filedateyear="";
	    
	    String from[]=fromdate.split("/");
	    sqlfromdate=from[2]+"-"+from[1]+"-"+from[0];
	    
	    String to[]=todate.split("/");
	    sqltodat=to[2]+"-"+to[1]+"-"+to[0];
	    
	    
	    LinkedList in=new LinkedList();
        LinkedList out=new LinkedList();
        LinkedList datelist=new LinkedList();
        LinkedList leave=new LinkedList();
        LinkedList onduty=new LinkedList();
        LinkedList allleave=new LinkedList();
        LinkedList allonduty=new LinkedList();
	    
	    String countdays="SELECT year(thedate) year,MONTH(thedate) month,thedate FROM dbo.ExplodeDates('"+sqlfromdate+"','"+sqltodat+"') as thedate";
	    ResultSet rscount=ad.selectQuery(countdays);
	    try {
			while(rscount.next())
			{
               
                HRApprovalForm date=new  HRApprovalForm();
                

               
				
				String b[]=rscount.getString("thedate").split("-");
				tabledate=b[2]+b[1]+b[0].substring(2, b[0].length())+"-T";
				filedate= rscount.getString("thedate");
				filedateday=Integer.parseInt(b[2]);
				filedatemonth=b[1];
				filedateyear=b[0];
				
                date.setId("Day"+filedateday);
			
			String filepath="";
			/*if(cmpcode.equalsIgnoreCase("ML00"))
			{
				
				filepath	="\\\\MICROHONT45\\Attendance_"+cmpcode+"\\DAILY\\"+tabledate+".dat";
			}*/
			if(cmpcode.equalsIgnoreCase("ML06"))
			{
				filepath	="\\\\ml06pc008\\DAILY\\"+tabledate+".dat";
				
			}
			/*if(cmpcode.equalsIgnoreCase("ML18"))
			{
				filepath	="\\\\MICROHONT45\\Attendance_"+cmpcode+"\\DAILY\\"+tabledate+".dat";
				
			}*/
			if(cmpcode.equalsIgnoreCase("ML21"))
			{
				filepath	="\\\\MICROHONT45\\Attendance_"+cmpcode+"\\DAILY\\"+tabledate+".dat";
				
			}
			/*if(cmpcode.equalsIgnoreCase("ML14"))
			{
				
				filepath	="\\\\ml14pc105\\DAILY\\"+tabledate+".dat";
			}*/
			if(cmpcode.equalsIgnoreCase("ML24"))
			{
				filepath	="\\\\MICROHONT45\\Attendance_"+cmpcode+"\\DAILY\\"+tabledate+".dat";
				
			}
			
			if(cmpcode.equalsIgnoreCase("ML11"))
			{
				filepath	="\\\\MICROHONT45\\Attendance_"+cmpcode+"\\DAILY\\"+tabledate+".dat";
				
			}
			
			/*if(cmpcode.equalsIgnoreCase("ML15"))
			{
				filepath	="\\\\MICROHONT45\\Attendance_"+cmpcode+"\\DAILY\\"+tabledate+".dat";
				
			}*/
			if(cmpcode.equalsIgnoreCase("ML07"))
			{
				filepath	="\\\\MICROHONT45\\Attendance_"+cmpcode+"\\DAILY\\"+tabledate+".dat";
				
			}
			
		/*	if(cmpcode.equalsIgnoreCase("ML22"))
			{
				filepath	="\\\\MICROHONT45\\Attendance_"+cmpcode+"\\DAILY\\"+tabledate.replace("-T", "")+".dat";
				
			}*/
			if(cmpcode.equalsIgnoreCase("ML08"))
			{
				filepath	="\\\\ml08pc053\\AttDataML08\\"+tabledate+".dat";
				
			}
			
		/*	if(cmpcode.equalsIgnoreCase("ML12"))
			{
				filepath	="\\\\MICROHONT45\\Attendance_"+cmpcode+"\\DAILY\\"+tabledate+".dat";
				
			}
			if(cmpcode.equalsIgnoreCase("ML12"))
			{
				filepath	="\\\\MICROHONT45\\Attendance_"+cmpcode+"\\DAILY\\"+tabledate+".dat";
				
			}
			*/
			if(cmpcode.equalsIgnoreCase("ML01"))
			{
				filepath	="\\\\MICROHONT45\\Attendance_"+cmpcode+"\\DAILY\\"+tabledate+".dat";
				
			}
			
		
			
			
			File f = new File(filepath);
			if(true) {
			
			
			//insert bulk file
				
				if(cmpcode.equalsIgnoreCase("ML00")||cmpcode.equalsIgnoreCase("ML12")||cmpcode.equalsIgnoreCase("ML18")||cmpcode.equalsIgnoreCase("ML14")||cmpcode.equalsIgnoreCase("ML15")||cmpcode.equalsIgnoreCase("ML22")||cmpcode.equalsIgnoreCase("ML05")||cmpcode.equalsIgnoreCase("ML58"))
				//if(cmpcode.equalsIgnoreCase("ML00")||cmpcode.equalsIgnoreCase("ML15")||cmpcode.equalsIgnoreCase("ML22")||cmpcode.equalsIgnoreCase("ML05")||cmpcode.equalsIgnoreCase("ML58"))
				//	if(cmpcode.equalsIgnoreCase("ML00")||cmpcode.equalsIgnoreCase("ML15")||cmpcode.equalsIgnoreCase("ML22")||cmpcode.equalsIgnoreCase("ML05")||cmpcode.equalsIgnoreCase("ML58"))
				{
	           
					if(user.getRepgrp()==null)
					{
						user.setRepgrp("");
					}
					if(user.getRepgrp().equalsIgnoreCase("13"))
					{
						filepath	="\\\\MICROHONT45\\Attendance_ML21\\DAILY\\"+tabledate+".dat";
						 String query="bulk insert Attendancefile from '"+filepath+"'";
							int a=ad.SqlExecuteUpdate(query);
							if(a==0)
							{
								approvalsForm.setMessage("File Not Exist for date : "+filedate+"");
								cc.close();rs11.close();rscount.close();
								return mapping.findForward("emptimeentry");
							}
						
					}
					
					else
					{
						String dbname="";
						String cutoffdate="";
						String server="";
						
						if(cmpcode.equalsIgnoreCase("ML00"))
						{
						dbname="etimetracklite";	
						cutoffdate="2016-10-05";
						server="[192.168.1.127]";
						}
						if(cmpcode.equalsIgnoreCase("ML05"))
						{
						dbname="etimetracklite_pondi";	
						cutoffdate="2016-10-05";
						server="[192.168.1.127]";
						}
						if(cmpcode.equalsIgnoreCase("ML15"))
						{
						dbname="etimetracklite_API";	
						cutoffdate="2017-05-10";
						server="[192.168.1.127]";
						}
						if(cmpcode.equalsIgnoreCase("ML14"))
						{
						dbname="App91";	
						cutoffdate="2017-05-10";
						server="[192.168.3.67]";
						}
						/*if(cmpcode.equalsIgnoreCase("ML58"))
						{
						dbname="App91";
						cutoffdate="2016-10-05";	
						server="[192.168.15.55]";
						}*/
						if(cmpcode.equalsIgnoreCase("ML58"))
						{
						dbname="App91";
						cutoffdate="2016-10-05";	
						server="[192.168.15.55]";
						}
						if(cmpcode.equalsIgnoreCase("ML22"))
						{
						dbname="etimetracklite_ml22";	
						cutoffdate="2017-05-18";
						server="[192.168.1.127]";
						}
						
						if(cmpcode.equalsIgnoreCase("ML18"))
						{
						dbname="etimetracklite_ml18";	
						cutoffdate="2017-05-31";
						server="[192.168.1.127]";
						}
						if(cmpcode.equalsIgnoreCase("ML12"))
						{
						dbname="etimetracklite_ml12";	
						cutoffdate="2017-05-31";
						server="[192.168.1.127]";
						}
						
						 String query="insert into Attendancefile select convert(nvarchar(2), FORMAT(logdate,'dd'))+convert(nvarchar(2),  FORMAT(logdate,'MM'))+convert(nvarchar(4),"
				            		+ " format(logdate,'HHmm'))+convert(nvarchar(10),userid) from "+server+"."+dbname+".[dbo].[DeviceLogs_"+rscount.getString("month")+"_"+rscount.getString("year")+"] where"
				            		+ " convert(date,LogDate)='"+filedate+"' and convert(date,LogDate)>'"+cutoffdate+"'";
				            int a=ad.SqlExecuteUpdate(query);
							if(a==0)
							{
								approvalsForm.setMessage("File Not Exist for date : "+filedate+"");
								cc.close();rs11.close();rscount.close();
								return mapping.findForward("emptimeentry");
							}
								}
				
			
				}
				else
				{
					 String query="bulk insert Attendancefile from '"+filepath+"'";
						int a=ad.SqlExecuteUpdate(query);
						if(a==0)
						{
							approvalsForm.setMessage("File Not Exist for date : "+filedate+"");
							cc.close();rs11.close();rscount.close();
							return mapping.findForward("emptimeentry");
						}
					
				}
	
				if(cmpcode.equalsIgnoreCase("ML00"))
				{
	           
					if(user.getRepgrp().equalsIgnoreCase("13"))
					{
						cmpcode="ML21";
					}
				}
				//delete old records 
				
				String query1="delete ATTENDANCE_MASTER where date='"+filedate+"' and Location='"+cmpcode+"'";
			    int a1=ad.SqlExecuteUpdate(query1);
			    
			    //insert new records
			    
				String query2="insert into ATTENDANCE_MASTER select distinct(id),'"+filedate+"','"+cmpcode+"' from Attendancefile";
			    int a2=ad.SqlExecuteUpdate(query2);
			     if(a2>0)
			     {
			    	 approvalsForm.setMessage("File Imported successfully");
			     }
			     else
			     {
			    	 approvalsForm.setMessage("Error..Please Upload Again");
			     }
			     
			     
			     String ghp="select * from ATTENDANCE_MASTER  WHERE isnumeric(ID)=0 and date='"+filedate+"' and Location='"+cmpcode+"'";
			     ResultSet d=ad.selectQuery(ghp);
			     if(d.next())
			     {
			    	 
			    	 approvalsForm.setMessage("File date "+filedate+" Contains Invalid records ....Import Unsuccessful..Contact Admin");
			    		//delete old records 
						
						String query31="delete ATTENDANCE_MASTER where date='"+filedate+"' and Location='"+cmpcode+"'";
					    int a41=ad.SqlExecuteUpdate(query31);
					    
					    String del="truncate table Attendancefile";
					    int as=ad.SqlExecuteUpdate(del);
					    
					    return mapping.findForward("emptimeentry");
			     }
			    
			    /*//insert into transaction
			    			    
			  	String quer3="insert into ATTENDANCE_FILE_Upload_Tran values('"+filepath+"','"+cmpcode+"','"+user.getEmployeeNo()+"',getdate())";
			    int a3=ad.SqlExecuteUpdate(quer3);*/
				 
				
		      /// truncatte attendancefile
			    
				 String del="truncate table Attendancefile";
			    int as=ad.SqlExecuteUpdate(del);
			    
			}}
	    }
			catch (SQLException e) {
				e.printStackTrace();
			}
		
	    try {
			cc.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    try {
			rscount.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    try {
			rs11.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return mapping.findForward("emptimeentry");
		
	}
	
	public ActionForward readattendancefilegate(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
	HRApprovalForm approvalsForm = (HRApprovalForm) form;
		
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		if(user==null){
			request.setAttribute("message","Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		String cmpcode1="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
	
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode1=cc.getString("Attendance_Loc");
				
				if(cmpcode1.contains(","))
				{
				 cmp=cmpcode1.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode1+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
	    ArrayList locationList=new ArrayList();
		ArrayList locationLabelList=new ArrayList();
		ResultSet rs11 = ad.selectQuery("select LOCID," +
				"LOCNAME,location_code from location where locid ='"+user.getPlantId()+"'"); 
		if(user.getPlantId().equalsIgnoreCase("16"))
		{
			locationList.add("ML01");
			locationLabelList.add(("ML01")+"-"+("HOSUR"));
			
			approvalsForm.setLocationIdList(locationList);
			approvalsForm.setLocationLabelList(locationLabelList);
	
		}
		else
		{
				try {
					while(rs11.next()) {
						locationList.add(rs11.getString("location_code"));
						locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
						
					}
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				approvalsForm.setLocationIdList(locationList);
				approvalsForm.setLocationLabelList(locationLabelList);
		}
		
		String frompernr=approvalsForm.getFrompernr();
		String topernr=approvalsForm.getTopernr();
		String cmpcode=approvalsForm.getLocationId();
		String paygrp=approvalsForm.getPaygrp();
	    String category=approvalsForm.getStaffcat();
	    String fromdate=approvalsForm.getFromDate();
	    String todate=approvalsForm.getToDate();
	    
	    String tabledate="";
	    String sqlfromdate="";	    
	    String sqltodat="";
	    String filedate="";
	    int filedateday=0;
	    String filedatemonth="";
	    String filedateyear="";
	    
	    String from[]=fromdate.split("/");
	    sqlfromdate=from[2]+"-"+from[1]+"-"+from[0];
	    
	    String to[]=todate.split("/");
	    sqltodat=to[2]+"-"+to[1]+"-"+to[0];
	    
	    
	    LinkedList in=new LinkedList();
        LinkedList out=new LinkedList();
        LinkedList datelist=new LinkedList();
        LinkedList leave=new LinkedList();
        LinkedList onduty=new LinkedList();
        LinkedList allleave=new LinkedList();
        LinkedList allonduty=new LinkedList();
	    
	    String countdays="SELECT year(thedate) year,MONTH(thedate) month,thedate FROM dbo.ExplodeDates('"+sqlfromdate+"','"+sqltodat+"') as thedate";
	    ResultSet rscount=ad.selectQuery(countdays);
	    try {
			while(rscount.next())
			{
               
                HRApprovalForm date=new  HRApprovalForm();
                

               
				
				String b[]=rscount.getString("thedate").split("-");
				tabledate=b[2]+b[1]+b[0].substring(2, b[0].length())+"-T";
				filedate= rscount.getString("thedate");
				filedateday=Integer.parseInt(b[2]);
				filedatemonth=b[1];
				filedateyear=b[0];
				
                date.setId("Day"+filedateday);
			
			String filepath="";
			/*if(cmpcode.equalsIgnoreCase("ML00"))
			{
				
				filepath	="\\\\MICROHONT45\\Attendance_"+cmpcode+"\\DAILY\\"+tabledate+".dat";
			}*/
			if(cmpcode.equalsIgnoreCase("ML06"))
			{
				filepath	="\\\\ml06pc008\\DAILY\\"+tabledate+".dat";
				
			}
			if(cmpcode.equalsIgnoreCase("ML18"))
			{
				filepath	="\\\\MICROHONT45\\Attendance_"+cmpcode+"\\DAILY\\"+tabledate+".dat";
				
			}
			if(cmpcode.equalsIgnoreCase("ML21"))
			{
				filepath	="\\\\MICROHONT45\\Attendance_"+cmpcode+"\\DAILY\\"+tabledate+".dat";
				
			}
			if(cmpcode.equalsIgnoreCase("ML14"))
			{
				
				filepath	="\\\\ml14pc105\\DAILY\\"+tabledate+".dat";
			}
		/*	if(cmpcode.equalsIgnoreCase("ML24"))
			{
				filepath	="\\\\MICROHONT45\\Attendance_"+cmpcode+"\\DAILY\\"+tabledate+".dat";
				
			}*/
			
			if(cmpcode.equalsIgnoreCase("ML11"))
			{
				filepath	="\\\\MICROHONT45\\Attendance_"+cmpcode+"\\DAILY\\"+tabledate+".dat";
				
			}
			
			/*if(cmpcode.equalsIgnoreCase("ML15"))
			{
				filepath	="\\\\MICROHONT45\\Attendance_"+cmpcode+"\\DAILY\\"+tabledate+".dat";
				
			}*/
			if(cmpcode.equalsIgnoreCase("ML07"))
			{
				filepath	="\\\\MICROHONT45\\Attendance_"+cmpcode+"\\DAILY\\"+tabledate+".dat";
				
			}
			
			if(cmpcode.equalsIgnoreCase("ML22"))
			{
				filepath	="\\\\MICROHONT45\\Attendance_"+cmpcode+"\\DAILY\\"+tabledate.replace("-T", "")+".dat";
				
			}
			if(cmpcode.equalsIgnoreCase("ML08"))
			{
				filepath	="\\\\ml08pc053\\AttDataML08\\"+tabledate+".dat";
				
			}
			
			if(cmpcode.equalsIgnoreCase("ML12"))
			{
				filepath	="\\\\MICROHONT45\\Attendance_"+cmpcode+"\\DAILY\\"+tabledate+".dat";
				
			}
			if(cmpcode.equalsIgnoreCase("ML12"))
			{
				filepath	="\\\\MICROHONT45\\Attendance_"+cmpcode+"\\DAILY\\"+tabledate+".dat";
				
			}
			
			if(cmpcode.equalsIgnoreCase("ML01"))
			{
				filepath	="\\\\MICROHONT45\\Attendance_"+cmpcode+"\\DAILY\\"+tabledate+".dat";
				
			}
			
		
			
			
			File f = new File(filepath);
			if(true) {
			
			
			//insert bulk file
				
				if(cmpcode.equalsIgnoreCase("ML00")||cmpcode.equalsIgnoreCase("ML24")||cmpcode.equalsIgnoreCase("ML05")||cmpcode.equalsIgnoreCase("ML15")||cmpcode.equalsIgnoreCase("ML58"))
				{
	           
					if(user.getRepgrp()==null)
					{
						user.setRepgrp("");
					}
					if(user.getRepgrp().equalsIgnoreCase("13"))
					{
						filepath	="\\\\MICROHONT45\\Attendance_ML21\\DAILY\\"+tabledate+".dat";
						 String query="bulk insert Attendancefile from '"+filepath+"'";
							int a=ad.SqlExecuteUpdate(query);
							if(a==0)
							{
								approvalsForm.setMessage("File Not Exist for date : "+filedate+"");
								cc.close();rs11.close();rscount.close();
								return mapping.findForward("emptimeentry");
							}
						
					}
					
					else
					{
						String dbname="";
						String cutoffdate="";
						String server="";
						
						if(cmpcode.equalsIgnoreCase("ML00"))
						{
						dbname="etimetracklite";	
						cutoffdate="2016-10-05";
						server="[192.168.1.127]";
						}
						if(cmpcode.equalsIgnoreCase("ML05"))
						{
						dbname="etimetracklite_pondi";	
						cutoffdate="2016-10-05";
						server="[192.168.1.127]";
						}
						if(cmpcode.equalsIgnoreCase("ML15"))
						{
						dbname="etimetracklite_api";	
						cutoffdate="2016-10-05";
						server="[192.168.1.127]";
						}
						if(cmpcode.equalsIgnoreCase("ML58"))
						{
						dbname="App91";	
						cutoffdate="2016-10-05";
						server="[192.168.15.55]";
						}
						if(cmpcode.equalsIgnoreCase("ML24"))
						{
						dbname="etimetracklite1";	
						cutoffdate="2016-10-05";
						server="[192.168.31.100]";
						}
						 String query="insert into Attendancefile select convert(nvarchar(2), FORMAT(logdate,'dd'))+convert(nvarchar(2),  FORMAT(logdate,'MM'))+convert(nvarchar(4),"
				            		+ " format(logdate,'HHmm'))+convert(nvarchar(10),userid) from "+server+"."+dbname+".[dbo].[DeviceLogs_"+rscount.getString("month")+"_"+rscount.getString("year")+"] where"
				            		+ " convert(date,LogDate)='"+filedate+"' and convert(date,LogDate)>'"+cutoffdate+"'";
				            int a=ad.SqlExecuteUpdate(query);
							if(a==0)
							{
								approvalsForm.setMessage("File Not Exist for date : "+filedate+"");
								cc.close();rs11.close();rscount.close();
								return mapping.findForward("emptimeentry");
							}
								}
				
			
				}
				else
				{
					 String query="bulk insert Attendancefile from '"+filepath+"'";
						int a=ad.SqlExecuteUpdate(query);
						if(a==0)
						{
							approvalsForm.setMessage("File Not Exist for date : "+filedate+"");
							cc.close();rs11.close();rscount.close();
							return mapping.findForward("emptimeentry");
						}
					
				}
	
				if(cmpcode.equalsIgnoreCase("ML00"))
				{
	           
					if(user.getRepgrp().equalsIgnoreCase("13"))
					{
						cmpcode="ML21";
					}
				}
				//delete old records 
				
				String query1="delete ATTENDANCE_MASTER_GATE where date='"+filedate+"' and Location='"+cmpcode+"'";
			    int a1=ad.SqlExecuteUpdate(query1);
			    
			    //insert new records
			    
				String query2="insert into ATTENDANCE_MASTER_GATE select distinct(id),'"+filedate+"','"+cmpcode+"' from Attendancefile";
			    int a2=ad.SqlExecuteUpdate(query2);
			     if(a2>0)
			     {
			    	 approvalsForm.setMessage("File Imported successfully");
			     }
			     else
			     {
			    	 approvalsForm.setMessage("Error..Please Upload Again");
			     }
			     
			     
			     String ghp="select * from ATTENDANCE_MASTER_GATE  WHERE isnumeric(ID)=0 and date='"+filedate+"' and Location='"+cmpcode+"'";
			     ResultSet d=ad.selectQuery(ghp);
			     if(d.next())
			     {
			    	 
			    	 approvalsForm.setMessage("File date "+filedate+" Contains Invalid records ....Import Unsuccessful..Contact Admin");
			    		//delete old records 
						
						String query31="delete ATTENDANCE_MASTER_GATE where date='"+filedate+"' and Location='"+cmpcode+"'";
					    int a41=ad.SqlExecuteUpdate(query31);
					    
					    String del="truncate table Attendancefile";
					    int as=ad.SqlExecuteUpdate(del);
					    
					    return mapping.findForward("emptimeentry");
			     }
			    
			    //insert into transaction
			    			    
			  	String quer3="insert into ATTENDANCE_FILE_Upload_Tran values('"+filepath+"','"+cmpcode+"','"+user.getEmployeeNo()+"',getdate())";
			    int a3=ad.SqlExecuteUpdate(quer3);
				 
				
		      /// truncatte attendancefile
			    
				 String del="truncate table Attendancefile";
			    int as=ad.SqlExecuteUpdate(del);
			    
			}}
	    }
			catch (SQLException e) {
				e.printStackTrace();
			}
		
	    try {
			cc.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    try {
			rscount.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    try {
			rs11.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return mapping.findForward("emptimeentry");
		
	}
	

	
	public int[] updateMissingAttendanceDetails(LinkedList in){

		
		
		try
		{
			
			System.out.println(in.size());
		 PreparedStatement st1=null;
		
	
			if(conn==null||conn.isClosed())
			 {
			   conn=AttConnectionFactory.getConnection();
			 }
	
		 
		   
	
			st1=conn.prepareStatement("insert into ATTENDANCE_MASTER_tran(Id,Date,Location) values (?,?,?)");
	
			 Iterator  indata=in.iterator();
		
			
			
			while(indata.hasNext()) {
				   HRApprovalForm abc=(HRApprovalForm)indata.next();
				System.out.println("Not Updated-"+abc.getFullpunch());
			st1.setString(1, abc.getFullpunch());
			st1.setString(2, abc.getPunchdate());
			st1.setString(3, abc.getPunchloc());
			st1.addBatch();
				
			}
			
			if(!in.isEmpty())
			{
				st1.executeBatch();
			}
			
		   
		   
		   
		   
	
		
				/*conn.close();*/

		 
		 
		}
		
		
			 catch (SQLException e) {
					e.printStackTrace();// TODO Change to log
					StringWriter errors = new StringWriter();
					e.printStackTrace(new PrintWriter(errors));			
					Date d=new Date();
					SimpleDateFormat ft = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
					String dateNow = ft.format(d);
					String error="insert into ERROR_DETAILS values('Attendance','"+dateNow+"','"+errors.toString()+"')";
					int i= ad.SqlExecuteUpdate(error);
					
				}
		
	
		
		
		return null; 
		
	
		
		
	}
	
	public int[] updateAttendanceDetails(LinkedList in,LinkedList datelist){
		
		
		try
		{
			
		 final int BATCH_SIZE = 300;
		 PreparedStatement st1=null;
		 PreparedStatement st2=null;
		 PreparedStatement st3=null;
		 PreparedStatement st4=null;
		 PreparedStatement st5=null;
		 PreparedStatement st6=null;
		 String value="";
		  
		   Iterator  datedata=datelist.iterator();
		   System.out.println(datelist.size());
		   System.out.println(in.size());
		   
		   while(datedata.hasNext()) {
			   
			   if(conn==null||conn.isClosed())
				 {
				   conn=AttConnectionFactory.getConnection();
				 }
			   
			   HRApprovalForm abc=(HRApprovalForm)datedata.next();
			   	value=abc.getId();
			   System.out.println(value);
			 st1=conn.prepareStatement("update EMP_IN_OUT set "+value+"=? where pernr=? and month=? and year=? and In_Out=?");
	
			 st2=conn.prepareStatement("update EMP_IN_OUT_Status set "+value+"='PP'+RIGHT("+value+",2) where pernr=? and month=? and year=? ");
			 
			 st3=conn.prepareStatement("update EMP_IN_OUT_Status set "+value+"= LEFT("+value+",2)+'PP' where pernr=? and month=? and year=? ");
			 
	
			 Iterator  indata=in.iterator();
		
			 int batch1=0;
			 int batch2=0;
			 int batch3=0;
			
			while(indata.hasNext()) {
				
				
				 if(conn==null||conn.isClosed())
				 {
					 conn=AttConnectionFactory.getConnection();
				 }

				HRApprovalForm a=(HRApprovalForm)indata.next();
			
			
				st1.setString(1,a.getTime());
				st1.setString(2,a.getEmployeeNo());
				st1.setString(3,a.getFrommonth());
				st1.setString(4,a.getCalyear());
				st1.setString(5,a.getStatus());
				if(a.getId()==null)
				{
					a.setId("");
				}
				if(a.getId().equalsIgnoreCase(value))
				{
					System.out.println(a.getEmployeeNo());
					System.out.println(a.getTime()+"-"+a.getFrommonth()+"-"+value+"-"+a.getStatus());
					
					batch1=batch1+1;
					st1.addBatch();
				}
				if(a.getStatus()==null)
				{
					a.setStatus("");
				}
				
				if(a.getMessage()==null)
				{
					a.setMessage("");
				}
				
				if(a.getStatus().equalsIgnoreCase("I"))
				{
				if(!a.getMessage().equalsIgnoreCase("S"))
				{
				st2.setString(1,a.getEmployeeNo());
				st2.setString(2,a.getFrommonth());
				st2.setString(3,a.getCalyear());
				if(a.getId().equalsIgnoreCase(value))
				{
					System.out.println(a.getEmployeeNo());
					System.out.println(a.getTime()+"-"+a.getFrommonth()+"-"+value+"-"+a.getStatus());
					batch2=batch2+1;
					st2.addBatch();
				}
				}
				
				}
				if(a.getStatus().equalsIgnoreCase("O"))
				{
					if(!a.getMessage().equalsIgnoreCase("S"))
					{
					st3.setString(1,a.getEmployeeNo());
					st3.setString(2,a.getFrommonth());
					st3.setString(3,a.getCalyear());
					if(a.getId().equalsIgnoreCase(value))
					{
						System.out.println(a.getEmployeeNo());
						System.out.println(a.getTime()+"-"+a.getFrommonth()+"-"+value+"-"+a.getStatus());
						batch3=batch3+1;
						st3.addBatch();
					}
					}
					
				}
				
				
				if (batch1 % BATCH_SIZE == BATCH_SIZE - 1)
				{
					conn=AttConnectionFactory.getConnection();
					st1.executeBatch();
					System.out.println("BATCH - 1  UPDATED");
					st1.clearBatch();
				}
				if (batch2 % BATCH_SIZE == BATCH_SIZE - 1)
				{
					conn=AttConnectionFactory.getConnection();
					st2.executeBatch();
					System.out.println("BATCH - 2  UPDATED");
					st2.clearBatch();
				}
				
				if (batch3 % BATCH_SIZE == BATCH_SIZE - 1)
				{
					conn=AttConnectionFactory.getConnection();
					st3.executeBatch();
					System.out.println("BATCH - 3  UPDATED");
					st3.clearBatch();
				}
				
				
				
					
			}
			
			
			
	
		
		
			
			    conn=AttConnectionFactory.getConnection();
				st1.executeBatch();
				System.out.println("BATCH - 1  UPDATED");
				conn=AttConnectionFactory.getConnection();
				st2.executeBatch();
				System.out.println("BATCH - 2  UPDATED");
				conn=AttConnectionFactory.getConnection();
				st3.executeBatch();
				System.out.println("BATCH - 3  UPDATED");
		
			
		   }
		   
		   
		   
	
		
				/*conn.close();*/

		 
		 
		}
		
		
			 catch (SQLException e) {
					e.printStackTrace();// TODO Change to log
					StringWriter errors = new StringWriter();
					e.printStackTrace(new PrintWriter(errors));			
					Date d=new Date();
					SimpleDateFormat ft = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
					String dateNow = ft.format(d);
					String error="insert into ERROR_DETAILS values('Attendance','"+dateNow+"','"+errors.toString()+"')";
					int i= ad.SqlExecuteUpdate(error);
					
				}
		
	
		
		
		return null; 
		
	}
		public String getempshift(int filedateday,String empno,String filedatemonth,String filedateyear)
	{
			
			conn=AttConnectionFactory.getConnection();
			String shift="";
		String currentshift="";
		String prevshift="";
		int prevday=0;
		int prevmonth=0;
		int prevyear=0;
		
		if(filedateday==1)
		{
			
			Calendar mycal = Calendar.getInstance();
			if(filedateday==Integer.parseInt(filedatemonth))
			{
			mycal.set(Integer.parseInt(filedateyear)-1, 12, 1);	
			prevmonth=12;
			prevyear=Integer.parseInt(filedateyear)-1;
			}
			else
			{
			mycal.set(Integer.parseInt(filedateyear), Integer.parseInt(filedatemonth)-2, 1);	
			prevmonth=Integer.parseInt(filedatemonth)-1;
			prevyear=Integer.parseInt(filedateyear);
			}
			
			int daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
			prevday=daysInMonth;
			
		}
		else
		{
			prevday=filedateday-1;	
			prevmonth=Integer.parseInt(filedatemonth);
			prevyear=Integer.parseInt(filedateyear);
		}
		
		  String shiftregister="Select (select Day"+filedateday+" from EMP_Shift_Register where Pernr='"+empno+"' and Month='"+filedatemonth+"' and Year='"+filedateyear+"'),(select Day"+prevday+" from EMP_Shift_Register where Pernr='"+empno+"' and Month='"+prevmonth+"' and Year='"+prevyear+"')";
		    ResultSet rsshiftregister=ad.selectQuery(shiftregister);
		    try {
				if(rsshiftregister.next())
				{
					
					currentshift=rsshiftregister.getString(1);
					prevshift=rsshiftregister.getString(2);
					shift=prevshift+","+currentshift;
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		
		try {
			rsshiftregister.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			
			
		}
		return shift;
	}
		
		public LinkedList getempleave(String filedate,String empno,String filedatemonth,String filedateyear,String location)
		{
				
				conn=AttConnectionFactory.getConnection();
			String startdate="";
			String enddate="";
			String startdur="";
			String endur="";
			String leavtype="";
			LinkedList leave=new LinkedList();
			String shiftregister="";
			if(!empno.equalsIgnoreCase(""))
			   shiftregister="select year(start_date) as year,lv_shrt,day(start_date) as stday,day(end_date) as enday ,Month(start_date) as stMon,Month(end_date) as enMon  ,start_duration,end_duration, * from leave_details , emp_official_info,  lv_type_m   where ('"+filedate+"' between start_date and end_date or convert(date,approved_date)='"+filedate+"')  and   emp_official_info.PERNR=leave_details.user_id and lv_type_m.lv_typeid =leave_details.leave_type and locid='"+location+"'  and Approvel_Status='Approved' and user_id in ("+empno+")";
			else
				  shiftregister="select year(start_date) as year,lv_shrt,day(start_date) as stday,day(end_date) as enday ,Month(start_date) as stMon,Month(end_date) as enMon  ,start_duration,end_duration, * from leave_details , emp_official_info,  lv_type_m   where ('"+filedate+"' between start_date and end_date or convert(date,approved_date)='"+filedate+"')  and   emp_official_info.PERNR=leave_details.user_id and lv_type_m.lv_typeid =leave_details.leave_type and locid='"+location+"'  and Approvel_Status='Approved'";	
			  
			  
			  ResultSet rsshiftregister=ad.selectQuery(shiftregister);
			    try {
					while(rsshiftregister.next())
					{
						LeaveForm le=new LeaveForm();
						String days="";
						le.setEmployeeNumber(rsshiftregister.getString("user_id"));
						 String countdays="SELECT day(thedate)  as day FROM dbo.ExplodeDates('"+rsshiftregister.getString("start_date")+"','"+rsshiftregister.getString("end_date")+"') as thedate";
						    ResultSet rscount=ad.selectQuery(countdays);
						    while(rscount.next())
						    {
						    	days=days+","+"Day"+rscount.getString("day");
						    }
						    rscount.close();
						    days=days.substring(1, days.length());
						le.setId(days);
						le.setStartDate(rsshiftregister.getString("stday"));
						le.setEndDate(rsshiftregister.getString("enday"));
						le.setStartDurationType(rsshiftregister.getString("start_duration"));
						le.setEndDurationType(rsshiftregister.getString("end_duration"));
						le.setLeaveType(rsshiftregister.getString("lv_shrt"));
						filedateyear=rsshiftregister.getString("year");
						
						if(rsshiftregister.getString("start_duration").equalsIgnoreCase("FD") && rsshiftregister.getString("end_duration").equalsIgnoreCase("FD"))
						{
							le.setStatus(rsshiftregister.getString("lv_shrt")+rsshiftregister.getString("lv_shrt"));
							if(rsshiftregister.getString("stMon").equalsIgnoreCase(rsshiftregister.getString("enMon")))
							{
							String a="update EMP_IN_OUT_Status set "+FullDay(Integer.parseInt(rsshiftregister.getString("stday")), Integer.parseInt(rsshiftregister.getString("enday")),le.getFrststatus(),le.getSecstatus(),le.getStatus(),Integer.parseInt(rsshiftregister.getString("stMon")),Integer.parseInt(rsshiftregister.getString("enMon")))+" where pernr="+rsshiftregister.getString("user_id")+" and month="+rsshiftregister.getString("stMon")+" and year="+filedateyear+" ";
			                int frst=ad.SqlExecuteUpdate(a);
							}
							else
							{
								String a="update EMP_IN_OUT_Status set "+FullDayPrev(Integer.parseInt(rsshiftregister.getString("stday")), Integer.parseInt(rsshiftregister.getString("enday")),le.getFrststatus(),le.getSecstatus(),le.getStatus())+" where pernr="+rsshiftregister.getString("user_id")+" and month="+rsshiftregister.getString("stMon")+" and year="+filedateyear+" ";
				                int frst=ad.SqlExecuteUpdate(a);
				                
				                for(int j=Integer.parseInt(rsshiftregister.getString("stMon"))+1;j<Integer.parseInt(rsshiftregister.getString("enMon"));j++)
				                {
				                	String a1a="update EMP_IN_OUT_Status set "+FullDay_Inbetween_month(j,filedateyear,le.getStatus())+" where pernr="+rsshiftregister.getString("user_id")+" and month="+j+" and year="+filedateyear+" ";
					                int end=ad.SqlExecuteUpdate(a1a);
				                }
				                
				            	String a1="update EMP_IN_OUT_Status set "+FullDay(Integer.parseInt(rsshiftregister.getString("stday")), Integer.parseInt(rsshiftregister.getString("enday")),le.getFrststatus(),le.getSecstatus(),le.getStatus(),Integer.parseInt(rsshiftregister.getString("stMon")),Integer.parseInt(rsshiftregister.getString("enMon")))+" where pernr="+rsshiftregister.getString("user_id")+" and month="+rsshiftregister.getString("enMon")+" and year="+filedateyear+" ";
				                int end=ad.SqlExecuteUpdate(a1);
							}
						}
						if(rsshiftregister.getString("start_duration").equalsIgnoreCase("FH") && rsshiftregister.getString("end_duration").equalsIgnoreCase("FH"))
						{
							le.setFrststatus(rsshiftregister.getString("lv_shrt"));
							if(rsshiftregister.getString("stMon").equalsIgnoreCase(rsshiftregister.getString("enMon")))
							{
							String a="update EMP_IN_OUT_Status set day"+rsshiftregister.getString("enday")+"="+FrstHalf(Integer.parseInt(rsshiftregister.getString("stday")), Integer.parseInt(rsshiftregister.getString("enday")),le.getFrststatus(),le.getSecstatus(),le.getStatus(),Integer.parseInt(rsshiftregister.getString("stMon")),Integer.parseInt(rsshiftregister.getString("enMon")))+" where pernr="+rsshiftregister.getString("user_id")+" and month="+rsshiftregister.getString("stMon")+" and year="+filedateyear+" ";
			                int frst=ad.SqlExecuteUpdate(a);
							}
							else
							{
								String a1="update EMP_IN_OUT_Status set "+FrstHalfPrev(Integer.parseInt(rsshiftregister.getString("stday")), Integer.parseInt(rsshiftregister.getString("enday")),le.getFrststatus(),le.getSecstatus(),le.getStatus())+" where pernr="+rsshiftregister.getString("user_id")+" and month="+rsshiftregister.getString("stMon")+" and year="+filedateyear+" ";
				                int frst=ad.SqlExecuteUpdate(a1);
				                
				                for(int j=Integer.parseInt(rsshiftregister.getString("stMon"))+1;j<Integer.parseInt(rsshiftregister.getString("enMon"));j++)
				                {
				                	String a1a="update EMP_IN_OUT_Status set "+FullDay_Inbetween_month(j,filedateyear,le.getStatus())+" where pernr="+rsshiftregister.getString("user_id")+" and month="+j+" and year="+filedateyear+" ";
					                int end=ad.SqlExecuteUpdate(a1a);
				                }
								
								String a="update EMP_IN_OUT_Status set day"+rsshiftregister.getString("enday")+"="+FrstHalf(Integer.parseInt(rsshiftregister.getString("stday")), Integer.parseInt(rsshiftregister.getString("enday")),le.getFrststatus(),le.getSecstatus(),le.getStatus(),Integer.parseInt(rsshiftregister.getString("stMon")),Integer.parseInt(rsshiftregister.getString("enMon")))+" where pernr="+rsshiftregister.getString("user_id")+" and month="+rsshiftregister.getString("enMon")+" and year="+filedateyear+" ";
				                int frst1=ad.SqlExecuteUpdate(a);
							}
						}
						if(rsshiftregister.getString("start_duration").equalsIgnoreCase("SH") && rsshiftregister.getString("end_duration").equalsIgnoreCase("SH"))
						{
							le.setSecstatus(rsshiftregister.getString("lv_shrt"));
							if(rsshiftregister.getString("stMon").equalsIgnoreCase(rsshiftregister.getString("enMon")))
							{
							String a="update EMP_IN_OUT_Status set day"+rsshiftregister.getString("stday")+"="+SecondHalf(Integer.parseInt(rsshiftregister.getString("stday")), Integer.parseInt(rsshiftregister.getString("enday")),le.getFrststatus(),le.getSecstatus(),le.getStatus(),Integer.parseInt(rsshiftregister.getString("stMon")),Integer.parseInt(rsshiftregister.getString("enMon")))+" where pernr="+rsshiftregister.getString("user_id")+" and month="+rsshiftregister.getString("stMon")+" and year="+filedateyear+" ";
			                int frst=ad.SqlExecuteUpdate(a);
							}
							else
							{
								String a1="update EMP_IN_OUT_Status set day"+rsshiftregister.getString("stday")+"="+SecondHalfPrev(Integer.parseInt(rsshiftregister.getString("stday")), Integer.parseInt(rsshiftregister.getString("enday")),le.getFrststatus(),le.getSecstatus(),le.getStatus())+" where pernr="+rsshiftregister.getString("user_id")+" and month="+rsshiftregister.getString("stMon")+" and year="+filedateyear+" ";
				                int frst=ad.SqlExecuteUpdate(a1);
				                
				                for(int j=Integer.parseInt(rsshiftregister.getString("stMon"))+1;j<Integer.parseInt(rsshiftregister.getString("enMon"));j++)
				                {
				                	String a1a="update EMP_IN_OUT_Status set "+FullDay_Inbetween_month(j,filedateyear,le.getStatus())+" where pernr="+rsshiftregister.getString("user_id")+" and month="+j+" and year="+filedateyear+" ";
					                int end=ad.SqlExecuteUpdate(a1a);
				                }
								
								String a="update EMP_IN_OUT_Status set "+SecondHalf(Integer.parseInt(rsshiftregister.getString("stday")), Integer.parseInt(rsshiftregister.getString("enday")),le.getFrststatus(),le.getSecstatus(),le.getStatus(),Integer.parseInt(rsshiftregister.getString("stMon")),Integer.parseInt(rsshiftregister.getString("enMon")))+" where pernr="+rsshiftregister.getString("user_id")+" and month="+rsshiftregister.getString("enMon")+" and year="+filedateyear+" ";
				                int frst1=ad.SqlExecuteUpdate(a);
							}
						}
						if(rsshiftregister.getString("start_duration").equalsIgnoreCase("FD") && rsshiftregister.getString("end_duration").equalsIgnoreCase("FH"))
						{
							le.setStatus(rsshiftregister.getString("lv_shrt")+rsshiftregister.getString("lv_shrt"));
							le.setFrststatus(rsshiftregister.getString("lv_shrt"));
							if(rsshiftregister.getString("stMon").equalsIgnoreCase(rsshiftregister.getString("enMon")))
							{
							String a="update EMP_IN_OUT_Status set day"+rsshiftregister.getString("enday")+"="+FrstHalf(Integer.parseInt(rsshiftregister.getString("stday")), Integer.parseInt(rsshiftregister.getString("enday")),le.getFrststatus(),le.getSecstatus(),le.getStatus(),Integer.parseInt(rsshiftregister.getString("stMon")),Integer.parseInt(rsshiftregister.getString("enMon")))+" where pernr="+rsshiftregister.getString("user_id")+" and month="+rsshiftregister.getString("stMon")+" and year="+filedateyear+" ";
			                int frst=ad.SqlExecuteUpdate(a);
							}
							else
							{
								String a1="update EMP_IN_OUT_Status set "+FrstHalfPrev(Integer.parseInt(rsshiftregister.getString("stday")), Integer.parseInt(rsshiftregister.getString("enday")),le.getFrststatus(),le.getSecstatus(),le.getStatus())+" where pernr="+rsshiftregister.getString("user_id")+" and month="+rsshiftregister.getString("stMon")+" and year="+filedateyear+" ";
				                int frst=ad.SqlExecuteUpdate(a1);
				                
				                for(int j=Integer.parseInt(rsshiftregister.getString("stMon"))+1;j<Integer.parseInt(rsshiftregister.getString("enMon"));j++)
				                {
				                	String a1a="update EMP_IN_OUT_Status set "+FullDay_Inbetween_month(j,filedateyear,le.getStatus())+" where pernr="+rsshiftregister.getString("user_id")+" and month="+j+" and year="+filedateyear+" ";
					                int end=ad.SqlExecuteUpdate(a1a);
				                }
								
								String a="update EMP_IN_OUT_Status set day"+rsshiftregister.getString("enday")+"="+FrstHalf(Integer.parseInt(rsshiftregister.getString("stday")), Integer.parseInt(rsshiftregister.getString("enday")),le.getFrststatus(),le.getSecstatus(),le.getStatus(),Integer.parseInt(rsshiftregister.getString("stMon")),Integer.parseInt(rsshiftregister.getString("enMon")))+" where pernr="+rsshiftregister.getString("user_id")+" and month="+rsshiftregister.getString("enMon")+" and year="+filedateyear+" ";
				                int frst1=ad.SqlExecuteUpdate(a);
							}
						}
						if(rsshiftregister.getString("start_duration").equalsIgnoreCase("SH") && rsshiftregister.getString("end_duration").equalsIgnoreCase("FD"))
						{
							le.setStatus(rsshiftregister.getString("lv_shrt")+rsshiftregister.getString("lv_shrt"));
							le.setSecstatus(rsshiftregister.getString("lv_shrt"));
							if(rsshiftregister.getString("stMon").equalsIgnoreCase(rsshiftregister.getString("enMon")))
							{
							String a="update EMP_IN_OUT_Status set day"+rsshiftregister.getString("stday")+"="+SecondHalf(Integer.parseInt(rsshiftregister.getString("stday")), Integer.parseInt(rsshiftregister.getString("enday")),le.getFrststatus(),le.getSecstatus(),le.getStatus(),Integer.parseInt(rsshiftregister.getString("stMon")),Integer.parseInt(rsshiftregister.getString("enMon")))+" where pernr="+rsshiftregister.getString("user_id")+" and month="+rsshiftregister.getString("stMon")+" and year="+filedateyear+" ";
			                int frst=ad.SqlExecuteUpdate(a);
							}
							else
							{
								String a1="update EMP_IN_OUT_Status set day"+rsshiftregister.getString("stday")+"="+SecondHalfPrev(Integer.parseInt(rsshiftregister.getString("stday")), Integer.parseInt(rsshiftregister.getString("enday")),le.getFrststatus(),le.getSecstatus(),le.getStatus())+" where pernr="+rsshiftregister.getString("user_id")+" and month="+rsshiftregister.getString("stMon")+" and year="+filedateyear+" ";
				                int frst=ad.SqlExecuteUpdate(a1);
				                
				                for(int j=Integer.parseInt(rsshiftregister.getString("stMon"))+1;j<Integer.parseInt(rsshiftregister.getString("enMon"));j++)
				                {
				                	String a1a="update EMP_IN_OUT_Status set "+FullDay_Inbetween_month(j,filedateyear,le.getStatus())+" where pernr="+rsshiftregister.getString("user_id")+" and month="+j+" and year="+filedateyear+" ";
					                int end=ad.SqlExecuteUpdate(a1a);
				                }
								
								String a="update EMP_IN_OUT_Status set "+SecondHalf(Integer.parseInt(rsshiftregister.getString("stday")), Integer.parseInt(rsshiftregister.getString("enday")),le.getFrststatus(),le.getSecstatus(),le.getStatus(),Integer.parseInt(rsshiftregister.getString("stMon")),Integer.parseInt(rsshiftregister.getString("enMon")))+" where pernr="+rsshiftregister.getString("user_id")+" and month="+rsshiftregister.getString("enMon")+" and year="+filedateyear+" ";
				                int frst1=ad.SqlExecuteUpdate(a);
							}
						}
						if(rsshiftregister.getString("start_duration").equalsIgnoreCase("SH") && rsshiftregister.getString("end_duration").equalsIgnoreCase("FH"))
						{

							le.setStatus(rsshiftregister.getString("lv_shrt")+rsshiftregister.getString("lv_shrt"));
							le.setSecstatus(rsshiftregister.getString("lv_shrt"));
							le.setFrststatus(rsshiftregister.getString("lv_shrt"));
							if(rsshiftregister.getString("stMon").equalsIgnoreCase(rsshiftregister.getString("enMon")))
							{
							String a="update EMP_IN_OUT_Status set day"+rsshiftregister.getString("stday")+"="+SecondHalf_firstHalf(Integer.parseInt(rsshiftregister.getString("stday")), Integer.parseInt(rsshiftregister.getString("enday")),le.getFrststatus(),le.getSecstatus(),le.getStatus())+" where pernr="+rsshiftregister.getString("user_id")+" and month="+rsshiftregister.getString("stMon")+" and year="+filedateyear+" ";
			                int frst=ad.SqlExecuteUpdate(a);
							}
							else
							{
								String a1="update EMP_IN_OUT_Status set day"+rsshiftregister.getString("stday")+"="+SecondHalfPrev(Integer.parseInt(rsshiftregister.getString("stday")), Integer.parseInt(rsshiftregister.getString("enday")),le.getFrststatus(),le.getSecstatus(),le.getStatus())+" where pernr="+rsshiftregister.getString("user_id")+" and month="+rsshiftregister.getString("stMon")+" and year="+filedateyear+" ";
				                int frst=ad.SqlExecuteUpdate(a1);
								
				                for(int j=Integer.parseInt(rsshiftregister.getString("stMon"))+1;j<Integer.parseInt(rsshiftregister.getString("enMon"));j++)
				                {
				                	String a1a="update EMP_IN_OUT_Status set "+FullDay_Inbetween_month(j,filedateyear,le.getStatus())+" where pernr="+rsshiftregister.getString("user_id")+" and month="+j+" and year="+filedateyear+" ";
					                int end=ad.SqlExecuteUpdate(a1a);
				                }
				                
								String a="update EMP_IN_OUT_Status set day"+rsshiftregister.getString("enday")+"="+FrstHalf(Integer.parseInt(rsshiftregister.getString("stday")), Integer.parseInt(rsshiftregister.getString("enday")),le.getFrststatus(),le.getSecstatus(),le.getStatus(),Integer.parseInt(rsshiftregister.getString("stMon")),Integer.parseInt(rsshiftregister.getString("enMon")))+" where pernr="+rsshiftregister.getString("user_id")+" and month="+rsshiftregister.getString("enMon")+" and year="+filedateyear+" ";
				                int frst1=ad.SqlExecuteUpdate(a);
							}
						
							
						}
					 le.setMonth(filedatemonth);
					 le.setYear(Integer.parseInt(filedateyear));
						
						leave.add(le);
						
					}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		
			    try {
					rsshiftregister.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			    
			return leave;
		}
		
		public String getrailwaytime(String time)
		{
			String reqtime="";
			
		  
		      //Format of the date defined in the input String
		      DateFormat df = new SimpleDateFormat("hh:mm aa");
		      //Desired format: 24 hour format: Change the pattern as per the need
		      DateFormat outputformat = new SimpleDateFormat("HH:mm");
		      Date date = null;
		  
		      try{
		         //Converting the input String to Date
		    	 date= df.parse(time);
		         //Changing the format of date and storing it in String
		    	 reqtime = outputformat.format(date);
		         //Displaying the date
		    	 System.out.println(reqtime);
		      }catch(ParseException pe){
		         pe.printStackTrace();
		       }
		   
			
			return reqtime;
		}
		
		
		public String timediff(String time1,String time2)
		{
		

				String hours="";

				//HH converts hour in 24 hours format (0-23), day calculation
				SimpleDateFormat format = new SimpleDateFormat("HH:mm");

				Date d1 = null;
				Date d2 = null;

				try {
					d1 = format.parse(time1);
					d2 = format.parse(time2);

					//in milliseconds
					long diff = d2.getTime() - d1.getTime();

					long diffSeconds = diff / 1000 % 60;
					long diffMinutes = diff / (60 * 1000) % 60;
					long diffHours = diff / (60 * 60 * 1000) % 24;
					long diffDays = diff / (24 * 60 * 60 * 1000);

				long value=(diffHours*60)+diffMinutes;
					
					hours=Long.toString(value);
				} catch (Exception e) {
					e.printStackTrace();
				}

		
				
				return hours;
				
			}
		
		public String[] getshifttimings(int day,String empcode,String month,String year)
		{

			String shftstrtime="";
			String shftendtime="";
			String firsthalfend="";
			String sechalfstart="";
			
			
			
			
			  String timings="";
			  String shiftregister="select * from EMP_SHIFT_MASTER,EMP_SHIFT_LATE_RULES where Shift_code=(select day"+day+" from EMP_Shift_Register where Pernr='"+empcode+"' and Month='"+month+"' and Year='"+year+"') and EMP_SHIFT_MASTER.Shift_code=EMP_SHIFT_LATE_RULES.Rule_Code";
			    ResultSet rsshiftregister=ad.selectQuery(shiftregister);
			    try {
					if(rsshiftregister.next())
					{
						
						shftstrtime=rsshiftregister.getString("Shift_start_time");
						shftendtime=rsshiftregister.getString("Shift_End_Time");
						firsthalfend=rsshiftregister.getString("First_Half_End_Time");
						sechalfstart=rsshiftregister.getString("SH_Start_Time");
						
						timings=shftstrtime+","+shftendtime+","+firsthalfend+","+sechalfstart;
					}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			    

			    
			    String a[]=timings.split(",");
			
				try {
					rsshiftregister.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					
					
				}
			return a;
		}
		
		public LinkedList getcompoff(String filedate,String empno,int filedateday,String filedatemonth,String filedateyear,String location)
		{

			
			conn=AttConnectionFactory.getConnection();
		String startdate="";
		String enddate="";
		String startdur="";
		String endur="";
		String leavtype="";
		LinkedList compff=new LinkedList();
		String empshift="";
	
		
		String com="";
		String shiftregister="";
		if(!empno.equalsIgnoreCase(""))		
		 com="Select left(DATENAME (month,FromDate),3)  as monthname,day(FromDate) as day,month(FromDate) as mon,year(FromDate) as year,* from COMP_OT,emp_official_info  where ('"+filedate+"' between FromDate and todate or convert(date,ApprvdDate)='"+filedate+"') and COMP_OT.Pernr=emp_official_info.PERNR and SAP_Approved=0 and locid='"+location+"' and  comp_ot.ApprvrStatus='Approved' and emp_official_info.pernr in ("+empno+")";
		else
		 com="Select left(DATENAME (month,FromDate),3)  as monthname,day(FromDate) as day,month(FromDate) as mon,year(FromDate) as year,* from COMP_OT,emp_official_info  where ('"+filedate+"' between FromDate and todate or convert(date,ApprvdDate)='"+filedate+"') and COMP_OT.Pernr=emp_official_info.PERNR and SAP_Approved=0 and locid='"+location+"' and  comp_ot.ApprvrStatus='Approved'";
			
		
		
		
		ResultSet a1 = ad.selectQuery(com);
		String shifttime[]=new String[0];
		try {
			while (a1.next()) {
				boolean allow=false;
				LeaveForm l = new LeaveForm();
				l.setEmployeeNumber(Integer.toString(a1.getInt("Pernr")));
				l.setStartDate(a1.getString("FromDate"));
				l.setEndDate(a1.getString("ToDate"));
				l.setNofhrs(a1.getString("NoHRS"));
				l.setShift(a1.getString("Applicabale"));
				l.setLocationId(a1.getString("LOCID"));
				l.setRequestNumber(a1.getInt("SAP_ReqNo"));
				shifttime=getshifttimings(Integer.parseInt(a1.getString("day")), a1.getString("Pernr"), a1.getString("mon"),  a1.getString("year"));
				   String shftstart="";
				     String shftend="";
				     
				     if(shifttime.length!=0)
				     {
			          shftstart=shifttime[0].substring(0, 5);
				      shftend=shifttime[1].substring(0, 5);
				 
				     }
				     String punchtime="";
				     String intime="";
				     String outime="";
               String flat="select left(max(a),5) as intime,left(max(b),5) as outime from (select case when In_Out='I' then day"+a1.getString("day")+"  end  as a,case when In_Out='O' then day"+a1.getString("day")+"  end as b from EMP_IN_OUT where Pernr='"+a1.getInt("Pernr")+"' and Month='"+a1.getString("mon")+"' and Year='"+a1.getString("year")+"' )t";
               ResultSet rssempoffr=ad.selectQuery(flat);
               while(rssempoffr.next())
			    {
            	  	   intime=rssempoffr.getString("intime");
            	      outime=rssempoffr.getString("outime");
                }
               rssempoffr.close();
               String value="";
               String cou="";
               String table="";
               //check emp cal
               
               String empca="Select count(*) as cou from EMP_CAL where Pernr='"+a1.getInt("Pernr")+"' and CYEAR='"+a1.getInt("year")+"'";
               ResultSet ac=ad.selectQuery(empca);
               if(ac.next())
               {
            	  cou=ac.getString(1); 
               }
               ac.close();
               
               if(cou.equalsIgnoreCase("0"))
               {
                table="select "+a1.getString("monthname")+" as m from "+getTableName(a1.getString("LOCID"))+" where DAY='"+a1.getString("day")+"' and CYEAR='"+a1.getInt("year")+"' ";
               }
               else
               {
            	 table="select "+a1.getString("monthname")+" as m from EMP_CAL where DAY='"+a1.getString("day")+"' and  Pernr='"+a1.getInt("Pernr")+"' and CYEAR='"+a1.getInt("year")+"' "; 
               }
               
				  ResultSet rstable=ad.selectQuery(table);
				  while(rstable.next())
					  
					{
					  
					  value=rstable.getString("m");
					}
				  rstable.close();
               
               String nohrs="";
               
               if(value.equalsIgnoreCase("W"))
               {
               if(a1.getString("Applicabale").equals("BS"))
        	   {
            	   if(!(intime.equalsIgnoreCase("00:00")))
    			   {
        		    nohrs=timediff(intime, shftstart);
        		    nohrs= Integer.toString(Math.abs(Integer.parseInt(nohrs)));
        		   System.out.println(nohrs);
    			   }
            	   else
            	   {
            		   nohrs="0"; 
            	   }
        	   }
               
               if(a1.getString("Applicabale").equals("AS"))
        	   {
            	   if(!outime.equalsIgnoreCase("00:00"))
    			   {
        		    nohrs=timediff(shftend, outime);
        		    nohrs= Integer.toString(Math.abs(Integer.parseInt(nohrs)));
        		   System.out.println(nohrs);
    			   }
            	 //Arun 21/05/2016 Empty "" error came so kept this validation line 1
            	   else
            	   {
            		   nohrs="0"; 
            		   
            	   }  
        	   }
               }
               else
               {
            	   if(!(intime.equalsIgnoreCase("00:00") || outime.equalsIgnoreCase("00:00")))
            			   {
            		   if(intime.compareTo(outime)>=0)
                           outime=Integer.toString(Integer.parseInt(outime.substring(0, 2))+24)+outime.substring(2, 5);
            		   
            	   nohrs=timediff(intime, outime);
            	   nohrs= Integer.toString(Math.abs(Integer.parseInt(nohrs)));
        		   System.out.println(nohrs);
            			   }
            	   else
            	   {
            		   nohrs="0";
            	   }
               }
               //Arun 21/05/2016 Empty "" error came so kept this validation line 1
            
               
               if(!a1.getString("NoHRS").equalsIgnoreCase(""))
               {
            	   
               
               if(a1.getString("NoHRS").equalsIgnoreCase("4"))
               {
                if(Integer.parseInt(nohrs)>=240)
                {
                	allow=true;
                	l.setNoOfDays("0.5");
                }
               }
               if(a1.getString("NoHRS").equalsIgnoreCase("8"))
               {
            	   if(Integer.parseInt(nohrs)>=480)
                   {
                   	allow=true;
                   	l.setNoOfDays("1");
                   }
               }
               }   
               if(allow==true)
               {
            	  
            	   SimpleDateFormat ft = new SimpleDateFormat("yyyy-MM-dd");
					String strt=l.getStartDate();
					String end=l.getEndDate();
					String compaviled="";
					String thirtyFromdat="";
					try {
					Calendar cal = Calendar.getInstance();
					cal.setTime(ft.parse(strt));
					cal.add(Calendar.DATE, 31);
					thirtyFromdat = ft.format(cal.getTime());
					} catch (ParseException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
					String insetrt="insert into COMP_OT_SAP(Calendar_Year,Employee_Number,Start_Date,End_Date,Number_of_Days,Actual_Time,From_Time,End_Time,Comp_Off_Availed_Date,Comp_Off_Balance,LapsBydate) "
							+ "values('"+a1.getString("year")+"','"+a1.getString("Pernr")+"','"+strt+"','"+end+"','"+l.getNoOfDays()+"','"+nohrs+"','"+intime+"','"+outime+"',"
									+ "'"+compaviled+"','"+l.getNoOfDays()+"','"+thirtyFromdat+"')";
			    	 int j=ad.SqlExecuteUpdatePrmaryKeys(insetrt);
			    	 
			       	float comOpBal=0;
		        	float comAvaiBal=0;
		        	float comCloBal=0;
		  
		        	if(j>0)
		        	{
		        		
		        		//update main table 
		        		String d="Update COMP_OT set SAP_Approved=1 where Req_no='"+a1.getString("Req_no")+"' and SAP_ReqNo='"+a1.getInt("SAP_ReqNo")+"'";
		        		int jd=ad.SqlExecuteUpdatePrmaryKeys(d);
		        		
		        	/*///Get balance from comptable
		        		String bal="select year(Start_Date) as year,sum(Number_of_Days) as openbal,sum(Comp_Off_Availed_Days) as avbal,sum(Comp_Off_Balance) as clobal from COMP_OT_SAP where Employee_Number='"+a1.getString("pernr")+"'  and Comp_Off_Balance>0  and  DATEDIFF(DAY,Start_Date,'"+startDate+"') <=30 group by Start_Date";
		       	    ResultSet ba=ad.selectQuery(bal);
		       	 try {
					while (ba.next ()) 
						{
						    comOpBal=comOpBal+ba.getFloat("openbal");
							comAvaiBal=comAvaiBal+ba.getFloat("avbal");
							comCloBal=comCloBal+ba.getFloat("clobal");
						}
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
		        	
		           	 //Check comp balance availabe
		        	

		           	 int balpresent=0;
		           	 String coun="select count(*) from lv_type_d where lv_empcode='"+a1.getString("Pernr")+"' and lv_typeid='6' and lv_calyear='"+a1.getString("year")+"'";
		           	 ResultSet as=ad.selectQuery(coun);
		           	 try {
						while (as.next ()) 
						{
							
							balpresent=as.getInt(1);
							
						}
					} catch (SQLException e) {				
						e.printStackTrace();
					}
		        	
		        	 if(balpresent==0)
		           	 {
		       	 //insert into lv_type
		       	 String insertinto="insert into lv_type_d(lv_typeid,lv_calyear,lv_empcode,lv_opbal,lv_availed,lv_clbal,lv_awtBal) values(6,'"+a1.getString("year")+"','"+a1.getString("Pernr")+"','"+comOpBal+"','"+comAvaiBal+"','"+comCloBal+"',0)";
		       	  j=ad.SqlExecuteUpdatePrmaryKeys(insertinto);
		           	 }
		           	 
		           	 else
		           	 {
		          String update="update lv_type_d set lv_opbal="+comOpBal+",lv_clbal="+comCloBal+" where lv_empcode='"+a1.getString("Pernr")+"' and lv_calyear='"+a1.getString("year")+"' and lv_typeid='6'";
		           j=ad.SqlExecuteUpdatePrmaryKeys(update);
		           	 }
		        	}
			    	 */
		        	} 
               }
               
		
			
			}
		}catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		try {
			a1.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	
		return compff;
	
			
		}
		
		public String FrstHalf(int startday,int endday,String frst,String second,String full,int stmont,int enmonth)
		{
			
			String value="'"+frst+"'+RIGHT(Day"+endday+",2)";
			
			if(stmont==enmonth)
			{
			for(int i=startday;i<=endday-1;i++)
			{
				
				
				value=value+",Day"+i+"='"+full+"'";
			}
			}
			else
			{
				for(int i=1;i<=endday-1;i++)
				{
					
					
					value=value+",Day"+i+"='"+full+"'";
				}
				
				
			}
			
			
			
			return value;
		}
		
		
		public String FrstHalfPrev(int startday,int endday,String frst,String second,String full)
		{
			
			String value="";
			
			for(int i=startday;i<=31;i++)
			{
				
				
				value=value+",Day"+i+"='"+full+"'";
			}
			value=value.substring(1, value.length());
			
			
			
			return value;
		}
		
		public String SecondHalf(int startday,int endday,String frst,String second,String full,int stmont,int enmonth)
		{
			
			String value="LEFT(Day"+startday+",2)+"+"'"+second+"'";
			
			if(stmont==enmonth)
			{
			for(int i=startday+1;i<=endday;i++)
			{
				
				
				value=value+",Day"+i+"='"+full+"'";
			}
			}
			else
			{
				value="";
				for(int i=1;i<=endday;i++)
				{
					
					
					value=value+",Day"+i+"='"+full+"'";
				}
				value=value.substring(1, value.length());
			}
			
			
			
			return value;
		}
		public String SecondHalf_firstHalf(int startday,int endday,String frst,String second,String full)
		{
			
			String value="LEFT(Day"+startday+",2)+"+"'"+second+"'";
			
			if(startday<=endday)
			{
			for(int i=startday+1;i<=endday;i++)
			{
				
				if(i<endday)
				value=value+",Day"+i+"='"+full+"'";
				else
			    value=value+",Day"+i+"='"+second+"'+RIGHT(Day"+endday+",2)";	
				
			}
			}
			else
			{
				for(int i=1;i<=endday;i++)
				{
					
					
					value=value+",Day"+i+"='"+full+"'";
				}
				value=value.substring(1, value.length());
			}
			
			
			
			return value;
		}
		
		public String SecondHalfPrev(int startday,int endday,String frst,String second,String full)
		{
			
			String value="LEFT(Day"+startday+",2)+"+"'"+second+"'";
			
			for(int i=startday+1;i<=31;i++)
			{
				
				
				value=value+",Day"+i+"='"+full+"'";
			}
			
			
			
			return value;
		}
		
		public String FullDay(int startday,int endday,String frst,String second,String full,int stmont,int enmonth)
		{
			
			String value="";
			
			if(stmont==enmonth)
			{
			
			for(int i=startday;i<=endday;i++)
			{
				
				
				value=value+",Day"+i+"='"+full+"'";
			}
			 value=value.substring(1, value.length());
			
			}
			else
			{
				for(int i=1;i<=endday;i++)
				{
					
					
					value=value+",Day"+i+"='"+full+"'";
				}
				 value=value.substring(1, value.length());
			}
			
			return value;
		}
		
		
		public String FullDay_Inbetween_month(int month,String year,String full)
		{
			
			String value="";
			
			Calendar mycal = Calendar.getInstance();

			mycal.set(Integer.parseInt(year), month-1, 1);
			
			// Get the number of days in that month
			int daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
			
			
				for(int i=1;i<=daysInMonth;i++)
				{
					
					
					value=value+",Day"+i+"='"+full+"'";
				}
				 value=value.substring(1, value.length());
			
			
			return value;
		}
		
		public String FullDayPrev(int startday,int endday,String frst,String second,String full)
		{
			
			String value="";
			
			for(int i=startday;i<=31;i++)
			{
				
				
				value=value+",Day"+i+"='"+full+"'";
			}
			 value=value.substring(1, value.length());
			
			
			return value;
		}
		
		public LinkedList getemponduty(String filedate,String empno,int filedateday,String filedatemonth,String filedateyear,String location)
		{
				
				conn=AttConnectionFactory.getConnection();
			String startdate="";
			String enddate="";
			String startdur="";
			String endur="";
			String leavtype="";
			LinkedList onduty=new LinkedList();
			String empshift="";
			String shiftregister="";
			if(!empno.equalsIgnoreCase(""))
			   shiftregister="select year(start_date) as year,day(start_date) as stday,day(end_date) as enday  ,Month(start_date) as stMon,Month(end_date) as enMon  ,left(startTime,5)+' '+right(startTime,2) as startTime1,left(endTime,5)+' '+right(endTime,2) as endTime1, * from OnDuty_details , emp_official_info   where ('"+filedate+"' between start_date and end_date or convert(date,approved_date)='"+filedate+"')  and   emp_official_info.PERNR=OnDuty_details.user_id  and locid='"+location+"' and Approver_Status='Approved' and user_id in("+empno+")";
			else
				 shiftregister="select year(start_date) as year,day(start_date) as stday,day(end_date) as enday  ,Month(start_date) as stMon,Month(end_date) as enMon  ,left(startTime,5)+' '+right(startTime,2) as startTime1,left(endTime,5)+' '+right(endTime,2) as endTime1, * from OnDuty_details , emp_official_info   where ('"+filedate+"' between start_date and end_date or convert(date,approved_date)='"+filedate+"')  and   emp_official_info.PERNR=OnDuty_details.user_id  and locid='"+location+"' and Approver_Status='Approved'";
			
			
			    ResultSet rsshiftregister=ad.selectQuery(shiftregister);
			    try {
					while(rsshiftregister.next())
					{
						String days="";
						String stringdays="";
						OnDutyForm le=new OnDutyForm();
						 empno=rsshiftregister.getString("user_id");
						 filedateyear=rsshiftregister.getString("year");
						    
					     empshift=getempshift(filedateday, empno, filedatemonth, filedateyear);
					     String shifttime[]=new String[0];
					    
					     String empshiftmaster[]=new String[0];
					     
					     
					     if(!empshift.equalsIgnoreCase(""))
					     {
					    	 empshiftmaster=empshift.split(",");
					      shifttime=getempshifttime(empshiftmaster[1]);
					   
					     }
					     String shftstart="";
					     String shftend="";
					     String frsthalfend="";
					     String sechalfstart="";
					     
					     
					     if(shifttime.length!=0)
					     {
				          shftstart=shifttime[0].substring(0, 5);
					      shftend=shifttime[1].substring(0, 5);
					      frsthalfend=shifttime[2].substring(0, 5);
					      sechalfstart=shifttime[3].substring(0, 5);
					     }
						
						
						le.setEmployeeNumber(rsshiftregister.getString("user_id"));
						le.setStartDate(rsshiftregister.getString("start_date"));
						le.setEndDate(rsshiftregister.getString("end_date"));
						le.setStartTime(getrailwaytime(rsshiftregister.getString("startTime1")));
						le.setEndTime(getrailwaytime(rsshiftregister.getString("endTime1")));
						
					   
					   
					   
						/* String countdays="SELECT day(thedate)  as day FROM dbo.ExplodeDates('"+rsshiftregister.getString("start_date")+"','"+rsshiftregister.getString("end_date")+"') as thedate";
						    ResultSet rscount=ad.selectQuery(countdays);
						    while(rscount.next())
						    {
						    	days=days+","+"Day"+rscount.getString("day");
						    	frs
						    }*/
						
						le.setId(days);
						
						if(le.getStartDate().compareTo(le.getEndDate())==0)
						{
						if(le.getStartTime().compareTo(shftstart)<=0 && le.getEndTime().compareTo(shftend)>=0)
						{
							le.setStatus("ODOD");
							String a="update EMP_IN_OUT_Status set "+FullDay(Integer.parseInt(rsshiftregister.getString("stday")), Integer.parseInt(rsshiftregister.getString("enday")),le.getFrststatus(),le.getSecstatus(),le.getStatus(),Integer.parseInt(rsshiftregister.getString("stMon")),Integer.parseInt(rsshiftregister.getString("enMon")))+" where pernr="+rsshiftregister.getString("user_id")+" and month="+rsshiftregister.getString("stMon")+" and year="+filedateyear+" ";
			                int frst=ad.SqlExecuteUpdate(a);
						}
						else if(le.getStartTime().compareTo(shftstart)<=0 && le.getEndTime().compareTo(frsthalfend)>=0 && le.getEndTime().compareTo(sechalfstart)<=0)
						{
						
							le.setFrststatus("OD");
							String a="update EMP_IN_OUT_Status set day"+rsshiftregister.getString("enday")+"="+FrstHalf(Integer.parseInt(rsshiftregister.getString("stday")), Integer.parseInt(rsshiftregister.getString("enday")),le.getFrststatus(),le.getSecstatus(),le.getStatus(),Integer.parseInt(rsshiftregister.getString("stMon")),Integer.parseInt(rsshiftregister.getString("enMon")))+" where pernr="+rsshiftregister.getString("user_id")+" and month="+rsshiftregister.getString("stMon")+" and year="+filedateyear+" ";
			                int frst=ad.SqlExecuteUpdate(a);
						}
						else if(le.getEndTime().compareTo(shftend)>=0 && le.getStartTime().compareTo(frsthalfend)>=0 && le.getStartTime().compareTo(sechalfstart)<=0)
						{
							le.setSecstatus("OD");
							String a="update EMP_IN_OUT_Status set day"+rsshiftregister.getString("stday")+"="+SecondHalf(Integer.parseInt(rsshiftregister.getString("stday")), Integer.parseInt(rsshiftregister.getString("enday")),le.getFrststatus(),le.getSecstatus(),le.getStatus(),Integer.parseInt(rsshiftregister.getString("stMon")),Integer.parseInt(rsshiftregister.getString("enMon")))+" where pernr="+rsshiftregister.getString("user_id")+" and month="+rsshiftregister.getString("stMon")+" and year="+filedateyear+" ";
			                int frst=ad.SqlExecuteUpdate(a);
						}
						
						else if(le.getStartTime().compareTo(shftstart)>=0 && (le.getEndTime().compareTo(shftend)<=0 || le.getEndTime().compareTo(shftend)>=0))
						{
							le.setStatus("ODOD");
							String a="update EMP_IN_OUT_Status set "+FullDay(Integer.parseInt(rsshiftregister.getString("stday")), Integer.parseInt(rsshiftregister.getString("enday")),le.getFrststatus(),le.getSecstatus(),le.getStatus(),Integer.parseInt(rsshiftregister.getString("stMon")),Integer.parseInt(rsshiftregister.getString("enMon")))+" where pernr="+rsshiftregister.getString("user_id")+" and month="+rsshiftregister.getString("stMon")+" and year="+filedateyear+" ";
			                int frst=ad.SqlExecuteUpdate(a);
						}
						else if(le.getStartTime().compareTo(shftstart)<=0 && le.getEndTime().compareTo(frsthalfend)<=0)
						{
						
							le.setFrststatus("OD");
							String a="update EMP_IN_OUT_Status set day"+rsshiftregister.getString("enday")+"="+FrstHalf(Integer.parseInt(rsshiftregister.getString("stday")), Integer.parseInt(rsshiftregister.getString("enday")),le.getFrststatus(),le.getSecstatus(),le.getStatus(),Integer.parseInt(rsshiftregister.getString("stMon")),Integer.parseInt(rsshiftregister.getString("enMon")))+" where pernr="+rsshiftregister.getString("user_id")+" and month="+rsshiftregister.getString("stMon")+" and year="+filedateyear+" ";
			                int frst=ad.SqlExecuteUpdate(a);
						}
						else if(le.getStartTime().compareTo(shftstart)<=0 && le.getEndTime().compareTo(frsthalfend)>0)
						{
						
							le.setStatus("ODOD");
							String a="update EMP_IN_OUT_Status set "+FullDay(Integer.parseInt(rsshiftregister.getString("stday")), Integer.parseInt(rsshiftregister.getString("enday")),le.getFrststatus(),le.getSecstatus(),le.getStatus(),Integer.parseInt(rsshiftregister.getString("stMon")),Integer.parseInt(rsshiftregister.getString("enMon")))+" where pernr="+rsshiftregister.getString("user_id")+" and month="+rsshiftregister.getString("stMon")+" and year="+filedateyear+" ";
			                int frst=ad.SqlExecuteUpdate(a);
						}
						
						if(le.getStatus()==null)
						{
							le.setStatus("");
						}
						if(le.getFrststatus()==null)
						{
							le.setFrststatus("");
						}
						if(le.getSecstatus()==null)
						{
							le.setSecstatus("");
						}
					
				
						}
							
						else
						{
							if(le.getStartTime().compareTo(shftstart)<=0 && le.getEndTime().compareTo(sechalfstart)>=0 )
							{
								le.setStatus("ODOD");
								
								if(rsshiftregister.getString("stMon").equalsIgnoreCase(rsshiftregister.getString("enMon")))
								{
								String a="update EMP_IN_OUT_Status set "+FullDay(Integer.parseInt(rsshiftregister.getString("stday")), Integer.parseInt(rsshiftregister.getString("enday")),le.getFrststatus(),le.getSecstatus(),le.getStatus(),Integer.parseInt(rsshiftregister.getString("stMon")),Integer.parseInt(rsshiftregister.getString("enMon")))+" where pernr="+rsshiftregister.getString("user_id")+" and month="+rsshiftregister.getString("stMon")+" and year="+filedateyear+" ";
				                int frst=ad.SqlExecuteUpdate(a);
								}
								else
								{
									String a="update EMP_IN_OUT_Status set "+FullDayPrev(Integer.parseInt(rsshiftregister.getString("stday")), Integer.parseInt(rsshiftregister.getString("enday")),le.getFrststatus(),le.getSecstatus(),le.getStatus())+" where pernr="+rsshiftregister.getString("user_id")+" and month="+rsshiftregister.getString("stMon")+" and year="+filedateyear+" ";
					                int frst=ad.SqlExecuteUpdate(a);
					                
					                for(int j=Integer.parseInt(rsshiftregister.getString("stMon"))+1;j<Integer.parseInt(rsshiftregister.getString("enMon"));j++)
					                {
					                	String a1="update EMP_IN_OUT_Status set "+FullDay_Inbetween_month(j,filedateyear,le.getStatus())+" where pernr="+rsshiftregister.getString("user_id")+" and month="+j+" and year="+filedateyear+" ";
						                int end=ad.SqlExecuteUpdate(a1);
					                }
					                
					                
					            	String a1="update EMP_IN_OUT_Status set "+FullDay(Integer.parseInt(rsshiftregister.getString("stday")), Integer.parseInt(rsshiftregister.getString("enday")),le.getFrststatus(),le.getSecstatus(),le.getStatus(),Integer.parseInt(rsshiftregister.getString("stMon")),Integer.parseInt(rsshiftregister.getString("enMon")))+" where pernr="+rsshiftregister.getString("user_id")+" and month="+rsshiftregister.getString("enMon")+" and year="+filedateyear+" ";
					                int end=ad.SqlExecuteUpdate(a1);
								}
							
							}
							else if(le.getStartTime().compareTo(frsthalfend)>=0 && (le.getEndTime().compareTo(shftend)<=0 || le.getEndTime().compareTo(shftend)>=0))
							{
							 	le.setStatus("ODOD");
								le.setSecstatus("OD");
								
								if(rsshiftregister.getString("stMon").equalsIgnoreCase(rsshiftregister.getString("enMon")))
								{
								String a="update EMP_IN_OUT_Status set day"+rsshiftregister.getString("stday")+"="+SecondHalf(Integer.parseInt(rsshiftregister.getString("stday")), Integer.parseInt(rsshiftregister.getString("enday")),le.getFrststatus(),le.getSecstatus(),le.getStatus(),Integer.parseInt(rsshiftregister.getString("stMon")),Integer.parseInt(rsshiftregister.getString("enMon")))+" where pernr="+rsshiftregister.getString("user_id")+" and month="+rsshiftregister.getString("stMon")+" and year="+filedateyear+" ";
				                int frst=ad.SqlExecuteUpdate(a);
								}
								else

								{
									String a1="update EMP_IN_OUT_Status set day"+rsshiftregister.getString("stday")+"="+SecondHalfPrev(Integer.parseInt(rsshiftregister.getString("stday")), Integer.parseInt(rsshiftregister.getString("enday")),le.getFrststatus(),le.getSecstatus(),le.getStatus())+" where pernr="+rsshiftregister.getString("user_id")+" and month="+rsshiftregister.getString("stMon")+" and year="+filedateyear+" ";
					                int frst=ad.SqlExecuteUpdate(a1);
					                
					                for(int j=Integer.parseInt(rsshiftregister.getString("stMon"))+1;j<Integer.parseInt(rsshiftregister.getString("enMon"));j++)
					                {
					                	String a1a="update EMP_IN_OUT_Status set "+FullDay_Inbetween_month(j,filedateyear,le.getStatus())+" where pernr="+rsshiftregister.getString("user_id")+" and month="+j+" and year="+filedateyear+" ";
						                int end=ad.SqlExecuteUpdate(a1a);
					                }
									
									String a="update EMP_IN_OUT_Status set "+SecondHalf(Integer.parseInt(rsshiftregister.getString("stday")), Integer.parseInt(rsshiftregister.getString("enday")),le.getFrststatus(),le.getSecstatus(),le.getStatus(),Integer.parseInt(rsshiftregister.getString("stMon")),Integer.parseInt(rsshiftregister.getString("enMon")))+" where pernr="+rsshiftregister.getString("user_id")+" and month="+rsshiftregister.getString("enMon")+" and year="+filedateyear+" ";
					                int frst1=ad.SqlExecuteUpdate(a);
								}
				                	
							}
							
							else if(le.getEndTime().compareTo(sechalfstart)<=0 && le.getStartTime().compareTo(shftstart)<=0)
							{
								  
				              
				            	le.setStatus("ODOD");
								le.setFrststatus("OD");
								
								if(rsshiftregister.getString("stMon").equalsIgnoreCase(rsshiftregister.getString("enMon")))
								{
								String a="update EMP_IN_OUT_Status set day"+rsshiftregister.getString("enday")+"="+FrstHalf(Integer.parseInt(rsshiftregister.getString("stday")), Integer.parseInt(rsshiftregister.getString("enday")),le.getFrststatus(),le.getSecstatus(),le.getStatus(),Integer.parseInt(rsshiftregister.getString("stMon")),Integer.parseInt(rsshiftregister.getString("enMon")))+" where pernr="+rsshiftregister.getString("user_id")+" and month="+rsshiftregister.getString("stMon")+" and year="+filedateyear+" ";
				                int frst=ad.SqlExecuteUpdate(a);
								}
								else
								{
									String a1="update EMP_IN_OUT_Status set "+FrstHalfPrev(Integer.parseInt(rsshiftregister.getString("stday")), Integer.parseInt(rsshiftregister.getString("enday")),le.getFrststatus(),le.getSecstatus(),le.getStatus())+" where pernr="+rsshiftregister.getString("user_id")+" and month="+rsshiftregister.getString("stMon")+" and year="+filedateyear+" ";
					                int frst=ad.SqlExecuteUpdate(a1);
					                
					                for(int j=Integer.parseInt(rsshiftregister.getString("stMon"))+1;j<Integer.parseInt(rsshiftregister.getString("enMon"));j++)
					                {
					                	String a1a="update EMP_IN_OUT_Status set "+FullDay_Inbetween_month(j,filedateyear,le.getStatus())+" where pernr="+rsshiftregister.getString("user_id")+" and month="+j+" and year="+filedateyear+" ";
						                int end=ad.SqlExecuteUpdate(a1a);
					                }
									
									String a="update EMP_IN_OUT_Status set day"+rsshiftregister.getString("enday")+"="+FrstHalf(Integer.parseInt(rsshiftregister.getString("stday")), Integer.parseInt(rsshiftregister.getString("enday")),le.getFrststatus(),le.getSecstatus(),le.getStatus(),Integer.parseInt(rsshiftregister.getString("stMon")),Integer.parseInt(rsshiftregister.getString("enMon")))+" where pernr="+rsshiftregister.getString("user_id")+" and month="+rsshiftregister.getString("enMon")+" and year="+filedateyear+" ";
					                int frst1=ad.SqlExecuteUpdate(a);
								}
				               
							}
							
							else if(le.getStartTime().compareTo(shftstart)>=0 &&  (le.getEndTime().compareTo(shftend)<=0 || le.getEndTime().compareTo(shftend)>=0) )
							{
								le.setStatus("ODOD");
								
								if(rsshiftregister.getString("stMon").equalsIgnoreCase(rsshiftregister.getString("enMon")))
								{
								String a="update EMP_IN_OUT_Status set "+FullDay(Integer.parseInt(rsshiftregister.getString("stday")), Integer.parseInt(rsshiftregister.getString("enday")),le.getFrststatus(),le.getSecstatus(),le.getStatus(),Integer.parseInt(rsshiftregister.getString("stMon")),Integer.parseInt(rsshiftregister.getString("enMon")))+" where pernr="+rsshiftregister.getString("user_id")+" and month="+rsshiftregister.getString("stMon")+" and year="+filedateyear+" ";
				                int frst=ad.SqlExecuteUpdate(a);
								}
								else
								{
									String a="update EMP_IN_OUT_Status set "+FullDayPrev(Integer.parseInt(rsshiftregister.getString("stday")), Integer.parseInt(rsshiftregister.getString("enday")),le.getFrststatus(),le.getSecstatus(),le.getStatus())+" where pernr="+rsshiftregister.getString("user_id")+" and month="+rsshiftregister.getString("stMon")+" and year="+filedateyear+" ";
					                int frst=ad.SqlExecuteUpdate(a);
					                
					                for(int j=Integer.parseInt(rsshiftregister.getString("stMon"))+1;j<Integer.parseInt(rsshiftregister.getString("enMon"));j++)
					                {
					                	String a1a="update EMP_IN_OUT_Status set "+FullDay_Inbetween_month(j,filedateyear,le.getStatus())+" where pernr="+rsshiftregister.getString("user_id")+" and month="+j+" and year="+filedateyear+" ";
						                int end=ad.SqlExecuteUpdate(a1a);
					                }
					                
					            	String a1="update EMP_IN_OUT_Status set "+FullDay(Integer.parseInt(rsshiftregister.getString("stday")), Integer.parseInt(rsshiftregister.getString("enday")),le.getFrststatus(),le.getSecstatus(),le.getStatus(),Integer.parseInt(rsshiftregister.getString("stMon")),Integer.parseInt(rsshiftregister.getString("enMon")))+" where pernr="+rsshiftregister.getString("user_id")+" and month="+rsshiftregister.getString("enMon")+" and year="+filedateyear+" ";
					                int end=ad.SqlExecuteUpdate(a1);
								}
							
							}
							
							
							if(le.getStatus()==null)
							{
								le.setStatus("");
							}
							if(le.getFrststatus()==null)
							{
								le.setFrststatus("");
							}
							if(le.getSecstatus()==null)
							{
								le.setSecstatus("");
							}
							
			
	                  
								}
							
						 le.setStartDurationType(frsthalfend);
						 le.setEndDurationType(sechalfstart);
						 le.setMonth(filedatemonth);
						 le.setYear(filedateyear);
						 
						 //update
						 
					
						onduty.add(le);
						
					}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		
			    
			    try {
					rsshiftregister.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			return onduty;
		}
	
	public String[] getempshifttime(String shiftcode)
	{

		String shftstrtime="";
		String shftendtime="";
		String firsthalfend="";
		String sechalfstart="";
		String punchstrtime="";
		String punchendtime="";
		String punchvalidtime="";
		
		int nightshift=0;
		
		conn=AttConnectionFactory.getConnection();
		
		 String timings="";
		  String shiftregister="select Punch_Valid_till,Punch_Start_Time,Punch_End_Time,Shift_code,Shift_start_time,Shift_End_Time,First_Half_End_Time,SH_Start_Time,Night_Shift from EMP_SHIFT_MASTER where Shift_code = '"+shiftcode+"'";
		    ResultSet rsshiftregister=ad.selectQuery(shiftregister);
		    try {
				if(rsshiftregister.next())
				{
					
					shftstrtime=rsshiftregister.getString("Shift_start_time");
					shftendtime=rsshiftregister.getString("Shift_End_Time");
					firsthalfend=rsshiftregister.getString("First_Half_End_Time");
					sechalfstart=rsshiftregister.getString("SH_Start_Time");
					nightshift=Integer.parseInt(rsshiftregister.getString("Night_Shift"));
					punchstrtime=rsshiftregister.getString("Punch_Start_Time");
					punchendtime=rsshiftregister.getString("Punch_End_Time");
					punchvalidtime=rsshiftregister.getString("Punch_Valid_till");
					timings=shftstrtime+","+shftendtime+","+firsthalfend+","+sechalfstart+","+nightshift+","+punchstrtime+","+punchendtime+","+punchvalidtime;
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		    

		    
		    String a[]=timings.split(",");
		
			try {
				rsshiftregister.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				
				
			}
		return a;
	}
	
	
	
	
	public String[] getpunchtimings(String date,String empcode)
	{

	System.out.println(empcode);
		 String punchrange="";
		  String shiftregister="select * from(select left(id,2) as day,right(left(id,4),2) as mont,right(left(id,6),2)+':'+right(left(id,8),2) as time,SUBSTRING ( id ,9 ,len(id))  as pernr from ATTENDANCE_MASTER where Date='"+date+"' )t where  t.pernr='"+empcode+"' order by t.time";
		    ResultSet rsshiftregister=ad.selectQuery(shiftregister);
		    try {
				while(rsshiftregister.next())
				{
					
					punchrange=punchrange+","+rsshiftregister.getString("time");
					
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		    String a[]=new String[0];
		    if(!punchrange.equalsIgnoreCase(""))
		    {
		    punchrange=punchrange.substring(1, punchrange.length());
		     a=punchrange.split(",");
		    }
		    
		    try {
				rsshiftregister.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		
		return a;
	}
	
	
	public ActionForward empmanualtimeentry(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			{
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		if(user==null){
			request.setAttribute("message","Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		
			HRApprovalForm approvalsForm = (HRApprovalForm) form;
			approvalsForm.setCount("");
			approvalsForm.setFromDate("");
			approvalsForm.setEmployeeno("");
			approvalsForm.setPaygrp("");
			approvalsForm.setPlant("");
			approvalsForm.setStaffcat("");
			
			
			String cmpcode="";
			int id=user.getGroupId();
			String cmp[]=new String[0]; 
			String locations="";
			
			String aa="select * from user_group where id='"+id+"'";
			ResultSet cc=ad.selectQuery(aa);
			try {
				if(cc.next())
				{
					cmpcode=cc.getString("Attendance_Loc");
					
					if(cmpcode.contains(","))
					{
					 cmp=cmpcode.split(",");
					
					for(int b=0;b<cmp.length;b++)
					{
						locations=locations+"'"+cmp[b]+"',";
					}
					
					locations=locations.substring(0, locations.length()-1);
					}
					else
					{
						locations="'"+cmpcode+"'";
					}
				}
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		    ArrayList locationList=new ArrayList();
				ArrayList locationLabelList=new ArrayList();
				ResultSet rs11 = ad.selectQuery("select LOCID," +
						"LOCNAME,location_code from location where location_code in ("+locations+") "); 
						try {
							while(rs11.next()) {
								locationList.add(rs11.getString("location_code"));
								locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
								
							}
							rs11.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						approvalsForm.setLocationIdList(locationList);
						approvalsForm.setLocationLabelList(locationLabelList);
						
						
						
						
								ArrayList workList=new ArrayList();
								ArrayList workLabelList=new ArrayList();
								ResultSet rs14 = ad.selectQuery("select loc_id," +
										"loc_name from working_location order by loc_name"); 
										try {
											while(rs14.next()) {
												workList.add(rs14.getString("loc_id"));
												workLabelList.add(rs14.getString("loc_name"));
											}
											rs14.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										
										approvalsForm.setWorkList(workList);
										approvalsForm.setWorkLabelList(workLabelList);
										
										
										//repgrp
										ArrayList repgrptList=new ArrayList();
										ArrayList repgrpLabelList=new ArrayList();
										ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
												"Grp_LTXT from REPORTING_GROUP   order by Grp_LTXT "); 
												try {
													while(reprs15.next()) {
														repgrptList.add(reprs15.getString("Grp_ID"));
														repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
													}
													reprs15.close();
												} catch (SQLException e) {
													// TODO Auto-generated catch block
													e.printStackTrace();
												}
												
												approvalsForm.setRepgrpList(repgrptList);
												approvalsForm.setRepgrpLabelList(repgrpLabelList);
												
												try {
													cc.close();
												} catch (SQLException e) {
													// TODO Auto-generated catch block
													e.printStackTrace();
												}
												
												try {
													rs14.close();
												} catch (SQLException e) {
													// TODO Auto-generated catch block
													e.printStackTrace();
												}
												try {
													reprs15.close();
												} catch (SQLException e) {
													// TODO Auto-generated catch block
													e.printStackTrace();
												}
												
												try {
													rs11.close();
												} catch (SQLException e) {
													// TODO Auto-generated catch block
													e.printStackTrace();
												}
			
				return mapping.findForward("manual_entry");} 

	
	public ActionForward changeReqLoc(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)  {
		HRApprovalForm calenderForm=(HRApprovalForm)form;
		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		ArrayList locationList=new ArrayList();
		ArrayList locationLabelList=new ArrayList();
		ResultSet rs11 = ad.selectQuery("select LOCID," +
				"LOCNAME,location_code from location where location_code in ("+locations+") "); 
				try {
					while(rs11.next()) {
						locationList.add(rs11.getString("location_code"));
						locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
						
					}
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setLocationIdList(locationList);
				calenderForm.setLocationLabelList(locationLabelList);
	   
	    String location=calenderForm.getLocationId();
	    String reqTable=getTableName(location);
	    

	   int year=Calendar.getInstance().get(Calendar.YEAR); 
	   int month=Calendar.getInstance().get(Calendar.MONTH); 
	   
	   month=month+1;


	   String[] monthName = {"","JAN", "FEB",
				  "MAR", "APR", "MAY", "JUN", "JUL",
				  "AUG", "SEP", "OCT", "NOV",
				  "DEC"
				  };
		
	    String mon = monthName[month];
	   
	    HashMap holidaysMap=new HashMap();
	    String cal="select DAY,"+mon+","+year+" as CYEAR from "+reqTable+" where "+mon+"!=''";
		ResultSet rs=ad.selectQuery(cal);
		try {
			
			while(rs.next())
			{
				String reqDate=rs.getString("Day")+"/"+month+"/"+rs.getString("CYEAR");
				holidaysMap.put(reqDate, rs.getString(mon));
			}
			
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
	    request.setAttribute("holidaysList", holidaysMap);
	    	
		
		int iYear = 0;
		int iMonth = 0;
		session.setAttribute("iYear", String.valueOf(iYear));
		session.setAttribute("iMonth", String.valueOf(iMonth));
		int user_id=user.getId();
		int ch=0;
		HashMap<Integer,ArrayList> m1=new HashMap<Integer,ArrayList>();
		ToDoTaskDao ad1=new ToDoTaskDao();
		
		try {
			rs.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		try {
			cc.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		try {
			rs11.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return mapping.findForward("shiftManualAssign");
	}

	public ActionForward shift(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
		HRApprovalForm help = (HRApprovalForm) form;
		
		if(help.getType()!=null)
		{	
		
		if(!help.getType().equalsIgnoreCase(""))
		{
			if(help.getType().equalsIgnoreCase("Master Level"))
			{
				shiftassign(mapping, form, request, response);
				return mapping.findForward("shiftassign");
			}	
			
			if(help.getType().equalsIgnoreCase("Day Wise"))
			{
				shiftManualAssign(mapping, form, request, response);
				return mapping.findForward("shiftManualAssign");
			}
			
		}
		
		}
		
		return mapping.findForward("shift");
	}
	
	
	public ActionForward massUpdateShiftAssign(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			{
				HRApprovalForm approvalsForm = (HRApprovalForm) form;
				
				HttpSession session=request.getSession();
				UserInfo user=(UserInfo)session.getAttribute("user");
				if(user==null){
					request.setAttribute("message","Session Expried! Try to Login again!");
					return mapping.findForward("displayiFrameSession");
				}
				
				StringBuffer reqemp = new StringBuffer();
				String pernr[] = request.getParameterValues("employeeno");
				String shiflist[]= request.getParameterValues("shiflist");
				String rule_Code[]= request.getParameterValues("rule_Code");
				String swipe_Count[]= request.getParameterValues("swipe_Count");
				String selectedRequestNo[]= request.getParameterValues("selectedRequestNo");
				
				for(int i=0;i<selectedRequestNo.length;i++)
				{
					reqemp.append("'"+selectedRequestNo[i]+"'" + ",");
					
				}
				String emp ="";
				emp= reqemp.substring(0, reqemp.length() - 1).toString();
				
				if(!approvalsForm.getShift().equalsIgnoreCase("") && !approvalsForm.getSwipe_Count().equalsIgnoreCase("") )
					{	
					String update ="update emp_official_info set Shift_Code = '"+approvalsForm.getShift()+"' , Swipe_Count='"+approvalsForm.getSwipe_Count()+"' "
							+ " where pernr in("+emp+")  ";
					int l=ad.SqlExecuteUpdate(update);
					
					
					}
				if(!approvalsForm.getShift().equalsIgnoreCase("") && approvalsForm.getSwipe_Count().equalsIgnoreCase(""))
				{
					String update ="update emp_official_info set Shift_Code = '"+approvalsForm.getShift()+"'  "
							+ " where pernr in("+emp+")  ";
					int l=ad.SqlExecuteUpdate(update);
					
				}
				
				if(approvalsForm.getShift().equalsIgnoreCase("") && !approvalsForm.getSwipe_Count().equalsIgnoreCase(""))
				{

					String update ="update emp_official_info set  Swipe_Count='"+approvalsForm.getSwipe_Count()+"' "
							+ " where pernr in("+emp+")  ";
					int l=ad.SqlExecuteUpdate(update);
				}
				
					
				if(!approvalsForm.getShift().equalsIgnoreCase("") )
				{

					Date dNow = new Date( );
					 SimpleDateFormat ft = new SimpleDateFormat ("dd");
					 SimpleDateFormat ft1 = new SimpleDateFormat ("MM");
				int day = Integer.parseInt(ft.format(dNow));
				int month = Integer.parseInt(ft1.format(dNow));
				
				
				
				for(int j=day; j<=31; j++ )
				{
					String update2 = "update EMP_Shift_Register set day"+j+" =  '"+approvalsForm.getShift()+"' where month ='"+month+"' and pernr in ("+emp+") ";
					int k=ad.SqlExecuteUpdate(update2);
				}
				
		
				String update3 = "update EMP_Shift_Register set    day1 =  '"+approvalsForm.getShift()+"',"
																+" day2 =  '"+approvalsForm.getShift()+"',"
																+" day3 =  '"+approvalsForm.getShift()+"',"
																+" day4 =  '"+approvalsForm.getShift()+"',"
																+" day5 =  '"+approvalsForm.getShift()+"',"
																+" day6 =  '"+approvalsForm.getShift()+"',"
																+" day7 =  '"+approvalsForm.getShift()+"',"
																+" day8 =  '"+approvalsForm.getShift()+"',"
																+" day9 =  '"+approvalsForm.getShift()+"',"
																+" day10 =  '"+approvalsForm.getShift()+"',"
																+" day11 =  '"+approvalsForm.getShift()+"',"
																+" day12 =  '"+approvalsForm.getShift()+"',"
																+" day13 =  '"+approvalsForm.getShift()+"',"
																+" day14 =  '"+approvalsForm.getShift()+"',"
																+" day15 =  '"+approvalsForm.getShift()+"',"
																+" day16 =  '"+approvalsForm.getShift()+"',"
																+" day17 =  '"+approvalsForm.getShift()+"',"
																+" day18 =  '"+approvalsForm.getShift()+"',"
																+" day19 =  '"+approvalsForm.getShift()+"',"
																+" day20 =  '"+approvalsForm.getShift()+"',"
																+" day21 =  '"+approvalsForm.getShift()+"',"
																+" day22 =  '"+approvalsForm.getShift()+"',"
																+" day23 =  '"+approvalsForm.getShift()+"',"
																+" day24 =  '"+approvalsForm.getShift()+"',"
																+" day25 =  '"+approvalsForm.getShift()+"',"
																+" day26 =  '"+approvalsForm.getShift()+"',"
																+" day27 =  '"+approvalsForm.getShift()+"',"
																+" day28 =  '"+approvalsForm.getShift()+"',"
																+" day29 =  '"+approvalsForm.getShift()+"',"
																+" day30 =  '"+approvalsForm.getShift()+"',"
																+" day31 =  '"+approvalsForm.getShift()+"'"
																+" where month >'"+month+"' and pernr in ("+emp+") ";
				
					int s=ad.SqlExecuteUpdate(update3);
				
					approvalsForm.setMessage("Shift Assigned");
				
				}	
				
				String cmpcode="";
				int id=user.getGroupId();
				String cmp[]=new String[0]; 
				String locations="";
				
				String aa="select * from user_group where id='"+id+"'";
				ResultSet cc=ad.selectQuery(aa);
				try {
					if(cc.next())
					{
						cmpcode=cc.getString("Attendance_Loc");
						
						if(cmpcode.contains(","))
						{
						 cmp=cmpcode.split(",");
						
						for(int b=0;b<cmp.length;b++)
						{
							locations=locations+"'"+cmp[b]+"',";
						}
						
						locations=locations.substring(0, locations.length()-1);
						}
						else
						{
							locations="'"+cmpcode+"'";
						}
					}
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				
				ArrayList locationList=new ArrayList();
				ArrayList locationLabelList=new ArrayList();
				ResultSet rs11 = ad.selectQuery("select LOCID," +
						"LOCNAME,location_code from location where location_code in ("+locations+")"); 
						try {
							while(rs11.next()) {
								locationList.add(rs11.getString("location_code"));
								locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
								
							}
							rs11.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						approvalsForm.setLocationIdList(locationList);
						approvalsForm.setLocationLabelList(locationLabelList);
				
			
						ArrayList payGroupList=new ArrayList();
						ArrayList payGroupLabelList=new ArrayList();
						ResultSet rs12 = ad.selectQuery("select Paygroup," +
								"Long_Desc from Paygroup_Master"); 
								try {
									while(rs12.next()) {
										payGroupList.add(rs12.getString("Paygroup"));
										payGroupLabelList.add(rs12.getString("Long_Desc"));
									}
									rs12.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								
						approvalsForm.setPayGroupList(payGroupList);
						approvalsForm.setPayGroupLabelList(payGroupLabelList);
						
						ArrayList categoryList=new ArrayList();
						ArrayList categoryLabelList=new ArrayList();
						ResultSet rs13 = ad.selectQuery("select STAFFCAT," +
								"CATLTEXT from category"); 
								try {
									while(rs13.next()) {
										categoryList.add(rs13.getString("STAFFCAT"));
										categoryLabelList.add(rs13.getString("CATLTEXT"));
									}
									rs13.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								
						approvalsForm.setCategoryList(categoryList);
						approvalsForm.setCategoryLabelList(categoryLabelList);
						
						
						ArrayList workList=new ArrayList();
						ArrayList workLabelList=new ArrayList();
						ResultSet rs14 = ad.selectQuery("select loc_id," +
								"loc_name from working_location order by loc_name "); 
								try {
									while(rs14.next()) {
										workList.add(rs14.getString("loc_id"));
										workLabelList.add(rs14.getString("loc_name"));
									}
									rs14.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								
						approvalsForm.setWorkList(workList);
						approvalsForm.setWorkLabelList(workLabelList);
						
						
						ArrayList deptList=new ArrayList();
						ArrayList deptLabelList=new ArrayList();
						ResultSet rs16 = ad.selectQuery("select dptid," +
								"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
								try {
									while(rs16.next()) {
										deptList.add(rs16.getString("dptid"));
										deptLabelList.add(rs16.getString("DPTLTXT"));
									}
									rs16.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								
								approvalsForm.setDeptList(deptList);
								approvalsForm.setDeptLabelList(deptLabelList);
								
								
								
								//repgrp
								ArrayList repgrptList=new ArrayList();
								ArrayList repgrpLabelList=new ArrayList();
								ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
										"Grp_LTXT from REPORTING_GROUP   order by Grp_LTXT "); 
										try {
											while(reprs15.next()) {
												repgrptList.add(reprs15.getString("Grp_ID"));
												repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
											}
											reprs15.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										
										approvalsForm.setRepgrpList(repgrptList);
										approvalsForm.setRepgrpLabelList(repgrpLabelList);

						
						ArrayList shiftList=new ArrayList();
						ArrayList shiftLabelList=new ArrayList();
						ResultSet rs15 = ad.selectQuery("select shift_code," +
								"Shift_Name from EMP_SHIFT_MASTER where loc like '%"+approvalsForm.getLocationId()+"%'"); 
								try {
									while(rs15.next()) {
										shiftList.add(rs15.getString("shift_code"));
										shiftLabelList.add(rs15.getString("Shift_Name"));
									}
									rs15.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								
						approvalsForm.setShiftList(shiftList);
						approvalsForm.setShiftLabelList(shiftLabelList);
						
						
						String ACtualdept="";
					    if(approvalsForm.getDeptArray()!=null)
					    {	
					    String[] dept = approvalsForm.getDeptArray();
					    
					    StringBuffer reqdept = new StringBuffer();
						for (int i = 0; i < dept.length; i++) {
							reqdept.append("'"+dept[i]+"'" + ",");
						}
						 ACtualdept= reqdept.substring(0, reqdept.length() - 1).toString();
					    }
						
						   String ACtualloc="";
						    if(approvalsForm.getLocArray()!=null)
						    {
						    
							String[] loc = approvalsForm.getLocArray();
						    StringBuffer reqloc = new StringBuffer();
							for (int i = 0; i < loc.length; i++) {
								reqloc.append("'"+loc[i]+"'" + ",");
							}
							ACtualloc = reqloc.substring(0, reqloc.length() - 1).toString();
						    
						    }
						    
						    String ACtualpay="";
						    if(approvalsForm.getPayArray()!=null)
						    {
						    
							String[] pay = approvalsForm.getPayArray();
						    StringBuffer reqpay = new StringBuffer();
							for (int i = 0; i < pay.length; i++) {
								reqpay.append("'"+pay[i]+"'" + ",");
							}
							ACtualpay = reqpay.substring(0, reqpay.length() - 1).toString();
						    
						    }
						    
						    //catArray
						    String ACtualcat="";
						    if(approvalsForm.getCatArray()!=null)
						    {
						    
							String[] cat = approvalsForm.getCatArray();
						    StringBuffer reqcat = new StringBuffer();
							for (int i = 0; i < cat.length; i++) {
								reqcat.append("'"+cat[i]+"'" + ",");
							}
							ACtualcat = reqcat.substring(0, reqcat.length() - 1).toString();
						    
						    }
						
						
						ArrayList list = new ArrayList();
						String query1="select * from emp_official_info ,location ,DEPARTMENT ,DESIGNATION where Location.LOCATION_CODE=emp_official_info.LOCID and "
								+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID";
						String sqlfromdate="";
						String sqltodate="";
						
						
						
						
						if(!approvalsForm.getLocationId().equalsIgnoreCase(""))
						{
							query1=query1+" and emp_official_info.LOCID = '"+approvalsForm.getLocationId()+"' ";
						
						}
						
						
						
						if(!ACtualloc.equalsIgnoreCase(""))
						{
							query1=query1+" and emp_official_info.Work_ID in("+ACtualloc+") ";
						
						}
							
						if(!ACtualpay.equalsIgnoreCase(""))
						{
							query1=query1+" and emp_official_info.PAY_GROUP in("+ACtualpay+")  ";
						
						}
		
						if(!ACtualcat.equalsIgnoreCase(""))
						{
							query1=query1+" and emp_official_info.STAFFCAT in ("+ACtualcat+") ";
						
						}
						
						
						if(!approvalsForm.getFromDate().equalsIgnoreCase(""))
						{
							String from[]=approvalsForm.getFromDate().split("/");
						    sqlfromdate=from[2]+"-"+from[1]+"-"+from[0]; 
						    
						    String to[]=approvalsForm.getToDate().split("/");
						    sqltodate=to[2]+"-"+to[1]+"-"+to[0];
						    
						    query1=query1+" and doj between '"+sqlfromdate+"' and '"+sqltodate+"' ";
							
						}
						
						
						if(!approvalsForm.getFrompernr().equalsIgnoreCase(""))
						{
							query1=query1+" and emp_official_info.pernr in ("+approvalsForm.getFrompernr()+")  ";
						
						}
						
						//Status shif assignment
						if(approvalsForm.getStatus().equalsIgnoreCase("Pending For Shift Assignment"))
						{
						query1=query1+" and (Shift_Code is null or Shift_Code='') ";
							
						}
						
						
						
						
						query1=query1+" and ACTIVE =1 ";
						
						ResultSet rs = ad.selectQuery(query1);
						try {
							while(rs.next())
							{
								
								HRApprovalForm help = new HRApprovalForm();
								help.setEmployeeno(rs.getString("pernr"));
								help.setEmployeeName(rs.getString("EMP_FULLNAME"));
								help.setPlant(rs.getString("LOCNAME"));
								help.setShift(rs.getString("Shift_Code"));
								help.setRule_Code(rs.getString("rule_Code"));
								help.setSwipe_Count(rs.getString("swipe_Count"));
								help.setDesignation(rs.getString("DSGSTXT"));
								help.setDepartment(rs.getString("DPTSTXT"));
								help.setDoj(rs.getString("doj"));
								help.setPaygrp(rs.getString("PAY_GROUP"));
								list.add(help);
		
							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						request.setAttribute("list", list);
					
						ArrayList yearList=new ArrayList();
						ResultSet rs17 = ad.selectQuery("select distinct year from EMP_IN_OUT_Status  order by year desc"); 
								try {
									while(rs17.next()) {
										yearList.add(rs17.getString("year"));
									}
									rs17.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								
								approvalsForm.setYearList(yearList);
						
								try {
									rs14.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								
								try {
									rs12.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								
								try {
									cc.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								
								try {
									reprs15.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								
								try {
									rs17.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								
								try {
									rs13.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								try {
									rs11.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								try {
									rs15.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								
								try {
									rs16.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								
								try {
									rs.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								
				return mapping.findForward("shiftassign");
			}
	public ActionForward shiftassign(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			{
		HRApprovalForm approvalsForm = (HRApprovalForm) form;
		
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		if(user==null){
			request.setAttribute("message","Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		
		ArrayList yearList=new ArrayList();
		ResultSet rs17 = ad.selectQuery("select distinct year from EMP_IN_OUT_Status  order by year desc"); 
				try {
					while(rs17.next()) {
						yearList.add(rs17.getString("year"));
					}
					rs17.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				approvalsForm.setYearList(yearList);
				
				String cmpcode="";
				int id=user.getGroupId();
				String cmp[]=new String[0]; 
				String locations="";
				
				String aa="select * from user_group where id='"+id+"'";
				ResultSet cc=ad.selectQuery(aa);
				try {
					if(cc.next())
					{
						cmpcode=cc.getString("Attendance_Loc");
						
						if(cmpcode.contains(","))
						{
						 cmp=cmpcode.split(",");
						
						for(int b=0;b<cmp.length;b++)
						{
							locations=locations+"'"+cmp[b]+"',";
						}
						
						locations=locations.substring(0, locations.length()-1);
						}
						else
						{
							locations="'"+cmpcode+"'";
						}
					}
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
		
		ArrayList locationList=new ArrayList();
		ArrayList locationLabelList=new ArrayList();
		ResultSet rs11 = ad.selectQuery("select LOCID," +
				"LOCNAME,location_code from location where location_code in ("+locations+")  "); 
				try {
					while(rs11.next()) {
						locationList.add(rs11.getString("location_code"));
						locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
						
					}
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				approvalsForm.setLocationIdList(locationList);
				approvalsForm.setLocationLabelList(locationLabelList);
		
	
				ArrayList payGroupList=new ArrayList();
				ArrayList payGroupLabelList=new ArrayList();
				ResultSet rs12 = ad.selectQuery("select Paygroup," +
						"Short_desc from Paygroup_Master"); 
						try {
							while(rs12.next()) {
								payGroupList.add(rs12.getString("Paygroup"));
								payGroupLabelList.add(rs12.getString("Short_desc"));
							}
							rs12.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
				approvalsForm.setPayGroupList(payGroupList);
				approvalsForm.setPayGroupLabelList(payGroupLabelList);
				
				ArrayList categoryList=new ArrayList();
				ArrayList categoryLabelList=new ArrayList();
				ResultSet rs13 = ad.selectQuery("select STAFFCAT," +
						"CATLTEXT from category"); 
						try {
							while(rs13.next()) {
								categoryList.add(rs13.getString("STAFFCAT"));
								categoryLabelList.add(rs13.getString("CATLTEXT"));
							}
							rs13.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
				approvalsForm.setCategoryList(categoryList);
				approvalsForm.setCategoryLabelList(categoryLabelList);
				
				
				ArrayList workList=new ArrayList();
				ArrayList workLabelList=new ArrayList();
				ResultSet rs14 = ad.selectQuery("select loc_id," +
						"loc_name from working_location"); 
						try {
							while(rs14.next()) {
								workList.add(rs14.getString("loc_id"));
								workLabelList.add(rs14.getString("loc_name"));
							}
							rs14.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
				approvalsForm.setWorkList(workList);
				approvalsForm.setWorkLabelList(workLabelList);
						
				ArrayList deptList=new ArrayList();
				ArrayList deptLabelList=new ArrayList();
				ResultSet rs15 = ad.selectQuery("select dptid," +
						"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
						try {
							while(rs15.next()) {
								deptList.add(rs15.getString("dptid"));
								deptLabelList.add(rs15.getString("DPTLTXT"));
							}
							rs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						approvalsForm.setDeptList(deptList);
						approvalsForm.setDeptLabelList(deptLabelList);
						
						
						
						
						//repgrp
						ArrayList repgrptList=new ArrayList();
						ArrayList repgrpLabelList=new ArrayList();
						ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
								"Grp_LTXT from REPORTING_GROUP   order by Grp_LTXT "); 
								try {
									while(reprs15.next()) {
										repgrptList.add(reprs15.getString("Grp_ID"));
										repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
									}
									reprs15.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								
								approvalsForm.setRepgrpList(repgrptList);
								approvalsForm.setRepgrpLabelList(repgrpLabelList);

				
								try {
									rs12.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								try {
									rs14.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								try {
									rs15.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								try {
									rs13.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								try {
									rs17.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								try {
									reprs15.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								try {
									cc.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								try {
									rs11.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
		return mapping.findForward("shiftassign");
	}
	
	
	public ActionForward WeekOffAssign(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			{
		HRApprovalForm calenderForm=(HRApprovalForm)form;
		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		ArrayList locationList=new ArrayList();
		ArrayList locationLabelList=new ArrayList();
		ResultSet rs11 = ad.selectQuery("select LOCID," +
				"LOCNAME,location_code from location where location_code in ("+locations+")"); 
				try {
					while(rs11.next()) {
						locationList.add(rs11.getString("location_code"));
						locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
						
					}
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setLocationIdList(locationList);
				calenderForm.setLocationLabelList(locationLabelList);
	    calenderForm.setLocationId("ML00");
	    
	    calenderForm.setCalYear(Calendar.getInstance().get(Calendar.YEAR));
	    
	    ArrayList payGroupList=new ArrayList();
		ArrayList payGroupLabelList=new ArrayList();
		ResultSet rs12 = ad.selectQuery("select Paygroup," +
				"Long_Desc from Paygroup_Master order by Long_Desc  "); 
				try {
					while(rs12.next()) {
						payGroupList.add(rs12.getString("Paygroup"));
						payGroupLabelList.add(rs12.getString("Long_Desc"));
					}
					rs12.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setPayGroupList(payGroupList);
				calenderForm.setPayGroupLabelList(payGroupLabelList);
		
		ArrayList categoryList=new ArrayList();
		ArrayList categoryLabelList=new ArrayList();
		ResultSet rs13 = ad.selectQuery("select STAFFCAT," +
				"CATLTEXT from category order by CATLTEXT"); 
				try {
					while(rs13.next()) {
						categoryList.add(rs13.getString("STAFFCAT"));
						categoryLabelList.add(rs13.getString("CATLTEXT"));
					}
					rs13.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setCategoryList(categoryList);
				calenderForm.setCategoryLabelList(categoryLabelList);
		
		
		ArrayList workList=new ArrayList();
		ArrayList workLabelList=new ArrayList();
		ResultSet rs14 = ad.selectQuery("select loc_id," +
				"loc_name from working_location order by loc_name"); 
				try {
					while(rs14.next()) {
						workList.add(rs14.getString("loc_id"));
						workLabelList.add(rs14.getString("loc_name"));
					}
					rs14.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setWorkList(workList);
				calenderForm.setWorkLabelList(workLabelList);
				
		ArrayList deptList=new ArrayList();
		ArrayList deptLabelList=new ArrayList();
		ResultSet rs15 = ad.selectQuery("select dptid," +
				" DPTLTXT from DEPARTMENT order by DPTLTXT ");  
				try {
					while(rs15.next()) {
						deptList.add(rs15.getString("dptid"));
						deptLabelList.add(rs15.getString("DPTLTXT"));
					}
					rs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setDeptList(deptList);
				calenderForm.setDeptLabelList(deptLabelList);
			
				ArrayList shiftList=new ArrayList();
				ArrayList shiftLabelList=new ArrayList();
				ResultSet rs16 = ad.selectQuery("select shift_code," +
						"Shift_Name from EMP_SHIFT_MASTER order by Shift_Name "); 
						try {
							while(rs16.next()) {
								shiftList.add(rs16.getString("shift_code"));
								shiftLabelList.add(rs16.getString("Shift_Name"));
							}
							rs16.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						calenderForm.setShiftList(shiftList);
						calenderForm.setShiftLabelList(shiftLabelList);
					
				
				
	    

	   int year=Calendar.getInstance().get(Calendar.YEAR); 
	   int month=Calendar.getInstance().get(Calendar.MONTH); 
	   
	   if(calenderForm.getMonthFrom()==0)
	   {
	   month=Calendar.getInstance().get(Calendar.MONTH);
	   }
	   else
	   {	   
	   month = calenderForm.getMonthFrom();
	   }
	   month=month+1;


	   String[] monthName = {"","JAN", "FEB",
				  "MAR", "APR", "MAY", "JUN", "JUL",
				  "AUG", "SEP", "OCT", "NOV",
				  "DEC"
				  };
		
	    String mon = monthName[month];
	    Date dNow = new Date( );
	    SimpleDateFormat ft1 = new SimpleDateFormat ("MM");
	    calenderForm.setMonthFrom(Integer.parseInt(ft1.format(dNow)));
	    
	    
	    
	  
	    
	   
	    HashMap holidaysMap=new HashMap();
	    String cal="select DAY,"+mon+","+year+" as CYEAR from CmpCal2013 where "+mon+"!=''";
		ResultSet rs=ad.selectQuery(cal);
		try {
			
			while(rs.next())
			{
				String reqDate=rs.getString("Day")+"/"+month+"/"+rs.getString("CYEAR");
				holidaysMap.put(reqDate, rs.getString(mon));
			}
			
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
	    request.setAttribute("holidaysList", holidaysMap);
	    	
		
		int iYear = 0;
		int iMonth = 0;
		session.setAttribute("iYear", String.valueOf(iYear));
		session.setAttribute("iMonth", String.valueOf(iMonth));
		int user_id=user.getId();
		int ch=0;
		HashMap<Integer,ArrayList> m1=new HashMap<Integer,ArrayList>();
		ToDoTaskDao ad1=new ToDoTaskDao();
		
		try {
			rs.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			cc.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs13.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs12.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs16.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs14.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs11.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs15.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return mapping.findForward("WeekOffAssign");
	}
	
	
	public ActionForward shiftManualAssign(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			{
		HRApprovalForm calenderForm=(HRApprovalForm)form;
		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		ArrayList locationList=new ArrayList();
		ArrayList locationLabelList=new ArrayList();
		ResultSet rs11 = ad.selectQuery("select LOCID," +
				"LOCNAME,location_code from location where location_code in ("+locations+")"); 
				try {
					while(rs11.next()) {
						locationList.add(rs11.getString("location_code"));
						locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
						
					}
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setLocationIdList(locationList);
				calenderForm.setLocationLabelList(locationLabelList);
	    calenderForm.setLocationId("ML00");
	    
	    calenderForm.setCalYear(Calendar.getInstance().get(Calendar.YEAR));
	    
	    ArrayList payGroupList=new ArrayList();
		ArrayList payGroupLabelList=new ArrayList();
		ResultSet rs12 = ad.selectQuery("select Paygroup," +
				"Long_Desc from Paygroup_Master order by Long_Desc  "); 
				try {
					while(rs12.next()) {
						payGroupList.add(rs12.getString("Paygroup"));
						payGroupLabelList.add(rs12.getString("Long_Desc"));
					}
					rs12.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setPayGroupList(payGroupList);
				calenderForm.setPayGroupLabelList(payGroupLabelList);
		
		ArrayList categoryList=new ArrayList();
		ArrayList categoryLabelList=new ArrayList();
		ResultSet rs13 = ad.selectQuery("select STAFFCAT," +
				"CATLTEXT from category order by CATLTEXT"); 
				try {
					while(rs13.next()) {
						categoryList.add(rs13.getString("STAFFCAT"));
						categoryLabelList.add(rs13.getString("CATLTEXT"));
					}
					rs13.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setCategoryList(categoryList);
				calenderForm.setCategoryLabelList(categoryLabelList);
		
		
		ArrayList workList=new ArrayList();
		ArrayList workLabelList=new ArrayList();
		ResultSet rs14 = ad.selectQuery("select loc_id," +
				"loc_name from working_location order by loc_name"); 
				try {
					while(rs14.next()) {
						workList.add(rs14.getString("loc_id"));
						workLabelList.add(rs14.getString("loc_name"));
					}
					rs14.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setWorkList(workList);
				calenderForm.setWorkLabelList(workLabelList);
				
		ArrayList deptList=new ArrayList();
		ArrayList deptLabelList=new ArrayList();
		ResultSet rs15 = ad.selectQuery("select dptid," +
				" DPTLTXT from DEPARTMENT order by DPTLTXT ");  
				try {
					while(rs15.next()) {
						deptList.add(rs15.getString("dptid"));
						deptLabelList.add(rs15.getString("DPTLTXT"));
					}
					rs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setDeptList(deptList);
				calenderForm.setDeptLabelList(deptLabelList);
			
				ArrayList shiftList=new ArrayList();
				ArrayList shiftLabelList=new ArrayList();
				ResultSet rs16 = ad.selectQuery("select shift_code," +
						"Shift_Name from EMP_SHIFT_MASTER order by Shift_Name "); 
						try {
							while(rs16.next()) {
								shiftList.add(rs16.getString("shift_code"));
								shiftLabelList.add(rs16.getString("Shift_Name"));
							}
							rs16.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						calenderForm.setShiftList(shiftList);
						calenderForm.setShiftLabelList(shiftLabelList);
					
				
				
	    

	   int year=Calendar.getInstance().get(Calendar.YEAR); 
	   int month=Calendar.getInstance().get(Calendar.MONTH); 
	   
	   if(calenderForm.getMonthFrom()==0)
	   {
	   month=Calendar.getInstance().get(Calendar.MONTH);
	   }
	   else
	   {	   
	   month = calenderForm.getMonthFrom();
	   }
	   month=month+1;


	   String[] monthName = {"","JAN", "FEB",
				  "MAR", "APR", "MAY", "JUN", "JUL",
				  "AUG", "SEP", "OCT", "NOV",
				  "DEC"
				  };
		
	    String mon = monthName[month];
	    Date dNow = new Date( );
	    SimpleDateFormat ft1 = new SimpleDateFormat ("MM");
	    calenderForm.setMonthFrom(Integer.parseInt(ft1.format(dNow)));
	    
	    
	    
	  
	    
	   
	    HashMap holidaysMap=new HashMap();
	    String cal="select DAY,"+mon+","+year+" as CYEAR from CmpCal2013 where "+mon+"!=''";
		ResultSet rs=ad.selectQuery(cal);
		try {
			
			while(rs.next())
			{
				String reqDate=rs.getString("Day")+"/"+month+"/"+rs.getString("CYEAR");
				holidaysMap.put(reqDate, rs.getString(mon));
			}
			
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
	    request.setAttribute("holidaysList", holidaysMap);
	    	
		
		int iYear = 0;
		int iMonth = 0;
		session.setAttribute("iYear", String.valueOf(iYear));
		session.setAttribute("iMonth", String.valueOf(iMonth));
		int user_id=user.getId();
		int ch=0;
		HashMap<Integer,ArrayList> m1=new HashMap<Integer,ArrayList>();
		ToDoTaskDao ad1=new ToDoTaskDao();
		
		
		try {
			rs11.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		try {
			rs.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			cc.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs14.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs12.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		  try {
				rs.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		    try {
				rs11.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		    try {
				rs16.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		    try {
				rs14.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		    try {
				rs13.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		return mapping.findForward("shiftManualAssign");
	}
	
	
	public ActionForward UpdateEMPCmpdetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			{
			
		

		EssDao ad1=new EssDao();
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		HRApprovalForm calenderForm=(HRApprovalForm)form;
		String plantcode=request.getParameter("plant");
		String pernr=request.getParameter("pernr");
		String currentdate=request.getParameter("currentDate");
		 String a[]=currentdate.split("/");
		String day=a[0];
		String mon1=a[1];
		String year=a[2];
		int mon2=Integer.parseInt(mon1);
		  String[] monthName = {"","JAN", "FEB",
				  "MAR", "APR", "MAY", "JUN", "JUL",
				  "AUG", "SEP", "OCT", "NOV",
				  "DEC"
				  };
		
	  String mon = monthName[mon2];
		
	  String location=plantcode;
	    String reqTable=getTableName(location);
		String cal1="Select  LOCATION_CODE,LOCNAME from Location where LOCATION_CODE='"+plantcode+"'";
		ResultSet rs=ad1.selectQuery(cal1);
	
			
			try {
				while(rs.next())
				{
					calenderForm.setLocationId(rs.getString("LOCATION_CODE")+" - "+rs.getString("LOCNAME"));
				 }
			} catch (SQLException e) {
					e.printStackTrace();
			}
			

			   
			   
			    String cal="select "+mon+" as abc from EMP_CAL where DAY="+a[0]+" and CYEAR="+a[2]+" and pernr='"+pernr+"'";
			    ResultSet rs1=ad1.selectQuery(cal);
				try {
					
					while(rs1.next())
					{
						calenderForm.setHolidayType(rs1.getString("abc"));
					
					}
					
				} catch (SQLException e) {
					
					e.printStackTrace();
				}
			
		
		calenderForm.setCurentDate(currentdate);
		calenderForm.setEmployeeno(pernr);
		
		try {
			rs1.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			
		}
		
		try {
			rs.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return mapping.findForward("displayEMPCalenderlist");

	
		
			}
	
	public ActionForward Modifyupdatedetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) 
	{
		EssDao ad1=new EssDao();
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		HRApprovalForm calenderForm=(HRApprovalForm)form;
	    String holidaytype= calenderForm.getHolidayType();
	    String plantcode=request.getParameter("plant");
	    String pernr=request.getParameter("pernr");
		String currentdate=request.getParameter("currentDate");
		String a[]=currentdate.split("/");
		String day=a[0];
		String mon1=a[1];
		String year=a[2];
		int mon2=Integer.parseInt(mon1);
		  String[] monthName = {"","JAN", "FEB",
				  "MAR", "APR", "MAY", "JUN", "JUL",
				  "AUG", "SEP", "OCT", "NOV",
				  "DEC"
				  };
		
	  String mon = monthName[mon2];
		
	  String location=plantcode;
	    String reqTable=getTableName(location);
	    	
		String cal="update Emp_cal set "+mon+"='"+holidaytype+"' where DAY='"+a[0]+"'and CYEAR='"+a[2]+"' and pernr='"+pernr+"'";
		int i=0;
		i=ad1.SqlExecuteUpdate(cal);
		if(i>0)
		{
			calenderForm.setMessage("Data updated successfully ");
		}else{
			calenderForm.setMessage("Error...Please check");
		}
		
							
		
	
	return mapping.findForward("displayEMPCalenderlist");
	}
	
	
	public ActionForward WeekoffAssignSearch(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			{
		HRApprovalForm calenderForm=(HRApprovalForm)form;
		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		ArrayList locationList=new ArrayList();
		ArrayList locationLabelList=new ArrayList();
		ResultSet rs11 = ad.selectQuery("select LOCID," +
				"LOCNAME,location_code from location where location_code in ("+locations+") "); 
				try {
					while(rs11.next()) {
						locationList.add(rs11.getString("location_code"));
						locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
						
					}
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setLocationIdList(locationList);
				calenderForm.setLocationLabelList(locationLabelList);
	   
	    
	    
	    ArrayList payGroupList=new ArrayList();
		ArrayList payGroupLabelList=new ArrayList();
		ResultSet rs12 = ad.selectQuery("select Paygroup," +
				"Long_Desc from Paygroup_Master order by long_Desc"); 
				try {
					while(rs12.next()) {
						payGroupList.add(rs12.getString("Paygroup"));
						payGroupLabelList.add(rs12.getString("Long_Desc"));
					}
					rs12.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setPayGroupList(payGroupList);
				calenderForm.setPayGroupLabelList(payGroupLabelList);
		
		ArrayList categoryList=new ArrayList();
		ArrayList categoryLabelList=new ArrayList();
		ResultSet rs13 = ad.selectQuery("select STAFFCAT," +
				"CATLTEXT from category order by CATLTEXT"); 
				try {
					while(rs13.next()) {
						categoryList.add(rs13.getString("STAFFCAT"));
						categoryLabelList.add(rs13.getString("CATLTEXT"));
					}
					rs13.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setCategoryList(categoryList);
				calenderForm.setCategoryLabelList(categoryLabelList);
				
		ArrayList workList=new ArrayList();
		ArrayList workLabelList=new ArrayList();
		ResultSet rs14 = ad.selectQuery("select loc_id," +
				"loc_name from working_location order by loc_name"); 
				try {
					while(rs14.next()) {
						workList.add(rs14.getString("loc_id"));
						workLabelList.add(rs14.getString("loc_name"));
					}
					rs14.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setWorkList(workList);
				calenderForm.setWorkLabelList(workLabelList);
				
		ArrayList deptList=new ArrayList();
		ArrayList deptLabelList=new ArrayList();
		ResultSet rs15 = ad.selectQuery("select dptid," +
				"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
				try {
					while(rs15.next()) {
						deptList.add(rs15.getString("dptid"));
						deptLabelList.add(rs15.getString("DPTLTXT"));
					}
					rs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setDeptList(deptList);
				calenderForm.setDeptLabelList(deptLabelList);
			
				ArrayList shiftList=new ArrayList();
				ArrayList shiftLabelList=new ArrayList();
				ResultSet rs16 = ad.selectQuery("select shift_code," +
						"Shift_Name from EMP_SHIFT_MASTER order by Shift_Name "); 
						try {
							while(rs16.next()) {
								shiftList.add(rs16.getString("shift_code"));
								shiftLabelList.add(rs16.getString("Shift_Name"));
							}
							rs16.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						calenderForm.setShiftList(shiftList);
						calenderForm.setShiftLabelList(shiftLabelList);
						
						String location=calenderForm.getLocationId();
					    String reqTable=getTableName(location);		
					    
					    
					    String ACtualdept="";
					    if(calenderForm.getDeptArray()!=null)
					    {	
					    String[] dept = calenderForm.getDeptArray();
					    
					    StringBuffer reqdept = new StringBuffer();
						for (int i = 0; i < dept.length; i++) {
							reqdept.append("'"+dept[i]+"'" + ",");
						}
						 ACtualdept= reqdept.substring(0, reqdept.length() - 1).toString();
					    }
				
			    String ACtualloc="";
			    if(calenderForm.getLocArray()!=null)
			    {
			    
				String[] loc = calenderForm.getLocArray();
			    StringBuffer reqloc = new StringBuffer();
				for (int i = 0; i < loc.length; i++) {
					reqloc.append("'"+loc[i]+"'" + ",");
				}
				ACtualloc = reqloc.substring(0, reqloc.length() - 1).toString();
			    
			    }
			    
			    String ACtualpay="";
			    if(calenderForm.getPayArray()!=null)
			    {
			    
				String[] pay = calenderForm.getPayArray();
			    StringBuffer reqpay = new StringBuffer();
				for (int i = 0; i < pay.length; i++) {
					reqpay.append("'"+pay[i]+"'" + ",");
				}
				ACtualpay = reqpay.substring(0, reqpay.length() - 1).toString();
			    
			    }
			    
			    //catArray
			    String ACtualcat="";
			    if(calenderForm.getCatArray()!=null)
			    {
			    
				String[] cat = calenderForm.getCatArray();
			    StringBuffer reqcat = new StringBuffer();
				for (int i = 0; i < cat.length; i++) {
					reqcat.append("'"+cat[i]+"'" + ",");
				}
				ACtualcat = reqcat.substring(0, reqcat.length() - 1).toString();
			    
			    }
						
						String query1="select * from emp_official_info ,location ,DEPARTMENT ,DESIGNATION where Location.LOCATION_CODE=emp_official_info.LOCID and "
								+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID";
						String sqlfromdate="";
						String sqltodate="";
						
					
							
						if(!calenderForm.getLocationId().equalsIgnoreCase(""))
						{
							query1=query1+" and emp_official_info.LOCID = '"+calenderForm.getLocationId()+"' ";
						
						}
						/*	if(!ACtualloc.equalsIgnoreCase(""))
						{
							query1=query1+" and emp_official_info.Work_ID in("+ACtualloc+") ";
						
						}
							
						if(!ACtualpay.equalsIgnoreCase(""))
						{
							query1=query1+" and emp_official_info.PAY_GROUP in("+ACtualpay+")  ";
						
						}

						if(!ACtualcat.equalsIgnoreCase(""))
						{
							query1=query1+" and emp_official_info.STAFFCAT in ("+ACtualcat+") ";
						
						}
						
						if(!ACtualdept.equalsIgnoreCase(""))
						{
							query1=query1+" and emp_official_info.DPTID in ("+ACtualdept+") ";
						}*/
						
						if(!calenderForm.getFrompernr().equalsIgnoreCase(""))
						{
							query1=query1+" and emp_official_info.pernr = '"+calenderForm.getFrompernr()+"' ";
						
						}
						
						query1=query1+" and ACTIVE =1 ";
					
						String emplist="";
						
						ResultSet rs1 = ad.selectQuery(query1);
						try {
							if(rs1.next())
							{
								emplist =query1 ;
								
							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						calenderForm.setEmplist(emplist);


						  String iYears = request.getParameter("hYear");
							String iMonths = request.getParameter("hMonth");
							
							int iYear=Integer.parseInt(iYears);
							System.out.println("iYear="+iYear);
							int iMonth=Integer.parseInt(iMonths);
							iMonth=iMonth-1;
							
							if(iMonth==-1)
							{
								iMonth=11;
								iYear=iYear-1;
							}
							
							System.out.println("iMonth="+iMonth);
							
							Calendar ca = new GregorianCalendar();

							int iTDay = ca.get(Calendar.DATE);
							int iTYear = ca.get(Calendar.YEAR);
							int iTMonth = ca.get(Calendar.MONTH);

							if (iYear == 0) {
								iYear = iTYear;
								iMonth = iTMonth;
							}

							GregorianCalendar cal = new GregorianCalendar(iYear, iMonth, 1);

							int days = cal.getActualMaximum(Calendar.DAY_OF_MONTH);

							int weekStartDay = cal.get(Calendar.DAY_OF_WEEK);

							cal = new GregorianCalendar(iYear, iMonth, days);
							int iTotalweeks = cal.get(Calendar.WEEK_OF_MONTH);
							int ryear = iYear;
							int rmonth = iMonth;

							for (int iy = iTYear - 70; iy <= iTYear + 70; iy++) {
								if (iy == iYear) {
									iy = iy;
								} else {
									iy = iy;
								}
								int im = 0;
								for (im = 0; im <= 11; im++) {
									if (im == iMonth) {
										im = im;
									}
								}
							
							

								session.setAttribute("iYear", String.valueOf(iYear));
								session.setAttribute("iMonth", String.valueOf(iMonth));

							}
							int year=iYear; 
							   int month=rmonth;
							   
							   month=month+1;



						   String[] monthName = {"","JAN", "FEB",
									  "MAR", "APR", "MAY", "JUN", "JUL",
									  "AUG", "SEP", "OCT", "NOV",
									  "DEC"
									  };
							
						    String mon = monthName[month];
						    Date dNow = new Date( );
						    SimpleDateFormat ft1 = new SimpleDateFormat ("MM");
						    calenderForm.setMonthFrom(Integer.parseInt(ft1.format(dNow)));
						    
						    
						    
						  
						    if(!emplist.equalsIgnoreCase(""))
						    {
						   
						    HashMap holidaysMap=new HashMap();
						    String cal1="select DAY,"+mon+","+year+" as CYEAR from emp_cal  where pernr='"+calenderForm.getFrompernr()+"' and "+mon+"!='' and CYEAR='"+year+"'";
							ResultSet rs=ad.selectQuery(cal1);
							try {
								
								while(rs.next())
								{
									String reqDate=rs.getString("Day")+"/"+month+"/"+rs.getString("CYEAR");
									holidaysMap.put(reqDate, rs.getString(mon));
								}
								
							} catch (SQLException e) {
								
								e.printStackTrace();
							}
							try {
								rs.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						    request.setAttribute("holidaysList", holidaysMap);
						    if(!holidaysMap.isEmpty())
						    request.setAttribute("cal", "cal");
						    else
						    	request.setAttribute("nocal", "nocal");
						    }
						    else
						    {
						    	request.setAttribute("nocal", "nocal");
						    }
						   
					
						    try {
								rs16.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						    try {
						    	rs14.close();
						    } catch (SQLException e) {
						    	// TODO Auto-generated catch block
						    	e.printStackTrace();
						    }
						    try {
						    	rs13.close();
						    } catch (SQLException e) {
						    	// TODO Auto-generated catch block
						    	e.printStackTrace();
						    }
						    try {
						    	rs15.close();
						    } catch (SQLException e) {
						    	// TODO Auto-generated catch block
						    	e.printStackTrace();
						    }
						    
						    try {
						    	rs1.close();
						    } catch (SQLException e) {
						    	// TODO Auto-generated catch block
						    	e.printStackTrace();
						    }
						    try {
						    	rs11.close();
						    } catch (SQLException e) {
						    	// TODO Auto-generated catch block
						    	e.printStackTrace();
						    }
		return mapping.findForward("WeekOffAssign");
	}

	public ActionForward shiftManualAssignSearch(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			{
		HRApprovalForm calenderForm=(HRApprovalForm)form;
		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		ArrayList locationList=new ArrayList();
		ArrayList locationLabelList=new ArrayList();
		ResultSet rs11 = ad.selectQuery("select LOCID," +
				"LOCNAME,location_code from location where location_code in ("+locations+") "); 
				try {
					while(rs11.next()) {
						locationList.add(rs11.getString("location_code"));
						locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
						
					}
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setLocationIdList(locationList);
				calenderForm.setLocationLabelList(locationLabelList);
	   
	    
	    
	    ArrayList payGroupList=new ArrayList();
		ArrayList payGroupLabelList=new ArrayList();
		ResultSet rs12 = ad.selectQuery("select Paygroup," +
				"Long_Desc from Paygroup_Master order by long_Desc"); 
				try {
					while(rs12.next()) {
						payGroupList.add(rs12.getString("Paygroup"));
						payGroupLabelList.add(rs12.getString("Long_Desc"));
					}
					rs12.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setPayGroupList(payGroupList);
				calenderForm.setPayGroupLabelList(payGroupLabelList);
		
		ArrayList categoryList=new ArrayList();
		ArrayList categoryLabelList=new ArrayList();
		ResultSet rs13 = ad.selectQuery("select STAFFCAT," +
				"CATLTEXT from category order by CATLTEXT"); 
				try {
					while(rs13.next()) {
						categoryList.add(rs13.getString("STAFFCAT"));
						categoryLabelList.add(rs13.getString("CATLTEXT"));
					}
					rs13.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setCategoryList(categoryList);
				calenderForm.setCategoryLabelList(categoryLabelList);
				
		ArrayList workList=new ArrayList();
		ArrayList workLabelList=new ArrayList();
		ResultSet rs14 = ad.selectQuery("select loc_id," +
				"loc_name from working_location order by loc_name"); 
				try {
					while(rs14.next()) {
						workList.add(rs14.getString("loc_id"));
						workLabelList.add(rs14.getString("loc_name"));
					}
					rs14.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setWorkList(workList);
				calenderForm.setWorkLabelList(workLabelList);
				
		ArrayList deptList=new ArrayList();
		ArrayList deptLabelList=new ArrayList();
		ResultSet rs15 = ad.selectQuery("select dptid," +
				"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
				try {
					while(rs15.next()) {
						deptList.add(rs15.getString("dptid"));
						deptLabelList.add(rs15.getString("DPTLTXT"));
					}
					rs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setDeptList(deptList);
				calenderForm.setDeptLabelList(deptLabelList);
			
				ArrayList shiftList=new ArrayList();
				ArrayList shiftLabelList=new ArrayList();
				ResultSet rs16 = ad.selectQuery("select shift_code," +
						"Shift_Name from EMP_SHIFT_MASTER order by Shift_Name "); 
						try {
							while(rs16.next()) {
								shiftList.add(rs16.getString("shift_code"));
								shiftLabelList.add(rs16.getString("Shift_Name"));
							}
							rs16.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						calenderForm.setShiftList(shiftList);
						calenderForm.setShiftLabelList(shiftLabelList);
						
						String location=calenderForm.getLocationId();
					    String reqTable=getTableName(location);		
					    
					    
					    String ACtualdept="";
					    if(calenderForm.getDeptArray()!=null)
					    {	
					    String[] dept = calenderForm.getDeptArray();
					    
					    StringBuffer reqdept = new StringBuffer();
						for (int i = 0; i < dept.length; i++) {
							reqdept.append("'"+dept[i]+"'" + ",");
						}
						 ACtualdept= reqdept.substring(0, reqdept.length() - 1).toString();
					    }
				
			    String ACtualloc="";
			    if(calenderForm.getLocArray()!=null)
			    {
			    
				String[] loc = calenderForm.getLocArray();
			    StringBuffer reqloc = new StringBuffer();
				for (int i = 0; i < loc.length; i++) {
					reqloc.append("'"+loc[i]+"'" + ",");
				}
				ACtualloc = reqloc.substring(0, reqloc.length() - 1).toString();
			    
			    }
			    
			    String ACtualpay="";
			    if(calenderForm.getPayArray()!=null)
			    {
			    
				String[] pay = calenderForm.getPayArray();
			    StringBuffer reqpay = new StringBuffer();
				for (int i = 0; i < pay.length; i++) {
					reqpay.append("'"+pay[i]+"'" + ",");
				}
				ACtualpay = reqpay.substring(0, reqpay.length() - 1).toString();
			    
			    }
			    
			    //catArray
			    String ACtualcat="";
			    if(calenderForm.getCatArray()!=null)
			    {
			    
				String[] cat = calenderForm.getCatArray();
			    StringBuffer reqcat = new StringBuffer();
				for (int i = 0; i < cat.length; i++) {
					reqcat.append("'"+cat[i]+"'" + ",");
				}
				ACtualcat = reqcat.substring(0, reqcat.length() - 1).toString();
			    
			    }
						
						String query1="select * from emp_official_info ,location ,DEPARTMENT ,DESIGNATION where Location.LOCATION_CODE=emp_official_info.LOCID and "
								+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID";
						String sqlfromdate="";
						String sqltodate="";
						
					
							
						if(!calenderForm.getLocationId().equalsIgnoreCase(""))
						{
							query1=query1+" and emp_official_info.LOCID = '"+calenderForm.getLocationId()+"' ";
						
						}
							if(!ACtualloc.equalsIgnoreCase(""))
						{
							query1=query1+" and emp_official_info.Work_ID in("+ACtualloc+") ";
						
						}
							
						if(!ACtualpay.equalsIgnoreCase(""))
						{
							query1=query1+" and emp_official_info.PAY_GROUP in("+ACtualpay+")  ";
						
						}

						if(!ACtualcat.equalsIgnoreCase(""))
						{
							query1=query1+" and emp_official_info.STAFFCAT in ("+ACtualcat+") ";
						
						}
						
						if(!ACtualdept.equalsIgnoreCase(""))
						{
							query1=query1+" and emp_official_info.DPTID in ("+ACtualdept+") ";
						}
						
						if(!calenderForm.getFrompernr().equalsIgnoreCase(""))
						{
							query1=query1+" and emp_official_info.pernr = '"+calenderForm.getFrompernr()+"' ";
						
						}
						
						query1=query1+" and ACTIVE =1 ";
					
						String emplist="";
						
						ResultSet rs1 = ad.selectQuery(query1);
						try {
							if(rs1.next())
							{
								emplist =query1 ;
								
							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						calenderForm.setEmplist(emplist);

					    String iYears = request.getParameter("hYear");
						String iMonths = request.getParameter("hMonth");
						
						int iYear=Integer.parseInt(iYears);
						System.out.println("iYear="+iYear);
						int iMonth=Integer.parseInt(iMonths);
						iMonth=iMonth-1;
						
						if(iMonth==-1)
						{
							iMonth=11;
							iYear=iYear-1;
						}
						
						System.out.println("iMonth="+iMonth);
						
						Calendar ca = new GregorianCalendar();

						int iTDay = ca.get(Calendar.DATE);
						int iTYear = ca.get(Calendar.YEAR);
						int iTMonth = ca.get(Calendar.MONTH);

						if (iYear == 0) {
							iYear = iTYear;
							iMonth = iTMonth;
						}

						GregorianCalendar cal = new GregorianCalendar(iYear, iMonth, 1);

						int days = cal.getActualMaximum(Calendar.DAY_OF_MONTH);

						int weekStartDay = cal.get(Calendar.DAY_OF_WEEK);

						cal = new GregorianCalendar(iYear, iMonth, days);
						int iTotalweeks = cal.get(Calendar.WEEK_OF_MONTH);
						int ryear = iYear;
						int rmonth = iMonth;

						for (int iy = iTYear - 70; iy <= iTYear + 70; iy++) {
							if (iy == iYear) {
								iy = iy;
							} else {
								iy = iy;
							}
							int im = 0;
							for (im = 0; im <= 11; im++) {
								if (im == iMonth) {
									im = im;
								}
							}
						
						

							session.setAttribute("iYear", String.valueOf(iYear));
							session.setAttribute("iMonth", String.valueOf(iMonth));

						}
						int year=iYear; 
						   int month=rmonth;
						   
						   month=month+1;


						   String[] monthName = {"","JAN", "FEB",
									  "MAR", "APR", "MAY", "JUN", "JUL",
									  "AUG", "SEP", "OCT", "NOV",
									  "DEC"
									  };
							
						    String mon = monthName[month];
						   
						    HashMap holidaysMap=new HashMap();
						    String cal1="select DAY,"+mon+","+year+" as CYEAR from "+reqTable+" where "+mon+"!=''";
							ResultSet rs=ad.selectQuery(cal1);
							try {
								
								while(rs.next())
								{
									String reqDate=rs.getString("Day")+"/"+month+"/"+rs.getString("CYEAR");
									holidaysMap.put(reqDate, rs.getString(mon));
								}
								
							} catch (SQLException e) {
								
								e.printStackTrace();
							}
						    request.setAttribute("holidaysList", holidaysMap);
						    request.setAttribute("cal", "cal");
						    
						    try {
						    	rs13.close();
						    } catch (SQLException e) {
						    	// TODO Auto-generated catch block
						    	e.printStackTrace();
						    }
						    try {
								rs.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						    try {
								rs11.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						    try {
								rs16.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						    try {
								rs14.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						    try {
								rs13.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						    try {
								cc.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						    try {
								rs12.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						    try {
								rs15.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						    try {
								rs1.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
		return mapping.findForward("shiftManualAssign");
	}

	
	
	
	public ActionForward nextMonth1(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		System.out.println("nextMonth1()");

		HRApprovalForm calenderForm=(HRApprovalForm)form;
		HttpSession session = request.getSession();
		
	
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		ArrayList locationList=new ArrayList();
		ArrayList locationLabelList=new ArrayList();
		ResultSet rs11 = ad.selectQuery("select LOCID," +
				"LOCNAME,location_code from location where location_code in ("+locations+") "); 
				try {
					while(rs11.next()) {
						locationList.add(rs11.getString("location_code"));
						locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
						
					}
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setLocationIdList(locationList);
				calenderForm.setLocationLabelList(locationLabelList);
	   
	    
	    
	    ArrayList payGroupList=new ArrayList();
		ArrayList payGroupLabelList=new ArrayList();
		ResultSet rs12 = ad.selectQuery("select Paygroup," +
				"Long_Desc from Paygroup_Master order by Long_Desc"); 
				try {
					while(rs12.next()) {
						payGroupList.add(rs12.getString("Paygroup"));
						payGroupLabelList.add(rs12.getString("Long_Desc"));
					}
					rs12.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setPayGroupList(payGroupList);
				calenderForm.setPayGroupLabelList(payGroupLabelList);
		
		ArrayList categoryList=new ArrayList();
		ArrayList categoryLabelList=new ArrayList();
		ResultSet rs13 = ad.selectQuery("select STAFFCAT," +
				"CATLTEXT from category order by CATLTEXT "); 
				try {
					while(rs13.next()) {
						categoryList.add(rs13.getString("STAFFCAT"));
						categoryLabelList.add(rs13.getString("CATLTEXT"));
					}
					rs13.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setCategoryList(categoryList);
				calenderForm.setCategoryLabelList(categoryLabelList);
				
		ArrayList workList=new ArrayList();
		ArrayList workLabelList=new ArrayList();
		ResultSet rs14 = ad.selectQuery("select loc_id," +
				"loc_name from working_location order by loc_name"); 
				try {
					while(rs14.next()) {
						workList.add(rs14.getString("loc_id"));
						workLabelList.add(rs14.getString("loc_name"));
					}
					rs14.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setWorkList(workList);
				calenderForm.setWorkLabelList(workLabelList);
				
		ArrayList deptList=new ArrayList();
		ArrayList deptLabelList=new ArrayList();
		ResultSet rs15 = ad.selectQuery("select dptid," +
				"DPTLTXT from DEPARTMENT"); 
				try {
					while(rs15.next()) {
						deptList.add(rs15.getString("dptid"));
						deptLabelList.add(rs15.getString("DPTLTXT"));
					}
					rs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setDeptList(deptList);
				calenderForm.setDeptLabelList(deptLabelList);
			
				ArrayList shiftList=new ArrayList();
				ArrayList shiftLabelList=new ArrayList();
				ResultSet rs16 = ad.selectQuery("select shift_code," +
						"Shift_Name from EMP_SHIFT_MASTER order by Shift_Name "); 
						try {
							while(rs16.next()) {
								shiftList.add(rs16.getString("shift_code"));
								shiftLabelList.add(rs16.getString("Shift_Name"));
							}
							rs16.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						calenderForm.setShiftList(shiftList);
						calenderForm.setShiftLabelList(shiftLabelList);
						
						String location=calenderForm.getLocationId();
					    String reqTable=getTableName(location);		
		
		
		
			String iYears = request.getParameter("hYear");
			String iMonths = request.getParameter("hMonth");
			
			
			int iYear=Integer.parseInt(iYears);
			System.out.println("iYear="+iYear);
			int iMonth=Integer.parseInt(iMonths);
			iMonth=iMonth+1;
			
			if(iMonth==12)
			{
				iMonth=0;
				iYear=iYear+1;
			}
			
			System.out.println("iMonth="+iMonth);
			
			Calendar ca = new GregorianCalendar();

			int iTDay = ca.get(Calendar.DATE);
			int iTYear = ca.get(Calendar.YEAR);
			int iTMonth = ca.get(Calendar.MONTH);

			if (iYear == 0) {
				iYear = iTYear;
				iMonth = iTMonth;
			}

			GregorianCalendar cal = new GregorianCalendar(iYear, iMonth, 1);

			int days = cal.getActualMaximum(Calendar.DAY_OF_MONTH);

			int weekStartDay = cal.get(Calendar.DAY_OF_WEEK);

			cal = new GregorianCalendar(iYear, iMonth, days);
			int iTotalweeks = cal.get(Calendar.WEEK_OF_MONTH);
			int ryear = iYear;
			int rmonth = iMonth;

			for (int iy = iTYear - 70; iy <= iTYear + 70; iy++) {
				if (iy == iYear) {
					iy = iy;
				} else {
					iy = iy;
				}
				int im = 0;
				for (im = 0; im <= 11; im++) {
					if (im == iMonth) {
						im = im;
					}
				}
			
				

				session.setAttribute("iYear", String.valueOf(iYear));
				session.setAttribute("iMonth", String.valueOf(iMonth));

			}
			
			
			
				int year=Calendar.getInstance().get(Calendar.YEAR); 
			   int month=rmonth;
			   
			   month=month+1;


			   String[] monthName = {"","JAN", "FEB",
						  "MAR", "APR", "MAY", "JUN", "JUL",
						  "AUG", "SEP", "OCT", "NOV",
						  "DEC"
						  };
				
			    String mon = monthName[month];
			   
			    HashMap holidaysMap=new HashMap();
			    String cal1="select DAY,"+mon+","+year+" as CYEAR from "+reqTable+" where "+mon+"!=''";
				ResultSet rs=ad.selectQuery(cal1);
				try {
					
					while(rs.next())
					{
						String reqDate=rs.getString("Day")+"/"+month+"/"+rs.getString("CYEAR");
						holidaysMap.put(reqDate, rs.getString(mon));
					}
					
				} catch (SQLException e) {
					
					e.printStackTrace();
				}
			    request.setAttribute("holidaysList", holidaysMap);
			    request.setAttribute("cal", "cal"); 
			    try {
			    	rs12.close();
			    } catch (SQLException e) {
			    	// TODO Auto-generated catch block
			    	e.printStackTrace();
			    }
			    try {
			    	cc.close();
			    } catch (SQLException e) {
			    	// TODO Auto-generated catch block
			    	e.printStackTrace();
			    }
			    try {
			    	rs15.close();
			    } catch (SQLException e) {
			    	// TODO Auto-generated catch block
			    	e.printStackTrace();
			    }
			    
			    try {
			    	rs13.close();
			    } catch (SQLException e) {
			    	// TODO Auto-generated catch block
			    	e.printStackTrace();
			    }
			    try {
					rs.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			    try {
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			    try {
					rs16.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			    try {
					rs14.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			    try {
					rs13.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			return mapping.findForward("shiftManualAssign");
		}

	
	public ActionForward prviousMonth(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
	System.out.println("nextMonth1()");
	HRApprovalForm calenderForm=(HRApprovalForm)form;
		String iYears = request.getParameter("hYear");
		String iMonths = request.getParameter("hMonth");
		HttpSession session = request.getSession();
		
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		ArrayList locationList=new ArrayList();
		ArrayList locationLabelList=new ArrayList();
		ResultSet rs11 = ad.selectQuery("select LOCID," +
				"LOCNAME,location_code from location where location_code in ("+locations+") "); 
				try {
					while(rs11.next()) {
						locationList.add(rs11.getString("location_code"));
						locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
						
					}
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setLocationIdList(locationList);
				calenderForm.setLocationLabelList(locationLabelList);
	   
	    
	    
	    ArrayList payGroupList=new ArrayList();
		ArrayList payGroupLabelList=new ArrayList();
		ResultSet rs12 = ad.selectQuery("select Paygroup," +
				"Long_Desc from Paygroup_Master order by Long_Desc"); 
				try {
					while(rs12.next()) {
						payGroupList.add(rs12.getString("Paygroup"));
						payGroupLabelList.add(rs12.getString("Long_Desc"));
					}
					rs12.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setPayGroupList(payGroupList);
				calenderForm.setPayGroupLabelList(payGroupLabelList);
		
		ArrayList categoryList=new ArrayList();
		ArrayList categoryLabelList=new ArrayList();
		ResultSet rs13 = ad.selectQuery("select STAFFCAT," +
				"CATLTEXT from category order by CATLTEXT"); 
				try {
					while(rs13.next()) {
						categoryList.add(rs13.getString("STAFFCAT"));
						categoryLabelList.add(rs13.getString("CATLTEXT"));
					}
					rs13.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setCategoryList(categoryList);
				calenderForm.setCategoryLabelList(categoryLabelList);
				
		ArrayList workList=new ArrayList();
		ArrayList workLabelList=new ArrayList();
		ResultSet rs14 = ad.selectQuery("select loc_id," +
				"loc_name from working_location order by loc_name "); 
				try {
					while(rs14.next()) {
						workList.add(rs14.getString("loc_id"));
						workLabelList.add(rs14.getString("loc_name"));
					}
					rs14.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setWorkList(workList);
				calenderForm.setWorkLabelList(workLabelList);
				
		ArrayList deptList=new ArrayList();
		ArrayList deptLabelList=new ArrayList();
		ResultSet rs15 = ad.selectQuery("select dptid," +
				"dptstxt from DEPARTMENT order by DPTLTXT"); 
				try {
					while(rs15.next()) {
						deptList.add(rs15.getString("dptid"));
						deptLabelList.add(rs15.getString("DPTLTXT"));
					}
					rs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setDeptList(deptList);
				calenderForm.setDeptLabelList(deptLabelList);
			
				ArrayList shiftList=new ArrayList();
				ArrayList shiftLabelList=new ArrayList();
				ResultSet rs16 = ad.selectQuery("select shift_code," +
						"Shift_Name from EMP_SHIFT_MASTER order by Shift_Name");  
						try {
							while(rs16.next()) {
								shiftList.add(rs16.getString("shift_code"));
								shiftLabelList.add(rs16.getString("Shift_Name"));
							}
							rs16.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						calenderForm.setShiftList(shiftList);
						calenderForm.setShiftLabelList(shiftLabelList);
						
						String location=calenderForm.getLocationId();
					    String reqTable=getTableName(location);		
		
		
		int iYear=Integer.parseInt(iYears);
		System.out.println("iYear="+iYear);
		int iMonth=Integer.parseInt(iMonths);
		iMonth=iMonth-1;
		
		if(iMonth==-1)
		{
			iMonth=11;
			iYear=iYear-1;
		}
		
		System.out.println("iMonth="+iMonth);
		
		Calendar ca = new GregorianCalendar();

		int iTDay = ca.get(Calendar.DATE);
		int iTYear = ca.get(Calendar.YEAR);
		int iTMonth = ca.get(Calendar.MONTH);

		if (iYear == 0) {
			iYear = iTYear;
			iMonth = iTMonth;
		}

		GregorianCalendar cal = new GregorianCalendar(iYear, iMonth, 1);

		int days = cal.getActualMaximum(Calendar.DAY_OF_MONTH);

		int weekStartDay = cal.get(Calendar.DAY_OF_WEEK);

		cal = new GregorianCalendar(iYear, iMonth, days);
		int iTotalweeks = cal.get(Calendar.WEEK_OF_MONTH);
		int ryear = iYear;
		int rmonth = iMonth;

		for (int iy = iTYear - 70; iy <= iTYear + 70; iy++) {
			if (iy == iYear) {
				iy = iy;
			} else {
				iy = iy;
			}
			int im = 0;
			for (im = 0; im <= 11; im++) {
				if (im == iMonth) {
					im = im;
				}
			}
		
		

			session.setAttribute("iYear", String.valueOf(iYear));
			session.setAttribute("iMonth", String.valueOf(iMonth));

		}
		int year=Calendar.getInstance().get(Calendar.YEAR); 
		   int month=rmonth;
		   
		   month=month+1;


		   String[] monthName = {"","JAN", "FEB",
					  "MAR", "APR", "MAY", "JUN", "JUL",
					  "AUG", "SEP", "OCT", "NOV",
					  "DEC"
					  };
			
		    String mon = monthName[month];
		   
		    HashMap holidaysMap=new HashMap();
		    String cal1="select DAY,"+mon+","+year+" as CYEAR from "+reqTable+" where "+mon+"!=''";
			ResultSet rs=ad.selectQuery(cal1);
			try {
				
				while(rs.next())
				{
					String reqDate=rs.getString("Day")+"/"+month+"/"+rs.getString("CYEAR");
					holidaysMap.put(reqDate, rs.getString(mon));
				}
				
			} catch (SQLException e) {
				
				e.printStackTrace();
			}
		    request.setAttribute("holidaysList", holidaysMap);
		    request.setAttribute("cal", "cal"); 
		    try {
				rs12.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		    try {
				rs16.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		    try {
				rs14.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		    try {
				rs11.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		    try {
				rs.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		    try {
				rs13.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		    try {
				rs15.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		    try {
				cc.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		return mapping.findForward("shiftManualAssign");
	}
	
	
	
	public ActionForward shiftManualAssignUpdate(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			{
		HRApprovalForm calenderForm=(HRApprovalForm)form;
		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		String date  = request.getParameter("currentDate");
		String emplist=request.getParameter("emplist");
		String date1[] = date.split("/");
		System.out.println(date1[0]);
		System.out.println(date1[1]);
		System.out.println(date1[2]);
		
		
		
		
		
		String emp="";
		ResultSet rs22 = ad.selectQuery(emplist);
		try {
			while(rs22.next())
			{
				emp=emp+"'"+rs22.getString("pernr")+"'"+",";
				
			}
			rs22.close();
			
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		emp= emp.substring(0,emp.length()-1);
		
		boolean updated=true;
		if(calenderForm.getShift()==null)
		{
			calenderForm.setShift("");
		}
		
		if(calenderForm.getShift().equalsIgnoreCase("")||calenderForm.getShift().equalsIgnoreCase("null"))
		{
			updated=false;
		}

		if(updated==true)
		{
		String update="update EMP_Shift_Register set day"+date1[0]+" = '"+calenderForm.getShift()+"' where  month ='"+date1[1]+"' "
				+ " and year='"+date1[2]+"' and pernr in ("+emp+")  ";
		int d = ad.SqlExecuteUpdate(update);
		if(d>0)
		{
			calenderForm.setMessage("Updated Successfully");
		}
		
		else
		{
			calenderForm.setMessage("Error..Please update again");
		}
		}
		
		else
		{
			calenderForm.setMessage("Error..Please update again");
		}
		
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		ArrayList locationList=new ArrayList();
		ArrayList locationLabelList=new ArrayList();
		ResultSet rs11 = ad.selectQuery("select LOCID," +
				"LOCNAME,location_code from location where location_code in ("+locations+") "); 
				try {
					while(rs11.next()) {
						locationList.add(rs11.getString("location_code"));
						locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
						
					}
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setLocationIdList(locationList);
				calenderForm.setLocationLabelList(locationLabelList);
	    calenderForm.setLocationId("ML00");
	    
	    
	    ArrayList payGroupList=new ArrayList();
		ArrayList payGroupLabelList=new ArrayList();
		ResultSet rs12 = ad.selectQuery("select Paygroup," +
				"Long_Desc from Paygroup_Master order by Long_Desc "); 
				try {
					while(rs12.next()) {
						payGroupList.add(rs12.getString("Paygroup"));
						payGroupLabelList.add(rs12.getString("Long_Desc"));
					}
					rs12.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setPayGroupList(payGroupList);
				calenderForm.setPayGroupLabelList(payGroupLabelList);
		
		ArrayList categoryList=new ArrayList();
		ArrayList categoryLabelList=new ArrayList();
		ResultSet rs13 = ad.selectQuery("select STAFFCAT," +
				"CATLTEXT from category order by CATLTEXT "); 
				try {
					while(rs13.next()) {
						categoryList.add(rs13.getString("STAFFCAT"));
						categoryLabelList.add(rs13.getString("CATLTEXT"));
					}
					rs13.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setCategoryList(categoryList);
				calenderForm.setCategoryLabelList(categoryLabelList);
		
		
		ArrayList workList=new ArrayList();
		ArrayList workLabelList=new ArrayList();
		ResultSet rs14 = ad.selectQuery("select loc_id," +
				"loc_name from working_location order by loc_name "); 
				try {
					while(rs14.next()) {
						workList.add(rs14.getString("loc_id"));
						workLabelList.add(rs14.getString("loc_name"));
					}
					rs14.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setWorkList(workList);
				calenderForm.setWorkLabelList(workLabelList);
				
		ArrayList deptList=new ArrayList();
		ArrayList deptLabelList=new ArrayList();
		ResultSet rs15 = ad.selectQuery("select dptid," +
				"DPTSTXT from DEPARTMENT order by DPTLTXT"); 
				try {
					while(rs15.next()) {
						deptList.add(rs15.getString("dptid"));
						deptLabelList.add(rs15.getString("dptid")+"-"+rs15.getString("DPTSTXT"));
					}
					rs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setDeptList(deptList);
				calenderForm.setDeptLabelList(deptLabelList);
				
				
				//repgrp
				ArrayList repgrptList=new ArrayList();
				ArrayList repgrpLabelList=new ArrayList();
				ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
						"Grp_LTXT from REPORTING_GROUP   order by Grp_LTXT "); 
						try {
							while(reprs15.next()) {
								repgrptList.add(reprs15.getString("Grp_ID"));
								repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
							}
							reprs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						calenderForm.setRepgrpList(repgrptList);
						calenderForm.setRepgrpLabelList(repgrpLabelList);
				
	    

	   int year=Calendar.getInstance().get(Calendar.YEAR); 
	   int month=Calendar.getInstance().get(Calendar.MONTH); 
	   
	   if(calenderForm.getMonthFrom()==0)
	   {
	   month=Calendar.getInstance().get(Calendar.MONTH);
	   }
	   else
	   {	   
	   month = calenderForm.getMonthFrom();
	   }
	   month=month+1;


	   String[] monthName = {"","JAN", "FEB",
				  "MAR", "APR", "MAY", "JUN", "JUL",
				  "AUG", "SEP", "OCT", "NOV",
				  "DEC"
				  };
		
	    String mon = monthName[month];
	    
	  
	    
	   
	    HashMap holidaysMap=new HashMap();
	    String cal="select DAY,"+mon+","+year+" as CYEAR from CmpCal2013 where "+mon+"!=''";
		ResultSet rs=ad.selectQuery(cal);
		try {
			
			while(rs.next())
			{
				String reqDate=rs.getString("Day")+"/"+month+"/"+rs.getString("CYEAR");
				holidaysMap.put(reqDate, rs.getString(mon));
			}
			
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
	    request.setAttribute("holidaysList", holidaysMap);
	    	
		
		int iYear = 0;
		int iMonth = 0;
		session.setAttribute("iYear", String.valueOf(iYear));
		session.setAttribute("iMonth", String.valueOf(iMonth));
		int user_id=user.getId();
		int ch=0;
		HashMap<Integer,ArrayList> m1=new HashMap<Integer,ArrayList>();
		ToDoTaskDao ad1=new ToDoTaskDao();
		
try {
	rs22.close();
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}
try {
	rs11.close();
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}
try {
	rs.close();
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}
try {
	reprs15.close();
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}
try {
	cc.close();
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}
try {
	rs13.close();
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}
try {
	rs14.close();
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}
try {
	rs12.close();
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}

try {
	rs15.close();
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}
		return mapping.findForward("displayCalenderlist");
	}
	
	public String getTableName(String location)
	{
		String tableName="";
		if(location.equalsIgnoreCase("CBWH"))
			tableName="CBWHCAL";
		if(location.equalsIgnoreCase("ML00"))
				tableName="CmpCal2013";
		if(location.equalsIgnoreCase("ML01"))
			tableName="ML01CAL";
		if(location.equalsIgnoreCase("ML02"))
			tableName="ML02CAL";
		if(location.equalsIgnoreCase("ML03"))
			tableName="ML03CAL";
		if(location.equalsIgnoreCase("ML04"))
			tableName="ML04CAL";
		if(location.equalsIgnoreCase("ML05"))
			tableName="ML05CAL";
		if(location.equalsIgnoreCase("ML06"))
			tableName="ML06CAL";
		if(location.equalsIgnoreCase("ML07"))
			tableName="ML07CAL";
		if(location.equalsIgnoreCase("ML08"))
			tableName="ML08CAL";
		if(location.equalsIgnoreCase("ML09"))
			tableName="ML09CAL";
		if(location.equalsIgnoreCase("ML10"))
			tableName="ML10CAL";
		if(location.equalsIgnoreCase("ML11"))
			tableName="ML11CAL";
		if(location.equalsIgnoreCase("ML12"))
			tableName="ML12CAL";
		if(location.equalsIgnoreCase("ML13"))
			tableName="ML13CAL";
		if(location.equalsIgnoreCase("ML14"))
			tableName="ML14CAL";
		if(location.equalsIgnoreCase("ML15"))
			tableName="ML15CAL";
		if(location.equalsIgnoreCase("ML16"))
			tableName="ML16CAL";
		if(location.equalsIgnoreCase("ML17"))
			tableName="ML17CAL";
		if(location.equalsIgnoreCase("ML18"))
       		tableName="ML18CAL";
		if(location.equalsIgnoreCase("ML19"))
			tableName="ML19CAL";
		if(location.equalsIgnoreCase("ML20"))
			tableName="ML20CAL";
		if(location.equalsIgnoreCase("ML21"))
			tableName="ML21CAL";
		if(location.equalsIgnoreCase("ML22"))
       		tableName="ML22CAL";
		if(location.equalsIgnoreCase("ML23"))
			tableName="ML23CAL";
		if(location.equalsIgnoreCase("ML24"))
			tableName="ML24CAL";
		if(location.equalsIgnoreCase("ML25"))
			tableName="ML25CAL";
		if(location.equalsIgnoreCase("ML26"))
       		tableName="ML26CAL";
		if(location.equalsIgnoreCase("ML51"))
			tableName="ML51CAL";
		if(location.equalsIgnoreCase("ML52"))
			tableName="ML52CAL";
		if(location.equalsIgnoreCase("ML53"))
			tableName="ML53CAL";
		if(location.equalsIgnoreCase("ML54"))
			tableName="ML54CAL";
		if(location.equalsIgnoreCase("ML55"))
			tableName="ML55CAL";
		if(location.equalsIgnoreCase("ML56"))
			tableName="ML56CAL";
		if(location.equalsIgnoreCase("ML57"))
			tableName="ML57CAL";
		if(location.equalsIgnoreCase("ML58"))
			tableName="ML58CAL";
		if(location.equalsIgnoreCase("ML59"))
			tableName="ML59CAL";
		if(location.equalsIgnoreCase("ML60"))
			tableName="ML60CAL";
		if(location.equalsIgnoreCase("ML61"))
			tableName="ML61CAL";
		if(location.equalsIgnoreCase("ML62"))
			tableName="ML62CAL";
		if(location.equalsIgnoreCase("ML63"))
			tableName="ML63CAL";
		if(location.equalsIgnoreCase("ML64"))
			tableName="ML64CAL";
		if(location.equalsIgnoreCase("ML65"))
			tableName="ML65CAL";
		if(location.equalsIgnoreCase("ML66"))
			tableName="ML66CAL";
		if(location.equalsIgnoreCase("ML67"))
			tableName="ML67CAL";
		if(location.equalsIgnoreCase("ML68"))
			tableName="ML68CAL";
		if(location.equalsIgnoreCase("ML90"))
			tableName="ML90CAL";
		if(location.equalsIgnoreCase("ML91"))
			tableName="ML91CAL";
		if(location.equalsIgnoreCase("ML27"))
			tableName="ML27CAL";
		if(location.equalsIgnoreCase("ML92"))
			tableName="ML92CAL";
	
		return tableName;
	}
	
	
	
	public ActionForward UpdateCmpdetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) 
	{
		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		HRApprovalForm calenderForm=(HRApprovalForm)form;
		String plantcode=request.getParameter("plant");
		String currentdate=request.getParameter("currentDate");
		 String a[]=currentdate.split("/");
		String day=a[0];
		String mon1=a[1];
		String year=a[2];
		int mon2=Integer.parseInt(mon1);
		  String[] monthName = {"","JAN", "FEB",
				  "MAR", "APR", "MAY", "JUN", "JUL",
				  "AUG", "SEP", "OCT", "NOV",
				  "DEC"
				  };
		
	  String mon = monthName[mon2];
		
	  
	  System.out.println(calenderForm.getEmplist());
	  String location=plantcode;
	    String reqTable=getTableName(location);
		String cal1="Select  LOCATION_CODE,LOCNAME from Location where LOCATION_CODE='"+plantcode+"'";
		ResultSet rs=ad.selectQuery(cal1);
	
			
			try {
				while(rs.next())
				{
					calenderForm.setLocationId(rs.getString("LOCATION_CODE")+" - "+rs.getString("LOCNAME"));
				 }
			} catch (SQLException e) {
					e.printStackTrace();
			}
			

			   
			   
			    String cal="select "+mon+" as abc from "+reqTable+" where DAY="+a[0]+" and CYEAR="+a[2]+"";
			    ResultSet rs1=ad.selectQuery(cal);
				try {
					
					while(rs1.next())
					{
						calenderForm.setHolidayType(rs1.getString("abc"));
					
					}
					
				} catch (SQLException e) {
					
					e.printStackTrace();
				}
			
		
		calenderForm.setCurentDate(currentdate);
		
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		
		
		ArrayList shiftList=new ArrayList();
		ArrayList shiftLabelList=new ArrayList();
		ResultSet rs16 = ad.selectQuery("select shift_code," +
				"Shift_Name from EMP_SHIFT_MASTER where loc like '%"+plantcode+"%'"); 
				try {
					while(rs16.next()) {
						shiftList.add(rs16.getString("shift_code"));
						shiftLabelList.add(rs16.getString("shift_code")+"-"+rs16.getString("Shift_Name"));
					}
					rs16.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setShiftList(shiftList);
				calenderForm.setShiftLabelList(shiftLabelList);
		try {
			cc.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs1.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs16.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return mapping.findForward("displayCalenderlist");

	}
	
	public ActionForward shiftassignSearch(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			{
		HRApprovalForm approvalsForm = (HRApprovalForm) form;
		
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		if(user==null){
			request.setAttribute("message","Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		
		
		ArrayList yearList=new ArrayList();
		ResultSet rs17 = ad.selectQuery("select distinct year from EMP_IN_OUT_Status  order by year desc"); 
				try {
					while(rs17.next()) {
						yearList.add(rs17.getString("year"));
					}
					rs17.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				approvalsForm.setYearList(yearList);
				

				String cmpcode="";
				int id=user.getGroupId();
				String cmp[]=new String[0]; 
				String locations="";
				
				String aa="select * from user_group where id='"+id+"'";
				ResultSet cc=ad.selectQuery(aa);
				try {
					if(cc.next())
					{
						cmpcode=cc.getString("Attendance_Loc");
						
						if(cmpcode.contains(","))
						{
						 cmp=cmpcode.split(",");
						
						for(int b=0;b<cmp.length;b++)
						{
							locations=locations+"'"+cmp[b]+"',";
						}
						
						locations=locations.substring(0, locations.length()-1);
						}
						else
						{
							locations="'"+cmpcode+"'";
						}
					}
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				
				
		ArrayList locationList=new ArrayList();
		ArrayList locationLabelList=new ArrayList();
		ResultSet rs11 = ad.selectQuery("select LOCID," +
				"LOCNAME,location_code from location where location_code in ("+locations+") "); 
				try {
					while(rs11.next()) {
						locationList.add(rs11.getString("location_code"));
						locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
						
					}
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				approvalsForm.setLocationIdList(locationList);
				approvalsForm.setLocationLabelList(locationLabelList);
		
	
				ArrayList payGroupList=new ArrayList();
				ArrayList payGroupLabelList=new ArrayList();
				ResultSet rs12 = ad.selectQuery("select Paygroup," +
						"Long_Desc from Paygroup_Master order by Long_Desc "); 
						try {
							while(rs12.next()) {
								payGroupList.add(rs12.getString("Paygroup"));
								payGroupLabelList.add(rs12.getString("Long_Desc"));
							}
							rs12.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
				approvalsForm.setPayGroupList(payGroupList);
				approvalsForm.setPayGroupLabelList(payGroupLabelList);
				
				ArrayList categoryList=new ArrayList();
				ArrayList categoryLabelList=new ArrayList();
				ResultSet rs13 = ad.selectQuery("select STAFFCAT," +
						"CATLTEXT from category order by CATLTEXT"); 
						try {
							while(rs13.next()) {
								categoryList.add(rs13.getString("STAFFCAT"));
								categoryLabelList.add(rs13.getString("CATLTEXT"));
							}
							rs13.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
				approvalsForm.setCategoryList(categoryList);
				approvalsForm.setCategoryLabelList(categoryLabelList);
				
				
				ArrayList workList=new ArrayList();
				ArrayList workLabelList=new ArrayList();
				ResultSet rs14 = ad.selectQuery("select loc_id," +
						"loc_name from working_location order by loc_name"); 
						try {
							while(rs14.next()) {
								workList.add(rs14.getString("loc_id"));
								workLabelList.add(rs14.getString("loc_name"));
							}
							rs14.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
				approvalsForm.setWorkList(workList);
				approvalsForm.setWorkLabelList(workLabelList);
				
				
				ArrayList shiftList=new ArrayList();
				ArrayList shiftLabelList=new ArrayList();
				ResultSet rs15 = ad.selectQuery("select shift_code," +
						"Shift_Name from EMP_SHIFT_MASTER where loc like '%"+approvalsForm.getLocationId()+"%' order by shift_name "); 
						try {
							while(rs15.next()) {
								shiftList.add(rs15.getString("shift_code"));
								shiftLabelList.add(rs15.getString("Shift_Name"));
							}
							rs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
				approvalsForm.setShiftList(shiftList);
				approvalsForm.setShiftLabelList(shiftLabelList);
				
				ArrayList deptList=new ArrayList();
				ArrayList deptLabelList=new ArrayList();
				ResultSet rs16 = ad.selectQuery("select dptid," +
						"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
						try {
							while(rs16.next()) {
								deptList.add(rs16.getString("dptid"));
								deptLabelList.add(rs16.getString("DPTLTXT"));
							}
							rs16.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						approvalsForm.setDeptList(deptList);
						approvalsForm.setDeptLabelList(deptLabelList);
						
						
						
						//repgrp
						ArrayList repgrptList=new ArrayList();
						ArrayList repgrpLabelList=new ArrayList();
						ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
								"Grp_LTXT from REPORTING_GROUP   order by Grp_LTXT "); 
								try {
									while(reprs15.next()) {
										repgrptList.add(reprs15.getString("Grp_ID"));
										repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
									}
									reprs15.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								
								approvalsForm.setRepgrpList(repgrptList);
								approvalsForm.setRepgrpLabelList(repgrpLabelList);

				
						
						String ACtualdept="";
					    if(approvalsForm.getDeptArray()!=null)
					    {	
					    String[] dept = approvalsForm.getDeptArray();
					    
					    StringBuffer reqdept = new StringBuffer();
						for (int i = 0; i < dept.length; i++) {
							reqdept.append("'"+dept[i]+"'" + ",");
						}
						 ACtualdept= reqdept.substring(0, reqdept.length() - 1).toString();
					    }
				
			    String ACtualloc="";
			    if(approvalsForm.getLocArray()!=null)
			    {
			    
				String[] loc = approvalsForm.getLocArray();
			    StringBuffer reqloc = new StringBuffer();
				for (int i = 0; i < loc.length; i++) {
					reqloc.append("'"+loc[i]+"'" + ",");
				}
				ACtualloc = reqloc.substring(0, reqloc.length() - 1).toString();
			    
			    }
			    
			    String ACtualpay="";
			    if(approvalsForm.getPayArray()!=null)
			    {
			    
				String[] pay = approvalsForm.getPayArray();
			    StringBuffer reqpay = new StringBuffer();
				for (int i = 0; i < pay.length; i++) {
					reqpay.append("'"+pay[i]+"'" + ",");
				}
				ACtualpay = reqpay.substring(0, reqpay.length() - 1).toString();
			    
			    }
			    
			    //catArray
			    String ACtualcat="";
			    if(approvalsForm.getCatArray()!=null)
			    {
			    
				String[] cat = approvalsForm.getCatArray();
			    StringBuffer reqcat = new StringBuffer();
				for (int i = 0; i < cat.length; i++) {
					reqcat.append("'"+cat[i]+"'" + ",");
				}
				ACtualcat = reqcat.substring(0, reqcat.length() - 1).toString();
			    
			    }
			    
			    
			    //reporting
			    
			    String ACtualrepgrp="";
			    if(approvalsForm.getRepgrpArray()!=null)
			    {	
			    String[] repgrp = approvalsForm.getRepgrpArray();
			    
			    StringBuffer reqrepgrp = new StringBuffer();
				for (int i = 0; i < repgrp.length; i++) {
					reqrepgrp.append("'"+repgrp[i]+"'" + ",");
				}
				ACtualrepgrp= reqrepgrp.substring(0, reqrepgrp.length() - 1).toString();
			    }
				
				
				ArrayList list = new ArrayList();
				String query1="select * from emp_official_info ,location ,DEPARTMENT ,DESIGNATION where Location.LOCATION_CODE=emp_official_info.LOCID and "
						+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID";
				String sqlfromdate="";
				String sqltodate="";
				
				
					
				if(!approvalsForm.getLocationId().equalsIgnoreCase(""))
				{
					query1=query1+" and emp_official_info.LOCID = '"+approvalsForm.getLocationId()+"' ";
				
				}
				
				
				
				if(!ACtualloc.equalsIgnoreCase(""))
				{
					query1=query1+" and emp_official_info.Work_ID in("+ACtualloc+") ";
				
				}
					
				if(!ACtualpay.equalsIgnoreCase(""))
				{
					query1=query1+" and emp_official_info.PAY_GROUP in("+ACtualpay+")  ";
				
				}

				if(!ACtualcat.equalsIgnoreCase(""))
				{
					query1=query1+" and emp_official_info.STAFFCAT in ("+ACtualcat+") ";
				
				}
				
				if(!ACtualdept.equalsIgnoreCase(""))
				{
					query1=query1+" and emp_official_info.DPTID in ("+ACtualdept+") ";
				}
				
				if(!ACtualrepgrp.equalsIgnoreCase(""))
				{
					query1=query1+" and emp_official_info.Reporting_Grp in ("+ACtualrepgrp+") ";
				}
				
				if(!approvalsForm.getFromDate().equalsIgnoreCase(""))
				{
					String from[]=approvalsForm.getFromDate().split("/");
				    sqlfromdate=from[2]+"-"+from[1]+"-"+from[0]; 
				    
				    String to[]=approvalsForm.getToDate().split("/");
				    sqltodate=to[2]+"-"+to[1]+"-"+to[0];
				    
				    query1=query1+" and doj between '"+sqlfromdate+"' and '"+sqltodate+"' ";
					
				}
				
				
				if(!approvalsForm.getFrompernr().equalsIgnoreCase(""))
				{
					query1=query1+" and emp_official_info.pernr = '"+approvalsForm.getFrompernr()+"'  ";
				
				}
				
				//Status shif assignment
				if(approvalsForm.getStatus().equalsIgnoreCase("Pending For Shift Assignment"))
				{
				query1=query1+" and (Shift_Code is null or Shift_Code='') ";
					
				}
				
				
				
				
				query1=query1+" and ACTIVE =1 ";
					
				
				
				
				
				ResultSet rs = ad.selectQuery(query1);
				try {
					while(rs.next())
					{
						
						HRApprovalForm help = new HRApprovalForm();
						help.setEmployeeno(rs.getString("pernr"));
						help.setEmployeeName(rs.getString("EMP_FULLNAME"));
						help.setPlant(rs.getString("LOCNAME"));
						help.setShift(rs.getString("Shift_Code"));
						help.setRule_Code(rs.getString("rule_Code"));
						help.setSwipe_Count(rs.getString("swipe_Count"));
						help.setDesignation(rs.getString("DSGSTXT"));
						help.setDepartment(rs.getString("DPTSTXT"));
						help.setDoj(rs.getString("doj"));
						help.setPaygrp(rs.getString("PAY_GROUP"));
						list.add(help);

					}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				request.setAttribute("list", list);
				try {
					rs13.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs14.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					reprs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				try {
					cc.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs12.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs16.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs17.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		return mapping.findForward("shiftassign");
	}
	
	
	
	public ActionForward updateShiftAssign(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			{
		HRApprovalForm approvalsForm = (HRApprovalForm) form;
		
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		if(user==null){
			request.setAttribute("message","Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		
		
		String pernr[] = request.getParameterValues("employeeno");
		String shiflist[]= request.getParameterValues("shiflist");
		String rule_Code[]= request.getParameterValues("rule_Code");
		String swipe_Count[]= request.getParameterValues("swipe_Count");
		
		for(int i=0;i<pernr.length;i++)
		{
			String update ="update emp_official_info set Shift_Code = '"+shiflist[i]+"' , Rule_Code= '"+rule_Code[i]+"' , Swipe_Count='"+swipe_Count[i]+"' "
					+ " where pernr ='"+pernr[i]+"' ";
			int l=ad.SqlExecuteUpdate(update);
			
			Date dNow = new Date( );
			 SimpleDateFormat ft = new SimpleDateFormat ("dd");
			 SimpleDateFormat ft1 = new SimpleDateFormat ("MM");
		int day = Integer.parseInt(ft.format(dNow));
		int month = Integer.parseInt(ft1.format(dNow));
		
		for(int j=day; j<=31; j++ )
		{
			String update2 = "update EMP_Shift_Register set day"+j+" =  '"+shiflist[i]+"' where month ='"+month+"' and pernr= '"+pernr[i]+"' ";
			int k=ad.SqlExecuteUpdate(update2);
		}
		

		String update3 = "update EMP_Shift_Register set   day1 =  '"+shiflist[i]+"',"
														+" day2 =  '"+shiflist[i]+"',"
														+" day3 =  '"+shiflist[i]+"',"
														+" day4 =  '"+shiflist[i]+"',"
														+" day5 =  '"+shiflist[i]+"',"
														+" day6 =  '"+shiflist[i]+"',"
														+" day7 =  '"+shiflist[i]+"',"
														+" day8 =  '"+shiflist[i]+"',"
														+" day9 =  '"+shiflist[i]+"',"
														+" day10 =  '"+shiflist[i]+"',"
														+" day11 =  '"+shiflist[i]+"',"
														+" day12 =  '"+shiflist[i]+"',"
														+" day13 =  '"+shiflist[i]+"',"
														+" day14 =  '"+shiflist[i]+"',"
														+" day15 =  '"+shiflist[i]+"',"
														+" day16 =  '"+shiflist[i]+"',"
														+" day17 =  '"+shiflist[i]+"',"
														+" day18 =  '"+shiflist[i]+"',"
														+" day19 =  '"+shiflist[i]+"',"
														+" day20 =  '"+shiflist[i]+"',"
														+" day21 =  '"+shiflist[i]+"',"
														+" day22 =  '"+shiflist[i]+"',"
														+" day23 =  '"+shiflist[i]+"',"
														+" day24 =  '"+shiflist[i]+"',"
														+" day25 =  '"+shiflist[i]+"',"
														+" day26 =  '"+shiflist[i]+"',"
														+" day27 =  '"+shiflist[i]+"',"
														+" day28 =  '"+shiflist[i]+"',"
														+" day29 =  '"+shiflist[i]+"',"
														+" day30 =  '"+shiflist[i]+"',"
														+" day31 =  '"+shiflist[i]+"'"
														+" where month >'"+month+"' and pernr= '"+pernr[i]+"' ";
		int s=ad.SqlExecuteUpdate(update3);
		
		
			
			approvalsForm.setMessage("Shift Assigned");
		}
		
		

		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		
		ArrayList locationList=new ArrayList();
		ArrayList locationLabelList=new ArrayList();
		ResultSet rs11 = ad.selectQuery("select LOCID," +
				"LOCNAME,location_code from location where location_code in ("+locations+")"); 
				try {
					while(rs11.next()) {
						locationList.add(rs11.getString("location_code"));
						locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
						
					}
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				approvalsForm.setLocationIdList(locationList);
				approvalsForm.setLocationLabelList(locationLabelList);
		
	
				ArrayList payGroupList=new ArrayList();
				ArrayList payGroupLabelList=new ArrayList();
				ResultSet rs12 = ad.selectQuery("select Paygroup," +
						"Long_Desc from Paygroup_Master"); 
						try {
							while(rs12.next()) {
								payGroupList.add(rs12.getString("Paygroup"));
								payGroupLabelList.add(rs12.getString("Long_Desc"));
							}
							rs12.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
				approvalsForm.setPayGroupList(payGroupList);
				approvalsForm.setPayGroupLabelList(payGroupLabelList);
				
				ArrayList categoryList=new ArrayList();
				ArrayList categoryLabelList=new ArrayList();
				ResultSet rs13 = ad.selectQuery("select STAFFCAT," +
						"CATLTEXT from category"); 
						try {
							while(rs13.next()) {
								categoryList.add(rs13.getString("STAFFCAT"));
								categoryLabelList.add(rs13.getString("CATLTEXT"));
							}
							rs13.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
				approvalsForm.setCategoryList(categoryList);
				approvalsForm.setCategoryLabelList(categoryLabelList);
				
				
				ArrayList workList=new ArrayList();
				ArrayList workLabelList=new ArrayList();
				ResultSet rs14 = ad.selectQuery("select loc_id," +
						"loc_name from working_location order by loc_name "); 
						try {
							while(rs14.next()) {
								workList.add(rs14.getString("loc_id"));
								workLabelList.add(rs14.getString("loc_name"));
							}
							rs14.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
				approvalsForm.setWorkList(workList);
				approvalsForm.setWorkLabelList(workLabelList);
				
				
				ArrayList deptList=new ArrayList();
				ArrayList deptLabelList=new ArrayList();
				ResultSet rs16 = ad.selectQuery("select dptid," +
						"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
						try {
							while(rs16.next()) {
								deptList.add(rs16.getString("dptid"));
								deptLabelList.add(rs16.getString("DPTLTXT"));
							}
							rs16.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						approvalsForm.setDeptList(deptList);
						approvalsForm.setDeptLabelList(deptLabelList);
				
				ArrayList shiftList=new ArrayList();
				ArrayList shiftLabelList=new ArrayList();
				ResultSet rs15 = ad.selectQuery("select shift_code," +
						"Shift_Name from EMP_SHIFT_MASTER"); 
						try {
							while(rs15.next()) {
								shiftList.add(rs15.getString("shift_code"));
								shiftLabelList.add(rs15.getString("Shift_Name"));
							}
							rs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
				approvalsForm.setShiftList(shiftList);
				approvalsForm.setShiftLabelList(shiftLabelList);
				
				
				String ACtualdept="";
			    if(approvalsForm.getDeptArray()!=null)
			    {	
			    String[] dept = approvalsForm.getDeptArray();
			    
			    StringBuffer reqdept = new StringBuffer();
				for (int i = 0; i < dept.length; i++) {
					reqdept.append("'"+dept[i]+"'" + ",");
				}
				 ACtualdept= reqdept.substring(0, reqdept.length() - 1).toString();
			    }
				
				   String ACtualloc="";
				    if(approvalsForm.getLocArray()!=null)
				    {
				    
					String[] loc = approvalsForm.getLocArray();
				    StringBuffer reqloc = new StringBuffer();
					for (int i = 0; i < loc.length; i++) {
						reqloc.append("'"+loc[i]+"'" + ",");
					}
					ACtualloc = reqloc.substring(0, reqloc.length() - 1).toString();
				    
				    }
				    
				    String ACtualpay="";
				    if(approvalsForm.getPayArray()!=null)
				    {
				    
					String[] pay = approvalsForm.getPayArray();
				    StringBuffer reqpay = new StringBuffer();
					for (int i = 0; i < pay.length; i++) {
						reqpay.append("'"+pay[i]+"'" + ",");
					}
					ACtualpay = reqpay.substring(0, reqpay.length() - 1).toString();
				    
				    }
				    
				    //catArray
				    String ACtualcat="";
				    if(approvalsForm.getCatArray()!=null)
				    {
				    
					String[] cat = approvalsForm.getCatArray();
				    StringBuffer reqcat = new StringBuffer();
					for (int i = 0; i < cat.length; i++) {
						reqcat.append("'"+cat[i]+"'" + ",");
					}
					ACtualcat = reqcat.substring(0, reqcat.length() - 1).toString();
				    
				    }
				
				
				ArrayList list = new ArrayList();
				String query1="select * from emp_official_info ,location ,DEPARTMENT ,DESIGNATION where Location.LOCATION_CODE=emp_official_info.LOCID and "
						+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID";
				String sqlfromdate="";
				String sqltodate="";
				
				
				
				
				if(!approvalsForm.getLocationId().equalsIgnoreCase(""))
				{
					query1=query1+" and emp_official_info.LOCID = '"+approvalsForm.getLocationId()+"' ";
				
				}
				
				
				
				if(!ACtualloc.equalsIgnoreCase(""))
				{
					query1=query1+" and emp_official_info.Work_ID in("+ACtualloc+") ";
				
				}
					
				if(!ACtualpay.equalsIgnoreCase(""))
				{
					query1=query1+" and emp_official_info.PAY_GROUP in("+ACtualpay+")  ";
				
				}

				if(!ACtualcat.equalsIgnoreCase(""))
				{
					query1=query1+" and emp_official_info.STAFFCAT in ("+ACtualcat+") ";
				
				}
				
				
				if(!approvalsForm.getFromDate().equalsIgnoreCase(""))
				{
					String from[]=approvalsForm.getFromDate().split("/");
				    sqlfromdate=from[2]+"-"+from[1]+"-"+from[0]; 
				    
				    String to[]=approvalsForm.getToDate().split("/");
				    sqltodate=to[2]+"-"+to[1]+"-"+to[0];
				    
				    query1=query1+" and doj between '"+sqlfromdate+"' and '"+sqltodate+"' ";
					
				}
				
				
				if(!approvalsForm.getFrompernr().equalsIgnoreCase(""))
				{
					query1=query1+" and emp_official_info.pernr between '"+approvalsForm.getFrompernr()+"' and '"+approvalsForm.getTopernr()+"' ";
				
				}
				
				//Status shif assignment
				if(approvalsForm.getStatus().equalsIgnoreCase("Pending For Shift Assignment"))
				{
				query1=query1+" and (Shift_Code is null or Shift_Code='') ";
					
				}
				
				
				
				
				query1=query1+" and ACTIVE =1 ";
				
				ResultSet rs = ad.selectQuery(query1);
				try {
					while(rs.next())
					{
						
						HRApprovalForm help = new HRApprovalForm();
						help.setEmployeeno(rs.getString("pernr"));
						help.setEmployeeName(rs.getString("EMP_FULLNAME"));
						help.setPlant(rs.getString("LOCNAME"));
						help.setShift(rs.getString("Shift_Code"));
						help.setRule_Code(rs.getString("rule_Code"));
						help.setSwipe_Count(rs.getString("swipe_Count"));
						help.setDesignation(rs.getString("DSGSTXT"));
						help.setDepartment(rs.getString("DPTSTXT"));
						help.setDoj(rs.getString("doj"));
						help.setPaygrp(rs.getString("PAY_GROUP"));
						list.add(help);

					}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				request.setAttribute("list", list);
				try {
					rs13.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					cc.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs14.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs12.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				try {
					rs.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs16.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		return mapping.findForward("shiftassign");
	}
	
	public ActionForward empmanualtimeentrySearch(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			{
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		if(user==null){
			request.setAttribute("message","Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
			HRApprovalForm approvalsForm = (HRApprovalForm) form;
			int i = 0;
		    ArrayList llist = new ArrayList();
		    ArrayList punchlist = new ArrayList();
		    String sqlfromdate="";
		    
		    String from[]=approvalsForm.getFromDate().split("/");
		    sqlfromdate=from[2]+"-"+from[1]+"-"+from[0]; 
		    
		    
//punch rtimings
		    
		    

			//Attendance

			SAPAttendenceDAO dao = new SAPAttendenceDAO();
			
			
			String cmpcode="";
			int id=user.getGroupId();
			String cmp[]=new String[0]; 
			String locations="";
			
			String aa="select * from user_group where id='"+id+"'";
			ResultSet cc=ad.selectQuery(aa);
			try {
				if(cc.next())
				{
					cmpcode=cc.getString("Attendance_Loc");
					
					if(cmpcode.contains(","))
					{
					 cmp=cmpcode.split(",");
					
					for(int b=0;b<cmp.length;b++)
					{
						locations=locations+"'"+cmp[b]+"',";
					}
					
					locations=locations.substring(0, locations.length()-1);
					}
					else
					{
						locations="'"+cmpcode+"'";
					}
				}
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}


				String s9 = " select emp_official_info.pernr,date,convert(varchar(11),date,106) as date1,left(DATENAME(WEEKDAY,date),3) as day,left(In_time,5) as intime,left(out_time,5) as outtime,"
						+ "left(status,2) as instatus,right(status,2) as outstatus,shift from Report_Daily_wise,emp_official_info where emp_official_info.PERNR=Report_Daily_wise.Pernr and emp_official_info.LOCID=Report_Daily_wise.Location"
						+ " and  emp_official_info.Pernr='"+approvalsForm.getEmployeeno()+"' and date='"+sqlfromdate+"' and emp_official_info.LOCID in ("+locations+")  ";
				ResultSet rs9 = ad.selectQuery(s9);
				try {
					while(rs9.next())
					{
						
						SAPAttendenceForm help = new SAPAttendenceForm();
						help.setEmployeeNo(rs9.getString("pernr"));
						help.setDate(rs9.getString("date1"));
						help.setDay(rs9.getString("day"));
						help.setiNTIME(rs9.getString("intime"));
						help.setoUTTIME(rs9.getString("outtime"));
						help.setiNSTATUS(rs9.getString("instatus"));
						help.setoUTSTATUS(rs9.getString("outstatus"));
						help.setShift(rs9.getString("shift"));
						punchlist.add(help);
						
						
			    	}
				    	

				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				request.setAttribute("punchlist", punchlist);
		    
		    
			//Employee Late Count List
			String query1="select CONVERT(varchar(10),Start_date,103) as Startdate ,EMP_MANUAL_SWIPE. *,emp_official_info.EMP_FULLNAME,CONVERT(varchar(10),EMP_MANUAL_SWIPE.Created_date,103)+' '+ CONVERT(varchar(5),EMP_MANUAL_SWIPE.Created_date,108) as Created_date1"
					+ " from EMP_MANUAL_SWIPE,emp_official_info where EMP_MANUAL_SWIPE.Pernr=emp_official_info.pernr and EMP_MANUAL_SWIPE.pernr= '"+approvalsForm.getEmployeeno()+"' and month(start_date) = month('"+sqlfromdate+"') "
							+ "and year(start_date) = year('"+sqlfromdate+"') and  emp_official_info.LOCID in ("+locations+") order by date desc ";
			ResultSet rsk = ad.selectQuery(query1);
			try {
				while(rsk.next())
				{  i++;
					HRApprovalForm help1 = new HRApprovalForm();
					help1.setEmployeeno(rsk.getString("pernr"));
					help1.setEmployeeName(rsk.getString("EMP_FULLNAME"));
					help1.setStartDate(rsk.getString("Startdate"));
					if(rsk.getString("in_out").equalsIgnoreCase("I"))
						help1.setSwipe_Type("IN");	
					if(rsk.getString("in_out").equalsIgnoreCase("O"))
					help1.setSwipe_Type("OUT");
					help1.setReason_Type(rsk.getString("lost_entry_reason_Type"));
					if(rsk.getString("start")!=null)
						help1.setTime(rsk.getString("start").substring(0, 5));
					help1.setRemarks(rsk.getString("remarks"));
					if(rsk.getString("prev_time")!=null)
						help1.setPrev_time(rsk.getString("prev_time").substring(0, 5));
					help1.setDate(rsk.getString("Created_date1"));
					llist.add(help1);

				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			
			String emp = "select count(distinct Start_date) from EMP_MANUAL_SWIPE ,emp_official_info  where late_flag = 1 and emp_official_info.PERNR= '"+approvalsForm.getEmployeeno()+"' and year(start_date) = year('"+sqlfromdate+"') "
							+ " and month(start_date) = month('"+sqlfromdate+"') and EMP_MANUAL_SWIPE.Pernr=emp_official_info.PERNR  ";
			ResultSet rsw = ad.selectQuery(emp);
			try {
				if(rsw.next())
				{
					i = rsw.getInt(1);
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			approvalsForm.setCount(Integer.toString(i));
			request.setAttribute("llist", llist);
			
			
		
		    ArrayList locationList=new ArrayList();
				ArrayList locationLabelList=new ArrayList();
				ResultSet rs11 = ad.selectQuery("select LOCID," +
						"LOCNAME,location_code from location where location_code in ("+locations+") "); 
						try {
							while(rs11.next()) {
								locationList.add(rs11.getString("location_code"));
								locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
								
							}
							rs11.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						approvalsForm.setLocationIdList(locationList);
						approvalsForm.setLocationLabelList(locationLabelList);
						
						
						
						
								ArrayList workList=new ArrayList();
								ArrayList workLabelList=new ArrayList();
								ResultSet rs14 = ad.selectQuery("select loc_id," +
										"loc_name from working_location order by loc_name"); 
										try {
											while(rs14.next()) {
												workList.add(rs14.getString("loc_id"));
												workLabelList.add(rs14.getString("loc_name"));
											}
											rs14.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										
										approvalsForm.setWorkList(workList);
										approvalsForm.setWorkLabelList(workLabelList);
										
										
										
										//repgrp
										ArrayList repgrptList=new ArrayList();
										ArrayList repgrpLabelList=new ArrayList();
										ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
												"Grp_LTXT from REPORTING_GROUP   order by Grp_LTXT "); 
												try {
													while(reprs15.next()) {
														repgrptList.add(reprs15.getString("Grp_ID"));
														repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
													}
													reprs15.close();
												} catch (SQLException e) {
													// TODO Auto-generated catch block
													e.printStackTrace();
												}
												
												approvalsForm.setRepgrpList(repgrptList);
												approvalsForm.setRepgrpLabelList(repgrpLabelList);
												
												try {
													rs11.close();
												} catch (SQLException e) {
													// TODO Auto-generated catch block
													e.printStackTrace();
												}
											 
											    
											    try {
													rs11.close();
												} catch (SQLException e) {
													// TODO Auto-generated catch block
													e.printStackTrace();
												}
											   
											    try {
													rs14.close();
												} catch (SQLException e) {
													// TODO Auto-generated catch block
													e.printStackTrace();
												}
											   
											    try {
													cc.close();
												} catch (SQLException e) {
													// TODO Auto-generated catch block
													e.printStackTrace();
												}
											   
			
				return mapping.findForward("manual_entry");
				} 
	
	
	
	public ActionForward searchForManualApprovers(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {HttpSession session = request.getSession();
			UserInfo user = (UserInfo) session.getAttribute("user");

			String sTxt = request.getParameter("searchText");
			String reqFieldName = request.getParameter("reqFieldName");
			HRApprovalForm f = (HRApprovalForm) form;

			f.setSearchText(sTxt);
			MailInboxAction mAction = new MailInboxAction();
			LinkedList searchList = new LinkedList();
			
			String cmpcode1="";
			int id=user.getGroupId();
			String cmp[]=new String[0]; 
			String locations="";
			
			
			String aa1="select * from user_group where id='"+id+"'";
			ResultSet cc1=ad.selectQuery(aa1);
			try {
				if(cc1.next())
				{
					cmpcode1=cc1.getString("Attendance_Loc");
					
					if(cmpcode1.contains(","))
					{
					 cmp=cmpcode1.split(",");
					
					for(int b=0;b<cmp.length;b++)
					{
						locations=locations+"'"+cmp[b]+"',";
					}
					
					locations=locations.substring(0, locations.length()-1);
					}
					else
					{
						locations="'"+cmpcode1+"'";
					}
				}
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
			
			try {
				
				String searchQuery = "select dpt.DPTSTXT,EMP_FULLNAME,PERNR,DPTSTXT ,"
						+ "LOCID,Category.CATLTEXT, Paygroup_Master.short_desc"
						+ " from Category, emp_official_info as emp,DEPARTMENT as dpt ,Paygroup_Master where dpt.DPTID=emp.DPTID and (EMP_FULLNAME like '%"
						+ sTxt
						+ "%' or EMAIL_ID like '%"
						+ sTxt
						+ "%' or PERNR like'%" + sTxt + "%') and Paygroup_Master.paygroup=emp.pay_group "
						+ " and Category.staffcat=emp.staffcat and emp.locid in("+locations+") ";
				ResultSet rs = ad.selectQuery(searchQuery);
				int i = 1;
				while (rs.next()) {
					JoiningFormalityForm emp = new JoiningFormalityForm();
					emp.setEmpId(rs.getString("EMP_FULLNAME") + "-"
							+ rs.getString("PERNR") + "-" + rs.getString("DPTSTXT")+ "-" + rs.getString("LOCID")+ "-" + rs.getString("CATLTEXT")+ "-" + rs.getString("short_desc"));   
					
					emp.setEmpname(rs.getString("EMP_FULLNAME"));   
					emp.setEmployeeNo(rs.getString("PERNR"));
					emp.setDept(rs.getString("DPTSTXT"));
					emp.setLocation(rs.getString("LOCID"));
					emp.setCategory(rs.getString("CATLTEXT"));
					emp.setPaygrp( rs.getString("short_desc"));
					emp.setId(reqFieldName);
					searchList.add(emp);
					if (i == 100) {
						break;
					}
					i++;
				}
				rs.close();
			
			
			if(searchList.size()==0)
			{
			String a[]=null;		
			String actualtext="";
	        if(sTxt.contains(" "))
	        {
	        	a=sTxt.split(" ");
	        
			 for(int h=0;h<a.length;h++)
	        {
	             if(!a[h].equalsIgnoreCase(""))
				 actualtext=actualtext+"EMP_FULLNAME like '%"+a[h]+"%' or EMAIL_ID like '%"+a[h]+"%' or PERNR like'%"+a[h]+"%' or ";
	        }
			 
			 
			 actualtext=actualtext.substring(0, actualtext.length()-3);
			
			 
	        }
	        
	        else
	        {
	        	actualtext="EMP_FULLNAME like '%"+sTxt+"%' or EMAIL_ID like '%"+sTxt+"%' or PERNR like'%"+sTxt+"%'";
	        }
	        
	       
	      
	    	String searchQuery1 = "select dpt.DPTSTXT,EMP_FULLNAME,PERNR,DPTSTXT ,"
					+ "LOCID,Category.CATLTEXT, Paygroup_Master.short_desc"
					+ " from Category, emp_official_info as emp,DEPARTMENT as dpt ,Paygroup_Master where dpt.DPTID=emp.DPTID and ("+actualtext+") and Paygroup_Master.paygroup=emp.pay_group "
					+ " and Category.staffcat=emp.staffcat and emp.locid in("+locations+") ";
			ResultSet rs1 = ad.selectQuery(searchQuery1);
			int i1 = 1;
			while (rs1.next()) {
				JoiningFormalityForm emp = new JoiningFormalityForm();
				emp.setEmpId(rs1.getString("EMP_FULLNAME") + "-"
						+ rs1.getString("PERNR") + "-" + rs1.getString("DPTSTXT")+ "-" + rs1.getString("LOCID")+ "-" + rs1.getString("CATLTEXT")+ "-" + rs1.getString("short_desc"));   
				
				emp.setEmpname(rs1.getString("EMP_FULLNAME"));   
				emp.setEmployeeNo(rs1.getString("PERNR"));
				emp.setDept(rs1.getString("DPTSTXT"));
				emp.setLocation(rs1.getString("LOCID"));
				emp.setCategory(rs1.getString("CATLTEXT"));
				emp.setPaygrp( rs1.getString("short_desc"));
				emp.setId(reqFieldName);
				searchList.add(emp);
				if (i1 == 100) {
					break;
				}
				i1++;
			}rs1.close();
			
			}
			
			}
			

			catch (SQLException sqle) {
				System.out.println("SQLException @ searching User Details");
				sqle.printStackTrace();
			}

			request.setAttribute("emp", searchList);
			try {
				cc1.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return mapping.findForward("searchemployee");
			}
	
	
	public ActionForward searchForManualApprovers2(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {HttpSession session = request.getSession();
			UserInfo user = (UserInfo) session.getAttribute("user");

			String sTxt = request.getParameter("searchText");
			String reqFieldName = request.getParameter("reqFieldName");
			String loc= request.getParameter("loc");
			HRApprovalForm f = (HRApprovalForm) form;

			f.setSearchText(sTxt);
			MailInboxAction mAction = new MailInboxAction();
			LinkedList searchList = new LinkedList();
			
			String cmpcode1="";
			int id=user.getGroupId();
			String cmp[]=new String[0]; 
			String locations="";
			
			
			String aa1="select * from user_group where id='"+id+"'";
			ResultSet cc1=ad.selectQuery(aa1);
			try {
				if(cc1.next())
				{
					cmpcode1=cc1.getString("Attendance_Loc");
					
					if(cmpcode1.contains(","))
					{
					 cmp=cmpcode1.split(",");
					
					for(int b=0;b<cmp.length;b++)
					{
						locations=locations+"'"+cmp[b]+"',";
					}
					
					locations=locations.substring(0, locations.length()-1);
					}
					else
					{
						locations="'"+cmpcode1+"'";
					}
				}
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
			
			try {
				
				String searchQuery = "select dpt.DPTSTXT,EMP_FULLNAME,PERNR,DPTSTXT ,"
						+ "LOCID,Category.CATLTEXT, Paygroup_Master.short_desc"
						+ " from Category, emp_official_info as emp,DEPARTMENT as dpt ,Paygroup_Master where dpt.DPTID=emp.DPTID and (EMP_FULLNAME like '%"
						+ sTxt
						+ "%' or EMAIL_ID like '%"
						+ sTxt
						+ "%' or PERNR like'%" + sTxt + "%') and Paygroup_Master.paygroup=emp.pay_group "
						+ " and Category.staffcat=emp.staffcat and emp.locid in("+locations+") ";
				ResultSet rs = ad.selectQuery(searchQuery);
				int i = 1;
				while (rs.next()) {
					JoiningFormalityForm emp = new JoiningFormalityForm();
					emp.setEmpId(rs.getString("EMP_FULLNAME") + "-"
							+ rs.getString("PERNR") + "-" + rs.getString("DPTSTXT")+ "-" + rs.getString("LOCID")+ "-" + rs.getString("CATLTEXT")+ "-" + rs.getString("short_desc"));   
					
					emp.setEmpname(rs.getString("EMP_FULLNAME"));   
					emp.setEmployeeNo(rs.getString("PERNR"));
					emp.setDept(rs.getString("DPTSTXT"));
					emp.setLocation(rs.getString("LOCID"));
					emp.setCategory(rs.getString("CATLTEXT"));
					emp.setPaygrp( rs.getString("short_desc"));
					emp.setId(reqFieldName);
					searchList.add(emp);
					if (i == 100) {
						break;
					}
					i++;
				}
				rs.close();
			
			
			if(searchList.size()==0)
			{
			String a[]=null;		
			String actualtext="";
	        if(sTxt.contains(" "))
	        {
	        	a=sTxt.split(" ");
	        
			 for(int h=0;h<a.length;h++)
	        {
	             if(!a[h].equalsIgnoreCase(""))
				 actualtext=actualtext+"EMP_FULLNAME like '%"+a[h]+"%' or EMAIL_ID like '%"+a[h]+"%' or PERNR like'%"+a[h]+"%' or ";
	        }
			 
			 
			 actualtext=actualtext.substring(0, actualtext.length()-3);
			
			 
	        }
	        
	        else
	        {
	        	actualtext="EMP_FULLNAME like '%"+sTxt+"%' or EMAIL_ID like '%"+sTxt+"%' or PERNR like'%"+sTxt+"%'";
	        }
	        
	       
	      
	    	String searchQuery1 = "select dpt.DPTSTXT,EMP_FULLNAME,PERNR,DPTSTXT ,"
					+ "LOCID,Category.CATLTEXT, Paygroup_Master.short_desc"
					+ " from Category, emp_official_info as emp,DEPARTMENT as dpt ,Paygroup_Master where dpt.DPTID=emp.DPTID and ("+actualtext+") and Paygroup_Master.paygroup=emp.pay_group "
					+ " and Category.staffcat=emp.staffcat and emp.locid in("+locations+") ";
			ResultSet rs1 = ad.selectQuery(searchQuery1);
			int i1 = 1;
			while (rs1.next()) {
				JoiningFormalityForm emp = new JoiningFormalityForm();
				emp.setEmpId(rs1.getString("EMP_FULLNAME") + "-"
						+ rs1.getString("PERNR") + "-" + rs1.getString("DPTSTXT")+ "-" + rs1.getString("LOCID")+ "-" + rs1.getString("CATLTEXT")+ "-" + rs1.getString("short_desc"));   
				
				emp.setEmpname(rs1.getString("EMP_FULLNAME"));   
				emp.setEmployeeNo(rs1.getString("PERNR"));
				emp.setDept(rs1.getString("DPTSTXT"));
				emp.setLocation(rs1.getString("LOCID"));
				emp.setCategory(rs1.getString("CATLTEXT"));
				emp.setPaygrp( rs1.getString("short_desc"));
				emp.setId(reqFieldName);
				searchList.add(emp);
				if (i1 == 100) {
					break;
				}
				i1++;
			}rs1.close();
			
			}
			
			}
			

			catch (SQLException sqle) {
				System.out.println("SQLException @ searching User Details");
				sqle.printStackTrace();
			}

			request.setAttribute("emp", searchList);
			try {
				cc1.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return mapping.findForward("searchemployee");
			}
	
	public ActionForward processEmpmanualtimeentry(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			{
		
		HttpSession session = request.getSession();
		UserInfo user = (UserInfo) session.getAttribute("user");

			HRApprovalForm help = (HRApprovalForm) form;
			String cmpcode="";
			int id=user.getGroupId();
			
			/*String aa="select * from user_group where id='"+id+"'";
			ResultSet cc=ad.selectQuery(aa);
			try {
				if(cc.next())
				{
					cmpcode=cc.getString("Attendance_Loc");
				}
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			String cmp[]=new String[0]; 
			if(cmpcode.contains(","))
			{
			 cmp=cmpcode.split(",");
			}*/
			
			
			
			cmpcode=help.getLocationId();
			
			
			String ACtualloc="";
		    if(help.getLocArray()!=null)
		    {
		    
			String[] loc = help.getLocArray();
		    StringBuffer reqloc = new StringBuffer();
			for (int i = 0; i < loc.length; i++) {
				reqloc.append(""+loc[i]+" " + ",");
			}
			ACtualloc = reqloc.substring(0, reqloc.length() - 1).toString();
		    
		    }
		
			  String m="Select day(dateadd(mm,DateDiff(mm, -1, getdate()),0) -1) as days1 , month(getdate()) as month1 ,year(getdate()) as year1 ,"
					  + "day(dateadd(mm,DateDiff(mm, -1, DATEADD(MONTH, -1, getdate()) ),0) -1) as days2 , month(DATEADD(MONTH, -1, getdate()) ) as month2 ,year(DATEADD(MONTH, -1, getdate()) ) as year2 "
					  + ", day(dateadd(mm,DateDiff(mm, -1, DATEADD(MONTH, -2, getdate()) ),0) -1) as days3 , month(DATEADD(MONTH, -2, getdate()) ) as month3 ,year(DATEADD(MONTH, -2, getdate()) ) as year3 ";
					  		  
					  		 ResultSet rsas=ad.selectQuery(m);
					  		 try {
								if(rsas.next())
								 {
								
									String q2="EXEC daily_report_status_Att_manual '"+rsas.getString("days1")+"','"+rsas.getString("month1")+"','"+rsas.getString("year1")+"','"+cmpcode+"','"+ACtualloc+"' ";
									int k1=ad.SqlExecuteUpdate(q2);
											
											 String q12=" EXEC daily_report_status_Att_manual '"+rsas.getString("days2")+"','"+rsas.getString("month2")+"','"+rsas.getString("year2")+"','"+cmpcode+"' ,'"+ACtualloc+"' ";
									int k12=ad.SqlExecuteUpdate(q12);	
									
									
								/*	String q21=" EXEC daily_report_status_Att_manual '"+rsas.getString("days3")+"','"+rsas.getString("month3")+"','"+rsas.getString("year3")+"','"+cmpcode+"'";
												int k31=ad.SqlExecuteUpdate(q21);*/
												
												
												
//First half Late
												
												String late="update Report_Daily_wise set late = convert(nvarchar(10),floor(datediff(minute,Come_Late_by,In_time)/60))+':'+convert(nvarchar(10),"
											+ "datediff(minute,Come_Late_by,In_time)%60) from EMP_SHIFT_LATE_RULES ,EMP_SHIFT_MASTER where  EMP_SHIFT_MASTER.Shift_code = EMP_SHIFT_LATE_RULES.Rule_Code   "
											+ "   and  Report_Daily_wise.Shift=EMP_SHIFT_LATE_RULES.Rule_Code  and In_time>Come_Late_by and In_time < First_Half_End_Time and Location='"+cmpcode+"' "
											+ "and Report_Daily_wise.Date between DATEADD(MONTH,-4,getdate()) and DATEADD(MONTH,1,getdate())";			 
												int klate=ad.SqlExecuteUpdate(late);
												
												//Second half Late
												
												/*String slate="update Report_Daily_wise set late = convert(nvarchar(10),floor(datediff(minute,SH_Start_Time,In_time)/60))+':'+convert(nvarchar(10),	"
											+ "datediff(minute,SH_Start_Time,In_time)%60) from EMP_SHIFT_LATE_RULES ,EMP_SHIFT_MASTER where  EMP_SHIFT_MASTER.Shift_code = EMP_SHIFT_LATE_RULES.Rule_Code"
											+ "  and  Report_Daily_wise.Shift=EMP_SHIFT_LATE_RULES.Rule_Code  and  In_time > SH_Start_Time and SH_Start_Time>'00:00' and Location='"+cmpcode+"' and "
											+ "month(Report_Daily_wise.Date) between Month(DATEADD(MONTH,-4,getdate())) and Month(DATEADD(MONTH,0,getdate()))";		 
															int sqlate=ad.SqlExecuteUpdate(slate);*/
															
												///go early by 		
															
											String early="update Report_Daily_wise set early= convert(nvarchar(10),floor(datediff(minute,Out_time,Go_Early_by)/60))+':'+convert(nvarchar(10),"
									+ "datediff(minute,Out_time,Go_Early_by)%60) from EMP_SHIFT_LATE_RULES ,EMP_SHIFT_MASTER	where  EMP_SHIFT_MASTER.Shift_code = EMP_SHIFT_LATE_RULES.Rule_Code  "
									+ "   and  Report_Daily_wise.Shift=EMP_SHIFT_LATE_RULES.Rule_Code  and Out_time < Go_Early_by and Out_time > SH_Start_Time   and Location='"+cmpcode+"'"
									+ " and Report_Daily_wise.Date between DATEADD(MONTH,-4,getdate()) and DATEADD(MONTH,1,getdate())";				
											int earsly=ad.SqlExecuteUpdate(early);			
											
											
										
													
													
													//Total hrs
													
													
													String tot="update Report_Daily_wise set total=case  when datediff(minute,In_time,Out_time)>0 then  convert(nvarchar(10),floor(datediff(minute,In_time,Out_time)/60))+':'+convert(nvarchar(10),datediff(minute,In_time,Out_time)%60) else convert(nvarchar(10),floor(datediff(minute,cast(In_time as DATETIME),dateadd(day,1,cast(Out_time as DATETIME)))/60))+':'+convert(nvarchar(10),datediff(minute,cast(In_time as DATETIME),dateadd(day,1,cast(Out_time as DATETIME)))%60) end "
															+ "from EMP_SHIFT_LATE_RULES ,EMP_SHIFT_MASTER	where  EMP_SHIFT_MASTER.Shift_code = EMP_SHIFT_LATE_RULES.Rule_Code "
															+ "  and  Report_Daily_wise.Shift=EMP_SHIFT_LATE_RULES.Rule_Code 	and Location='"+cmpcode+"' and Report_Daily_wise.Date"
															+ " between DATEADD(MONTH,-4,getdate()) and DATEADD(MONTH,1,getdate()) and Total is null and In_time>'00:00:00' and Out_time>'00:00:00'";
															int rr=ad.SqlExecuteUpdate(tot);		
															
															
												///OT HRS FULL TIME
															
															String otful="update Report_Daily_wise set OT=convert(nvarchar(10),floor((case when t.min<(case  when datediff(minute,In_time,Out_time)>0 then"
									+ " convert(nvarchar(10),datediff(minute,In_time,Out_time))-EMP_SHIFT_MASTER.OT_FULL else convert(nvarchar(10),datediff(minute,cast(In_time as DATETIME),"
									+ " dateadd(day,1,cast(Out_time as DATETIME)))) -EMP_SHIFT_MASTER.OT_FULL end)  then t.min  else (case  when datediff(minute,In_time,Out_time)>0 then  "
									+ "convert(nvarchar(10),datediff(minute,In_time,Out_time))-EMP_SHIFT_MASTER.OT_FULL else convert(nvarchar(10),datediff(minute,cast(In_time as DATETIME), "
									+ "dateadd(day,1,cast(Out_time as DATETIME)))) -EMP_SHIFT_MASTER.OT_FULL end)end)/60))+':'+ convert(nvarchar(10),(case when t.min<(case  when "
									+ "datediff(minute,In_time,Out_time)>0 then convert(nvarchar(10),datediff(minute,In_time,Out_time))-EMP_SHIFT_MASTER.OT_FULL else "
									+ "convert(nvarchar(10),datediff(minute,cast(In_time as DATETIME), dateadd(day,1,cast(Out_time as DATETIME)))) -EMP_SHIFT_MASTER.OT_FULL end)  then t.min   "
									+ " else (case  when datediff(minute,In_time,Out_time)>0 then  convert(nvarchar(10),datediff(minute,In_time,Out_time))-EMP_SHIFT_MASTER.OT_FULL else "
									+ "convert(nvarchar(10),datediff(minute,cast(In_time as DATETIME), dateadd(day,1,cast(Out_time as DATETIME)))) -EMP_SHIFT_MASTER.OT_FULL end)end)%60) from "
									+ "EMP_SHIFT_LATE_RULES ,EMP_SHIFT_MASTER,(select sum(NoHRS)*60 as min,Pernr,FromDate from OVER_TIME_DETAILS where FromDate between DATEADD(MONTH,-4,getdate())"
									+ " and DATEADD(MONTH,1,getdate()) and ApprvrStatus='Approved' group by Pernr,FromDate)t	where  EMP_SHIFT_MASTER.Shift_code = EMP_SHIFT_LATE_RULES.Rule_Code "
									+ "and t.Pernr=Report_Daily_wise.Pernr  and t.FromDate=Report_Daily_wise.Date and	0<case  when datediff(minute,In_time,Out_time)>0 then  "
									+ "convert(nvarchar(10),datediff(minute,In_time,Out_time))-EMP_SHIFT_MASTER.OT_FULL else convert(nvarchar(10),datediff(minute,cast(In_time as DATETIME), "
									+ "dateadd(day,1,cast(Out_time as DATETIME)))) -EMP_SHIFT_MASTER.OT_FULL end and  Report_Daily_wise.Shift=EMP_SHIFT_LATE_RULES.Rule_Code 	and Location='"+cmpcode+"' "
									+ "and Report_Daily_wise.Date between DATEADD(MONTH,-4,getdate()) and DATEADD(MONTH,1,getdate()) and Report_Daily_wise.Status not like '%AA%' "
									+ "and In_time>'00:00:00' and Out_time>'00:00:00'";			
															int rr6=ad.SqlExecuteUpdate(otful);	
															
															
															//OT hrs half time
															
															String othalf="update Report_Daily_wise set OT=convert(nvarchar(10),floor((case when t.min<(case  when datediff(minute,In_time,Out_time)>0 then"
									+ " convert(nvarchar(10),datediff(minute,In_time,Out_time))-EMP_SHIFT_MASTER.OT_half else convert(nvarchar(10),datediff(minute,cast(In_time as DATETIME),"
									+ " dateadd(day,1,cast(Out_time as DATETIME)))) -EMP_SHIFT_MASTER.OT_half end)  then t.min  else (case  when datediff(minute,In_time,Out_time)>0 then  "
									+ "convert(nvarchar(10),datediff(minute,In_time,Out_time))-EMP_SHIFT_MASTER.OT_half else convert(nvarchar(10),datediff(minute,cast(In_time as DATETIME), "
									+ "dateadd(day,1,cast(Out_time as DATETIME)))) -EMP_SHIFT_MASTER.OT_half end)end)/60))+':'+ convert(nvarchar(10),(case when t.min<(case  when "
									+ "datediff(minute,In_time,Out_time)>0 then convert(nvarchar(10),datediff(minute,In_time,Out_time))-EMP_SHIFT_MASTER.OT_half else "
									+ "convert(nvarchar(10),datediff(minute,cast(In_time as DATETIME), dateadd(day,1,cast(Out_time as DATETIME)))) -EMP_SHIFT_MASTER.OT_half end)  then t.min   "
									+ " else (case  when datediff(minute,In_time,Out_time)>0 then  convert(nvarchar(10),datediff(minute,In_time,Out_time))-EMP_SHIFT_MASTER.OT_half else "
									+ "convert(nvarchar(10),datediff(minute,cast(In_time as DATETIME), dateadd(day,1,cast(Out_time as DATETIME)))) -EMP_SHIFT_MASTER.OT_half end)end)%60) from "
									+ "EMP_SHIFT_LATE_RULES ,EMP_SHIFT_MASTER,(select sum(NoHRS)*60 as min,Pernr,FromDate from OVER_TIME_DETAILS where FromDate between DATEADD(MONTH,-4,getdate())"
									+ " and DATEADD(MONTH,1,getdate()) and ApprvrStatus='Approved' group by Pernr,FromDate)t	where  EMP_SHIFT_MASTER.Shift_code = EMP_SHIFT_LATE_RULES.Rule_Code "
									+ "and t.Pernr=Report_Daily_wise.Pernr  and t.FromDate=Report_Daily_wise.Date and	0<case  when datediff(minute,In_time,Out_time)>0 then  "
									+ "convert(nvarchar(10),datediff(minute,In_time,Out_time))-EMP_SHIFT_MASTER.OT_half else convert(nvarchar(10),datediff(minute,cast(In_time as DATETIME), "
									+ "dateadd(day,1,cast(Out_time as DATETIME)))) -EMP_SHIFT_MASTER.OT_half end and  Report_Daily_wise.Shift=EMP_SHIFT_LATE_RULES.Rule_Code 	and Location='"+cmpcode+"' "
									+ "and Report_Daily_wise.Date between DATEADD(MONTH,-4,getdate()) and DATEADD(MONTH,1,getdate()) and Report_Daily_wise.Status  like '%AA%'"
											+ "  and Report_Daily_wise.Status not like '%AAAA%'  and ( In_time>'00:00:00' or Out_time>'00:00:00')";
															int rr7=ad.SqlExecuteUpdate(othalf);	
															
												
												
								
								
								
							 }
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					  		 
					  	/*   try {
								conn.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}*/
						    
						    try {
								finalize();
							} catch (Throwable e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							} 
					  		 
						    
					
							String cmp[]=new String[0]; 
							String locations="";
							
							String aa="select * from user_group where id='"+id+"'";
							ResultSet cc=ad.selectQuery(aa);
							try {
								if(cc.next())
								{
									cmpcode=cc.getString("Attendance_Loc");
									
									if(cmpcode.contains(","))
									{
									 cmp=cmpcode.split(",");
									
									for(int b=0;b<cmp.length;b++)
									{
										locations=locations+"'"+cmp[b]+"',";
									}
									
									locations=locations.substring(0, locations.length()-1);
									}
									else
									{
										locations="'"+cmpcode+"'";
									}
								}
							} catch (SQLException e1) {
								// TODO Auto-generated catch block
								e1.printStackTrace();
							}
						    ArrayList locationList=new ArrayList();
								ArrayList locationLabelList=new ArrayList();
								ResultSet rs11 = ad.selectQuery("select LOCID," +
										"LOCNAME,location_code from location where location_code in ("+locations+") "); 
										try {
											while(rs11.next()) {
												locationList.add(rs11.getString("location_code"));
												locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
												
											}
											rs11.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										
										help.setLocationIdList(locationList);
										help.setLocationLabelList(locationLabelList);
										
										
										
										
												ArrayList workList=new ArrayList();
												ArrayList workLabelList=new ArrayList();
												ResultSet rs14 = ad.selectQuery("select loc_id," +
														"loc_name from working_location order by loc_name"); 
														try {
															while(rs14.next()) {
																workList.add(rs14.getString("loc_id"));
																workLabelList.add(rs14.getString("loc_name"));
															}
															rs14.close();
														} catch (SQLException e) {
															// TODO Auto-generated catch block
															e.printStackTrace();
														}
														
														help.setWorkList(workList);
														help.setWorkLabelList(workLabelList);
						    
					  		
					  		help.setMessage("DATA Processed Successfully");
					  		try {
								rs14.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					  		try {
								rs11.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					  		try {
								rsas.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
					  		try {
								cc.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
	    return mapping.findForward("manual_entry");
	    }
	public ActionForward updateEmpmanualtimeentry(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			{
		
		HttpSession session = request.getSession();
		UserInfo user = (UserInfo) session.getAttribute("user");

			HRApprovalForm help = (HRApprovalForm) form;
			int i = 0;
		    ArrayList llist = new ArrayList();
		    String sqlfromdate="";
		    
		    String from[]=help.getFromDate().split("/");
		    sqlfromdate=from[2]+"-"+from[1]+"-"+from[0]; 
		    
		    
		    int curnoofdays=0;
		    String curmonth="";
		    String curyear="";
		    
		    if(Integer.parseInt(help.getCount())>=100)
		    {
		    	help.setMessage("Your Late Limit Exceeded Please Check");
		    	
		    	//Employee Late Count List
				String query1="select CONVERT(varchar(10),Start_date,103) as Startdate ,"
						+ " * from EMP_MANUAL_SWIPE where pernr= '"+help.getEmployeeno()+"' and month(start_date) = month('"+sqlfromdate+"') "
								+ "and month(start_date) = month('"+sqlfromdate+"') order by Start_date desc ";
				ResultSet rsk = ad.selectQuery(query1);
				try {
					while(rsk.next())
					{  i++;
						HRApprovalForm help1 = new HRApprovalForm();
						help1.setStartDate(rsk.getString("Startdate"));
						if(rsk.getString("in_out").equalsIgnoreCase("I"))
							help1.setSwipe_Type("IN");	
						if(rsk.getString("in_out").equalsIgnoreCase("O"))
						help1.setSwipe_Type("OUT");
						help1.setReason_Type(rsk.getString("lost_entry_reason_Type"));
						help1.setTime(rsk.getString("start"));
						help1.setRemarks(rsk.getString("remarks"));
						llist.add(help1);

					}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				request.setAttribute("llist", llist);
				
				try {
					rsk.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		    	
		    	return mapping.findForward("manual_entry");
		    	
		    }
		    
		    
		    
		    String a = "select day"+Integer.parseInt(from[0])+" from EMP_Shift_Register where year ='"+from[2]+"'  "
		    		+ "and month ='"+Integer.parseInt(from[1])+"'  and pernr= '"+help.getEmployeeno()+"' ";
		    
		    String ShiftCode="";
		    ResultSet rs = ad.selectQuery(a);
		    try {
				if(rs.next())
				{
					ShiftCode=rs.getString(1);
				}
			} catch (SQLException e2) {
				// TODO Auto-generated catch block
				e2.printStackTrace();
			}
		    
		    
		  /*  int time_valid=0 ;
		    String a1 = " select  isnull(count(*),0)  from EMP_SHIFT_LATE_RULES,EMP_SHIFT_MASTER where  EMP_SHIFT_LATE_RULES.Rule_Code='"+ShiftCode+"' and "
		    		+ "('"+help.getTime()+"' between dateadd(minute,1,Come_Late_by)  and dateadd(minute,-1,First_Half_End_Time)  or '"+help.getTime()+"' between dateadd(minute,1,SH_Start_Time) "
		    		+ "and dateadd(minute,-1,Go_Early_by)) and EMP_SHIFT_LATE_RULES.Rule_Code=Shift_code";
		    
		    ResultSet rs1 = ad.selectQuery(a1);
		    try {
 				if(rs1.next())
				{
					time_valid=rs1.getInt(1);
				}
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		    
		    if(time_valid>0)
		    {
		    	help.setMessage("Please Enter Valid Time");
		    	return mapping.findForward("manual_entry");
		    }*/
		    
		    int late_flag=0;
		    
		    String a2 ="select COUNT(*) as count from ("
		    		+ " select EMP_SHIFT_LATE_RULES.Rule_code, Come_Late_by,Shift_start_time from  EMP_SHIFT_LATE_RULES ,EMP_SHIFT_MASTER "
		    		+ " where  EMP_SHIFT_LATE_RULES.Rule_Code =EMP_SHIFT_MASTER.Rule_code)t where"
		    		+ " Rule_Code= '"+ShiftCode+"' and '"+help.getTime()+"' > Shift_start_time and '"+help.getTime()+"' <= Come_Late_by ";
		    		  
		    ResultSet rs2 = ad.selectQuery(a2);
		    try {
				if(rs2.next())
				{
					late_flag=rs2.getInt(1);
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}		 
		    
		    //update 0 for old records
			String localhostname="";
			String ipaddress="";
			String username="";
			try {
				localhostname = (InetAddress.getLocalHost()).getCanonicalHostName();
				ipaddress = (InetAddress.getLocalHost()).getHostAddress();
				username=(InetAddress.getLocalHost()).getHostName();
				
			} catch (UnknownHostException e1) {
				
				e1.printStackTrace();
			}
			
			ipaddress = request.getHeader("X-FORWARDED-FOR");  // proxy
			if(ipaddress==null)
			{
				ipaddress = request.getRemoteAddr();
			}
		    
		    String up="update EMP_MANUAL_SWIPE set Status_Flag=0 where pernr='"+help.getEmployeeno()+"' and Start_date='"+sqlfromdate+"' and In_Out='"+help.getSwipetype()+"'";
		    int s1d= ad.SqlExecuteUpdate(up);
		    
		/*    String s ="insert into EMP_MANUAL_SWIPE values('','"+help.getEmployeeno()+"','"+sqlfromdate+"', '"+help.getSwipetype()+"','"+help.getTime()+"', "
		    		+ " '"+help.getSwipereason()+"','','"+help.getSwiperemarks()+"','"+help.getShift()+"',convert(date, getdate()), convert(varchar(10), GETDATE(), 108) ,'"+user.getEmployeeNo()+"' ,'','','"+late_flag+"',getdate(),'1')";
			*/
		    String s="";
		    if(help.getSwipetype().equalsIgnoreCase("I"))
		    {
		     s ="insert into EMP_MANUAL_SWIPE(Pernr,Start_date,In_Out,Start,Lost_Entry_Reason_Type,Remarks,Shift_Code,Date,Time,Username,Created_date,Status_Flag,late_flag,Prev_time,IP_Addr) "
		    		+ "values('"+help.getEmployeeno()+"','"+sqlfromdate+"', '"+help.getSwipetype()+"','"+help.getTime()+"', '"+help.getSwipereason()+"','"+help.getSwiperemarks()+"','"+help.getShift()+"',getdate(),getdate(),'"+user.getEmployeeNo()+"',getdate(),'1','"+late_flag+"',"
		    				+ "(select In_time from Report_Daily_wise where Pernr='"+help.getEmployeeno()+"' and date='"+sqlfromdate+"'),'"+ipaddress+"')";
		    }
		    else
		    {
			     s ="insert into EMP_MANUAL_SWIPE(Pernr,Start_date,In_Out,Start,Lost_Entry_Reason_Type,Remarks,Shift_Code,Date,Time,Username,Created_date,Status_Flag,late_flag,Prev_time,IP_Addr) "
				    		+ "values('"+help.getEmployeeno()+"','"+sqlfromdate+"', '"+help.getSwipetype()+"','"+help.getTime()+"', '"+help.getSwipereason()+"','"+help.getSwiperemarks()+"','"+help.getShift()+"',getdate(),getdate(),'"+user.getEmployeeNo()+"',getdate(),'1','"+late_flag+"',"
				    				+ "(select out_time from Report_Daily_wise where Pernr='"+help.getEmployeeno()+"' and date='"+sqlfromdate+"'),'"+ipaddress+"')";
		    }
			
		    
			int k = ad.SqlExecuteUpdate(s);
			String time="";
			if(k>0)
			{
				
				 time = "update EMP_IN_OUT set  day"+Integer.parseInt(from[0])+" ='"+help.getTime()+"' where year ='"+from[2]+"'  "
		    		+ "and month ='"+Integer.parseInt(from[1])+"'  and pernr= '"+help.getEmployeeno()+"' and in_out='"+help.getSwipetype()+"' ";
				 int s1 = ad.SqlExecuteUpdate(time);
			
				 
				 String time_Status="";	 
				 if(!help.getSwipereason().equalsIgnoreCase("Early"))
				 {
				
					 if(!help.getSwipereason().equalsIgnoreCase("Absent"))
					 {
					 
				 if(help.getSwipetype().equalsIgnoreCase("I"))
				 {
					 time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(from[0])+" ='PP'+RIGHT(day"+Integer.parseInt(from[0])+",2) where year ='"+from[2]+"'  "
			    		+ "and month ='"+Integer.parseInt(from[1])+"'  and pernr= '"+help.getEmployeeno()+"'  ";
					 int s2 = ad.SqlExecuteUpdate(time_Status);
					 
				 }
				 else
				 {
					 time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(from[0])+" =LEFT(day"+Integer.parseInt(from[0])+",2)+'PP'  where year ='"+from[2]+"'  "
					    		+ "and month ='"+Integer.parseInt(from[1])+"'  and pernr= '"+help.getEmployeeno()+"'  ";
					  int s3 = ad.SqlExecuteUpdate(time_Status);
					 
				 }
					 }
					 
					 else
					 {
						 
						 if(help.getSwipetype().equalsIgnoreCase("I"))
						 {
							 time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(from[0])+" ='AA'+RIGHT(day"+Integer.parseInt(from[0])+",2) where year ='"+from[2]+"'  "
					    		+ "and month ='"+Integer.parseInt(from[1])+"'  and pernr= '"+help.getEmployeeno()+"'  ";
							 int s2 = ad.SqlExecuteUpdate(time_Status);
							 
						 }
						 else
						 {
							 time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(from[0])+" =LEFT(day"+Integer.parseInt(from[0])+",2)+'AA'  where year ='"+from[2]+"'  "
							    		+ "and month ='"+Integer.parseInt(from[1])+"'  and pernr= '"+help.getEmployeeno()+"'  ";
							  int s3 = ad.SqlExecuteUpdate(time_Status);
							 
						 }
						 
					 }
				 
				 
				 }
				 else
				 {
					 if(help.getSwipetype().equalsIgnoreCase("I"))
					 {
						 time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(from[0])+" ='PM'+RIGHT(day"+Integer.parseInt(from[0])+",2) where year ='"+from[2]+"'  "
				    		+ "and month ='"+Integer.parseInt(from[1])+"'  and pernr= '"+help.getEmployeeno()+"'  ";
						 int s2 = ad.SqlExecuteUpdate(time_Status);
						 
					 }
					 else
					 {
						 time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(from[0])+" =LEFT(day"+Integer.parseInt(from[0])+",2)+'PM'  where year ='"+from[2]+"'  "
						    		+ "and month ='"+Integer.parseInt(from[1])+"'  and pernr= '"+help.getEmployeeno()+"'  ";
						  int s3 = ad.SqlExecuteUpdate(time_Status);
						 
					 }
					 
					 }
				 
				 //// update late count in_out status
				 
					String emp = "select count(distinct Start_date) from EMP_MANUAL_SWIPE where late_flag = 1 and pernr= '"+help.getEmployeeno()+"' and year(start_date) = year('"+sqlfromdate+"') "
							+ "and month(start_date) = month('"+sqlfromdate+"') ";
			ResultSet rsw = ad.selectQuery(emp);
			try {
				if(rsw.next())
				{
					
					 time_Status= "update EMP_IN_OUT_STATUS set Late_count='"+Integer.toString(rsw.getInt(1))+"'  where year ='"+from[2]+"'  "
					    		+ "and month ='"+Integer.parseInt(from[1])+"'  and pernr= '"+help.getEmployeeno()+"'  ";
					  int s3 = ad.SqlExecuteUpdate(time_Status);
					
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			try {
				rsw.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
				 
				
				 help.setMessage("Data Updated Successfully");
			} 
			
			
			//Employee Late Count List
			String query1="select CONVERT(varchar(10),Start_date,103) as Startdate ,EMP_MANUAL_SWIPE. *,emp_official_info.EMP_FULLNAME,CONVERT(varchar(10),EMP_MANUAL_SWIPE.Created_date,103)+' '+ CONVERT(varchar(5),EMP_MANUAL_SWIPE.Created_date,108) as Created_date1"
					+ " from EMP_MANUAL_SWIPE,emp_official_info where EMP_MANUAL_SWIPE.Pernr=emp_official_info.pernr and EMP_MANUAL_SWIPE.pernr= '"+help.getEmployeeno()+"' and month(start_date) = month('"+sqlfromdate+"') "
							+ "and month(start_date) = month('"+sqlfromdate+"') order by date desc ";
			ResultSet rsk = ad.selectQuery(query1);
			try {
				while(rsk.next())
				{  i++;
					HRApprovalForm help1 = new HRApprovalForm();
					help1.setEmployeeno(rsk.getString("pernr"));
					help1.setEmployeeName(rsk.getString("EMP_FULLNAME"));
					help1.setStartDate(rsk.getString("Startdate"));
					if(rsk.getString("in_out").equalsIgnoreCase("I"))
						help1.setSwipe_Type("IN");	
					if(rsk.getString("in_out").equalsIgnoreCase("O"))
					help1.setSwipe_Type("OUT");
					help1.setReason_Type(rsk.getString("lost_entry_reason_Type"));
					help1.setTime(rsk.getString("start"));
					help1.setRemarks(rsk.getString("remarks"));
					help1.setDate(rsk.getString("Created_date1"));
					llist.add(help1);

				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			request.setAttribute("llist", llist);
			
			//update report wise procedure
			
			curyear=from[2];
			curmonth=from[1];
			
			
			Calendar mycal = Calendar.getInstance();

			mycal.set(Integer.parseInt(curyear), Integer.parseInt(curmonth)-1, 1);
			
			// Get the number of days in that month
			curnoofdays = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
			
	
			
			/* String query="EXEC daily_report_status_Att '"+curnoofdays+"','"+curmonth+"','"+curyear+"','"+help.getEmployeeno()+"'  ";
			 int kw=ad.SqlExecuteUpdate(query);*/
		
			
		 		
		
				empmanualtimeentry(mapping, form, request, response);
				
				try {
					rsk.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs2.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		    return mapping.findForward("manual_entry");
				
			
			} 
	
			
	       	
	public ActionForward dailyArrivalreport(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		

		

		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		

		HRApprovalForm help = (HRApprovalForm) form;

		

		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		
		
		ArrayList locationList=new ArrayList();
		ArrayList locationLabelList=new ArrayList();
		ResultSet rs11 = ad.selectQuery("select LOCID," +
				"LOCNAME,location_code from location where location_code in ("+locations+") "); 
				try {
					while(rs11.next()) {
						locationList.add(rs11.getString("location_code"));
						locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
						
					}
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setLocationIdList(locationList);
				help.setLocationLabelList(locationLabelList);
	
			
		
				ArrayList deptList=new ArrayList();
				ArrayList deptLabelList=new ArrayList();
				ResultSet rs15 = ad.selectQuery("select dptid," +
						"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
						try {
							while(rs15.next()) {
								deptList.add(rs15.getString("dptid"));
								deptLabelList.add(rs15.getString("DPTLTXT"));
							}
							rs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						help.setDeptList(deptList);
						help.setDeptLabelList(deptLabelList);
						
						//subdep
						ArrayList subdeptList=new ArrayList();
						ArrayList subdeptLabelList=new ArrayList();
						ResultSet subrs15 = ad.selectQuery("select SDPTID," +
								"SDPTID_LTXT from SUBDEPARTMENT order by SDPTID_LTXT "); 
								try {
									while(subrs15.next()) {
										subdeptList.add(subrs15.getString("SDPTID"));
										subdeptLabelList.add(subrs15.getString("SDPTID_LTXT"));
									}
									subrs15.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								
								help.setSubdeptList(subdeptList);
								help.setSubdeptLabelList(subdeptLabelList);
								
								//repgrp
								ArrayList repgrptList=new ArrayList();
								ArrayList repgrpLabelList=new ArrayList();
								ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
										"Grp_LTXT from REPORTING_GROUP   order by Grp_LTXT "); 
										try {
											while(reprs15.next()) {
												repgrptList.add(reprs15.getString("Grp_ID"));
												repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
											}
											reprs15.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										
										help.setRepgrpList(repgrptList);
										help.setRepgrpLabelList(repgrpLabelList);
										
				request.setAttribute("result", "result");
			  
			   
			    try {
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			    
			    
			   
			    try {
					cc.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			   
			    try {
					rs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			    try {
					reprs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			   
			    try {
					subrs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		return mapping.findForward("dailyPerformancereport");
		
	
		
	
		
	}

	public ActionForward dailyPerformancereport(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		

		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		

		HRApprovalForm help = (HRApprovalForm) form;

		

		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		
		
		ArrayList locationList=new ArrayList();
		ArrayList locationLabelList=new ArrayList();
		ResultSet rs11 = ad.selectQuery("select LOCID," +
				"LOCNAME,location_code from location where location_code in ("+locations+") "); 
				try {
					while(rs11.next()) {
						locationList.add(rs11.getString("location_code"));
						locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
						
					}
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setLocationIdList(locationList);
				help.setLocationLabelList(locationLabelList);
	
			
		
				ArrayList deptList=new ArrayList();
				ArrayList deptLabelList=new ArrayList();
				ResultSet rs15 = ad.selectQuery("select dptid," +
						"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
						try {
							while(rs15.next()) {
								deptList.add(rs15.getString("dptid"));
								deptLabelList.add(rs15.getString("DPTLTXT"));
							}
							rs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						help.setDeptList(deptList);
						help.setDeptLabelList(deptLabelList);
						
						//subdep
						ArrayList subdeptList=new ArrayList();
						ArrayList subdeptLabelList=new ArrayList();
						ResultSet subrs15 = ad.selectQuery("select SDPTID," +
								"SDPTID_LTXT from SUBDEPARTMENT order by SDPTID_LTXT "); 
								try {
									while(subrs15.next()) {
										subdeptList.add(subrs15.getString("SDPTID"));
										subdeptLabelList.add(subrs15.getString("SDPTID_LTXT"));
									}
									subrs15.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								
								help.setSubdeptList(subdeptList);
								help.setSubdeptLabelList(subdeptLabelList);
								
								//repgrp
								ArrayList repgrptList=new ArrayList();
								ArrayList repgrpLabelList=new ArrayList();
								ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
										"Grp_LTXT from REPORTING_GROUP   order by Grp_LTXT "); 
										try {
											while(reprs15.next()) {
												repgrptList.add(reprs15.getString("Grp_ID"));
												repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
											}
											reprs15.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										
										help.setRepgrpList(repgrptList);
										help.setRepgrpLabelList(repgrpLabelList);
										
				request.setAttribute("result", "result");
				
try {
	cc.close();
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}


try {
	rs11.close();
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}



try {
	cc.close();
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}

try {
	rs15.close();
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}
try {
	subrs15.close();
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}
try {
	reprs15.close();
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}
		return mapping.findForward("dailyPerformancereport");
		
	
		
	}
	
	

	public ActionForward dailyreport(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		

		HRApprovalForm help = (HRApprovalForm) form;


		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		
		ArrayList locationList=new ArrayList();
		ArrayList locationLabelList=new ArrayList();
		ResultSet rs11 = ad.selectQuery("select LOCID," +
				"LOCNAME,location_code from location where location_code in ("+locations+") "); 
				try {
					while(rs11.next()) {
						locationList.add(rs11.getString("location_code"));
						locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
						
					}
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setLocationIdList(locationList);
				help.setLocationLabelList(locationLabelList);
	
				ArrayList workList=new ArrayList();
				ArrayList workLabelList=new ArrayList();
				ResultSet rs14 = ad.selectQuery("select loc_id," +
						"loc_name from working_location order by loc_name"); 
						try {
							while(rs14.next()) {
								workList.add(rs14.getString("loc_id"));
								workLabelList.add(rs14.getString("loc_name"));
							}
							rs14.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
				help.setWorkList(workList);
				help.setWorkLabelList(workLabelList);
		
		ArrayList categoryList=new ArrayList();
		ArrayList categoryLabelList=new ArrayList();
		ResultSet rs13 = ad.selectQuery("select STAFFCAT," +
				"CATLTEXT from category order by CATLTEXT"); 
				try {
					while(rs13.next()) {
						categoryList.add(rs13.getString("STAFFCAT"));
						categoryLabelList.add(rs13.getString("CATLTEXT"));
					}
					
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setCategoryList(categoryList);
				help.setCategoryLabelList(categoryLabelList);
		
				ArrayList payGroupList=new ArrayList();
				ArrayList payGroupLabelList=new ArrayList();
				ResultSet rs12 = ad.selectQuery("select Paygroup," +
				"Long_Desc from Paygroup_Master"); 
				try {
					while(rs12.next()) {
						payGroupList.add(rs12.getString("Paygroup"));
						payGroupLabelList.add(rs12.getString("Long_Desc"));
					}
			
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setPayGroupList(payGroupList);
				help.setPayGroupLabelList(payGroupLabelList);	
				
				
				//repgrp
				ArrayList repgrptList=new ArrayList();
				ArrayList repgrpLabelList=new ArrayList();
				ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
						"Grp_LTXT from REPORTING_GROUP   order by Grp_LTXT "); 
						try {
							while(reprs15.next()) {
								repgrptList.add(reprs15.getString("Grp_ID"));
								repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
							}
							reprs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						help.setRepgrpList(repgrptList);
						help.setRepgrpLabelList(repgrpLabelList);
				
				request.setAttribute("result", "result");
				try {
					reprs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				try {
					rs14.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs12.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}try {
					rs13.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					cc.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		return mapping.findForward("displaydialyreport");
		
	}
	
	
	public ActionForward exportDeptSummaryreport(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {		

		

		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
		
		Calendar mycal = Calendar.getInstance();
		help.setFrommonth(Integer.toString(mycal.get(Calendar.MONTH) + 1));
		
		Date dNow = new Date( );
		SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd");
		String exportdate=ft.format(dNow);

		response.setHeader("Content-Disposition", "inline; filename="+exportdate+"_Department_Summary_Report.xls");
		
		
		
		//dept
		String ACtualdept="";
	    if(help.getDeptArray()!=null)
	    {	
	    String[] dept = help.getDeptArray();
	    
	    StringBuffer reqdept = new StringBuffer();
		for (int i = 0; i < dept.length; i++) {
			reqdept.append("'"+dept[i]+"'" + ",");
		}
		 ACtualdept= reqdept.substring(0, reqdept.length() - 1).toString();
	    }
		
	    
	    //subdept
	    
	    String ACtualsubdept="";
	    if(help.getSubdeptArray()!=null)
	    {	
	    String[] subdept = help.getSubdeptArray();
	    
	    StringBuffer reqsubdept = new StringBuffer();
		for (int i = 0; i < subdept.length; i++) {
			reqsubdept.append("'"+subdept[i]+"'" + ",");
		}
		ACtualsubdept= reqsubdept.substring(0, reqsubdept.length() - 1).toString();
	    }
	    
	    //reporting
	    
	    String ACtualrepgrp="";
	    if(help.getRepgrpArray()!=null)
	    {	
	    String[] repgrp = help.getRepgrpArray();
	    
	    StringBuffer reqrepgrp = new StringBuffer();
		for (int i = 0; i < repgrp.length; i++) {
			reqrepgrp.append("'"+repgrp[i]+"'" + ",");
		}
		ACtualrepgrp= reqrepgrp.substring(0, reqrepgrp.length() - 1).toString();
	    }
									
										
										
										float working=0;
										float wo=0;
										 float od=0;							
										 float cl=0;
										 float sl=0;
										 float el=0;
										 float lp=0;
										 float co=0;
										 float ml=0;
										 float ph=0;
										
										
										 float leave_Availed=0;
										 float total_worked=0;
										 float week_off_earned=0;
										 float paid_days=0;
										 float worK_hrs=0;
									
											
					
			
			
					String[] monthName = {"","JAN", "FEB",
									  "MAR", "APR", "MAY", "JUN", "JUL",
									  "AUG", "SEP", "OCT", "NOV",
									  "DEC"
									  };
				    
					ArrayList list1=new ArrayList();
					ArrayList list2=new ArrayList();
					ArrayList deptlist = new ArrayList();
					help.setSummbrkup(request.getParameter("summbrkup"));
					
					if( help.getSummbrkup().equalsIgnoreCase("Department Wise") )
					{
					
						String list="select distinct DEPARTMENT.DPTID,SUBDEPARTMENT.SDPTID,Grp_ID,DPTSTXT,SDPTID_STXT,Grp_STXT  from DEPARTMENT,SUBDEPARTMENT,"
								+ "REPORTING_GROUP,emp_official_info where LOCID='"+help.getLocationId()+"' and emp_official_info.DPTID=DEPARTMENT.DPTID and emp_official_info.SDPTID=SUBDEPARTMENT.SDPTID "
								+ "and emp_official_info.Reporting_Grp=REPORTING_GROUP.Grp_ID  and DEPARTMENT.dptid in ("+ACtualdept+") and SUBDEPARTMENT.SDPTID in ("+ACtualsubdept+") and REPORTING_GROUP.Grp_ID in("+ACtualrepgrp+") order by DPTID,SDPTID,Grp_ID";
							ResultSet rs1 = ad.selectQuery(list);
						try {
							while(rs1.next())
							{
								HRApprovalForm help1 = new HRApprovalForm();
								help1.setDepartment(rs1.getString("DPTID"));
								help1.setSubdepartment(rs1.getString("SDPTID"));
								help1.setRepgrp(rs1.getString("Grp_ID"));
								help1.setDeptFrom(rs1.getString("DPTSTXT"));
								help1.setDeptTo(rs1.getString("SDPTID_STXT"));
								help1.setDesgTo(rs1.getString("Grp_STXT"));
								deptlist.add(help1);
							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						try {
							rs1.close();
						} catch (SQLException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
						request.setAttribute("deptlist", deptlist);
						
						String q="  select 'd' as prefix, count(k.PERNR) as nofemp,k.SDPTID,k.SDPTID_STXT,k.DPTID,k.DPTSTXT,k.Grp_ID,k.Grp_STXT,SUM(k.od+k.wo+k.ph) as paid,sum(k.od) as od,"
								+ "sum(k.lp) as lp,sum(k.wo) as wo,SUM(k.ph) as ph,sum(k.cl) as cl,sum(k.sl) as sl,sum(k.el) as el,sum(k.co) as co,sum(k.Ml) as ml  from  "
								+ " (SELECT emp_official_info.LOCID,emp_official_info.Pernr,emp_official_info.SDPTID,sub.SDPTID_STXT,dep.DPTID,dep.DPTSTXT,rep.Grp_ID,rep.Grp_STXT,"
								+ "(LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'PP', '')))*0.25 as od,(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as ab,"
								+ "(LEN(day) - LEN(REPLACE(day, 'WO', '')))*0.25 as wo,(LEN(day) - LEN(REPLACE(day, 'PH', '')))*0.25 as ph, (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl, "
								+ "(LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl, (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL, (LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25+"
								+ "(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as LP, (LEN(day) - LEN(REPLACE(day, 'CO', '')))*0.25 as CO, (LEN(day) - LEN(REPLACE(day, 'ML', '')))*0.25 as ML  "
								+ " from( select 	"+currentmonthdays(help.getYear(), help.getMonth(), 0)+" as day,Pernr from EMP_IN_OUT_Status where   month ='"+help.getMonth()+"' and year ='"+help.getYear()+"')t,emp_official_info,SUBDEPARTMENT as sub ,DEPARTMENT as dep,REPORTING_GROUP as rep  "
								+ "where t.Pernr=emp_official_info.PERNR   and rep.Grp_ID=emp_official_info.Reporting_Grp and dep.DPTID=emp_official_info.DPTID and sub.SDPTID=emp_official_info.SDPTID and"
								+ " emp_official_info.LOCID='"+help.getLocationId()+"' and emp_official_info.ACTIVE=1 and emp_official_info.SDPTID in ("+ACtualsubdept+") and emp_official_info.DPTID in("+ACtualdept+") and"
								+ " emp_official_info.Reporting_Grp in ("+ACtualsubdept+"))k group by k.SDPTID,k.SDPTID_STXT,k.DPTID,k.DPTSTXT,k.Grp_ID,k.Grp_STXT    "
								+ " union all  select 'tot' as prefix, count(k.PERNR) as nofemp,'','','','','','',SUM(k.od+k.wo+k.ph) as paid,sum(k.od) as od,sum(k.lp) as lp,sum(k.wo) as wo,SUM(k.ph) "
								+ "as ph,sum(k.cl) as cl,sum(k.sl) as sl,sum(k.el) as el,sum(k.co) as co,sum(k.Ml) as ml  from  "
								+ " (SELECT emp_official_info.LOCID,emp_official_info.Pernr,emp_official_info.SDPTID,sub.SDPTID_STXT,dep.DPTID,dep.DPTSTXT,rep.Grp_ID,rep.Grp_STXT,"
								+ "(LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'PP', '')))*0.25 as od,(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as ab,"
								+ "(LEN(day) - LEN(REPLACE(day, 'WO', '')))*0.25 as wo,(LEN(day) - LEN(REPLACE(day, 'PH', '')))*0.25 as ph, (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl, "
								+ "(LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl, (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL, (LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as LP, (LEN(day) - LEN(REPLACE(day, 'CO', '')))*0.25 as CO, (LEN(day) - LEN(REPLACE(day, 'ML', '')))*0.25 as ML "
								+ "  from( select "+currentmonthdays(help.getYear(), help.getMonth(), 0)+" as day,Pernr  from EMP_IN_OUT_Status where    month ='"+help.getMonth()+"' and year ='"+help.getYear()+"')t,emp_official_info,SUBDEPARTMENT as sub,DEPARTMENT as dep,REPORTING_GROUP as rep    where t.Pernr=emp_official_info.PERNR  and rep.Grp_ID=emp_official_info.Reporting_Grp and dep.DPTID=emp_official_info.DPTID and sub.SDPTID=emp_official_info.SDPTID and emp_official_info.LOCID='"+help.getLocationId()+"' and emp_official_info.ACTIVE=1 and emp_official_info.SDPTID in"
								+ " ("+ACtualsubdept+")and emp_official_info.DPTID in("+ACtualdept+") and emp_official_info.Reporting_Grp in ("+ACtualrepgrp+") )k ";						
														ResultSet rs20 = ad.selectQuery(q);
												

														try {
															while(rs20.next())
															{
																HRApprovalForm app=new HRApprovalForm();
																
																app.setStatus(rs20.getString("prefix"));
																app.setEmployeeno(rs20.getString("nofemp"));
																app.setDeptTo(rs20.getString("SDPTID_STXT"));
																app.setDepartment(rs20.getString("DPTID"));
																app.setSubdepartment(rs20.getString("SDPTID"));
																app.setRepgrp(rs20.getString("Grp_ID"));
																app.setPaid_days(rs20.getFloat("paid"));
																app.setOd(rs20.getFloat("Od"));
																app.setCl(rs20.getFloat("cl"));
																app.setSl(rs20.getFloat("sl"));
																app.setEl(rs20.getFloat("el"));					
																app.setLp(rs20.getFloat("lp"));						
																app.setCo(rs20.getFloat("Co"));
																app.setMl(rs20.getFloat("Ml"));
																app.setPh(rs20.getFloat("PH"));
																app.setWo(rs20.getFloat("wo"));

															
																
																list1.add(app);
															}
														} catch (SQLException e) {
															// TODO Auto-generated catch block
															e.printStackTrace();
														}
														try {
															rs20.close();
														} catch (SQLException e) {
															// TODO Auto-generated catch block
															e.printStackTrace();
														}
																				
																	request.setAttribute("list1", list1);
					}
					if( help.getSummbrkup().equalsIgnoreCase("Employee Wise") )
						
					{
						
						
						String list="select distinct DEPARTMENT.DPTID,SUBDEPARTMENT.SDPTID,Grp_ID,DPTSTXT,SDPTID_STXT,Grp_STXT,CONTRACTOR_MASTER.Con_ID,Con_Name  from DEPARTMENT,SUBDEPARTMENT,"
								+ "REPORTING_GROUP,emp_official_info,CONTRACTOR_MASTER where LOCID='"+help.getLocationId()+"' and emp_official_info.DPTID=DEPARTMENT.DPTID and emp_official_info.SDPTID=SUBDEPARTMENT.SDPTID "
								+ "and emp_official_info.Reporting_Grp=REPORTING_GROUP.Grp_ID and CONTRACTOR_MASTER.Con_ID=emp_official_info.Con_ID and DEPARTMENT.dptid in ("+ACtualdept+") and SUBDEPARTMENT.SDPTID in ("+ACtualsubdept+") "
										+ "and REPORTING_GROUP.Grp_ID in("+ACtualrepgrp+")   and CONTRACTOR_MASTER.Con_ID in("+help.getCongrp()+") order by DPTID,SDPTID,Grp_ID,Con_ID";
							ResultSet rs1 = ad.selectQuery(list);
						try {
							while(rs1.next())
							{
								HRApprovalForm help1 = new HRApprovalForm();
								help1.setDepartment(rs1.getString("DPTID"));
								help1.setSubdepartment(rs1.getString("SDPTID"));
								help1.setRepgrp(rs1.getString("Grp_ID"));
								help1.setDeptFrom(rs1.getString("DPTSTXT"));
								help1.setDeptTo(rs1.getString("SDPTID_STXT"));
								help1.setDesgTo(rs1.getString("Grp_STXT"));
								help1.setCongrp(rs1.getString("Con_ID"));
								help.setContentDescription(rs1.getString("Con_Name"));
								deptlist.add(help1);
							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						try {
							rs1.close();
						} catch (SQLException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
						request.setAttribute("deptlist", deptlist);
						

						/*String list="select distinct SUBDEPARTMENT.SDPTID,SDPTID_STXT from SUBDEPARTMENT,"
								+ "emp_official_info where LOCID='"+help.getLocationId()+"' and emp_official_info.SDPTID=SUBDEPARTMENT.SDPTID "
								+ "and SUBDEPARTMENT.SDPTID in ("+query2+")  order by SDPTID";
						
						ResultSet rs1 = ad.selectQuery(list);
						try {
							while(rs1.next())
							{
								HRApprovalForm help1 = new HRApprovalForm();
							
								help1.setSubdepartment(rs1.getString("SDPTID"));
							
								help1.setDeptTo(rs1.getString("SDPTID_STXT"));
					
								deptlist.add(help1);
							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						request.setAttribute("deptlist", deptlist);*/
						
					
						
						
						
						float grandsal=0;
						
						String query1="    select * from(select 'd' as prefix,(k.Con_SAL*(SUM(k.od+k.wo+k.ph))) as monsal, k.PERNR as emp,k.EMP_FULLNAME,k.SDPTID,k.SDPTID_STXT,k.Grp_ID,k.Grp_STXT,k.Con_ID,k.Con_Name,SUM(k.od+k.wo+k.ph) as paid,sum(k.od) as od,sum(k.lp) as lp,sum(k.wo) as wo,"
						+ "SUM(k.ph) as ph,sum(k.cl) as cl,sum(k.sl) as sl,sum(k.el) as el,sum(k.co) as co,sum(k.Ml) as ml  from (SELECT emp_official_info.Con_SAL,emp_official_info.LOCID,"
						+ "emp_official_info.EMP_FULLNAME,emp_official_info.Pernr,emp_official_info.SDPTID,sub.SDPTID_STXT,rep.Grp_ID,rep.Grp_STXT,con.Con_ID,con.Con_Name,(LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'PP', '')))*0.25 as od,"
						+ "(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as ab,(LEN(day) - LEN(REPLACE(day, 'WO', '')))*0.25 as wo,(LEN(day) - LEN(REPLACE(day, 'PH', '')))*0.25 as ph, "
						+ "(LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl, (LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl, (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL, "
						+ "(LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as LP, (LEN(day) - LEN(REPLACE(day, 'CO', '')))*0.25 as CO, "
						+ "(LEN(day) - LEN(REPLACE(day, 'ML', '')))*0.25 as ML   from( select 	"+currentmonthdays(help.getYear(), help.getMonth(), 0)+" as day,Pernr  from EMP_IN_OUT_Status where   month ='"+help.getMonth()+"' and year ='"+help.getYear()+"')t,"
						+ "emp_official_info,SUBDEPARTMENT as sub,REPORTING_GROUP as rep,CONTRACTOR_MASTER as con where  con.Con_ID=emp_official_info.Con_ID and  t.Pernr=emp_official_info.PERNR and rep.Grp_ID=emp_official_info.Reporting_Grp and sub.SDPTID=emp_official_info.SDPTID and emp_official_info.LOCID='"+help.getLocationId()+"' and"
						+ " emp_official_info.ACTIVE=1 and emp_official_info.SDPTID in ("+ACtualsubdept+") AND emp_official_info.Reporting_Grp in ("+ACtualrepgrp+")  AND emp_official_info.Con_ID in ("+help.getCongrp()+"))k group by  k.Con_SAL,k.PERNR,k.EMP_FULLNAME,k.SDPTID,k.SDPTID_STXT,k.Grp_ID,k.Grp_STXT,k.Con_ID,k.Con_Name )j "
					+ "left outer join (  select convert(nvarchar(10),floor(sum(datediff(minute, '0:00:00', convert(time,ot) ))/60))+':'+convert(nvarchar(10),"
					+ "sum(datediff(minute, '0:00:00', convert(time,ot) ))%60) as ot,pernr  from Report_Daily_wise where  month(Date)="+help.getMonth()+" and year(date)="+help.getYear()+" group by pernr )"
					+ " as ot on ot.Pernr=j.emp"
					+ " union all"
					+ "  select * from(select 'tot' as prefix,'' as monsal,'' as emp,'' as EMP_FULLNAME ,'' as a,'' as b,'' as c,'' as d,'' as e,'' as f,SUM(k.od+k.wo+k.ph) as paid"
					+ ",sum(k.od) as od,sum(k.lp) as lp,sum(k.wo) as wo,SUM(k.ph) as ph,sum(k.cl) as cl,sum(k.sl) as sl,sum(k.el) as el,sum(k.co)"
					+ " as co,sum(k.Ml) as ml,'' as ot,'' as pernr  from (SELECT emp_official_info.LOCID,emp_official_info.EMP_FULLNAME,"
					+ "emp_official_info.Pernr,emp_official_info.SDPTID,sub.SDPTID_STXT,rep.Grp_ID,rep.Grp_STXT,con.Con_ID,con.Con_Name,(LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'PP', '')))*0.25 as od,"
					+ "(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as ab,(LEN(day) - LEN(REPLACE(day, 'WO', '')))*0.25 as wo,(LEN(day) - LEN(REPLACE(day, 'PH', '')))*0.25 as ph,"
					+ " (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl, (LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl, (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL, "
					+ "(LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as LP, (LEN(day) - LEN(REPLACE(day, 'CO', '')))*0.25 as CO, "
					+ "(LEN(day) - LEN(REPLACE(day, 'ML', '')))*0.25 as ML  "
					+ " from( select 	"+currentmonthdays(help.getYear(), help.getMonth(), 0)+" as day,Pernr"
					+ "  from EMP_IN_OUT_Status where   month ="+help.getMonth()+"and year ="+help.getYear()+")t,emp_official_info,SUBDEPARTMENT as sub,REPORTING_GROUP as rep,CONTRACTOR_MASTER as con where  con.Con_ID=emp_official_info.Con_ID and t.Pernr=emp_official_info.PERNR  "
					+ "and sub.SDPTID=emp_official_info.SDPTID and rep.Grp_ID=emp_official_info.Reporting_Grp and emp_official_info.LOCID='"+help.getLocationId()+"' and emp_official_inf"
					+ "o.ACTIVE=1 and emp_official_info.SDPTID in "
					+ "("+ACtualsubdept+") AND emp_official_info.Reporting_Grp in ("+ACtualrepgrp+")  AND emp_official_info.Con_ID in ("+help.getCongrp()+") )k    )j  ";
					
											
														ResultSet rs20 = ad.selectQuery(query1);
																try {
																	while(rs20.next())
																	{
																		HRApprovalForm app=new HRApprovalForm();
																		app.setRepgrp(rs20.getString("Grp_ID"));
																		app.setStatus(rs20.getString("prefix"));
																		app.setEmployeeno(rs20.getString("emp"));
																		app.setEmployeeName(rs20.getString("EMP_FULLNAME"));
																		app.setSubdepartment(rs20.getString("SDPTID"));
																		app.setPaid_days(rs20.getFloat("paid"));
																		app.setOd(rs20.getFloat("Od"));
																		app.setCl(rs20.getFloat("cl"));
																		app.setSl(rs20.getFloat("sl"));
																		app.setEl(rs20.getFloat("el"));					
																		app.setLp(rs20.getFloat("lp"));						
																		app.setCo(rs20.getFloat("Co"));
																		app.setMl(rs20.getFloat("Ml"));
																		app.setPh(rs20.getFloat("PH"));
																		app.setWo(rs20.getFloat("wo"));
																        app.setOt(rs20.getString("ot"));
																        app.setConsal(rs20.getFloat("monsal"));
																        grandsal=grandsal+rs20.getFloat("monsal");
																		
																		list2.add(app);
																	}
																} catch (SQLException e) {
																	// TODO Auto-generated catch block
																	e.printStackTrace();
																}
																
																try {
																	rs20.close();
																} catch (SQLException e) {
																	// TODO Auto-generated catch block
																	e.printStackTrace();
																}
																finally{
													    			query1="";
													    			query2="";
													    			query3="";
													    			query4="";
													    			query5="";
													    			query6="";
													    		}	
																request.setAttribute("list2", list2);
																help.setConsal(grandsal);
						
					}
					
						
																
																	
																
															
															
																		
															
														
										help.setMonth(monthName[Integer.parseInt(help.getMonth())]);
								
										
										

				
				return mapping.findForward("exportDeptSummaryreport");	
	
	
		
	
		
	
	}
	
	public ActionForward exportLeavebalreport(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
		Date dNow = new Date( );
		SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd");
		String exportdate=ft.format(dNow);
		response.setHeader("Content-Disposition", "inline; filename="+exportdate+"_Leave_Balance_Report.xls");
		
		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
		
		Calendar mycal = Calendar.getInstance();
		help.setFrommonth(Integer.toString(mycal.get(Calendar.MONTH) + 1));
		
	
		help.setYear(request.getParameter("year"));
		help.setLocationId(request.getParameter("loc"));
        help.setSummbrkup(request.getParameter("summbrkup"));
        help.setWorkLocId(request.getParameter("wrk"));
		
    	//dept
		String ACtualdept="";
	    if(help.getDeptArray()!=null)
	    {	
	    String[] dept = help.getDeptArray();
	    
	    StringBuffer reqdept = new StringBuffer();
		for (int i = 0; i < dept.length; i++) {
			reqdept.append("'"+dept[i]+"'" + ",");
		}
		 ACtualdept= reqdept.substring(0, reqdept.length() - 1).toString();
	    }
		
	    //subdept
	    
	    String ACtualsubdept="";
	    if(help.getSubdeptArray()!=null)
	    {	
	    String[] subdept = help.getSubdeptArray();
	    
	    StringBuffer reqsubdept = new StringBuffer();
		for (int i = 0; i < subdept.length; i++) {
			reqsubdept.append("'"+subdept[i]+"'" + ",");
		}
		ACtualsubdept= reqsubdept.substring(0, reqsubdept.length() - 1).toString();
	    }
	    
	    //reporting
	    
	    String ACtualrepgrp="";
	    if(help.getRepgrpArray()!=null)
	    {	
	    String[] repgrp = help.getRepgrpArray();
	    
	    StringBuffer reqrepgrp = new StringBuffer();
		for (int i = 0; i < repgrp.length; i++) {
			reqrepgrp.append("'"+repgrp[i]+"'" + ",");
		}
		ACtualrepgrp= reqrepgrp.substring(0, reqrepgrp.length() - 1).toString();
	    }
    

		ArrayList l1=new ArrayList();
	
		ArrayList addi=new ArrayList();
		ArrayList attri=new ArrayList();
		ArrayList deptlist = new ArrayList();
		
		
		if(help.getSummbrkup().equalsIgnoreCase("Final Settlement"))
		{
			
			
			
			String emp = "Select PERNR,EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT,emp.DOJ from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as desg where PERNR='"
					+ help.getEmployeeno()
					+ "' and dep.DPTID=emp.DPTID and desg.DSGID=emp.DSGID ";

			ResultSet rs1 = ad.selectQuery(emp);

			try {
				ArrayList offlist = new ArrayList();
				while (rs1.next())

				{
					LeaveForm leaveForm = new LeaveForm();
					leaveForm.setDepartment(rs1.getString("DPTSTXT"));
					leaveForm.setDesignation(rs1.getString("DSGSTXT"));
					leaveForm.setDoj(EMicroUtils.display1(rs1.getDate("DOJ")));
					leaveForm.setEmployeeName(rs1.getString("EMP_FULLNAME"));
					leaveForm.setEmployeeNumber(rs1.getString("PERNR"));
					offlist.add(leaveForm);
				}
				
				
				request.setAttribute("offlist", offlist);
			} catch (SQLException e1) {

				e1.printStackTrace();
			}
			try {
				rs1.close();
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			try {
				LeaveForm leaveForm = new LeaveForm();
				
				String getleaveBalence = "select t.lv_calyear,t.lv_opbal,t.lv_awtBal,t.lv_typeid,t.lv_availed,t.lv_clbal,m.lv_type from lv_type_d as t,lv_type_m as m where t.lv_empcode='"
						+ help.getEmployeeno()
						+ "' and t.lv_calyear='"
						+ help.getYear()
						+ "' and t.lv_typeid=m.lv_typeid";
				ResultSet rsBalance = ad.selectQuery(getleaveBalence);
				ArrayList balList = new ArrayList();
				while (rsBalance.next()) {
					leaveForm.setYear(rsBalance.getInt("lv_calyear"));
					LeaveForm form2 = new LeaveForm();
					form2.setLeaveType(rsBalance.getString("lv_type"));
					form2.setOpeningBalence(rsBalance.getFloat("lv_opbal"));
					form2.setAvalableBalence(rsBalance.getFloat("lv_availed"));
					form2.setNoOfDays(rsBalance.getString("lv_availed"));
					form2.setClosingBalence(rsBalance.getFloat("lv_clbal"));
					form2.setAwaitingBalence(rsBalance.getFloat("lv_awtBal"));
					balList.add(form2);
				}
				request.setAttribute("LeaveBalenceList", balList);

				rsBalance.close();

			} catch (Exception e) {
				e.printStackTrace();
			}
			
			String startdate = "" + help.getYear() + "-01-01";
			String enddate = "" + help.getYear() + "-12-31";
			LinkedList report = new LinkedList();
			String data = "select m.lv_type,convert(nvarchar(11),start_date,103) as fromdate,convert(nvarchar(11),end_date,103) as enddate,no_of_days,submit_date,convert(nvarchar(11),approved_date,103) as approveddate,reason from leave_details,lv_type_m as m where user_id='"
					+ help.getEmployeeno()
					+ "' and m.lv_typeid=leave_type and Approvel_Status='Approved'  and start_date between '"
					+ startdate + "' and '" + enddate + "' ";

			ResultSet rs = ad.selectQuery(data);
			try {
				while (rs.next()) {
					LeaveForm leaveForm0 = new LeaveForm();
					leaveForm0.setLeaveType(rs.getString("lv_type"));
					leaveForm0.setSubmitDate(rs.getString("submit_date"));
					leaveForm0.setApprovedDate(rs.getString("approveddate"));
					leaveForm0.setStartDate(rs.getString("fromdate"));
					leaveForm0.setEndDate(rs.getString("enddate"));
					leaveForm0.setNoOfDays(rs.getString("no_of_days"));
					leaveForm0.setReason(rs.getString("reason"));

					report.add(leaveForm0);
					}
				request.setAttribute("list", report);

				if (report.size() == 0) {
					request.setAttribute("norecords", "norecords");
				}
		}
			catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			try {
				rs.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	
	if(help.getSummbrkup().equalsIgnoreCase("Summary"))
	{
		if(!(ACtualsubdept.equalsIgnoreCase("") && ACtualrepgrp.equalsIgnoreCase("")))
    	{
		String list="select distinct DEPARTMENT.DPTID,SUBDEPARTMENT.SDPTID,Grp_ID,DPTSTXT,SDPTID_STXT,Grp_STXT  from DEPARTMENT,SUBDEPARTMENT,"
				+ "REPORTING_GROUP,emp_official_info where LOCID='"+help.getLocationId()+"' and emp_official_info.DPTID=DEPARTMENT.DPTID and emp_official_info.SDPTID=SUBDEPARTMENT.SDPTID "
				+ "and emp_official_info.Reporting_Grp=REPORTING_GROUP.Grp_ID  and DEPARTMENT.dptid in ("+ACtualdept+") and SUBDEPARTMENT.SDPTID in ("+ACtualsubdept+") and REPORTING_GROUP.Grp_ID in("+ACtualrepgrp+") order by DPTID,SDPTID,Grp_ID";
			ResultSet rs1 = ad.selectQuery(list);
		try {
			while(rs1.next())
			{
				HRApprovalForm help1 = new HRApprovalForm();
				help1.setDepartment(rs1.getString("DPTID"));
				help1.setSubdepartment(rs1.getString("SDPTID"));
				help1.setRepgrp(rs1.getString("Grp_ID"));
				help1.setDeptFrom(rs1.getString("DPTSTXT"));
				help1.setDeptTo(rs1.getString("SDPTID_STXT"));
				help1.setDesgTo(rs1.getString("Grp_STXT"));
				deptlist.add(help1);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs1.close();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		request.setAttribute("deptlist", deptlist);
		String rec="select sum(l.cl_open) as cl_open,sum(l.cl_avail) as cl_avail,sum(l.cl_close) as cl_close,sum(l.sl_open) as sl_open,sum(l.sl_avail) as sl_avail,"
				+ "sum(l.sl_close) as sl_close,sum(l.el_open) as el_open,sum(l.el_avail) as el_avail,sum(l.el_close) as el_close,l.DPTID,l.DPTSTXT,l.SDPTID,l.SDPTID_STXT,"
				+ "l.Grp_ID,l.Grp_STXT from(select sum(cl_open) as cl_open,sum(cl_avail) as cl_avail,sum(cl_close) as cl_close,sum(sl_open) as sl_open,sum(sl_avail) "
				+ "as sl_avail,sum(sl_close) as sl_close,sum(el_open) as el_open,sum(el_avail) as el_avail,sum(el_close) as el_close,t.PERNR,t.DPTID,t.EMP_FULLNAME,"
				+ "t.DPTSTXT,t.DSGSTXT,t.SDPTID_STXT,t.Grp_STXT,t.Grp_ID,t.SDPTID from(select case when lv_typeid=1 then lv_opbal else 0 end as cl_open,case when "
				+ "lv_typeid=1 then lv_availed else 0 end as cl_avail,case when lv_typeid=1 then lv_clbal else 0 end as cl_close,case when lv_typeid=2 then lv_opbal "
				+ "else 0 end as sl_open,case when lv_typeid=2 then lv_availed else 0 end as sl_avail,case when lv_typeid=2 then lv_clbal else 0 end as sl_close,case"
				+ " when lv_typeid=3 then lv_opbal else 0 end as el_open,case when lv_typeid=3 then lv_availed else 0 end as el_avail,case when lv_typeid=3 then "
				+ "lv_clbal else 0 end as el_close,pernr,emp_official_info.EMP_FULLNAME,emp_official_info.DPTID,DEPARTMENT.DPTSTXT,DESIGNATION.DSGSTXT,"
				+ "SUBDEPARTMENT.SDPTID,SUBDEPARTMENT.SDPTID_STXT,REPORTING_GROUP.Grp_ID,REPORTING_GROUP.Grp_STXT from lv_type_d,emp_official_info,DEPARTMENT,DESIGNATION,"
				+ "SUBDEPARTMENT,REPORTING_GROUP  where lv_calyear='"+help.getYear()+"' and emp_official_info.PERNR=lv_type_d.lv_empcode and emp_official_info.LOCID='"+help.getLocationId()+"'  "
				+ " and emp_official_info.DPTID=DEPARTMENT.DPTID and DESIGNATION.DSGID=emp_official_info.DSGID and emp_official_info.ACTIVE=1  and "
				+ " emp_official_info.SDPTID=SUBDEPARTMENT.SDPTID and emp_official_info.Reporting_Grp=REPORTING_GROUP.Grp_ID)t,emp_official_info where"
				+ " emp_official_info.PERNR=t.PERNR and emp_official_info.ACTIVE=1  group by t.PERNR,t.DPTID,t.EMP_FULLNAME,t.DPTSTXT,t.DSGSTXT,t.SDPTID_STXT,t.Grp_STXT,"
				+ "t.Grp_ID,t.SDPTID )l,emp_official_info  where emp_official_info.PERNR=l.PERNR  and emp_official_info.DPTID in ("+ACtualdept+") and emp_official_info.SDPTID in ("+ACtualsubdept+")"
				+ " and emp_official_info.Reporting_Grp in ("+ACtualrepgrp+")   and emp_official_info.ACTIVE=1 ";
		
		
		if(!help.getWorkLocId().equalsIgnoreCase(""))
		{
			rec=rec+" and emp_official_info.Work_ID in ("+help.getWorkLocId()+")  ";
		
		}
		rec=rec+"group by l.DPTID,l.DPTSTXT,l.SDPTID_STXT,l.Grp_STXT,l.Grp_ID,l.SDPTID order by l.DPTID";
		ResultSet a=ad.selectQuery(rec);
		try {
			while(a.next())
			{
				HRApprovalForm hr=new HRApprovalForm();
				hr.setDepartment(a.getString("DPTID"));
				hr.setSubdepartment(a.getString("SDPTID"));
				hr.setRepgrp(a.getString("Grp_ID"));
			    hr.setCl_openingBalence(a.getFloat("cl_open"));
			    hr.setCl_avalableBalence(a.getFloat("cl_avail"));
			    hr.setCl_closingBalence(a.getFloat("cl_close"));
			    hr.setSl_openingBalence(a.getFloat("sl_open"));
			    hr.setSl_avalableBalence(a.getFloat("sl_avail"));
			    hr.setSl_closingBalence(a.getFloat("sl_close"));
			    hr.setEl_openingBalence(a.getFloat("el_open"));
			    hr.setEl_avalableBalence(a.getFloat("el_avail"));
			    hr.setEl_closingBalence(a.getFloat("el_close"));		    
				l1.add(hr);
				
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		try {
			a.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		request.setAttribute("list1", l1);
    	}
		else
		{

			String rec="select sum(l.cl_open) as cl_open,sum(l.cl_avail) as cl_avail,sum(l.cl_close) as cl_close,sum(l.sl_open) as sl_open,"
					+ "sum(l.sl_avail) as sl_avail,sum(l.sl_close) as sl_close,sum(l.el_open) as el_open,sum(l.el_avail) as el_avail,sum(l.el_close) as el_close,l.DPTID,l.DPTSTXT "
					+ "from(select sum(cl_open) as cl_open,sum(cl_avail) as cl_avail,sum(cl_close) as cl_close,sum(sl_open) as sl_open,sum(sl_avail) as sl_avail,sum(sl_close) as sl_close,"
					+ "sum(el_open) as el_open,sum(el_avail) as el_avail,sum(el_close) as el_close,t.PERNR,t.DPTID,t.EMP_FULLNAME,t.DPTSTXT,t.DSGSTXT  from(select case when lv_typeid=1 then"
					+ " lv_opbal else 0 end as cl_open,case when lv_typeid=1 then lv_availed else 0 end as cl_avail,case when lv_typeid=1 then lv_clbal else 0 end as cl_close,case when"
					+ " lv_typeid=2 then lv_opbal else 0 end as sl_open,case when lv_typeid=2 then lv_availed else 0 end as sl_avail,case when lv_typeid=2 then lv_clbal else 0 end "
					+ "as sl_close,case when lv_typeid=3 then lv_opbal else 0 end as el_open,case when lv_typeid=3 then lv_availed else 0 end as el_avail,case when lv_typeid=3 then lv_clbal"
					+ " else 0 end as el_close,pernr,emp_official_info.EMP_FULLNAME,emp_official_info.DPTID,DEPARTMENT.DPTSTXT,DESIGNATION.DSGSTXT from lv_type_d,emp_official_info,"
					+ "DEPARTMENT,DESIGNATION  where lv_calyear='"+help.getYear()+"' and emp_official_info.PERNR=lv_type_d.lv_empcode and emp_official_info.LOCID='"+help.getLocationId()+"'  "
					+ " and emp_official_info.DPTID=DEPARTMENT.DPTID and DESIGNATION.DSGID=emp_official_info.DSGID and emp_official_info.ACTIVE=1)t,emp_official_info"
					+ " where emp_official_info.PERNR=t.PERNR and emp_official_info.ACTIVE=1  group by t.PERNR,t.DPTID,t.EMP_FULLNAME,t.DPTSTXT,t.DSGSTXT )l,emp_official_info  "
					+ "where emp_official_info.PERNR=l.PERNR  and emp_official_info.DPTID in ("+ACtualdept+")   and emp_official_info.ACTIVE=1  ";
			if(!help.getWorkLocId().equalsIgnoreCase(""))
			{
				rec=rec+" and emp_official_info.Work_ID in ("+help.getWorkLocId()+")  ";
			
			}
			
			rec=rec+"group by l.DPTID,l.DPTSTXT order by l.DPTID";
			
			
			ResultSet a=ad.selectQuery(rec);
			try {
				while(a.next())
				{
					HRApprovalForm hr=new HRApprovalForm();
					hr.setDepartment(a.getString("DPTSTXT"));
				    hr.setCl_openingBalence(a.getFloat("cl_open"));
				    hr.setCl_avalableBalence(a.getFloat("cl_avail"));
				    hr.setCl_closingBalence(a.getFloat("cl_close"));
				    hr.setSl_openingBalence(a.getFloat("sl_open"));
				    hr.setSl_avalableBalence(a.getFloat("sl_avail"));
				    hr.setSl_closingBalence(a.getFloat("sl_close"));
				    hr.setEl_openingBalence(a.getFloat("el_open"));
				    hr.setEl_avalableBalence(a.getFloat("el_avail"));
				    hr.setEl_closingBalence(a.getFloat("el_close"));		    
					l1.add(hr);
					
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			try {
				a.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			request.setAttribute("onlydept", l1);
			
		
		}
		
	}
	
	if(help.getSummbrkup().equalsIgnoreCase("Detailed"))
	{
		
		
		
		String add="select sum(cl_open) as cl_open,sum(cl_avail) as cl_avail,sum(cl_close) as cl_close,sum(sl_open) as sl_open,sum(sl_avail) as sl_avail,"
+ "sum(sl_close) as sl_close,sum(el_open) as el_open,sum(el_avail) as el_avail,sum(el_close) as el_close,t.PERNR,t.DPTID,t.EMP_FULLNAME,t.DPTSTXT,t.DSGSTXT "
+ " from(select case when lv_typeid=1 then lv_opbal else 0 end as cl_open,case when lv_typeid=1 then lv_availed else 0 end as cl_avail,case when lv_typeid=1 then"
+ " lv_clbal else 0 end as cl_close,case when lv_typeid=2 then lv_opbal else 0 end as sl_open,case when lv_typeid=2 then lv_availed else 0 end as sl_avail,case "
+ "when lv_typeid=2 then lv_clbal else 0 end as sl_close,case when lv_typeid=3 then lv_opbal else 0 end as el_open,case when lv_typeid=3 then lv_availed else 0 "
+ "end as el_avail,case when lv_typeid=3 then lv_clbal else 0 end as el_close,pernr,emp_official_info.EMP_FULLNAME,emp_official_info.DPTID,DEPARTMENT.DPTSTXT,"
+ "DESIGNATION.DSGSTXT from lv_type_d,emp_official_info,DEPARTMENT,DESIGNATION  where lv_calyear='"+help.getYear()+"' and emp_official_info.PERNR=lv_type_d.lv_empcode and"
+ " emp_official_info.LOCID='"+help.getLocationId()+"'   and emp_official_info.DPTID=DEPARTMENT.DPTID and DESIGNATION.DSGID=emp_official_info.DSGID and emp_official_info.ACTIVE=1)t,"
+ "emp_official_info where emp_official_info.PERNR=t.PERNR and emp_official_info.DPTID in ("+ACtualdept+")  and emp_official_info.ACTIVE=1  ";
		
		if(!help.getWorkLocId().equalsIgnoreCase(""))
		{
			add=add+" and emp_official_info.Work_ID in ("+help.getWorkLocId()+")  ";
		
		}
		if(!ACtualrepgrp.equalsIgnoreCase(""))
		{
			add=add+" and emp_official_info.Reporting_Grp in ("+ACtualrepgrp+")  ";
		
		}
		
		add=add+"group by t.PERNR,t.DPTID,t.EMP_FULLNAME,t.DPTSTXT,t.DSGSTXT";
		
		
		ResultSet a=ad.selectQuery(add);
		try {
			while(a.next())
			{
				HRApprovalForm hr=new HRApprovalForm();
				hr.setDepartment(a.getString("DPTSTXT"));
				hr.setEmployeeno(a.getString("PERNR"));
				hr.setEmployeeName(a.getString("EMP_FULLNAME"));
				hr.setDesignation(a.getString("DSGSTXT"));
				hr.setCl_openingBalence(a.getFloat("cl_open"));
			    hr.setCl_avalableBalence(a.getFloat("cl_avail"));
			    hr.setCl_closingBalence(a.getFloat("cl_close"));
			    hr.setSl_openingBalence(a.getFloat("sl_open"));
			    hr.setSl_avalableBalence(a.getFloat("sl_avail"));
			    hr.setSl_closingBalence(a.getFloat("sl_close"));
			    hr.setEl_openingBalence(a.getFloat("el_open"));
			    hr.setEl_avalableBalence(a.getFloat("el_avail"));
			    hr.setEl_closingBalence(a.getFloat("el_close"));		    
			    addi.add(hr);
				
			}
			
			
			request.setAttribute("addi", addi);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			a.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		
		
	}
		
		
		return mapping.findForward("exportLeavebalreport");
	}
	
	public ActionForward exportAttritionreport(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
		
		Calendar mycal = Calendar.getInstance();
		help.setFrommonth(Integer.toString(mycal.get(Calendar.MONTH) + 1));
		
		help.setMonth(request.getParameter("month"));
		help.setYear(request.getParameter("year"));
		help.setLocationId(request.getParameter("loc"));
		
		Date dNow = new Date( );
		SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd");
		String exportdate=ft.format(dNow);
		response.setHeader("Content-Disposition", "inline; filename="+exportdate+"_Attrition_Report.xls");
		
		
		String[] monthName = {"","JAN", "FEB",
						  "MAR", "APR", "MAY", "JUN", "JUL",
						  "AUG", "SEP", "OCT", "NOV",
						  "DEC"
						  };
		
		//dept
		String ACtualdept="";
	    if(help.getDeptArray()!=null)
	    {	
	    String[] dept = help.getDeptArray();
	    
	    StringBuffer reqdept = new StringBuffer();
		for (int i = 0; i < dept.length; i++) {
			reqdept.append("'"+dept[i]+"'" + ",");
		}
		 ACtualdept= reqdept.substring(0, reqdept.length() - 1).toString();
	    }

	ArrayList l1=new ArrayList();
		
	ArrayList addi=new ArrayList();
	ArrayList attri=new ArrayList();

if(help.getSummbrkup().equalsIgnoreCase("Summary"))
{
	String attr=" select * from DEPARTMENT where DPTID in ("+query1+")";
	ResultSet a=ad.selectQuery(attr);
	try {
		while(a.next())
		{
			HRApprovalForm hr=new HRApprovalForm();
			hr.setDepartment(a.getString("DPTSTXT"));
			
			String rec="select * from (select count(pernr) as available from  emp_official_info where LOCID='"+help.getLocationId()+"' and month(DOJ)<"+help.getMonth()+"  and YEAR(doj)='"+help.getYear()+"' and "
					+ "emp_official_info.DPTID="+a.getString("DPTID")+" and Active=1)k,(select count(pernr) as addition from  emp_official_info where LOCID='"+help.getLocationId()+"'  and month(DOJ)="+help.getMonth()+" "
					+ " and YEAR(doj)='"+help.getYear()+"' and emp_official_info.DPTID="+a.getString("DPTID")+")l,(select count(pernr) as attrition from  emp_official_info where LOCID='"+help.getLocationId()+"'"
					+ " and month(DOL)="+help.getMonth()+"  and YEAR(DOL)='"+help.getYear()+"' and emp_official_info.DPTID="+a.getString("DPTID")+")m";
			ResultSet aq=ad.selectQuery(rec);
			if(aq.next())
			{
				hr.setAvailablecount(aq.getInt("available"));
				hr.setAdditioncount(aq.getInt("addition"));
				hr.setAttritioncount(aq.getInt("attrition"));
				l1.add(hr);
			}
			aq.close();
		}
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	try {
		a.close();
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	request.setAttribute("list1", l1);
	
}

if(help.getSummbrkup().equalsIgnoreCase("Detailed"))
{
	//addtion
	
	
	String add="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,convert(nvarchar(10),DOJ,104) as doj from emp_official_info,DEPARTMENT,DESIGNATION where "
			+ " month(doj)='"+help.getMonth()+"' and year(doj)='"+help.getYear()+"' and LOCID='"+help.getLocationId()+"' and "
					+ "DEPARTMENT.DPTID=emp_official_info.DPTID and DESIGNATION.DSGID=emp_official_info.DSGID";
	ResultSet aq=ad.selectQuery(add);
	try {
		while(aq.next())
		{
			HRApprovalForm hr=new HRApprovalForm();
			hr.setEmployeeno(aq.getString("pernr"));
			hr.setEmployeeName(aq.getString("EMP_FULLNAME"));
			hr.setDepartment(aq.getString("DPTSTXT"));
			hr.setDesignation(aq.getString("DSGSTXT"));
			hr.setDoj(aq.getString("doj"));
			addi.add(hr);
			
		}
		
		
		request.setAttribute("addi", addi);
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	
	try {
		aq.close();
	} catch (SQLException e1) {
		// TODO Auto-generated catch block
		e1.printStackTrace();
	}
	//attritioin

	
	String attr="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,convert(nvarchar(10),DOL,104) as doL from emp_official_info,DEPARTMENT,DESIGNATION where "
			+ " month(DOL)='"+help.getMonth()+"' and year(DOL)='"+help.getYear()+"' and LOCID='"+help.getLocationId()+"' and "
					+ "DEPARTMENT.DPTID=emp_official_info.DPTID and DESIGNATION.DSGID=emp_official_info.DSGID";
	ResultSet aqattr=ad.selectQuery(attr);
	try {
		while(aqattr.next())
		{
			HRApprovalForm hratt=new HRApprovalForm();
			hratt.setEmployeeno(aqattr.getString("pernr"));
			hratt.setEmployeeName(aqattr.getString("EMP_FULLNAME"));
			hratt.setDepartment(aqattr.getString("DPTSTXT"));
			hratt.setDesignation(aqattr.getString("DSGSTXT"));
			hratt.setDoj(aqattr.getString("DOL"));
			attri.add(hratt);
			
		}
		
		
		request.setAttribute("attri", attri);
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	try {
		aqattr.close();
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
}
		help.setMonth(monthName[Integer.parseInt(help.getMonth())]);
		return mapping.findForward("exportAttritionreport");	
	}
	public ActionForward exportcontractreport(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		



		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
		
		Calendar mycal = Calendar.getInstance();
		help.setFrommonth(Integer.toString(mycal.get(Calendar.MONTH) + 1));
		
	
		Date dNow = new Date( );
		SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd");
		String exportdate=ft.format(dNow);

		response.setHeader("Content-Disposition", "inline; filename="+exportdate+"_Contractual_Report.xls");
	
		  
									
										
								
												
										   //catArray
									    String ACtualcat="";
									    if(help.getCatArray()!=null)
									    {

										String[] cat = help.getCatArray();
									    StringBuffer reqcat = new StringBuffer();
										for (int i = 0; i < cat.length; i++) {
											reqcat.append("'"+cat[i]+"'" + ",");
										}
										ACtualcat = reqcat.substring(0, reqcat.length() - 1).toString();

									    }
									    
                                        //reporting
									    
									    String ACtualrepgrp="";
									    if(help.getRepgrpArray()!=null)
									    {	
									    String[] repgrp = help.getRepgrpArray();
									    
									    StringBuffer reqrepgrp = new StringBuffer();
										for (int i = 0; i < repgrp.length; i++) {
											reqrepgrp.append("'"+repgrp[i]+"'" + ",");
										}
										ACtualrepgrp= reqrepgrp.substring(0, reqrepgrp.length() - 1).toString();
									    }
									    
										   
									
										
										
									
										
										
										float working=0;
										float wo=0;
										 float od=0;							
										 float cl=0;
										 float sl=0;
										 float el=0;
										 float lp=0;
										 float co=0;
										 float ml=0;
										 float ph=0;
										
										
										 float leave_Availed=0;
										 float total_worked=0;
										 float week_off_earned=0;
										 float paid_days=0;
										 float worK_hrs=0;
									
											
													
											
											
													String[] monthName = {"","JAN", "FEB",
																	  "MAR", "APR", "MAY", "JUN", "JUL",
																	  "AUG", "SEP", "OCT", "NOV",
																	  "DEC"
																	  };
												    
													ArrayList list1=new ArrayList();
													ArrayList list2=new ArrayList();
													
												
													
													String query1="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master where Location.LOCATION_CODE=emp_official_info.LOCID and "
															+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP ";

																
													if(!help.getLocationId().equalsIgnoreCase(""))
													{
														query1=query1+" and emp_official_info.LOCID = '"+help.getLocationId()+"' ";
													
													}
														
													

													if(!ACtualcat.equalsIgnoreCase(""))
													{
														query1=query1+" and emp_official_info.STAFFCAT in ("+ACtualcat+")  ";
													
													}

													if(!ACtualrepgrp.equalsIgnoreCase(""))
													{
														query1=query1+" and emp_official_info.Reporting_Grp in ("+ACtualrepgrp+")  ";
													
													}
													
													
															query1=query1+" and ACTIVE = 1 order by pernr";
															
														////  procedure to find weekoff	earned
															
															ResultSet rsproc = ad.selectQuery(query1);
															try {
																while(rsproc.next())
																{
																	System.out
																			.println(rsproc.getString("pernr"));
																	int cou=0;
																	String c="select count(*)  from EMP_CAL where pernr='"+rsproc.getString("pernr")+"'";
																	ResultSet rsc = ad.selectQuery(c);
																	if(rsc.next())
																	{
			                                                        cou=rsc.getInt(1);
																	}
																	rsc.close();
																	if(cou==0)
																	{
																	
																	
																String q2="EXEC weekly_off '"+help.getMonth()+"','"+help.getYear()+"','"+rsproc.getString("pernr")+"','Sunday'";
																int k1=ad.SqlExecuteUpdate(q2);
																	}
																	else
																	{
																		String q="";
																		String week="select top 1 datename(dw,'"+help.getYear()+"'+'-'+'"+help.getMonth()+"'+'-'+convert(nvarchar(10),day)) as weekday from EMP_CAL where Pernr='"+rsproc.getString("pernr")+"' and "+monthName[Integer.parseInt(help.getMonth())]+"='WO' order by day";
																		ResultSet rsweek = ad.selectQuery(week);
																		if(rsweek.next())
																		{
				                                                        q=rsweek.getString("weekday");
																		}
																		rsweek.close();
																		String q2="EXEC weekly_off '"+help.getMonth()+"','"+help.getYear()+"','"+rsproc.getString("pernr")+"','"+q+"'";
																		int k1=ad.SqlExecuteUpdate(q2);	
																	}
																	
																	
																	
																}
															} catch (SQLException e1) {
																// TODO Auto-generated catch block
																e1.printStackTrace();
															}
															
													///working days		
															
												String	ws= " select sum(case when "+monthName[Integer.parseInt(help.getMonth())]+" ='w' then 1 else 0 end  )as working"
														+ " from "+getTableName(help.getLocationId())+" where cyear = '"+help.getYear()+"'  ";
												
												ResultSet rs18 = ad.selectQuery(ws); 	
												
												try {
													if(rs18.next())
													{
													
														help.setWorking(rs18.getFloat("working"));
													
													}
												} catch (SQLException e1) {
													// TODO Auto-generated catch block
													e1.printStackTrace();
												}
													
												int j=0;
												ResultSet rs19 = ad.selectQuery(query1);
												try {
													while(rs19.next())
													{
														 conn=AttConnectionFactory.getConnection();
														HRApprovalForm app =new HRApprovalForm();
														j++;
														
														
														app.setEmployeeno(rs19.getString("pernr"));
														app.setEmployeeName(rs19.getString("EMP_FULLNAME"));
														app.setDepartment(rs19.getString("DPTSTXT"));
														app.setDesignation(rs19.getString("DSGSTXT"));
														app.setPaygrp(rs19.getString("Paygroup"));
														app.setPayGrpTo(rs19.getString("Short_desc"));
														app.setWorking(help.getWorking());
														working=working+help.getWorking();
														String a="";
														
												
															
														
														a="  SELECT l.totwrkhrs,k.sum,	"
														+ "(LEN(day) - LEN(REPLACE(day, 'WO', '')))*0.25 as WO,"
														+ "(LEN(day) - LEN(REPLACE(day, 'PH', '')))*0.25 as PH,"
														+ " (LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25 as od,"
														+ " (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl,"
														+ " (LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl,"
														+ " (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL,"
														+ " (LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as LP,"
														+ " (LEN(day) - LEN(REPLACE(day, 'CO', '')))*0.25 as CO,"
														+ " (LEN(day) - LEN(REPLACE(day, 'ML', '')))*0.25 as ML"
														+ " from( "
														+ "select "+currentmonthdays(help.getYear(), help.getMonth(), 0)+" as day "
													    + " from EMP_IN_OUT_Status where pernr='"+rs19.getString("pernr")+"' and month ='"+help.getMonth()+"' and year ='"+help.getYear()+"')t  "
														+ " , (select Weekly_oFF as sum from EMP_IN_OUT_Status where pernr='"+rs19.getString("pernr")+"' and month ='"+help.getMonth()+"' and year ='"+help.getYear()+"')k , "
														+ "(select floor(sum((convert(int, left(total,CHARINDEX(':',total)-1))*60  + convert(int,SUBSTRING(total,CHARINDEX(':',total)+1,LEN(total)))))/60) as totwrkhrs "
														+ "from Report_Daily_wise where pernr ='"+rs19.getString("pernr")+"' and month(date)='"+help.getMonth()+"' and year(date)='"+help.getYear()+"'and total not like '%-%' )l";									
																
													
												ResultSet rs20 = ad.selectQuery(a);
														if(rs20.next())
														{
															
															System.out.println(rs19.getString("pernr"));
															app.setOd(rs20.getFloat("Od"));
															app.setCl(rs20.getFloat("cl"));
															app.setSl(rs20.getFloat("sl"));
															app.setEl(rs20.getFloat("el"));					
															app.setLp(rs20.getFloat("lp"));						
															app.setCo(rs20.getFloat("Co"));
															app.setMl(rs20.getFloat("Ml"));
															app.setPh(rs20.getFloat("PH"));
															app.setWo(rs20.getFloat("wo"));
															app.setLeave_Availed(rs20.getFloat("cl")+rs20.getFloat("sl")+rs20.getFloat("el")+app.getLp()+rs20.getFloat("co")+rs20.getFloat("Ml"));
															app.setTotal_worked(help.getWorking()-(rs20.getFloat("cl")+rs20.getFloat("sl")+rs20.getFloat("el")+app.getLp()+rs20.getFloat("co")+rs20.getFloat("Ml")));
															app.setWeek_off_earned(rs20.getFloat("sum"));	
															app.setPaid_days(rs20.getFloat("CO")+rs20.getFloat("PH")+rs20.getFloat("OD")+app.getTotal_worked()+app.getWeek_off_earned());
															app.setWorK_hrs(rs20.getFloat("totwrkhrs"));
															
															 wo=wo+app.getWo();
															 od=od+app.getOd();							
															  cl=cl+app.getCl();
															  sl=sl+app.getSl();
															  el=el+app.getEl();
															  lp=lp+app.getLp();
															  co=co+app.getCo();
															  ml=ml+app.getMl();
															  ph=ph+app.getPh();
															
															
															  leave_Availed=leave_Availed+app.getLeave_Availed();
															  total_worked=total_worked+app.getTotal_worked();														  ;
															  week_off_earned=week_off_earned+app.getWeek_off_earned();
															  paid_days=paid_days+app.getPaid_days();
															  worK_hrs=worK_hrs+app.getWorK_hrs();
															
														
														}
																	
														rs20.close();
														list1.add(app);
														
													}
												} catch (SQLException e) {
													// TODO Auto-generated catch block
													e.printStackTrace();
												}
												
															
												
												HRApprovalForm he=new HRApprovalForm();
												he.setEmployeeno("TOTAL");
												he.setWorking(working);
												he.setOd(od);
												he.setCl(cl);
												he.setSl(sl);
												he.setEl(el);					
												he.setLp(lp);						
												he.setCo(co);
												he.setMl(ml);
												he.setPh(ph);
												he.setWo(wo);
												he.setLeave_Availed(leave_Availed);
												he.setTotal_worked(total_worked);
												he.setWeek_off_earned(week_off_earned);	
												he.setPaid_days(paid_days);
												he.setWorK_hrs(worK_hrs);
												list1.add(he);

							help.setMonth(monthName[Integer.parseInt(help.getMonth())]);
								request.setAttribute("list1", list1);
										
										

				
				request.setAttribute("result", "result");
				try {
					rs18.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rsproc.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs19.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return mapping.findForward("exportcontractreport");	
	
	
		
	
		
	}
	
	public ActionForward exportmonthlyreportsearch(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
		

		ArrayList list1=new ArrayList();
		ArrayList list2=new ArrayList();

		HRApprovalForm help = (HRApprovalForm) form;
		String sqlfromdate="";
		String sqltodate="";
		
		
		Date dNow = new Date( );
		SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd");
		String exportdate=ft.format(dNow);

		response.setHeader("Content-Disposition", "inline; filename="+exportdate+"_monthly_Report.xls");

		
		String ACtualpay="";
	    if(help.getPayArray()!=null)
	    {

		String[] pay = help.getPayArray();
	    StringBuffer reqpay = new StringBuffer();
		for (int i = 0; i < pay.length; i++) {
			reqpay.append("'"+pay[i]+"'" + ",");
		}
		ACtualpay = reqpay.substring(0, reqpay.length() - 1).toString();

	    }

	    //catArray
	    String ACtualcat="";
	    if(help.getCatArray()!=null)
	    {

		String[] cat = help.getCatArray();
	    StringBuffer reqcat = new StringBuffer();
		for (int i = 0; i < cat.length; i++) {
			reqcat.append("'"+cat[i]+"'" + ",");
		}
		ACtualcat = reqcat.substring(0, reqcat.length() - 1).toString();

	    }
		 String ACtualdept="";
		    if(help.getDeptArray()!=null)
		    {	
		    String[] dept = help.getDeptArray();
		    
		    StringBuffer reqdept = new StringBuffer();
			for (int i = 0; i < dept.length; i++) {
				reqdept.append("'"+dept[i]+"'" + ",");
			}
			 ACtualdept= reqdept.substring(0, reqdept.length() - 1).toString();
		    }
			
			
		    String ACtualdesg="";
		    if(help.getDesgArray()!=null)
		    {
		    
			String[] desg = help.getDesgArray();
		    StringBuffer reqdesg = new StringBuffer();
			for (int i = 0; i < desg.length; i++) {
				reqdesg.append("'"+desg[i]+"'" + ",");
			}
			ACtualdesg = reqdesg.substring(0, reqdesg.length() - 1).toString();
		    
		    }
		    
		    String ACtualloc="";
		    if(help.getLocArray()!=null)
		    {
		    
			String[] loc = help.getLocArray();
		    StringBuffer reqloc = new StringBuffer();
			for (int i = 0; i < loc.length; i++) {
				reqloc.append("'"+loc[i]+"'" + ",");
			}
			ACtualloc = reqloc.substring(0, reqloc.length() - 1).toString();
		    
		    }

		    
		  //reporting
		    
		    String ACtualrepgrp="";
		    if(help.getRepgrpArray()!=null)
		    {	
		    String[] repgrp = help.getRepgrpArray();
		    
		    StringBuffer reqrepgrp = new StringBuffer();
			for (int i = 0; i < repgrp.length; i++) {
				reqrepgrp.append("'"+repgrp[i]+"'" + ",");
			}
			ACtualrepgrp= reqrepgrp.substring(0, reqrepgrp.length() - 1).toString();
		    }
			
		    
		  /*  if(help.getLocationId().equalsIgnoreCase("ML00"))
		    {
		    	ACtualrepgrp="12";	
		    	
		    }*/
		    	
		    	
			String query1="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master where Location.LOCATION_CODE=emp_official_info.LOCID and "
					+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP ";

						
			if(!help.getLocationId().equalsIgnoreCase(""))
			{
				query1=query1+" and emp_official_info.LOCID = '"+help.getLocationId()+"' ";
			
			}
				
			if(!ACtualpay.equalsIgnoreCase(""))
			{
				query1=query1+" and emp_official_info.PAY_GROUP in  ("+ACtualpay+") ";
			
			}

			if(!ACtualcat.equalsIgnoreCase(""))
			{
				query1=query1+" and emp_official_info.STAFFCAT in ("+ACtualcat+")  ";
			
			}

			if(!ACtualdept.equalsIgnoreCase(""))
			{
				query1=query1+" and emp_official_info.DPTID in ( "+ACtualdept+" )";
			}
			
			if(!ACtualdesg.equalsIgnoreCase(""))
			{
				query1=query1+" and emp_official_info.DSGID in ( "+ACtualdesg+" ) ";
			}
			
			
			if(!ACtualloc.equalsIgnoreCase(""))
			{
				query1=query1+" and emp_official_info.Work_ID in("+ACtualloc+") ";
			
			}
			
			if(help.getLocationId().equalsIgnoreCase("ML00"))
			{
				if(!ACtualrepgrp.equalsIgnoreCase(""))
				{
					query1=query1+" and emp_official_info.Reporting_Grp='10'";
				
				}
			}
			else
			{
			if(!ACtualrepgrp.equalsIgnoreCase(""))
			{
				query1=query1+" and emp_official_info.Reporting_Grp in("+ACtualrepgrp+") ";
			
			}
			}
					query1=query1+" and ACTIVE = 1";	
			
			
			
			String[] monthName = {"","JAN", "FEB",
					  "MAR", "APR", "MAY", "JUN", "JUL",
					  "AUG", "SEP", "OCT", "NOV",
					  "DEC"
					  };
			
	
		if(help.getLeavetype()==null)
		{
			help.setLeaveType("");
		}
		
		if(help.getSummbrkup()==null)
		{
			help.setSummbrkup("");
		}
		
		if(help.getAttntype()==null)
		{
			help.setAttntype("");
		}
		
		
		
		

    
		
		if( help.getSummbrkup().equalsIgnoreCase("Attendance Summary") )
		{if(help.getAttntype().equalsIgnoreCase("Calendar Month")  )
		{
		query1 =query1+" order by pernr";

	String	ws= " select sum(case when "+monthName[Integer.parseInt(help.getMonth())]+" ='w' then 1 else 0 end  )as working"
			+ " from "+getTableName(help.getLocationId())+" where cyear = '"+help.getYear()+"'  ";
	
	ResultSet rs18 = ad.selectQuery(ws); 	
	
	try {
		if(rs18.next())
		{
		
			
			help.setWorking(rs18.getFloat("working"));
		
		}
	} catch (SQLException e1) {
		// TODO Auto-generated catch block
		e1.printStackTrace();
	}
	
	try {
		rs18.close();
	} catch (SQLException e1) {
		// TODO Auto-generated catch block
		e1.printStackTrace();
	}
		
		ResultSet rs19 = ad.selectQuery(query1);
		try {
			while(rs19.next())
			{
				HRApprovalForm app =new HRApprovalForm();
				
				app.setEmployeeno(rs19.getString("pernr"));
				app.setEmployeeName(rs19.getString("EMP_FULLNAME"));
				app.setDepartment(rs19.getString("DPTSTXT"));
				app.setDesignation(rs19.getString("DSGSTXT"));
				app.setPaygrp(rs19.getString("Paygroup"));
				app.setPayGrpTo(rs19.getString("Short_desc"));
				app.setWorking(help.getWorking());
				String a="";
				if(!rs19.getString("Swipe_count").equalsIgnoreCase("0"))
				{
		a="  SELECT 	"					
		+ " (LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25 as od,"
		+ " (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl,"
		+ " (LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl,"
		+ " (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL,"
		+ " (LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25 as LP,"
		+ " (LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as AA,"
		+ " (LEN(day) - LEN(REPLACE(day, 'CO', '')))*0.25 as CO,"
		+ " (LEN(day) - LEN(REPLACE(day, 'ML', '')))*0.25 as ML"
		+ " from("
		+ " select "+currentmonthdays(help.getYear(), help.getMonth(), 0)+" as day "
		+ " from EMP_IN_OUT_Status where pernr='"+rs19.getString("pernr")+"' and month ='"+help.getMonth()+"' and year ='"+help.getYear()+"')t";
				}
				if(rs19.getString("Swipe_count").equalsIgnoreCase("0"))
				{
					a="  SELECT 	"					
							+ " (LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25 as od,"
							+ " (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl,"
							+ " (LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl,"
							+ " (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL,"
							+ " (LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25 as LP,"
							+ " (LEN(day) - LEN(REPLACE(day, 'CO', '')))*0.25 as CO,"
							+ " (LEN(day) - LEN(REPLACE(day, 'ML', '')))*0.25 as ML"
							+ " from("
							+ " select "+currentmonthdays(help.getYear(), help.getMonth(), 0)+" as day "
							+ " from EMP_IN_OUT_Status where pernr='"+rs19.getString("pernr")+"' and month ='"+help.getMonth()+"' and year ='"+help.getYear()+"')t";
								
				}
					
				ResultSet rs20 = ad.selectQuery(a);
				if(rs20.next())
				{
					app.setOd(rs20.getFloat("Od"));
					app.setCl(rs20.getFloat("cl"));
					app.setSl(rs20.getFloat("sl"));
					app.setEl(rs20.getFloat("el"));		
					if(!rs19.getString("Swipe_count").equalsIgnoreCase("0"))
					{
					app.setAa(rs20.getFloat("AA"));	
					}
					app.setLp(rs20.getFloat("lp"));						
					app.setCo(rs20.getFloat("Co"));
					app.setMl(rs20.getFloat("Ml"));
					app.setLeave_Availed(rs20.getFloat("cl")+rs20.getFloat("sl")+rs20.getFloat("el")+app.getLp()+rs20.getFloat("co")+rs20.getFloat("Ml"));
					app.setTotal_worked(help.getWorking()-(rs20.getFloat("cl")+rs20.getFloat("sl")+rs20.getFloat("el")+app.getLp()+app.getAa()+rs20.getFloat("co")+rs20.getFloat("Ml")));
							}
				rs20.close();
				
				list1.add(app);
				
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs19.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

		if(help.getAttntype().equalsIgnoreCase("Payable Month")  )
		{
			
			query1 =query1+" order by pernr";
			
			String selectedmon=help.getMonth();
			String selectedyear=help.getYear();
			String prevmont=Integer.toString((Integer.parseInt(selectedmon)-1));
			String prevyear="";
			if(prevmont.equalsIgnoreCase("0"))
			{
			 prevmont="12";
			 prevyear=Integer.toString((Integer.parseInt(selectedyear)-1));	
			}
			else
				prevyear=selectedyear;

			
			///working days
			String	ws= " select sum(working) as working from ("
					 +" select sum(case when "+monthName[Integer.parseInt(prevmont)]+" ='w' then 1 else 0 end  )as  working "
					 + " from "+getTableName(help.getLocationId())+" where day >= 21 and cyear ='"+prevyear+"'  "
					 +" union all "		
					 +" select sum(case when "+monthName[Integer.parseInt(help.getMonth())]+" ='w' then 1 else 0 end  )as working"
					 + " from "+getTableName(help.getLocationId())+" where day<=20  and Cyear = '"+help.getYear()+"')k";
					
					
			
			ResultSet rs18 = ad.selectQuery(ws); 	
			try {
				if(rs18.next())
				{
				
					help.setWorking(rs18.getInt("working"));
					
				}
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
			try {
				rs18.close();
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
			 
			

			ResultSet rs19 = ad.selectQuery(query1);
			try {
				while(rs19.next())
				{
					HRApprovalForm app =new HRApprovalForm();
					
					app.setEmployeeno(rs19.getString("pernr"));
					app.setEmployeeName(rs19.getString("EMP_FULLNAME"));
					app.setDepartment(rs19.getString("DPTSTXT"));
					app.setDesignation(rs19.getString("DSGSTXT"));
					app.setPaygrp(rs19.getString("Paygroup"));
					app.setPayGrpTo(rs19.getString("Short_desc"));
					app.setWorking(help.getWorking());
					
					System.out.println(rs19.getString("pernr"));
					
					
					String a="";
					if(!rs19.getString("Swipe_count").equalsIgnoreCase("0"))
					{
					  a= " select  sum(od) as od ,  sum(cl) as cl , sum(sl) as sl, sum(el) as el , sum(lp) as lp , sum(aa) as aa,sum(co) as co , sum(ml) as ml from( "
							+ " SELECT "
							+ " (LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25 as od,"
							+ " (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl,"
							+ " (LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl,"
							+ " (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL,"
							+ " (LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25 as LP,"
							+ " (LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as AA,"
							+ " (LEN(day) - LEN(REPLACE(day, 'CO', '')))*0.25 as CO,"
							+ " (LEN(day) - LEN(REPLACE(day, 'ML', '')))*0.25 as ML"
							+ " from("
							+ " select "+prevmonthdays(prevyear, prevmont)+" as day "
							+ " from EMP_IN_OUT_Status where pernr='"+rs19.getString("pernr")+"' and month ='"+prevmont+"' and year ='"+prevyear+"')t"
							+ " union all "
							+ " SELECT  "
							+ " (LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25 as od,"
							+ " (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl,"
							+ " (LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl,"
							+ " (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL,"
							+ " (LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25 as LP,"
							+ " (LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as AA,"
							+ " (LEN(day) - LEN(REPLACE(day, 'CO', '')))*0.25 as CO,"
							+ " (LEN(day) - LEN(REPLACE(day, 'ML', '')))*0.25 as ML"
							+ " from("
							+ " select "+currentmonthdays(selectedyear, selectedmon, 20)+" as day "
							+ " from EMP_IN_OUT_Status where pernr='"+rs19.getString("pernr")+"' and month ='"+help.getMonth()+"' and year ='"+help.getYear()+"')t)k";
					}
					
					if(rs19.getString("Swipe_count").equalsIgnoreCase("0"))
					{
					  a= " select  sum(od) as od ,  sum(cl) as cl , sum(sl) as sl, sum(el) as el , sum(lp) as lp , sum(co) as co , sum(ml) as ml from( "
							+ " SELECT "
							+ " (LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25 as od,"
							+ " (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl,"
							+ " (LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl,"
							+ " (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL,"
							+ " (LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25 as LP,"
							+ " (LEN(day) - LEN(REPLACE(day, 'CO', '')))*0.25 as CO,"
							+ " (LEN(day) - LEN(REPLACE(day, 'ML', '')))*0.25 as ML"
							+ " from("
							+ " select "+prevmonthdays(prevyear, prevmont)+" as day "
							+ " from EMP_IN_OUT_Status where pernr='"+rs19.getString("pernr")+"' and month ='"+prevmont+"' and year ='"+prevyear+"')t"
							+ " union all "
							+ " SELECT  "
							+ " (LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25 as od,"
							+ " (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl,"
							+ " (LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl,"
							+ " (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL,"
							+ " (LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25 as LP,"
							+ " (LEN(day) - LEN(REPLACE(day, 'CO', '')))*0.25 as CO,"
							+ " (LEN(day) - LEN(REPLACE(day, 'ML', '')))*0.25 as ML"
							+ " from("
							+ " select "+currentmonthdays(selectedyear, selectedmon, 20)+" as day "
							+ " from EMP_IN_OUT_Status where pernr='"+rs19.getString("pernr")+"' and month ='"+help.getMonth()+"' and year ='"+help.getYear()+"')t)k";
					}
					
					
					ResultSet rs20 = ad.selectQuery(a);
					if(rs20.next())
					{
						app.setOd(rs20.getFloat("Od"));
						app.setCl(rs20.getFloat("cl"));
						app.setSl(rs20.getFloat("sl"));
						app.setEl(rs20.getFloat("el"));				
						app.setLp(rs20.getFloat("lp"));
						if(!rs19.getString("Swipe_count").equalsIgnoreCase("0"))
						{
						app.setAa(rs20.getFloat("AA"));	
						}
						app.setCo(rs20.getFloat("Co"));
						app.setMl(rs20.getFloat("Ml"));
						app.setLeave_Availed(rs20.getFloat("cl")+rs20.getFloat("sl")+rs20.getFloat("el")+app.getLp()+rs20.getFloat("co")+rs20.getFloat("Ml"));
						app.setTotal_worked(help.getWorking()-(rs20.getFloat("cl")+rs20.getFloat("sl")+rs20.getFloat("el")+app.getLp()+app.getAa()+rs20.getFloat("co")+rs20.getFloat("Ml")));
						
							
					}
					rs20.close();
					list1.add(app);
					
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			try {
				rs19.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		}
		
		
		request.setAttribute("list1", list1);
		}
		
		
		/////daily
		if( help.getSummbrkup().equalsIgnoreCase("Day Wise Breakup"))
		{
			
			
				
				
			String selectedmon=help.getMonth();
			String selectedyear=help.getYear();
			String prevmont=Integer.toString((Integer.parseInt(selectedmon)-1));
			String prevyear="";
			if(prevmont.equalsIgnoreCase("0"))
			{
			 prevmont="12";
			 prevyear=Integer.toString((Integer.parseInt(selectedyear)-1));	
			}
			else
				prevyear=selectedyear;
			
	

			// Create a calendar object and set year and month
			Calendar mycal = Calendar.getInstance();

			mycal.set(Integer.parseInt(selectedyear), Integer.parseInt(selectedmon)-1, 1);
			
			// Get the number of days in that month
			int daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
			
			
			mycal.set(Integer.parseInt(prevyear), Integer.parseInt(prevmont)-1, 1);
			
			int prevdaysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
				
			
		
		
			
			
			if(help.getAttntype().equalsIgnoreCase("Calendar Month"))
			{
				if(help.getLeavetype().equalsIgnoreCase("Present"))
				{
					query1="select case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end st,* from report_daily_wise,("+query1+")t where t.PERNR= report_daily_wise.pernr  and MONTH(date)="+selectedmon+" and  case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end   like '%PP%' ";
				}
				
				if(help.getLeavetype().equalsIgnoreCase("Absent"))
				{
					query1="select case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end st,* from report_daily_wise,("+query1+")t where t.PERNR= report_daily_wise.pernr  and MONTH(date)="+selectedmon+" and (case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end like '%AA%' or case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end like '%NL%')  ";
				}
				
				if(help.getLeavetype().equalsIgnoreCase("On Duty"))
				{
					query1="select case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end st,* from report_daily_wise,("+query1+")t where t.PERNR= report_daily_wise.pernr  and MONTH(date)="+selectedmon+" and case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end like '%OD%' ";
				}
				
				if(help.getLeavetype().equalsIgnoreCase("Leave"))
				{
					query1="select case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end st,* from report_daily_wise,("+query1+")t where t.PERNR= report_daily_wise.pernr  and MONTH(date)="+selectedmon+" and (case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end like '%CL%' or case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end like '%EL%' or case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end like '%SL%') ";
				}
				
				if(help.getLeavetype().equalsIgnoreCase("Permission"))
				{
					query1="select case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end st,* from report_daily_wise,("+query1+")t where t.PERNR= report_daily_wise.pernr  and MONTH(date)="+selectedmon+" and case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end like '%PM%' ";
				}
				
				if(help.getLeavetype().equalsIgnoreCase("all"))
				{
				 query1="select case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end st,* from report_daily_wise,("+query1+")t where t.PERNR= report_daily_wise.pernr  and MONTH(date)="+selectedmon+" ";
				}
			
			}
			
			if(help.getAttntype().equalsIgnoreCase("Payable Month"))
			{
				if(help.getLeavetype().equalsIgnoreCase("Present"))
				{
				 query1="select case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end st,* from report_daily_wise,("+query1+")t where t.PERNR= report_daily_wise.pernr  and date>='"+prevyear+"-"+prevmont+"-21'  and date<='"+selectedyear+"-"+selectedmon+"-20'  and case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end like '%PP%'";
				
				}
				
				if(help.getLeavetype().equalsIgnoreCase("Absent"))
				{
					 query1="select case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end st,* from report_daily_wise,("+query1+")t where t.PERNR= report_daily_wise.pernr  and date>='"+prevyear+"-"+prevmont+"-21'  and date<='"+selectedyear+"-"+selectedmon+"-20' and (case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end like '%AA%' or case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end like '%NL%')";
				}
				
				if(help.getLeavetype().equalsIgnoreCase("On Duty"))
				{
					 query1="select case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end st,* from report_daily_wise,("+query1+")t where t.PERNR= report_daily_wise.pernr  and date>='"+prevyear+"-"+prevmont+"-21'  and date<='"+selectedyear+"-"+selectedmon+"-20'  and case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end like '%OD%'";
				}
				
				if(help.getLeavetype().equalsIgnoreCase("Leave"))
				{
					 query1="select case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end st,* from report_daily_wise,("+query1+")t where t.PERNR= report_daily_wise.pernr  and date>='"+prevyear+"-"+prevmont+"-21'  and date<='"+selectedyear+"-"+selectedmon+"-20' and (case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end like '%CL%' or case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end like '%EL%' or case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end like '%SL%')  ";
				}
				
				if(help.getLeavetype().equalsIgnoreCase("Permission"))
				{
					 query1="select case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end st,* from report_daily_wise,("+query1+")t where t.PERNR= report_daily_wise.pernr  and date>='"+prevyear+"-"+prevmont+"-21'  and date<='"+selectedyear+"-"+selectedmon+"-20'  and case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end like '%PM%'";
				}
				
				if(help.getLeavetype().equalsIgnoreCase("all"))
				{
				
					 query1="select case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end st,* from report_daily_wise,("+query1+")t where t.PERNR= report_daily_wise.pernr  and date>='"+prevyear+"-"+prevmont+"-21'  and date<='"+selectedyear+"-"+selectedmon+"-20' ";
				}
			}
			query1=query1+" order by date";
			
			ResultSet rscal = ad.selectQuery(query1);
			try {
				while(rscal.next())
				{	
                    HRApprovalForm app =new HRApprovalForm();
					
					app.setEmployeeno(rscal.getString("pernr"));
					app.setEmployeeName(rscal.getString("EMP_FULLNAME"));
					app.setDepartment(rscal.getString("DPTSTXT"));
					app.setDesignation(rscal.getString("DSGSTXT"));
					app.setStartTime(rscal.getString("in_time").substring(0, 5));
					app.setEndTime(rscal.getString("Out_time").substring(0, 5));
					app.setStatus(rscal.getString("St").replace("NL", "LP"));
					app.setDate(rscal.getString("Date"));
					app.setPaygrp(rscal.getString("Short_desc"));
					app.setPayGrpFrom(rscal.getString("Paygroup"));
					
					if(rscal.getString("St").contains("CL")||rscal.getString("St").contains("SL")||rscal.getString("St").contains("EL")||rscal.getString("St").contains("NL")||rscal.getString("St").contains("CO")||rscal.getString("St").contains("ML"))
					{
					String data = "select convert(date,start_date) as start_date1,convert(date,end_date) as end_date1,reason from leave_details where  user_id='"
							+ rscal.getString("pernr")
							+ "' and Approvel_Status in('Approved') and record_status!='Draft'  and '"
							+  rscal.getString("Date") 
							+ "' between start_date and  end_date and YEAR(start_date)=year('"+ rscal.getString("Date")  + "')";
					
					ResultSet rs10 = ad.selectQuery(data);
					while (rs10.next()) {
					        app.setStartDate(rs10.getString("start_date1"));
					        app.setEndDate(rs10.getString("end_date1"));
							app.setRemarks(rs10.getString("reason"));
		
					}rs10.close();
					}
					if(rscal.getString("St").contains("OD"))
					{
					String data1 = "select convert(date,start_date) as start_date1,convert(date,end_date) as end_date1,reason from OnDuty_details where  user_id='"
							+ rscal.getString("pernr")
							+ "' and Approver_Status in('Approved') and '"
							+  rscal.getString("Date") 
							+ "' between start_date and  end_date  and YEAR(start_date)=year('"+ rscal.getString("Date")  + "')";
					ResultSet rs101 = ad.selectQuery(data1);
					while (rs101.next()) {
					     app.setStartDate(rs101.getString("start_date1"));
					        app.setEndDate(rs101.getString("end_date1"));
							app.setRemarks(rs101.getString("reason"));
				
					} 
					rs101.close();
					}

					list2.add(app);
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			try {
				rscal.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			
			
			
			
			
			request.setAttribute("list2", list2);
			}
			
			
			
			
		help.setMonth(monthName[Integer.parseInt(help.getMonth())]);
			   
				return mapping.findForward("exportdisplaymonthlyreport");

	 }
	public ActionForward exportmusterReportSearch(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
				HttpServletResponse response) {
		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");

		HRApprovalForm help = (HRApprovalForm) form;
		ArrayList locationList=new ArrayList();
		ArrayList locationLabelList=new ArrayList();
		
		ArrayList list1=new ArrayList();
		ArrayList list2=new ArrayList();
		ArrayList list3=new ArrayList();
		ArrayList list4=new ArrayList();
		ArrayList datelist = new ArrayList();
		
		String[] monthName = {"","JAN", "FEB",
				  "MAR", "APR", "MAY", "JUN", "JUL",
				  "AUG", "SEP", "OCT", "NOV",
				  "DEC"
				  };
		String key="";

		Date dNow = new Date( );
		SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd");
		String exportdate=ft.format(dNow);
		
		HashMap ab=shiftmap();
		
		
		response.setHeader("Content-Disposition", "inline; filename="+exportdate+"_muster_Report.xls");
		
						
		String ACtualdept="";
	    if(help.getDeptArray()!=null)
	    {	
	    String[] dept = help.getDeptArray();
	    
	    StringBuffer reqdept = new StringBuffer();
		for (int i = 0; i < dept.length; i++) {
			reqdept.append("'"+dept[i]+"'" + ",");
		}
		 ACtualdept= reqdept.substring(0, reqdept.length() - 1).toString();
	    }
		
		
	    String ACtualdesg="";
	    if(help.getDesgArray()!=null)
	    {
	    
		String[] desg = help.getDesgArray();
	    StringBuffer reqdesg = new StringBuffer();
		for (int i = 0; i < desg.length; i++) {
			reqdesg.append("'"+desg[i]+"'" + ",");
		}
		ACtualdesg = reqdesg.substring(0, reqdesg.length() - 1).toString();
	    
	    }
	    
	 
	    
	    String ACtualpay="";
	    if(help.getPayArray()!=null)
	    {
	    
		String[] pay = help.getPayArray();
	    StringBuffer reqpay = new StringBuffer();
		for (int i = 0; i < pay.length; i++) {
			reqpay.append("'"+pay[i]+"'" + ",");
		}
		ACtualpay = reqpay.substring(0, reqpay.length() - 1).toString();
	    
	    }
	    
	    //catArray
	    String ACtualcat="";
	    if(help.getCatArray()!=null)
	    {
	    
		String[] cat = help.getCatArray();
	    StringBuffer reqcat = new StringBuffer();
		for (int i = 0; i < cat.length; i++) {
			reqcat.append("'"+cat[i]+"'" + ",");
		}
		ACtualcat = reqcat.substring(0, reqcat.length() - 1).toString();
	    
	    }
	    
		
	    String ACtualloc="";
	    if(help.getLocArray()!=null)
	    {
	    
		String[] loc = help.getLocArray();
	    StringBuffer reqloc = new StringBuffer();
		for (int i = 0; i < loc.length; i++) {
			reqloc.append("'"+loc[i]+"'" + ",");
		}
		ACtualloc = reqloc.substring(0, reqloc.length() - 1).toString();
	    
	    }
	    
	    //reporting
	    
	    String ACtualrepgrp="";
	    if(help.getRepgrpArray()!=null)
	    {	
	    String[] repgrp = help.getRepgrpArray();
	    
	    StringBuffer reqrepgrp = new StringBuffer();
		for (int i = 0; i < repgrp.length; i++) {
			reqrepgrp.append("'"+repgrp[i]+"'" + ",");
		}
		ACtualrepgrp= reqrepgrp.substring(0, reqrepgrp.length() - 1).toString();
	    }
	    
	    
		String query1="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master where Location.LOCATION_CODE=emp_official_info.LOCID and "
				+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP  ";
		String sqlfromdate="";
		String sqltodate="";
					
		
	
		
		if(!help.getLocationId().equalsIgnoreCase(""))
		{
			query1=query1+" and emp_official_info.LOCID ='"+help.getLocationId()+"' ";
		
		}
			
		if(!ACtualpay.equalsIgnoreCase(""))
		{
			query1=query1+" and emp_official_info.PAY_GROUP in("+ACtualpay+")  ";
		
		}

		if(!ACtualcat.equalsIgnoreCase(""))
		{
			query1=query1+" and emp_official_info.STAFFCAT in ("+ACtualcat+") ";
		
		}

		if(!ACtualdept.equalsIgnoreCase(""))
		{
			query1=query1+" and emp_official_info.DPTID in ("+ACtualdept+") ";
		}
		
		if(!ACtualdesg.equalsIgnoreCase(""))
		{
			query1=query1+" and emp_official_info.DSGID in ("+ACtualdesg+") ";
		}
		
		
		if(!help.getFrompernr().equalsIgnoreCase(""))
		{
			query1=query1+" and emp_official_info.pernr in ("+help.getFrompernr()+")  ";
		}
		
		if(!ACtualloc.equalsIgnoreCase(""))
		{
			query1=query1+" and emp_official_info.Work_ID in("+ACtualloc+") ";
		
		}
		
		if(!ACtualrepgrp.equalsIgnoreCase(""))
		{
			query1=query1+" and emp_official_info.Reporting_Grp in("+ACtualrepgrp+") ";
		
		}
		if(help.getEmptype().equalsIgnoreCase("Active"))
			query1 =query1+" and active=1 ";
		else
			query1 =query1+" and active=0 ";
			
			
			
			if(help.getSummbrkup().equalsIgnoreCase("Detailed"))
			{
				
				try {
					
					String selectedmon=help.getFrommonth();
					String selectedyear=help.getYear();
					String prevmont=Integer.toString((Integer.parseInt(selectedmon)-1));
					String prevyear="";
					if(prevmont.equalsIgnoreCase("0"))
					{
					 prevmont="12";
					 prevyear=Integer.toString((Integer.parseInt(selectedyear)-1));	
					}
					else
						prevyear=selectedyear;
					
					
			
					try {
						key = insertTEMPEMP(query1);
					} catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
				
						
					HRApprovalForm app1 =new HRApprovalForm();
					
						
					
						
						String b = "";		
						if(help.getAttntype().equalsIgnoreCase("Calendar Month")  )
						{
							
						
							
					    b = " select  ord,pernr,month,day1,	day2,	day3,	day4,	day5,	day6,	day7,	day8,	day9,	day10,	day11,	day12,	day13,	day14,	day15,	day16,	day17,	day18,	day19,	day20 ,  day21,	day22,	day23,	day24,	day25,	day26,	day27,	day28,	day29,	day30,	day31  "
					    		+ "from (select 1 as ord ,Temp_emp.pernr,convert(nvarchar(10),month) as month ,day1,	day2,	day3,	day4,	day5,	day6,	day7,	day8,	day9,	day10,	day11,	day12,	day13,	day14,	day15,	day16,	day17,	day18,	day19,	day20,	day21,	day22,	day23,	day24,	day25,	day26,	day27,	day28,	day29,	day30,	day31 "
							+ " from EMP_IN_OUT_Status,Temp_emp where EMP_IN_OUT_Status.pernr =Temp_emp.pernr and  month = '"+help.getFrommonth()+"' and Temp_emp.Date_Time='"+key+"' and year ='"+help.getYear()+"'  and Temp_emp.Swipe_count!=0 "
							+ " union"
							+ " select 1 as ord ,Temp_emp.pernr,convert(nvarchar(10),month) as month ,replace(day1,'AA','PP'),	replace(day2,'AA','PP'),	replace(day3,'AA','PP'),	replace(day4,'AA','PP'),	replace(day5,'AA','PP'),	replace(day6,'AA','PP'),	replace(day7,'AA','PP'),	replace(day8,'AA','PP'),	replace(day9,'AA','PP'),	replace(day10,'AA','PP'),	replace(day11,'AA','PP'),	replace(day12,'AA','PP'),	replace(day13,'AA','PP'),	replace(day14,'AA','PP'),	replace(day15,'AA','PP'),	replace(day16,'AA','PP'),	replace(day17,'AA','PP'),	replace(day18,'AA','PP'),	replace(day19,'AA','PP'),	replace(day20,'AA','PP'),	replace(day21,'AA','PP'),	replace(day22,'AA','PP'),	replace(day23,'AA','PP'),	replace(day24,'AA','PP'),	replace(day25,'AA','PP'),	replace(day26,'AA','PP'),	replace(day27,'AA','PP'),	replace(day28,'AA','PP'),	replace(day29,'AA','PP'),	replace(day30,'AA','PP'),	replace(day31,'AA','PP') "
							+ " from EMP_IN_OUT_Status,Temp_emp where EMP_IN_OUT_Status.pernr =Temp_emp.pernr and  month = '"+help.getFrommonth()+"' and Temp_emp.Date_Time='"+key+"' and year ='"+help.getYear()+"'  and Temp_emp.Swipe_count=0 "
							+ " union"
							+ " select 2,Temp_emp.pernr,convert(nvarchar(10),month) as month, convert(nvarchar(5),day1),	convert(nvarchar(5),day2),	convert(nvarchar(5),day3),	convert(nvarchar(5),day4),	convert(nvarchar(5),day5),	convert(nvarchar(5),day6),	convert(nvarchar(5),day7),	convert(nvarchar(5),day8),	convert(nvarchar(5),day9),	convert(nvarchar(5),day10),	convert(nvarchar(5),day11),	convert(nvarchar(5),day12),	convert(nvarchar(5),day13),	convert(nvarchar(5),day14),	convert(nvarchar(5),day15),	convert(nvarchar(5),day16),	convert(nvarchar(5),day17),	convert(nvarchar(5),day18),	convert(nvarchar(5),day19),	convert(nvarchar(5),day20),	convert(nvarchar(5),day21),	convert(nvarchar(5),day22),	convert(nvarchar(5),day23),	convert(nvarchar(5),day24),	convert(nvarchar(5),day25),	convert(nvarchar(5),day26),	convert(nvarchar(5),day27),	convert(nvarchar(5),day28),	convert(nvarchar(5),day29),	convert(nvarchar(5),day30),	convert(nvarchar(5),day31)"
							+ " from EMP_IN_OUT,Temp_emp where In_Out='I' and  EMP_IN_OUT.pernr =Temp_emp.pernr and  month = '"+help.getFrommonth()+"' and Temp_emp.Date_Time='"+key+"' and year ='"+help.getYear()+"' "
							+ " union"
							+ " select 3,Temp_emp.pernr, convert(nvarchar(10),month) as month,convert(nvarchar(5),day1),	convert(nvarchar(5),day2),	convert(nvarchar(5),day3),	convert(nvarchar(5),day4),	convert(nvarchar(5),day5),	convert(nvarchar(5),day6),	convert(nvarchar(5),day7),	convert(nvarchar(5),day8),	convert(nvarchar(5),day9),	convert(nvarchar(5),day10),	convert(nvarchar(5),day11),	convert(nvarchar(5),day12),	convert(nvarchar(5),day13),	convert(nvarchar(5),day14),	convert(nvarchar(5),day15),	convert(nvarchar(5),day16),	convert(nvarchar(5),day17),	convert(nvarchar(5),day18),	convert(nvarchar(5),day19),	convert(nvarchar(5),day20),	convert(nvarchar(5),day21),	convert(nvarchar(5),day22),	convert(nvarchar(5),day23),	convert(nvarchar(5),day24),	convert(nvarchar(5),day25),	convert(nvarchar(5),day26),	convert(nvarchar(5),day27),	convert(nvarchar(5),day28),	convert(nvarchar(5),day29),	convert(nvarchar(5),day30),	convert(nvarchar(5),day31)"
							+ " from EMP_IN_OUT,Temp_emp where In_Out='O' and EMP_IN_OUT.pernr =Temp_emp.pernr and  month = '"+help.getFrommonth()+"'  and Temp_emp.Date_Time='"+key+"' and year ='"+help.getYear()+"' "
							+ " union "
							+ " select 8 ,Temp_emp.pernr,convert(nvarchar(10),month) as month,day1,	day2,	day3,	day4,	day5,	day6,	day7,	day8,	day9,	day10,	day11,	day12,	day13,	day14,	day15,	day16,	day17,	day18,	day19,	day20,	day21,	day22,	day23,	day24,	day25,	day26,	day27,	day28,	day29,	day30,	day31"
							+ " from EMP_Shift_Register,Temp_emp where EMP_Shift_Register.pernr =Temp_emp.pernr and  month = '"+help.getFrommonth()+"' and Temp_emp.Date_Time='"+key+"' and  year ='"+help.getYear()+"' "
							+ " union "
							+ " SELECT *FROM ( SELECT '6' as ord,Temp_emp.pernr,convert(nvarchar(10),month(date)) as month ,'day'+convert(nvarchar(10),day(Date)) as d,Total  FROM Report_Daily_wise,Temp_emp where Report_Daily_wise.pernr =Temp_emp.pernr and month(date)='"+help.getFrommonth()+"' and Temp_emp.Date_Time='"+key+"' and year(date)='"+help.getYear()+"'   ) as SourceTable PIVOT(  max(Total)    FOR d in([day1],	[day2],	[day3],	[day4],	[day5],	[day6],	[day7],	[day8],	[day9],	[day10],	[day11],	[day12],	[day13],	[day14],	[day15],	[day16],	[day17],	[day18],	[day19],	[day20],	[day21],	[day22],	[day23],	[day24],	[day25],	[day26],	[day27],	[day28],	[day29],	[day30],	[day31]) )AS PivotTable"
							+ "	union  "
						   + "  SELECT *FROM ( SELECT '7' as ord,Temp_emp.pernr,convert(nvarchar(10),month(date)) as month ,'day'+convert(nvarchar(10),day(Date)) as d,ot  FROM Report_Daily_wise,Temp_emp where Report_Daily_wise.pernr =Temp_emp.pernr and month(date)='"+help.getFrommonth()+"' and Temp_emp.Date_Time='"+key+"' and year(date)='"+help.getYear()+"'   ) as SourceTable PIVOT(  max(ot)    FOR d in([day1],	[day2],	[day3],	[day4],	[day5],	[day6],	[day7],	[day8],	[day9],	[day10],	[day11],	[day12],	[day13],	[day14],	[day15],	[day16],	[day17],	[day18],	[day19],	[day20],	[day21],	[day22],	[day23],	[day24],	[day25],	[day26],	[day27],	[day28],	[day29],	[day30],	[day31]) )AS PivotTable" 
							+ " union "
							+ " SELECT *FROM ( SELECT '4' as ord,Temp_emp.pernr,convert(nvarchar(10),month(date)) as month ,'day'+convert(nvarchar(10),day(Date)) as d,Late  FROM Report_Daily_wise,Temp_emp where Report_Daily_wise.pernr =Temp_emp.pernr and month(date)='"+help.getFrommonth()+"' and Temp_emp.Date_Time='"+key+"' and year(date)='"+help.getYear()+"'   ) as SourceTable PIVOT(  max(Late)    FOR d in([day1],	[day2],	[day3],	[day4],	[day5],	[day6],	[day7],	[day8],	[day9],	[day10],	[day11],	[day12],	[day13],	[day14],	[day15],	[day16],	[day17],	[day18],	[day19],	[day20],	[day21],	[day22],	[day23],	[day24],	[day25],	[day26],	[day27],	[day28],	[day29],	[day30],	[day31]) )AS PivotTable"
						    + " union "
							+ " SELECT *FROM ( SELECT '5' as ord,Temp_emp.pernr,convert(nvarchar(10),month(date)) as month ,'day'+convert(nvarchar(10),day(Date)) as d,early  FROM Report_Daily_wise,Temp_emp where Report_Daily_wise.pernr =Temp_emp.pernr and month(date)='"+help.getFrommonth()+"' and Temp_emp.Date_Time='"+key+"' and year(date)='"+help.getYear()+"'   ) as SourceTable PIVOT(  max(early)    FOR d in([day1],	[day2],	[day3],	[day4],	[day5],	[day6],	[day7],	[day8],	[day9],	[day10],	[day11],	[day12],	[day13],	[day14],	[day15],	[day16],	[day17],	[day18],	[day19],	[day20],	[day21],	[day22],	[day23],	[day24],	[day25],	[day26],	[day27],	[day28],	[day29],	[day30],	[day31]) )AS PivotTable"
						
							+ "   union select 0 as ord ,Temp_emp.pernr,convert(nvarchar(10),Temp_emp.Pernr)+': '+EMP_FULLNAME+': '+DPTSTXT+': '+DSGSTXT,'','',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	''  from emp_official_info,DEPARTMENT,DESIGNATION,Temp_emp where emp_official_info.pernr =Temp_emp.pernr and Temp_emp.Date_Time='"+key+"'  and emp_official_info.DPTID=DEPARTMENT.DPTID and emp_official_info.DSGID=DESIGNATION.DSGID"
							+ ")t order by pernr,1";
						}
						
						if(help.getAttntype().equalsIgnoreCase("Payable Month")  )
						{
								
							b = " select t.ord ,t.pernr, t.month, day1,	day2,	day3,	day4,	day5,	day6,	day7,	day8,	day9,	day10,	day11,	day12,	day13,	day14,	day15,	day16,	day17,	day18,	day19,	day20 ,  day21,	day22,	day23,	day24,	day25,	day26,	day27,	day28,	day29,	day30,	day31  from ("
									+ " select 8 as ord,Temp_emp.pernr,convert(nvarchar(10),month) as month,	day21,	day22,	day23,	day24,	day25,	day26,	day27,	day28,	day29,	day30,	day31"
									+ " from EMP_Shift_Register,Temp_emp where EMP_Shift_Register.pernr =Temp_emp.pernr and Temp_emp.Date_Time='"+key+"' and  month = '"+prevmont+"' and  year ='"+prevyear+"' " 
									+ " union"
									+ " select 2,Temp_emp.pernr,convert(nvarchar(10),month) as month,	convert(nvarchar(5),day21),	convert(nvarchar(5),day22),	convert(nvarchar(5),day23),	convert(nvarchar(5),day24),	convert(nvarchar(5),day25),	convert(nvarchar(5),day26),	convert(nvarchar(5),day27),	convert(nvarchar(5),day28),	convert(nvarchar(5),day29),	convert(nvarchar(5),day30),	convert(nvarchar(5),day31)"
									+ " from EMP_IN_OUT,Temp_emp where In_Out='I' and  EMP_IN_OUT.pernr =Temp_emp.pernr and Temp_emp.Date_Time='"+key+"' and  month = '"+prevmont+"' and  year ='"+prevyear+"' "
									+ " union"
									+ " select 3,Temp_emp.pernr, convert(nvarchar(10),month) as month, convert(nvarchar(5),day21),	convert(nvarchar(5),day22),	convert(nvarchar(5),day23),	convert(nvarchar(5),day24),	convert(nvarchar(5),day25),	convert(nvarchar(5),day26),	convert(nvarchar(5),day27),	convert(nvarchar(5),day28),	convert(nvarchar(5),day29),	convert(nvarchar(5),day30),	convert(nvarchar(5),day31)"
									+ " from EMP_IN_OUT,Temp_emp where In_Out='O' and EMP_IN_OUT.pernr =Temp_emp.pernr and Temp_emp.Date_Time='"+key+"' and  month = '"+prevmont+"' and  year ='"+prevyear+"' "
									+ " union "
									+ " select 1 as ord ,Temp_emp.pernr,convert(nvarchar(10),month) as month ,	day21,	day22,	day23,	day24,	day25,	day26,	day27,	day28,	day29,	day30,	day31"
									+ " from EMP_IN_OUT_Status,Temp_emp where EMP_IN_OUT_Status.pernr =Temp_emp.pernr  and Temp_emp.Date_Time='"+key+"' and  month = '"+prevmont+"' and  year ='"+prevyear+"'  and Temp_emp.Swipe_count!=0 " 
								    + " union "
									+ "select 1 as ord ,Temp_emp.pernr,convert(nvarchar(10),month) as month ,	replace(day21,'AA','PP'),	replace(day22,'AA','PP'),	replace(day23,'AA','PP'),	replace(day24,'AA','PP'),	replace(day25,'AA','PP'),	replace(day26,'AA','PP'),	replace(day27,'AA','PP'),	replace(day28,'AA','PP'),	replace(day29,'AA','PP'),	replace(day30,'AA','PP'),	replace(day31,'AA','PP') "
									+ " from EMP_IN_OUT_Status,Temp_emp where EMP_IN_OUT_Status.pernr =Temp_emp.pernr  and Temp_emp.Date_Time='"+key+"' and  month = '"+prevmont+"' and  year ='"+prevyear+"'  and Temp_emp.Swipe_count=0 " 
									+ " union "
									+ " SELECT *FROM ( SELECT '6' as ord,Temp_emp.pernr,convert(nvarchar(10),month(date)) as month ,'day'+convert(nvarchar(10),day(Date)) as d,Total  FROM Report_Daily_wise,Temp_emp where Report_Daily_wise.pernr =Temp_emp.pernr and Temp_emp.Date_Time='"+key+"' and month(date)='"+prevmont+"' and year(date)='"+prevyear+"'   ) as SourceTable PIVOT(  max(Total)    FOR d in(	[day21],	[day22],	[day23],	[day24],	[day25],	[day26],	[day27],	[day28],	[day29],	[day30],	[day31]) )AS PivotTable"
										+ "	union  "
						          + "  SELECT *FROM ( SELECT '7' as ord,Temp_emp.pernr,convert(nvarchar(10),month(date)) as month ,'day'+convert(nvarchar(10),day(Date)) as d,ot  FROM Report_Daily_wise,Temp_emp where Report_Daily_wise.pernr =Temp_emp.pernr and month(date)='"+prevmont+"' and Temp_emp.Date_Time='"+key+"' and year(date)='"+prevyear+"'   ) as SourceTable PIVOT(  max(ot)    FOR d in([day21],	[day22],	[day23],	[day24],	[day25],	[day26],	[day27],	[day28],	[day29],	[day30],	[day31]) )AS PivotTable" 
															+ " union "
									+ " SELECT *FROM ( SELECT '4' as ord,Temp_emp.pernr,convert(nvarchar(10),month(date)) as month ,'day'+convert(nvarchar(10),day(Date)) as d,Late  FROM Report_Daily_wise,Temp_emp where Report_Daily_wise.pernr =Temp_emp.pernr  and Temp_emp.Date_Time='"+key+"' and month(date)='"+prevmont+"' and year(date)='"+prevyear+"'   ) as SourceTable PIVOT(  max(Late)    FOR d in(	[day21],	[day22],	[day23],	[day24],	[day25],	[day26],	[day27],	[day28],	[day29],	[day30],	[day31]) )AS PivotTable"
								    + " union "
									+ " SELECT *FROM ( SELECT '5' as ord,Temp_emp.pernr,convert(nvarchar(10),month(date)) as month ,'day'+convert(nvarchar(10),day(Date)) as d,early  FROM Report_Daily_wise,Temp_emp where Report_Daily_wise.pernr =Temp_emp.pernr and Temp_emp.Date_Time='"+key+"' and month(date)='"+prevmont+"' and year(date)='"+prevyear+"'   ) as SourceTable PIVOT(  max(early)    FOR d in(	[day21],	[day22],	[day23],	[day24],	[day25],	[day26],	[day27],	[day28],	[day29],	[day30],	[day31]) )AS PivotTable"
									+ "   union select 0 as ord ,Temp_emp.pernr,convert(nvarchar(10),Temp_emp.Pernr)+': '+EMP_FULLNAME+': '+DPTSTXT+': '+DSGSTXT,'','',	'',	'',	'',	'',	'',	'',	'',	'',	''  from emp_official_info,DEPARTMENT,DESIGNATION,Temp_emp where emp_official_info.pernr =Temp_emp.pernr and Temp_emp.Date_Time='"+key+"'  and emp_official_info.DPTID=DEPARTMENT.DPTID and emp_official_info.DSGID=DESIGNATION.DSGID"	
									+ " )t ,"
									+ " ("
									+ " select 8 as ord,Temp_emp.pernr,convert(nvarchar(10),month) as month, day1,	day2,	day3,	day4,	day5,	day6,	day7,	day8,	day9,	day10,	day11,	day12,	day13,	day14,	day15,	day16,	day17,	day18,	day19,	day20"
									+ " from EMP_Shift_Register,Temp_emp where EMP_Shift_Register.pernr =Temp_emp.pernr and Temp_emp.Date_Time='"+key+"' and   month = '"+help.getFrommonth()+"' and  year ='"+help.getYear()+"' " 
									+ " union"
									+ " select 2,Temp_emp.pernr,convert(nvarchar(10),month) as month, convert(nvarchar(5),day1),	convert(nvarchar(5),day2),	convert(nvarchar(5),day3),	convert(nvarchar(5),day4),	convert(nvarchar(5),day5),	convert(nvarchar(5),day6),	convert(nvarchar(5),day7),	convert(nvarchar(5),day8),	convert(nvarchar(5),day9),	convert(nvarchar(5),day10),	convert(nvarchar(5),day11),	convert(nvarchar(5),day12),	convert(nvarchar(5),day13),	convert(nvarchar(5),day14),	convert(nvarchar(5),day15),	convert(nvarchar(5),day16),	convert(nvarchar(5),day17),	convert(nvarchar(5),day18),	convert(nvarchar(5),day19),	convert(nvarchar(5),day20) "
									+ " from EMP_IN_OUT,Temp_emp where In_Out='I' and  EMP_IN_OUT.pernr =Temp_emp.pernr and Temp_emp.Date_Time='"+key+"' and  month = '"+help.getFrommonth()+"' and year ='"+help.getYear()+"' "
									+ " union"
									+ " select 3,Temp_emp.pernr, convert(nvarchar(10),month) as month,convert(nvarchar(5),day1),	convert(nvarchar(5),day2),	convert(nvarchar(5),day3),	convert(nvarchar(5),day4),	convert(nvarchar(5),day5),	convert(nvarchar(5),day6),	convert(nvarchar(5),day7),	convert(nvarchar(5),day8),	convert(nvarchar(5),day9),	convert(nvarchar(5),day10),	convert(nvarchar(5),day11),	convert(nvarchar(5),day12),	convert(nvarchar(5),day13),	convert(nvarchar(5),day14),	convert(nvarchar(5),day15),	convert(nvarchar(5),day16),	convert(nvarchar(5),day17),	convert(nvarchar(5),day18),	convert(nvarchar(5),day19),	convert(nvarchar(5),day20) "
									+ " from EMP_IN_OUT,Temp_emp where In_Out='O' and EMP_IN_OUT.pernr =Temp_emp.pernr and Temp_emp.Date_Time='"+key+"' and  month = '"+help.getFrommonth()+"' and year ='"+help.getYear()+"' "
									+ " union "
									+ " select 1 as ord ,Temp_emp.pernr,convert(nvarchar(10),month) as month, day1,	day2,	day3,	day4,	day5,	day6,	day7,	day8,	day9,	day10,	day11,	day12,	day13,	day14,	day15,	day16,	day17,	day18,	day19,	day20"
									+ " from EMP_IN_OUT_Status,Temp_emp where EMP_IN_OUT_Status.pernr =Temp_emp.pernr and Temp_emp.Date_Time='"+key+"' and  month = '"+help.getFrommonth()+"' and year ='"+help.getYear()+"' and Temp_emp.Swipe_count!=0  "
									+ " union "
									+ "select 1 as ord ,Temp_emp.pernr,convert(nvarchar(10),month) as month ,replace(day1,'AA','PP'),	replace(day2,'AA','PP'),	replace(day3,'AA','PP'),	replace(day4,'AA','PP'),	replace(day5,'AA','PP'),	replace(day6,'AA','PP'),	replace(day7,'AA','PP'),	replace(day8,'AA','PP'),	replace(day9,'AA','PP'),	replace(day10,'AA','PP'),	replace(day11,'AA','PP'),	replace(day12,'AA','PP'),	replace(day13,'AA','PP'),	replace(day14,'AA','PP'),	replace(day15,'AA','PP'),	replace(day16,'AA','PP'),	replace(day17,'AA','PP'),	replace(day18,'AA','PP'),	replace(day19,'AA','PP'),	replace(day20,'AA','PP') "
									+ " from EMP_IN_OUT_Status,Temp_emp where EMP_IN_OUT_Status.pernr =Temp_emp.pernr and Temp_emp.Date_Time='"+key+"' and  month = '"+help.getFrommonth()+"' and year ='"+help.getYear()+"' and Temp_emp.Swipe_count=0  "
									+ " union "
									+ " SELECT *FROM ( SELECT '6' as ord,Temp_emp.pernr,convert(nvarchar(10),month(date)) as month ,'day'+convert(nvarchar(10),day(Date)) as d,Total  FROM Report_Daily_wise,Temp_emp where Report_Daily_wise.pernr =Temp_emp.pernr and Temp_emp.Date_Time='"+key+"' and month(date)='"+help.getFrommonth()+"' and year(date)='"+help.getYear()+"'   ) as SourceTable PIVOT(  max(Total)    FOR d in([day1],	[day2],	[day3],	[day4],	[day5],	[day6],	[day7],	[day8],	[day9],	[day10],	[day11],	[day12],	[day13],	[day14],	[day15],	[day16],	[day17],	[day18],	[day19],	[day20]) )AS PivotTable"
									+ "	union  "
						          + "  SELECT *FROM ( SELECT '7' as ord,Temp_emp.pernr,convert(nvarchar(10),month(date)) as month ,'day'+convert(nvarchar(10),day(Date)) as d,ot  FROM Report_Daily_wise,Temp_emp where Report_Daily_wise.pernr =Temp_emp.pernr and month(date)='"+help.getFrommonth()+"' and Temp_emp.Date_Time='"+key+"' and year(date)='"+help.getYear()+"'   ) as SourceTable PIVOT(  max(ot)    FOR d in([day1],	[day2],	[day3],	[day4],	[day5],	[day6],	[day7],	[day8],	[day9],	[day10],	[day11],	[day12],	[day13],	[day14],	[day15],	[day16],	[day17],	[day18],	[day19],	[day20]) )AS PivotTable" 
																	+ " union "
									+ " SELECT *FROM ( SELECT '4' as ord,Temp_emp.pernr,convert(nvarchar(10),month(date)) as month ,'day'+convert(nvarchar(10),day(Date)) as d,Late  FROM Report_Daily_wise,Temp_emp where Report_Daily_wise.pernr =Temp_emp.pernr and Temp_emp.Date_Time='"+key+"' and month(date)='"+help.getFrommonth()+"' and year(date)='"+help.getYear()+"'   ) as SourceTable PIVOT(  max(Late)    FOR d in([day1],	[day2],	[day3],	[day4],	[day5],	[day6],	[day7],	[day8],	[day9],	[day10],	[day11],	[day12],	[day13],	[day14],	[day15],	[day16],	[day17],	[day18],	[day19],	[day20]) )AS PivotTable"
								    + " union "
									+ " SELECT *FROM ( SELECT '5' as ord,Temp_emp.pernr,convert(nvarchar(10),month(date)) as month ,'day'+convert(nvarchar(10),day(Date)) as d,early  FROM Report_Daily_wise,Temp_emp where Report_Daily_wise.pernr =Temp_emp.pernr and Temp_emp.Date_Time='"+key+"' and month(date)='"+help.getFrommonth()+"' and year(date)='"+help.getYear()+"'   ) as SourceTable PIVOT(  max(early)    FOR d in([day1],	[day2],	[day3],	[day4],	[day5],	[day6],	[day7],	[day8],	[day9],	[day10],	[day11],	[day12],	[day13],	[day14],	[day15],	[day16],	[day17],	[day18],	[day19],	[day20]) )AS PivotTable"
										+ "   union select 0 as ord ,Temp_emp.pernr,convert(nvarchar(10),Temp_emp.Pernr)+': '+EMP_FULLNAME+': '+DPTSTXT+': '+DSGSTXT,'','',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'' from emp_official_info,DEPARTMENT,DESIGNATION,Temp_emp where emp_official_info.pernr =Temp_emp.pernr and Temp_emp.Date_Time='"+key+"'  and emp_official_info.DPTID=DEPARTMENT.DPTID and emp_official_info.DSGID=DESIGNATION.DSGID"
									
									+ " )k"
									+ " where k.ord = t.ord AND K.PERNR=T.PERNR"
									+ " order by pernr,1";
							
						}
							 
						
						
						
				ResultSet rs20 = ad.selectQuery(b);
				while(rs20.next())
				{	
					HRApprovalForm app =new HRApprovalForm();
			       app.setOdsize(rs20.getInt("ord"));
			 
					app1.setMonth(rs20.getString("month"));
					app.setMonth(rs20.getString("month"));
					if(rs20.getString("ord").equalsIgnoreCase("8"))					
					{
						app.setDay1((String) ab.get(rs20.getString("day1")));								
						app.setDay2((String) ab.get(rs20.getString("day2")));
						app.setDay3((String) ab.get(rs20.getString("day3")));
						app.setDay4((String) ab.get(rs20.getString("day4")));
						app.setDay5((String) ab.get(rs20.getString("day5")));
						app.setDay6((String) ab.get(rs20.getString("day6")));
						app.setDay7((String) ab.get(rs20.getString("day7")));
						app.setDay8((String) ab.get(rs20.getString("day8")));
						app.setDay9((String) ab.get(rs20.getString("day9")));
						app.setDay10((String) ab.get(rs20.getString("day10")));
						app.setDay11((String) ab.get(rs20.getString("day11")));
						app.setDay12((String) ab.get(rs20.getString("day12")));
						app.setDay13((String) ab.get(rs20.getString("day13")));
						app.setDay14((String) ab.get(rs20.getString("day14")));
						app.setDay15((String) ab.get(rs20.getString("day15")));
						app.setDay16((String) ab.get(rs20.getString("day16")));
						app.setDay17((String) ab.get(rs20.getString("day17")));
						app.setDay18((String) ab.get(rs20.getString("day18")));
						app.setDay19((String) ab.get(rs20.getString("day19")));
						app.setDay20((String) ab.get(rs20.getString("day20")));
						app.setDay21((String) ab.get(rs20.getString("day21")));
						app.setDay22((String) ab.get(rs20.getString("day22")));
						app.setDay23((String) ab.get(rs20.getString("day23")));
						app.setDay24((String) ab.get(rs20.getString("day24")));
						app.setDay25((String) ab.get(rs20.getString("day25")));
						app.setDay26((String) ab.get(rs20.getString("day26")));
						app.setDay27((String) ab.get(rs20.getString("day27")));
						app.setDay28((String) ab.get(rs20.getString("day28")));
						app.setDay29((String) ab.get(rs20.getString("day29")));
						app.setDay30((String) ab.get(rs20.getString("day30")));
						app.setDay31((String) ab.get(rs20.getString("day31")));
						
						}
					else
					{
						if(rs20.getString("day1")!=null)
						{
						if(rs20.getString("day1").contains("NL"))
						app.setDay1(rs20.getString("day1").replace("NL", "LP"));	
						else
						app.setDay1(rs20.getString("day1"));	
						}
						
						if(rs20.getString("day2")!=null)
						{
						if(rs20.getString("day2").contains("NL"))
						app.setDay2(rs20.getString("day2").replace("NL", "LP"));
						else
					    app.setDay2(rs20.getString("day2"));
						}
						
						if(rs20.getString("day3")!=null)
						{
						if(rs20.getString("day3").contains("NL"))
						app.setDay3(rs20.getString("day3").replace("NL", "LP"));
						else
						app.setDay3(rs20.getString("day3"));
						}
						
						if(rs20.getString("day4")!=null)
						{
						if(rs20.getString("day4").contains("NL"))
						app.setDay4(rs20.getString("day4").replace("NL", "LP"));
						else
						app.setDay4(rs20.getString("day4"));
						}
						
						if(rs20.getString("day5")!=null)
						{
						if(rs20.getString("day5").contains("NL"))
						app.setDay5(rs20.getString("day5").replace("NL", "LP"));
						else
						app.setDay5(rs20.getString("day5"));
						}
						
						if(rs20.getString("day6")!=null)
						{
						if(rs20.getString("day6").contains("NL"))
						app.setDay6(rs20.getString("day6").replace("NL", "LP"));
						else
						app.setDay6(rs20.getString("day6"));
						}
						
						
						if(rs20.getString("day7")!=null)
						{
						if(rs20.getString("day7").contains("NL"))
						app.setDay7(rs20.getString("day7").replace("NL", "LP"));
						else
						app.setDay7(rs20.getString("day7"));
						}
						
						if(rs20.getString("day8")!=null)
						{
						if(rs20.getString("day8").contains("NL"))
						app.setDay8(rs20.getString("day8").replace("NL", "LP"));
						else
						app.setDay8(rs20.getString("day8"));
						}
						if(rs20.getString("day9")!=null)
						{
						if(rs20.getString("day9").contains("NL"))
						app.setDay9(rs20.getString("day9").replace("NL", "LP"));
						else
						app.setDay9(rs20.getString("day9"));
						}
						if(rs20.getString("day10")!=null)
						{
						if(rs20.getString("day10").contains("NL"))
						app.setDay10(rs20.getString("day10").replace("NL", "LP"));
						else
						app.setDay10(rs20.getString("day10"));
						}
						if(rs20.getString("day11")!=null)
						{
						if(rs20.getString("day11").contains("NL"))
						app.setDay11(rs20.getString("day11").replace("NL", "LP"));
						else
						app.setDay11(rs20.getString("day11"));
						}
						if(rs20.getString("day12")!=null)
						{
						if(rs20.getString("day12").contains("NL"))
						app.setDay12(rs20.getString("day12").replace("NL", "LP"));
						else
						app.setDay12(rs20.getString("day12"));
						}
						if(rs20.getString("day13")!=null)
						{
						if(rs20.getString("day13").contains("NL"))
						app.setDay13(rs20.getString("day13").replace("NL", "LP"));
						else
						app.setDay13(rs20.getString("day13"));
						}
						if(rs20.getString("day14")!=null)
						{
						if(rs20.getString("day14").contains("NL"))
						app.setDay14(rs20.getString("day14").replace("NL", "LP"));
						else
						app.setDay14(rs20.getString("day14"));
						}
						if(rs20.getString("day15")!=null)
						{
						if(rs20.getString("day15").contains("NL"))
						app.setDay15(rs20.getString("day15").replace("NL", "LP"));
						else
						app.setDay15(rs20.getString("day15"));
						}
						if(rs20.getString("day16")!=null)
						{
						if(rs20.getString("day16").contains("NL"))
						app.setDay16(rs20.getString("day16").replace("NL", "LP"));
						else
						app.setDay16(rs20.getString("day16"));
						}
						if(rs20.getString("day17")!=null)
						{
						if(rs20.getString("day17").contains("NL"))
						app.setDay17(rs20.getString("day17").replace("NL", "LP"));
						else
						app.setDay17(rs20.getString("day17"));
						}
						if(rs20.getString("day18")!=null)
						{
						if(rs20.getString("day18").contains("NL"))
						app.setDay18(rs20.getString("day18").replace("NL", "LP"));
						else
						app.setDay18(rs20.getString("day18"));
						}
						if(rs20.getString("day19")!=null)
						{
						if(rs20.getString("day19").contains("NL"))
						app.setDay19(rs20.getString("day19").replace("NL", "LP"));
						else
						app.setDay19(rs20.getString("day19"));
						}
						if(rs20.getString("day20")!=null)
						{
						if(rs20.getString("day20").contains("NL"))
						app.setDay20(rs20.getString("day20").replace("NL", "LP"));
						else
						app.setDay20(rs20.getString("day20"));
						}
						if(rs20.getString("day21")!=null)
						{
						if(rs20.getString("day21").contains("NL"))
						app.setDay21(rs20.getString("day21").replace("NL", "LP"));
						else
						app.setDay21(rs20.getString("day21"));
						}
						if(rs20.getString("day22")!=null)
						{
						if(rs20.getString("day22").contains("NL"))
						app.setDay22(rs20.getString("day22").replace("NL", "LP"));
						else
						app.setDay22(rs20.getString("day22"));
						}
						if(rs20.getString("day23")!=null)
						{
						if(rs20.getString("day23").contains("NL"))
						app.setDay23(rs20.getString("day23").replace("NL", "LP"));
						else
						app.setDay23(rs20.getString("day23"));
						}
						if(rs20.getString("day24")!=null)
						{
						if(rs20.getString("day24").contains("NL"))
						app.setDay24(rs20.getString("day24").replace("NL", "LP"));
						else
						app.setDay24(rs20.getString("day24"));
						}
						if(rs20.getString("day25")!=null)
						{
						if(rs20.getString("day25").contains("NL"))
						app.setDay25(rs20.getString("day25").replace("NL", "LP"));
						else
						app.setDay25(rs20.getString("day25"));
						}
						if(rs20.getString("day26")!=null)
						{
						if(rs20.getString("day26").contains("NL"))
						app.setDay26(rs20.getString("day26").replace("NL", "LP"));
						else
						app.setDay26(rs20.getString("day26"));
						}
						if(rs20.getString("day27")!=null)
						{
						if(rs20.getString("day27").contains("NL"))
						app.setDay27(rs20.getString("day27").replace("NL", "LP"));
						else
						app.setDay27(rs20.getString("day27"));
						}
						if(rs20.getString("day28")!=null)
						{
						if(rs20.getString("day28").contains("NL"))
						app.setDay28(rs20.getString("day28").replace("NL", "LP"));
						else
						app.setDay28(rs20.getString("day28"));
						}
						if(rs20.getString("day29")!=null)
						{
						if(rs20.getString("day29").contains("NL"))
						app.setDay29(rs20.getString("day29").replace("NL", "LP"));
						else
						app.setDay29(rs20.getString("day29"));
						}
						if(rs20.getString("day30")!=null)
						{
						if(rs20.getString("day30").contains("NL"))
						app.setDay30(rs20.getString("day30").replace("NL", "LP"));
						else
						app.setDay30(rs20.getString("day30"));
						}
						if(rs20.getString("day31")!=null)
						{
						if(rs20.getString("day31").contains("NL"))
						app.setDay31(rs20.getString("day31").replace("NL", "LP"));
						else
						app.setDay31(rs20.getString("day31"));
						}
					}
					list1.add(app);
				}	
						
				rs20.close();
				
					
					
					if(help.getAttntype().equalsIgnoreCase("Calendar Month")  )
					{
						
						// Create a calendar object and set year and month
						Calendar mycal = Calendar.getInstance();

						mycal.set(Integer.parseInt(help.getYear()), Integer.parseInt(help.getFrommonth())-1, 1);
						
						// Get the number of days in that month
						int daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
						
						String countdays="SELECT day(thedate) as day FROM dbo.ExplodeDates('"+help.getYear()+"-"+help.getFrommonth()+"-01','"+help.getYear()+"-"+help.getFrommonth()+"-"+daysInMonth+"') as thedate";
			    	    ResultSet rscount=ad.selectQuery(countdays);
			    	    
			    			while(rscount.next())
			    			{
			                   
			                    HRApprovalForm date=new  HRApprovalForm();
			                    date.setDay(rscount.getString("day"));
			                    date.setDate("day"+rscount.getString("day"));
			                    datelist.add(date);
			    			}
			    			rscount.close();
			    			help.setDay(Integer.toString(datelist.size()+4));
			    			request.setAttribute("datelist", datelist);
					}
					if(help.getAttntype().equalsIgnoreCase("Payable Month")  )
					{
						// Create a calendar object and set year and month
						Calendar mycal = Calendar.getInstance();

						mycal.set(Integer.parseInt(help.getYear()), Integer.parseInt(help.getFrommonth())-1, 1);
						
						// Get the number of days in that month
						int daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
						
						String countdays="SELECT day(thedate) as day FROM dbo.ExplodeDates('"+prevyear+"-"+prevmont+"-21','"+help.getYear()+"-"+help.getFrommonth()+"-20') as thedate";
			    	    ResultSet rscount=ad.selectQuery(countdays);
			    	    
			    			while(rscount.next())
			    			{
			                   
			                    HRApprovalForm date=new  HRApprovalForm();
			                    date.setDay(rscount.getString("day"));
			                    date.setDate("day"+rscount.getString("day"));
			                    datelist.add(date);
			    			}
			    			rscount.close();
			    			help.setDay(Integer.toString(datelist.size()+4));
			    			request.setAttribute("datelist", datelist);
					}
					
					
					 //delete empNos
				    
				    String delete="delete Temp_Emp where Date_Time='"+key+"'";						    
				   int lldd=ad.SqlExecuteUpdate(delete);
					
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				request.setAttribute("list1", list1);
				
				}
			if(help.getSummbrkup().equalsIgnoreCase("Summary"))
			{
				 float pp=0;
				 float od=0;				
				 float cl=0;
				 float sl=0;
				 float el=0;
				 float lp=0;			
				 float ph=0;
				 float wo=0;
				 float ss=0;
				 float sh=0;
				 float paid_days=0;
				 float total=0;
				
		
				
				
				
				
				
				try {
					
					String selectedmon=help.getFrommonth();
					String selectedyear=help.getYear();
					String prevmont=Integer.toString((Integer.parseInt(selectedmon)-1));
					String prevyear="";
					if(prevmont.equalsIgnoreCase("0"))
					{
					 prevmont="12";
					 prevyear=Integer.toString((Integer.parseInt(selectedyear)-1));	
					}
					else
						prevyear=selectedyear;
				
					try {
						key = insertTEMPEMP(query1);
					} catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
						
					HRApprovalForm app1 =new HRApprovalForm();
						
						
						
						
						String b = "";		
				
						
							
							if(help.getAttntype().equalsIgnoreCase("Calendar Month")  )
							{
								
							    b = " select emp_official_info.EMP_FULLNAME,t.*,month ,year,day1,	day2,	day3,	day4,	day5,	day6,	day7,	day8,	day9,	day10,	day11,	day12,	day13,	day14,	day15,	day16,	day17,	day18,	day19,	day20,	day21,	day22,	day23,	day24,	day25,	day26,	day27,	day28,	day29,	day30,	day31  from EMP_IN_OUT_Status  ,"
							    		+ "  ( select k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,sum(k.WO+k.ss+k.PH+k.PP+k.SH+k.od+k.SL+k.CL+k.EL) as totpaid,k.Pernr from (  SELECT 	Pernr,(LEN(day) - LEN(REPLACE(day, 'PP', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'PM', '')))*0.25 as PP,(LEN(day) - LEN(REPLACE(day, 'WO', '')))*0.25 as WO,(LEN(day) - LEN(REPLACE(day, 'SS', '')))*0.25 as SS,(LEN(day) - LEN(REPLACE(day, 'PH', '')))*0.25 as PH,"
							    		+ " (LEN(day) - LEN(REPLACE(day, 'SH', '')))*0.25 as SH,(LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25 as od, (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl, "
							    		+ "(LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl, (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL, (LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as LP "
							    		+ " from( select "+currentmonthdays(help.getYear(),help.getFrommonth(), 0)+" as day,Temp_emp.pernr  from EMP_IN_OUT_Status,Temp_emp where  EMP_IN_OUT_Status.pernr =Temp_emp.pernr and month = '"+help.getFrommonth()+"' and year ='"+help.getYear()+"')t  ) k group by k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,k.Pernr)t,Temp_emp,emp_official_info where emp_official_info.PERNR=Temp_emp.pernr and  t.pernr =Temp_emp.pernr "
							    		+ "   and  month = '"+help.getFrommonth()+"' and year ='"+help.getYear()+"'  and t.Pernr=EMP_IN_OUT_Status.Pernr and Temp_Emp.Date_Time='"+key+"' and Temp_Emp.Swipe_count!=0 "
				    				+ "union"
				    				+ "	select emp_official_info.EMP_FULLNAME, t.*,month ,year,replace(day1,'AA','PP')as day1,	replace(day2,'AA','PP')as day2,	replace(day3,'AA','PP')as day3,	replace(day4,'AA','PP')as day4,	replace(day5,'AA','PP')as day5,	replace(day6,'AA','PP')as day6,	replace(day7,'AA','PP')as day7,	replace(day8,'AA','PP')as day8,	replace(day9,'AA','PP')as day9,	replace(day10,'AA','PP')as day10,	replace(day11,'AA','PP')as day11,	replace(day12,'AA','PP')as day12,	replace(day13,'AA','PP')as day13,	replace(day14,'AA','PP')as day14,	replace(day15,'AA','PP')as day15,	replace(day16,'AA','PP')as day16,	replace(day17,'AA','PP')as day17,	replace(day18,'AA','PP')as day18,	replace(day19,'AA','PP')as day19,	replace(day20,'AA','PP')as day20,	replace(day21,'AA','PP')as day21,	replace(day22,'AA','PP')as day22,	replace(day23,'AA','PP')as day23,	replace(day24,'AA','PP')as day24,	replace(day25,'AA','PP')as day25,	replace(day26,'AA','PP')as day26,	replace(day27,'AA','PP')as day27,	replace(day28,'AA','PP')as day28,	replace(day29,'AA','PP')as day29,	replace(day30,'AA','PP')as day30,	replace(day31,'AA','PP')as day31  from EMP_IN_OUT_Status  ,"
						    		+ "  ( select k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,sum(k.WO+k.ss+k.PH+k.PP+k.SH+k.od+k.SL+k.CL+k.EL) as totpaid,k.Pernr from (  SELECT 	Pernr,(LEN(day) - LEN(REPLACE(day, 'PP', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as PP,(LEN(day) - LEN(REPLACE(day, 'WO', '')))*0.25 as WO,(LEN(day) - LEN(REPLACE(day, 'SS', '')))*0.25 as SS,(LEN(day) - LEN(REPLACE(day, 'PH', '')))*0.25 as PH,"
						    		+ " (LEN(day) - LEN(REPLACE(day, 'SH', '')))*0.25 as SH,(LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25 as od, (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl, "
						    		+ "(LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl, (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL, (LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25 as LP "
						    		+ " from( select "+currentmonthdays(help.getYear(),help.getFrommonth(), 0)+" as day,Temp_emp.pernr  from EMP_IN_OUT_Status,Temp_emp where  EMP_IN_OUT_Status.pernr =Temp_emp.pernr and month = '"+help.getFrommonth()+"' and year ='"+help.getYear()+"')t  ) k group by k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,k.Pernr)t,Temp_emp,emp_official_info where emp_official_info.PERNR=Temp_emp.pernr and  t.pernr =Temp_emp.pernr "
						    		+ "   and  month = '"+help.getFrommonth()+"' and year ='"+help.getYear()+"'  and t.Pernr=EMP_IN_OUT_Status.Pernr and Temp_Emp.Date_Time='"+key+"' and Temp_Emp.Swipe_count=0 ";
			    			}
							
		
						 
							
							if(help.getAttntype().equalsIgnoreCase("Payable Month")  )
							{
			
			        b="  select emp_official_info.PERNR,EMP_FULLNAME,(t.PP + k.PP) as PP,(t.cl+k.cl)CL,(t.EL+k.EL) as EL,(t.sl+k.Sl) as SL,(t.wo+k.WO) as wo,(t.ss+k.ss) as ss,(t.PH+k.ph) "
			        		+ "as ph,(t.lp+k.lp) as lp,(t.SH+k.SH) as sh,(t.od+k.od) as od,t.totpaid, day1,	day2,	day3,	day4,	day5,	day6,	day7,	day8,	day9,"
			        		+ "	day10,	day11,	day12,	day13,	day14,	day15,	day16,	day17,	day18,	day19,	day20 ,  day21,	day22,	day23,	day24,"
			        		+ "	day25,	day26,	day27,	day28,	day29,	day30,	day31  from (  select t.*,month ,	day21,	day22,	day23,	day24,	day25,"
			        		+ "	day26,	day27,	day28,	day29,	day30,	day31 from EMP_IN_OUT_Status, "
			        		+ " ( select k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,sum(k.WO+k.ss+k.PH+k.PP+k.SH+k.od+k.SL+k.CL+k.EL) as totpaid,k.Pernr from"
			        		+ " (  SELECT 	Pernr,(LEN(day) - LEN(REPLACE(day, 'PP', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'PM', '')))*0.25 as PP,"
			        		+ "(LEN(day) - LEN(REPLACE(day, 'WO', '')))*0.25 as WO,(LEN(day) - LEN(REPLACE(day, 'SS', '')))*0.25 as ss,(LEN(day) - LEN(REPLACE(day, 'PH', '')))*0.25 as PH,"
			        		+ " (LEN(day) - LEN(REPLACE(day, 'SH', '')))*0.25 as SH,(LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25 as od,"
			        		+ " (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl, (LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl, "
			        		+ "(LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL, (LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'AA', '')))"
			        		+ "*0.25 as LP  from( select "+prevmonthdays(prevyear, prevmont)+" as day,Temp_Emp.Pernr "
			        		+ " from EMP_IN_OUT_Status,Temp_Emp where Temp_Emp.pernr=EMP_IN_OUT_Status.Pernr and month ='"+prevmont+"' and year ='"+prevyear+"')t  ) k,Temp_Emp where"
			        		+ "  Temp_Emp.Pernr=k.Pernr group by k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,k.Pernr)t,Temp_Emp   where EMP_IN_OUT_Status.pernr =Temp_Emp.Pernr "
			        		+ "and  month ='"+prevmont+"' and year ='"+prevyear+"' and t.Pernr=EMP_IN_OUT_Status.Pernr and Date_Time='"+key+"' and temp_emp.Swipe_count!=0)t ,  "
			        		+ " ( select t.*,month ,	day1,	day2,	day3,	day4,	day5,	day6,	day7,	day8,	day9,	day10,	day11,	day12,	day13,	day14,	day15,	"
			        		+ "day16,	day17,	day18,	day19,	day20  from EMP_IN_OUT_Status,  ( select k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,"
			        		+ "sum(k.WO+k.ss+k.PH+k.PP+k.SH+k.od+k.SL+k.CL+k.EL) as totpaid,k.Pernr from "
			        		+ "(  SELECT 	Pernr,(LEN(day) - LEN(REPLACE(day, 'PP', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'PM', '')))*0.25 as PP,"
			        		+ "(LEN(day) - LEN(REPLACE(day, 'WO', '')))*0.25 as WO,(LEN(day) - LEN(REPLACE(day, 'SS', '')))*0.25 as ss,(LEN(day) - LEN(REPLACE(day, 'PH', '')))*0.25 as PH, (LEN(day) - LEN(REPLACE(day, 'SH', '')))*0.25"
			        		+ " as SH,(LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25 as od, (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl,"
			        		+ " (LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl, (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL,"
			        		+ " (LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as LP from"
			        		+ "( select "+currentmonthdays(help.getYear(),help.getFrommonth(), 20)+" as day,Temp_Emp.Pernr"
			        		+ "  from EMP_IN_OUT_Status,Temp_Emp where Temp_Emp.Pernr=EMP_IN_OUT_Status.Pernr and month ='"+help.getFrommonth()+"' and year ='"+help.getYear()+"' and Date_Time='"+key+"'  and temp_emp.Swipe_count!=0)t  )"
			        		+ " k,Temp_Emp where  Temp_Emp.Pernr=k.Pernr group by k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,k.Pernr)t,Temp_Emp "
			        		+ "  where EMP_IN_OUT_Status.pernr =Temp_Emp.Pernr and  month ='"+help.getFrommonth()+"' and year ='"+help.getYear()+"'  and t.Pernr=EMP_IN_OUT_Status.Pernr and"
			        		+ " Date_Time='"+key+"'  and temp_emp.Swipe_count!=0)k,emp_official_info where t.Pernr=k.Pernr and emp_official_info.PERNR=k.Pernr"
			        				+ " union "
    				   + "	select emp_official_info.PERNR,EMP_FULLNAME,(t.PP + k.PP) as PP,(t.cl+k.cl)CL,(t.EL+k.EL) as EL,(t.sl+k.Sl) as SL,(t.wo+k.WO) as wo,(t.ss+k.ss) as ss,(t.PH+k.ph) "
			        		+ "as ph,(t.lp+k.lp) as lp,(t.SH+k.SH) as sh,(t.od+k.od) as od,t.totpaid, day1,	day2,	day3,	day4,	day5,	day6,	day7,	day8,	day9,"
			        		+ "	day10,	day11,	day12,	day13,	day14,	day15,	day16,	day17,	day18,	day19,	day20 ,  day21,	day22,	day23,	day24,"
			        		+ "	day25,	day26,	day27,	day28,	day29,	day30,	day31  from (  select t.*,month ,	replace(day21,'AA','PP')as day21,	replace(day22,'AA','PP')as day22,"
			        		+ "	replace(day23,'AA','PP')as day23,	replace(day24,'AA','PP')as day24,	replace(day25,'AA','PP')as day25,	replace(day26,'AA','PP')as day26,	replace(day27,'AA','PP')as day27,	replace(day28,'AA','PP')as day28,	replace(day29,'AA','PP')as day29,	replace(day30,'AA','PP')as day30,	replace(day31,'AA','PP')as day31 from EMP_IN_OUT_Status, "
			        		+ " ( select k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,sum(k.WO+k.ss+k.PH+k.PP+k.SH+k.od+k.SL+k.CL+k.EL) as totpaid,k.Pernr from"
			        		+ " (  SELECT 	Pernr,(LEN(day) - LEN(REPLACE(day, 'PP', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as PP,(LEN(day) - LEN(REPLACE(day, 'WO', '')))*0.25 as WO,(LEN(day) - LEN(REPLACE(day, 'SS', '')))*0.25 as ss,(LEN(day) - LEN(REPLACE(day, 'PH', '')))*0.25 as PH, (LEN(day) - LEN(REPLACE(day, 'SH', '')))*0.25 as SH,(LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25 as od, (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl, (LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl, (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL,(LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25 as LP  from( select "+prevmonthdays(prevyear, prevmont)+" as day,Temp_Emp.Pernr "
			        		+ " from EMP_IN_OUT_Status,Temp_Emp where Temp_Emp.pernr=EMP_IN_OUT_Status.Pernr and month ='"+prevmont+"' and year ='"+prevyear+"')t  ) k,Temp_Emp where"
			        		+ "  Temp_Emp.Pernr=k.Pernr group by k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,k.Pernr)t,Temp_Emp   where EMP_IN_OUT_Status.pernr =Temp_Emp.Pernr "
			        		+ "and  month ='"+prevmont+"' and year ='"+prevyear+"' and t.Pernr=EMP_IN_OUT_Status.Pernr and Date_Time='"+key+"' and temp_emp.Swipe_count=0)t ,  "
			        		+ " ( select t.*,month ,	replace(day1,'AA','PP')as day1,	replace(day2,'AA','PP')as day2,	replace(day3,'AA','PP')as day3,	replace(day4,'AA','PP')as day4,	replace(day5,'AA','PP')as day5,	"
			        		+ "replace(day6,'AA','PP')as day6,	replace(day7,'AA','PP')as day7,	replace(day8,'AA','PP')as day8,	replace(day9,'AA','PP')as day9,	replace(day10,'AA','PP')as day10,	replace(day11,'AA','PP')as day11,	replace(day12,'AA','PP')as day12,	replace(day13,'AA','PP')as day13,	replace(day14,'AA','PP')as day14,	replace(day15,'AA','PP')as day15,	replace(day16,'AA','PP')as day16,	replace(day17,'AA','PP')as day17,	replace(day18,'AA','PP')as day18,	replace(day19,'AA','PP')as day19,	replace(day20,'AA','PP')as day20  from EMP_IN_OUT_Status,  ( select k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,"
			        		+ "sum(k.WO+k.ss+k.PH+k.PP+k.SH+k.od+k.SL+k.CL+k.EL) as totpaid,k.Pernr from "
			        		+ "(  SELECT 	Pernr,(LEN(day) - LEN(REPLACE(day, 'PP', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as PP,(LEN(day) - LEN(REPLACE(day, 'WO', '')))*0.25 as WO,(LEN(day) - LEN(REPLACE(day, 'SS', '')))*0.25 as ss,(LEN(day) - LEN(REPLACE(day, 'PH', '')))*0.25 as PH, (LEN(day) - LEN(REPLACE(day, 'SH', '')))*0.25 as SH,(LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25 as od, (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl, (LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl, (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL,"
						+ " (LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25 as LP from"
			        		+ "( select "+currentmonthdays(help.getYear(),help.getFrommonth(), 20)+" as day,Temp_Emp.Pernr"
			        		+ "  from EMP_IN_OUT_Status,Temp_Emp where Temp_Emp.Pernr=EMP_IN_OUT_Status.Pernr and month ='"+help.getFrommonth()+"' and year ='"+help.getYear()+"' and Date_Time='"+key+"'  and temp_emp.Swipe_count=0)t  )"
			        		+ " k,Temp_Emp where  Temp_Emp.Pernr=k.Pernr group by k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,k.Pernr)t,Temp_Emp "
			        		+ "  where EMP_IN_OUT_Status.pernr =Temp_Emp.Pernr and  month ='"+help.getFrommonth()+"' and year ='"+help.getYear()+"'  and t.Pernr=EMP_IN_OUT_Status.Pernr and"
			        		+ " Date_Time='"+key+"'  and temp_emp.Swipe_count=0)k,emp_official_info where t.Pernr=k.Pernr and emp_official_info.PERNR=k.Pernr";
			        		
							}
						
						
						
				ResultSet rs20 = ad.selectQuery(b);
				while(rs20.next())
				{	
					HRApprovalForm app =new HRApprovalForm();
					
					app.setEmployeeno(rs20.getString("pernr"));
					app.setEmployeeName(rs20.getString("EMP_FULLNAME"));
					app1.setMonth(help.getFrommonth());
					app.setMonth(help.getFrommonth());
					
					app1.setYear(help.getYear());
					app.setYear(help.getYear());
					
					
					if(rs20.getString("day1")!=null)
					{
					if(rs20.getString("day1").contains("NL"))
					app.setDay1(rs20.getString("day1").replace("NL", "LP"));	
					else
					app.setDay1(rs20.getString("day1"));	
					}
					
					if(rs20.getString("day2")!=null)
					{
					if(rs20.getString("day2").contains("NL"))
					app.setDay2(rs20.getString("day2").replace("NL", "LP"));
					else
				    app.setDay2(rs20.getString("day2"));
					}
					
					if(rs20.getString("day3")!=null)
					{
					if(rs20.getString("day3").contains("NL"))
					app.setDay3(rs20.getString("day3").replace("NL", "LP"));
					else
					app.setDay3(rs20.getString("day3"));
					}
					
					if(rs20.getString("day4")!=null)
					{
					if(rs20.getString("day4").contains("NL"))
					app.setDay4(rs20.getString("day4").replace("NL", "LP"));
					else
					app.setDay4(rs20.getString("day4"));
					}
					
					if(rs20.getString("day5")!=null)
					{
					if(rs20.getString("day5").contains("NL"))
					app.setDay5(rs20.getString("day5").replace("NL", "LP"));
					else
					app.setDay5(rs20.getString("day5"));
					}
					
					if(rs20.getString("day6")!=null)
					{
					if(rs20.getString("day6").contains("NL"))
					app.setDay6(rs20.getString("day6").replace("NL", "LP"));
					else
					app.setDay6(rs20.getString("day6"));
					}
					
					
					if(rs20.getString("day7")!=null)
					{
					if(rs20.getString("day7").contains("NL"))
					app.setDay7(rs20.getString("day7").replace("NL", "LP"));
					else
					app.setDay7(rs20.getString("day7"));
					}
					
					if(rs20.getString("day8")!=null)
					{
					if(rs20.getString("day8").contains("NL"))
					app.setDay8(rs20.getString("day8").replace("NL", "LP"));
					else
					app.setDay8(rs20.getString("day8"));
					}
					if(rs20.getString("day9")!=null)
					{
					if(rs20.getString("day9").contains("NL"))
					app.setDay9(rs20.getString("day9").replace("NL", "LP"));
					else
					app.setDay9(rs20.getString("day9"));
					}
					if(rs20.getString("day10")!=null)
					{
					if(rs20.getString("day10").contains("NL"))
					app.setDay10(rs20.getString("day10").replace("NL", "LP"));
					else
					app.setDay10(rs20.getString("day10"));
					}
					if(rs20.getString("day11")!=null)
					{
					if(rs20.getString("day11").contains("NL"))
					app.setDay11(rs20.getString("day11").replace("NL", "LP"));
					else
					app.setDay11(rs20.getString("day11"));
					}
					if(rs20.getString("day12")!=null)
					{
					if(rs20.getString("day12").contains("NL"))
					app.setDay12(rs20.getString("day12").replace("NL", "LP"));
					else
					app.setDay12(rs20.getString("day12"));
					}
					if(rs20.getString("day13")!=null)
					{
					if(rs20.getString("day13").contains("NL"))
					app.setDay13(rs20.getString("day13").replace("NL", "LP"));
					else
					app.setDay13(rs20.getString("day13"));
					}
					if(rs20.getString("day14")!=null)
					{
					if(rs20.getString("day14").contains("NL"))
					app.setDay14(rs20.getString("day14").replace("NL", "LP"));
					else
					app.setDay14(rs20.getString("day14"));
					}
					if(rs20.getString("day15")!=null)
					{
					if(rs20.getString("day15").contains("NL"))
					app.setDay15(rs20.getString("day15").replace("NL", "LP"));
					else
					app.setDay15(rs20.getString("day15"));
					}
					if(rs20.getString("day16")!=null)
					{
					if(rs20.getString("day16").contains("NL"))
					app.setDay16(rs20.getString("day16").replace("NL", "LP"));
					else
					app.setDay16(rs20.getString("day16"));
					}
					if(rs20.getString("day17")!=null)
					{
					if(rs20.getString("day17").contains("NL"))
					app.setDay17(rs20.getString("day17").replace("NL", "LP"));
					else
					app.setDay17(rs20.getString("day17"));
					}
					if(rs20.getString("day18")!=null)
					{
					if(rs20.getString("day18").contains("NL"))
					app.setDay18(rs20.getString("day18").replace("NL", "LP"));
					else
					app.setDay18(rs20.getString("day18"));
					}
					if(rs20.getString("day19")!=null)
					{
					if(rs20.getString("day19").contains("NL"))
					app.setDay19(rs20.getString("day19").replace("NL", "LP"));
					else
					app.setDay19(rs20.getString("day19"));
					}
					if(rs20.getString("day20")!=null)
					{
					if(rs20.getString("day20").contains("NL"))
					app.setDay20(rs20.getString("day20").replace("NL", "LP"));
					else
					app.setDay20(rs20.getString("day20"));
					}
					if(rs20.getString("day21")!=null)
					{
					if(rs20.getString("day21").contains("NL"))
					app.setDay21(rs20.getString("day21").replace("NL", "LP"));
					else
					app.setDay21(rs20.getString("day21"));
					}
					if(rs20.getString("day22")!=null)
					{
					if(rs20.getString("day22").contains("NL"))
					app.setDay22(rs20.getString("day22").replace("NL", "LP"));
					else
					app.setDay22(rs20.getString("day22"));
					}
					if(rs20.getString("day23")!=null)
					{
					if(rs20.getString("day23").contains("NL"))
					app.setDay23(rs20.getString("day23").replace("NL", "LP"));
					else
					app.setDay23(rs20.getString("day23"));
					}
					if(rs20.getString("day24")!=null)
					{
					if(rs20.getString("day24").contains("NL"))
					app.setDay24(rs20.getString("day24").replace("NL", "LP"));
					else
					app.setDay24(rs20.getString("day24"));
					}
					if(rs20.getString("day25")!=null)
					{
					if(rs20.getString("day25").contains("NL"))
					app.setDay25(rs20.getString("day25").replace("NL", "LP"));
					else
					app.setDay25(rs20.getString("day25"));
					}
					if(rs20.getString("day26")!=null)
					{
					if(rs20.getString("day26").contains("NL"))
					app.setDay26(rs20.getString("day26").replace("NL", "LP"));
					else
					app.setDay26(rs20.getString("day26"));
					}
					if(rs20.getString("day27")!=null)
					{
					if(rs20.getString("day27").contains("NL"))
					app.setDay27(rs20.getString("day27").replace("NL", "LP"));
					else
					app.setDay27(rs20.getString("day27"));
					}
					if(rs20.getString("day28")!=null)
					{
					if(rs20.getString("day28").contains("NL"))
					app.setDay28(rs20.getString("day28").replace("NL", "LP"));
					else
					app.setDay28(rs20.getString("day28"));
					}
					if(rs20.getString("day29")!=null)
					{
					if(rs20.getString("day29").contains("NL"))
					app.setDay29(rs20.getString("day29").replace("NL", "LP"));
					else
					app.setDay29(rs20.getString("day29"));
					}
					if(rs20.getString("day30")!=null)
					{
					if(rs20.getString("day30").contains("NL"))
					app.setDay30(rs20.getString("day30").replace("NL", "LP"));
					else
					app.setDay30(rs20.getString("day30"));
					}
					if(rs20.getString("day31")!=null)
					{
					if(rs20.getString("day31").contains("NL"))
					app.setDay31(rs20.getString("day31").replace("NL", "LP"));
					else
					app.setDay31(rs20.getString("day31"));
					}
						
						app.setOd(rs20.getFloat("Od"));
                       od=od+rs20.getFloat("Od");
						app.setCl(rs20.getFloat("cl"));
						cl=cl+rs20.getFloat("cl");
						app.setSl(rs20.getFloat("sl"));
						sl=sl+rs20.getFloat("sl");
						app.setEl(rs20.getFloat("el"));		
						el=el+rs20.getFloat("el");
						app.setLp(rs20.getFloat("lp"));		
						lp=lp+rs20.getFloat("lp");
				  	    app.setPh(rs20.getFloat("PH"));
				  	    ph=ph+rs20.getFloat("ph");
						app.setWo(rs20.getFloat("wo"));
				  	    wo=wo+rs20.getFloat("wo");
				  	  app.setSs( rs20.getFloat("ss"));
				  	    ss=ss+rs20.getFloat("ss");
						app.setSh(rs20.getFloat("SH"));
				  	    sh=sh+rs20.getFloat("sh");
						app.setPp(rs20.getFloat("PP"));
				  	    pp=pp+rs20.getFloat("pp");
						app.setPaid_days(rs20.getFloat("totpaid"));
						paid_days=paid_days+rs20.getFloat("totpaid");						
						app.setTotal(Float.toString((app.getLp()+app.getPaid_days())));
						total=total+Float.parseFloat((app.getTotal()));
					
						list3.add(app);
				}	
				rs20.close();
						
				help.setOd(od);
  
				help.setCl(cl);
			
				help.setSl(sl);
				
				help.setEl(el);		
	
				help.setLp(lp);		
				
		  	    help.setPh(ph);
		  	  
				help.setWo(wo);
				
				help.setSs(ss);
		
				help.setSh(sh);
		  	
				help.setPp(pp);
		  
				help.setPaid_days(paid_days);
				
				help.setTotal(Float.toString(total));
				
				list4.add(app1);
				
					
					
					if(help.getAttntype().equalsIgnoreCase("Calendar Month")  )
					{
						
						// Create a calendar object and set year and month
						Calendar mycal = Calendar.getInstance();

						mycal.set(Integer.parseInt(help.getYear()), Integer.parseInt(help.getFrommonth())-1, 1);
						
						// Get the number of days in that month
						int daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
						
						String countdays="SELECT day(thedate) as day FROM dbo.ExplodeDates('"+help.getYear()+"-"+help.getFrommonth()+"-01','"+help.getYear()+"-"+help.getFrommonth()+"-"+daysInMonth+"') as thedate";
			    	    ResultSet rscount=ad.selectQuery(countdays);
			    	    
			    			while(rscount.next())
			    			{
			                   
			                    HRApprovalForm date=new  HRApprovalForm();
			                    date.setDay(rscount.getString("day"));
			                    date.setDate("day"+rscount.getString("day"));
			                    datelist.add(date);
			    			}
			    			rscount.close();
			    			help.setDay(Integer.toString(datelist.size()+4));
			    			request.setAttribute("datelist", datelist);
					}
					if(help.getAttntype().equalsIgnoreCase("Payable Month")  )
					{
						// Create a calendar object and set year and month
						Calendar mycal = Calendar.getInstance();

						mycal.set(Integer.parseInt(help.getYear()), Integer.parseInt(help.getFrommonth())-1, 1);
						
						// Get the number of days in that month
						int daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
						
						String countdays="SELECT day(thedate) as day FROM dbo.ExplodeDates('"+prevyear+"-"+prevmont+"-21','"+help.getYear()+"-"+help.getFrommonth()+"-20') as thedate";
			    	    ResultSet rscount=ad.selectQuery(countdays);
			    	    
			    			while(rscount.next())
			    			{
			                   
			                    HRApprovalForm date=new  HRApprovalForm();
			                    date.setDay(rscount.getString("day"));
			                    date.setDate("day"+rscount.getString("day"));
			                    datelist.add(date);
			    			}
			    			rscount.close();
			    			help.setDay(Integer.toString(datelist.size()+4));
			    			request.setAttribute("datelist", datelist);
					}
					
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				finally{
	    			query1="";
	    			query2="";
	    			query3="";
	    			query4="";
	    			query5="";
	    			query6="";
	    			
	    			  //delete empNos
				    
				    String delete="delete Temp_Emp where Date_Time='"+key+"'";						    
				   int lldd=ad.SqlExecuteUpdate(delete);
	    		}
				request.setAttribute("list3", list3);
			
				
				}
		
		
			help.setMonth(monthName[Integer.parseInt(help.getFrommonth())]);
		
						request.setAttribute("result", "");
						return mapping.findForward("exportdisplaymusterreport");
						
					}
	
	
	
	public ActionForward exportdailyArrivalreport(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

		
		HRApprovalForm help = (HRApprovalForm) form;
		String sqlfromdate="";
		String sqltodate="";
		String exportdate="";

		if(!help.getFromDate().equalsIgnoreCase(""))
		{
			String from[]=help.getFromDate().split("/");
		    sqlfromdate=from[2]+"-"+from[1]+"-"+from[0]; 
		    exportdate=help.getFromDate().replace("/", ".");
            help.setDate(exportdate);
		}
		
		response.setHeader("Content-Disposition", "inline; filename="+exportdate+"_Daily_Arrival_Report.xls");
		
		
		//dept
		String ACtualdept="";
	    if(help.getDeptArray()!=null)
	    {	
	    String[] dept = help.getDeptArray();
	    
	    StringBuffer reqdept = new StringBuffer();
		for (int i = 0; i < dept.length; i++) {
			reqdept.append("'"+dept[i]+"'" + ",");
		}
		 ACtualdept= reqdept.substring(0, reqdept.length() - 1).toString();
	    }
		
	    
	    //subdept
	    
	    String ACtualsubdept="";
	    if(help.getSubdeptArray()!=null)
	    {	
	    String[] subdept = help.getSubdeptArray();
	    
	    StringBuffer reqsubdept = new StringBuffer();
		for (int i = 0; i < subdept.length; i++) {
			reqsubdept.append("'"+subdept[i]+"'" + ",");
		}
		ACtualsubdept= reqsubdept.substring(0, reqsubdept.length() - 1).toString();
	    }
	    
	    //reporting
	    
	    String ACtualrepgrp="";
	    if(help.getRepgrpArray()!=null)
	    {	
	    String[] repgrp = help.getRepgrpArray();
	    
	    StringBuffer reqrepgrp = new StringBuffer();
		for (int i = 0; i < repgrp.length; i++) {
			reqrepgrp.append("'"+repgrp[i]+"'" + ",");
		}
		ACtualrepgrp= reqrepgrp.substring(0, reqrepgrp.length() - 1).toString();
	    }

		//emp_off
		//emp_off
	    String query1="select DEPARTMENT.DPTSTXT,REPORTING_GROUP.Grp_STXT,SUBDEPARTMENT.SDPTID_STXT,emp_official_info.pernr,EMP_FULLNAME,emp_official_info.DPTID,DESIGNATION.DSGSTXT,emp_official_info.SDPTID,emp_official_info.Reporting_Grp,"
	    		+ "Report_Daily_wise.In_time,Report_Daily_wise.Out_time,Report_Daily_wise.Early,Report_Daily_wise.Late,Report_Daily_wise.Total,left(Report_Daily_wise.Status,2) as Status,Report_Daily_wise.Shift from emp_official_info ,location ,DESIGNATION,Report_Daily_wise,DEPARTMENT,REPORTING_GROUP,SUBDEPARTMENT where DEPARTMENT.dptid=emp_official_info.DPTID and SUBDEPARTMENT.SDPTID=emp_official_info.SDPTID and REPORTING_GROUP.Grp_ID=emp_official_info.Reporting_Grp and"
	    		+ "  Location.LOCATION_CODE=emp_official_info.LOCID and  DESIGNATION.DSGID =emp_official_info.DSGID  and emp_official_info.LOCID = '"+help.getLocationId()+"'  and Active=1  and emp_official_info.PERNR=Report_Daily_wise.Pernr and Report_Daily_wise.date='"+sqlfromdate+"' and left(Report_Daily_wise.Status,2) like '%PP%'";

		

		if(!ACtualdept.equalsIgnoreCase(""))
		{
			query1=query1+" and emp_official_info.DPTID in  ("+ACtualdept+") ";
		
		}

		if(!ACtualsubdept.equalsIgnoreCase(""))
		{
			query1=query1+" and emp_official_info.SDPTID in ("+ACtualsubdept+")  ";
		
		}
		
		if(!ACtualrepgrp.equalsIgnoreCase(""))
		{
			query1=query1+" and emp_official_info.Reporting_Grp in("+ACtualrepgrp+") ";
		
		}
		
		query1=query1+" group by emp_official_info.pernr,EMP_FULLNAME,emp_official_info.DPTID,DESIGNATION.DSGSTXT,emp_official_info.SDPTID,emp_official_info.Reporting_Grp,Report_Daily_wise.In_time,Report_Daily_wise.Out_time,Report_Daily_wise.Early,Report_Daily_wise.Late,Report_Daily_wise.Total,Report_Daily_wise.Status,Report_Daily_wise.Shift,DEPARTMENT.DPTSTXT,REPORTING_GROUP.Grp_STXT,SUBDEPARTMENT.SDPTID_STXT order by DPTID,SDPTID,Reporting_Grp";
				
				
		ArrayList deptlist = new ArrayList();
		ArrayList emplist = new ArrayList();


		
       	if(!(ACtualsubdept.equalsIgnoreCase("")))
    	{
String list="select distinct DEPARTMENT.DPTID,SUBDEPARTMENT.SDPTID,Grp_ID,DPTSTXT,SDPTID_STXT,Grp_STXT  from DEPARTMENT,SUBDEPARTMENT,"
		+ "REPORTING_GROUP,emp_official_info where LOCID='"+help.getLocationId()+"' and emp_official_info.DPTID=DEPARTMENT.DPTID and emp_official_info.SDPTID=SUBDEPARTMENT.SDPTID "
		+ "and emp_official_info.Reporting_Grp=REPORTING_GROUP.Grp_ID  and DEPARTMENT.dptid in ("+ACtualdept+") and SUBDEPARTMENT.SDPTID in ("+ACtualsubdept+") and REPORTING_GROUP.Grp_ID in("+ACtualrepgrp+") order by DPTID,SDPTID,Grp_ID";
	ResultSet rs1 = ad.selectQuery(list);
try {
	while(rs1.next())
	{
		HRApprovalForm help1 = new HRApprovalForm();
		help1.setDepartment(rs1.getString("DPTID"));
		help1.setSubdepartment(rs1.getString("SDPTID"));
		help1.setRepgrp(rs1.getString("Grp_ID"));
		help1.setDeptFrom(rs1.getString("DPTSTXT"));
		help1.setDeptTo(rs1.getString("SDPTID_STXT"));
		help1.setDesgTo(rs1.getString("Grp_STXT"));
		deptlist.add(help1);
	}
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}
try {
	rs1.close();
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}
request.setAttribute("deptlist", deptlist);

    	}
    	else
    	{

    		String list="select distinct DEPARTMENT.DPTID,DPTSTXT  from DEPARTMENT ,emp_official_info where LOCID='"+help.getLocationId()+"' and emp_official_info.DPTID=DEPARTMENT.DPTID  "
    				+ "  and DEPARTMENT.dptid in ("+ACtualdept+")  order by DPTID";
    		
    		
    		
    		ResultSet rs1 = ad.selectQuery(list);
    		try {
    			while(rs1.next())
    			{
    				HRApprovalForm help1 = new HRApprovalForm();
    				help1.setDepartment(rs1.getString("DPTID"));	    
    				help1.setDeptFrom(rs1.getString("DPTSTXT"));
    
    				deptlist.add(help1);
    			}
    		} catch (SQLException e) {
    			// TODO Auto-generated catch block
    			e.printStackTrace();
    		}
    		try {
				rs1.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} 	
    		request.setAttribute("onlydeptlist", deptlist);
    	}
		

		
		ResultSet rs = ad.selectQuery(query1);
		try {
			while(rs.next())
			{
				HRApprovalForm help2 = new HRApprovalForm();
				help2.setEmployeeno(rs.getString("Pernr") );
				help2.setEmployeeName(rs.getString("EMP_FULLNAME"));
				help2.setDepartment(rs.getString("DPTID"));
				help2.setDeptTo(rs.getString("DPTSTXT"));
				help2.setSubdepartment(rs.getString("SDPTID"));
				help2.setSubdeptTO(rs.getString("SDPTID_STXT"));
				help2.setRepgrp(rs.getString("reporting_grp"));
				help2.setRep_et(rs.getString("Grp_STXT"));
			    help2.setDesignation(rs.getString("DSGSTXT"));
			    help2.setStartTime(rs.getString("In_time").substring(0, 8));
			    help2.setEndTime(rs.getString("Out_time").substring(0, 8));
			    
			    if(rs.getString("Early")!=null)
			    help2.setEarly(rs.getString("Early"));
			    else			    
			    help2.setEarly("00:00:00");	
			    
			    if(rs.getString("late")!=null)
			    help2.setLate(rs.getString("late"));
			    else
			    help2.setLate("00:00:00");	
			    
			    if(rs.getString("total")!=null)
			    help2.setTotal(rs.getString("total"));
			    else
				help2.setTotal("00:00:00");	
			    
			    help2.setStatus(rs.getString("Status"));
			    help2.setShift(rs.getString("Shift"));
				emplist.add(help2);

			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		query1="";
		request.setAttribute("emplist", emplist);
		try {
			rs.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		 return mapping.findForward("exportdailyArrivalreport");
		
	
	}
	public ActionForward exportdailyPerformancereport(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
		HRApprovalForm help = (HRApprovalForm) form;
		String sqlfromdate="";
		String sqltodate="";
		String exportdate="";

		if(!help.getFromDate().equalsIgnoreCase(""))
		{
			String from[]=help.getFromDate().split("/");
		    sqlfromdate=from[2]+"-"+from[1]+"-"+from[0]; 
		    exportdate=help.getFromDate().replace("/", ".");
            help.setDate(exportdate);
		}
		
		if( help.getSummbrkup().equalsIgnoreCase("All") )
		{
		response.setHeader("Content-Disposition", "inline; filename="+exportdate+"_Daily_Performance_Report.xls");
		}
		if( help.getSummbrkup().equalsIgnoreCase("Absent") )
		{
		response.setHeader("Content-Disposition", "inline; filename="+exportdate+"_Continuous_Absent_Report.xls");
		}
		
		//dept
		String ACtualdept="";
	    if(help.getDeptArray()!=null)
	    {	
	    String[] dept = help.getDeptArray();
	    
	    StringBuffer reqdept = new StringBuffer();
		for (int i = 0; i < dept.length; i++) {
			reqdept.append("'"+dept[i]+"'" + ",");
		}
		 ACtualdept= reqdept.substring(0, reqdept.length() - 1).toString();
	    }
		
	    
	    //subdept
	    
	    String ACtualsubdept="";
	    if(help.getSubdeptArray()!=null)
	    {	
	    String[] subdept = help.getSubdeptArray();
	    
	    StringBuffer reqsubdept = new StringBuffer();
		for (int i = 0; i < subdept.length; i++) {
			reqsubdept.append("'"+subdept[i]+"'" + ",");
		}
		ACtualsubdept= reqsubdept.substring(0, reqsubdept.length() - 1).toString();
	    }
	    
	    //reporting
	    
	    String ACtualrepgrp="";
	    if(help.getRepgrpArray()!=null)
	    {	
	    String[] repgrp = help.getRepgrpArray();
	    
	    StringBuffer reqrepgrp = new StringBuffer();
		for (int i = 0; i < repgrp.length; i++) {
			reqrepgrp.append("'"+repgrp[i]+"'" + ",");
		}
		ACtualrepgrp= reqrepgrp.substring(0, reqrepgrp.length() - 1).toString();
	    }

		//emp_off
	
	    String query1="select emp_official_info.pernr,EMP_FULLNAME,emp_official_info.DPTID,DESIGNATION.DSGSTXT,emp_official_info.SDPTID,emp_official_info.Reporting_Grp,"
	    		+ "Report_Daily_wise.In_time,Report_Daily_wise.Out_time,Report_Daily_wise.Early,Report_Daily_wise.Late,Report_Daily_wise.Total,Report_Daily_wise.ot,Report_Daily_wise.Status,Report_Daily_wise.Shift from emp_official_info  ,DESIGNATION,Report_Daily_wise where"
	    		+ "  DESIGNATION.DSGID =emp_official_info.DSGID  and emp_official_info.LOCID = '"+help.getLocationId()+"'  and Active=1  and emp_official_info.PERNR=Report_Daily_wise.Pernr and Report_Daily_wise.date='"+sqlfromdate+"'";

		


		if(!ACtualdept.equalsIgnoreCase(""))
		{
			query1=query1+" and emp_official_info.DPTID in  ("+ACtualdept+") ";
		
		}

		if(!ACtualsubdept.equalsIgnoreCase(""))
		{
			query1=query1+" and emp_official_info.SDPTID in ("+ACtualsubdept+")  ";
		
		}
		
		if(!ACtualrepgrp.equalsIgnoreCase(""))
		{
			query1=query1+" and emp_official_info.Reporting_Grp in("+ACtualrepgrp+") ";
		
		}

		
		query1=query1+"group by emp_official_info.pernr,EMP_FULLNAME,emp_official_info.DPTID,DESIGNATION.DSGSTXT,emp_official_info.SDPTID,emp_official_info.Reporting_Grp,Report_Daily_wise.In_time,Report_Daily_wise.Out_time,Report_Daily_wise.Early,Report_Daily_wise.Late,Report_Daily_wise.ot,Report_Daily_wise.Total,Report_Daily_wise.Status,Report_Daily_wise.Shift order by DPTID,SDPTID,Reporting_Grp";
		
		ArrayList deptlist = new ArrayList();
		ArrayList emplist = new ArrayList();

		ArrayList abslist = new ArrayList();
		ArrayList datelist = new ArrayList();
		
		if( help.getSummbrkup().equalsIgnoreCase("All") )
		{
		
			if(!(ACtualsubdept.equalsIgnoreCase("")))
        	{
	String list="select distinct DEPARTMENT.DPTID,SUBDEPARTMENT.SDPTID,Grp_ID,DPTSTXT,SDPTID_STXT,Grp_STXT  from DEPARTMENT,SUBDEPARTMENT,"
			+ "REPORTING_GROUP,emp_official_info where LOCID='"+help.getLocationId()+"' and emp_official_info.DPTID=DEPARTMENT.DPTID and emp_official_info.SDPTID=SUBDEPARTMENT.SDPTID "
			+ "and emp_official_info.Reporting_Grp=REPORTING_GROUP.Grp_ID  and DEPARTMENT.dptid in ("+ACtualdept+") and SUBDEPARTMENT.SDPTID in ("+ACtualsubdept+") and REPORTING_GROUP.Grp_ID in("+ACtualrepgrp+") order by DPTID,SDPTID,Grp_ID";
		ResultSet rs1 = ad.selectQuery(list);
	try {
		while(rs1.next())
		{
			HRApprovalForm help1 = new HRApprovalForm();
			help1.setDepartment(rs1.getString("DPTID"));
			help1.setSubdepartment(rs1.getString("SDPTID"));
			help1.setRepgrp(rs1.getString("Grp_ID"));
			help1.setDeptFrom(rs1.getString("DPTSTXT"));
			help1.setDeptTo(rs1.getString("SDPTID_STXT"));
			help1.setDesgTo(rs1.getString("Grp_STXT"));
			deptlist.add(help1);
		}
		
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}try {
		rs1.close();
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	request.setAttribute("deptlist", deptlist);
	
        	}
        	else
        	{

        		String list="select distinct DEPARTMENT.DPTID,DPTSTXT  from DEPARTMENT ,emp_official_info where LOCID='"+help.getLocationId()+"' and emp_official_info.DPTID=DEPARTMENT.DPTID  "
        				+ "  and DEPARTMENT.dptid in ("+ACtualdept+")  order by DPTSTXT";
        		
        		
        		
        		ResultSet rs1 = ad.selectQuery(list);
        		try {
        			while(rs1.next())
        			{
        				HRApprovalForm help1 = new HRApprovalForm();
        				help1.setDepartment(rs1.getString("DPTID"));	    
        				help1.setDeptFrom(rs1.getString("DPTSTXT"));
        
        				deptlist.add(help1);
        			}
        		} catch (SQLException e) {
        			// TODO Auto-generated catch block
        			e.printStackTrace();
        		}
        		try {
					rs1.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
        		request.setAttribute("onlydeptlist", deptlist);
        	}
			
			
			
			///has map sub_dep,dep,reporting
			 HashMap depMap=new HashMap();
			    String cal="select * from Department where dptid in ("+ACtualdept+")";
				ResultSet rsdeo=ad.selectQuery(cal);
				try {
					
					while(rsdeo.next())
					{
						
						depMap.put(rsdeo.getString("dptid"), rsdeo.getString("dptstxt"));
					}
					
				} catch (SQLException e) {
					
					e.printStackTrace();
				}
				
				HashMap subdepMap=new HashMap();
			   	if(!ACtualsubdept.equalsIgnoreCase(""))
				{
				 
					 String cal2="select * from SUBDEPARTMENT where SDPTID in ("+ACtualsubdept+")";
						ResultSet rsdeo1=ad.selectQuery(cal2);
						try {
							
							while(rsdeo1.next())
							{
								
								subdepMap.put(rsdeo1.getString("SDPTID"), rsdeo1.getString("SDPTID_STXT"));
							}
							
						} catch (SQLException e) {
							
							e.printStackTrace();
						}
				}
				
				HashMap repMap=new HashMap();
				if(!ACtualrepgrp.equalsIgnoreCase(""))
				{
				 
				    String cal1="select * from REPORTING_GROUP where Grp_ID in ("+ACtualrepgrp+")";
					ResultSet rsdrep=ad.selectQuery(cal1);
					try {
						
						while(rsdrep.next())
						{
							
							repMap.put(rsdrep.getString("Grp_ID"), rsdrep.getString("Grp_STXT"));
						}
						
					} catch (SQLException e) {
						
						e.printStackTrace();
					}
				}
		
		ResultSet rs = ad.selectQuery(query1);
		try {
			while(rs.next())
			{
				HRApprovalForm help2 = new HRApprovalForm();
				help2.setEmployeeno(rs.getString("Pernr") );
				help2.setEmployeeName(rs.getString("EMP_FULLNAME"));
				help2.setDepartment(rs.getString("DPTID"));
				help2.setDeptTo((String)depMap.get(rs.getString("DPTID")));
				help2.setSubdepartment(rs.getString("SDPTID"));
				help2.setRepgrp(rs.getString("reporting_grp"));
				if(!ACtualrepgrp.equalsIgnoreCase(""))
				{
				help2.setRep_et((String)repMap.get(rs.getString("Reporting_Grp")));
				}
				if(!ACtualsubdept.equalsIgnoreCase(""))
				{
				help2.setSubdeptTO((String)subdepMap.get(rs.getString("SDPTID")));
				}
			    help2.setDesignation(rs.getString("DSGSTXT"));
			    
				String qual="select top 1 Priority,Qualification.Qualification,specialization from emp_education_details,QUALIFICATION where user_id='"+rs.getString("PERNR")+"' and emp_education_details.qualification=QUALIFICATION.Id  order by Priority desc";
				ResultSet qal=ad.selectQuery(qual);
				if(qal.next())
				{
					help2.setQualification(qal.getString("Qualification"));
					help2.setSpecialization(qal.getString("specialization"));
				}
				qal.close();
			    help2.setStartTime(rs.getString("In_time").substring(0, 8));
			    help2.setEndTime(rs.getString("Out_time").substring(0, 8));
			    
			    if(rs.getString("Early")!=null)
			    help2.setEarly(rs.getString("Early"));
			    else			    
			    help2.setEarly("00:00:00");	
			    
			    if(rs.getString("late")!=null)
			    help2.setLate(rs.getString("late"));
			    else
			    help2.setLate("00:00:00");	
			    
			    if(rs.getString("total")!=null)
			    help2.setTotal(rs.getString("total"));
			    else
				help2.setTotal("00:00:00");	
			    
			    if(rs.getString("ot")!=null)
					   help2.setOt(rs.getString("ot"));
					    else
						help2.setOt("00:00:00");
			    
			    help2.setStatus(rs.getString("Status"));
			    help2.setShift(rs.getString("Shift"));
				emplist.add(help2);

			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs.close();
		} catch (SQLException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}
		query1="";
		request.setAttribute("emplist", emplist);
		
		//summary
		String summ="";
		ArrayList leave = new ArrayList();
		ArrayList onduty = new ArrayList();
		ArrayList lop = new ArrayList();
		ArrayList absence = new ArrayList();
		
		int day = Integer.parseInt(sqlfromdate.substring(8));
		
		//leaves
		String query ="select count(*) as cou from EMP_IN_OUT_Status , "
				+ "emp_official_info ,leave_details,lv_type_m  where year= year('"+sqlfromdate+"') and month = month('"+sqlfromdate+"')"
				+ " and (left(day"+day+",2) like '%CL%' or left(day"+day+",2) like '%SL%' or left(day"+day+",2) like '%EL%' or left(day"+day+",2) like '%ML%' or left(day"+day+",2) like '%CO%')  "
				+ " and   emp_official_info.PERNR=EMP_IN_OUT_Status.PERNR  "
				+ "   "
				+ "and Active='1'   and leave_details.user_id=emp_official_info.PERNR  and '"+sqlfromdate+"' "
				+ "between start_date and end_date AND lv_type_m.lv_typeid=leave_details.leave_type and leave_details.Approvel_Status='Approved'" ;


		if(help.getLocationId()!=null)
		{	

		if(!help.getLocationId().equalsIgnoreCase(""))
		{
			query =query+ " and emp_official_info.LOCID = '"+help.getLocationId()+"' ";
		}

		}

		if(!ACtualdept.equalsIgnoreCase(""))
		{
			query=query+" and emp_official_info.DPTID in  ("+ACtualdept+") ";
		
		}

		if(!ACtualsubdept.equalsIgnoreCase(""))
		{
			query=query+" and emp_official_info.SDPTID in ("+ACtualsubdept+")  ";
		
		}
		
		if(!ACtualrepgrp.equalsIgnoreCase(""))
		{
			query=query+" and emp_official_info.Reporting_Grp in("+ACtualrepgrp+") ";
		
		}
		
		
		ResultSet rs4 = ad.selectQuery(query);
		try {
			if(rs4.next())
			{
				help.setLeavesize(rs4.getInt(1));
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		try {
			rs4.close();
		} catch (SQLException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}

		//lOP
		String querylop ="select count(*) as cou from EMP_IN_OUT_Status , "
				+ "emp_official_info ,leave_details,lv_type_m  where year= year('"+sqlfromdate+"') and month = month('"+sqlfromdate+"')"
				+ " and left(day"+day+",2) like '%NL%'  "
				+ " and   emp_official_info.PERNR=EMP_IN_OUT_Status.PERNR   "
				+ "   "
				+ "and Active='1'   and leave_details.user_id=emp_official_info.PERNR  and '"+sqlfromdate+"' "
				+ "between start_date and end_date AND lv_type_m.lv_typeid=leave_details.leave_type and leave_details.Approvel_Status='Approved'" ;


		if(help.getLocationId()!=null)
		{	

		if(!help.getLocationId().equalsIgnoreCase(""))
		{
			querylop =querylop+ " and emp_official_info.LOCID = '"+help.getLocationId()+"' ";
		}

		}

		if(!ACtualdept.equalsIgnoreCase(""))
		{
			querylop=querylop+" and emp_official_info.DPTID in  ("+ACtualdept+") ";
		
		}

		if(!ACtualsubdept.equalsIgnoreCase(""))
		{
			querylop=querylop+" and emp_official_info.SDPTID in ("+ACtualsubdept+")  ";
		
		}
		
		if(!ACtualrepgrp.equalsIgnoreCase(""))
		{
			querylop=querylop+" and emp_official_info.Reporting_Grp in("+ACtualrepgrp+") ";
		
		}
		
		ResultSet rs5w = ad.selectQuery(querylop);
		try {
			if(rs5w.next())
			{
				help.setLopsize(rs5w.getInt(1));
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}try {
			rs5w.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		///onduty
		String query11 ="select count(*) as cou from EMP_IN_OUT_Status , "
				+ "emp_official_info   ,OnDuty_details  where year= year('"+sqlfromdate+"') and month = month('"+sqlfromdate+"')"
				+ " and left(day"+day+",2) like '%OD%'  "
				+ " and   emp_official_info.PERNR=EMP_IN_OUT_Status.PERNR  "
				+ " "
				+ "and Active='1'   and OnDuty_details.user_id=emp_official_info.PERNR  and '"+sqlfromdate+"' "
				+ "between start_date and end_date and OnDuty_details.Approver_Status='Approved'";


		if(help.getLocationId()!=null)
		{	

		if(!help.getLocationId().equalsIgnoreCase(""))
		{
			query11 =query11+ " and emp_official_info.LOCID = '"+help.getLocationId()+"' ";
		}

		}

		if(!ACtualdept.equalsIgnoreCase(""))
		{
			query11=query11+" and emp_official_info.DPTID in  ("+ACtualdept+") ";
		
		}

		if(!ACtualsubdept.equalsIgnoreCase(""))
		{
			query11=query11+" and emp_official_info.SDPTID in ("+ACtualsubdept+")  ";
		
		}
		
		if(!ACtualrepgrp.equalsIgnoreCase(""))
		{
			query11=query11+" and emp_official_info.Reporting_Grp in("+ACtualrepgrp+") ";
		
		}
		

		ResultSet r5w = ad.selectQuery(query11);
		try {
			if(r5w.next())
			{
				help.setOdsize(r5w.getInt(1));
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}


		try {
			r5w.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}




		///Absenteees 

		String query2="select count(*) as cou from EMP_IN_OUT_Status , emp_official_info   " 
					+ "  where year= year('"+sqlfromdate+"') and month = month('"+sqlfromdate+"') and day"+day+"='AAAA' and "
					+ "  emp_official_info.PERNR=EMP_IN_OUT_Status.PERNR   "
					+ "  and Swipe_Count !=0 and Active='1'  ";
		if(help.getLocationId()!=null)
		{	

		if(!help.getLocationId().equalsIgnoreCase(""))
		{
			query2 =query2+ " and emp_official_info.LocID = '"+help.getLocationId()+"' ";
		}

		}

		if(!ACtualdept.equalsIgnoreCase(""))
		{
			query2=query2+" and emp_official_info.DPTID in  ("+ACtualdept+") ";
		
		}

		if(!ACtualsubdept.equalsIgnoreCase(""))
		{
			query2=query2+" and emp_official_info.SDPTID in ("+ACtualsubdept+")  ";
		
		}
		
		if(!ACtualrepgrp.equalsIgnoreCase(""))
		{
			query2=query2+" and emp_official_info.Reporting_Grp in("+ACtualrepgrp+") ";
		
		}
		
		

		ResultSet r5wt = ad.selectQuery(query2);
		try {
			if(r5wt.next())
			{
				help.setAbssize(r5wt.getInt(1));
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}try {
			r5wt.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		String present = "select count(*) as cou from EMP_IN_OUT_Status , emp_official_info   " 
				+ "  where year= year('"+sqlfromdate+"') and month = month('"+sqlfromdate+"') and day"+day+" like '%PP%'  and "
				+ "  emp_official_info.PERNR=EMP_IN_OUT_Status.PERNR   "
				+ "  and Swipe_Count !=0 and Active='1'  ";
		if(help.getLocationId()!=null)
		{	

		if(!help.getLocationId().equalsIgnoreCase(""))
		{
			present =present+ " and emp_official_info.LocID = '"+help.getLocationId()+"' ";
		}

		}

		if(!ACtualdept.equalsIgnoreCase(""))
		{
			present=present+" and emp_official_info.DPTID in  ("+ACtualdept+") ";
		
		}

		if(!ACtualsubdept.equalsIgnoreCase(""))
		{
			present=present+" and emp_official_info.SDPTID in ("+ACtualsubdept+")  ";
		
		}
		
		if(!ACtualrepgrp.equalsIgnoreCase(""))
		{
			present=present+" and emp_official_info.Reporting_Grp in("+ACtualrepgrp+") ";
		
		}
		ResultSet rsp4 = ad.selectQuery(present);
		try {
			if(rsp4.next())
			{
				help.setPresize(rsp4.getInt(1));
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

try {
	rsp4.close();
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}
		
		}
		
		  if( help.getSummbrkup().equalsIgnoreCase("Absent"))
			{
	        		
	        	String list="select distinct DEPARTMENT.DPTID,DPTSTXT  from DEPARTMENT,emp_official_info where LOCID='"+help.getLocationId()+"' and emp_official_info.DPTID=DEPARTMENT.DPTID  "
	    				+ " and DEPARTMENT.dptid in ("+ACtualdept+") order by DPTID";
	    		
	    		
	    		
	    		ResultSet rs1 = ad.selectQuery(list);
	    		try {
	    			while(rs1.next())
	    			{
	    				HRApprovalForm help1 = new HRApprovalForm();
	    				help1.setDepartment(rs1.getString("DPTID"));	    				    			
	    				help1.setDeptFrom(rs1.getString("DPTSTXT"));
	    				
	    				deptlist.add(help1);
	    			}
	    		} catch (SQLException e) {
	    			// TODO Auto-generated catch block
	    			e.printStackTrace();
	    		}try {
					rs1.close();
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
	    		
	    		request.setAttribute("deptlist", deptlist);
	    		
	    		
	    		String from[]=help.getFromDate().split("/");
	    		String fromday=from[0];
	    		String frommon=from[1];
	    		String fromyear=from[2];
	    		String sqlfrom=from[2]+"-"+from[1]+"-"+from[0];
	    		
	    		String to[]=help.getToDate().split("/");
	    		String today=to[0];
	    		String tomon=to[1];
	    		String toyear=to[2];
	    		String sqlto=to[2]+"-"+to[1]+"-"+to[0];
	    		
	    		String countdays="SELECT day(thedate) as day FROM dbo.ExplodeDates('"+sqlfrom+"','"+sqlto+"') as thedate";
	    	    ResultSet rscount=ad.selectQuery(countdays);
	    	    try {
	    			while(rscount.next())
	    			{
	                   
	                    HRApprovalForm date=new  HRApprovalForm();
	                    date.setDay(rscount.getString("day"));
	                    date.setDate("day"+rscount.getString("day"));
	                    datelist.add(date);
	    			}
	    			
	    			request.setAttribute("datelist", datelist);
	    	    
	    	    }
	    			catch (SQLException e) {
		    			// TODO Auto-generated catch block
		    			e.printStackTrace();
		    		}
	    	    try {
					rscount.close();
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
	    		
	    		String abs="";
	    		if(frommon.equalsIgnoreCase(tomon))
	    		
	    		{
	    
	    		 
	    		 if(!(ACtualsubdept.equalsIgnoreCase("") && ACtualrepgrp.equalsIgnoreCase("")))
		        	{
	    		 abs=" SELECT * from( select "+currentabsentdays(fromyear,frommon, Integer.parseInt(fromday), Integer.parseInt(today))+" as day,EMP_IN_OUT_Status.*,emp_official_info.EMP_FULLNAME,"
	    		 		+ "emp_official_info.DPTID  from EMP_IN_OUT_Status,emp_official_info where  month ='"+frommon+"' and year ='"+fromyear+"' "
			+ "and EMP_IN_OUT_Status.Pernr=emp_official_info.PERNR and emp_official_info.PERNR in (select emp_official_info.pernr from "
			+ "emp_official_info  where   emp_official_info.LOCID = '"+help.getLocationId()+"'  and Active=1  and emp_official_info.DPTID in "
					+ " ("+ACtualdept+")  and emp_official_info.SDPTID in ("+ACtualsubdept+")   and emp_official_info.Reporting_Grp in("+ACtualrepgrp+")) )t where day not like '%PP%'  and day not like '%EL%' and day not like '%CL%'and day not like '%SL%' and day not like '%NL%' and day not like '%ML%' and day not like '%CO% '  and day not like '%OD%'";
		        	}
	    			else
	    			{
	    				abs=" SELECT * from( select "+currentabsentdays(fromyear,frommon, Integer.parseInt(fromday), Integer.parseInt(today))+" as day,EMP_IN_OUT_Status.*,emp_official_info.EMP_FULLNAME,"
	    	    		 		+ "emp_official_info.DPTID  from EMP_IN_OUT_Status,emp_official_info where  month ='"+frommon+"' and year ='"+fromyear+"' "
	    			+ "and EMP_IN_OUT_Status.Pernr=emp_official_info.PERNR and emp_official_info.PERNR in (select emp_official_info.pernr from "
	    			+ "emp_official_info  where   emp_official_info.LOCID = '"+help.getLocationId()+"'  and Active=1  and emp_official_info.DPTID in "
	    					+ " ("+ACtualdept+") ) )t where day not like '%PP%'  and day not like '%EL%' and day not like '%CL%'and day not like '%SL%' and day not like '%NL%' and day not like '%ML%' and day not like '%CO% '  and day not like '%OD%'";
	    		
	    			}
	    		}
	    		else
	    		{
	    			if(!(ACtualsubdept.equalsIgnoreCase("") && ACtualrepgrp.equalsIgnoreCase("")))
		        	{
	    			abs="select (t.day+l.day) as sumday,emp_official_info.PERNR,emp_official_info.EMP_FULLNAME,emp_official_info.DPTID,t.*,l.* from "
	    					+ "( select "+prevabsentdays(fromyear, frommon,Integer.parseInt(fromday))+" as day, Pernr,day21,day22,day23,day24,day25,day26,day27,day28,day29,day30,day31 "
	    					+ " from EMP_IN_OUT_Status where   month ='"+frommon+"' and year ='"+fromyear+"')t,	"
	    					+ "( select "+currentmonthdays(toyear, tomon, Integer.parseInt(today))+" as day,"
	    					+ "pernr,day1,day2,day3,day4,day5,day6,day7,day8,day9,day10,day11,day12,day13,day14,day15,day16,day17,day18,day19,day20  from"
	    					+ " EMP_IN_OUT_Status where month ='"+tomon+"' and year ='"+toyear+"')l,emp_official_info where emp_official_info.LOCID='"+help.getLocationId()+"' and Active=1 "
	    					+ "and emp_official_info.DPTID in("+ACtualdept+") and emp_official_info.SDPTID in ("+ACtualsubdept+")   and emp_official_info.Reporting_Grp in("+ACtualrepgrp+") and "
	    					+ "emp_official_info.PERNR=t.Pernr and t.Pernr=l.Pernr and (t.day+l.day) not like '%PP%'  and (t.day+l.day) not like '%EL%' and "
	    					+ "(t.day+l.day) not like '%CL%'and (t.day+l.day) not like '%SL%' and (t.day+l.day) not like '%NL%' and (t.day+l.day) not like '%ML%' and "
	    					+ "(t.day+l.day) not like '%CO% '  and (t.day+l.day) not like '%OD%' ";
		        	}
	    			else
	    			{
	    				abs="select (t.day+l.day) as sumday,emp_official_info.PERNR,emp_official_info.EMP_FULLNAME,emp_official_info.DPTID,t.*,l.* from "
		    					+ "( select "+prevabsentdays(fromyear, frommon,Integer.parseInt(fromday))+" as day, Pernr,day21,day22,day23,day24,day25,day26,day27,day28,day29,day30,day31 "
		    					+ " from EMP_IN_OUT_Status where   month ='"+frommon+"' and year ='"+fromyear+"')t,	"
		    					+ "( select "+currentmonthdays(toyear, tomon, Integer.parseInt(today))+" as day,"
		    					+ "pernr,day1,day2,day3,day4,day5,day6,day7,day8,day9,day10,day11,day12,day13,day14,day15,day16,day17,day18,day19,day20  from"
		    					+ " EMP_IN_OUT_Status where month ='"+tomon+"' and year ='"+toyear+"')l,emp_official_info where emp_official_info.LOCID='"+help.getLocationId()+"' and Active=1 "
		    					+ "and emp_official_info.DPTID in("+ACtualdept+")   and emp_official_info.PERNR=t.Pernr and t.Pernr=l.Pernr and (t.day+l.day) not like '%PP%'  and (t.day+l.day) not like '%EL%' and "
		    					+ "(t.day+l.day) not like '%CL%'and (t.day+l.day) not like '%SL%' and (t.day+l.day) not like '%NL%' and (t.day+l.day) not like '%ML%' and "
		    					+ "(t.day+l.day) not like '%CO% '  and (t.day+l.day) not like '%OD%' ";
	    			}
	    		}
	    		
	    		ResultSet rs = ad.selectQuery(abs);
	    		try {
	    			while(rs.next())
	    			{
	    				HRApprovalForm help2 = new HRApprovalForm();
	    				help2.setEmployeeno(rs.getString("Pernr") );
	    				help2.setEmployeeName(rs.getString("EMP_FULLNAME"));
	    				help2.setDepartment(rs.getString("DPTID"));
	    		
	    				help2.setDay1(rs.getString("day1"));								
	    				help2.setDay2(rs.getString("day2"));
	    				help2.setDay3(rs.getString("day3"));
	    				help2.setDay4(rs.getString("day4"));
	    				help2.setDay5(rs.getString("day5"));
	    				help2.setDay6(rs.getString("day6"));
	    				help2.setDay7(rs.getString("day7"));
	    				help2.setDay8(rs.getString("day8"));
	    				help2.setDay9(rs.getString("day9"));
	    				help2.setDay10(rs.getString("day10"));
	    				help2.setDay11(rs.getString("day11"));
	    				help2.setDay12(rs.getString("day12"));
	    				help2.setDay13(rs.getString("day13"));
	    				help2.setDay14(rs.getString("day14"));
	    				help2.setDay15(rs.getString("day15"));
	    				help2.setDay16(rs.getString("day16"));
	    				help2.setDay17(rs.getString("day17"));
	    				help2.setDay18(rs.getString("day18"));
	    				help2.setDay19(rs.getString("day19"));
	    				help2.setDay20(rs.getString("day20"));
	    				help2.setDay21(rs.getString("day21"));
	    				help2.setDay22(rs.getString("day22"));
	    				help2.setDay23(rs.getString("day23"));
	    				help2.setDay24(rs.getString("day24"));
	    				help2.setDay25(rs.getString("day25"));
	    				help2.setDay26(rs.getString("day26"));
	    				help2.setDay27(rs.getString("day27"));
	    				help2.setDay28(rs.getString("day28"));
	    				help2.setDay29(rs.getString("day29"));
	    				help2.setDay30(rs.getString("day30"));
	    				help2.setDay31(rs.getString("day31"));
	    			    
	    			    
	    			    
	    			    abslist.add(help2);

	    			}
	    		} catch (SQLException e) {
	    			// TODO Auto-generated catch block
	    			e.printStackTrace();
	    		}
               try {
				rs.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	    		query1="";
	    		request.setAttribute("abslist", abslist);
	        	
	        	
			}
		
		 return mapping.findForward("exportdailyPerformancereport");
		
	}
	
	
	public ActionForward exportcasualabsenteeismreport(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
		HRApprovalForm help = (HRApprovalForm) form;
		String sqlfromdate="";
		String sqltodate="";
		String exportdate="";

		if(!help.getFromDate().equalsIgnoreCase(""))
		{
			String from[]=help.getFromDate().split("/");
		    sqlfromdate=from[2]+"-"+from[1]+"-"+from[0]; 
		    exportdate=help.getFromDate().replace("/", ".");
            help.setDate(exportdate);
		}
		  /*String st1[]=help.getFromDate()("todate").split("/");
		   sqltodate=st1[2]+"-"+st1[0]+"-"+st1[1];
		   
		   String   sqltodate2=st1[1]+"/"+st1[0]+"/"+st1[2];	  
		   help.setToDate(sqltodate2);*/
		
		/*if( help.getSummbrkup().equalsIgnoreCase("All") )
		{
		response.setHeader("Content-Disposition", "inline; filename="+exportdate+"_Daily_Performance_Report.xls");
		}*/
		help.setSummbrkup("Absent");
		if( help.getSummbrkup().equalsIgnoreCase("Absent") )
		{
		response.setHeader("Content-Disposition", "inline; filename="+exportdate+"_Continuous_Absent_Report.xls");
		}
		
		//dept
		String ACtualdept="";
	    if(help.getDeptArray()!=null)
	    {	
	    String[] dept = help.getDeptArray();
	    
	    StringBuffer reqdept = new StringBuffer();
		for (int i = 0; i < dept.length; i++) {
			reqdept.append("'"+dept[i]+"'" + ",");
		}
		 ACtualdept= reqdept.substring(0, reqdept.length() - 1).toString();
	    }
		
	    
	    //subdept
	    
	    String ACtualsubdept="";
	    if(help.getSubdeptArray()!=null)
	    {	
	    String[] subdept = help.getSubdeptArray();
	    
	    StringBuffer reqsubdept = new StringBuffer();
		for (int i = 0; i < subdept.length; i++) {
			reqsubdept.append("'"+subdept[i]+"'" + ",");
		}
		ACtualsubdept= reqsubdept.substring(0, reqsubdept.length() - 1).toString();
	    }
	    
	    //reporting
	    
	    String ACtualrepgrp="";
	    if(help.getRepgrpArray()!=null)
	    {	
	    String[] repgrp = help.getRepgrpArray();
	    
	    StringBuffer reqrepgrp = new StringBuffer();
		for (int i = 0; i < repgrp.length; i++) {
			reqrepgrp.append("'"+repgrp[i]+"'" + ",");
		}
		ACtualrepgrp= reqrepgrp.substring(0, reqrepgrp.length() - 1).toString();
	    }

		//emp_off
	
	    String query1="select emp_official_info.pernr,EMP_FULLNAME,emp_official_info.DPTID,DESIGNATION.DSGSTXT,emp_official_info.SDPTID,emp_official_info.Reporting_Grp,"
	    		+ "Report_Daily_wise.In_time,Report_Daily_wise.Out_time,Report_Daily_wise.Early,Report_Daily_wise.Late,Report_Daily_wise.Total,Report_Daily_wise.ot,Report_Daily_wise.Status,Report_Daily_wise.Shift from emp_official_info  ,DESIGNATION,Report_Daily_wise where"
	    		+ "  DESIGNATION.DSGID =emp_official_info.DSGID  and emp_official_info.LOCID = '"+help.getLocationId()+"'  and Active=1  and emp_official_info.PERNR=Report_Daily_wise.Pernr and Report_Daily_wise.date='"+sqlfromdate+"'";

		


		if(!ACtualdept.equalsIgnoreCase(""))
		{
			query1=query1+" and emp_official_info.DPTID in  ("+ACtualdept+") ";
		
		}

		if(!ACtualsubdept.equalsIgnoreCase(""))
		{
			query1=query1+" and emp_official_info.SDPTID in ("+ACtualsubdept+")  ";
		
		}
		
		if(!ACtualrepgrp.equalsIgnoreCase(""))
		{
			query1=query1+" and emp_official_info.Reporting_Grp in("+ACtualrepgrp+") ";
		
		}

		
		query1=query1+"group by emp_official_info.pernr,EMP_FULLNAME,emp_official_info.DPTID,DESIGNATION.DSGSTXT,emp_official_info.SDPTID,emp_official_info.Reporting_Grp,Report_Daily_wise.In_time,Report_Daily_wise.Out_time,Report_Daily_wise.Early,Report_Daily_wise.Late,Report_Daily_wise.ot,Report_Daily_wise.Total,Report_Daily_wise.Status,Report_Daily_wise.Shift order by DPTID,SDPTID,Reporting_Grp";
		
		ArrayList deptlist = new ArrayList();
		ArrayList emplist = new ArrayList();

		ArrayList abslist = new ArrayList();
		ArrayList datelist = new ArrayList();
		
		/*if( help.getSummbrkup().equalsIgnoreCase("All") )
		{
		
			if(!(ACtualsubdept.equalsIgnoreCase("")))
        	{
	String list="select distinct DEPARTMENT.DPTID,SUBDEPARTMENT.SDPTID,Grp_ID,DPTSTXT,SDPTID_STXT,Grp_STXT  from DEPARTMENT,SUBDEPARTMENT,"
			+ "REPORTING_GROUP,emp_official_info where LOCID='"+help.getLocationId()+"' and emp_official_info.DPTID=DEPARTMENT.DPTID and emp_official_info.SDPTID=SUBDEPARTMENT.SDPTID "
			+ "and emp_official_info.Reporting_Grp=REPORTING_GROUP.Grp_ID  and DEPARTMENT.dptid in ("+ACtualdept+") and SUBDEPARTMENT.SDPTID in ("+ACtualsubdept+") and REPORTING_GROUP.Grp_ID in("+ACtualrepgrp+") order by DPTID,SDPTID,Grp_ID";
		ResultSet rs1 = ad.selectQuery(list);
	try {
		while(rs1.next())
		{
			HRApprovalForm help1 = new HRApprovalForm();
			help1.setDepartment(rs1.getString("DPTID"));
			help1.setSubdepartment(rs1.getString("SDPTID"));
			help1.setRepgrp(rs1.getString("Grp_ID"));
			help1.setDeptFrom(rs1.getString("DPTSTXT"));
			help1.setDeptTo(rs1.getString("SDPTID_STXT"));
			help1.setDesgTo(rs1.getString("Grp_STXT"));
			deptlist.add(help1);
		}
		
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}try {
		rs1.close();
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	request.setAttribute("deptlist", deptlist);
	
        	}
        	else
        	{

        		String list="select distinct DEPARTMENT.DPTID,DPTSTXT  from DEPARTMENT ,emp_official_info where LOCID='"+help.getLocationId()+"' and emp_official_info.DPTID=DEPARTMENT.DPTID  "
        				+ "  and DEPARTMENT.dptid in ("+ACtualdept+")  order by DPTID";
        		
        		
        		
        		ResultSet rs1 = ad.selectQuery(list);
        		try {
        			while(rs1.next())
        			{
        				HRApprovalForm help1 = new HRApprovalForm();
        				help1.setDepartment(rs1.getString("DPTID"));	    
        				help1.setDeptFrom(rs1.getString("DPTSTXT"));
        
        				deptlist.add(help1);
        			}
        		} catch (SQLException e) {
        			// TODO Auto-generated catch block
        			e.printStackTrace();
        		}
        		try {
					rs1.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
        		request.setAttribute("onlydeptlist", deptlist);
        	}
			
			
			
			///has map sub_dep,dep,reporting
			 HashMap depMap=new HashMap();
			    String cal="select * from Department where dptid in ("+ACtualdept+")";
				ResultSet rsdeo=ad.selectQuery(cal);
				try {
					
					while(rsdeo.next())
					{
						
						depMap.put(rsdeo.getString("dptid"), rsdeo.getString("dptstxt"));
					}
					
				} catch (SQLException e) {
					
					e.printStackTrace();
				}
				
				HashMap subdepMap=new HashMap();
			   	if(!ACtualsubdept.equalsIgnoreCase(""))
				{
				 
					 String cal2="select * from SUBDEPARTMENT where SDPTID in ("+ACtualsubdept+")";
						ResultSet rsdeo1=ad.selectQuery(cal2);
						try {
							
							while(rsdeo1.next())
							{
								
								subdepMap.put(rsdeo1.getString("SDPTID"), rsdeo1.getString("SDPTID_STXT"));
							}
							
						} catch (SQLException e) {
							
							e.printStackTrace();
						}
				}
				
				HashMap repMap=new HashMap();
				if(!ACtualrepgrp.equalsIgnoreCase(""))
				{
				 
				    String cal1="select * from REPORTING_GROUP where Grp_ID in ("+ACtualrepgrp+")";
					ResultSet rsdrep=ad.selectQuery(cal1);
					try {
						
						while(rsdrep.next())
						{
							
							repMap.put(rsdrep.getString("Grp_ID"), rsdrep.getString("Grp_STXT"));
						}
						
					} catch (SQLException e) {
						
						e.printStackTrace();
					}
				}
		
		ResultSet rs = ad.selectQuery(query1);
		try {
			while(rs.next())
			{
				HRApprovalForm help2 = new HRApprovalForm();
				help2.setEmployeeno(rs.getString("Pernr") );
				help2.setEmployeeName(rs.getString("EMP_FULLNAME"));
				help2.setDepartment(rs.getString("DPTID"));
				help2.setDeptTo((String)depMap.get(rs.getString("DPTID")));
				help2.setSubdepartment(rs.getString("SDPTID"));
				help2.setRepgrp(rs.getString("reporting_grp"));
				if(!ACtualrepgrp.equalsIgnoreCase(""))
				{
				help2.setRep_et((String)repMap.get(rs.getString("Reporting_Grp")));
				}
				if(!ACtualsubdept.equalsIgnoreCase(""))
				{
				help2.setSubdeptTO((String)subdepMap.get(rs.getString("SDPTID")));
				}
			    help2.setDesignation(rs.getString("DSGSTXT"));
			    
				String qual="select top 1 Priority,Qualification.Qualification,specialization from emp_education_details,QUALIFICATION where user_id='"+rs.getString("PERNR")+"' and emp_education_details.qualification=QUALIFICATION.Id  order by Priority desc";
				ResultSet qal=ad.selectQuery(qual);
				if(qal.next())
				{
					help2.setQualification(qal.getString("Qualification"));
					help2.setSpecialization(qal.getString("specialization"));
				}
				qal.close();
			    help2.setStartTime(rs.getString("In_time").substring(0, 8));
			    help2.setEndTime(rs.getString("Out_time").substring(0, 8));
			    
			    if(rs.getString("Early")!=null)
			    help2.setEarly(rs.getString("Early"));
			    else			    
			    help2.setEarly("00:00:00");	
			    
			    if(rs.getString("late")!=null)
			    help2.setLate(rs.getString("late"));
			    else
			    help2.setLate("00:00:00");	
			    
			    if(rs.getString("total")!=null)
			    help2.setTotal(rs.getString("total"));
			    else
				help2.setTotal("00:00:00");	
			    
			    if(rs.getString("ot")!=null)
					   help2.setOt(rs.getString("ot"));
					    else
						help2.setOt("00:00:00");
			    
			    help2.setStatus(rs.getString("Status"));
			    help2.setShift(rs.getString("Shift"));
				emplist.add(help2);

			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs.close();
		} catch (SQLException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}
		query1="";
		request.setAttribute("emplist", emplist);
		
		//summary
		String summ="";
		ArrayList leave = new ArrayList();
		ArrayList onduty = new ArrayList();
		ArrayList lop = new ArrayList();
		ArrayList absence = new ArrayList();
		
		int day = Integer.parseInt(sqlfromdate.substring(8));
		
		//leaves
		String query ="select count(*) as cou from EMP_IN_OUT_Status , "
				+ "emp_official_info ,leave_details,lv_type_m  where year= year('"+sqlfromdate+"') and month = month('"+sqlfromdate+"')"
				+ " and (left(day"+day+",2) like '%CL%' or left(day"+day+",2) like '%SL%' or left(day"+day+",2) like '%EL%' or left(day"+day+",2) like '%ML%' or left(day"+day+",2) like '%CO%')  "
				+ " and   emp_official_info.PERNR=EMP_IN_OUT_Status.PERNR  "
				+ "   "
				+ "and Active='1'   and leave_details.user_id=emp_official_info.PERNR  and '"+sqlfromdate+"' "
				+ "between start_date and end_date AND lv_type_m.lv_typeid=leave_details.leave_type and leave_details.Approvel_Status='Approved'" ;


		if(help.getLocationId()!=null)
		{	

		if(!help.getLocationId().equalsIgnoreCase(""))
		{
			query =query+ " and emp_official_info.LOCID = '"+help.getLocationId()+"' ";
		}

		}

		if(!ACtualdept.equalsIgnoreCase(""))
		{
			query=query+" and emp_official_info.DPTID in  ("+ACtualdept+") ";
		
		}

		if(!ACtualsubdept.equalsIgnoreCase(""))
		{
			query=query+" and emp_official_info.SDPTID in ("+ACtualsubdept+")  ";
		
		}
		
		if(!ACtualrepgrp.equalsIgnoreCase(""))
		{
			query=query+" and emp_official_info.Reporting_Grp in("+ACtualrepgrp+") ";
		
		}
		
		
		ResultSet rs4 = ad.selectQuery(query);
		try {
			if(rs4.next())
			{
				help.setLeavesize(rs4.getInt(1));
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		try {
			rs4.close();
		} catch (SQLException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}

		//lOP
		String querylop ="select count(*) as cou from EMP_IN_OUT_Status , "
				+ "emp_official_info ,leave_details,lv_type_m  where year= year('"+sqlfromdate+"') and month = month('"+sqlfromdate+"')"
				+ " and left(day"+day+",2) like '%NL%'  "
				+ " and   emp_official_info.PERNR=EMP_IN_OUT_Status.PERNR   "
				+ "   "
				+ "and Active='1'   and leave_details.user_id=emp_official_info.PERNR  and '"+sqlfromdate+"' "
				+ "between start_date and end_date AND lv_type_m.lv_typeid=leave_details.leave_type and leave_details.Approvel_Status='Approved'" ;


		if(help.getLocationId()!=null)
		{	

		if(!help.getLocationId().equalsIgnoreCase(""))
		{
			querylop =querylop+ " and emp_official_info.LOCID = '"+help.getLocationId()+"' ";
		}

		}

		if(!ACtualdept.equalsIgnoreCase(""))
		{
			querylop=querylop+" and emp_official_info.DPTID in  ("+ACtualdept+") ";
		
		}

		if(!ACtualsubdept.equalsIgnoreCase(""))
		{
			querylop=querylop+" and emp_official_info.SDPTID in ("+ACtualsubdept+")  ";
		
		}
		
		if(!ACtualrepgrp.equalsIgnoreCase(""))
		{
			querylop=querylop+" and emp_official_info.Reporting_Grp in("+ACtualrepgrp+") ";
		
		}
		
		ResultSet rs5w = ad.selectQuery(querylop);
		try {
			if(rs5w.next())
			{
				help.setLopsize(rs5w.getInt(1));
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}try {
			rs5w.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		///onduty
		String query11 ="select count(*) as cou from EMP_IN_OUT_Status , "
				+ "emp_official_info   ,OnDuty_details  where year= year('"+sqlfromdate+"') and month = month('"+sqlfromdate+"')"
				+ " and left(day"+day+",2) like '%OD%'  "
				+ " and   emp_official_info.PERNR=EMP_IN_OUT_Status.PERNR  "
				+ " "
				+ "and Active='1'   and OnDuty_details.user_id=emp_official_info.PERNR  and '"+sqlfromdate+"' "
				+ "between start_date and end_date and OnDuty_details.Approver_Status='Approved'";


		if(help.getLocationId()!=null)
		{	

		if(!help.getLocationId().equalsIgnoreCase(""))
		{
			query11 =query11+ " and emp_official_info.LOCID = '"+help.getLocationId()+"' ";
		}

		}

		if(!ACtualdept.equalsIgnoreCase(""))
		{
			query11=query11+" and emp_official_info.DPTID in  ("+ACtualdept+") ";
		
		}

		if(!ACtualsubdept.equalsIgnoreCase(""))
		{
			query11=query11+" and emp_official_info.SDPTID in ("+ACtualsubdept+")  ";
		
		}
		
		if(!ACtualrepgrp.equalsIgnoreCase(""))
		{
			query11=query11+" and emp_official_info.Reporting_Grp in("+ACtualrepgrp+") ";
		
		}
		

		ResultSet r5w = ad.selectQuery(query11);
		try {
			if(r5w.next())
			{
				help.setOdsize(r5w.getInt(1));
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}


		try {
			r5w.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}




		///Absenteees 

		String query2="select count(*) as cou from EMP_IN_OUT_Status , emp_official_info   " 
					+ "  where year= year('"+sqlfromdate+"') and month = month('"+sqlfromdate+"') and day"+day+"='AAAA' and "
					+ "  emp_official_info.PERNR=EMP_IN_OUT_Status.PERNR   "
					+ "  and Swipe_Count !=0 and Active='1'  ";
		if(help.getLocationId()!=null)
		{	

		if(!help.getLocationId().equalsIgnoreCase(""))
		{
			query2 =query2+ " and emp_official_info.LocID = '"+help.getLocationId()+"' ";
		}

		}

		if(!ACtualdept.equalsIgnoreCase(""))
		{
			query2=query2+" and emp_official_info.DPTID in  ("+ACtualdept+") ";
		
		}

		if(!ACtualsubdept.equalsIgnoreCase(""))
		{
			query2=query2+" and emp_official_info.SDPTID in ("+ACtualsubdept+")  ";
		
		}
		
		if(!ACtualrepgrp.equalsIgnoreCase(""))
		{
			query2=query2+" and emp_official_info.Reporting_Grp in("+ACtualrepgrp+") ";
		
		}
		
		

		ResultSet r5wt = ad.selectQuery(query2);
		try {
			if(r5wt.next())
			{
				help.setAbssize(r5wt.getInt(1));
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}try {
			r5wt.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		String present = "select count(*) as cou from EMP_IN_OUT_Status , emp_official_info   " 
				+ "  where year= year('"+sqlfromdate+"') and month = month('"+sqlfromdate+"') and day"+day+" like '%PP%'  and "
				+ "  emp_official_info.PERNR=EMP_IN_OUT_Status.PERNR   "
				+ "  and Swipe_Count !=0 and Active='1'  ";
		if(help.getLocationId()!=null)
		{	

		if(!help.getLocationId().equalsIgnoreCase(""))
		{
			present =present+ " and emp_official_info.LocID = '"+help.getLocationId()+"' ";
		}

		}

		if(!ACtualdept.equalsIgnoreCase(""))
		{
			present=present+" and emp_official_info.DPTID in  ("+ACtualdept+") ";
		
		}

		if(!ACtualsubdept.equalsIgnoreCase(""))
		{
			present=present+" and emp_official_info.SDPTID in ("+ACtualsubdept+")  ";
		
		}
		
		if(!ACtualrepgrp.equalsIgnoreCase(""))
		{
			present=present+" and emp_official_info.Reporting_Grp in("+ACtualrepgrp+") ";
		
		}
		ResultSet rsp4 = ad.selectQuery(present);
		try {
			if(rsp4.next())
			{
				help.setPresize(rsp4.getInt(1));
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

try {
	rsp4.close();
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}
		
		}*/
		
		  if( help.getSummbrkup().equalsIgnoreCase("Absent"))
			{
	        		
	        	String list="select distinct DEPARTMENT.DPTID,DPTSTXT  from DEPARTMENT,emp_official_info where LOCID='"+help.getLocationId()+"' and emp_official_info.DPTID=DEPARTMENT.DPTID  "
	    				+ " and DEPARTMENT.dptid in ("+ACtualdept+") order by DPTID";
	    		
	    		
	    		
	    		ResultSet rs1 = ad.selectQuery(list);
	    		try {
	    			while(rs1.next())
	    			{
	    				HRApprovalForm help1 = new HRApprovalForm();
	    				help1.setDepartment(rs1.getString("DPTID"));	    				    			
	    				help1.setDeptFrom(rs1.getString("DPTSTXT"));
	    				
	    				deptlist.add(help1);
	    			}
	    		} catch (SQLException e) {
	    			// TODO Auto-generated catch block
	    			e.printStackTrace();
	    		}try {
					rs1.close();
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
	    		
	    		request.setAttribute("deptlist", deptlist);
	    		
	    		
	    		String from[]=help.getFromDate().split("/");
	    		String fromday=from[0];
	    		String frommon=from[1];
	    		String fromyear=from[2];
	    		String sqlfrom=from[2]+"-"+from[1]+"-"+from[0];
	    		
	    		String to[]=help.getToDate().split("/");
	    		String today=to[0];
	    		String tomon=to[1];
	    		String toyear=to[2];
	    		String sqlto=to[2]+"-"+to[1]+"-"+to[0];
	    		
	    		String countdays="SELECT day(thedate) as day FROM dbo.ExplodeDates('"+sqlfrom+"','"+sqlto+"') as thedate";
	    	    ResultSet rscount=ad.selectQuery(countdays);
	    	    try {
	    			while(rscount.next())
	    			{
	                   
	                    HRApprovalForm date=new  HRApprovalForm();
	                    date.setDay(rscount.getString("day"));
	                    date.setDate("day"+rscount.getString("day"));
	                    datelist.add(date);
	    			}
	    			
	    			request.setAttribute("datelist", datelist);
	    	    
	    	    }
	    			catch (SQLException e) {
		    			// TODO Auto-generated catch block
		    			e.printStackTrace();
		    		}
	    	    try {
					rscount.close();
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
	    		
	    		String abs="";
	    		if(frommon.equalsIgnoreCase(tomon))
	    		
	    		{
	    
	    		 
	    		 if(!(ACtualsubdept.equalsIgnoreCase("") && ACtualrepgrp.equalsIgnoreCase("")))
		        	{
	    		 abs=" SELECT * from( select "+currentabsentdays(fromyear,frommon, Integer.parseInt(fromday), Integer.parseInt(today))+" as day,EMP_IN_OUT_Status.*,emp_official_info.EMP_FULLNAME,"
	    		 		+ "emp_official_info.DPTID  from EMP_IN_OUT_Status,emp_official_info where  month ='"+frommon+"' and year ='"+fromyear+"' "
			+ "and EMP_IN_OUT_Status.Pernr=emp_official_info.PERNR and emp_official_info.PERNR in (select emp_official_info.pernr from "
			+ "emp_official_info  where   emp_official_info.LOCID = '"+help.getLocationId()+"'  and Active=1  and emp_official_info.DPTID in "
					+ " ("+ACtualdept+")  and emp_official_info.SDPTID in ("+ACtualsubdept+")   and emp_official_info.Reporting_Grp in("+ACtualrepgrp+")) )t where day not like '%PP%'  and day not like '%EL%' and day not like '%CL%'and day not like '%SL%' and day not like '%NL%' and day not like '%ML%' and day not like '%CO% '  and day not like '%OD%'";
		        	}
	    			else
	    			{
	    				abs=" SELECT * from( select "+currentabsentdays(fromyear,frommon, Integer.parseInt(fromday), Integer.parseInt(today))+" as day,EMP_IN_OUT_Status.*,emp_official_info.EMP_FULLNAME,"
	    	    		 		+ "emp_official_info.DPTID  from EMP_IN_OUT_Status,emp_official_info where  month ='"+frommon+"' and year ='"+fromyear+"' "
	    			+ "and EMP_IN_OUT_Status.Pernr=emp_official_info.PERNR and emp_official_info.PERNR in (select emp_official_info.pernr from "
	    			+ "emp_official_info  where   emp_official_info.LOCID = '"+help.getLocationId()+"'  and Active=1  and emp_official_info.DPTID in "
	    					+ " ("+ACtualdept+") ) )t where day not like '%PP%'  and day not like '%EL%' and day not like '%CL%'and day not like '%SL%' and day not like '%NL%' and day not like '%ML%' and day not like '%CO% '  and day not like '%OD%'";
	    		
	    			}
	    		}
	    		else
	    		{
	    			if(!(ACtualsubdept.equalsIgnoreCase("") && ACtualrepgrp.equalsIgnoreCase("")))
		        	{
	    			abs="select (t.day+l.day) as sumday,emp_official_info.PERNR,emp_official_info.EMP_FULLNAME,emp_official_info.DPTID,t.*,l.* from "
	    					+ "( select "+prevabsentdays(fromyear, frommon,Integer.parseInt(fromday))+" as day, Pernr,day21,day22,day23,day24,day25,day26,day27,day28,day29,day30,day31 "
	    					+ " from EMP_IN_OUT_Status where   month ='"+frommon+"' and year ='"+fromyear+"')t,	"
	    					+ "( select "+currentmonthdays(toyear, tomon, Integer.parseInt(today))+" as day,"
	    					+ "pernr,day1,day2,day3,day4,day5,day6,day7,day8,day9,day10,day11,day12,day13,day14,day15,day16,day17,day18,day19,day20  from"
	    					+ " EMP_IN_OUT_Status where month ='"+tomon+"' and year ='"+toyear+"')l,emp_official_info where emp_official_info.LOCID='"+help.getLocationId()+"' and Active=1 "
	    					+ "and emp_official_info.DPTID in("+ACtualdept+") and emp_official_info.SDPTID in ("+ACtualsubdept+")   and emp_official_info.Reporting_Grp in("+ACtualrepgrp+") and "
	    					+ "emp_official_info.PERNR=t.Pernr and t.Pernr=l.Pernr and (t.day+l.day) not like '%PP%'  and (t.day+l.day) not like '%EL%' and "
	    					+ "(t.day+l.day) not like '%CL%'and (t.day+l.day) not like '%SL%' and (t.day+l.day) not like '%NL%' and (t.day+l.day) not like '%ML%' and "
	    					+ "(t.day+l.day) not like '%CO% '  and (t.day+l.day) not like '%OD%' ";
		        	}
	    			else
	    			{
	    				abs="select (t.day+l.day) as sumday,emp_official_info.PERNR,emp_official_info.EMP_FULLNAME,emp_official_info.DPTID,t.*,l.* from "
		    					+ "( select "+prevabsentdays(fromyear, frommon,Integer.parseInt(fromday))+" as day, Pernr,day21,day22,day23,day24,day25,day26,day27,day28,day29,day30,day31 "
		    					+ " from EMP_IN_OUT_Status where   month ='"+frommon+"' and year ='"+fromyear+"')t,	"
		    					+ "( select "+currentmonthdays(toyear, tomon, Integer.parseInt(today))+" as day,"
		    					+ "pernr,day1,day2,day3,day4,day5,day6,day7,day8,day9,day10,day11,day12,day13,day14,day15,day16,day17,day18,day19,day20  from"
		    					+ " EMP_IN_OUT_Status where month ='"+tomon+"' and year ='"+toyear+"')l,emp_official_info where emp_official_info.LOCID='"+help.getLocationId()+"' and Active=1 "
		    					+ "and emp_official_info.DPTID in("+ACtualdept+")   and emp_official_info.PERNR=t.Pernr and t.Pernr=l.Pernr and (t.day+l.day) not like '%PP%'  and (t.day+l.day) not like '%EL%' and "
		    					+ "(t.day+l.day) not like '%CL%'and (t.day+l.day) not like '%SL%' and (t.day+l.day) not like '%NL%' and (t.day+l.day) not like '%ML%' and "
		    					+ "(t.day+l.day) not like '%CO% '  and (t.day+l.day) not like '%OD%' ";
	    			}
	    		}
	    		
	    		ResultSet rs = ad.selectQuery(abs);
	    		try {
	    			while(rs.next())
	    			{
	    				HRApprovalForm help2 = new HRApprovalForm();
	    				help2.setEmployeeno(rs.getString("Pernr") );
	    				help2.setEmployeeName(rs.getString("EMP_FULLNAME"));
	    				help2.setDepartment(rs.getString("DPTID"));
	    		
	    				help2.setDay1(rs.getString("day1"));								
	    				help2.setDay2(rs.getString("day2"));
	    				help2.setDay3(rs.getString("day3"));
	    				help2.setDay4(rs.getString("day4"));
	    				help2.setDay5(rs.getString("day5"));
	    				help2.setDay6(rs.getString("day6"));
	    				help2.setDay7(rs.getString("day7"));
	    				help2.setDay8(rs.getString("day8"));
	    				help2.setDay9(rs.getString("day9"));
	    				help2.setDay10(rs.getString("day10"));
	    				help2.setDay11(rs.getString("day11"));
	    				help2.setDay12(rs.getString("day12"));
	    				help2.setDay13(rs.getString("day13"));
	    				help2.setDay14(rs.getString("day14"));
	    				help2.setDay15(rs.getString("day15"));
	    				help2.setDay16(rs.getString("day16"));
	    				help2.setDay17(rs.getString("day17"));
	    				help2.setDay18(rs.getString("day18"));
	    				help2.setDay19(rs.getString("day19"));
	    				help2.setDay20(rs.getString("day20"));
	    				help2.setDay21(rs.getString("day21"));
	    				help2.setDay22(rs.getString("day22"));
	    				help2.setDay23(rs.getString("day23"));
	    				help2.setDay24(rs.getString("day24"));
	    				help2.setDay25(rs.getString("day25"));
	    				help2.setDay26(rs.getString("day26"));
	    				help2.setDay27(rs.getString("day27"));
	    				help2.setDay28(rs.getString("day28"));
	    				help2.setDay29(rs.getString("day29"));
	    				help2.setDay30(rs.getString("day30"));
	    				help2.setDay31(rs.getString("day31"));
	    			    
	    			    
	    			    
	    			    abslist.add(help2);

	    			}
	    		} catch (SQLException e) {
	    			// TODO Auto-generated catch block
	    			e.printStackTrace();
	    		}
               try {
				rs.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	    		query1="";
	    		request.setAttribute("abslist", abslist);
	        	
	        	
			}
		
		 return mapping.findForward("exportcasualabsenteeismreport");
		
	}
	
	
	public ActionForward exportdailyreportsearch(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
		


		HRApprovalForm help = (HRApprovalForm) form;
		String sqlfromdate="";
		String sqltodate="";
		String exportdate="";

		if(!help.getFromDate().equalsIgnoreCase(""))
		{
			String from[]=help.getFromDate().split("/");
		    sqlfromdate=from[2]+"-"+from[1]+"-"+from[0]; 
		    exportdate=help.getFromDate().replace("/", ".");
            help.setDate(exportdate);
		}
		
		response.setHeader("Content-Disposition", "inline; filename="+exportdate+"_Daily_Report.xls");

	ArrayList leave = new ArrayList();
	ArrayList onduty = new ArrayList();
	ArrayList lop = new ArrayList();
	ArrayList absence = new ArrayList();
	ArrayList absenceint = new ArrayList();
	
	String ACtualpay="";
    if(help.getPayArray()!=null)
    {

	String[] pay = help.getPayArray();
    StringBuffer reqpay = new StringBuffer();
	for (int i = 0; i < pay.length; i++) {
		reqpay.append("'"+pay[i]+"'" + ",");
	}
	ACtualpay = reqpay.substring(0, reqpay.length() - 1).toString();

    }

    //catArray
    String ACtualcat="";
    if(help.getCatArray()!=null)
    {

	String[] cat = help.getCatArray();
    StringBuffer reqcat = new StringBuffer();
	for (int i = 0; i < cat.length; i++) {
		reqcat.append("'"+cat[i]+"'" + ",");
	}
	ACtualcat = reqcat.substring(0, reqcat.length() - 1).toString();

    }
    
    String ACtualloc="";
    if(help.getLocArray()!=null)
    {
    
	String[] loc = help.getLocArray();
    StringBuffer reqloc = new StringBuffer();
	for (int i = 0; i < loc.length; i++) {
		reqloc.append("'"+loc[i]+"'" + ",");
	}
	ACtualloc = reqloc.substring(0, reqloc.length() - 1).toString();
    
    }

	
    int day = Integer.parseInt(sqlfromdate.substring(8));

	
	//leaves
	String query ="select convert(varchar(10),start_date,104) as startdate ,convert(varchar(10),end_date,104) as enddate ,* from EMP_IN_OUT_Status , "
			+ "emp_official_info,Paygroup_Master ,Category ,department ,DESIGNATION,leave_details,lv_type_m  where year= year('"+sqlfromdate+"') and month = month('"+sqlfromdate+"')"
			+ " and (left(day"+day+",2) like '%CL%' or left(day"+day+",2) like '%SL%' or left(day"+day+",2) like '%EL%' or left(day"+day+",2) like '%ML%' or left(day"+day+",2) like '%CO%')  "
			+ " and   emp_official_info.PERNR=EMP_IN_OUT_Status.PERNR and Paygroup_Master.Paygroup = emp_official_info.PAY_GROUP and "
			+ "Category.staffcat = emp_official_info.STAFFCAT and   DEPARTMENT.DPTID=emp_official_info.DPTID and DESIGNATION.dsgid=emp_official_info.dsgid  "
			+ "and Active='1'   and leave_details.user_id=emp_official_info.PERNR  and '"+sqlfromdate+"' "
			+ "between start_date and end_date AND lv_type_m.lv_typeid=leave_details.leave_type and leave_details.Approvel_Status='Approved'" ;

	if(help.getLocationId()!=null)
	{	

	if(!help.getLocationId().equalsIgnoreCase(""))
	{
		query =query+ " and emp_official_info.LOCID = '"+help.getLocationId()+"' ";
	}

	}

	if(!ACtualpay.equalsIgnoreCase(""))
	{
		query=query+" and emp_official_info.PAY_GROUP in  ("+ACtualpay+") ";
	
	}

	if(!ACtualcat.equalsIgnoreCase(""))
	{
		query=query+" and emp_official_info.STAFFCAT in ("+ACtualcat+")  ";
	
	}
	
	if(!ACtualloc.equalsIgnoreCase(""))
	{
		query=query+" and emp_official_info.Work_ID in("+ACtualloc+") ";
	
	}

	if(!help.getRepgrp().equalsIgnoreCase(""))
	{
		query=query+" and emp_official_info.Reporting_Grp ='"+help.getRepgrp()+"' ";
	
	}
	ResultSet rs = ad.selectQuery(query);
	try {
		while(rs.next())
		{
			HRApprovalForm help1 = new HRApprovalForm();
			help1.setEmployeeno(rs.getString("Pernr") );
			help1.setEmployeeName(rs.getString("EMP_FULLNAME"));
			help1.setDepartment(rs.getString("dptstxt"));
			help1.setPaygrp(rs.getString("Short_desc"));
			help1.setFromDate(rs.getString("startdate"));
			help1.setToDate(rs.getString("enddate"));
			help1.setLeavetype(rs.getString("lv_type"));
			help1.setNoOfDays(rs.getString("no_of_days"));
			leave.add(help1);

		}
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}

	//lOP
	String querylop ="select convert(varchar(10),start_date,104) as startdate ,convert(varchar(10),end_date,104) as enddate ,* from EMP_IN_OUT_Status , "
			+ "emp_official_info,Paygroup_Master ,Category ,department ,DESIGNATION,leave_details,lv_type_m  where year= year('"+sqlfromdate+"') and month = month('"+sqlfromdate+"')"
			+ " and left(day"+day+",2) like '%NL%'  "
			+ " and   emp_official_info.PERNR=EMP_IN_OUT_Status.PERNR and Paygroup_Master.Paygroup = emp_official_info.PAY_GROUP and "
			+ "Category.staffcat = emp_official_info.STAFFCAT and   DEPARTMENT.DPTID=emp_official_info.DPTID and DESIGNATION.dsgid=emp_official_info.dsgid  "
			+ "and Active='1'   and leave_details.user_id=emp_official_info.PERNR  and '"+sqlfromdate+"' "
			+ "between start_date and end_date AND lv_type_m.lv_typeid=leave_details.leave_type and leave_details.Approvel_Status='Approved'" ;


	if(help.getLocationId()!=null)
	{	

	if(!help.getLocationId().equalsIgnoreCase(""))
	{
		querylop =querylop+ " and emp_official_info.LOCID = '"+help.getLocationId()+"' ";
	}

	}

	if(!ACtualpay.equalsIgnoreCase(""))
	{
		querylop=querylop+" and emp_official_info.PAY_GROUP in  ("+ACtualpay+") ";
	
	}

	if(!ACtualcat.equalsIgnoreCase(""))
	{
		querylop=querylop+" and emp_official_info.STAFFCAT in ("+ACtualcat+")  ";
	
	}

	if(!ACtualloc.equalsIgnoreCase(""))
	{
		querylop=querylop+" and emp_official_info.Work_ID in("+ACtualloc+") ";
	
	}
	if(!help.getRepgrp().equalsIgnoreCase(""))
	{
		querylop=querylop+" and emp_official_info.Reporting_Grp ='"+help.getRepgrp()+"' ";
	
	}
	ResultSet rslop = ad.selectQuery(querylop);
	try {
		while(rslop.next())
		{
			HRApprovalForm help1 = new HRApprovalForm();
			help1.setEmployeeno(rslop.getString("Pernr") );
			help1.setEmployeeName(rslop.getString("EMP_FULLNAME"));
			help1.setDepartment(rslop.getString("dptstxt"));
			help1.setPaygrp(rslop.getString("Short_desc"));
			help1.setFromDate(rslop.getString("startdate"));
			help1.setToDate(rslop.getString("enddate"));
			help1.setLeavetype(rslop.getString("lv_type"));
			help1.setNoOfDays(rslop.getString("no_of_days"));
			lop.add(help1);

		}
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}


    ///onduty
		String query1 ="select convert(varchar(10),start_date,104) as startdate ,convert(varchar(10),end_date,104) as enddate ,* from EMP_IN_OUT_Status , "
				+ "emp_official_info,Paygroup_Master ,Category ,department ,DESIGNATION,OnDuty_details  where year= year('"+sqlfromdate+"') and month = month('"+sqlfromdate+"')"
				+ " and left(day"+day+",2) like '%OD%'  "
				+ " and   emp_official_info.PERNR=EMP_IN_OUT_Status.PERNR and Paygroup_Master.Paygroup = emp_official_info.PAY_GROUP and "
				+ "Category.staffcat = emp_official_info.STAFFCAT and   DEPARTMENT.DPTID=emp_official_info.DPTID and DESIGNATION.dsgid=emp_official_info.dsgid  "
				+ "and Active='1'   and OnDuty_details.user_id=emp_official_info.PERNR  and '"+sqlfromdate+"' "
				+ "between start_date and end_date and OnDuty_details.Approver_Status='Approved'";

	if(help.getLocationId()!=null)
	{	

	if(!help.getLocationId().equalsIgnoreCase(""))
	{
		query1 =query1+ " and emp_official_info.LOCID = '"+help.getLocationId()+"' ";
	}

	}

	if(!ACtualpay.equalsIgnoreCase(""))
	{
		query1=query1+" and emp_official_info.PAY_GROUP in  ("+ACtualpay+") ";
	
	}

	if(!ACtualcat.equalsIgnoreCase(""))
	{
		query1=query1+" and emp_official_info.STAFFCAT in ("+ACtualcat+")  ";
	
	}

	
	if(!ACtualloc.equalsIgnoreCase(""))
	{
		query1=query1+" and emp_official_info.Work_ID in("+ACtualloc+") ";
	
	}
	if(!help.getRepgrp().equalsIgnoreCase(""))
	{
		query1=query1+" and emp_official_info.Reporting_Grp ='"+help.getRepgrp()+"' ";
	
	}
	
	ResultSet rs1 = ad.selectQuery(query1);
	try {
		while(rs1.next())
		{

			HRApprovalForm help1 = new HRApprovalForm();
			help1.setEmployeeno(rs1.getString("Pernr") );
			help1.setEmployeeName(rs1.getString("EMP_FULLNAME"));
			help1.setDepartment(rs1.getString("dptstxt"));
			help1.setPaygrp(rs1.getString("Short_desc"));
			help1.setFromDate(rs1.getString("startdate"));
			help1.setToDate(rs1.getString("enddate"));
			help1.setStartTime(rs1.getString("startTime"));
			help1.setEndTime(rs1.getString("endTime"));
			help1.setLeavetype("OD");
			help1.setNoOfDays(rs1.getString("no_of_days"));
			onduty.add(help1);


		}
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}

	Calendar now = Calendar.getInstance();




	///Absenteees

	String query2="select * from EMP_IN_OUT_Status , emp_official_info,Paygroup_Master ,Category ,department ,DESIGNATION" 
				+ "  where year= year('"+sqlfromdate+"') and month = month('"+sqlfromdate+"') and left(day"+day+",2) like '%AA%' and "
				+ "  emp_official_info.PERNR=EMP_IN_OUT_Status.PERNR and Paygroup_Master.Paygroup = emp_official_info.PAY_GROUP and Category.staffcat = emp_official_info.STAFFCAT and "
				+ "  DEPARTMENT.DPTID=emp_official_info.DPTID and DESIGNATION.dsgid=emp_official_info.dsgid and Swipe_Count !=0 and Active='1' ";

	if(help.getLocationId()!=null)
	{	

	if(!help.getLocationId().equalsIgnoreCase(""))
	{
		query2 =query2+ " and emp_official_info.LocID = '"+help.getLocationId()+"' ";
	}

	}

	if(!ACtualpay.equalsIgnoreCase(""))
	{
		query2=query2+" and emp_official_info.PAY_GROUP in  ("+ACtualpay+") ";
	
	}

	if(!ACtualcat.equalsIgnoreCase(""))
	{
		query2=query2+" and emp_official_info.STAFFCAT in ("+ACtualcat+")  ";
	
	}
	
	if(!ACtualloc.equalsIgnoreCase(""))
	{
		query2=query2+" and emp_official_info.Work_ID in("+ACtualloc+") ";
	
	}
	if(!help.getRepgrp().equalsIgnoreCase(""))
	{
		query2=query2+" and emp_official_info.Reporting_Grp ='"+help.getRepgrp()+"' ";
	
	}
	ResultSet rs2 = ad.selectQuery(query2);
	try {
		while(rs2.next())
		{

			HRApprovalForm help1 = new HRApprovalForm();
			HRApprovalForm help2 = new HRApprovalForm();
			
		
			
			if(rs2.getString("DPTID").equalsIgnoreCase("9")||rs2.getString("DPTID").equalsIgnoreCase("51")||rs2.getString("DPTID").equalsIgnoreCase("49")||rs2.getString("DPTID").equalsIgnoreCase("66"))
			{
			help1.setEmployeeno(rs2.getString("Pernr") );
			help1.setEmployeeName(rs2.getString("EMP_FULLNAME"));
			help1.setDepartment(rs2.getString("dptstxt"));
			help1.setDesignation(rs2.getString("DSGSTXT"));
			help1.setPaygrp(rs2.getString("Short_desc"));
			help1.setLeavetype("LOP");
			

			absenceint.add(help1);
			}
			else
			{
				help2.setEmployeeno(rs2.getString("Pernr") );
				help2.setEmployeeName(rs2.getString("EMP_FULLNAME"));
				help2.setDepartment(rs2.getString("dptstxt"));
				help2.setDesignation(rs2.getString("DSGSTXT"));
				help2.setPaygrp(rs2.getString("Short_desc"));
				help2.setLeavetype("LOP");
				absence.add(help2);
			}


		}
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}

	
	
	String present = query2.replace("%AA%", "%PP%");
	present= present.replace("select *", "select count(*) ");
	ResultSet rs4 = ad.selectQuery(present);
	try {
		if(rs4.next())
		{
			help.setPresize(rs4.getInt(1));
		}
	} catch (SQLException e1) {
		// TODO Auto-generated catch block
		e1.printStackTrace();
	}
	//Permission
	String permission = query2.replace("%AA%", "%PM%");
	permission= permission.replace("select * ", "select count(*) ");
	ResultSet rs5 = ad.selectQuery(permission);
	try {
		if(rs5.next())
		{
			help.setPmsize(rs5.getInt(1));
		}
	} catch (SQLException e1) {
		// TODO Auto-generated catch block
		e1.printStackTrace();
	}
	
	
		request.setAttribute("leave", leave);
		request.setAttribute("lop", lop);
		request.setAttribute("onduty", onduty);
		request.setAttribute("absence", absence);
		request.setAttribute("absenceint", absenceint);
		
		help.setLeavesize(leave.size());
        help.setOdsize(onduty.size());
        help.setLopsize(lop.size());
        help.setAbssize(absence.size()+absenceint.size());


		ArrayList locationList=new ArrayList();
		ArrayList locationLabelList=new ArrayList();



		ArrayList workList=new ArrayList();
		ArrayList workLabelList=new ArrayList();
		ResultSet rs14 = ad.selectQuery("select loc_id," +
				"loc_name from working_location order by loc_name"); 
				try {
					while(rs14.next()) {
						workList.add(rs14.getString("loc_id"));
						workLabelList.add(rs14.getString("loc_name"));
					}
					rs14.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setWorkList(workList);
				help.setWorkLabelList(workLabelList);
				
				HttpSession session=request.getSession();
				UserInfo user=(UserInfo)session.getAttribute("user");
				
				

				String cmpcode="";
				int id=user.getGroupId();
				String cmp[]=new String[0]; 
				String locations="";
				
				String aa="select * from user_group where id='"+id+"'";
				ResultSet cc=ad.selectQuery(aa);
				try {
					if(cc.next())
					{
						cmpcode=cc.getString("Attendance_Loc");
						
						if(cmpcode.contains(","))
						{
						 cmp=cmpcode.split(",");
						
						for(int b=0;b<cmp.length;b++)
						{
							locations=locations+"'"+cmp[b]+"',";
						}
						
						locations=locations.substring(0, locations.length()-1);
						}
						else
						{
							locations="'"+cmpcode+"'";
						}
					}
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				
		
		ResultSet rs11 = ad.selectQuery("select LOCID," +
				"LOCNAME,location_code from location where location_code in ("+locations+")"); 
				try {
					while(rs11.next()) {
						locationList.add(rs11.getString("location_code"));
						locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
						
					}
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setLocationIdList(locationList);
				help.setLocationLabelList(locationLabelList);
		ArrayList categoryList=new ArrayList();
		ArrayList categoryLabelList=new ArrayList();
		ResultSet rs13 = ad.selectQuery("select STAFFCAT," +
				"CATLTEXT from category order by CATLTEXT"); 
				try {
					while(rs13.next()) {
						categoryList.add(rs13.getString("STAFFCAT"));
						categoryLabelList.add(rs13.getString("CATLTEXT"));
					}
					rs13.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				help.setCategoryList(categoryList);
				help.setCategoryLabelList(categoryLabelList);

				ArrayList payGroupList=new ArrayList();
				ArrayList payGroupLabelList=new ArrayList();
				ResultSet rs12 = ad.selectQuery("select Paygroup," +
				"Long_Desc from Paygroup_Master order by Long_Desc"); 
				try {
					while(rs12.next()) {
						payGroupList.add(rs12.getString("Paygroup"));
						payGroupLabelList.add(rs12.getString("Long_Desc"));
					}
					rs12.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				help.setPayGroupList(payGroupList);
				help.setPayGroupLabelList(payGroupLabelList);	
				
				try {
					cc.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				try {
					rs12.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs13.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs1.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					
				}
				
				try {
					rs2.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rslop.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				try {
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs4.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs5.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs14.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			        return mapping.findForward("exportdisplaydialyreport");

	 }
	
	public ActionForward dailyArrivalreportsearch(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

		
		HRApprovalForm help = (HRApprovalForm) form;
		String sqlfromdate="";
		String sqltodate="";
		String exportdate="";

		if(!help.getFromDate().equalsIgnoreCase(""))
		{
			String from[]=help.getFromDate().split("/");
		    sqlfromdate=from[2]+"-"+from[1]+"-"+from[0]; 
		    exportdate=help.getFromDate().replace("/", ".");
            help.setDate(exportdate);
		}


	//dept
	String ACtualdept="";
    if(help.getDeptArray()!=null)
    {	
    String[] dept = help.getDeptArray();
    
    StringBuffer reqdept = new StringBuffer();
	for (int i = 0; i < dept.length; i++) {
		reqdept.append("'"+dept[i]+"'" + ",");
	}
	 ACtualdept= reqdept.substring(0, reqdept.length() - 1).toString();
    }
	
    
    //subdept
    
    String ACtualsubdept="";
    if(help.getSubdeptArray()!=null)
    {	
    String[] subdept = help.getSubdeptArray();
    
    StringBuffer reqsubdept = new StringBuffer();
	for (int i = 0; i < subdept.length; i++) {
		reqsubdept.append("'"+subdept[i]+"'" + ",");
	}
	ACtualsubdept= reqsubdept.substring(0, reqsubdept.length() - 1).toString();
    }
    
    //reporting
    
    String ACtualrepgrp="";
    if(help.getRepgrpArray()!=null)
    {	
    String[] repgrp = help.getRepgrpArray();
    
    StringBuffer reqrepgrp = new StringBuffer();
	for (int i = 0; i < repgrp.length; i++) {
		reqrepgrp.append("'"+repgrp[i]+"'" + ",");
	}
	ACtualrepgrp= reqrepgrp.substring(0, reqrepgrp.length() - 1).toString();
    }

	//emp_off
    String query1="select DEPARTMENT.DPTSTXT,SUBDEPARTMENT.SDPTID_STXT,REPORTING_GROUP.Grp_STXT,emp_official_info.pernr,EMP_FULLNAME,emp_official_info.DPTID,DESIGNATION.DSGSTXT,emp_official_info.SDPTID,emp_official_info.Reporting_Grp,"
    		+ "Report_Daily_wise.In_time,Report_Daily_wise.Out_time,Report_Daily_wise.Early,Report_Daily_wise.Late,Report_Daily_wise.Total,left(Report_Daily_wise.Status,2) as Status,Report_Daily_wise.Shift from emp_official_info ,location ,DESIGNATION,Report_Daily_wise,DEPARTMENT,REPORTING_GROUP,SUBDEPARTMENT where DEPARTMENT.dptid=emp_official_info.DPTID and SUBDEPARTMENT.SDPTID=emp_official_info.SDPTID  and REPORTING_GROUP.Grp_ID=emp_official_info.Reporting_Grp and"
    		+ "  Location.LOCATION_CODE=emp_official_info.LOCID and  DESIGNATION.DSGID =emp_official_info.DSGID  and emp_official_info.LOCID = '"+help.getLocationId()+"'  and Active=1  and emp_official_info.PERNR=Report_Daily_wise.Pernr and Report_Daily_wise.date='"+sqlfromdate+"' and left(Report_Daily_wise.Status,2) like '%PP%'";

	

	if(!ACtualdept.equalsIgnoreCase(""))
	{
		query1=query1+" and emp_official_info.DPTID in  ("+ACtualdept+") ";
	
	}

	if(!ACtualsubdept.equalsIgnoreCase(""))
	{
		query1=query1+" and emp_official_info.SDPTID in ("+ACtualsubdept+")  ";
	
	}
	
	if(!ACtualrepgrp.equalsIgnoreCase(""))
	{
		query1=query1+" and emp_official_info.Reporting_Grp in("+ACtualrepgrp+") ";
	
	}
	
	
			query1=query1+" group by emp_official_info.pernr,EMP_FULLNAME,emp_official_info.DPTID,DESIGNATION.DSGSTXT,emp_official_info.SDPTID,emp_official_info.Reporting_Grp,Report_Daily_wise.In_time,Report_Daily_wise.Out_time,Report_Daily_wise.Early,Report_Daily_wise.Late,Report_Daily_wise.Total,Report_Daily_wise.Status,Report_Daily_wise.Shift,DEPARTMENT.DPTSTXT,REPORTING_GROUP.Grp_STXT,SUBDEPARTMENT.SDPTID_STXT order by DPTID,SDPTID,Reporting_Grp";
			
	this.query1=query1;
	this.query2=ACtualdept;
	this.query3=ACtualsubdept;
	this.query4=ACtualrepgrp;

	HttpSession session=request.getSession();
	UserInfo user=(UserInfo)session.getAttribute("user");
	

	String cmpcode="";
	int id=user.getGroupId();
	String cmp[]=new String[0]; 
	String locations="";
	
	String aa="select * from user_group where id='"+id+"'";
	ResultSet cc=ad.selectQuery(aa);
	try {
		if(cc.next())
		{
			cmpcode=cc.getString("Attendance_Loc");
			
			if(cmpcode.contains(","))
			{
			 cmp=cmpcode.split(",");
			
			for(int b=0;b<cmp.length;b++)
			{
				locations=locations+"'"+cmp[b]+"',";
			}
			
			locations=locations.substring(0, locations.length()-1);
			}
			else
			{
				locations="'"+cmpcode+"'";
			}
		}
	} catch (SQLException e1) {
		// TODO Auto-generated catch block
		e1.printStackTrace();
	}
	
         
	ArrayList locationList=new ArrayList();
	ArrayList locationLabelList=new ArrayList();
	ResultSet rs11 = ad.selectQuery("select LOCID," +
			"LOCNAME,location_code from location where location_code in ("+locations+") "); 
			try {
				while(rs11.next()) {
					locationList.add(rs11.getString("location_code"));
					locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
					
				}
				rs11.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			help.setLocationIdList(locationList);
			help.setLocationLabelList(locationLabelList);

		
	
			ArrayList deptList=new ArrayList();
			ArrayList deptLabelList=new ArrayList();
			ResultSet rs15 = ad.selectQuery("select dptid," +
					"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
					try {
						while(rs15.next()) {
							deptList.add(rs15.getString("dptid"));
							deptLabelList.add(rs15.getString("DPTLTXT"));
						}
						rs15.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					help.setDeptList(deptList);
					help.setDeptLabelList(deptLabelList);
					
					//subdep
					ArrayList subdeptList=new ArrayList();
					ArrayList subdeptLabelList=new ArrayList();
					ResultSet subrs15 = ad.selectQuery("select SDPTID," +
							"SDPTID_LTXT from SUBDEPARTMENT order by SDPTID_LTXT "); 
							try {
								while(subrs15.next()) {
									subdeptList.add(subrs15.getString("SDPTID"));
									subdeptLabelList.add(subrs15.getString("SDPTID_LTXT"));
								}
								subrs15.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							help.setSubdeptList(subdeptList);
							help.setSubdeptLabelList(subdeptLabelList);
							
							//repgrp
							ArrayList repgrptList=new ArrayList();
							ArrayList repgrpLabelList=new ArrayList();
							ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
									"Grp_LTXT from REPORTING_GROUP order by Grp_LTXT "); 
									try {
										while(reprs15.next()) {
											repgrptList.add(reprs15.getString("Grp_ID"));
											repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
										}
										reprs15.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
									
									help.setRepgrpList(repgrptList);
									help.setRepgrpLabelList(repgrpLabelList);
									
									try {
										cc.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
									try {
										subrs15.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
									
									try {
										rs11.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
									try {
										rs15.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
									try {
										reprs15.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
		        return mapping.findForward("dailyPerformancereport");

 }
	
	public ActionForward dailyPerformancereportsearch(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

		
		HRApprovalForm help = (HRApprovalForm) form;
		String sqlfromdate="";
		String sqltodate="";
		String exportdate="";

		if(!help.getFromDate().equalsIgnoreCase(""))
		{
			String from[]=help.getFromDate().split("/");
		    sqlfromdate=from[2]+"-"+from[1]+"-"+from[0]; 
		    exportdate=help.getFromDate().replace("/", ".");
            help.setDate(exportdate);
		}


	//dept
	String ACtualdept="";
    if(help.getDeptArray()!=null)
    {	
    String[] dept = help.getDeptArray();
    
    StringBuffer reqdept = new StringBuffer();
	for (int i = 0; i < dept.length; i++) {
		reqdept.append("'"+dept[i]+"'" + ",");
	}
	 ACtualdept= reqdept.substring(0, reqdept.length() - 1).toString();
    }
	
    
    //subdept
    
    String ACtualsubdept="";
    if(help.getSubdeptArray()!=null)
    {	
    String[] subdept = help.getSubdeptArray();
    
    StringBuffer reqsubdept = new StringBuffer();
	for (int i = 0; i < subdept.length; i++) {
		reqsubdept.append("'"+subdept[i]+"'" + ",");
	}
	ACtualsubdept= reqsubdept.substring(0, reqsubdept.length() - 1).toString();
    }
    
    //reporting
    
    String ACtualrepgrp="";
    if(help.getRepgrpArray()!=null)
    {	
    String[] repgrp = help.getRepgrpArray();
    
    StringBuffer reqrepgrp = new StringBuffer();
	for (int i = 0; i < repgrp.length; i++) {
		reqrepgrp.append("'"+repgrp[i]+"'" + ",");
	}
	ACtualrepgrp= reqrepgrp.substring(0, reqrepgrp.length() - 1).toString();
    }


	//emp_off

    String query1="select emp_official_info.pernr,EMP_FULLNAME,emp_official_info.DPTID,DESIGNATION.DSGSTXT,emp_official_info.SDPTID,emp_official_info.Reporting_Grp,"
    		+ "Report_Daily_wise.In_time,Report_Daily_wise.Out_time,Report_Daily_wise.Early,Report_Daily_wise.Late,Report_Daily_wise.Total,Report_Daily_wise.ot,Report_Daily_wise.Status,Report_Daily_wise.Shift from emp_official_info  ,DESIGNATION,Report_Daily_wise where "
    		+ "  DESIGNATION.DSGID =emp_official_info.DSGID  and emp_official_info.LOCID = '"+help.getLocationId()+"'  and Active=1  and emp_official_info.PERNR=Report_Daily_wise.Pernr and Report_Daily_wise.date='"+sqlfromdate+"'";

	

	if(!ACtualdept.equalsIgnoreCase(""))
	{
		query1=query1+" and emp_official_info.DPTID in  ("+ACtualdept+") ";
	
	}

	if(!ACtualsubdept.equalsIgnoreCase(""))
	{
		query1=query1+" and emp_official_info.SDPTID in ("+ACtualsubdept+")  ";
	
	}
	
	if(!ACtualrepgrp.equalsIgnoreCase(""))
	{
		query1=query1+" and emp_official_info.Reporting_Grp in("+ACtualrepgrp+") ";
	
	}
	
	
			query1=query1+"group by emp_official_info.pernr,EMP_FULLNAME,emp_official_info.DPTID,DESIGNATION.DSGSTXT,emp_official_info.SDPTID,emp_official_info.Reporting_Grp,Report_Daily_wise.In_time,Report_Daily_wise.Out_time,Report_Daily_wise.Early,Report_Daily_wise.Late,Report_Daily_wise.ot,Report_Daily_wise.Total,Report_Daily_wise.Status,Report_Daily_wise.Shift order by DPTID,SDPTID,Reporting_Grp";
			
	this.query1=query1;
	this.query2=ACtualdept;
	this.query3=ACtualsubdept;
	this.query4=ACtualrepgrp;

	         
	HttpSession session=request.getSession();
	UserInfo user=(UserInfo)session.getAttribute("user");
	ArrayList locationList=new ArrayList();
	ArrayList locationLabelList=new ArrayList();

	String cmpcode="";
	int id=user.getGroupId();
	String cmp[]=new String[0]; 
	String locations="";
	
	String aa="select * from user_group where id='"+id+"'";
	ResultSet cc=ad.selectQuery(aa);
	try {
		if(cc.next())
		{
			cmpcode=cc.getString("Attendance_Loc");
			
			if(cmpcode.contains(","))
			{
			 cmp=cmpcode.split(",");
			
			for(int b=0;b<cmp.length;b++)
			{
				locations=locations+"'"+cmp[b]+"',";
			}
			
			locations=locations.substring(0, locations.length()-1);
			}
			else
			{
				locations="'"+cmpcode+"'";
			}
		}
	} catch (SQLException e1) {
		// TODO Auto-generated catch block
		e1.printStackTrace();
	}
	
	
	ResultSet rs11 = ad.selectQuery("select LOCID," +
			"LOCNAME,location_code from location where location_code in ("+locations+")"); 
			try {
				while(rs11.next()) {
					locationList.add(rs11.getString("location_code"));
					locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
					
				}
				rs11.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			help.setLocationIdList(locationList);
			help.setLocationLabelList(locationLabelList);

		
	
			ArrayList deptList=new ArrayList();
			ArrayList deptLabelList=new ArrayList();
			ResultSet rs15 = ad.selectQuery("select dptid," +
					"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
					try {
						while(rs15.next()) {
							deptList.add(rs15.getString("dptid"));
							deptLabelList.add(rs15.getString("DPTLTXT"));
						}
						rs15.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					help.setDeptList(deptList);
					help.setDeptLabelList(deptLabelList);
					
					//subdep
					ArrayList subdeptList=new ArrayList();
					ArrayList subdeptLabelList=new ArrayList();
					ResultSet subrs15 = ad.selectQuery("select SDPTID," +
							"SDPTID_LTXT from SUBDEPARTMENT order by SDPTID_LTXT "); 
							try {
								while(subrs15.next()) {
									subdeptList.add(subrs15.getString("SDPTID"));
									subdeptLabelList.add(subrs15.getString("SDPTID_LTXT"));
								}
								subrs15.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							help.setSubdeptList(subdeptList);
							help.setSubdeptLabelList(subdeptLabelList);
							
							//repgrp
							ArrayList repgrptList=new ArrayList();
							ArrayList repgrpLabelList=new ArrayList();
							ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
									"Grp_LTXT from REPORTING_GROUP order by Grp_LTXT "); 
									try {
										while(reprs15.next()) {
											repgrptList.add(reprs15.getString("Grp_ID"));
											repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
										}
										reprs15.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
									
									help.setRepgrpList(repgrptList);
									help.setRepgrpLabelList(repgrpLabelList);
									
									try {
										reprs15.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
									
									try {
										rs15.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
									try {
										cc.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
									try {
										rs11.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
									try {
										subrs15.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
		        return mapping.findForward("dailyPerformancereport");

 }
	
	
	public ActionForward casualabsenteeismreportsearch(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

		
		HRApprovalForm help = (HRApprovalForm) form;
		String sqlfromdate="";
		String sqltodate="";
		String exportdate="";

		if(!help.getFromDate().equalsIgnoreCase(""))
		{
			String from[]=help.getFromDate().split("/");
		    sqlfromdate=from[2]+"-"+from[1]+"-"+from[0]; 
		    exportdate=help.getFromDate().replace("/", ".");
            help.setDate(exportdate);
		}


	//dept
	String ACtualdept="";
    if(help.getDeptArray()!=null)
    {	
    String[] dept = help.getDeptArray();
    
    StringBuffer reqdept = new StringBuffer();
	for (int i = 0; i < dept.length; i++) {
		reqdept.append("'"+dept[i]+"'" + ",");
	}
	 ACtualdept= reqdept.substring(0, reqdept.length() - 1).toString();
    }
	
    
    //subdept
    
    String ACtualsubdept="";
    if(help.getSubdeptArray()!=null)
    {	
    String[] subdept = help.getSubdeptArray();
    
    StringBuffer reqsubdept = new StringBuffer();
	for (int i = 0; i < subdept.length; i++) {
		reqsubdept.append("'"+subdept[i]+"'" + ",");
	}
	ACtualsubdept= reqsubdept.substring(0, reqsubdept.length() - 1).toString();
    }
    
    //reporting
    
    String ACtualrepgrp="";
    if(help.getRepgrpArray()!=null)
    {	
    String[] repgrp = help.getRepgrpArray();
    
    StringBuffer reqrepgrp = new StringBuffer();
	for (int i = 0; i < repgrp.length; i++) {
		reqrepgrp.append("'"+repgrp[i]+"'" + ",");
	}
	ACtualrepgrp= reqrepgrp.substring(0, reqrepgrp.length() - 1).toString();
    }


	//emp_off

    String query1="select emp_official_info.pernr,EMP_FULLNAME,emp_official_info.DPTID,DESIGNATION.DSGSTXT,emp_official_info.SDPTID,emp_official_info.Reporting_Grp,"
    		+ "Report_Daily_wise.In_time,Report_Daily_wise.Out_time,Report_Daily_wise.Early,Report_Daily_wise.Late,Report_Daily_wise.Total,Report_Daily_wise.ot,Report_Daily_wise.Status,Report_Daily_wise.Shift from emp_official_info  ,DESIGNATION,Report_Daily_wise where "
    		+ "  DESIGNATION.DSGID =emp_official_info.DSGID  and emp_official_info.LOCID = '"+help.getLocationId()+"'  and Active=1  and emp_official_info.PERNR=Report_Daily_wise.Pernr and Report_Daily_wise.date='"+sqlfromdate+"'";

	

	if(!ACtualdept.equalsIgnoreCase(""))
	{
		query1=query1+" and emp_official_info.DPTID in  ("+ACtualdept+") ";
	
	}

	if(!ACtualsubdept.equalsIgnoreCase(""))
	{
		query1=query1+" and emp_official_info.SDPTID in ("+ACtualsubdept+")  ";
	
	}
	
	if(!ACtualrepgrp.equalsIgnoreCase(""))
	{
		query1=query1+" and emp_official_info.Reporting_Grp in("+ACtualrepgrp+") ";
	
	}
	
	
			query1=query1+"group by emp_official_info.pernr,EMP_FULLNAME,emp_official_info.DPTID,DESIGNATION.DSGSTXT,emp_official_info.SDPTID,emp_official_info.Reporting_Grp,Report_Daily_wise.In_time,Report_Daily_wise.Out_time,Report_Daily_wise.Early,Report_Daily_wise.Late,Report_Daily_wise.ot,Report_Daily_wise.Total,Report_Daily_wise.Status,Report_Daily_wise.Shift order by DPTID,SDPTID,Reporting_Grp";
			
	this.query1=query1;
	this.query2=ACtualdept;
	this.query3=ACtualsubdept;
	this.query4=ACtualrepgrp;

	         
	HttpSession session=request.getSession();
	UserInfo user=(UserInfo)session.getAttribute("user");
	ArrayList locationList=new ArrayList();
	ArrayList locationLabelList=new ArrayList();

	String cmpcode="";
	int id=user.getGroupId();
	String cmp[]=new String[0]; 
	String locations="";
	
	String aa="select * from user_group where id='"+id+"'";
	ResultSet cc=ad.selectQuery(aa);
	try {
		if(cc.next())
		{
			cmpcode=cc.getString("Attendance_Loc");
			
			if(cmpcode.contains(","))
			{
			 cmp=cmpcode.split(",");
			
			for(int b=0;b<cmp.length;b++)
			{
				locations=locations+"'"+cmp[b]+"',";
			}
			
			locations=locations.substring(0, locations.length()-1);
			}
			else
			{
				locations="'"+cmpcode+"'";
			}
		}
	} catch (SQLException e1) {
		// TODO Auto-generated catch block
		e1.printStackTrace();
	}
	
	
	ResultSet rs11 = ad.selectQuery("select LOCID," +
			"LOCNAME,location_code from location where location_code in ("+locations+")"); 
			try {
				while(rs11.next()) {
					locationList.add(rs11.getString("location_code"));
					locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
					
				}
				rs11.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			help.setLocationIdList(locationList);
			help.setLocationLabelList(locationLabelList);

		
	
			ArrayList deptList=new ArrayList();
			ArrayList deptLabelList=new ArrayList();
			ResultSet rs15 = ad.selectQuery("select dptid," +
					"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
					try {
						while(rs15.next()) {
							deptList.add(rs15.getString("dptid"));
							deptLabelList.add(rs15.getString("DPTLTXT"));
						}
						rs15.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					help.setDeptList(deptList);
					help.setDeptLabelList(deptLabelList);
					
					//subdep
					ArrayList subdeptList=new ArrayList();
					ArrayList subdeptLabelList=new ArrayList();
					ResultSet subrs15 = ad.selectQuery("select SDPTID," +
							"SDPTID_LTXT from SUBDEPARTMENT order by SDPTID_LTXT "); 
							try {
								while(subrs15.next()) {
									subdeptList.add(subrs15.getString("SDPTID"));
									subdeptLabelList.add(subrs15.getString("SDPTID_LTXT"));
								}
								subrs15.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							help.setSubdeptList(subdeptList);
							help.setSubdeptLabelList(subdeptLabelList);
							
							//repgrp
							ArrayList repgrptList=new ArrayList();
							ArrayList repgrpLabelList=new ArrayList();
							ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
									"Grp_LTXT from REPORTING_GROUP order by Grp_LTXT "); 
									try {
										while(reprs15.next()) {
											repgrptList.add(reprs15.getString("Grp_ID"));
											repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
										}
										reprs15.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
									
									help.setRepgrpList(repgrptList);
									help.setRepgrpLabelList(repgrpLabelList);
									
									try {
										reprs15.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
									
									try {
										rs15.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
									try {
										cc.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
									try {
										rs11.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
									try {
										subrs15.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
		        return mapping.findForward("casualabsenteeismreport");

 }
	
	public ActionForward dailyreportsearch(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
			HRApprovalForm help = (HRApprovalForm) form;
			String sqlfromdate="";
			String sqltodate="";
			String exportdate="";

			if(!help.getFromDate().equalsIgnoreCase(""))
			{
				String from[]=help.getFromDate().split("/");
			    sqlfromdate=from[2]+"-"+from[1]+"-"+from[0]; 
			    exportdate=help.getFromDate().replace("/", ".");
	            help.setDate(exportdate);
			}

		ArrayList leave = new ArrayList();
		ArrayList onduty = new ArrayList();
		ArrayList lop = new ArrayList();
		ArrayList absence = new ArrayList();
		
		String ACtualpay="";
	    if(help.getPayArray()!=null)
	    {

		String[] pay = help.getPayArray();
	    StringBuffer reqpay = new StringBuffer();
		for (int i = 0; i < pay.length; i++) {
			reqpay.append("'"+pay[i]+"'" + ",");
		}
		ACtualpay = reqpay.substring(0, reqpay.length() - 1).toString();

	    }

	    //catArray
	    String ACtualcat="";
	    if(help.getCatArray()!=null)
	    {

		String[] cat = help.getCatArray();
	    StringBuffer reqcat = new StringBuffer();
		for (int i = 0; i < cat.length; i++) {
			reqcat.append("'"+cat[i]+"'" + ",");
		}
		ACtualcat = reqcat.substring(0, reqcat.length() - 1).toString();

	    }
	    int day = Integer.parseInt(sqlfromdate.substring(8));
	    
	    
	    String ACtualloc="";
	    if(help.getLocArray()!=null)
	    {
	    
		String[] loc = help.getLocArray();
	    StringBuffer reqloc = new StringBuffer();
		for (int i = 0; i < loc.length; i++) {
			reqloc.append("'"+loc[i]+"'" + ",");
		}
		ACtualloc = reqloc.substring(0, reqloc.length() - 1).toString();
	    
	    }

		
		//leaves
		String query ="select convert(varchar(10),start_date,104) as startdate ,convert(varchar(10),end_date,104) as enddate ,* from EMP_IN_OUT_Status , "
				+ "emp_official_info,Paygroup_Master ,Category ,department ,DESIGNATION,leave_details,lv_type_m  where year= year('"+sqlfromdate+"') and month = month('"+sqlfromdate+"')"
				+ " and (left(day"+day+",2) like '%CL%' or left(day"+day+",2) like '%SL%' or left(day"+day+",2) like '%EL%' or left(day"+day+",2) like '%ML%' or left(day"+day+",2) like '%CO%')  "
				+ " and   emp_official_info.PERNR=EMP_IN_OUT_Status.PERNR and Paygroup_Master.Paygroup = emp_official_info.PAY_GROUP and "
				+ "Category.staffcat = emp_official_info.STAFFCAT and   DEPARTMENT.DPTID=emp_official_info.DPTID and DESIGNATION.dsgid=emp_official_info.dsgid  "
				+ "and Active='1'   and leave_details.user_id=emp_official_info.PERNR  and '"+sqlfromdate+"' "
				+ "between start_date and end_date AND lv_type_m.lv_typeid=leave_details.leave_type and leave_details.Approvel_Status='Approved'" ;


		if(help.getLocationId()!=null)
		{	

		if(!help.getLocationId().equalsIgnoreCase(""))
		{
			query =query+ " and emp_official_info.LOCID = '"+help.getLocationId()+"' ";
		}

		}

		if(!ACtualpay.equalsIgnoreCase(""))
		{
			query=query+" and emp_official_info.PAY_GROUP in  ("+ACtualpay+") ";
		
		}

		if(!ACtualcat.equalsIgnoreCase(""))
		{
			query=query+" and emp_official_info.STAFFCAT in ("+ACtualcat+")  ";
		
		}
		
		if(!ACtualloc.equalsIgnoreCase(""))
		{
			query=query+" and emp_official_info.Work_ID in("+ACtualloc+") ";
		
		}
		
		if(!help.getRepgrp().equalsIgnoreCase(""))
		{
			query=query+" and emp_official_info.Reporting_Grp ='"+help.getRepgrp()+"' ";
		
		}
		
		query1=query;
		

		//lOP
		String querylop ="select convert(varchar(10),start_date,104) as startdate ,convert(varchar(10),end_date,104) as enddate ,* from EMP_IN_OUT_Status , "
				+ "emp_official_info,Paygroup_Master ,Category ,department ,DESIGNATION,leave_details,lv_type_m  where year= year('"+sqlfromdate+"') and month = month('"+sqlfromdate+"')"
				+ " and left(day"+day+",2) like '%NL%'  "
				+ " and   emp_official_info.PERNR=EMP_IN_OUT_Status.PERNR and Paygroup_Master.Paygroup = emp_official_info.PAY_GROUP and "
				+ "Category.staffcat = emp_official_info.STAFFCAT and   DEPARTMENT.DPTID=emp_official_info.DPTID and DESIGNATION.dsgid=emp_official_info.dsgid  "
				+ "and Active='1'   and leave_details.user_id=emp_official_info.PERNR  and '"+sqlfromdate+"' "
				+ "between start_date and end_date AND lv_type_m.lv_typeid=leave_details.leave_type and leave_details.Approvel_Status='Approved'" ;


		if(help.getLocationId()!=null)
		{	

		if(!help.getLocationId().equalsIgnoreCase(""))
		{
			querylop =querylop+ " and emp_official_info.LOCID = '"+help.getLocationId()+"' ";
		}

		}

		if(!ACtualpay.equalsIgnoreCase(""))
		{
			querylop=querylop+" and emp_official_info.PAY_GROUP in  ("+ACtualpay+") ";
		
		}

		if(!ACtualcat.equalsIgnoreCase(""))
		{
			querylop=querylop+" and emp_official_info.STAFFCAT in ("+ACtualcat+")  ";
		
		}
		
		if(!ACtualloc.equalsIgnoreCase(""))
		{
			querylop=querylop+" and emp_official_info.Work_ID in("+ACtualloc+") ";
		
		}
    
		
		if(!help.getRepgrp().equalsIgnoreCase(""))
		{
			querylop=querylop+" and emp_official_info.Reporting_Grp ='"+help.getRepgrp()+"' ";
		
		}
		query2=querylop;
		

     ///onduty
		String query1 ="select convert(varchar(10),start_date,104) as startdate ,convert(varchar(10),end_date,104) as enddate ,* from EMP_IN_OUT_Status , "
				+ "emp_official_info,Paygroup_Master ,Category ,department ,DESIGNATION,OnDuty_details  where year= year('"+sqlfromdate+"') and month = month('"+sqlfromdate+"')"
				+ " and left(day"+day+",2) like '%OD%'  "
				+ " and   emp_official_info.PERNR=EMP_IN_OUT_Status.PERNR and Paygroup_Master.Paygroup = emp_official_info.PAY_GROUP and "
				+ "Category.staffcat = emp_official_info.STAFFCAT and   DEPARTMENT.DPTID=emp_official_info.DPTID and DESIGNATION.dsgid=emp_official_info.dsgid  "
				+ "and Active='1'   and OnDuty_details.user_id=emp_official_info.PERNR  and '"+sqlfromdate+"' "
				+ "between start_date and end_date and OnDuty_details.Approver_Status='Approved'";


		if(help.getLocationId()!=null)
		{	

		if(!help.getLocationId().equalsIgnoreCase(""))
		{
			query1 =query1+ " and emp_official_info.LOCID = '"+help.getLocationId()+"' ";
		}

		}

		if(!ACtualpay.equalsIgnoreCase(""))
		{
			query1=query1+" and emp_official_info.PAY_GROUP in  ("+ACtualpay+") ";
		
		}

		if(!ACtualcat.equalsIgnoreCase(""))
		{
			query1=query1+" and emp_official_info.STAFFCAT in ("+ACtualcat+")  ";
		
		}
		
		if(!ACtualloc.equalsIgnoreCase(""))
		{
			query1=query1+" and emp_official_info.Work_ID in("+ACtualloc+") ";
		
		}
		
		if(!help.getRepgrp().equalsIgnoreCase(""))
		{
			query1=query1+" and emp_official_info.Reporting_Grp ='"+help.getRepgrp()+"' ";
		
		}
		
		query3=query1;
		

		Calendar now = Calendar.getInstance();


		


		///Absenteees 

		String query2="select * from EMP_IN_OUT_Status , emp_official_info,Paygroup_Master ,Category ,department ,DESIGNATION" 
					+ "  where year= year('"+sqlfromdate+"') and month = month('"+sqlfromdate+"') and left(day"+day+",2) like '%AA%' and "
					+ "  emp_official_info.PERNR=EMP_IN_OUT_Status.PERNR and Paygroup_Master.Paygroup = emp_official_info.PAY_GROUP and Category.staffcat = emp_official_info.STAFFCAT and "
					+ "  DEPARTMENT.DPTID=emp_official_info.DPTID and DESIGNATION.dsgid=emp_official_info.dsgid and Swipe_Count !=0 and Active='1'  ";

		if(help.getLocationId()!=null)
		{	

		if(!help.getLocationId().equalsIgnoreCase(""))
		{
			query2 =query2+ " and emp_official_info.LocID = '"+help.getLocationId()+"' ";
		}

		}

		if(!ACtualpay.equalsIgnoreCase(""))
		{
			query2=query2+" and emp_official_info.PAY_GROUP in  ("+ACtualpay+") ";
		
		}

		if(!ACtualcat.equalsIgnoreCase(""))
		{
			query2=query2+" and emp_official_info.STAFFCAT in ("+ACtualcat+")  ";
		
		}
		
		if(!ACtualloc.equalsIgnoreCase(""))
		{
			query2=query2+" and emp_official_info.Work_ID in("+ACtualloc+") ";
		
		}
		
		if(!help.getRepgrp().equalsIgnoreCase(""))
		{
			query2=query2+" and emp_official_info.Reporting_Grp ='"+help.getRepgrp()+"' ";
		
		}
		
		query4=query2;
		
			request.setAttribute("leave", leave);
			request.setAttribute("lop", lop);
			request.setAttribute("onduty", onduty);
			request.setAttribute("absence", absence);
			
             help.setLeavesize(leave.size());
             help.setOdsize(onduty.size());
             help.setLopsize(lop.size());
             help.setAbssize(absence.size());
             
             
         	ArrayList workList=new ArrayList();
    		ArrayList workLabelList=new ArrayList();
    		ResultSet rs14 = ad.selectQuery("select loc_id," +
    				"loc_name from working_location order by loc_name"); 
    				try {
    					while(rs14.next()) {
    						workList.add(rs14.getString("loc_id"));
    						workLabelList.add(rs14.getString("loc_name"));
    					}
    					rs14.close();
    				} catch (SQLException e) {
    					// TODO Auto-generated catch block
    					e.printStackTrace();
    				}
    				
    				help.setWorkList(workList);
    				help.setWorkLabelList(workLabelList);
             
    				HttpSession session=request.getSession();
    				UserInfo user=(UserInfo)session.getAttribute("user");
    				
    				String cmpcode="";
    				int id=user.getGroupId();
    				String cmp[]=new String[0]; 
    				String locations="";
    				
    				String aa="select * from user_group where id='"+id+"'";
    				ResultSet cc=ad.selectQuery(aa);
    				try {
    					if(cc.next())
    					{
    						cmpcode=cc.getString("Attendance_Loc");
    						
    						if(cmpcode.contains(","))
    						{
    						 cmp=cmpcode.split(",");
    						
    						for(int b=0;b<cmp.length;b++)
    						{
    							locations=locations+"'"+cmp[b]+"',";
    						}
    						
    						locations=locations.substring(0, locations.length()-1);
    						}
    						else
    						{
    							locations="'"+cmpcode+"'";
    						}
    					}
    				} catch (SQLException e1) {
    					// TODO Auto-generated catch block
    					e1.printStackTrace();
    				}
    				
			ResultSet rs11 = ad.selectQuery("select * from location where location_code in ("+locations+")");		

			ArrayList locationList=new ArrayList();
			ArrayList locationLabelList=new ArrayList();

			try {
				while(rs11.next()) {
					locationList.add(rs11.getString("LOCATION_CODE"));
					locationLabelList.add(rs11.getString("LOCATION_CODE")+" - "+rs11.getString("LOCNAME"));
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			help.setLocationIdList(locationList);
			help.setLocationLabelList(locationLabelList);

			ArrayList categoryList=new ArrayList();
			ArrayList categoryLabelList=new ArrayList();
			ResultSet rs13 = ad.selectQuery("select STAFFCAT," +
					"CATLTEXT from category"); 
					try {
						while(rs13.next()) {
							categoryList.add(rs13.getString("STAFFCAT"));
							categoryLabelList.add(rs13.getString("CATLTEXT"));
						}
						rs13.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

					help.setCategoryList(categoryList);
					help.setCategoryLabelList(categoryLabelList);

					ArrayList payGroupList=new ArrayList();
					ArrayList payGroupLabelList=new ArrayList();
					ResultSet rs12 = ad.selectQuery("select Paygroup," +
					"Short_desc from Paygroup_Master"); 
					try {
						while(rs12.next()) {
							payGroupList.add(rs12.getString("Paygroup"));
							payGroupLabelList.add(rs12.getString("Short_desc"));
						}
						rs12.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					help.setPayGroupList(payGroupList);
					help.setPayGroupLabelList(payGroupLabelList);		
					
					
					//repgrp
					ArrayList repgrptList=new ArrayList();
					ArrayList repgrpLabelList=new ArrayList();
					ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
							"Grp_LTXT from REPORTING_GROUP   order by Grp_LTXT "); 
							try {
								while(reprs15.next()) {
									repgrptList.add(reprs15.getString("Grp_ID"));
									repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
								}
								reprs15.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							help.setRepgrpList(repgrptList);
							help.setRepgrpLabelList(repgrpLabelList);
					
					request.setAttribute("result", "");
					
					try {
						reprs15.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					try {
						rs11.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					try {
						rs12.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					try {
						rs14.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					try {
						cc.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					try {
						rs13.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					
			        return mapping.findForward("displaydialyreport");

	 }
	
	public ActionForward dailyArrivalreportexe(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		

		
		try {
			Thread.sleep(2000);
		} catch (InterruptedException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}
		
			HRApprovalForm help = (HRApprovalForm) form;
			String sqlfromdate="";
			String sqltodate="";
			String exportdate="";


		ArrayList deptlist = new ArrayList();
		ArrayList emplist = new ArrayList();

		   help.setFromDate(request.getParameter("date"));
	        help.setLocationId(request.getParameter("loc"));

	       	if(!(query3.equalsIgnoreCase("")))
        	{
	String list="select distinct DEPARTMENT.DPTID,SUBDEPARTMENT.SDPTID,Grp_ID,DPTSTXT,SDPTID_STXT,Grp_STXT  from DEPARTMENT,SUBDEPARTMENT,"
			+ "REPORTING_GROUP,emp_official_info where LOCID='"+request.getParameter("loc")+"' and emp_official_info.DPTID=DEPARTMENT.DPTID and emp_official_info.SDPTID=SUBDEPARTMENT.SDPTID "
			+ "and emp_official_info.Reporting_Grp=REPORTING_GROUP.Grp_ID  and DEPARTMENT.dptid in ("+query2+") and SUBDEPARTMENT.SDPTID in ("+query3+") and REPORTING_GROUP.Grp_ID in("+query4+") order by DPTID,SDPTID,Grp_ID";
		ResultSet rs1 = ad.selectQuery(list);
	try {
		while(rs1.next())
		{
			HRApprovalForm help1 = new HRApprovalForm();
			help1.setDepartment(rs1.getString("DPTID"));
			help1.setSubdepartment(rs1.getString("SDPTID"));
			help1.setRepgrp(rs1.getString("Grp_ID"));
			help1.setDeptFrom(rs1.getString("DPTSTXT"));
			help1.setDeptTo(rs1.getString("SDPTID_STXT"));
			help1.setDesgTo(rs1.getString("Grp_STXT"));
			deptlist.add(help1);
		}
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	try {
		rs1.close();
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	request.setAttribute("deptlist", deptlist);
	
        	}
        	else
        	{

        		String list="select distinct DEPARTMENT.DPTID,DPTSTXT  from DEPARTMENT ,emp_official_info where LOCID='"+request.getParameter("loc")+"' and emp_official_info.DPTID=DEPARTMENT.DPTID  "
        				+ "  and DEPARTMENT.dptid in ("+query2+")  order by DPTID";
        		
        		
        		
        		ResultSet rs1 = ad.selectQuery(list);
        		try {
        			while(rs1.next())
        			{
        				HRApprovalForm help1 = new HRApprovalForm();
        				help1.setDepartment(rs1.getString("DPTID"));	    
        				help1.setDeptFrom(rs1.getString("DPTSTXT"));
        
        				deptlist.add(help1);
        			}
        		} catch (SQLException e) {
        			// TODO Auto-generated catch block
        			e.printStackTrace();
        		}
        		try {
					rs1.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
        		request.setAttribute("onlydeptlist", deptlist);
        	}
		
		ResultSet rs = ad.selectQuery(query1);
		try {
			while(rs.next())
			{
				HRApprovalForm help2 = new HRApprovalForm();
				help2.setEmployeeno(rs.getString("Pernr") );
				help2.setEmployeeName(rs.getString("EMP_FULLNAME"));
				help2.setDepartment(rs.getString("DPTID"));
				help2.setDeptTo(rs.getString("DPTSTXT"));
				help2.setSubdepartment(rs.getString("SDPTID"));
				help2.setSubdeptTO(rs.getString("SDPTID_STXT"));
				help2.setRepgrp(rs.getString("reporting_grp"));
				help2.setRep_et(rs.getString("Grp_STXT"));
			    help2.setDesignation(rs.getString("DSGSTXT"));
			    help2.setStartTime(rs.getString("In_time").substring(0, 8));
			    help2.setEndTime(rs.getString("Out_time").substring(0, 8));
			    
			    if(rs.getString("Early")!=null)
			    help2.setEarly(rs.getString("Early"));
			    else			    
			    help2.setEarly("00:00:00");	
			    
			    if(rs.getString("late")!=null)
			    help2.setLate(rs.getString("late"));
			    else
			    help2.setLate("00:00:00");	
			    
			    if(rs.getString("total")!=null)
			    help2.setTotal(rs.getString("total"));
			    else
				help2.setTotal("00:00:00");	
			    
			    help2.setStatus(rs.getString("Status"));
			    help2.setShift(rs.getString("Shift"));
				emplist.add(help2);

			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		finally{
			query1="";
			query2="";
			query3="";
			query4="";
			query5="";
			query6="";
		}
		request.setAttribute("emplist", emplist);
		
		try {
			rs.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		

			        return mapping.findForward("displaydailyArrivalreport");

	 
		
	}
	
	public ActionForward dailyPerformancereportexe(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
		try {
			Thread.sleep(2000);
		} catch (InterruptedException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}
		
			HRApprovalForm help = (HRApprovalForm) form;
			String sqlfromdate="";
			String sqltodate="";
			String exportdate="";


		ArrayList deptlist = new ArrayList();
		ArrayList emplist = new ArrayList();
		
		ArrayList abslist = new ArrayList();
		ArrayList datelist = new ArrayList();

		   help.setFromDate(request.getParameter("date"));
		   
		   String st[]=request.getParameter("date").split("/");
		   sqlfromdate=st[2]+"-"+st[1]+"-"+st[0];
		   
		   help.setToDate(request.getParameter("todate"));
	        help.setLocationId(request.getParameter("loc"));
	        help.setSummbrkup(request.getParameter("summbrkup"));
	        
	        if( help.getSummbrkup().equalsIgnoreCase("All") )
			{

	        	if(!(query3.equalsIgnoreCase("")))
	        	{
		String list="select distinct DEPARTMENT.DPTID,SUBDEPARTMENT.SDPTID,Grp_ID,DPTSTXT,SDPTID_STXT,Grp_STXT  from DEPARTMENT,SUBDEPARTMENT,"
				+ "REPORTING_GROUP,emp_official_info where LOCID='"+request.getParameter("loc")+"' and emp_official_info.DPTID=DEPARTMENT.DPTID and emp_official_info.SDPTID=SUBDEPARTMENT.SDPTID "
				+ "and emp_official_info.Reporting_Grp=REPORTING_GROUP.Grp_ID  and DEPARTMENT.dptid in ("+query2+") and SUBDEPARTMENT.SDPTID in ("+query3+") and REPORTING_GROUP.Grp_ID in("+query4+") order by DPTID,SDPTID,Grp_ID";
			ResultSet rs1 = ad.selectQuery(list);
		try {
			while(rs1.next())
			{
				HRApprovalForm help1 = new HRApprovalForm();
				help1.setDepartment(rs1.getString("DPTID"));
				help1.setSubdepartment(rs1.getString("SDPTID"));
				help1.setRepgrp(rs1.getString("Grp_ID"));
				help1.setDeptFrom(rs1.getString("DPTSTXT"));
				help1.setDeptTo(rs1.getString("SDPTID_STXT"));
				help1.setDesgTo(rs1.getString("Grp_STXT"));
				deptlist.add(help1);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs1.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		request.setAttribute("deptlist", deptlist);
		
	        	}
	        	else
	        	{

	        		String list="select distinct DEPARTMENT.DPTID,DPTSTXT  from DEPARTMENT ,emp_official_info where LOCID='"+request.getParameter("loc")+"' and emp_official_info.DPTID=DEPARTMENT.DPTID  "
	        				+ "  and DEPARTMENT.dptid in ("+query2+")  order by DPTID";
	        		
	        		
	        		
	        		ResultSet rs1 = ad.selectQuery(list);
	        		try {
	        			while(rs1.next())
	        			{
	        				HRApprovalForm help1 = new HRApprovalForm();
	        				help1.setDepartment(rs1.getString("DPTID"));	    
	        				help1.setDeptFrom(rs1.getString("DPTSTXT"));
	        
	        				deptlist.add(help1);
	        			}
	        		} catch (SQLException e) {
	        			// TODO Auto-generated catch block
	        			e.printStackTrace();
	        		}
	        		try {
						rs1.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
	        		request.setAttribute("onlydeptlist", deptlist);
	        	}
		
	        	///has map dep,reporting
				 HashMap depMap=new HashMap();
				    String cal="select * from Department where dptid in ("+query2+")";
					ResultSet rsdeo=ad.selectQuery(cal);
					try {
						
						while(rsdeo.next())
						{
							
							depMap.put(rsdeo.getString("dptid"), rsdeo.getString("dptstxt"));
						}
						
					} catch (SQLException e) {
						
						e.printStackTrace();
					}
					HashMap subdepMap=new HashMap();
				   	if(!query3.equalsIgnoreCase(""))
					{
					 
						 String cal2="select * from SUBDEPARTMENT where SDPTID in ("+query3+")";
							ResultSet rsdeo1=ad.selectQuery(cal2);
							try {
								
								while(rsdeo1.next())
								{
									
									subdepMap.put(rsdeo1.getString("SDPTID"), rsdeo1.getString("SDPTID_STXT"));
								}
								
							} catch (SQLException e) {
								
								e.printStackTrace();
							}
					}
					
					
					HashMap repMap=new HashMap();
					if(!query4.equalsIgnoreCase(""))
					{
					 
					    String cal1="select * from REPORTING_GROUP where Grp_ID in ("+query4+")";
						ResultSet rsdrep=ad.selectQuery(cal1);
						try {
							
							while(rsdrep.next())
							{
								
								repMap.put(rsdrep.getString("Grp_ID"), rsdrep.getString("Grp_STXT"));
							}
							
						} catch (SQLException e) {
							
							e.printStackTrace();
						}
					}
			
		
		ResultSet rs = ad.selectQuery(query1);
		try {
			while(rs.next())
			{
				HRApprovalForm help2 = new HRApprovalForm();
				help2.setEmployeeno(rs.getString("Pernr") );
				help2.setEmployeeName(rs.getString("EMP_FULLNAME"));
				help2.setDepartment(rs.getString("DPTID"));
				help2.setDeptTo((String)depMap.get(rs.getString("DPTID")));
				help2.setSubdepartment(rs.getString("SDPTID"));
				help2.setRepgrp(rs.getString("reporting_grp"));
				if(!query4.equalsIgnoreCase(""))
				{
				help2.setRep_et((String)repMap.get(rs.getString("Reporting_Grp")));
				}
				if(!query3.equalsIgnoreCase(""))
				{
				help2.setSubdeptTO((String)subdepMap.get(rs.getString("SDPTID")));
				}
			    help2.setDesignation(rs.getString("DSGSTXT"));
			    
				String qual="select top 1 Priority,Qualification.Qualification,specialization from emp_education_details,QUALIFICATION where user_id='"+rs.getString("PERNR")+"' and emp_education_details.qualification=QUALIFICATION.Id  order by Priority desc";
				ResultSet qal=ad.selectQuery(qual);
				if(qal.next())
				{
					help2.setQualification(qal.getString("Qualification"));
					help2.setSpecialization(qal.getString("specialization"));
				}
				qal.close();
			    
			    help2.setStartTime(rs.getString("In_time").substring(0, 8));
			    help2.setEndTime(rs.getString("Out_time").substring(0, 8));
			    
			    if(rs.getString("Early")!=null)
			    help2.setEarly(rs.getString("Early"));
			    else			    
			    help2.setEarly("00:00:00");	
			    
			    if(rs.getString("late")!=null)
			    help2.setLate(rs.getString("late"));
			    else
			    help2.setLate("00:00:00");	
			    
			    if(rs.getString("total")!=null)
			    help2.setTotal(rs.getString("total"));
			    else
				help2.setTotal("00:00:00");	
			    
			    if(rs.getString("ot")!=null)
				   help2.setOt(rs.getString("ot"));
				    else
					help2.setOt("00:00:00");	
			    
			    help2.setStatus(rs.getString("Status"));
			    help2.setShift(rs.getString("Shift"));
				emplist.add(help2);

			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		query1="";
		
		request.setAttribute("emplist", emplist);
		
		//summary
		String summ="";
/*		if(!(query3.equalsIgnoreCase("") && query4.equalsIgnoreCase("")))
    	{
		 summ="select sum(h.pp) as present,sum(h.aa) as aa,sum(h.od) as od,sum(h.CL) as cl,sum(h.SL) as sl,sum(h.el) as el,sum(h.LP) as lp from"
				+ " (select case when Status like '%PP%' then 1 else 0 end  as pp, case when Status like '%AA%' then 1 else 0 end as AA,case when Status like '%OD%' "
				+ "then 1 else 0 end as OD,case when Status like '%CL%' then 1 else 0 end as CL,case when Status like '%SL%' then 1 else 0 end as SL,case when Status "
				+ "like '%EL%' then 1 else 0 end as EL,case when Status like '%NL%' then 1 else 0 end as LP from emp_official_info ,location ,DESIGNATION,"
				+ "Report_Daily_wise where Location.LOCATION_CODE=emp_official_info.LOCID and  DESIGNATION.DSGID =emp_official_info.DSGID  and "
				+ "emp_official_info.LOCID = '"+request.getParameter("loc")+"'  and Active=1  and emp_official_info.PERNR=Report_Daily_wise.Pernr and Report_Daily_wise.date='"+sqlfromdate+"' "
						+ "and emp_official_info.DPTID in  ("+query2+")and emp_official_info.SDPTID in ("+query3+") and emp_official_info.Reporting_Grp in("+query4+") )h";
    	}
		
		else
		{
			 summ="select sum(h.pp) as present,sum(h.aa) as aa,sum(h.od) as od,sum(h.CL) as cl,sum(h.SL) as sl,sum(h.el) as el,sum(h.LP) as lp from"
					+ " (select case when Status like '%PP%' then 1 else 0 end  as pp, case when Status like '%AA%' then 1 else 0 end as AA,case when Status like '%OD%' "
					+ "then 1 else 0 end as OD,case when Status like '%CL%' then 1 else 0 end as CL,case when Status like '%SL%' then 1 else 0 end as SL,case when Status "
					+ "like '%EL%' then 1 else 0 end as EL,case when Status like '%NL%' then 1 else 0 end as LP from emp_official_info ,location ,DESIGNATION,"
					+ "Report_Daily_wise where Location.LOCATION_CODE=emp_official_info.LOCID and  DESIGNATION.DSGID =emp_official_info.DSGID  and "
					+ "emp_official_info.LOCID = '"+request.getParameter("loc")+"'  and Active=1  and emp_official_info.PERNR=Report_Daily_wise.Pernr and "
							+ "Report_Daily_wise.date='"+sqlfromdate+"' and emp_official_info.DPTID in  ("+query2+") )h";
	    
		}

		ResultSet ac=ad.selectQuery(summ);
		try {
			if(ac.next())
			{
				help.setPresize(ac.getInt("present"));
				help.setAbssize(ac.getInt("aa"));
				help.setOdsize(ac.getInt("od"));
				help.setClsize(ac.getInt("cl"));
				help.setSlsize(ac.getInt("Sl"));
				help.setElsize(ac.getInt("El"));
				help.setLopsize(ac.getInt("lp"));
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}*/
		
		

	
	ArrayList leave = new ArrayList();
	ArrayList onduty = new ArrayList();
	ArrayList lop = new ArrayList();
	ArrayList absence = new ArrayList();
	
	int day = Integer.parseInt(sqlfromdate.substring(8));
	
	//leaves
	String query ="select count(*) as cou from EMP_IN_OUT_Status , "
			+ "emp_official_info ,leave_details,lv_type_m  where year= year('"+sqlfromdate+"') and month = month('"+sqlfromdate+"')"
			+ " and (left(day"+day+",2) like '%CL%' or left(day"+day+",2) like '%SL%' or left(day"+day+",2) like '%EL%' or left(day"+day+",2) like '%ML%' or left(day"+day+",2) like '%CO%')  "
			+ " and   emp_official_info.PERNR=EMP_IN_OUT_Status.PERNR  "
			+ "    "
			+ "and Active='1'   and leave_details.user_id=emp_official_info.PERNR  and '"+sqlfromdate+"' "
			+ "between start_date and end_date AND lv_type_m.lv_typeid=leave_details.leave_type and leave_details.Approvel_Status='Approved'" ;


	if(help.getLocationId()!=null)
	{	

	if(!help.getLocationId().equalsIgnoreCase(""))
	{
		query =query+ " and emp_official_info.LOCID = '"+help.getLocationId()+"' ";
	}

	}

	if(!query2.equalsIgnoreCase(""))
	{
		query=query+" and emp_official_info.DPTID in  ("+query2+") ";
	
	}

	if(!query3.equalsIgnoreCase(""))
	{
		query=query+" and emp_official_info.SDPTID in ("+query3+")  ";
	
	}
	
	if(!query4.equalsIgnoreCase(""))
	{
		query=query+" and emp_official_info.Reporting_Grp in("+query4+") ";
	
	}
	
	
	ResultSet rs4 = ad.selectQuery(query);
	try {
		if(rs4.next())
		{
			help.setLeavesize(rs4.getInt(1));
		}
	} catch (SQLException e1) {
		// TODO Auto-generated catch block
		e1.printStackTrace();
	}
	try {
		rs4.close();
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	

	//lOP
	String querylop ="select count(*) as cou from EMP_IN_OUT_Status , "
			+ "emp_official_info,department ,leave_details,lv_type_m  where year= year('"+sqlfromdate+"') and month = month('"+sqlfromdate+"')"
			+ " and left(day"+day+",2) like '%NL%'  "
			+ " and   emp_official_info.PERNR=EMP_IN_OUT_Status.PERNR   "
			+ "     "
			+ "and Active='1'   and leave_details.user_id=emp_official_info.PERNR  and '"+sqlfromdate+"' "
			+ "between start_date and end_date AND lv_type_m.lv_typeid=leave_details.leave_type and leave_details.Approvel_Status='Approved'" ;


	if(help.getLocationId()!=null)
	{	

	if(!help.getLocationId().equalsIgnoreCase(""))
	{
		querylop =querylop+ " and emp_official_info.LOCID = '"+help.getLocationId()+"' ";
	}

	}

	if(!query2.equalsIgnoreCase(""))
	{
		querylop=querylop+" and emp_official_info.DPTID in  ("+query2+") ";
	
	}

	if(!query3.equalsIgnoreCase(""))
	{
		querylop=querylop+" and emp_official_info.SDPTID in ("+query3+")  ";
	
	}
	
	if(!query4.equalsIgnoreCase(""))
	{
		querylop=querylop+" and emp_official_info.Reporting_Grp in("+query4+") ";
	
	}
	
	ResultSet rs5w = ad.selectQuery(querylop);
	try {
		if(rs5w.next())
		{
			help.setLopsize(rs5w.getInt(1));
		}
	} catch (SQLException e1) {
		// TODO Auto-generated catch block
		e1.printStackTrace();
	}
	try {
		rs5w.close();
	} catch (SQLException e2) {
		// TODO Auto-generated catch block
		e2.printStackTrace();
	}
 ///onduty
	String query1 ="select count(*) as cou from EMP_IN_OUT_Status , "
			+ "emp_official_info   ,OnDuty_details  where year= year('"+sqlfromdate+"') and month = month('"+sqlfromdate+"')"
			+ " and left(day"+day+",2) like '%OD%'  "
			+ " and   emp_official_info.PERNR=EMP_IN_OUT_Status.PERNR  "
			+ "   "
			+ "and Active='1'   and OnDuty_details.user_id=emp_official_info.PERNR  and '"+sqlfromdate+"' "
			+ "between start_date and end_date and OnDuty_details.Approver_Status='Approved'";


	if(help.getLocationId()!=null)
	{	

	if(!help.getLocationId().equalsIgnoreCase(""))
	{
		query1 =query1+ " and emp_official_info.LOCID = '"+help.getLocationId()+"' ";
	}

	}

	if(!query2.equalsIgnoreCase(""))
	{
		query1=query1+" and emp_official_info.DPTID in  ("+query2+") ";
	
	}

	if(!query3.equalsIgnoreCase(""))
	{
		query1=query1+" and emp_official_info.SDPTID in ("+query3+")  ";
	
	}
	
	if(!query4.equalsIgnoreCase(""))
	{
		query1=query1+" and emp_official_info.Reporting_Grp in("+query4+") ";
	
	}
	

	ResultSet r5w = ad.selectQuery(query1);
	try {
		if(r5w.next())
		{
			help.setOdsize(r5w.getInt(1));
		}
	} catch (SQLException e1) {
		// TODO Auto-generated catch block
		e1.printStackTrace();
	}


	try {
		r5w.close();
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}


	///Absenteees 

	String query2="select count(*) as cou from EMP_IN_OUT_Status , emp_official_info   " 
				+ "  where year= year('"+sqlfromdate+"') and month = month('"+sqlfromdate+"') and day"+day+"='AAAA' and "
				+ "  emp_official_info.PERNR=EMP_IN_OUT_Status.PERNR   "
				+ "   and Swipe_Count !=0 and Active='1'  ";

	if(help.getLocationId()!=null)
	{	

	if(!help.getLocationId().equalsIgnoreCase(""))
	{
		query2 =query2+ " and emp_official_info.LocID = '"+help.getLocationId()+"' ";
	}

	}

	if(!this.query2.equalsIgnoreCase(""))
	{
		query2=query2+" and emp_official_info.DPTID in  ("+this.query2+") ";
	
	}

	if(!query3.equalsIgnoreCase(""))
	{
		query2=query2+" and emp_official_info.SDPTID in ("+query3+")  ";
	
	}
	
	if(!query4.equalsIgnoreCase(""))
	{
		query2=query2+" and emp_official_info.Reporting_Grp in("+query4+") ";
	
	}
	
	

	ResultSet r5wt = ad.selectQuery(query2);
	try {
		if(r5wt.next())
		{
			help.setAbssize(r5wt.getInt(1));
		}
	} catch (SQLException e1) {
		// TODO Auto-generated catch block
		e1.printStackTrace();
	}
	
	String present = "select count(*) as cou from EMP_IN_OUT_Status , emp_official_info   " 
			+ "  where year= year('"+sqlfromdate+"') and month = month('"+sqlfromdate+"') and day"+day+" like '%PP%'  and "
			+ "  emp_official_info.PERNR=EMP_IN_OUT_Status.PERNR   "
			+ "    and Swipe_Count !=0 and Active='1'  ";
	if(help.getLocationId()!=null)
	{	

	if(!help.getLocationId().equalsIgnoreCase(""))
	{
		present =present+ " and emp_official_info.LocID = '"+help.getLocationId()+"' ";
	}

	}

	if(!this.query2.equalsIgnoreCase(""))
	{
		present=present+" and emp_official_info.DPTID in  ("+this.query2+") ";
	
	}

	if(!query3.equalsIgnoreCase(""))
	{
		present=present+" and emp_official_info.SDPTID in ("+query3+")  ";
	
	}
	
	if(!query4.equalsIgnoreCase(""))
	{
		present=present+" and emp_official_info.Reporting_Grp in("+query4+") ";
	
	}
	ResultSet rsp4 = ad.selectQuery(present);
	try {
		if(rsp4.next())
		{
			help.setPresize(rsp4.getInt(1));
		}
	} catch (SQLException e1) {
		// TODO Auto-generated catch block
		e1.printStackTrace();
	}
	try {
		rsp4.close();
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
		
			}
	        
	        if( help.getSummbrkup().equalsIgnoreCase("Absent"))
			{
	        	
	        	
	        	
		    		
	        	
	        	String list="select distinct DEPARTMENT.DPTID,DPTSTXT  from DEPARTMENT,emp_official_info where LOCID='"+request.getParameter("loc")+"' and emp_official_info.DPTID=DEPARTMENT.DPTID  "
	    				+ " and DEPARTMENT.dptid in ("+query2+") order by DPTSTXT";
	    		
	    		
	    		
	    		ResultSet rs1 = ad.selectQuery(list);
	    		try {
	    			while(rs1.next())
	    			{
	    				HRApprovalForm help1 = new HRApprovalForm();
	    				help1.setDepartment(rs1.getString("DPTID"));	    				    			
	    				help1.setDeptFrom(rs1.getString("DPTSTXT"));
	    				
	    				deptlist.add(help1);
	    			}
	    		} catch (SQLException e) {
	    			// TODO Auto-generated catch block
	    			e.printStackTrace();
	    		}try {
					rs1.close();
				} catch (SQLException e2) {
					// TODO Auto-generated catch block
					e2.printStackTrace();
				}
	    		
	    		request.setAttribute("deptlist", deptlist);
	    		
	    		
	    		String from[]=help.getFromDate().split("/");
	    		String fromday=from[0];
	    		String frommon=from[1];
	    		String fromyear=from[2];
	    		String sqlfrom=from[2]+"-"+from[1]+"-"+from[0];
	    		
	    		String to[]=help.getToDate().split("/");
	    		String today=to[0];
	    		String tomon=to[1];
	    		String toyear=to[2];
	    		String sqlto=to[2]+"-"+to[1]+"-"+to[0];
	    		
	    		String countdays="SELECT day(thedate) as day FROM dbo.ExplodeDates('"+sqlfrom+"','"+sqlto+"') as thedate";
	    	    ResultSet rscount=ad.selectQuery(countdays);
	    	    try {
	    			while(rscount.next())
	    			{
	                    HRApprovalForm date=new  HRApprovalForm();
	                    date.setDay(rscount.getString("day"));
	                    date.setDate("day"+rscount.getString("day"));
	                    datelist.add(date);
	    			}
	    			
	    			request.setAttribute("datelist", datelist);
	    	    
	    	    }
	    			catch (SQLException e) {
		    			// TODO Auto-generated catch block
		    			e.printStackTrace();
		    		}
	    	    try {
					rscount.close();
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
	    		String abs="";
	    		if(frommon.equalsIgnoreCase(tomon))
	    		
	    		{
	    			if(!(query3.equalsIgnoreCase("") && query4.equalsIgnoreCase("")))
		        	{
	    		 abs=" SELECT * from( select "+currentabsentdays(fromyear,frommon, Integer.parseInt(fromday), Integer.parseInt(today))+" as day,EMP_IN_OUT_Status.*,emp_official_info.EMP_FULLNAME,"
	    		 		+ "emp_official_info.DPTID  from EMP_IN_OUT_Status,emp_official_info where  month ='"+frommon+"' and year ='"+fromyear+"' "
			+ "and EMP_IN_OUT_Status.Pernr=emp_official_info.PERNR and emp_official_info.PERNR in (select emp_official_info.pernr from "
			+ "emp_official_info  where   emp_official_info.LOCID = '"+help.getLocationId()+"'  and Active=1  and emp_official_info.DPTID in "
					+ " ("+query2+")  and emp_official_info.SDPTID in ("+query3+")   and emp_official_info.Reporting_Grp in("+query4+")) )t where day not like '%PP%'  and day not like '%EL%' and day not like '%CL%'and day not like '%SL%' and day not like '%NL%' and day not like '%ML%' and day not like '%CO% '  and day not like '%OD%'";
		        	}
	    			else
	    			{
	    				abs=" SELECT * from( select "+currentabsentdays(fromyear,frommon, Integer.parseInt(fromday), Integer.parseInt(today))+" as day,EMP_IN_OUT_Status.*,emp_official_info.EMP_FULLNAME,"
	    	    		 		+ "emp_official_info.DPTID  from EMP_IN_OUT_Status,emp_official_info where  month ='"+frommon+"' and year ='"+fromyear+"' "
	    			+ "and EMP_IN_OUT_Status.Pernr=emp_official_info.PERNR and emp_official_info.PERNR in (select emp_official_info.pernr from "
	    			+ "emp_official_info  where   emp_official_info.LOCID = '"+help.getLocationId()+"'  and Active=1  and emp_official_info.DPTID in "
	    					+ " ("+query2+") ) )t where day not like '%PP%'  and day not like '%EL%' and day not like '%CL%'and day not like '%SL%' and day not like '%NL%' and day not like '%ML%' and day not like '%CO% '  and day not like '%OD%'";
	    		
	    			}
	    		 
	    		}
	    		else
	    		{
	    			if(!(query3.equalsIgnoreCase("") && query4.equalsIgnoreCase("")))
		        	{
	    			abs="select (t.day+l.day) as sumday,emp_official_info.PERNR,emp_official_info.EMP_FULLNAME,emp_official_info.DPTID,t.*,l.* from "
	    					+ "( select "+prevabsentdays(fromyear, frommon,Integer.parseInt(fromday))+" as day, Pernr,day21,day22,day23,day24,day25,day26,day27,day28,day29,day30,day31 "
	    					+ " from EMP_IN_OUT_Status where   month ='"+frommon+"' and year ='"+fromyear+"')t,	"
	    					+ "( select "+currentmonthdays(toyear, tomon, Integer.parseInt(today))+" as day,"
	    					+ "pernr,day1,day2,day3,day4,day5,day6,day7,day8,day9,day10,day11,day12,day13,day14,day15,day16,day17,day18,day19,day20  from"
	    					+ " EMP_IN_OUT_Status where month ='"+tomon+"' and year ='"+toyear+"')l,emp_official_info where emp_official_info.LOCID='"+help.getLocationId()+"' and Active=1 "
	    					+ "and emp_official_info.DPTID in("+query2+") and emp_official_info.SDPTID in ("+query3+")   and emp_official_info.Reporting_Grp in("+query4+") and "
	    					+ "emp_official_info.PERNR=t.Pernr and t.Pernr=l.Pernr and (t.day+l.day) not like '%PP%'  and (t.day+l.day) not like '%EL%' and "
	    					+ "(t.day+l.day) not like '%CL%'and (t.day+l.day) not like '%SL%' and (t.day+l.day) not like '%NL%' and (t.day+l.day) not like '%ML%' and "
	    					+ "(t.day+l.day) not like '%CO% '  and (t.day+l.day) not like '%OD%'";
		        	}
	    			else
	    			{
	    				abs="select (t.day+l.day) as sumday,emp_official_info.PERNR,emp_official_info.EMP_FULLNAME,emp_official_info.DPTID,t.*,l.* from "
		    					+ "( select "+prevabsentdays(fromyear, frommon,Integer.parseInt(fromday))+" as day, Pernr,day21,day22,day23,day24,day25,day26,day27,day28,day29,day30,day31 "
		    					+ " from EMP_IN_OUT_Status where   month ='"+frommon+"' and year ='"+fromyear+"')t,	"
		    					+ "( select "+currentmonthdays(toyear, tomon, Integer.parseInt(today))+" as day,"
		    					+ "pernr,day1,day2,day3,day4,day5,day6,day7,day8,day9,day10,day11,day12,day13,day14,day15,day16,day17,day18,day19,day20  from"
		    					+ " EMP_IN_OUT_Status where month ='"+tomon+"' and year ='"+toyear+"')l,emp_official_info where emp_official_info.LOCID='"+help.getLocationId()+"'  and Active=1 "
		    					+ "and emp_official_info.DPTID in("+query2+")  and "
		    					+ "emp_official_info.PERNR=t.Pernr and t.Pernr=l.Pernr and (t.day+l.day) not like '%PP%'  and (t.day+l.day) not like '%EL%' and "
		    					+ "(t.day+l.day) not like '%CL%'and (t.day+l.day) not like '%SL%' and (t.day+l.day) not like '%NL%' and (t.day+l.day) not like '%ML%' and "
		    					+ "(t.day+l.day) not like '%CO% '  and (t.day+l.day) not like '%OD%'";	
	    			}
	    		}
	    		
	    		ResultSet rs = ad.selectQuery(abs);
	    		try {
	    			while(rs.next())
	    			{
	    				HRApprovalForm help2 = new HRApprovalForm();
	    				help2.setEmployeeno(rs.getString("Pernr") );
	    				help2.setEmployeeName(rs.getString("EMP_FULLNAME"));
	    				help2.setDepartment(rs.getString("DPTID"));
	    		
	    				help2.setDay1(rs.getString("day1"));								
	    				help2.setDay2(rs.getString("day2"));
	    				help2.setDay3(rs.getString("day3"));
	    				help2.setDay4(rs.getString("day4"));
	    				help2.setDay5(rs.getString("day5"));
	    				help2.setDay6(rs.getString("day6"));
	    				help2.setDay7(rs.getString("day7"));
	    				help2.setDay8(rs.getString("day8"));
	    				help2.setDay9(rs.getString("day9"));
	    				help2.setDay10(rs.getString("day10"));
	    				help2.setDay11(rs.getString("day11"));
	    				help2.setDay12(rs.getString("day12"));
	    				help2.setDay13(rs.getString("day13"));
	    				help2.setDay14(rs.getString("day14"));
	    				help2.setDay15(rs.getString("day15"));
	    				help2.setDay16(rs.getString("day16"));
	    				help2.setDay17(rs.getString("day17"));
	    				help2.setDay18(rs.getString("day18"));
	    				help2.setDay19(rs.getString("day19"));
	    				help2.setDay20(rs.getString("day20"));
	    				help2.setDay21(rs.getString("day21"));
	    				help2.setDay22(rs.getString("day22"));
	    				help2.setDay23(rs.getString("day23"));
	    				help2.setDay24(rs.getString("day24"));
	    				help2.setDay25(rs.getString("day25"));
	    				help2.setDay26(rs.getString("day26"));
	    				help2.setDay27(rs.getString("day27"));
	    				help2.setDay28(rs.getString("day28"));
	    				help2.setDay29(rs.getString("day29"));
	    				help2.setDay30(rs.getString("day30"));
	    				help2.setDay31(rs.getString("day31"));
	    			    
	    			    
	    			    
	    			    abslist.add(help2);

	    			}
	    		} catch (SQLException e) {
	    			// TODO Auto-generated catch block
	    			e.printStackTrace();
	    		}
	    		
	    		try {
					rs.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	    		
	    		finally{
	    			query1="";
	    			query2="";
	    			query3="";
	    			query4="";
	    			query5="";
	    			query6="";
	    		}
	    		request.setAttribute("abslist", abslist);
	        	
	        	
			}
		
		

			        return mapping.findForward("displaydailyPerformancereport");

	 }
	
	public ActionForward casualabsenteeismexe(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
		try {
			Thread.sleep(2000);
		} catch (InterruptedException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}
		
			HRApprovalForm help = (HRApprovalForm) form;
			String sqlfromdate="";
			String sqltodate="";
			String exportdate="";


		ArrayList deptlist = new ArrayList();
		ArrayList emplist = new ArrayList();
		
		ArrayList abslist = new ArrayList();
		ArrayList datelist = new ArrayList();

		   help.setFromDate(request.getParameter("date"));
		   
		   String st[]=request.getParameter("date").split("/");
		   sqlfromdate=st[2]+"-"+st[1]+"-"+st[0];
		   
		   String st1[]=request.getParameter("todate").split("/");
		   sqltodate=st1[2]+"-"+st1[0]+"-"+st1[1];
		   	      
		  String sqltodate2=st1[1]+"/"+st1[0]+"/"+st1[2];	  
		   help.setToDate(sqltodate2);
		   
		  // help.setToDate(request.getParameter("todate"));
		  // request.getParameter("date")
		 /*  int s = Integer.parseInt((st1[0]))-1;
		   String st22 =String.valueOf(s);
		   String   sqltodate3=st22+"/"+st1[0]+"/"+st1[2];	  
		   help.setMidDate(sqltodate2);*/
		   
	        help.setLocationId(request.getParameter("loc"));
	        help.setSummbrkup(request.getParameter("summbrkup"));
	        
	         if( help.getSummbrkup().equalsIgnoreCase("All") )
			{

	        	if(!(query3.equalsIgnoreCase("")))
	        	{
		String list="select distinct DEPARTMENT.DPTID,SUBDEPARTMENT.SDPTID,Grp_ID,DPTSTXT,SDPTID_STXT,Grp_STXT  from DEPARTMENT,SUBDEPARTMENT,"
				+ "REPORTING_GROUP,emp_official_info where LOCID='"+request.getParameter("loc")+"' and emp_official_info.DPTID=DEPARTMENT.DPTID and emp_official_info.SDPTID=SUBDEPARTMENT.SDPTID "
				+ "and emp_official_info.Reporting_Grp=REPORTING_GROUP.Grp_ID  and DEPARTMENT.dptid in ("+query2+") and SUBDEPARTMENT.SDPTID in ("+query3+") and REPORTING_GROUP.Grp_ID in("+query4+") order by DPTID,SDPTID,Grp_ID";
			ResultSet rs1 = ad.selectQuery(list);
		try {
			while(rs1.next())
			{
				HRApprovalForm help1 = new HRApprovalForm();
				help1.setDepartment(rs1.getString("DPTID"));
				help1.setSubdepartment(rs1.getString("SDPTID"));
				help1.setRepgrp(rs1.getString("Grp_ID"));
				help1.setDeptFrom(rs1.getString("DPTSTXT"));
				help1.setDeptTo(rs1.getString("SDPTID_STXT"));
				help1.setDesgTo(rs1.getString("Grp_STXT"));
				deptlist.add(help1);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs1.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		request.setAttribute("deptlist", deptlist);
		
	        	}
	        	else
	        	{

	        		String list="select distinct DEPARTMENT.DPTID,DPTSTXT  from DEPARTMENT ,emp_official_info where LOCID='"+request.getParameter("loc")+"' and emp_official_info.DPTID=DEPARTMENT.DPTID  "
	        				+ "  and DEPARTMENT.dptid in ("+query2+")  order by DPTID";
	        		
	        		
	        		
	        		ResultSet rs1 = ad.selectQuery(list);
	        		try {
	        			while(rs1.next())
	        			{
	        				HRApprovalForm help1 = new HRApprovalForm();
	        				help1.setDepartment(rs1.getString("DPTID"));	    
	        				help1.setDeptFrom(rs1.getString("DPTSTXT"));
	        
	        				deptlist.add(help1);
	        			}
	        		} catch (SQLException e) {
	        			// TODO Auto-generated catch block
	        			e.printStackTrace();
	        		}
	        		try {
						rs1.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
	        		request.setAttribute("onlydeptlist", deptlist);
	        	}
		
	        	///has map dep,reporting
				 HashMap depMap=new HashMap();
				    String cal="select * from Department where dptid in ("+query2+")";
					ResultSet rsdeo=ad.selectQuery(cal);
					try {
						
						while(rsdeo.next())
						{
							
							depMap.put(rsdeo.getString("dptid"), rsdeo.getString("dptstxt"));
						}
						
					} catch (SQLException e) {
						
						e.printStackTrace();
					}
					HashMap subdepMap=new HashMap();
				   	if(!query3.equalsIgnoreCase(""))
					{
					 
						 String cal2="select * from SUBDEPARTMENT where SDPTID in ("+query3+")";
							ResultSet rsdeo1=ad.selectQuery(cal2);
							try {
								
								while(rsdeo1.next())
								{
									
									subdepMap.put(rsdeo1.getString("SDPTID"), rsdeo1.getString("SDPTID_STXT"));
								}
								
							} catch (SQLException e) {
								
								e.printStackTrace();
							}
					}
					
					
					HashMap repMap=new HashMap();
					if(!query4.equalsIgnoreCase(""))
					{
					 
					    String cal1="select * from REPORTING_GROUP where Grp_ID in ("+query4+")";
						ResultSet rsdrep=ad.selectQuery(cal1);
						try {
							
							while(rsdrep.next())
							{
								
								repMap.put(rsdrep.getString("Grp_ID"), rsdrep.getString("Grp_STXT"));
							}
							
						} catch (SQLException e) {
							
							e.printStackTrace();
						}
					}
			
		
		ResultSet rs = ad.selectQuery(query1);
		try {
			while(rs.next())
			{
				HRApprovalForm help2 = new HRApprovalForm();
				help2.setEmployeeno(rs.getString("Pernr") );
				help2.setEmployeeName(rs.getString("EMP_FULLNAME"));
				help2.setDepartment(rs.getString("DPTID"));
				help2.setDeptTo((String)depMap.get(rs.getString("DPTID")));
				help2.setSubdepartment(rs.getString("SDPTID"));
				help2.setRepgrp(rs.getString("reporting_grp"));
				if(!query4.equalsIgnoreCase(""))
				{
				help2.setRep_et((String)repMap.get(rs.getString("Reporting_Grp")));
				}
				if(!query3.equalsIgnoreCase(""))
				{
				help2.setSubdeptTO((String)subdepMap.get(rs.getString("SDPTID")));
				}
			    help2.setDesignation(rs.getString("DSGSTXT"));
			    
				String qual="select top 1 Priority,Qualification.Qualification,specialization from emp_education_details,QUALIFICATION where user_id='"+rs.getString("PERNR")+"' and emp_education_details.qualification=QUALIFICATION.Id  order by Priority desc";
				ResultSet qal=ad.selectQuery(qual);
				if(qal.next())
				{
					help2.setQualification(qal.getString("Qualification"));
					help2.setSpecialization(qal.getString("specialization"));
				}
				qal.close();
			    
			    help2.setStartTime(rs.getString("In_time").substring(0, 8));
			    help2.setEndTime(rs.getString("Out_time").substring(0, 8));
			    
			    if(rs.getString("Early")!=null)
			    help2.setEarly(rs.getString("Early"));
			    else			    
			    help2.setEarly("00:00:00");	
			    
			    if(rs.getString("late")!=null)
			    help2.setLate(rs.getString("late"));
			    else
			    help2.setLate("00:00:00");	
			    
			    if(rs.getString("total")!=null)
			    help2.setTotal(rs.getString("total"));
			    else
				help2.setTotal("00:00:00");	
			    
			    if(rs.getString("ot")!=null)
				   help2.setOt(rs.getString("ot"));
				    else
					help2.setOt("00:00:00");	
			    
			    help2.setStatus(rs.getString("Status"));
			    help2.setShift(rs.getString("Shift"));
				emplist.add(help2);

			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		query1="";
		request.setAttribute("emplist", emplist);
		
		//summary
		String summ="";
		if(!(query3.equalsIgnoreCase("") && query4.equalsIgnoreCase("")))
    	{
		 summ="select sum(h.pp) as present,sum(h.aa) as aa,sum(h.od) as od,sum(h.CL) as cl,sum(h.SL) as sl,sum(h.el) as el,sum(h.LP) as lp from"
				+ " (select case when Status like '%PP%' then 1 else 0 end  as pp, case when Status like '%AA%' then 1 else 0 end as AA,case when Status like '%OD%' "
				+ "then 1 else 0 end as OD,case when Status like '%CL%' then 1 else 0 end as CL,case when Status like '%SL%' then 1 else 0 end as SL,case when Status "
				+ "like '%EL%' then 1 else 0 end as EL,case when Status like '%NL%' then 1 else 0 end as LP from emp_official_info ,location ,DESIGNATION,"
				+ "Report_Daily_wise where Location.LOCATION_CODE=emp_official_info.LOCID and  DESIGNATION.DSGID =emp_official_info.DSGID  and "
				+ "emp_official_info.LOCID = '"+request.getParameter("loc")+"'  and Active=1  and emp_official_info.PERNR=Report_Daily_wise.Pernr and Report_Daily_wise.date='"+sqlfromdate+"' "
						+ "and emp_official_info.DPTID in  ("+query2+")and emp_official_info.SDPTID in ("+query3+") and emp_official_info.Reporting_Grp in("+query4+") )h";
    	}
		
		else
		{
			 summ="select sum(h.pp) as present,sum(h.aa) as aa,sum(h.od) as od,sum(h.CL) as cl,sum(h.SL) as sl,sum(h.el) as el,sum(h.LP) as lp from"
					+ " (select case when Status like '%PP%' then 1 else 0 end  as pp, case when Status like '%AA%' then 1 else 0 end as AA,case when Status like '%OD%' "
					+ "then 1 else 0 end as OD,case when Status like '%CL%' then 1 else 0 end as CL,case when Status like '%SL%' then 1 else 0 end as SL,case when Status "
					+ "like '%EL%' then 1 else 0 end as EL,case when Status like '%NL%' then 1 else 0 end as LP from emp_official_info ,location ,DESIGNATION,"
					+ "Report_Daily_wise where Location.LOCATION_CODE=emp_official_info.LOCID and  DESIGNATION.DSGID =emp_official_info.DSGID  and "
					+ "emp_official_info.LOCID = '"+request.getParameter("loc")+"'  and Active=1  and emp_official_info.PERNR=Report_Daily_wise.Pernr and "
							+ "Report_Daily_wise.date='"+sqlfromdate+"' and emp_official_info.DPTID in  ("+query2+") )h";
	    
		}

		ResultSet ac=ad.selectQuery(summ);
		try {
			if(ac.next())
			{
				help.setPresize(ac.getInt("present"));
				help.setAbssize(ac.getInt("aa"));
				help.setOdsize(ac.getInt("od"));
				help.setClsize(ac.getInt("cl"));
				help.setSlsize(ac.getInt("Sl"));
				help.setElsize(ac.getInt("El"));
				help.setLopsize(ac.getInt("lp"));
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		

	
	ArrayList leave = new ArrayList();
	ArrayList onduty = new ArrayList();
	ArrayList lop = new ArrayList();
	ArrayList absence = new ArrayList();
	
	int day = Integer.parseInt(sqlfromdate.substring(8));
	
	//leaves
	String query ="select count(*) as cou from EMP_IN_OUT_Status , "
			+ "emp_official_info ,leave_details,lv_type_m  where year= year('"+sqlfromdate+"') and month = month('"+sqlfromdate+"')"
			+ " and (left(day"+day+",2) like '%CL%' or left(day"+day+",2) like '%SL%' or left(day"+day+",2) like '%EL%' or left(day"+day+",2) like '%ML%' or left(day"+day+",2) like '%CO%')  "
			+ " and   emp_official_info.PERNR=EMP_IN_OUT_Status.PERNR  "
			+ "    "
			+ "and Active='1'   and leave_details.user_id=emp_official_info.PERNR  and '"+sqlfromdate+"' "
			+ "between start_date and end_date AND lv_type_m.lv_typeid=leave_details.leave_type and leave_details.Approvel_Status='Approved'" ;


	if(help.getLocationId()!=null)
	{	

	if(!help.getLocationId().equalsIgnoreCase(""))
	{
		query =query+ " and emp_official_info.LOCID = '"+help.getLocationId()+"' ";
	}

	}

	if(!query2.equalsIgnoreCase(""))
	{
		query=query+" and emp_official_info.DPTID in  ("+query2+") ";
	
	}

	if(!query3.equalsIgnoreCase(""))
	{
		query=query+" and emp_official_info.SDPTID in ("+query3+")  ";
	
	}
	
	if(!query4.equalsIgnoreCase(""))
	{
		query=query+" and emp_official_info.Reporting_Grp in("+query4+") ";
	
	}
	
	
	ResultSet rs4 = ad.selectQuery(query);
	try {
		if(rs4.next())
		{
			help.setLeavesize(rs4.getInt(1));
		}
	} catch (SQLException e1) {
		// TODO Auto-generated catch block
		e1.printStackTrace();
	}
	try {
		rs4.close();
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	

	//lOP
	String querylop ="select count(*) as cou from EMP_IN_OUT_Status , "
			+ "emp_official_info,department ,leave_details,lv_type_m  where year= year('"+sqlfromdate+"') and month = month('"+sqlfromdate+"')"
			+ " and left(day"+day+",2) like '%NL%'  "
			+ " and   emp_official_info.PERNR=EMP_IN_OUT_Status.PERNR   "
			+ "     "
			+ "and Active='1'   and leave_details.user_id=emp_official_info.PERNR  and '"+sqlfromdate+"' "
			+ "between start_date and end_date AND lv_type_m.lv_typeid=leave_details.leave_type and leave_details.Approvel_Status='Approved'" ;


	if(help.getLocationId()!=null)
	{	

	if(!help.getLocationId().equalsIgnoreCase(""))
	{
		querylop =querylop+ " and emp_official_info.LOCID = '"+help.getLocationId()+"' ";
	}

	}

	if(!query2.equalsIgnoreCase(""))
	{
		querylop=querylop+" and emp_official_info.DPTID in  ("+query2+") ";
	
	}

	if(!query3.equalsIgnoreCase(""))
	{
		querylop=querylop+" and emp_official_info.SDPTID in ("+query3+")  ";
	
	}
	
	if(!query4.equalsIgnoreCase(""))
	{
		querylop=querylop+" and emp_official_info.Reporting_Grp in("+query4+") ";
	
	}
	
	ResultSet rs5w = ad.selectQuery(querylop);
	try {
		if(rs5w.next())
		{
			help.setLopsize(rs5w.getInt(1));
		}
	} catch (SQLException e1) {
		// TODO Auto-generated catch block
		e1.printStackTrace();
	}
	try {
		rs5w.close();
	} catch (SQLException e2) {
		// TODO Auto-generated catch block
		e2.printStackTrace();
	}
 ///onduty
	String query1 ="select count(*) as cou from EMP_IN_OUT_Status , "
			+ "emp_official_info   ,OnDuty_details  where year= year('"+sqlfromdate+"') and month = month('"+sqlfromdate+"')"
			+ " and left(day"+day+",2) like '%OD%'  "
			+ " and   emp_official_info.PERNR=EMP_IN_OUT_Status.PERNR  "
			+ "   "
			+ "and Active='1'   and OnDuty_details.user_id=emp_official_info.PERNR  and '"+sqlfromdate+"' "
			+ "between start_date and end_date and OnDuty_details.Approver_Status='Approved'";


	if(help.getLocationId()!=null)
	{	

	if(!help.getLocationId().equalsIgnoreCase(""))
	{
		query1 =query1+ " and emp_official_info.LOCID = '"+help.getLocationId()+"' ";
	}

	}

	if(!query2.equalsIgnoreCase(""))
	{
		query1=query1+" and emp_official_info.DPTID in  ("+query2+") ";
	
	}

	if(!query3.equalsIgnoreCase(""))
	{
		query1=query1+" and emp_official_info.SDPTID in ("+query3+")  ";
	
	}
	
	if(!query4.equalsIgnoreCase(""))
	{
		query1=query1+" and emp_official_info.Reporting_Grp in("+query4+") ";
	
	}
	

	ResultSet r5w = ad.selectQuery(query1);
	try {
		if(r5w.next())
		{
			help.setOdsize(r5w.getInt(1));
		}
	} catch (SQLException e1) {
		// TODO Auto-generated catch block
		e1.printStackTrace();
	}


	try {
		r5w.close();
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}


	///Absenteees 

	String query2="select count(*) as cou from EMP_IN_OUT_Status , emp_official_info   " 
				+ "  where year= year('"+sqlfromdate+"') and month = month('"+sqlfromdate+"') and day"+day+"='AAAA' and "
				+ "  emp_official_info.PERNR=EMP_IN_OUT_Status.PERNR   "
				+ "   and Swipe_Count !=0 and Active='1'  ";

	if(help.getLocationId()!=null)
	{	

	if(!help.getLocationId().equalsIgnoreCase(""))
	{
		query2 =query2+ " and emp_official_info.LocID = '"+help.getLocationId()+"' ";
	}

	}

	if(!this.query2.equalsIgnoreCase(""))
	{
		query2=query2+" and emp_official_info.DPTID in  ("+this.query2+") ";
	
	}

	if(!query3.equalsIgnoreCase(""))
	{
		query2=query2+" and emp_official_info.SDPTID in ("+query3+")  ";
	
	}
	
	if(!query4.equalsIgnoreCase(""))
	{
		query2=query2+" and emp_official_info.Reporting_Grp in("+query4+") ";
	
	}
	
	

	ResultSet r5wt = ad.selectQuery(query2);
	try {
		if(r5wt.next())
		{
			help.setAbssize(r5wt.getInt(1));
		}
	} catch (SQLException e1) {
		// TODO Auto-generated catch block
		e1.printStackTrace();
	}
	
	String present = "select count(*) as cou from EMP_IN_OUT_Status , emp_official_info   " 
			+ "  where year= year('"+sqlfromdate+"') and month = month('"+sqlfromdate+"') and day"+day+" like '%PP%'  and "
			+ "  emp_official_info.PERNR=EMP_IN_OUT_Status.PERNR   "
			+ "    and Swipe_Count !=0 and Active='1'  ";
	if(help.getLocationId()!=null)
	{	

	if(!help.getLocationId().equalsIgnoreCase(""))
	{
		present =present+ " and emp_official_info.LocID = '"+help.getLocationId()+"' ";
	}

	}

	if(!this.query2.equalsIgnoreCase(""))
	{
		present=present+" and emp_official_info.DPTID in  ("+this.query2+") ";
	
	}

	if(!query3.equalsIgnoreCase(""))
	{
		present=present+" and emp_official_info.SDPTID in ("+query3+")  ";
	
	}
	
	if(!query4.equalsIgnoreCase(""))
	{
		present=present+" and emp_official_info.Reporting_Grp in("+query4+") ";
	
	}
	ResultSet rsp4 = ad.selectQuery(present);
	try {
		if(rsp4.next())
		{
			help.setPresize(rsp4.getInt(1));
		}
	} catch (SQLException e1) {
		// TODO Auto-generated catch block
		e1.printStackTrace();
	}
	try {
		rsp4.close();
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
		
			}
	        
	        if( help.getSummbrkup().equalsIgnoreCase("Absent"))
			{
	        	
	        	
	        	
		    		
	        	
	        	String list="select distinct DEPARTMENT.DPTID,DPTSTXT  from DEPARTMENT,emp_official_info where LOCID='"+request.getParameter("loc")+"' and emp_official_info.DPTID=DEPARTMENT.DPTID  "
	    				+ " and DEPARTMENT.dptid in ("+query2+") order by DPTID";
	    		
	    		
	    		
	    		ResultSet rs1 = ad.selectQuery(list);
	    		try {
	    			while(rs1.next())
	    			{
	    				HRApprovalForm help1 = new HRApprovalForm();
	    				help1.setDepartment(rs1.getString("DPTID"));	    				    			
	    				help1.setDeptFrom(rs1.getString("DPTSTXT"));
	    				
	    				deptlist.add(help1);
	    			}
	    		} catch (SQLException e) {
	    			// TODO Auto-generated catch block
	    			e.printStackTrace();
	    		}try {
					rs1.close();
				} catch (SQLException e2) {
					// TODO Auto-generated catch block
					e2.printStackTrace();
				}
	    		
	    		request.setAttribute("deptlist", deptlist);
	    		
	    		
	    		String from[]=help.getFromDate().split("/");
	    		String fromday=from[0];
	    		String frommon=from[1];
	    		String fromyear=from[2];
	    		String sqlfrom=from[2]+"-"+from[1]+"-"+from[0];
	    		
	    		String to[]=help.getToDate().split("/");
	    		String today=to[0];
	    		String tomon=to[1];
	    		String toyear=to[2];
	    		String sqlto=to[2]+"-"+to[1]+"-"+to[0];
	    		
	    		String countdays="SELECT day(thedate) as day FROM dbo.ExplodeDates('"+sqlfrom+"','"+sqlto+"') as thedate";
	    	    ResultSet rscount=ad.selectQuery(countdays);
	    	    try {
	    			while(rscount.next())
	    			{
	                   
	                    HRApprovalForm date=new  HRApprovalForm();
	                    date.setDay(rscount.getString("day"));
	                    date.setDate("day"+rscount.getString("day"));
	                    datelist.add(date);
	    			}
	    			
	    			request.setAttribute("datelist", datelist);
	    	    
	    	    }
	    			catch (SQLException e) {
		    			// TODO Auto-generated catch block
		    			e.printStackTrace();
		    		}
	    	    try {
					rscount.close();
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
	    		String abs="";
	    		if(frommon.equalsIgnoreCase(tomon))
	    		
	    		{
	    			if(!(query3.equalsIgnoreCase("") && query4.equalsIgnoreCase("")))
		        	{
	    		 abs=" SELECT * from( select "+currentabsentdays(fromyear,frommon, Integer.parseInt(fromday), Integer.parseInt(today))+" as day,EMP_IN_OUT_Status.*,emp_official_info.EMP_FULLNAME,"
	    		 		+ "emp_official_info.DPTID  from EMP_IN_OUT_Status,emp_official_info where  month ='"+frommon+"' and year ='"+fromyear+"' "
			+ "and EMP_IN_OUT_Status.Pernr=emp_official_info.PERNR and emp_official_info.PERNR in (select emp_official_info.pernr from "
			+ "emp_official_info  where   emp_official_info.LOCID = '"+help.getLocationId()+"'  and Active=1  and emp_official_info.DPTID in "
					+ " ("+query2+")  and emp_official_info.SDPTID in ("+query3+")   and emp_official_info.Reporting_Grp in("+query4+")) )t where day not like '%PP%'  and day not like '%EL%' and day not like '%CL%'and day not like '%SL%' and day not like '%NL%' and day not like '%ML%' and day not like '%CO% '  and day not like '%OD%'";
		        	}
	    			else
	    			{
	    				abs=" SELECT * from( select "+currentabsentdays(fromyear,frommon, Integer.parseInt(fromday), Integer.parseInt(today))+" as day,EMP_IN_OUT_Status.*,emp_official_info.EMP_FULLNAME,"
	    	    		 		+ "emp_official_info.DPTID  from EMP_IN_OUT_Status,emp_official_info where  month ='"+frommon+"' and year ='"+fromyear+"' "
	    			+ "and EMP_IN_OUT_Status.Pernr=emp_official_info.PERNR and emp_official_info.PERNR in (select emp_official_info.pernr from "
	    			+ "emp_official_info  where   emp_official_info.LOCID = '"+help.getLocationId()+"'  and Active=1  and emp_official_info.DPTID in "
	    					+ " ("+query2+") ) )t where day not like '%PP%'  and day not like '%EL%' and day not like '%CL%'and day not like '%SL%' and day not like '%NL%' and day not like '%ML%' and day not like '%CO% '  and day not like '%OD%'";
	    		
	    			}
	    		 
	    		}
	    		else
	    		{
	    			if(!(query3.equalsIgnoreCase("") && query4.equalsIgnoreCase("")))
		        	{
	    			abs="select (t.day+l.day) as sumday,emp_official_info.PERNR,emp_official_info.EMP_FULLNAME,emp_official_info.DPTID,t.*,l.* from "
	    					+ "( select "+prevabsentdays(fromyear, frommon,Integer.parseInt(fromday))+" as day, Pernr,day21,day22,day23,day24,day25,day26,day27,day28,day29,day30,day31 "
	    					+ " from EMP_IN_OUT_Status where   month ='"+frommon+"' and year ='"+fromyear+"')t,	"
	    					+ "( select "+currentmonthdays(toyear, tomon, Integer.parseInt(today))+" as day,"
	    					+ "pernr,day1,day2,day3,day4,day5,day6,day7,day8,day9,day10,day11,day12,day13,day14,day15,day16,day17,day18,day19,day20  from"
	    					+ " EMP_IN_OUT_Status where month ='"+tomon+"' and year ='"+toyear+"')l,emp_official_info where emp_official_info.LOCID='"+help.getLocationId()+"' and Active=1 "
	    					+ "and emp_official_info.DPTID in("+query2+") and emp_official_info.SDPTID in ("+query3+")   and emp_official_info.Reporting_Grp in("+query4+") and "
	    					+ "emp_official_info.PERNR=t.Pernr and t.Pernr=l.Pernr and (t.day+l.day) not like '%PP%'  and (t.day+l.day) not like '%EL%' and "
	    					+ "(t.day+l.day) not like '%CL%'and (t.day+l.day) not like '%SL%' and (t.day+l.day) not like '%NL%' and (t.day+l.day) not like '%ML%' and "
	    					+ "(t.day+l.day) not like '%CO% '  and (t.day+l.day) not like '%OD%' ";
		        	}
	    			else
	    			{
	    				abs="select (t.day+l.day) as sumday,emp_official_info.PERNR,emp_official_info.EMP_FULLNAME,emp_official_info.DPTID,t.*,l.* from "
		    					+ "( select "+prevabsentdays(fromyear, frommon,Integer.parseInt(fromday))+" as day, Pernr,day21,day22,day23,day24,day25,day26,day27,day28,day29,day30,day31 "
		    					+ " from EMP_IN_OUT_Status where   month ='"+frommon+"' and year ='"+fromyear+"')t,	"
		    					+ "( select "+currentmonthdays(toyear, tomon, Integer.parseInt(today))+" as day,"
		    					+ "pernr,day1,day2,day3,day4,day5,day6,day7,day8,day9,day10,day11,day12,day13,day14,day15,day16,day17,day18,day19,day20  from"
		    					+ " EMP_IN_OUT_Status where month ='"+tomon+"' and year ='"+toyear+"')l,emp_official_info where emp_official_info.LOCID='"+help.getLocationId()+"' and Active=1 "
		    					+ "and emp_official_info.DPTID in("+query2+")  and "
		    					+ "emp_official_info.PERNR=t.Pernr and t.Pernr=l.Pernr and (t.day+l.day) not like '%PP%'  and (t.day+l.day) not like '%EL%' and "
		    					+ "(t.day+l.day) not like '%CL%'and (t.day+l.day) not like '%SL%' and (t.day+l.day) not like '%NL%' and (t.day+l.day) not like '%ML%' and "
		    					+ "(t.day+l.day) not like '%CO% '  and (t.day+l.day) not like '%OD%' ";	
	    			}
	    		}
	    		
	    		ResultSet rs = ad.selectQuery(abs);
	    		try {
	    			while(rs.next())
	    			{
	    				HRApprovalForm help2 = new HRApprovalForm();
	    				help2.setEmployeeno(rs.getString("Pernr") );
	    				help2.setEmployeeName(rs.getString("EMP_FULLNAME"));
	    				help2.setDepartment(rs.getString("DPTID"));
	    		
	    				help2.setDay1(rs.getString("day1"));								
	    				help2.setDay2(rs.getString("day2"));
	    				help2.setDay3(rs.getString("day3"));
	    				help2.setDay4(rs.getString("day4"));
	    				help2.setDay5(rs.getString("day5"));
	    				help2.setDay6(rs.getString("day6"));
	    				help2.setDay7(rs.getString("day7"));
	    				help2.setDay8(rs.getString("day8"));
	    				help2.setDay9(rs.getString("day9"));
	    				help2.setDay10(rs.getString("day10"));
	    				help2.setDay11(rs.getString("day11"));
	    				help2.setDay12(rs.getString("day12"));
	    				help2.setDay13(rs.getString("day13"));
	    				help2.setDay14(rs.getString("day14"));
	    				help2.setDay15(rs.getString("day15"));
	    				help2.setDay16(rs.getString("day16"));
	    				help2.setDay17(rs.getString("day17"));
	    				help2.setDay18(rs.getString("day18"));
	    				help2.setDay19(rs.getString("day19"));
	    				help2.setDay20(rs.getString("day20"));
	    				help2.setDay21(rs.getString("day21"));
	    				help2.setDay22(rs.getString("day22"));
	    				help2.setDay23(rs.getString("day23"));
	    				help2.setDay24(rs.getString("day24"));
	    				help2.setDay25(rs.getString("day25"));
	    				help2.setDay26(rs.getString("day26"));
	    				help2.setDay27(rs.getString("day27"));
	    				help2.setDay28(rs.getString("day28"));
	    				help2.setDay29(rs.getString("day29"));
	    				help2.setDay30(rs.getString("day30"));
	    				help2.setDay31(rs.getString("day31"));
	    			    
	    			    
	    			    
	    			    abslist.add(help2);

	    			}
	    		} catch (SQLException e) {
	    			// TODO Auto-generated catch block
	    			e.printStackTrace();
	    		}
	    		
	    		try {
					rs.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	    		
	    		finally{
	    			query1="";
	    			query2="";
	    			query3="";
	    			query4="";
	    			query5="";
	    			query6="";
	    		}if(abslist.size()>0)
	    		{
	    		request.setAttribute("abslist", abslist);
	    		}
	        	
			}
		
		

			        return mapping.findForward("displaycasualabsenteeismreport");

	 }
	
	public ActionForward dailyreportexe(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
		try {
			Thread.sleep(2000);
		} catch (InterruptedException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}
		
		
		
			HRApprovalForm help = (HRApprovalForm) form;
			
			
			String sqlfromdate="";
			String sqltodate="";
			String exportdate="";
           help.setFromDate(request.getParameter("date"));
           help.setLocationId(request.getParameter("loc"));
	

			if(!help.getFromDate().equalsIgnoreCase(""))
			{
				String from[]=help.getFromDate().split("/");
			    sqlfromdate=from[2]+"-"+from[1]+"-"+from[0]; 
			    exportdate=help.getFromDate().replace("/", ".");
	            help.setDate(exportdate);
			}
		ArrayList leave = new ArrayList();
		ArrayList onduty = new ArrayList();
		ArrayList lop = new ArrayList();
		ArrayList absenceint = new ArrayList();
		ArrayList absence = new ArrayList();
		
		//leaves

		ResultSet rs = ad.selectQuery(query1);
		try {
			while(rs.next())
			{
				HRApprovalForm help1 = new HRApprovalForm();
				help1.setEmployeeno(rs.getString("Pernr") );
				help1.setEmployeeName(rs.getString("EMP_FULLNAME"));
				help1.setDepartment(rs.getString("dptstxt"));
				help1.setPaygrp(rs.getString("Short_desc"));
				help1.setFromDate(rs.getString("startdate"));
				help1.setToDate(rs.getString("enddate"));
				help1.setLeavetype(rs.getString("lv_type"));
				help1.setNoOfDays(rs.getString("no_of_days"));
				leave.add(help1);

			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		query1="";

		//lOP

		ResultSet rslop = ad.selectQuery(query2);
		try {
			while(rslop.next())
			{
				HRApprovalForm help1 = new HRApprovalForm();
				help1.setEmployeeno(rslop.getString("Pernr") );
				help1.setEmployeeName(rslop.getString("EMP_FULLNAME"));
				help1.setDepartment(rslop.getString("dptstxt"));
				help1.setPaygrp(rslop.getString("Short_desc"));
				help1.setFromDate(rslop.getString("startdate"));
				help1.setToDate(rslop.getString("enddate"));
				help1.setLeavetype(rslop.getString("lv_type"));
				help1.setNoOfDays(rslop.getString("no_of_days"));
				lop.add(help1);

			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		query2="";

     ///onduty

		ResultSet rs1 = ad.selectQuery(query3);
		try {
			while(rs1.next())
			{

				HRApprovalForm help1 = new HRApprovalForm();
				help1.setEmployeeno(rs1.getString("Pernr") );
				help1.setEmployeeName(rs1.getString("EMP_FULLNAME"));
				help1.setDepartment(rs1.getString("dptstxt"));
				help1.setPaygrp(rs1.getString("Short_desc"));
				help1.setFromDate(rs1.getString("startdate"));
				help1.setToDate(rs1.getString("enddate"));
				help1.setStartTime(rs1.getString("startTime"));
				help1.setEndTime(rs1.getString("endTime"));
				help1.setLeavetype("OD");
				help1.setNoOfDays(rs1.getString("no_of_days"));
				onduty.add(help1);


			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		query3="";


		///presenteess
		
		String present = query4.replace("%AA%", "%PP%");
		present= present.replace("select *", "select count(*) ");
		ResultSet rs4 = ad.selectQuery(present);
		try {
			if(rs4.next())
			{
				help.setPresize(rs4.getInt(1));
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		//Permission
		String permission = query4.replace("%AA%", "%PM%");
		permission= permission.replace("select * ", "select count(*) ");
		ResultSet rs5 = ad.selectQuery(permission);
		try {
			if(rs5.next())
			{
				help.setPmsize(rs5.getInt(1));
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		///Absenteees
			

		ResultSet rs2 = ad.selectQuery(query4);
		try {
			while(rs2.next())
			{

				HRApprovalForm help1 = new HRApprovalForm();
				HRApprovalForm help2 = new HRApprovalForm();
			
				if(rs2.getString("DPTID").equalsIgnoreCase("9")||rs2.getString("DPTID").equalsIgnoreCase("51")||rs2.getString("DPTID").equalsIgnoreCase("49")||rs2.getString("DPTID").equalsIgnoreCase("66"))
				{
				help1.setEmployeeno(rs2.getString("Pernr") );
				help1.setEmployeeName(rs2.getString("EMP_FULLNAME"));
				help1.setDepartment(rs2.getString("dptstxt"));
				help1.setDesignation(rs2.getString("DSGSTXT"));
				help1.setPaygrp(rs2.getString("Short_desc"));
				help1.setLeavetype("LOP");
				

				absenceint.add(help1);
				}
				else
				{
					help2.setEmployeeno(rs2.getString("Pernr") );
					help2.setEmployeeName(rs2.getString("EMP_FULLNAME"));
					help2.setDepartment(rs2.getString("dptstxt"));
					help2.setDesignation(rs2.getString("DSGSTXT"));
					help2.setPaygrp(rs2.getString("Short_desc"));
					help2.setLeavetype("LOP");
					absence.add(help2);
				}

			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally{
			query1="";
			query2="";
			query3="";
			query4="";
			query5="";
			query6="";
		}
		
			request.setAttribute("leave", leave);
			request.setAttribute("lop", lop);
			request.setAttribute("onduty", onduty);
			request.setAttribute("absence", absence);
			request.setAttribute("absenceint", absenceint);
			
             help.setLeavesize(leave.size());
             help.setOdsize(onduty.size());
             help.setLopsize(lop.size());
             help.setAbssize(absence.size()+absenceint.size());
					request.setAttribute("result", "");
					
					try {
						rs2.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					try {
						rs.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					try {
						rs5.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					try {
						rslop.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					try {
						rs1.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					try {
						rs4.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
			        return mapping.findForward("displaydialyreportview");

	 }		

	
	public ActionForward  monthlyreport(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
	
		HRApprovalForm help = (HRApprovalForm) form;
		
		
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		ArrayList locationList=new ArrayList();
		ArrayList locationLabelList=new ArrayList();
		ResultSet rs11 = ad.selectQuery("select LOCID," +
				"LOCNAME,location_code from location where location_code in ("+locations+") "); 
				try {
					while(rs11.next()) {
						locationList.add(rs11.getString("location_code"));
						locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
						
					}
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setLocationIdList(locationList);
				help.setLocationLabelList(locationLabelList);
		
		
				ArrayList workList=new ArrayList();
				ArrayList workLabelList=new ArrayList();
				ResultSet rs14 = ad.selectQuery("select loc_id," +
						"loc_name from working_location order by loc_name"); 
						try {
							while(rs14.next()) {
								workList.add(rs14.getString("loc_id"));
								workLabelList.add(rs14.getString("loc_name"));
							}
							rs14.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
				help.setWorkList(workList);
				help.setWorkLabelList(workLabelList);
		
				//repgrp
				ArrayList repgrptList=new ArrayList();
				ArrayList repgrpLabelList=new ArrayList();
				ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
						"Grp_LTXT from REPORTING_GROUP   order by Grp_LTXT "); 
						try {
							while(reprs15.next()) {
								repgrptList.add(reprs15.getString("Grp_ID"));
								repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
							}
							reprs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						help.setRepgrpList(repgrptList);
						help.setRepgrpLabelList(repgrpLabelList);
				
		ArrayList categoryList=new ArrayList();
		ArrayList categoryLabelList=new ArrayList();
		ResultSet rs13 = ad.selectQuery("select STAFFCAT," +
				"CATLTEXT from category order by STAFFCAT "); 
				try {
					while(rs13.next()) {
						categoryList.add(rs13.getString("STAFFCAT"));
						categoryLabelList.add(rs13.getString("CATLTEXT"));
					}
					rs13.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setCategoryList(categoryList);
				help.setCategoryLabelList(categoryLabelList);
		
				ArrayList payGroupList=new ArrayList();
				ArrayList payGroupLabelList=new ArrayList();
				ResultSet rs12 = ad.selectQuery("select Paygroup," +
				"Long_Desc from Paygroup_Master order by Long_Desc "); 
				try {
					while(rs12.next()) {
						payGroupList.add(rs12.getString("Paygroup"));
						payGroupLabelList.add(rs12.getString("Long_Desc"));
					}
					rs12.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setPayGroupList(payGroupList);
				help.setPayGroupLabelList(payGroupLabelList);		
				
				
				
				
				ArrayList deptList=new ArrayList();
				ArrayList deptLabelList=new ArrayList();
				ResultSet rs15 = ad.selectQuery("select dptid," +
						"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
						try {
							while(rs15.next()) {
								deptList.add(rs15.getString("dptid"));
								deptLabelList.add(rs15.getString("DPTLTXT"));
							}
							rs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						help.setDeptList(deptList);
						help.setDeptLabelList(deptLabelList);
				
				ArrayList desgList=new ArrayList();
				ArrayList desgLabelList=new ArrayList();
				ResultSet rs16 = ad.selectQuery("select dsgid," +
						"DSGLTXT from DESIGNATION order by DSGLTXT"); 
						try {
							while(rs16.next()) {
								desgList.add(rs16.getString("dsgid"));
								desgLabelList.add(rs16.getString("DSGLTXT"));
							}
							rs16.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
				help.setDesgList(desgList);
				help.setDesgLabelList(desgLabelList);
				
				ArrayList yearList=new ArrayList();
				ResultSet rs17 = ad.selectQuery("select distinct year from EMP_IN_OUT_Status  order by year desc"); 
						try {
							while(rs17.next()) {
								yearList.add(rs17.getString("year"));
							}
							rs17.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						Calendar mycal = Calendar.getInstance();
						help.setMonth(Integer.toString(mycal.get(Calendar.MONTH) + 1));
						
				help.setYearList(yearList);
				request.setAttribute("result", "result");
				try {
					reprs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				
				try {
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs13.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					cc.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs14.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}try {
					rs12.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}try {
					rs16.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}try {
					rs17.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return mapping.findForward("displaymonthlyreport");	
	}
	
	public ActionForward monthlyReportSearch(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
				HttpServletResponse response) {
		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		ArrayList locationList=new ArrayList();
		ArrayList locationLabelList=new ArrayList();
		ResultSet rs11 = ad.selectQuery("select LOCID," +
				"LOCNAME,location_code from location where location_code in ("+locations+") "); 
				try {
					while(rs11.next()) {
						locationList.add(rs11.getString("location_code"));
						locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
						
					}
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setLocationIdList(locationList);
				help.setLocationLabelList(locationLabelList);
				
				
				//repgrp
				ArrayList repgrptList=new ArrayList();
				ArrayList repgrpLabelList=new ArrayList();
				ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
						"Grp_LTXT from REPORTING_GROUP   order by Grp_LTXT "); 
						try {
							while(reprs15.next()) {
								repgrptList.add(reprs15.getString("Grp_ID"));
								repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
							}
							reprs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						help.setRepgrpList(repgrptList);
						help.setRepgrpLabelList(repgrpLabelList);
				
			/*	//repgrp
				//ArrayList repgrptList=new ArrayList();
				ArrayList<String> repgrptList=new ArrayList<String>();
				ArrayList repgrpLabelList=new ArrayList();
				String repgr=request.getParameter("loc");
				if(repgr.equalsIgnoreCase("ML00")||repgr.equalsIgnoreCase("ML21")||repgr.equalsIgnoreCase("ML24")){
				ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
						"Grp_LTXT from REPORTING_GROUP where location like '%"+repgr+"%' order by Grp_LTXT "); 
						try {
							while(reprs15.next()) {
								repgrptList.add(reprs15.getString("Grp_ID"));
								repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
							}
							reprs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						help.setRepgrpList(repgrptList);
						help.setRepgrpLabelList(repgrpLabelList);
				}else{
					ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
							"Grp_LTXT from REPORTING_GROUP order by Grp_LTXT "); 
							try {
								while(reprs15.next()) {
									repgrptList.add(reprs15.getString("Grp_ID"));
									repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
								}
								reprs15.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							help.setRepgrpList(repgrptList);
							help.setRepgrpLabelList(repgrpLabelList);
					
					
				}
						String ACtualrepgrp="";
						if(repgrptList!=null)
						{	
									
							String[] dept = repgrptList.toArray(new String[repgrptList.size()]);
								StringBuffer reqrsdept = new StringBuffer();
							for (int i = 0; i < dept.length; i++) {
								reqrsdept.append("'"+dept[i]+"'" + ",");
							}
							if(repgr.equalsIgnoreCase("ML00")){
								ACtualrepgrp="12";
							}else{
							ACtualrepgrp= reqrsdept.substring(0, reqrsdept.length() -1).toString();
							}
						}*/
											
				ArrayList workList=new ArrayList();
				ArrayList workLabelList=new ArrayList();
				ResultSet rs14 = ad.selectQuery("select loc_id," +
						"loc_name from working_location order by loc_name"); 
						try {
							while(rs14.next()) {
								workList.add(rs14.getString("loc_id"));
								workLabelList.add(rs14.getString("loc_name"));
							}
							rs14.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
				help.setWorkList(workList);
				help.setWorkLabelList(workLabelList);
				
		ArrayList<String> categoryList=new ArrayList<String>();
		//ArrayList<String> repgrptList=new ArrayList<String>();
		ArrayList categoryLabelList=new ArrayList();
		ResultSet rs13 = ad.selectQuery("select STAFFCAT," +
				"CATLTEXT from category order by CATLTEXT"); 
				try {
					while(rs13.next()) {
						categoryList.add(rs13.getString("STAFFCAT"));
						categoryLabelList.add(rs13.getString("CATLTEXT"));
					}
					rs13.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setCategoryList(categoryList);
				help.setCategoryLabelList(categoryLabelList);
				
				//catArray
				String ACtualcat="";
				if(categoryList!=null)
				{	
							
					String[] dept = categoryList.toArray(new String[categoryList.size()]);
						StringBuffer reqrsdept = new StringBuffer();
					for (int i = 0; i < dept.length; i++) {
						reqrsdept.append("'"+dept[i]+"'" + ",");
					}
					ACtualcat= reqrsdept.substring(0, reqrsdept.length() -1).toString();
				}
				String repgr=request.getParameter("loc");	
				ArrayList<String> payGroupList=new ArrayList<String>();
				ArrayList payGroupLabelList=new ArrayList();
				ResultSet rs12 = ad.selectQuery("select Paygroup," +
				"Long_Desc from Paygroup_Master where plant='"+repgr+"'order by Long_Desc"); 
				try {
					while(rs12.next()) {
						payGroupList.add(rs12.getString("Paygroup"));
						payGroupLabelList.add(rs12.getString("Long_Desc"));
					}
					rs12.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setPayGroupList(payGroupList);
				help.setPayGroupLabelList(payGroupLabelList);	
				
				
				String ACtualpay="";
				if(payGroupList!=null)
				{	
							
					String[] dept = payGroupList.toArray(new String[payGroupList.size()]);
						StringBuffer reqrsdept = new StringBuffer();
					for (int i = 0; i < dept.length; i++) {
						reqrsdept.append("'"+dept[i]+"'" + ",");
					}
					ACtualpay= reqrsdept.substring(0, reqrsdept.length() -1).toString();
				}
				ArrayList<String> deptList=new ArrayList<String>();
				ArrayList deptLabelList=new ArrayList();
				ResultSet rs15 = ad.selectQuery("select dptid," +
						"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
						try {
							while(rs15.next()) {
								deptList.add(rs15.getString("dptid"));
								deptLabelList.add(rs15.getString("DPTLTXT"));
							}
							rs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						help.setDeptList(deptList);
						help.setDeptLabelList(deptLabelList);
						
						
						String ACtualdept="";
						if(deptList!=null)
						{	
									
							String[] dept = deptList.toArray(new String[deptList.size()]);
								StringBuffer reqrsdept = new StringBuffer();
							for (int i = 0; i < dept.length; i++) {
								reqrsdept.append("'"+dept[i]+"'" + ",");
							}
							ACtualdept= reqrsdept.substring(0, reqrsdept.length() -1).toString();
						}					
						
						
					   
						
						
						
				
				ArrayList desgList=new ArrayList();
				ArrayList desgLabelList=new ArrayList();
				ResultSet rs16 = ad.selectQuery("select dsgid," +
						"DSGLTXT from DESIGNATION order by DSGLTXT "); 
						try {
							while(rs16.next()) {
								desgList.add(rs16.getString("dsgid"));
								desgLabelList.add(rs16.getString("DSGLTXT"));
							}
							rs16.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
				help.setDesgList(desgList);
				help.setDesgLabelList(desgLabelList);
				
				ArrayList yearList=new ArrayList();
				ResultSet rs17 = ad.selectQuery("select distinct year from EMP_IN_OUT_Status  order by year desc"); 
						try {
							while(rs17.next()) {
								yearList.add(rs17.getString("year"));
							}
							rs17.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						help.setYearList(yearList);
					
						String location=help.getLocationId();
					    String reqTable=getTableName(location);	
					    
					    
					  /*  String ACtualpay="";
					    if(help.getPayArray()!=null)
					    {

						String[] pay = help.getPayArray();
					    StringBuffer reqpay = new StringBuffer();
						for (int i = 0; i < pay.length; i++) {
							reqpay.append("'"+pay[i]+"'" + ",");
						}
						ACtualpay = reqpay.substring(0, reqpay.length() - 1).toString();

					    }
*/
					    /*//catArray
					    String ACtualcat="";
					    if(help.getCatArray()!=null)
					    {

						String[] cat = help.getCatArray();
					    StringBuffer reqcat = new StringBuffer();
						for (int i = 0; i < cat.length; i++) {
							reqcat.append("'"+cat[i]+"'" + ",");
						}
						ACtualcat = reqcat.substring(0, reqcat.length() - 1).toString();

					    }*/
					    
					   /* String ACtualdept="";
					    if(help.getDeptArray()!=null)
					    {	
					    String[] dept = help.getDeptArray();
					    
					    StringBuffer reqdept = new StringBuffer();
						for (int i = 0; i < dept.length; i++) {
							reqdept.append("'"+dept[i]+"'" + ",");
						}
						 ACtualdept= reqdept.substring(0, reqdept.length() - 1).toString();
					    }*/
						
						
					    String ACtualdesg="";
					    if(help.getDesgArray()!=null)
					    {
					    
						String[] desg = help.getDesgArray();
					    StringBuffer reqdesg = new StringBuffer();
						for (int i = 0; i < desg.length; i++) {
							reqdesg.append("'"+desg[i]+"'" + ",");
						}
						ACtualdesg = reqdesg.substring(0, reqdesg.length() - 1).toString();
					    
					    }
					    
					  /*  ResultSet plrs14 = ad.selectQuery("select loc_id," +
								"loc_name from working_location order by loc_name"); 
								try {
									while(plrs14.next()) {
										workList.add(plrs14.getString("loc_id"));
										workLabelList.add(plrs14.getString("loc_name"));
									}
									plrs14.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
						*/		
					    
					    
					    
					    
					    String ACtualloc="";
					    if(help.getLocArray()!=null)
					    {
					    
						String[] loc = help.getLocArray();
					    StringBuffer reqloc = new StringBuffer();
						for (int i = 0; i < loc.length; i++) {
							reqloc.append("'"+loc[i]+"'" + ",");
						}
						ACtualloc = reqloc.substring(0, reqloc.length() - 1).toString();
					    
					    }

					    
                         //reporting
					    
					    String ACtualrepgrp="";
					    if(help.getRepgrpArray()!=null)
					    {	
					    String[] repgrp = help.getRepgrpArray();
					    
					    StringBuffer reqrepgrp = new StringBuffer();
						for (int i = 0; i < repgrp.length; i++) {
							reqrepgrp.append("'"+repgrp[i]+"'" + ",");
						}
						ACtualrepgrp= reqrepgrp.substring(0, reqrepgrp.length() - 1).toString();
					    }
						
						String query1="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master where Location.LOCATION_CODE=emp_official_info.LOCID and "
								+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP ";
						String sqlfromdate="";
						String sqltodate="";
									
						if(!help.getLocationId().equalsIgnoreCase(""))
						{
							query1=query1+" and emp_official_info.LOCID = '"+help.getLocationId()+"' ";
						
						}
							
						if(!ACtualpay.equalsIgnoreCase(""))
						{
							query1=query1+" and emp_official_info.PAY_GROUP in  ("+ACtualpay+") ";
						
						}

						if(!ACtualcat.equalsIgnoreCase(""))
						{
							query1=query1+" and emp_official_info.STAFFCAT in ("+ACtualcat+")  ";
						
						}

						if(!ACtualdept.equalsIgnoreCase(""))
						{
							query1=query1+" and emp_official_info.DPTID in ( "+ACtualdept+" )";
						}
						
						if(!ACtualdesg.equalsIgnoreCase(""))
						{
							query1=query1+" and emp_official_info.DSGID in ( "+ACtualdesg+" ) ";
						}
						
						if(!ACtualloc.equalsIgnoreCase(""))
						{
							query1=query1+" and emp_official_info.Work_ID in("+ACtualloc+") ";
						
						}
						
						if(!ACtualrepgrp.equalsIgnoreCase(""))
						{
							query1=query1+" and emp_official_info.Reporting_Grp in("+ACtualrepgrp+") ";
						
						}
						
						query1=query1+" and ACTIVE = 1 ";	
						
                         
						this.query1=query1;
						
						
						String[] monthName = {"","JAN", "FEB",
								  "MAR", "APR", "MAY", "JUN", "JUL",
								  "AUG", "SEP", "OCT", "NOV",
								  "DEC"
								  };
						
				
					if(help.getLeavetype()==null)
					{
						help.setLeaveType("");
					}
					
					if(help.getSummbrkup()==null)
					{
						help.setSummbrkup("");
					}
					
					if(help.getAttntype()==null)
					{
						help.setAttntype("");
					}
					
					Calendar mycal = Calendar.getInstance();
					help.setMonth(Integer.toString(mycal.get(Calendar.MONTH) + 1));
					request.setAttribute("result", "");
					try {
						cc.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					try {
						rs17.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					try {
						rs15.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					try {
						rs13.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					try {
						rs11.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					try {
						rs16.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					try {
						rs12.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					try {
						rs14.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					/*try {
						reprs15.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}*/
					return mapping.findForward("displaymonthlyreport");
			
		}
	
	public ActionForward monthlyReportexe(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
				HttpServletResponse response) {
		
		try {
			Thread.sleep(2000);
		} catch (InterruptedException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}
		
				
				HttpSession session = request.getSession();
				UserInfo user=(UserInfo)session.getAttribute("user");
				
				HRApprovalForm help = (HRApprovalForm) form;
				ArrayList list1=new ArrayList();
				ArrayList list2=new ArrayList();

				help.setMonth(request.getParameter("month"));
				help.setYear(request.getParameter("year"));
				help.setLocationId(request.getParameter("loc"));
				help.setSummbrkup(request.getParameter("summbrkup"));
				help.setAttntype(request.getParameter("attntype"));
				help.setLeavetype(request.getParameter("leavtype"));
		
				String[] monthName = {"","JAN", "FEB",
								  "MAR", "APR", "MAY", "JUN", "JUL",
								  "AUG", "SEP", "OCT", "NOV",
								  "DEC"
								  };
			/*	 */
					if(help.getLeavetype()==null)
					{
						help.setLeaveType("");
					}
					
					if(help.getSummbrkup()==null)
					{
						help.setSummbrkup("");
					}
					
					if(help.getAttntype()==null)
					{
						help.setAttntype("");
					}
					
					if( help.getSummbrkup().equalsIgnoreCase("Attendance Summary") )
						{
						if(help.getAttntype().equalsIgnoreCase("Calendar Month")  )
							{
							
							query1=this.query1;
						
						String	ws= " select sum(case when "+monthName[Integer.parseInt(help.getMonth())]+" ='w' then 1 else 0 end  ) as working"
						
						+ " from "+getTableName(help.getLocationId())+" where cyear = '"+help.getYear()+"'  ";
						
						ResultSet rs18 = ad.selectQuery(ws); 	
						try {
							if(rs18.next())
							{
							
					    help.setWorking(rs18.getFloat("working"));
						
							}
						} catch (SQLException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
						try {
							rs18.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						
						
							ResultSet rs19 = ad.selectQuery(query1);
							try {
								while(rs19.next())
								{
									HRApprovalForm app =new HRApprovalForm();
									
									app.setEmployeeno(rs19.getString("pernr"));
									app.setEmployeeName(rs19.getString("EMP_FULLNAME"));
									app.setDepartment(rs19.getString("DPTSTXT"));
									app.setDesignation(rs19.getString("DSGSTXT"));
									app.setPaygrp(rs19.getString("Paygroup"));
									app.setPayGrpTo(rs19.getString("Short_desc"));
									app.setWorking(help.getWorking());
									String a="";
									if(!rs19.getString("Swipe_count").equalsIgnoreCase("0"))
									{
							a="  SELECT 	"					
							+ " (LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25 as od,"
							+ " (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl,"
							+ " (LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl,"
							+ " (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL,"
							+ " (LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25 as LP,"
							+ " (LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as AA,"
							+ " (LEN(day) - LEN(REPLACE(day, 'CO', '')))*0.25 as CO,"
							+ " (LEN(day) - LEN(REPLACE(day, 'ML', '')))*0.25 as ML"
							+ " from("
							+ " select "+currentmonthdays(help.getYear(), help.getMonth(), 0)+" as day "
							+ " from EMP_IN_OUT_Status where pernr='"+rs19.getString("pernr")+"' and month ='"+help.getMonth()+"' and year ='"+help.getYear()+"')t";
									}
									if(rs19.getString("Swipe_count").equalsIgnoreCase("0"))
									{
										a="  SELECT 	"					
												+ " (LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25 as od,"
												+ " (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl,"
												+ " (LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl,"
												+ " (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL,"
												+ " (LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25 as LP,"
												+ " (LEN(day) - LEN(REPLACE(day, 'CO', '')))*0.25 as CO,"
												+ " (LEN(day) - LEN(REPLACE(day, 'ML', '')))*0.25 as ML"
												+ " from("
												+ " select "+currentmonthdays(help.getYear(), help.getMonth(), 0)+" as day "
												+ " from EMP_IN_OUT_Status where pernr='"+rs19.getString("pernr")+"' and month ='"+help.getMonth()+"' and year ='"+help.getYear()+"')t";
													
									}
										
									ResultSet rs20 = ad.selectQuery(a);
									if(rs20.next())
									{
										app.setOd(rs20.getFloat("Od"));
										app.setCl(rs20.getFloat("cl"));
										app.setSl(rs20.getFloat("sl"));
										app.setEl(rs20.getFloat("el"));	
										if(!rs19.getString("Swipe_count").equalsIgnoreCase("0"))
										{
										app.setAa(rs20.getFloat("AA"));	
										}
										app.setLp(rs20.getFloat("lp"));						
										app.setCo(rs20.getFloat("Co"));
										app.setMl(rs20.getFloat("Ml"));
										app.setLeave_Availed(rs20.getFloat("cl")+rs20.getFloat("sl")+rs20.getFloat("el")+app.getLp()+rs20.getFloat("co")+rs20.getFloat("Ml"));
										app.setTotal_worked(help.getWorking()-(rs20.getFloat("cl")+rs20.getFloat("sl")+rs20.getFloat("el")+app.getLp()+app.getAa()+rs20.getFloat("co")+rs20.getFloat("Ml")));
												}
												
									rs20.close();
									list1.add(app);
									
								}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							try {
								rs19.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							query1="";
							
						}
						
							if(help.getAttntype().equalsIgnoreCase("Payable Month")  )
						{
							
							query1 =query1+"order by pernr";
						
						String selectedmon=help.getMonth();
						String selectedyear=help.getYear();
						String prevmont=Integer.toString((Integer.parseInt(selectedmon)-1));
						String prevyear="";
						if(prevmont.equalsIgnoreCase("0"))
						{
						 prevmont="12";
						 prevyear=Integer.toString((Integer.parseInt(selectedyear)-1));	
						}
						else
							prevyear=selectedyear;
						
						String	ws= " select sum(working) as working  from ("
						 +" select sum(case when "+monthName[Integer.parseInt(prevmont)]+" ='w' then 1 else 0 end  )as  working "
						 
						 + " from "+getTableName(help.getLocationId())+" where day >= 21 and cyear ='"+prevyear+"'  "
						 +" union all "		
						 +" select sum(case when "+monthName[Integer.parseInt(help.getMonth())]+" ='w' then 1 else 0 end  )as working"
						 + " from "+getTableName(help.getLocationId())+" where day<=20  and Cyear = '"+help.getYear()+"')k";
								
								
						
						ResultSet rs18 = ad.selectQuery(ws); 	
						try {
							if(rs18.next())
							{
							
						help.setWorking(rs18.getInt("working"));
						
							}
						} catch (SQLException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
						
						try {
							rs18.close();
						} catch (SQLException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					
						
						ResultSet rs19 = ad.selectQuery(query1);
						try {
							while(rs19.next())
							{
								HRApprovalForm app =new HRApprovalForm();
								
								app.setEmployeeno(rs19.getString("pernr"));
								app.setEmployeeName(rs19.getString("EMP_FULLNAME"));
								app.setDepartment(rs19.getString("DPTSTXT"));
								app.setDesignation(rs19.getString("DSGSTXT"));
								app.setPaygrp(rs19.getString("Paygroup"));
								app.setPayGrpTo(rs19.getString("Short_desc"));
								app.setWorking(help.getWorking());
								
								System.out.println(rs19.getString("pernr"));
								
								
								String a="";
								if(!rs19.getString("Swipe_count").equalsIgnoreCase("0"))
								{
								  a= " select  sum(od) as od ,  sum(cl) as cl , sum(sl) as sl, sum(el) as el , sum(lp) as lp ,sum(aa) as aa, sum(co) as co , sum(ml) as ml from( "
										+ " SELECT "
										+ " (LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25 as od,"
										+ " (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl,"
										+ " (LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl,"
										+ " (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL,"
										+ " (LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25 as LP,"
										+ " (LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as AA,"
										+ " (LEN(day) - LEN(REPLACE(day, 'CO', '')))*0.25 as CO,"
										+ " (LEN(day) - LEN(REPLACE(day, 'ML', '')))*0.25 as ML"
										+ " from("
										+ " select "+prevmonthdays(prevyear, prevmont)+" as day "
										+ " from EMP_IN_OUT_Status where pernr='"+rs19.getString("pernr")+"' and month ='"+prevmont+"' and year ='"+prevyear+"')t"
										+ " union all "
										+ " SELECT  "
										+ " (LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25 as od,"
										+ " (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl,"
										+ " (LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl,"
										+ " (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL,"
										+ " (LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25 as LP,"
										+ " (LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as AA,"
										+ " (LEN(day) - LEN(REPLACE(day, 'CO', '')))*0.25 as CO,"
										+ " (LEN(day) - LEN(REPLACE(day, 'ML', '')))*0.25 as ML"
										+ " from("
										+ " select "+currentmonthdays(selectedyear, selectedmon, 20)+" as day "
										+ " from EMP_IN_OUT_Status where pernr='"+rs19.getString("pernr")+"' and month ='"+help.getMonth()+"' and year ='"+help.getYear()+"')t)k";
								}
								
								if(rs19.getString("Swipe_count").equalsIgnoreCase("0"))
								{
								  a= " select  sum(od) as od ,  sum(cl) as cl , sum(sl) as sl, sum(el) as el , sum(lp) as lp , sum(co) as co , sum(ml) as ml from( "
										+ " SELECT "
										+ " (LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25 as od,"
										+ " (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl,"
										+ " (LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl,"
										+ " (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL,"
										+ " (LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25 as LP,"
										+ " (LEN(day) - LEN(REPLACE(day, 'CO', '')))*0.25 as CO,"
										+ " (LEN(day) - LEN(REPLACE(day, 'ML', '')))*0.25 as ML"
										+ " from("
										+ " select "+prevmonthdays(prevyear, prevmont)+" as day "
										+ " from EMP_IN_OUT_Status where pernr='"+rs19.getString("pernr")+"' and month ='"+prevmont+"' and year ='"+prevyear+"')t"
										+ " union all "
										+ " SELECT  "
										+ " (LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25 as od,"
										+ " (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl,"
										+ " (LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl,"
										+ " (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL,"
										+ " (LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25 as LP,"
										+ " (LEN(day) - LEN(REPLACE(day, 'CO', '')))*0.25 as CO,"
										+ " (LEN(day) - LEN(REPLACE(day, 'ML', '')))*0.25 as ML"
										+ " from("
										+ " select "+currentmonthdays(selectedyear, selectedmon, 20)+" as day "
										+ " from EMP_IN_OUT_Status where pernr='"+rs19.getString("pernr")+"' and month ='"+help.getMonth()+"' and year ='"+help.getYear()+"')t)k";
								}
								
								
								ResultSet rs20 = ad.selectQuery(a);
								if(rs20.next())
								{
									app.setOd(rs20.getFloat("Od"));
									app.setCl(rs20.getFloat("cl"));
									app.setSl(rs20.getFloat("sl"));
									app.setEl(rs20.getFloat("el"));		
									if(!rs19.getString("Swipe_count").equalsIgnoreCase("0"))
									{
									app.setAa(rs20.getFloat("AA"));	
									}
									app.setLp(rs20.getFloat("LP"));
									app.setCo(rs20.getFloat("Co"));
									app.setMl(rs20.getFloat("Ml"));
									app.setLeave_Availed(rs20.getFloat("cl")+rs20.getFloat("sl")+rs20.getFloat("el")+app.getLp()+rs20.getFloat("co")+rs20.getFloat("Ml"));
									app.setTotal_worked(help.getWorking()-(rs20.getFloat("cl")+rs20.getFloat("sl")+rs20.getFloat("el")+app.getLp()+app.getAa()+rs20.getFloat("co")+rs20.getFloat("Ml")));
									
										
								}
								rs20.close();
								list1.add(app);
								
							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
								e.printStackTrace();
							}
						try {
							rs19.close();
						} catch (SQLException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
						query1="";
							
							
						}
						
						
						request.setAttribute("list1", list1);
}
					
					
					/////daily
					if( help.getSummbrkup().equalsIgnoreCase("Day Wise Breakup"))
					{
								
						String plant=help.getLocationId();
						String selectedmon=help.getMonth();
						String selectedyear=help.getYear();
						String prevmont=Integer.toString((Integer.parseInt(selectedmon)-1));
						String prevyear="";
						if(prevmont.equalsIgnoreCase("0"))
						{
						 prevmont="12";
						 prevyear=Integer.toString((Integer.parseInt(selectedyear)-1));	
						}
						else
							prevyear=selectedyear;
						
				

						// Create a calendar object and set year and month
						Calendar mycal = Calendar.getInstance();

						mycal.set(Integer.parseInt(selectedyear), Integer.parseInt(selectedmon)-1, 1);
						
						// Get the number of days in that month
						int daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
						
						
						mycal.set(Integer.parseInt(prevyear), Integer.parseInt(prevmont)-1, 1);
						
						int prevdaysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
						
						
						
					
					
						
						
						if(help.getAttntype().equalsIgnoreCase("Calendar Month"))
						{
							if(help.getLeavetype().equalsIgnoreCase("Present"))
							{
								query1="select case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end st,* from report_daily_wise,("+query1+")t where t.PERNR= report_daily_wise.pernr  and MONTH(date)="+selectedmon+" and  case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end   like '%PP%' ";
							}
							
							if(help.getLeavetype().equalsIgnoreCase("Absent"))
							{
								query1="select case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end st,* from report_daily_wise,("+query1+")t where t.PERNR= report_daily_wise.pernr  and MONTH(date)="+selectedmon+" and (case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end like '%AA%' or case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end like '%NL%') ";
							}
							
							if(help.getLeavetype().equalsIgnoreCase("On Duty"))
							{
								query1="select case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end st,* from report_daily_wise,("+query1+")t where t.PERNR= report_daily_wise.pernr  and MONTH(date)="+selectedmon+" and case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end like '%OD%' ";
							}
							
							if(help.getLeavetype().equalsIgnoreCase("Leave"))
							{
								query1="select case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end st,* from report_daily_wise,("+query1+")t where t.PERNR= report_daily_wise.pernr  and MONTH(date)="+selectedmon+" and (case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end like '%CL%' or case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end like '%EL%' or case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end like '%SL%') ";
							}
							
							if(help.getLeavetype().equalsIgnoreCase("Permission"))
							{
								query1="select case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end st,* from report_daily_wise,("+query1+")t where t.PERNR= report_daily_wise.pernr  and MONTH(date)="+selectedmon+" and case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end like '%PM%' ";
							}
							
							if(help.getLeavetype().equalsIgnoreCase("all"))
							{
							 query1="select case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end st,* from report_daily_wise,("+query1+")t where t.PERNR= report_daily_wise.pernr  and MONTH(date)="+selectedmon+" ";
							}
						
						}
						
						if(help.getAttntype().equalsIgnoreCase("Payable Month"))
						{
							if(help.getLeavetype().equalsIgnoreCase("Present"))
							{
							 query1="select case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end st,* from report_daily_wise,("+query1+")t where t.PERNR= report_daily_wise.pernr  and date>='"+prevyear+"-"+prevmont+"-21'  and date<='"+selectedyear+"-"+selectedmon+"-20'  and case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end like '%PP%'";
							
							}
							
							if(help.getLeavetype().equalsIgnoreCase("Absent"))
							{
								 query1="select case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end st,* from report_daily_wise,("+query1+")t where t.PERNR= report_daily_wise.pernr  and date>='"+prevyear+"-"+prevmont+"-21'  and date<='"+selectedyear+"-"+selectedmon+"-20' and (case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end like '%AA%' or case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end like '%NL%') ";
							}
							
							if(help.getLeavetype().equalsIgnoreCase("On Duty"))
							{
								 query1="select case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end st,* from report_daily_wise,("+query1+")t where t.PERNR= report_daily_wise.pernr  and date>='"+prevyear+"-"+prevmont+"-21'  and date<='"+selectedyear+"-"+selectedmon+"-20'  and case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end like '%OD%'";
							}
							
							if(help.getLeavetype().equalsIgnoreCase("Leave"))
							{
								 query1="select case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end st,* from report_daily_wise,("+query1+")t where t.PERNR= report_daily_wise.pernr  and date>='"+prevyear+"-"+prevmont+"-21'  and date<='"+selectedyear+"-"+selectedmon+"-20' and (case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end like '%CL%' or case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end like '%EL%' or case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end like '%SL%')  ";
							}
							
							if(help.getLeavetype().equalsIgnoreCase("Permission"))
							{
								 query1="select case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end st,* from report_daily_wise,("+query1+")t where t.PERNR= report_daily_wise.pernr  and date>='"+prevyear+"-"+prevmont+"-21'  and date<='"+selectedyear+"-"+selectedmon+"-20'  and case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end like '%PM%'";
							}
							
							if(help.getLeavetype().equalsIgnoreCase("all"))
							{
							
								 query1="select case when Swipe_Count=0  then REPLACE(status,'AA','PP') else status end st,* from report_daily_wise,("+query1+")t where t.PERNR= report_daily_wise.pernr  and date>='"+prevyear+"-"+prevmont+"-21'  and date<='"+selectedyear+"-"+selectedmon+"-20' ";
							}
						}
						query1=query1+" order by t.pernr,date";
						
						ResultSet rscal = ad.selectQuery(query1);
						try {
							while(rscal.next())
							{	
		                        HRApprovalForm app =new HRApprovalForm();
								
								app.setEmployeeno(rscal.getString("pernr"));
								app.setEmployeeName(rscal.getString("EMP_FULLNAME"));
								app.setDepartment(rscal.getString("DPTSTXT"));
								app.setDesignation(rscal.getString("DSGSTXT"));
								app.setStartTime(rscal.getString("in_time").substring(0, 5));
								app.setEndTime(rscal.getString("Out_time").substring(0, 5));
								app.setStatus(rscal.getString("St").replace("NL", "LP"));
								app.setDate(rscal.getString("Date"));
								app.setPaygrp(rscal.getString("Short_desc"));
								app.setPayGrpFrom(rscal.getString("Paygroup"));
								
								if(rscal.getString("St").contains("CL")||rscal.getString("St").contains("SL")||rscal.getString("St").contains("EL")||rscal.getString("St").contains("NL")||rscal.getString("St").contains("CO")||rscal.getString("St").contains("ML"))
								{
								String data = "select convert(date,start_date) as start_date1,convert(date,end_date) as end_date1,reason from leave_details where  user_id='"
										+ rscal.getString("pernr")
										+ "' and Approvel_Status in('Approved') and record_status!='Draft'  and '"
										+  rscal.getString("Date") 
										+ "' between start_date and  end_date and YEAR(start_date)=year('"+ rscal.getString("Date")  + "')";
								
								ResultSet rs10 = ad.selectQuery(data);
								while (rs10.next()) {
								        app.setStartDate(rs10.getString("start_date1"));
								        app.setEndDate(rs10.getString("end_date1"));
										app.setRemarks(rs10.getString("reason"));
					
								}
							
									rs10.close();
								
								}
								if(rscal.getString("St").contains("OD"))
								{
								String data1 = "select convert(date,start_date) as start_date1,convert(date,end_date) as end_date1,reason from OnDuty_details where  user_id='"
										+ rscal.getString("pernr")
										+ "' and Approver_Status in('Approved') and '"
										+  rscal.getString("Date") 
										+ "' between start_date and  end_date  and YEAR(start_date)=year('"+ rscal.getString("Date")  + "')";
								ResultSet rs101 = ad.selectQuery(data1);
								while (rs101.next()) {
								     app.setStartDate(rs101.getString("start_date1"));
								        app.setEndDate(rs101.getString("end_date1"));
										app.setRemarks(rs101.getString("reason"));
							
								} 
								
									rs101.close();
								
								}

								list2.add(app);
							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					
						
						try {
							rscal.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						finally{
			    			query1="";
			    			query2="";
			    			query3="";
			    			query4="";
			    			query5="";
			    			query6="";
			    		}
						
						request.setAttribute("list2", list2);
						}

					Calendar mycal = Calendar.getInstance();
					help.setMonth(monthName[Integer.parseInt(help.getMonth())]);
					
					request.setAttribute("result", "");
					return mapping.findForward("displaymonthlyreportview");
			
		}
	
	
	
	public String presentdays(int startday,int endday,int startmon,int endmon)
	{
	/*	day19 like '%PP%' or day20 like '%PP%' or day21 like '%PP%'*/
		String value="";
	
		
		for(int j=startday;j<=endday;j++)
		{
			value=value+"day"+j+" like '%PP%' or ";
		}
		
		value=value.substring(0, value.length()-3);
		
		
		return value;
	}
	
	public ActionForward exportOrganogrammanpowerreport(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		

		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");

		Date dNow = new Date( );
		SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd");
		String exportdate=ft.format(dNow);

		response.setHeader("Content-Disposition", "inline; filename="+exportdate+"_Man_Power_Organogram_Report.xls");
		
		HRApprovalForm help = (HRApprovalForm) form;


		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		ArrayList locationList=new ArrayList();
		ArrayList locationLabelList=new ArrayList();
		ResultSet rs11 = ad.selectQuery("select LOCID," +
				"LOCNAME,location_code from location where location_code in ("+locations+")"); 
		try {
			while(rs11.next()) {
				locationList.add(rs11.getString("location_code"));
				locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));

			}
			rs11.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		help.setLocationIdList(locationList);
		help.setLocationLabelList(locationLabelList);

		ArrayList deptList=new ArrayList();
		ArrayList deptLabelList=new ArrayList();
		ResultSet rs15 = ad.selectQuery("select dptid," +
				"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
		try {
			while(rs15.next()) {
				deptList.add(rs15.getString("dptid"));
				deptLabelList.add(rs15.getString("DPTLTXT"));
			}
			rs15.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		help.setDeptList(deptList);
		help.setDeptLabelList(deptLabelList);


		//dept
		String ACtualdept="";
		if(help.getDeptArray()!=null)
		{	
			String[] dept = help.getDeptArray();

			StringBuffer reqdept = new StringBuffer();
			for (int i = 0; i < dept.length; i++) {
				reqdept.append("'"+dept[i]+"'" + ",");
			}
			ACtualdept= reqdept.substring(0, reqdept.length() - 1).toString();
		}
		
		
		
	     help.setLocationId(request.getParameter("loc"));
	     help.setSummbrkup(request.getParameter("summbrkup"));
	
	 	ArrayList deptlist = new ArrayList();
	 	ArrayList orglist = new ArrayList();
	 	ArrayList def = new ArrayList();
	     
	 	String list="select distinct DEPARTMENT.DPTID,DPTSTXT from DEPARTMENT,"
				+ "emp_official_info where LOCID='"+help.getLocationId()+"' and emp_official_info.DPTID=DEPARTMENT.DPTID "
				+ "and DEPARTMENT.DPTID in ("+ACtualdept+")  order by DPTID";
		
		ResultSet rs1 = ad.selectQuery(list);
		try {
			while(rs1.next())
			{
				HRApprovalForm help1 = new HRApprovalForm();				
				help1.setDepartment(rs1.getString("DPTID"));				
				help1.setDeptTo(rs1.getString("DPTSTXT"));		
				deptlist.add(help1);
								
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		request.setAttribute("deptlist", deptlist);
	     
		String[] monthName = {"","JAN", "FEB",
				  "MAR", "APR", "MAY", "JUN", "JUL",
				  "AUG", "SEP", "OCT", "NOV",
				  "DEC"
				  };
	     
		   
	    String dptid="";
	    int chk=0;
		
	     String abc="select SUBDEPARTMENT.SDPTID,SUBDEPARTMENT.SDPTID_STXT,DEPARTMENT.DPTID,pernr,EMP_FULLNAME,DESIGNATION.DSGSTXT,convert(varchar(10),doj,104) as doj,Month(doj)as mon,"
	     		+ "year(doj) as year from emp_official_info,DEPARTMENT,DESIGNATION,SUBDEPARTMENT where DEPARTMENT.DPTID=emp_official_info.DPTID and SUBDEPARTMENT.SDPTID=emp_official_info.SDPTID and  "
	     		+ "DESIGNATION.DSGID=emp_official_info.DSGID and emp_official_info.LOCID='"+help.getLocationId()+"'  and DEPARTMENT.DPTID in ("+ACtualdept+")";		     
		
	     if(help.getSummbrkup().equalsIgnoreCase("All"))
	     {
	    	 abc=abc+" order by DEPARTMENT.DPTID,SUBDEPARTMENT.SDPTID,pernr";
	     }
	     if(help.getSummbrkup().equalsIgnoreCase("Active"))
	     {
	    	 abc=abc+" and emp_official_info.ACTIVE=1 order by DEPARTMENT.DPTID,SUBDEPARTMENT.SDPTID,pernr";
	     }
	     
	     
	     ResultSet n=ad.selectQuery(abc);
		try {
			while(n.next())
			{
				HRApprovalForm hr = new HRApprovalForm();
				hr.setDepartment(n.getString("DPTID"));
				hr.setEmployeeno(n.getString("pernr"));
				hr.setEmployeeName(n.getString("EMP_FULLNAME"));
				hr.setDesignation(n.getString("DSGSTXT"));					
				hr.setSubdepartment(n.getString("SDPTID_STXT"));					
				hr.setDoj(n.getString("doj"));
				hr.setMonth(monthName[Integer.parseInt(n.getString("mon"))]+"-"+n.getString("year"));
				
				String qual="select top 1 Priority,Qualification.Qualification,specialization from emp_education_details,QUALIFICATION where user_id='"+n.getString("PERNR")+"' and emp_education_details.qualification=QUALIFICATION.Id  order by Priority desc";
				ResultSet qal=ad.selectQuery(qual);
				if(qal.next())
				{
					hr.setQualification(qal.getString("Qualification"));
					hr.setSpecialization(qal.getString("specialization"));
				}qal.close();
			
				dptid=n.getString("DPTID");
				 chk=1;
				
				orglist.add(hr);
				
			}
			
			String appre="select 'data' as prefix, sum(Staff+Tech_Staff+Cont1+Cont2_House+Apprentice) as appstrenth,DPTID from APPROVED_STRENGTH  group by DPTID"
					+ " union select  'final' as prefix ,sum(Staff+Tech_Staff+Cont1+Cont2_House+Apprentice) as appstrenth,'0' from APPROVED_STRENGTH";
			ResultSet j=ad.selectQuery(appre);
		
		
			
			while(j.next())
			{
				HRApprovalForm hr1 = new HRApprovalForm();
				if(j.getString("prefix").equalsIgnoreCase("data"))
				{
				hr1.setDepartment(j.getString("DPTID"));
				hr1.setSubdepartment("Total");
				hr1.setStaffapprstrength(j.getInt("appstrenth"));					
				def.add(hr1);
				}
				else
				{
					help.setStaffapprstrength(j.getInt("appstrenth"));	
				}
			}
			
			j.close();
					
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		request.setAttribute("def", def);
		request.setAttribute("orglist", orglist);
		
		try {
			rs1.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		try {
			n.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		try {
			rs15.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		try {
			rs11.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		try {
			cc.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
return mapping.findForward("exportOrganogrammanpowerreport");	
	}
	
	
	public ActionForward exportcumulativemanpowerreport(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
	
		
		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
		
		Date dNow = new Date( );
		SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd");
		String exportdate=ft.format(dNow);
		response.setHeader("Content-Disposition", "inline; filename="+exportdate+"_Cumulative_Manpower_Report.xls");
		
		
		   help.setMonth(request.getParameter("month"));
		     help.setYear(request.getParameter("year"));
		     help.setLocationId(request.getParameter("loc"));
		
			 int staffapprstrength=0;
			 int staffavailstrength=0;
			 int techstaffapprstrength=0;
			 int techstaffavailstrength=0;
			 int contractapprstrength=0;
			 int contractavailstrength=0;
			 
				 int staffadditioncount=0;
				 int staffattritioncount=0;
				 float staffattritioncountpercent=0;
				
				 int techstaffadditioncount=0;
				 int techstaffattritioncount=0;
				 float techstaffattritioncountpercent=0;
				
				 int cumstaffattritioncount=0;
				 float cumstaffattritioncountpercent=0;
				 int cumtechstaffattritioncount=0;
				 float cumtechstaffattritioncountpercent=0;
				
				
				 int grnstaffadditioncount=0;
				 int grnstaffattritioncount=0;
				 float grnstaffattritioncountpercent=0;
				
				 int grntechstaffadditioncount=0;
				 int grntechstaffattritioncount=0;
				 float grntechstaffattritioncountpercent=0;
				
				 int grncumstaffattritioncount=0;
				 float grncumstaffattritioncountpercent=0;
				 int grncumtechstaffattritioncount=0;
				 float grncumtechstaffattritioncountpercent=0;
				 int total=0;
				 
				 
				//dept
					String ACtualdept="";
					if(help.getDeptArray()!=null)
					{	
						String[] dept = help.getDeptArray();

						StringBuffer reqdept = new StringBuffer();
						for (int i = 0; i < dept.length; i++) {
							reqdept.append("'"+dept[i]+"'" + ",");
						}
						ACtualdept= reqdept.substring(0, reqdept.length() - 1).toString();
					}
		
	
		
		// Create a calendar object and set year and month
		Calendar mycal = Calendar.getInstance();

		mycal.set(Integer.parseInt(help.getYear()), Integer.parseInt(help.getMonth())-2, 1);
		
		// Get the number of days in that month
		int daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
								
		String todate="";				
		String fromdate=Integer.toString(Integer.parseInt(help.getYear())-1)+"-"+"04"+"-"+"01";
		if(!help.getMonth().equalsIgnoreCase("1"))
		 todate=help.getYear()+"-"+(Integer.parseInt(help.getMonth())-1)+"-"+daysInMonth;
		else
			todate=Integer.toString(Integer.parseInt(help.getYear())-1)+"-"+12+"-"+daysInMonth;
										
				ArrayList l1=new ArrayList();				
									 


String  a="select  * from (select DPTSTXT,DPTID,sum(availablestaff) as availablestaff ,SUM(availabletech) as availabletech,sum(availablecontr) as availablecontr,"
		+ "sum(additionstaff) as additionstaff,sum(additiontech) as additiontech,sum(attritionstaff) as attritionstaff,case when sum(availablestaff)>0 then "
		+ "convert(decimal(18,2),convert(decimal(18,2),sum(attritionstaff)*100)/sum(availablestaff)) else 0 end  as attritionstaffPercent ,sum(attritiontech) "
		+ "as attritiontech,case when sum(availabletech)>0 then convert(decimal(18,2),convert(decimal(18,2),sum(attritiontech)*100)/sum(availabletech)) else 0 end"
		+ "  as attritiontechPercent,sum(cumuattritionstaff) as cumuattritionstaff,case when sum(availablestaff)>0 then convert(decimal(18,2),"
		+ "convert(decimal(18,2),sum(cumuattritionstaff)*100)/sum(availablestaff)) else 0 end  as cumattritionstaffPercent,sum(cumuattritiontech) as cumuattritiontech,"
		+ "case when sum(availabletech)>0 then convert(decimal(18,2),convert(decimal(18,2),sum(cumuattritiontech)*100)/sum(availabletech)) else 0 end  as cumattritiontechPercent,"
		+ "sum(availablecontr+availablestaff+availabletech+additionstaff+additiontech-(attritionstaff+attritiontech)) as totalavail from (select case when LOCID='"+help.getLocationId()+"' and doj<= '"+todate+"' and ACTIVE=1 and"
		+ " Reporting_Grp=1 then 1 else 0 end as availablestaff ,case when LOCID='"+help.getLocationId()+"'  and doj<= '"+todate+"' and ACTIVE=1 and Reporting_Grp=2 then 1 else 0 "
		+ "end as availabletech ,case when LOCID='"+help.getLocationId()+"' and doj<= '"+todate+"' and ACTIVE=1 and Reporting_Grp>2 then 1 else 0 end as availablecontr ,"
		+ "case when LOCID='"+help.getLocationId()+"' and month(DOJ)='"+help.getMonth()+"'  and YEAR(DOJ)='"+ help.getYear()+"' and Reporting_Grp=1 then 1 else 0 end as additionstaff,case when LOCID='"+help.getLocationId()+"' and month(DOJ)='"+help.getMonth()+"' "
		+ " and YEAR(DOJ)='"+ help.getYear()+"' and Reporting_Grp=2 then 1 else 0 end as additiontech,case when LOCID='"+help.getLocationId()+"' and month(DOL)='"+help.getMonth()+"'  and YEAR(DOL)='"+ help.getYear()+"' and Reporting_Grp=1"
		+ " then 1 else 0 end as attritionstaff,case when LOCID='"+help.getLocationId()+"' and month(DOL)='"+help.getMonth()+"'  and YEAR(DOL)='"+ help.getYear()+"' and Reporting_Grp=2 then 1 else 0 end as attritiontech,"
		+ "case when LOCID='"+help.getLocationId()+"' and dol between '"+fromdate+"' and '"+todate+"' and Reporting_Grp=1 then 1 else 0 end as cumuattritionstaff,case when LOCID='"+help.getLocationId()+"' and dol "
		+ "between '"+fromdate+"' and '"+todate+"' and Reporting_Grp=2 then 1 else 0 end as cumuattritiontech,emp_official_info.DPTID,DEPARTMENT.DPTSTXT  from "
		+ "emp_official_info,DEPARTMENT where DEPARTMENT.DPTID=emp_official_info.DPTID aND emp_official_info.DPTID IN ("+ACtualdept+")  )t group by t.DPTID,t.DPTSTXT )l left outer join (select dptid as dep,"
		+ "SUM(Staff) as apprstaff,SUM(Tech_Staff) as apprtech,SUM(Cont1) as apprcontr  from APPROVED_STRENGTH  where plant='"+help.getLocationId()+"' group by dptid)a on a.dep=l.DPTID "
		+ " order by l.DPTID";
ResultSet aa=ad.selectQuery(a);
try {
	while(aa.next())
	{
		
		
		HRApprovalForm hr=new HRApprovalForm();
		hr.setDepartment(aa.getString("DPTSTXT"));
		
		hr.setStaffapprstrength(aa.getInt("apprstaff"));
		staffapprstrength=staffapprstrength+aa.getInt("apprstaff");
		hr.setTechstaffapprstrength(aa.getInt("apprtech"));
		techstaffapprstrength=techstaffapprstrength+aa.getInt("apprtech");
		hr.setContractapprstrength(aa.getInt("apprcontr"));
		contractapprstrength=contractapprstrength+aa.getInt("apprcontr");
		
		hr.setStaffavailstrength(aa.getInt("availablestaff"));
		staffavailstrength=staffavailstrength+aa.getInt("availablestaff");
		hr.setTechstaffavailstrength(aa.getInt("availabletech"));
		techstaffavailstrength=techstaffavailstrength+aa.getInt("availabletech");
		hr.setContractavailstrength(aa.getInt("availablecontr"));		
		contractavailstrength=contractavailstrength+aa.getInt("availablecontr");
				
		hr.setStaffadditioncount(aa.getInt("additionstaff"));
		staffadditioncount=staffadditioncount+aa.getInt("additionstaff");
		
		hr.setTechstaffadditioncount(aa.getInt("additiontech"));
		techstaffadditioncount=techstaffadditioncount+aa.getInt("additiontech");
		
		hr.setStaffattritioncount(aa.getInt("attritionstaff"));
		staffattritioncount=staffattritioncount+aa.getInt("attritionstaff");
		hr.setStaffattritioncountpercent(aa.getFloat("attritionstaffPercent"));
		
		hr.setTechstaffattritioncount(aa.getInt("attritiontech"));
		techstaffattritioncount=techstaffattritioncount+aa.getInt("attritiontech");
		hr.setTechstaffattritioncountpercent(aa.getFloat("attritiontechPercent"));
		
		
		hr.setCumstaffattritioncount(aa.getInt("cumuattritionstaff"));
		cumstaffattritioncount=cumstaffattritioncount+aa.getInt("cumuattritionstaff");
		
		hr.setCumstaffattritioncountpercent(aa.getFloat("cumattritionstaffPercent"));
		
		hr.setCumtechstaffattritioncount(aa.getInt("cumuattritiontech"));
		cumtechstaffattritioncount=cumtechstaffattritioncount+aa.getInt("cumuattritiontech");
		
		hr.setCumtechstaffattritioncountpercent(aa.getFloat("cumattritiontechPercent"));
		
		hr.setTotal(aa.getString("totalavail"));
        total=total+Integer.parseInt(aa.getString("totalavail"));
		
		l1.add(hr);
	}
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}

request.setAttribute("l1", l1);
		
help.setGrnstaffapprstrength(staffapprstrength);
help.setGrntechstaffapprstrength(techstaffapprstrength);
help.setGrncontractapprstrength(contractapprstrength);

help.setGrnstaffavailstrength(staffavailstrength);
help.setGrntechstaffavailstrength(techstaffavailstrength);
help.setGrncontractavailstrength(contractavailstrength);


help.setGrnstaffadditioncount(staffadditioncount);
help.setGrntechstaffadditioncount(techstaffadditioncount);

help.setGrnstaffattritioncount(staffattritioncount);
help.setGrnstaffattritioncountpercent(Math.round((float)(staffattritioncount * 100.00/staffavailstrength)));

help.setGrntechstaffattritioncount(techstaffattritioncount);
help.setGrntechstaffattritioncountpercent(Math.round((float)(techstaffattritioncount * 100.00/techstaffavailstrength)));

help.setGrncumstaffattritioncount(cumstaffattritioncount);
help.setGrncumstaffattritioncountpercent(Math.round((float)(cumstaffattritioncount * 100.00/staffavailstrength)));

help.setGrncumtechstaffattritioncount(cumtechstaffattritioncount);
help.setGrncumtechstaffattritioncountpercent(Math.round((float)(cumtechstaffattritioncount * 100.00/techstaffavailstrength)));

help.setGrntotpresent(total);

String[] monthName = {"","JAN", "FEB",
		  "MAR", "APR", "MAY", "JUN", "JUL",
		  "AUG", "SEP", "OCT", "NOV",
		  "DEC"
		  };
help.setFrommonth(monthName[Integer.parseInt(help.getMonth())-1]);
help.setMonth(monthName[Integer.parseInt(help.getMonth())]);

try {
	aa.close();
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}
return mapping.findForward("exportcumulativemanpowerreport");	
	
		
	
		
	}
	
	
	public ActionForward organogrammanpowerreportexe(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		

		try {
			Thread.sleep(2000);
		} catch (InterruptedException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}

		
		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
	
		     help.setLocationId(request.getParameter("loc"));
		     help.setSummbrkup(request.getParameter("summbrkup"));
		
		 	ArrayList deptlist = new ArrayList();
		 	ArrayList orglist = new ArrayList();
		 	ArrayList def = new ArrayList();
		     
		 	String list="select distinct DEPARTMENT.DPTID,DPTSTXT from DEPARTMENT,"
					+ "emp_official_info where LOCID='"+help.getLocationId()+"' and emp_official_info.DPTID=DEPARTMENT.DPTID "
					+ "and DEPARTMENT.DPTID in ("+query1+")  order by DPTID";
			
			ResultSet rs1 = ad.selectQuery(list);
			try {
				while(rs1.next())
				{
					HRApprovalForm help1 = new HRApprovalForm();				
					help1.setDepartment(rs1.getString("DPTID"));				
					help1.setDeptTo(rs1.getString("DPTSTXT"));		
					deptlist.add(help1);
									
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			request.setAttribute("deptlist", deptlist);
		     
			String[] monthName = {"","JAN", "FEB",
					  "MAR", "APR", "MAY", "JUN", "JUL",
					  "AUG", "SEP", "OCT", "NOV",
					  "DEC"
					  };
		     
			   
		    String dptid="";
		    int chk=0;
			
		     String abc="select SUBDEPARTMENT.SDPTID,SUBDEPARTMENT.SDPTID_STXT,DEPARTMENT.DPTID,pernr,EMP_FULLNAME,DESIGNATION.DSGSTXT,convert(varchar(10),doj,104) as doj,Month(doj)as mon,"
		     		+ "year(doj) as year from emp_official_info,DEPARTMENT,DESIGNATION,SUBDEPARTMENT where DEPARTMENT.DPTID=emp_official_info.DPTID and SUBDEPARTMENT.SDPTID=emp_official_info.SDPTID and  "
		     		+ "DESIGNATION.DSGID=emp_official_info.DSGID and emp_official_info.LOCID='"+help.getLocationId()+"'  and DEPARTMENT.DPTID in ("+query1+") ";		     
			
		     if(help.getSummbrkup().equalsIgnoreCase("All"))
		     {
		    	 abc=abc+" order by DEPARTMENT.DPTID,SUBDEPARTMENT.SDPTID,pernr";
		     }
		     if(help.getSummbrkup().equalsIgnoreCase("Active"))
		     {
		    	 abc=abc+" and emp_official_info.ACTIVE=1 order by DEPARTMENT.DPTID,SUBDEPARTMENT.SDPTID,pernr";
		     }
		     
		     ResultSet n=ad.selectQuery(abc);
			try {
				while(n.next())
				{
					HRApprovalForm hr = new HRApprovalForm();
					hr.setDepartment(n.getString("DPTID"));
					hr.setEmployeeno(n.getString("pernr"));
					hr.setEmployeeName(n.getString("EMP_FULLNAME"));
					hr.setDesignation(n.getString("DSGSTXT"));					
					hr.setSubdepartment(n.getString("SDPTID_STXT"));					
					hr.setDoj(n.getString("doj"));
					hr.setMonth(monthName[Integer.parseInt(n.getString("mon"))]+"-"+n.getString("year"));
				
					String qual="select top 1 Priority,Qualification.Qualification,specialization from emp_education_details,QUALIFICATION where user_id='"+n.getString("PERNR")+"' and emp_education_details.qualification=QUALIFICATION.Id  order by Priority desc";
					ResultSet qal=ad.selectQuery(qual);
					if(qal.next())
					{
						hr.setQualification(qal.getString("Qualification"));
						hr.setSpecialization(qal.getString("specialization"));
					}
					
					qal.close();
				
					
				   
					dptid=n.getString("DPTID");
					 chk=1;
					
					orglist.add(hr);
					
				}
				
				String appre="select 'data' as prefix, sum(Staff+Tech_Staff+Cont1+Cont2_House+Apprentice) as appstrenth,DPTID from APPROVED_STRENGTH  group by DPTID"
						+ " union select  'final' as prefix ,sum(Staff+Tech_Staff+Cont1+Cont2_House+Apprentice) as appstrenth,'0' from APPROVED_STRENGTH";
				ResultSet j=ad.selectQuery(appre);
			
			
				
				while(j.next())
				{
					HRApprovalForm hr1 = new HRApprovalForm();
					if(j.getString("prefix").equalsIgnoreCase("data"))
					{
					hr1.setDepartment(j.getString("DPTID"));
					hr1.setSubdepartment("Total");
					hr1.setStaffapprstrength(j.getInt("appstrenth"));					
					def.add(hr1);
					}
					else
					{
						help.setStaffapprstrength(j.getInt("appstrenth"));	
					}
				}
				
				j.close();
			
				
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}finally{
    			query1="";
    			query2="";
    			query3="";
    			query4="";
    			query5="";
    			query6="";
    		}

			request.setAttribute("def", def);
			request.setAttribute("orglist", orglist);
		

try {
	rs1.close();
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}

try {
	n.close();
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}
return mapping.findForward("displayOrganogrammanpowerreport");	
	
	
		
	
		
	
		
	}
	
	
	public ActionForward cumulativemanpowerreportexe(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		

		try {
			Thread.sleep(2000);
		} catch (InterruptedException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}

		
		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
		
		   help.setMonth(request.getParameter("month"));
		     help.setYear(request.getParameter("year"));
		     help.setLocationId(request.getParameter("loc"));
		     help.setEmployeeNumber(user.getFullName());
			 int staffapprstrength=0;
			 int staffavailstrength=0;
			 int techstaffapprstrength=0;
			 int techstaffavailstrength=0;
			 int contractapprstrength=0;
			 int contractavailstrength=0;
			 
				 int staffadditioncount=0;
				 int staffattritioncount=0;
				 float staffattritioncountpercent=0;
				
				 int techstaffadditioncount=0;
				 int techstaffattritioncount=0;
				 float techstaffattritioncountpercent=0;
				
				 int cumstaffattritioncount=0;
				 float cumstaffattritioncountpercent=0;
				 int cumtechstaffattritioncount=0;
				 float cumtechstaffattritioncountpercent=0;
				
				
				 int grnstaffadditioncount=0;
				 int grnstaffattritioncount=0;
				 float grnstaffattritioncountpercent=0;
				
				 int grntechstaffadditioncount=0;
				 int grntechstaffattritioncount=0;
				 float grntechstaffattritioncountpercent=0;
				
				 int grncumstaffattritioncount=0;
				 float grncumstaffattritioncountpercent=0;
				 int grncumtechstaffattritioncount=0;
				 float grncumtechstaffattritioncountpercent=0;
				 int total=0;
		
		String dept=query1;
		
		// Create a calendar object and set year and month
		Calendar mycal = Calendar.getInstance();

		mycal.set(Integer.parseInt(help.getYear()), Integer.parseInt(help.getMonth())-2, 1);
		
		// Get the number of days in that month
		int chkyear=Integer.parseInt(help.getMonth());
		String todate="";
		String fromdate="";
		String mon="";
		if (chkyear>4){
			if (Integer.parseInt(help.getMonth())<10){
	              mon= '0'+help.getMonth();
	            }
				else
					{
					mon= help.getMonth();
					};
		// Get the number of days in that month
				int daysInMonth=0;
				if(help.getMonth()!=null)
				{
					if(help.getMonth().equalsIgnoreCase("4")||help.getMonth().equalsIgnoreCase("6")||help.getMonth().equalsIgnoreCase("9")||help.getMonth().equalsIgnoreCase("11"))
					{
						 daysInMonth = 30;
					}
					else if(help.getMonth().equalsIgnoreCase("2"))
					{
						daysInMonth = 28;
					}
					else
					{
						daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
					}
				}
		 
						
	 fromdate=Integer.toString(Integer.parseInt(help.getYear()))+"-"+"04"+"-"+"01";
		if(!help.getMonth().equalsIgnoreCase("1"))
		 todate=help.getYear()+"-"+mon+"-"+daysInMonth;
		else
			todate=Integer.toString(Integer.parseInt(help.getYear()))+"-"+"12"+"-"+Integer.toString(daysInMonth);
		
		}else{
			if (Integer.parseInt(help.getMonth())<10){
	              mon= '0'+help.getMonth();
	            }
				else
					{
					mon= help.getMonth();
					};
			int daysInMonth=0;
			if(help.getMonth()!=null)
			{
				if(help.getMonth().equalsIgnoreCase("4")||help.getMonth().equalsIgnoreCase("6")||help.getMonth().equalsIgnoreCase("9")||help.getMonth().equalsIgnoreCase("11"))
				{
					 daysInMonth = 30;
				}
				else if(help.getMonth().equalsIgnoreCase("2"))
				{
					daysInMonth = 28;
				}
				else
				{
					daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
				}
			}
							
		/* fromdate=Integer.toString(Integer.parseInt(help.getYear())-1)+"-"+"04"+"-"+"01";
			if(!help.getMonth().equalsIgnoreCase("1"))
			 todate=help.getYear()+"-"+(Integer.parseInt(help.getMonth()))+"-"+daysInMonth;
			else
				todate=Integer.toString(Integer.parseInt(help.getYear())-1)+"-"+12+"-"+daysInMonth;*/
			fromdate=Integer.toString(Integer.parseInt(help.getYear())-1)+"-"+"04"+"-"+"01";
				if(!help.getMonth().equalsIgnoreCase("1"))
				 todate=help.getYear()+"-"+mon+"-"+Integer.toString(daysInMonth);
				else
					todate=Integer.toString(Integer.parseInt(help.getYear())-1)+"-"+"12"+"-"+Integer.toString(daysInMonth);
			
		}
										
		/*int daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
		String todate="";				
		String fromdate=Integer.toString(Integer.parseInt(help.getYear())-1)+"-"+"04"+"-"+"01";
		if(!help.getMonth().equalsIgnoreCase("1"))
		 todate=help.getYear()+"-"+(Integer.parseInt(help.getMonth())-1)+"-"+daysInMonth;
		else
			todate=Integer.toString(Integer.parseInt(help.getYear())-1)+"-"+12+"-"+daysInMonth;
		*/
		

		ArrayList<String> deptList=new ArrayList<String>();
		ArrayList deptLabelList=new ArrayList();
		/*ResultSet rs15 = ad.selectQuery("select dptid," +
				"DPTLTXT from DEPARTMENT  "); */
		String Dprt="select dptid," +
				"DPTLTXT from DEPARTMENT where Location like '%"+help.getLocationId()+"%' ";
		ResultSet rs15 = ad.selectQuery(Dprt); 
		try {
			while(rs15.next()) {
				deptList.add(rs15.getString("dptid"));
				deptLabelList.add(rs15.getString("DPTLTXT"));
			}
			rs15.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		help.setDeptList(deptList);
		help.setDeptLabelList(deptLabelList);





		//dept
		String ACtualdept="";
		if(!(deptList.isEmpty()))
		{	
			String[] dept1 = deptList.toArray(new String[deptList.size()]);


			StringBuffer reqdept = new StringBuffer();
			for (int i = 0; i < dept1.length; i++) {
				reqdept.append("'"+dept1[i]+"'" + ",");
			}
			ACtualdept= reqdept.substring(0,reqdept.length()-1).toString();
			this.query1=ACtualdept;
		}
		else{
			help.setMessage2("Selected Location as to be mapped with Department to generate the report");		}								
				ArrayList l1=new ArrayList();				
									 
String  a="select  * from (select DPTSTXT,DPTID,sum(availablestaff) as availablestaff ,SUM(availabletech) as availabletech,sum(availablecontr) as availablecontr,"
		+ "sum(additionstaff) as additionstaff,sum(additiontech) as additiontech,sum(attritionstaff) as attritionstaff,case when sum(availablestaff)>0 then "
		+ "convert(decimal(18,2),convert(decimal(18,2),sum(attritionstaff)*100)/sum(availablestaff)) else 0 end  as attritionstaffPercent ,sum(attritiontech) "
		+ "as attritiontech,case when sum(availabletech)>0 then convert(decimal(18,2),convert(decimal(18,2),sum(attritiontech)*100)/sum(availabletech)) else 0 end"
		+ "  as attritiontechPercent,sum(cumuattritionstaff) as cumuattritionstaff,case when sum(availablestaff)>0 then convert(decimal(18,2),"
		+ "convert(decimal(18,2),sum(cumuattritionstaff)*100)/sum(availablestaff)) else 0 end  as cumattritionstaffPercent,sum(cumuattritiontech) as cumuattritiontech,"
		+ "case when sum(availabletech)>0 then convert(decimal(18,2),convert(decimal(18,2),sum(cumuattritiontech)*100)/sum(availabletech)) else 0 end  as cumattritiontechPercent,"
		+ "sum(availablecontr+availablestaff+availabletech+additionstaff+additiontech-(attritionstaff+attritiontech)) as totalavail from (select case when LOCID='"+help.getLocationId()+"' and doj<= convert(date, '"+todate+"', 126) and ACTIVE=1 and"
		+ " Reporting_Grp=1 then 1 else 0 end as availablestaff ,case when LOCID='"+help.getLocationId()+"'  and doj<= convert(date, '"+todate+"', 126) and ACTIVE=1 and Reporting_Grp=2 then 1 else 0 "
		+ "end as availabletech ,case when LOCID='"+help.getLocationId()+"' and doj<= convert(date, '"+todate+"', 126) and ACTIVE=1 and Reporting_Grp>2 then 1 else 0 end as availablecontr ,"
		+ "case when LOCID='"+help.getLocationId()+"' and month(DOJ)='"+help.getMonth()+"'  and YEAR(DOJ)='"+ help.getYear()+"' and Reporting_Grp=1 then 1 else 0 end as additionstaff,case when LOCID='"+help.getLocationId()+"' and month(DOJ)='"+help.getMonth()+"' "
		+ " and YEAR(DOJ)='"+ help.getYear()+"' and Reporting_Grp=2 then 1 else 0 end as additiontech,case when LOCID='"+help.getLocationId()+"' and month(DOL)='"+help.getMonth()+"' and YEAR(DOL)='"+ help.getYear()+"' and Reporting_Grp=1"
		+ " then 1 else 0 end as attritionstaff,case when LOCID='"+help.getLocationId()+"' and month(DOL)='"+help.getMonth()+"' and YEAR(DOL)='"+ help.getYear()+"' and Reporting_Grp=2 then 1 else 0 end as attritiontech,"
		+ "case when LOCID='"+help.getLocationId()+"' and dol between convert(date, '"+fromdate+"', 126) and convert(date, '"+todate+"', 126) and Reporting_Grp=1 then 1 else 0 end as cumuattritionstaff,case when LOCID='"+help.getLocationId()+"' and dol "
		+ "between convert(date, '"+fromdate+"', 126) and convert(date, '"+todate+"', 126) and Reporting_Grp=2 then 1 else 0 end as cumuattritiontech,emp_official_info.DPTID,DEPARTMENT.DPTSTXT  from "
		+ "emp_official_info,DEPARTMENT where DEPARTMENT.DPTID=emp_official_info.DPTID aND emp_official_info.DPTID IN ("+ACtualdept+")  )t group by t.DPTID,t.DPTSTXT )l left outer join (select dptid as dep,"
		+ "SUM(Staff) as apprstaff,SUM(Tech_Staff) as apprtech,SUM(Cont1) as apprcontr  from APPROVED_STRENGTH  where plant='"+help.getLocationId()+"' group by dptid)a on a.dep=l.DPTID "
		+ " order by l.DPTID";
ResultSet aa=ad.selectQuery(a);
try {
	while(aa.next())
	{
		
		
		HRApprovalForm hr=new HRApprovalForm();
		hr.setDepartment(aa.getString("DPTSTXT"));
		
		hr.setStaffapprstrength(aa.getInt("apprstaff"));
		staffapprstrength=staffapprstrength+aa.getInt("apprstaff");
		hr.setTechstaffapprstrength(aa.getInt("apprtech"));
		techstaffapprstrength=techstaffapprstrength+aa.getInt("apprtech");
		hr.setContractapprstrength(aa.getInt("apprcontr"));
		contractapprstrength=contractapprstrength+aa.getInt("apprcontr");
		
		hr.setStaffavailstrength(aa.getInt("availablestaff"));
		staffavailstrength=staffavailstrength+aa.getInt("availablestaff");
		hr.setTechstaffavailstrength(aa.getInt("availabletech"));
		techstaffavailstrength=techstaffavailstrength+aa.getInt("availabletech");
		hr.setContractavailstrength(aa.getInt("availablecontr"));		
		contractavailstrength=contractavailstrength+aa.getInt("availablecontr");
				
		hr.setStaffadditioncount(aa.getInt("additionstaff"));
		staffadditioncount=staffadditioncount+aa.getInt("additionstaff");
		
		hr.setTechstaffadditioncount(aa.getInt("additiontech"));
		techstaffadditioncount=techstaffadditioncount+aa.getInt("additiontech");
		
		hr.setStaffattritioncount(aa.getInt("attritionstaff"));
		staffattritioncount=staffattritioncount+aa.getInt("attritionstaff");
		hr.setStaffattritioncountpercent(aa.getFloat("attritionstaffPercent"));
		
		hr.setTechstaffattritioncount(aa.getInt("attritiontech"));
		techstaffattritioncount=techstaffattritioncount+aa.getInt("attritiontech");
		hr.setTechstaffattritioncountpercent(aa.getFloat("attritiontechPercent"));
		
		
		hr.setCumstaffattritioncount(aa.getInt("cumuattritionstaff"));
		cumstaffattritioncount=cumstaffattritioncount+aa.getInt("cumuattritionstaff");
		
		hr.setCumstaffattritioncountpercent(aa.getFloat("cumattritionstaffPercent"));
		
		hr.setCumtechstaffattritioncount(aa.getInt("cumuattritiontech"));
		cumtechstaffattritioncount=cumtechstaffattritioncount+aa.getInt("cumuattritiontech");
		
		hr.setCumtechstaffattritioncountpercent(aa.getFloat("cumattritiontechPercent"));
		
		hr.setTotal(aa.getString("totalavail"));
        total=total+Integer.parseInt(aa.getString("totalavail"));
		
		l1.add(hr);
	}
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}
finally{
	query1="";
	query2="";
	query3="";
	query4="";
	query5="";
	query6="";
}
request.setAttribute("l1", l1);
		
help.setGrnstaffapprstrength(staffapprstrength);
help.setGrntechstaffapprstrength(techstaffapprstrength);
help.setGrncontractapprstrength(contractapprstrength);

help.setGrnstaffavailstrength(staffavailstrength);
help.setGrntechstaffavailstrength(techstaffavailstrength);
help.setGrncontractavailstrength(contractavailstrength);


help.setGrnstaffadditioncount(staffadditioncount);
help.setGrntechstaffadditioncount(techstaffadditioncount);

help.setGrnstaffattritioncount(staffattritioncount);
help.setGrnstaffattritioncountpercent(Math.round((float)(staffattritioncount * 100.00/staffavailstrength)));

help.setGrntechstaffattritioncount(techstaffattritioncount);
help.setGrntechstaffattritioncountpercent(Math.round((float)(techstaffattritioncount * 100.00/techstaffavailstrength)));

help.setGrncumstaffattritioncount(cumstaffattritioncount);
help.setGrncumstaffattritioncountpercent(Math.round((float)(cumstaffattritioncount * 100.00/staffavailstrength)));

help.setGrncumtechstaffattritioncount(cumtechstaffattritioncount);
help.setGrncumtechstaffattritioncountpercent(Math.round((float)(cumtechstaffattritioncount * 100.00/techstaffavailstrength)));

help.setGrntotpresent(total);

String[] monthName = {"","JAN", "FEB",
		  "MAR", "APR", "MAY", "JUN", "JUL",
		  "AUG", "SEP", "OCT", "NOV",
		  "DEC"
		  };
help.setFrommonth(monthName[Integer.parseInt(help.getMonth())-1]);
help.setMonth(monthName[Integer.parseInt(help.getMonth())]);
try {
	aa.close();
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}
return mapping.findForward("displaycumulativemanpowerreport");	
	
		
	}
	
	public ActionForward manpowerreportexe(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {


		try {
			Thread.sleep(2000);
		} catch (InterruptedException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}
		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
		
		Calendar mycal = Calendar.getInstance();
		help.setFrommonth(Integer.toString(mycal.get(Calendar.MONTH) + 1));
		help.setEmployeeName(user.getFullName());
		
		String lplant=request.getParameter("loc");
		
		ResultSet plrs115 = ad.selectQuery("select * from Location where LOCATION_CODE='"+lplant+"' "); 
				try {
					if(plrs115.next()) {
						help.setLock_id(plrs115.getString("LOCNAME"));
					}
					plrs115.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		
		
		ArrayList shiftList=new ArrayList();
		ArrayList shiftLabelList=new ArrayList();
		ResultSet rs115 = ad.selectQuery("select shift_code," +
				"Shift_Name from EMP_SHIFT_MASTER order by Shift_Name"); 
				try {
					while(rs115.next()) {
						shiftList.add(rs115.getString("shift_code"));
						shiftLabelList.add(rs115.getString("Shift_Name"));
					}
					rs115.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setShiftList(shiftList);
				help.setShiftLabelList(shiftLabelList);
		
		
				String cmpcode="";
				int id=user.getGroupId();
				String cmp[]=new String[0]; 
				String locations="";
				
				String aa="select * from user_group where id='"+id+"'";
				ResultSet cc=ad.selectQuery(aa);
				try {
					if(cc.next())
					{
						cmpcode=cc.getString("Attendance_Loc");
						
						if(cmpcode.contains(","))
						{
						 cmp=cmpcode.split(",");
						
						for(int b=0;b<cmp.length;b++)
						{
							locations=locations+"'"+cmp[b]+"',";
						}
						
						locations=locations.substring(0, locations.length()-1);
						}
						else
						{
							locations="'"+cmpcode+"'";
						}
					}
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
		   ArrayList locationList=new ArrayList();
					ArrayList locationLabelList=new ArrayList();
					ResultSet rs11 = ad.selectQuery("select LOCID," +
							"LOCNAME,location_code from location where location_code in ("+locations+")"); 
							try {
								while(rs11.next()) {
									locationList.add(rs11.getString("location_code"));
									locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
									
								}
								rs11.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							help.setLocationIdList(locationList);
							help.setLocationLabelList(locationLabelList);
	
		
	
		
					
	
				ArrayList deptList=new ArrayList();
				ArrayList deptLabelList=new ArrayList();
				ResultSet rs15 = ad.selectQuery("select dptid," +
						"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
						try {
							while(rs15.next()) {
								deptList.add(rs15.getString("dptid"));
								deptLabelList.add(rs15.getString("DPTLTXT"));
							}
							rs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						help.setDeptList(deptList);
						help.setDeptLabelList(deptLabelList);
						
						//subdep
						ArrayList subdeptList=new ArrayList();
						ArrayList subdeptLabelList=new ArrayList();
						ResultSet subrs15 = ad.selectQuery("select SDPTID," +
								"SDPTID_LTXT from SUBDEPARTMENT order by SDPTID_LTXT "); 
								try {
									while(subrs15.next()) {
										subdeptList.add(subrs15.getString("SDPTID"));
										subdeptLabelList.add(subrs15.getString("SDPTID_LTXT"));
									}
									subrs15.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								
								help.setSubdeptList(subdeptList);
								help.setSubdeptLabelList(subdeptLabelList);
								
								//repgrp
								ArrayList repgrptList=new ArrayList();
								ArrayList repgrpLabelList=new ArrayList();
								ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
										"Grp_LTXT from REPORTING_GROUP where  Grp_ID not in(1,2,3,7)   order by Grp_LTXT "); 
										try {
											while(reprs15.next()) {
												repgrptList.add(reprs15.getString("Grp_ID"));
												repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
											}
											reprs15.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										
										help.setRepgrpList(repgrptList);
										help.setRepgrpLabelList(repgrpLabelList);
										
										ArrayList payGroupList=new ArrayList();
										ArrayList payGroupLabelList=new ArrayList();
										ResultSet rs12 = ad.selectQuery("select Paygroup," +
										"Long_Desc from Paygroup_Master"); 
										try {
											while(rs12.next()) {
												payGroupList.add(rs12.getString("Paygroup"));
												payGroupLabelList.add(rs12.getString("Long_Desc"));
											}
											rs12.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										
										help.setPayGroupList(payGroupList);
										help.setPayGroupLabelList(payGroupLabelList);
										
										
										String payplant=request.getParameter("loc");
										String paygrp="";
										String paygrp12="select * from Paygroup_Master where Plant='"+payplant+"'";
										ResultSet prs12=  ad.selectQuery(paygrp12);
												try {
													while(prs12.next()) {
														paygrp=prs12.getString("paygroup");
													}
													rs12.close();
												} catch (SQLException e) {
													// TODO Auto-generated catch block
													e.printStackTrace();
												}
										
								
								/*		//dept
										String ACtualdept="";
									    if(help.getDeptArray()!=null)
									    {	
									    String[] dept = help.getDeptArray();
									    
									    StringBuffer reqdept = new StringBuffer();
										for (int i = 0; i < dept.length; i++) {
											reqdept.append("'"+dept[i]+"'" + ",");
										}
										 ACtualdept= reqdept.substring(0, reqdept.length() - 1).toString();
									    }
										
									    
									    //subdept
									    
									    String ACtualsubdept="";
									    if(help.getSubdeptArray()!=null)
									    {	
									    String[] subdept = help.getSubdeptArray();
									    
									    StringBuffer reqsubdept = new StringBuffer();
										for (int i = 0; i < subdept.length; i++) {
											reqsubdept.append("'"+subdept[i]+"'" + ",");
										}
										ACtualsubdept= reqsubdept.substring(0, reqsubdept.length() - 1).toString();
									    }
									    
                                        //reporting
									    
									    String ACtualrepgrp="";
									    if(help.getRepgrpArray()!=null)
									    {	
									    String[] repgrp = help.getRepgrpArray();
									    
									    StringBuffer reqrepgrp = new StringBuffer();
										for (int i = 0; i < repgrp.length; i++) {
											reqrepgrp.append("'"+repgrp[i]+"'" + ",");
										}
										ACtualrepgrp= reqrepgrp.substring(0, reqrepgrp.length() - 1).toString();
									    }*/
									    
										 int staffapprstrength=0;
										 int staffavailstrength=0;
										 int staffpresent=0;
										 int staffabsent=0;
										 float staffsalary=0;
										
										
										 
										  
										 
										 int techstaffapprstrength=0;
										 int techstaffavailstrength=0;
										 int techstaffpresent=0;
										 int techstaffabsent=0;
										 float techstaffsalary=0;
										
										
										 int apprenstaffapprstrength=0;
										 int apprenstaffavailstrength=0;
										 int apprenstaffpresent=0;
										 int apprenstaffabsent=0;
										 float apprenstaffsalary=0;
										
										 int contractapprstrength=0;
										 int contractavailstrength=0;

										 int skilledpresent=0;
										 int unskilledpresent=0;
										 int semiskilledpresent=0;
										 int securitypresent=0;
										 int projectspresent=0;

										 int skilledabsent=0;
										 int unskilledabsent=0;
										 int semiskilledabsent=0;
										 int securityabsent=0;
										 int projectsabsent=0;
										
										 int totcontractpresent=0;
										 int totcontractabsent=0;
										 int totcontractSalary=0;
										
										
										
										   
										 int houseapprstrength=0;
										 int houseavailstrength=0;
										 
										 int housepresent=0;
										  int houseabsent=0;
										 float housesalary=0;
										
										 int totpresent=0;
										 int totabsent=0;
										 float totsalary=0;
										
										
										 int threeapprstrength=0;	
										 int threepresent=0;
										 int threeabsnet=0;
										 float threesalary=0;
										
										///grand
										
										
										 
										  
										 
										 int grnstaffapprstrength=0;
										 int grnstaffavailstrength=0;
										 int grnstaffpresent=0;
										 int grnstaffabsent=0;
										 float grnstaffsalary=0;
										
										 int grntechstaffapprstrength=0;
										 int grntechstaffavailstrength=0;
										 int grntechstaffpresent=0;
										 int grntechstaffabsent=0;
										 float grntechstaffsalary=0;
										
										
										 int grnapprenstaffapprstrength=0;
										 int grnapprenstaffavailstrength=0;
										 int grnapprenstaffpresent=0;
										 int grnapprenstaffabsent=0;
										 float grnapprenstaffsalary=0;
										
										 int grncontractapprstrength=0;
										 int grncontractavailstrength=0;

										 int grnskilledpresent=0;
										 int grnunskilledpresent=0;
										 int grnsemiskilledpresent=0;
										 int grnsecuritypresent=0;
										 int grnprojectspresent=0;
										
										 int grnskilledabsent=0;
										 int grnunskilledabsent=0;
										 int grnsemiskilledabsent=0;
										 int grnsecurityabsent=0;
										 int grnprojectsabsent=0;
										 
										 
										 
										 int grntotcontractpresent=0;
										 int grntotcontractabsent=0;
										 int grntotcontractSalary=0;
										
										
										 int grnhouseapprstrength=0;
										 int grnhouseavailstrength=0;
										 
										 int grnhousepresent=0;
										 int grnhouseabsent=0;
										 float grnhousesalary=0;
										
										 int grntotpresent=0;
										  int grntotabsent=0;
										 float grntotsalary=0;
										
									
									 	
										
										 
										  
											 
											
										 int grnthreeapprstrength=0;	
										 int grnthreepresent=0;
										  int grnthreeabsent=0;
										 float grnthreesalary=0;
										 
										 
										 //subtotal
										 
											
										 int substaffapprstrength=0;
										 int substaffavailstrength=0;
										 int substaffpresent=0;
										  int substaffabsent=0;
										 float substaffsalary=0;
										
										 int subtechstaffapprstrength=0;
										 int subtechstaffavailstrength=0;
										 int subtechstaffpresent=0;
										 int subtechstaffabsent=0;
										 float subtechstaffsalary=0;
										
										
										 int subapprenstaffapprstrength=0;
										 int subapprenstaffavailstrength=0;
										 int subapprenstaffpresent=0;
										  int subapprenstaffabsent=0;
										 float subapprenstaffsalary=0;
										
										 int subcontractapprstrength=0;
										 int subcontractavailstrength=0;
										 

										 int subskilledpresent=0;
										 int subunskilledpresent=0;
										 int subsemiskilledpresent=0;
										 int subsecuritypresent=0;
										 int subprojectspresent=0;
										 
										 int subskilledabsent=0;
										 int subunskilledabsent=0;
										 int subsemiskilledabsent=0;
										 int subsecurityabsent=0;
										 int subprojectsabsent=0;
										
										 int subtotcontractpresent=0;
										 int subtotcontractabsent=0;
										 int subtotcontractSalary=0;
										
										
										 int subhouseapprstrength=0;
										 int subhouseavailstrength=0;
										 
										 int subhousepresent=0;
										 int subhouseabsent=0;
										 float subhousesalary=0;
										
										 int subtotpresent=0;
										 int subtotabsent=0;
										 float subtotsalary=0;
										
										
										
										 
										
										 int subthreeapprstrength=0;	
										 int subthreepresent=0;
										 int subthreeabsent=0;
										 float subthreesalary=0;
										
								
									    LinkedList man=new LinkedList();
									    
									    int frmday=0;
									    int today=0;
									    int frmmon=0;
									    int tomon=0;
									    int frmyear=0;
									    int toyear=0;
									    
									    help.setFromDate(request.getParameter("from"));
									    help.setToDate(request.getParameter("from"));
									    
									    String fromdate=help.getFromDate();
									    String todate=help.getToDate();
									    
									    String from[]=fromdate.split("/");
									    frmday=Integer.parseInt(from[0]);
									    frmmon=Integer.parseInt(from[1]);
									    frmyear=Integer.parseInt(from[2]);
									    
									    String to[]=todate.split("/");
									    today=Integer.parseInt(to[0]);
									    tomon=Integer.parseInt(to[1]);
									    toyear=Integer.parseInt(to[2]);
									    
									    String subdptid="";
									    int chk=0;
									    
									    //
									    String ACtualrepgrp=this.query2;
									    String ACtualsubdept=this.query1;
									    
									    String status1=request.getParameter("status");
										   // String ACtualpay=request.getParameter("paygrp");
										    String ACtualpay=paygrp;
									    
									  // String ACtualpay=request.getParameter("paygrp");
									   help.setLocationId(request.getParameter("loc"));
									    
									    if(!ACtualsubdept.equalsIgnoreCase(""))
									    {
									    
									    String catdesc=" select * from REPORTING_GROUP where Grp_ID in ("+ACtualrepgrp+") order by Grp_ID";
									   
										 ResultSet rscat=ad.selectQuery(catdesc);
										 LinkedList categorylist=new LinkedList();
										 String reqrcateg="";
										 try {
											while (rscat.next()) 
											  {
												 HRApprovalForm m1=new HRApprovalForm(); 
												 m1.setRepgrp(rscat.getString("Grp_STXT"));
												 categorylist.add(m1);
											  }
										} catch (SQLException e3) {
											// TODO Auto-generated catch block
											e3.printStackTrace();
										}
										request.setAttribute("categorylist", categorylist);
									    
										
								
									    
									    String abc1="select * From (SELECT ROW_NUMBER() OVER(ORDER BY  APPROVED_STRENGTH.Area) AS RowNum,*,id as SDPTID from APPROVED_STRENGTH where plant='"+help.getLocationId()+"' and id in ("+ACtualsubdept+"))as sub order by id";
									    
										/*String abc="select dep.DPTSTXT as dep,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT"
												+ " from emp_official_info as emp,reporting_group as rep,DEPARTMENT as dep,SUBDEPARTMENT as subdep where rep.grp_id=emp.Reporting_Grp and dep.DPTID=emp.DPTID"
												+ " and emp.SDPTID=subdep.SDPTID and emp.DPTID in ("+ACtualdept+") and emp.LOCID='"+help.getLocationId()+"' and subdep.SDPTID in ("+ACtualsubdept+") "
														+ "and ACTIVE = 1 group by emp.DPTID,dep.DPTSTXT,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT order by SDPTID";*/
										
									    ResultSet rsf=ad.selectQuery(abc1);
										//get last row no
										  String rowno="";
										  try {
											rsf.afterLast();
									
										if(rsf.previous())
										{
											rowno=rsf.getString("RowNum");
											   
										}
											} catch (SQLException e2) {
												// TODO Auto-generated catch block
												e2.printStackTrace();
											}
									    
										ResultSet rsabc= ad.selectQuery(abc1); 
										
								
										try {
											while(rsabc.next())
											{
												
												HRApprovalForm hr=new HRApprovalForm();
												
												if(!rsabc.getString("AREA").equalsIgnoreCase(subdptid) && chk==1)
												{
													HRApprovalForm hr1=new HRApprovalForm();
													
										
													hr1.setDepartment(subdptid);
													hr1.setLocationId("Sub");
												    hr1.setStaffapprstrength(substaffapprstrength);
													 hr1.setStaffavailstrength(substaffavailstrength);
													 hr1.setStaffpresent(substaffpresent);
													 hr1.setStaffabsent(substaffabsent);
													 hr1.setStaffsalary(substaffsalary);
													
													 hr1.setTechstaffapprstrength(subtechstaffapprstrength);
													 hr1.setTechstaffavailstrength(subtechstaffavailstrength);
													 hr1.setTechstaffpresent(subtechstaffpresent);
													 hr1.setTechstaffabsent(subtechstaffabsent);
													 hr1.setTechstaffsalary(subtechstaffsalary);
													
													
												 	 
													
													 hr1.setApprenstaffapprstrength(subapprenstaffapprstrength);
													 hr1.setApprenstaffavailstrength(subapprenstaffavailstrength);
													 hr1.setApprenstaffpresent(subapprenstaffpresent);
													  hr1.setApprenstaffabsent(subapprenstaffabsent);
													 hr1.setApprenstaffsalary(subapprenstaffsalary);
													
													 hr1.setContractapprstrength(subcontractapprstrength);
													 hr1.setContractavailstrength(subcontractavailstrength);
													 

													 hr1.setSkilledpresent(subskilledpresent);
													 hr1.setUnskilledpresent(subunskilledpresent);
													 hr1.setSemiskilledpresent(subsemiskilledpresent);
													 hr1.setSecuritypresent(subsecuritypresent);
													 hr1.setProjectspresent(subprojectspresent);
													
													 hr1.setSkilledabsent(subskilledabsent);
													 hr1.setUnskilledabsent(subunskilledabsent);
													 hr1.setSemiskilledabsent(subsemiskilledabsent);
													 hr1.setSecurityabsent(subsecurityabsent);
													 hr1.setProjectsabsent(subprojectsabsent);
													
													 hr1.setTotcontractpresent(subtotcontractpresent);
													 hr1.setTotcontractabsent(subtotcontractabsent);
													 hr1.setTotcontractSalary(subtotcontractSalary);
													
													
													 hr1.setHouseapprstrength(subhouseapprstrength);
													 hr1.setHouseavailstrength(subhouseavailstrength);	
													 hr1.setHousepresent(subhousepresent);
													 hr1.setHouseabsent(subhouseabsent);
													 hr1.setHousesalary(subhousesalary);
													
													 hr1.setTotpresent(subtotpresent);
													  hr1.setTotabsent(subtotabsent);
													 hr1.setTotsalary(subtotsalary);
													
													 
													 
													   
													
													 hr1.setThreeapprstrength(subthreeapprstrength);	
													 hr1.setThreepresent(subthreepresent);
													 hr1.setThreeabsent(subthreeabsent);
													 hr1.setThreesalary(subthreesalary);
													
													 man.add(hr1);
													 
													 
													  substaffapprstrength=0;
													  substaffavailstrength=0;
													  substaffpresent=0;
													  substaffabsent=0;
													  substaffsalary=0;
													
													  subtechstaffapprstrength=0;
													  subtechstaffavailstrength=0;
													  subtechstaffpresent=0;
													  subtechstaffabsent=0;
													  subtechstaffsalary=0;
													
													
													
													  
													
													  subapprenstaffapprstrength=0;
													  subapprenstaffavailstrength=0;
													  subapprenstaffpresent=0;
													  subapprenstaffabsent=0;
													  subapprenstaffsalary=0;
													
													  subcontractapprstrength=0;
													  subcontractavailstrength=0;

													  subskilledpresent=0;
													  subunskilledpresent=0;
													  subsemiskilledpresent=0;
													  subsecuritypresent=0;
													  subprojectspresent=0;
													  
													  subskilledabsent=0;
													  subunskilledabsent=0;
													  subsemiskilledabsent=0;
													  subsecurityabsent=0;
													  subprojectsabsent=0;
													
													
													  subtotcontractpresent=0;
													  subtotcontractabsent=0;
													  subtotcontractSalary=0;
													  																											    
													  
													  subhouseapprstrength=0;
													  subhouseavailstrength=0;
													  subhousepresent=0;
													  subhouseabsent=0;
													  subhousesalary=0;
													
													  subtotpresent=0;
													   subtotabsent=0;
													  subtotsalary=0;
													
													
													  subthreeapprstrength=0;	
													  subthreepresent=0;
													  subthreeabsent=0;
													  subthreesalary=0;
													
												}
												
												 int present1=0;
												 int present2=0;
												 int present3=0;
												 int present4=0;
												 int present5=0;
												 int present6=0;
												 int present7=0;
												 int present8=0;
												 int present9=0;
												 int absent1=0;
												 int absent2=0;
												 int absent3=0;
												 int absent4=0;
												 int absent5=0;
												 int absent6=0;
												 int absent7=0;
												 int absent8=0;
												 int absent9=0;
												 String empnos1="";
												 String empnos2="";
												 String empnos3="";
												 String empnos4="";
												 String empnos5="";
												 String empnos6="";
												 String empnos7="";
												 String empnos8="";
												 String empnos9="";
												 
												 
												 subdptid=rsabc.getString("AREA");
												 chk=1;
												 
													hr.setLocationId(help.getLocationId());
													hr.setDepartment(rsabc.getString("Description"));
													
													
															hr.setStaffapprstrength(rsabc.getInt("Staff"));
															hr.setTechstaffapprstrength(rsabc.getInt("Tech_Staff"));
															hr.setApprenstaffapprstrength(rsabc.getInt("Apprentice"));
															hr.setContractapprstrength(rsabc.getInt("Cont1"));
															hr.setHouseapprstrength(rsabc.getInt("cont2_house"));
														
														
														
														
												 
												 ///Staff/////////////////////////////////////////////////////////////////////////////
													//AVAILABLE
													String ava="select count(*) as availableStrength,dep.DPTSTXT as dep,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT,sum(emp.dptid) as  salary from emp_official_info as emp,reporting_group as rep,DEPARTMENT as dep,SUBDEPARTMENT as subdep where  rep.grp_id=emp.Reporting_Grp and dep.DPTID=emp.DPTID and emp.SDPTID=subdep.SDPTID  and emp.LOCID='"+help.getLocationId()+"' and subdep.SDPTID in ("+rsabc.getString("SDPTID")+") AND EMP.ACTIVE='"+status1+"' AND Reporting_Grp=1  group by emp.DPTID,dep.DPTSTXT,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT";	
													ResultSet rsava= ad.selectQuery(ava); 
													if(rsava.next())
													{
														hr.setStaffavailstrength(rsava.getInt("availableStrength"));
														hr.setStaffsalary(0);
													}
														
													rsava.close();
													String query1="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master where Location.LOCATION_CODE=emp_official_info.LOCID and "
															+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'    and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (1)  and ACTIVE = '"+status1+"'";
													ResultSet rs4= ad.selectQuery(query1); 
													try {
														while(rs4.next())
														{
															empnos1=empnos1+","+rs4.getString("pernr");
														}
														if(!empnos1.equalsIgnoreCase(""))
														empnos1=empnos1.substring(1, empnos1.length());
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													rs4.close();
													for(int j=frmday;j<=today;j++)
													{
													if(!empnos1.equalsIgnoreCase(""))	
													{
												String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos1+") and (day"+j+" like '%PP%') and year='"+frmyear+"'";
												ResultSet ji= ad.selectQuery(tr); 
												
												
												try {
													if(ji.next())
													{
														present1=present1+ji.getInt(1);
													}
												} catch (SQLException e1) {
													// TODO Auto-generated catch block
													e1.printStackTrace();
												}
												ji.close();
													}
													}
												
													hr.setStaffpresent(present1);
													for(int j=frmday;j<=today;j++)
													{
													if(!empnos1.equalsIgnoreCase(""))	
													{
												String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 and EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos1+") and (day"+j+" not like '%PP%') and year='"+frmyear+"'";
												ResultSet ji= ad.selectQuery(tr); 
												
												
												try {
													if(ji.next())
													{
														absent1=absent1+ji.getInt(1);
													}
												} catch (SQLException e1) {
													// TODO Auto-generated catch block
													e1.printStackTrace();
												}
												ji.close();
													}
													}
												
													hr.setStaffabsent(absent1);
													
													
													
												
													//tech staff//////////////////////////////////////////////////////////////////////////////////////////
													
													//AVAILABLE
													String ava1="select count(*) as availableStrength,dep.DPTSTXT as dep,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT,sum(emp.dptid) as  salary from emp_official_info as emp,reporting_group as rep,DEPARTMENT as dep,SUBDEPARTMENT as subdep where  rep.grp_id=emp.Reporting_Grp and dep.DPTID=emp.DPTID and emp.SDPTID=subdep.SDPTID  and emp.LOCID='"+help.getLocationId()+"' and subdep.SDPTID in ("+rsabc.getString("SDPTID")+") AND EMP.ACTIVE='"+status1+"' AND Reporting_Grp=2  group by emp.DPTID,dep.DPTSTXT,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT";	
													ResultSet rsava1= ad.selectQuery(ava1); 
													if(rsava1.next())
													{
														hr.setTechstaffavailstrength(rsava1.getInt("availableStrength"));
														hr.setTechstaffsalary(0);
													}
													rsava1.close();
													String query2="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master where Location.LOCATION_CODE=emp_official_info.LOCID and "
															+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'    and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (2)  and ACTIVE = '"+status1+"'";
													ResultSet rs44= ad.selectQuery(query2); 
													try {
														while(rs44.next())
														{
															empnos2=empnos2+","+rs44.getString("pernr");
														}
														if(!empnos2.equalsIgnoreCase(""))
														empnos2=empnos2.substring(1, empnos2.length());
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													rs44.close();
													for(int j=frmday;j<=today;j++)
													{
														if(!empnos2.equalsIgnoreCase(""))	
														{
													
												String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos2+") and (day"+j+" like '%PP%') and year='"+frmyear+"'";
												ResultSet ji= ad.selectQuery(tr); 
												try {
													if(ji.next())
													{
														present2=present2+ji.getInt(1);
													}
												} catch (SQLException e1) {
													// TODO Auto-generated catch block
													e1.printStackTrace();
												}ji.close();
												
													}}
													
                                                  hr.setTechstaffpresent(present2);
                                                  
                                                  for(int j=frmday;j<=today;j++)
													{
														if(!empnos2.equalsIgnoreCase(""))	
														{
													
												String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 and EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos2+") and (day"+j+" not like '%PP%') and year='"+frmyear+"'";
												ResultSet ji= ad.selectQuery(tr); 
												try {
													if(ji.next())
													{
														absent2=absent2+ji.getInt(1);
													}
												} catch (SQLException e1) {
													// TODO Auto-generated catch block
													e1.printStackTrace();
												}
												ji.close();
												
													}}
													
                                              hr.setTechstaffabsent(absent2);
													
												///Apprentice////////////////////////////////////////////////////////////////////////
													
                                                //AVAILABLE
													String ava2="select count(*) as availableStrength,dep.DPTSTXT as dep,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT,sum(emp.dptid) as  salary from emp_official_info as emp,reporting_group as rep,DEPARTMENT as dep,SUBDEPARTMENT as subdep where  rep.grp_id=emp.Reporting_Grp and dep.DPTID=emp.DPTID and emp.SDPTID=subdep.SDPTID  and emp.LOCID='"+help.getLocationId()+"' and subdep.SDPTID in ("+rsabc.getString("SDPTID")+") AND EMP.ACTIVE='"+status1+"' AND Reporting_Grp=3  group by emp.DPTID,dep.DPTSTXT,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT";	
													ResultSet rsava2= ad.selectQuery(ava2); 
													if(rsava2.next())
													{
														hr.setApprenstaffavailstrength(rsava2.getInt("availableStrength"));
														hr.setApprenstaffsalary(0);
													}
													rsava2.close();
														
													String query3="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master where Location.LOCATION_CODE=emp_official_info.LOCID and "
															+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'   and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (3)  and ACTIVE = '"+status1+"'";
													ResultSet rs43= ad.selectQuery(query3); 
													try {
														while(rs43.next())
														{
															empnos3=empnos3+","+rs43.getString("pernr");
														}
														if(!empnos3.equalsIgnoreCase(""))
														empnos3=empnos3.substring(1, empnos3.length());
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													rs43.close();
												
													for(int j=frmday;j<=today;j++)
													{
														if(!empnos3.equalsIgnoreCase(""))	
														{	
												String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos3+") and (day"+j+" like '%PP%') and year='"+frmyear+"'";
												ResultSet ji= ad.selectQuery(tr); 
												try {
													if(ji.next())
													{
														present3=present3+ji.getInt(1);
													}
												} catch (SQLException e1) {
													// TODO Auto-generated catch block
													e1.printStackTrace();
												}
												ji.close();
													}
													}
												
													hr.setApprenstaffpresent(present3);
													for(int j=frmday;j<=today;j++)
													{
														if(!empnos3.equalsIgnoreCase(""))	
														{	
												String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos3+") and (day"+j+" not like '%PP%') and year='"+frmyear+"'";
												ResultSet ji= ad.selectQuery(tr); 
												try {
													if(ji.next())
													{
														absent3=absent3+ji.getInt(1);
													}
												} catch (SQLException e1) {
													// TODO Auto-generated catch block
													e1.printStackTrace();
												}ji.close();
												
													}
													}
												
													hr.setApprenstaffabsent(absent3);	
													
													/////House keeping///////////////////////////////////////////////////////////////////////////////
												
													 //AVAILABLE
													String hava2="select count(*) as availableStrength,dep.DPTSTXT as dep,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT,sum(emp.dptid) as  salary from emp_official_info as emp,reporting_group as rep,DEPARTMENT as dep,SUBDEPARTMENT as subdep where  rep.grp_id=emp.Reporting_Grp and dep.DPTID=emp.DPTID and emp.SDPTID=subdep.SDPTID  and emp.LOCID='"+help.getLocationId()+"' and subdep.SDPTID in ("+rsabc.getString("SDPTID")+") AND EMP.ACTIVE='"+status1+"' AND Reporting_Grp=7  group by emp.DPTID,dep.DPTSTXT,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT";	
													ResultSet hrsava2= ad.selectQuery(hava2); 
													if(hrsava2.next())
													{
														hr.setHouseavailstrength(hrsava2.getInt("availableStrength"));
														
													}
													hrsava2.close();
														
														
													String query4="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master where Location.LOCATION_CODE=emp_official_info.LOCID and "
															+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'    and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (7)  and ACTIVE = '"+status1+"'";
													ResultSet rs5= ad.selectQuery(query4); 
													try {
														while(rs5.next())
														{
															empnos7=empnos7+","+rs5.getString("pernr");
															
														}
														if(!empnos7.equalsIgnoreCase(""))
														empnos7=empnos7.substring(1, empnos7.length());
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
												rs5.close();
													for(int j=frmday;j<=today;j++)
													{
														if(!empnos7.equalsIgnoreCase(""))	
														{
													
												String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos7+") and (day"+j+" like '%PP%') and year='"+frmyear+"'";
												ResultSet ji= ad.selectQuery(tr); 
												try {
													if(ji.next())
													{
														present7=present7+ji.getInt(1);
													}
												} catch (SQLException e1) {
													// TODO Auto-generated catch block
													e1.printStackTrace();
												}
												ji.close();
												
													}}
													
												
													hr.setHousepresent(present7);	
													for(int j=frmday;j<=today;j++)
													{
														if(!empnos7.equalsIgnoreCase(""))	
														{
													
												String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 and  EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos7+") and (day"+j+" not like '%PP%') and year='"+frmyear+"'";
												ResultSet ji= ad.selectQuery(tr); 
												try {
													if(ji.next())
													{
														absent7=absent7+ji.getInt(1);
													}
												} catch (SQLException e1) {
													// TODO Auto-generated catch block
													e1.printStackTrace();
												}
												ji.close();
													}}
													
												
													hr.setHouseabsent(absent7);
													
													
													
													
													//AVAILABLE Contract
													String sava1="select count(*) as availableStrength,dep.DPTSTXT as dep,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT,sum(emp.dptid) as  salary from emp_official_info as emp,reporting_group as rep,DEPARTMENT as dep,SUBDEPARTMENT as subdep where  rep.grp_id=emp.Reporting_Grp and dep.DPTID=emp.DPTID and emp.SDPTID=subdep.SDPTID  and emp.LOCID='"+help.getLocationId()+"' and subdep.SDPTID in ("+rsabc.getString("SDPTID")+") AND EMP.ACTIVE='"+status1+"' AND Reporting_Grp in(4,5,6,8,9) group by emp.DPTID,dep.DPTSTXT,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT";	
													ResultSet srsava1= ad.selectQuery(sava1); 
													if(srsava1.next())
													{
														hr.setContractavailstrength(srsava1.getInt("availableStrength"));
														hr.setTechstaffsalary(0);
													}
													srsava1.close();
													///SKILLED
													if(ACtualrepgrp.contains("4"))
													{
														String query5="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master where Location.LOCATION_CODE=emp_official_info.LOCID and "
																+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'    and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (4)  and ACTIVE = '"+status1+"'";
														ResultSet rs6= ad.selectQuery(query5); 
														try {
															while(rs6.next())
															{
																empnos4=empnos4+","+rs6.getString("pernr");
															}
															if(!empnos4.equalsIgnoreCase(""))
															empnos4=empnos4.substring(1, empnos4.length());
														} catch (SQLException e1) {
															// TODO Auto-generated catch block
															e1.printStackTrace();
														}
														rs6.close();
														for(int j=frmday;j<=today;j++)
														{
															if(!empnos4.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos4+") and (day"+j+" like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
															present4=present4+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
														}}
														
													
														hr.setSkilledpresent(present4);
														for(int j=frmday;j<=today;j++)
														{
															if(!empnos4.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 and  EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos4+") and (day"+j+" not like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
															absent4=absent4+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
														}}
														
														
													
														hr.setSkilledabsent(absent4);
														
														request.setAttribute("skilled", "skilled");
													}
													///SEMISKILLED	
													if(ACtualrepgrp.contains("6"))
													{
														String query6="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master where Location.LOCATION_CODE=emp_official_info.LOCID and "
																+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'    and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (6)  and ACTIVE = '"+status1+"'";
														ResultSet rs7= ad.selectQuery(query6); 
														try {
															while(rs7.next())
															{
																empnos5=empnos5+","+rs7.getString("pernr");
															}
															if(!empnos5.equalsIgnoreCase(""))
															empnos5=empnos5.substring(1, empnos5.length());
														} catch (SQLException e1) {
															// TODO Auto-generated catch block
															e1.printStackTrace();
														}
														rs7.close();
														for(int j=frmday;j<=today;j++)
														{
															if(!empnos5.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos5+") and (day"+j+" like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
															present5=present5+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
														}}
														///
														
													
														hr.setSemiskilledpresent(present5);
														for(int j=frmday;j<=today;j++)
														{
															if(!empnos5.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 and EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos5+") and (day"+j+" not like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
															absent5=absent5+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
														}}
														
													
														hr.setSemiskilledabsent(absent5);	
														request.setAttribute("semiskilled", "semiskilled");
													}
													
													///UNSKILLED	
													if(ACtualrepgrp.contains("5"))
													{
														String query7="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master where Location.LOCATION_CODE=emp_official_info.LOCID and "
																+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'    and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (5)  and ACTIVE = '"+status1+"'";
														ResultSet rs8= ad.selectQuery(query7); 
														try {
															while(rs8.next())
															{
																empnos6=empnos6+","+rs8.getString("pernr");
															}
															if(!empnos6.equalsIgnoreCase(""))
															empnos6=empnos6.substring(1, empnos6.length());
														} catch (SQLException e1) {
															// TODO Auto-generated catch block
															e1.printStackTrace();
														}
														rs8.close();
														for(int j=frmday;j<=today;j++)
														{
															if(!empnos6.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos6+") and (day"+j+" like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
															present6=present6+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
														}}
														
													
														hr.setUnskilledpresent(present6);
														for(int j=frmday;j<=today;j++)
														{
															if(!empnos6.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 and EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos6+") and (day"+j+" not like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
															absent6=absent6+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
														}}
														
													
														hr.setUnskilledabsent(absent6);
														request.setAttribute("unskilled", "unskilled");
														
														
													}
													
													///G4s
	
													if(ACtualrepgrp.contains("8"))
													{

														String query8="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master where Location.LOCATION_CODE=emp_official_info.LOCID and "
																+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'    and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (8)  and ACTIVE = '"+status1+"'";
														ResultSet rs9= ad.selectQuery(query8); 
														try {
															while(rs9.next())
															{
																empnos8=empnos8+","+rs9.getString("pernr");
															}
															if(!empnos8.equalsIgnoreCase(""))
															empnos8=empnos8.substring(1, empnos8.length());
														} catch (SQLException e1) {
															// TODO Auto-generated catch block
															e1.printStackTrace();
														}rs9.close();
													
														for(int j=frmday;j<=today;j++)
														{
															if(!empnos8.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos8+") and (day"+j+" like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
															present8=present8+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
													
														}}
														hr.setSecuritypresent(present8);
														for(int j=frmday;j<=today;j++)
														{
															if(!empnos8.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 and EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos8+") and (day"+j+" not like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
															absent8=absent8+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
													
														}}
														hr.setSecurityabsent(absent8);
														request.setAttribute("g4s", "g4s");
													}
													
													///projects
													
													if(ACtualrepgrp.contains("9"))
													{


														String query9="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master where Location.LOCATION_CODE=emp_official_info.LOCID and "
																+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'  and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (9)  and ACTIVE = '"+status1+"'";
														ResultSet rs10= ad.selectQuery(query9); 
														try {
															while(rs10.next())
															{
																empnos9=empnos9+","+rs10.getString("pernr");
															}
															if(!empnos9.equalsIgnoreCase(""))
															empnos9=empnos9.substring(1, empnos9.length());
														} catch (SQLException e1) {
															// TODO Auto-generated catch block
															e1.printStackTrace();
														}
														rs10.close();
														for(int j=frmday;j<=today;j++)
														{
														
															if(!empnos9.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos9+") and (day"+j+" like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
															present9=present9+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
														}}
														hr.setProjectspresent(present9);
														for(int j=frmday;j<=today;j++)
														{
														
															if(!empnos9.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 and EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos9+") and (day"+j+" not like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
														absent9=absent9+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
														}}
														
														hr.setProjectsabsent(absent9);
														request.setAttribute("project", "project");
													}
														
											   hr.setTotcontractpresent(present4+present5+present6+present8+present9);	
											   hr.setTotcontractabsent(absent4+absent5+absent6+absent8+absent9);
											   
											   hr.setTotpresent(hr.getTotcontractpresent()+present1+present2+present3+present7);
											   hr.setTotabsent(hr.getTotcontractabsent()+absent1+absent2+absent3+absent7);
											   
											   hr.setThreeapprstrength(hr.getStaffapprstrength()+hr.getApprenstaffapprstrength()+hr.getTechstaffapprstrength());
											   hr.setThreepresent(present1+present2+present3);
											   hr.setThreeabsent(absent1+absent2+absent3);
											   
											   hr.setThreesalary(hr.getStaffsalary()+hr.getTechstaffsalary()+hr.getApprenstaffsalary());
											   
												man.add(hr);
												
												
												//grnd
												  grnstaffapprstrength=grnstaffapprstrength+hr.getStaffapprstrength();
												  grnstaffavailstrength=grnstaffavailstrength+hr.getStaffavailstrength();
												  grnstaffpresent=grnstaffpresent+hr.getStaffpresent();
												  grnstaffabsent=grnstaffabsent+hr.getStaffabsent();
												  grnstaffsalary=grnstaffsalary+hr.getStaffsalary();
												
												  grntechstaffapprstrength=grntechstaffapprstrength+hr.getTechstaffapprstrength();
												  grntechstaffavailstrength=grntechstaffavailstrength+hr.getTechstaffavailstrength();
												  grntechstaffpresent=grntechstaffpresent+hr.getTechstaffpresent();
												  grntechstaffabsent=grntechstaffabsent+hr.getTechstaffabsent();
												  grntechstaffsalary=grntechstaffsalary+hr.getTechstaffsalary();
												
												  grnapprenstaffapprstrength=grnapprenstaffapprstrength+hr.getApprenstaffapprstrength();
												  grnapprenstaffavailstrength=grnapprenstaffavailstrength+hr.getApprenstaffavailstrength();
												  grnapprenstaffpresent=grnapprenstaffpresent+hr.getApprenstaffpresent();
												  grnapprenstaffabsent=grnapprenstaffabsent+hr.getApprenstaffabsent();
												  grnapprenstaffsalary=grnapprenstaffsalary+hr.getApprenstaffsalary();
												
												  grncontractapprstrength=grncontractapprstrength+hr.getContractapprstrength();
												  grncontractavailstrength=grncontractavailstrength+hr.getContractavailstrength();

												  grnskilledpresent=grnskilledpresent+hr.getSkilledpresent();
												  grnunskilledpresent=grnunskilledpresent+hr.getUnskilledpresent();
												  grnsemiskilledpresent=grnsemiskilledpresent+hr.getSemiskilledpresent();
												  grnsecuritypresent=grnsecuritypresent+hr.getSecuritypresent();
												  grnprojectspresent=grnprojectspresent+hr.getProjectspresent();
												  
												  grnskilledabsent=grnskilledabsent+hr.getSkilledabsent();
												  grnunskilledabsent=grnunskilledabsent+hr.getUnskilledabsent();
												  grnsemiskilledabsent=grnsemiskilledabsent+hr.getSemiskilledabsent();
												  
												  grnsecurityabsent=grnsecurityabsent+hr.getSecurityabsent();
												  grnprojectsabsent=grnprojectsabsent+hr.getProjectsabsent();
												
												
												  grntotcontractpresent=grntotcontractpresent+hr.getTotcontractpresent();
												  grntotcontractabsent=grntotcontractabsent+hr.getTotcontractabsent();

												  grntotcontractSalary=grntotcontractSalary+hr.getTotcontractSalary();
												
												
												  grnhouseapprstrength=grnhouseapprstrength+hr.getHouseapprstrength();
												  grnhouseavailstrength=grnhouseavailstrength+hr.getHouseavailstrength();
												  grnhousepresent=grnhousepresent+hr.getHousepresent();
												  grnhouseabsent=grnhouseabsent+hr.getHouseabsent();
												  grnhousesalary=grnhousepresent+hr.getHousesalary();
												
												  grntotpresent=grntotpresent+hr.getTotpresent();
												  grntotabsent=grntotabsent+hr.getTotabsent();
												  grntotsalary=grntotsalary+hr.getTotsalary();
												
												  grnthreeapprstrength=grnthreeapprstrength+hr.getThreeapprstrength();	
												  grnthreepresent=grnthreepresent+hr.getThreepresent();
												  grnthreeabsent=grnthreeabsent+hr.getThreeabsent();
												  grnthreesalary=grnthreesalary+hr.getThreesalary();
												  
												  ///sub
												  
												  substaffapprstrength=substaffapprstrength+hr.getStaffapprstrength();
												  substaffavailstrength=substaffavailstrength+hr.getStaffavailstrength();
												  substaffpresent=substaffpresent+hr.getStaffpresent();
												  substaffabsent=substaffabsent+hr.getStaffabsent();
												  substaffsalary=substaffsalary+hr.getStaffsalary();
												  										  
												  
												  subtechstaffapprstrength=subtechstaffapprstrength+hr.getTechstaffapprstrength();
												  subtechstaffavailstrength=subtechstaffavailstrength+hr.getTechstaffavailstrength();
												  subtechstaffpresent=subtechstaffpresent+hr.getTechstaffpresent();
												  subtechstaffabsent=subtechstaffabsent+hr.getTechstaffabsent();
												  subtechstaffsalary=subtechstaffsalary+hr.getTechstaffsalary();
																								
												  subapprenstaffapprstrength=subapprenstaffapprstrength+hr.getApprenstaffapprstrength();
												  subapprenstaffavailstrength=subapprenstaffavailstrength+hr.getApprenstaffavailstrength();
												  subapprenstaffpresent=subapprenstaffpresent+hr.getApprenstaffpresent();
												  subapprenstaffabsent=subapprenstaffabsent+hr.getApprenstaffabsent();
												  subapprenstaffsalary=subapprenstaffsalary+hr.getApprenstaffsalary();
												
												  subcontractapprstrength=subcontractapprstrength+hr.getContractapprstrength();
												  subcontractavailstrength=subcontractavailstrength+hr.getContractavailstrength();

												  subskilledpresent=subskilledpresent+hr.getSkilledpresent();
												  subunskilledpresent=subunskilledpresent+hr.getUnskilledpresent();
												  subsemiskilledpresent=subsemiskilledpresent+hr.getSemiskilledpresent();
												  subsecuritypresent=subsecuritypresent+hr.getSecuritypresent();
												  subprojectspresent=subprojectspresent+hr.getProjectspresent();
												
												  subskilledabsent=subskilledpresent+hr.getSkilledabsent();
												  subunskilledabsent=subunskilledabsent+hr.getUnskilledabsent();
												  subsemiskilledabsent=subsemiskilledabsent+hr.getSemiskilledabsent();
												  subsecurityabsent=subsecurityabsent+hr.getSecurityabsent();
												  subprojectsabsent=subprojectsabsent+hr.getProjectsabsent();
												  
												  subtotcontractpresent=subtotcontractpresent+hr.getTotcontractpresent();
												  subtotcontractabsent=subtotcontractabsent+hr.getTotcontractabsent();
												  subtotcontractSalary=subtotcontractSalary+hr.getTotcontractSalary();
												
												  subhouseapprstrength=subhouseapprstrength+hr.getHouseapprstrength();
												  subhouseavailstrength=subhouseavailstrength+hr.getHouseavailstrength();	
												  subhousepresent=subhousepresent+hr.getHousepresent();
												  subhouseabsent=subhouseabsent+hr.getHouseabsent();
												  subhousesalary=subhousepresent+hr.getHousesalary();
												
												  subtotpresent=subtotpresent+hr.getTotpresent();
												  subtotabsent=subtotabsent+hr.getTotabsent();
												  subtotsalary=subtotsalary+hr.getTotsalary();
												
												  subthreeapprstrength=subthreeapprstrength+hr.getThreeapprstrength();	
												  subthreepresent=subthreepresent+hr.getThreepresent();
												  subthreeabsent=subthreeabsent+hr.getThreeabsent();
												  subthreesalary=subthreesalary+hr.getThreesalary();
												  
												  if(rowno.equalsIgnoreCase(rsabc.getString("RowNum"))) 
												  {
													  HRApprovalForm hr2=new HRApprovalForm();
														
														
														hr2.setDepartment(subdptid);
														hr2.setLocationId("Sub");
														
													    hr2.setStaffapprstrength(substaffapprstrength);
														 hr2.setStaffavailstrength(substaffavailstrength);
														 hr2.setStaffpresent(substaffpresent);
														  hr2.setStaffabsent(substaffabsent);
														 hr2.setStaffsalary(substaffsalary);
														
														 hr2.setTechstaffapprstrength(subtechstaffapprstrength);
														 hr2.setTechstaffavailstrength(subtechstaffavailstrength);
														 hr2.setTechstaffpresent(subtechstaffpresent);
														 hr2.setTechstaffabsent(subtechstaffabsent);
														 hr2.setTechstaffsalary(subtechstaffsalary);
														
														
														 
														  
														 
														 hr2.setApprenstaffapprstrength(subapprenstaffapprstrength);
														 hr2.setApprenstaffavailstrength(subapprenstaffavailstrength);
														 hr2.setApprenstaffpresent(subapprenstaffpresent);
														 hr2.setApprenstaffabsent(subapprenstaffabsent);
														 hr2.setApprenstaffsalary(subapprenstaffsalary);
														
														 hr2.setContractapprstrength(subcontractapprstrength);
														 hr2.setContractavailstrength(subcontractavailstrength);

														 hr2.setSkilledpresent(subskilledpresent);
														 hr2.setUnskilledpresent(subunskilledpresent);
														 hr2.setSemiskilledpresent(subsemiskilledpresent);
														 hr2.setSecuritypresent(subsecuritypresent);
														 hr2.setProjectspresent(subprojectspresent);
														 
														 hr2.setSkilledabsent(subskilledabsent);
														 hr2.setUnskilledabsent(subunskilledabsent);
														 hr2.setSemiskilledabsent(subsemiskilledabsent);
														 hr2.setSecurityabsent(subsecurityabsent);
														 hr2.setProjectsabsent(subprojectsabsent);
														
														
														
														 hr2.setTotcontractpresent(subtotcontractpresent);
														 hr2.setTotcontractabsent(subtotcontractabsent);
														 hr2.setTotcontractSalary(subtotcontractSalary);
														
														
														
														  
														
														 hr2.setHouseapprstrength(subhouseapprstrength);
														 hr2.setHouseavailstrength(subhouseavailstrength);
														 hr2.setHousepresent(subhousepresent);
														 hr2.setHouseabsent(subhouseabsent);
														 hr2.setHousesalary(subhousesalary);
														
														 hr2.setTotpresent(subtotpresent);
														  hr2.setTotabsent(subtotabsent);
														 hr2.setTotsalary(subtotsalary);
														
														
														 hr2.setThreeapprstrength(subthreeapprstrength);	
														 hr2.setThreepresent(subthreepresent);
														 hr2.setThreeabsent(subthreeabsent);
														 hr2.setThreesalary(subthreesalary);
														
														 man.add(hr2);
														
												  }
												
												
											}
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										finally{
							    			query1="";
							    			query2="";
							    			query3="";
							    			query4="";
							    			query5="";
							    			query6="";
							    		}
										//last subtotla
										
										
										
										
										
										//
										
										
                                        help.setGrnstaffapprstrength(grnstaffapprstrength);
										 help.setGrnstaffavailstrength(grnstaffavailstrength);
										 help.setGrnstaffpresent(grnstaffpresent);
										  help.setGrnstaffabsent(grnstaffabsent);
										 help.setGrnstaffsalary(grnstaffsalary);
										
										 help.setGrntechstaffapprstrength(grntechstaffapprstrength);
										 help.setGrntechstaffavailstrength(grntechstaffavailstrength);
										 help.setGrntechstaffpresent(grntechstaffpresent);
										 help.setGrntechstaffabsent(grntechstaffabsent);
										 help.setGrntechstaffsalary(grntechstaffsalary);
										
										
										   
										   
											
										 
										 help.setGrnapprenstaffapprstrength(grnapprenstaffapprstrength);
										 help.setGrnapprenstaffavailstrength(grnapprenstaffavailstrength);
										 help.setGrnapprenstaffpresent(grnapprenstaffpresent);
										 help.setGrnapprenstaffabsent(grnapprenstaffabsent);
										 help.setGrnapprenstaffsalary(grnapprenstaffsalary);
										
										 help.setGrncontractapprstrength(grncontractapprstrength);
										 help.setGrncontractavailstrength(grncontractavailstrength);

										 help.setGrnskilledpresent(grnskilledpresent);
										 help.setGrnunskilledpresent(grnunskilledpresent);
										 help.setGrnsemiskilledpresent(grnsemiskilledpresent);
										 help.setGrnsecuritypresent(grnsecuritypresent);
										 help.setGrnprojectspresent(grnprojectspresent);
										
										 help.setGrnskilledabsent(grnskilledabsent);
										 help.setGrnunskilledabsent(grnunskilledabsent);
										 help.setGrnsemiskilledabsent(grnsemiskilledabsent);
										 help.setGrnsecurityabsent(grnsecurityabsent);
										 help.setGrnprojectsabsent(grnprojectsabsent);
										 
										
										 help.setGrntotcontractpresent(grntotcontractpresent);
										 help.setGrntotcontractabsent(grntotcontractabsent);
										 help.setGrntotcontractSalary(grntotcontractSalary);
										
										
										 help.setGrnhouseapprstrength(grnhouseapprstrength);	
										 help.setGrnhouseavailstrength(grnhouseavailstrength);	
										 help.setGrnhousepresent(grnhousepresent);
										 help.setGrnhouseabsent(grnhouseabsent);
										 help.setGrnhousesalary(grnhousesalary);
										
										 help.setGrntotpresent(grntotpresent);
										 help.setGrntotabsent(grntotabsent);
										 help.setGrntotsalary(grntotsalary);
										
										
										 help.setGrnthreeapprstrength(grnthreeapprstrength);	
										 help.setGrnthreepresent(grnthreepresent);
										 help.setGrnthreeabsent(grnthreeabsent);
										 help.setGrnthreesalary(grnthreesalary);
										
								
										request.setAttribute("man", man);
										
										
										if(man.size()==0)
										{
											request.setAttribute("nolist", "nolist");	
										}
	 
				
				request.setAttribute("result", "result");
				
				try {
					rsf.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				
				
				try {
					rscat.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				try {
					rsabc.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
									    }
									    
									    else
									    	
									    {
									    	
									    	
									    
									    	String st="";
									    	ArrayList depman=new ArrayList();
									    	if(!ACtualpay.equalsIgnoreCase(""))
									    	{
									    	String pay=" select Short_desc from Paygroup_Master where Paygroup="+ACtualpay+" ";
									    	ResultSet bpay=ad.selectQuery(pay);
									    	try {
												if(bpay.next()){
													help.setPaygrp(bpay.getString("Short_desc"));
												}
											} catch (SQLException e1) {
												// TODO Auto-generated catch block
												e1.printStackTrace();
											}
									    	
									    
									    	 st="  select  sum(case when  STAFFCAT=7   then 1 else 0 end )  as factorystaffavailable,  "
		+ " sum(case when day"+frmday+" like '%PP%' and STAFFCAT=7   then 1 else 0 end ) as factorystaffpresent, "
		+ "  sum(case when  STAFFCAT=3   then 1 else 0 end )  as workersavailable,      sum(case when day"+frmday+" like '%PP%' and STAFFCAT=3   then 1 else 0 end ) "
		+ "as workerspresent,	  (sum(case when  STAFFCAT=7   then 1 else 0 end )+sum(case when  STAFFCAT=3   then 1 else 0 end ) ) as"
		+ " totalavlable,(sum(case when day"+frmday+" like '%PP%' and STAFFCAT=7   then 1 else 0 end )+sum(case when day"+frmday+" like '%PP%' and STAFFCAT=3   then 1 else 0 end )) "
		+ "as totalpresent  , emp.dptid,DEPARTMENT.dptstxt    from EMP_IN_OUT_Status  ,emp_official_info as emp,department where "
		+ "EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and  year='"+frmyear+"' and emp.LOCID='"+help.getLocationId()+"'"
				+ " and EMP.ACTIVE=1 AND STAFFCAT in (3,7) and PAY_GROUP='"+ACtualpay+"' and department.dptid=emp.dptid group by emp.dptid,DEPARTMENT.dptstxt "
				+ "union "
				+"  select  sum(case when  STAFFCAT=7   then 1 else 0 end )  as factorystaffavailable,  "
				+ " sum(case when day"+frmday+" like '%PP%' and STAFFCAT=7   then 1 else 0 end ) as factorystaffpresent, "
				+ "  sum(case when  STAFFCAT=3   then 1 else 0 end )  as workersavailable,      sum(case when day"+frmday+" like '%PP%' and STAFFCAT=3   then 1 else 0 end ) "
				+ "as workerspresent,	  (sum(case when  STAFFCAT=7   then 1 else 0 end )+sum(case when  STAFFCAT=3   then 1 else 0 end ) ) as"
				+ " totalavlable,(sum(case when day"+frmday+" like '%PP%' and STAFFCAT=7   then 1 else 0 end )+sum(case when day"+frmday+" like '%PP%' and STAFFCAT=3   then 1 else 0 end )) "
				+ "as totalpresent  , '',''    from EMP_IN_OUT_Status  ,emp_official_info as emp,department where "
				+ "EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and  year='"+frmyear+"' and emp.LOCID='"+help.getLocationId()+"'"
						+ " and EMP.ACTIVE=1 AND STAFFCAT in (3,7) and PAY_GROUP='"+ACtualpay+"' and department.dptid=emp.dptid  ";
									    	}
									    	
									    	else
									    	{
			 st="  select  sum(case when  STAFFCAT=7   then 1 else 0 end )  as factorystaffavailable,  "
						+ " sum(case when day"+frmday+" like '%PP%' and STAFFCAT=7   then 1 else 0 end ) as factorystaffpresent, "
						+ "  sum(case when  STAFFCAT=3   then 1 else 0 end )  as workersavailable,      sum(case when day"+frmday+" like '%PP%' and STAFFCAT=3   then 1 else 0 end ) "
						+ "as workerspresent,	  (sum(case when  STAFFCAT=7   then 1 else 0 end )+sum(case when  STAFFCAT=3   then 1 else 0 end ) ) as"
						+ " totalavlable,(sum(case when day"+frmday+" like '%PP%' and STAFFCAT=7   then 1 else 0 end )+sum(case when day"+frmday+" like '%PP%' and STAFFCAT=3   then 1 else 0 end )) "
						+ "as totalpresent  , emp.dptid,DEPARTMENT.dptstxt    from EMP_IN_OUT_Status  ,emp_official_info as emp,department where "
						+ "EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and  year='"+frmyear+"' and emp.LOCID='"+help.getLocationId()+"'"
								+ " and EMP.ACTIVE=1 AND STAFFCAT in (3,7)  and department.dptid=emp.dptid group by emp.dptid,DEPARTMENT.dptstxt "
								+ "union "
								+"  select  sum(case when  STAFFCAT=7   then 1 else 0 end )  as factorystaffavailable,  "
								+ " sum(case when day"+frmday+" like '%PP%' and STAFFCAT=7   then 1 else 0 end ) as factorystaffpresent, "
								+ "  sum(case when  STAFFCAT=3   then 1 else 0 end )  as workersavailable,      sum(case when day"+frmday+" like '%PP%' and STAFFCAT=3   then 1 else 0 end ) "
								+ "as workerspresent,	  (sum(case when  STAFFCAT=7   then 1 else 0 end )+sum(case when  STAFFCAT=3   then 1 else 0 end ) ) as"
								+ " totalavlable,(sum(case when day"+frmday+" like '%PP%' and STAFFCAT=7   then 1 else 0 end )+sum(case when day"+frmday+" like '%PP%' and STAFFCAT=3   then 1 else 0 end )) "
								+ "as totalpresent  , '',''    from EMP_IN_OUT_Status  ,emp_official_info as emp,department where "
								+ "EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and  year='"+frmyear+"' and emp.LOCID='"+help.getLocationId()+"'"
										+ " and EMP.ACTIVE=1 AND STAFFCAT in (3,7)  and department.dptid=emp.dptid  ";
	}
									    
									    	
									    	ResultSet h=ad.selectQuery(st);
									    	
									    	try {
												while(h.next())
												{
													HRApprovalForm hr=new HRApprovalForm();
													hr.setDepartment(h.getString("dptstxt"));
													hr.setStaffavailstrength(h.getInt("factorystaffavailable"));
													hr.setStaffpresent(h.getInt("factorystaffpresent"));
													hr.setTechstaffavailstrength(h.getInt("workersavailable"));
													hr.setTechstaffpresent(h.getInt("workerspresent"));
													hr.setTotalRecords(h.getInt("totalavlable"));
													hr.setTotpresent(h.getInt("totalpresent"));
													
													depman.add(hr);
												}
											} catch (SQLException e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
									    	
									    	
									    	
									    	if(depman.size()>0)
									    		request.setAttribute("depman", depman);
									    	else
									    		request.setAttribute("nodepman", "nodepman");
									    }
				
				
				
				try {
					cc.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				try {
					rs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					subrs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs115.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				try {
					reprs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return mapping.findForward("displaymanpowerreport");	
	
	
		
	
		
	}
	public ActionForward Daywisemanpowerreportexe(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {


		try {
			Thread.sleep(2000);
		} catch (InterruptedException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}
		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
		
		Calendar mycal = Calendar.getInstance();
		help.setFrommonth(Integer.toString(mycal.get(Calendar.MONTH) + 1));
		
help.setEmployeeName(user.getFullName());
		
		String lplant=request.getParameter("loc");
		
		ResultSet plrs115 = ad.selectQuery("select * from Location where LOCATION_CODE='"+lplant+"' "); 
				try {
					if(plrs115.next()) {
						help.setLock_id(plrs115.getString("LOCNAME"));
					}
					plrs115.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		
		
		
		
		
		
		/*ArrayList shiftList=new ArrayList();
		ArrayList shiftLabelList=new ArrayList();
		ResultSet rs115 = ad.selectQuery("select shift_code," +
				"Shift_Name from EMP_SHIFT_MASTER order by Shift_Name"); 
				try {
					while(rs115.next()) {
						shiftList.add(rs115.getString("shift_code"));
						shiftLabelList.add(rs115.getString("Shift_Name"));
					}
					rs115.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setShiftList(shiftList);
				help.setShiftLabelList(shiftLabelList);
		*/
		
				String cmpcode="";
				int id=user.getGroupId();
				String cmp[]=new String[0]; 
				String locations="";
				
				String aa="select * from user_group where id='"+id+"'";
				ResultSet cc=ad.selectQuery(aa);
				try {
					if(cc.next())
					{
						cmpcode=cc.getString("Attendance_Loc");
						
						if(cmpcode.contains(","))
						{
						 cmp=cmpcode.split(",");
						
						for(int b=0;b<cmp.length;b++)
						{
							locations=locations+"'"+cmp[b]+"',";
						}
						
						locations=locations.substring(0, locations.length()-1);
						}
						else
						{
							locations="'"+cmpcode+"'";
						}
					}
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
		   ArrayList locationList=new ArrayList();
					ArrayList locationLabelList=new ArrayList();
					ResultSet rs11 = ad.selectQuery("select LOCID," +
							"LOCNAME,location_code from location where location_code in ("+locations+")"); 
							try {
								while(rs11.next()) {
									locationList.add(rs11.getString("location_code"));
									locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
									
								}
								rs11.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							help.setLocationIdList(locationList);
							help.setLocationLabelList(locationLabelList);
							
							
							String location=(request.getParameter("loc"));
							ArrayList shiftList=new ArrayList();
							ArrayList shiftLabelList=new ArrayList();
							
							ResultSet srs115 = ad.selectQuery("select shift_code," +
									"Shift_Name from EMP_SHIFT_MASTER where Loc like('%"+location+"%') order by Shift_Name"); 
							try {
										while(srs115.next()) {
											shiftList.add(srs115.getString("shift_code"));
											shiftLabelList.add(srs115.getString("Shift_Name"));
										}
										srs115.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
									
									help.setShiftList(shiftList);
									help.setShiftLabelList(shiftLabelList);
							
	
		
					
	
				ArrayList deptList=new ArrayList();
				ArrayList deptLabelList=new ArrayList();
				ResultSet rs15 = ad.selectQuery("select dptid," +
						"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
						try {
							while(rs15.next()) {
								deptList.add(rs15.getString("dptid"));
								deptLabelList.add(rs15.getString("DPTLTXT"));
							}
							rs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						help.setDeptList(deptList);
						help.setDeptLabelList(deptLabelList);
						
						//subdep
						ArrayList subdeptList=new ArrayList();
						ArrayList subdeptLabelList=new ArrayList();
						ResultSet subrs15 = ad.selectQuery("select SDPTID," +
								"SDPTID_LTXT from SUBDEPARTMENT order by SDPTID_LTXT "); 
								try {
									while(subrs15.next()) {
										subdeptList.add(subrs15.getString("SDPTID"));
										subdeptLabelList.add(subrs15.getString("SDPTID_LTXT"));
									}
									subrs15.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								
								help.setSubdeptList(subdeptList);
								help.setSubdeptLabelList(subdeptLabelList);
								
								//repgrp
								ArrayList repgrptList=new ArrayList();
								ArrayList repgrpLabelList=new ArrayList();
								ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
										"Grp_LTXT from REPORTING_GROUP where  Grp_ID not in(1,2,3,7)   order by Grp_LTXT "); 
										try {
											while(reprs15.next()) {
												repgrptList.add(reprs15.getString("Grp_ID"));
												repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
											}
											reprs15.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										
										help.setRepgrpList(repgrptList);
										help.setRepgrpLabelList(repgrpLabelList);
										
										ArrayList payGroupList=new ArrayList();
										ArrayList payGroupLabelList=new ArrayList();
										ResultSet rs12 = ad.selectQuery("select Paygroup," +
										"Long_Desc from Paygroup_Master where Plant in("+locations+")"); 
										try {
											while(rs12.next()) {
												payGroupList.add(rs12.getString("Paygroup"));
												payGroupLabelList.add(rs12.getString("Long_Desc"));
											}
											rs12.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										
										help.setPayGroupList(payGroupList);
										help.setPayGroupLabelList(payGroupLabelList);
										
										
								
								/*		//dept
										String ACtualdept="";
									    if(help.getDeptArray()!=null)
									    {	
									    String[] dept = help.getDeptArray();
									    
									    StringBuffer reqdept = new StringBuffer();
										for (int i = 0; i < dept.length; i++) {
											reqdept.append("'"+dept[i]+"'" + ",");
										}
										 ACtualdept= reqdept.substring(0, reqdept.length() - 1).toString();
									    }
										
									    
									    //subdept
									    
									    String ACtualsubdept="";
									    if(help.getSubdeptArray()!=null)
									    {	
									    String[] subdept = help.getSubdeptArray();
									    
									    StringBuffer reqsubdept = new StringBuffer();
										for (int i = 0; i < subdept.length; i++) {
											reqsubdept.append("'"+subdept[i]+"'" + ",");
										}
										ACtualsubdept= reqsubdept.substring(0, reqsubdept.length() - 1).toString();
									    }
									    
                                        //reporting
									    
									    String ACtualrepgrp="";
									    if(help.getRepgrpArray()!=null)
									    {	
									    String[] repgrp = help.getRepgrpArray();
									    
									    StringBuffer reqrepgrp = new StringBuffer();
										for (int i = 0; i < repgrp.length; i++) {
											reqrepgrp.append("'"+repgrp[i]+"'" + ",");
										}
										ACtualrepgrp= reqrepgrp.substring(0, reqrepgrp.length() - 1).toString();
									    }*/
									    
										String payplant=request.getParameter("loc");
										String paygrp="";
										String paygrp12="select * from Paygroup_Master where Plant='"+payplant+"'";
										ResultSet prs12=  ad.selectQuery(paygrp12);
												try {
													while(prs12.next()) {
														paygrp=prs12.getString("paygroup");
													}
													rs12.close();
												} catch (SQLException e) {
													// TODO Auto-generated catch block
													e.printStackTrace();
												}
										
										
										 int staffapprstrength=0;
										 int staffavailstrength=0;
										 int staffpresent=0;
										 int staffabsent=0;
										 float staffsalary=0;
										
										 int techstaffapprstrength=0;
										 int techstaffavailstrength=0;
										 int techstaffpresent=0;
										 int techstaffabsent=0;
										 float techstaffsalary=0;
										
										
										 int apprenstaffapprstrength=0;
										 int apprenstaffavailstrength=0;
										 int apprenstaffpresent=0;
										 int apprenstaffabsent=0;
										 float apprenstaffsalary=0;
										
										 int contractapprstrength=0;
										 int contractavailstrength=0;
										 
										 int skilledpresent=0;
										 int skilledabsent=0;
										 int unskilledpresent=0;
										 int unskilledabsent=0;
										 int semiskilledpresent=0;
										 int semiskilledabsent=0;
										 int securitypresent=0;
										 int securityabsent=0;
										 int projectspresent=0;
										 int projectsabsent=0;
										
										
										 int totcontractpresent=0;
										 int totcontractabsent=0;
										 int totcontractSalary=0;
										
										 
										
										 
										 int houseapprstrength=0;	
										 int houseavailstrength=0;
										 int housepresent=0;
										 int houseabsent=0;
										 float housesalary=0;
										
										 int totpresent=0;
										 int totabsent=0;
										 float totsalary=0;
										
										
										 int threeapprstrength=0;	
										 int threepresent=0;
										 int threeabsent=0;
										 float threesalary=0;
										
										///grand
										
										 int grnstaffapprstrength=0;
										 int grnstaffavailstrength=0;
										 int grnstaffpresent=0;
										 int grnstaffabsent=0;
										 float grnstaffsalary=0;
										
										 int grntechstaffapprstrength=0;
										 int grntechstaffavailstrength=0;
										 int grntechstaffpresent=0;
										 int grntechstaffabsent=0;
										 float grntechstaffsalary=0;
										
										
										 int grnapprenstaffapprstrength=0;
										 int grnapprenstaffavailstrength=0;
										 int grnapprenstaffpresent=0;
										 int grnapprenstaffabsent=0;
										 float grnapprenstaffsalary=0;
										
										 int grncontractapprstrength=0;
										 int grncontractavailstrength=0;

										 int grnskilledpresent=0;
										 int grnunskilledpresent=0;
										 int grnsemiskilledpresent=0;
										 int grnsecuritypresent=0;
										 int grnprojectspresent=0;
										 
										 int grnskilledabsent=0;
										 int grnunskilledabsent=0;
										 int grnsemiskilledabsent=0;
										 int grnsecurityabsent=0;
										 int grnprojectsabsent=0;
										
										
										 int grntotcontractpresent=0;
										 int grntotcontractabsent=0;
										 int grntotcontractSalary=0;
										
										 
										 
										
										 int grnhouseapprstrength=0;	
										 int grnhouseavailstrength=0;
										 int grnhousepresent=0;
										 int grnhouseabsent=0;
										 float grnhousesalary=0;
										
										 int grntotpresent=0;
										 int grntotabsent=0;
										 float grntotsalary=0;
										
										
										 int grnthreeapprstrength=0;	
										 int grnthreepresent=0;
										 int grnthreeabsent=0;
										 float grnthreesalary=0;
										 
										 
										 //subtotal
										 
											
										 int substaffapprstrength=0;
										 int substaffavailstrength=0;
										 int substaffpresent=0;
										 int substaffabsent=0;
										 
										 float substaffsalary=0;
										
										 int subtechstaffapprstrength=0;
										 int subtechstaffavailstrength=0;
										 int subtechstaffpresent=0;
										 int subtechstaffabsent=0;
										 float subtechstaffsalary=0;
										
										
										 int subapprenstaffapprstrength=0;
										 int subapprenstaffavailstrength=0;
										 int subapprenstaffpresent=0;
										 int subapprenstaffabsent=0;
										 float subapprenstaffsalary=0;
										
										 int subcontractapprstrength=0;
										 int subcontractavailstrength=0;


										 int subskilledpresent=0;
										 int subskilledabsent=0;
										 
										 int subunskilledpresent=0;
										 int subunskilledabsent=0;
										 
										 int subsemiskilledpresent=0;
										 int subsemiskilledabsent=0;
										
										 int subsecuritypresent=0;
										 int subsecurityabsent=0;
										 
										 int subprojectspresent=0;
										 int subprojectsabsent=0;
										
										 int subtotcontractpresent=0;
										 int subtotcontractabsent=0;
										 int subtotcontractSalary=0;
										
										
										 int subhouseapprstrength=0;
										 int subhouseavailstrength=0;
										 int subhousepresent=0;
										 int subhouseabsent=0;
										 float subhousesalary=0;
										
										 int subtotpresent=0;
										 int subtotabsent=0;
										 float subtotsalary=0;
										
										
										 int subthreeapprstrength=0;	
										 int subthreepresent=0;
										 int subthreeabsent=0;
										 float subthreesalary=0;
										
								
									    LinkedList man=new LinkedList();
									    
									    int frmday=0;
									    int today=0;
									    int frmmon=0;
									    int tomon=0;
									    int frmyear=0;
									    int toyear=0;
									    
									    help.setFromDate(request.getParameter("from"));
									    help.setToDate(request.getParameter("from"));
									    
									    String fromdate=help.getFromDate();
									    String todate=help.getToDate();
									    
									    String from[]=fromdate.split("/");
									    frmday=Integer.parseInt(from[0]);
									    frmmon=Integer.parseInt(from[1]);
									    frmyear=Integer.parseInt(from[2]);
									    
									    String to[]=todate.split("/");
									    today=Integer.parseInt(to[0]);
									    tomon=Integer.parseInt(to[1]);
									    toyear=Integer.parseInt(to[2]);
									    
									    String subdptid="";
									    int chk=0;
									    
									    //
									    String ACtualrepgrp=this.query2;
									    String ACtualsubdept=this.query1;
									    //String ACtualpay=request.getParameter("paygrp");
									    String ACtualpay=paygrp;
									    help.setLocationId(request.getParameter("loc"));
									    String ACtualshift =request.getParameter("shift");
									   try{ 
									    String shif="select * from EMP_SHIFT_MASTER where Shift_code='"+ACtualshift+"'";
									    ResultSet rshif= ad.selectQuery(shif); 
									    if(rshif.next())
										{
											help.setShift(rshif.getString("Shift_Name"));
											
										}
										rshif.close();
									} catch (SQLException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
								}		
									 /*   help.setShift(request.getParameter("shift"));*/
									    
									    if(!ACtualsubdept.equalsIgnoreCase(""))
									    {
									    
									    String catdesc=" select * from REPORTING_GROUP where Grp_ID in ("+ACtualrepgrp+") order by Grp_ID";
									   
										 ResultSet rscat=ad.selectQuery(catdesc);
										 LinkedList categorylist=new LinkedList();
										 String reqrcateg="";
										 try {
											while (rscat.next()) 
											  {
												 HRApprovalForm m1=new HRApprovalForm(); 
												 m1.setRepgrp(rscat.getString("Grp_STXT"));
												 categorylist.add(m1);
											  }
										} catch (SQLException e3) {
											// TODO Auto-generated catch block
											e3.printStackTrace();
										}
										request.setAttribute("categorylist", categorylist);
									    
										
								
									    
									    String abc1="select * From (SELECT ROW_NUMBER() OVER(ORDER BY  APPROVED_STRENGTH.Area) AS RowNum,*,id as SDPTID from APPROVED_STRENGTH where plant='"+help.getLocationId()+"' and id in ("+ACtualsubdept+"))as sub order by id";
									    
										/*String abc="select dep.DPTSTXT as dep,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT"
												+ " from emp_official_info as emp,reporting_group as rep,DEPARTMENT as dep,SUBDEPARTMENT as subdep where rep.grp_id=emp.Reporting_Grp and dep.DPTID=emp.DPTID"
												+ " and emp.SDPTID=subdep.SDPTID and emp.DPTID in ("+ACtualdept+") and emp.LOCID='"+help.getLocationId()+"' and subdep.SDPTID in ("+ACtualsubdept+") "
														+ "and ACTIVE = 1 group by emp.DPTID,dep.DPTSTXT,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT order by SDPTID";*/
										
									    ResultSet rsf=ad.selectQuery(abc1);
										//get last row no
										  String rowno="";
										  try {
											rsf.afterLast();
									
										if(rsf.previous())
										{
											rowno=rsf.getString("RowNum");
											   
										}
											} catch (SQLException e2) {
												// TODO Auto-generated catch block
												e2.printStackTrace();
											}
									    
										ResultSet rsabc= ad.selectQuery(abc1); 
										
								
										try {
											while(rsabc.next())
											{
												
												HRApprovalForm hr=new HRApprovalForm();
												
												if(!rsabc.getString("AREA").equalsIgnoreCase(subdptid) && chk==1)
												{
													HRApprovalForm hr1=new HRApprovalForm();
													
										
													hr1.setDepartment(subdptid);
													hr1.setLocationId("Sub");
												    hr1.setStaffapprstrength(substaffapprstrength);
													 hr1.setStaffavailstrength(substaffavailstrength);
													 hr1.setStaffpresent(substaffpresent);
													 hr1.setStaffabsent(substaffabsent);
													 hr1.setStaffsalary(substaffsalary);
													
													 hr1.setTechstaffapprstrength(subtechstaffapprstrength);
													 hr1.setTechstaffavailstrength(subtechstaffavailstrength);
													 hr1.setTechstaffpresent(subtechstaffpresent);
													 hr1.setTechstaffabsent(subtechstaffabsent);
													 hr1.setTechstaffsalary(subtechstaffsalary);
													
													
													 hr1.setApprenstaffapprstrength(subapprenstaffapprstrength);
													 hr1.setApprenstaffavailstrength(subapprenstaffavailstrength);
													 hr1.setApprenstaffpresent(subapprenstaffpresent);
													 hr1.setApprenstaffabsent(subapprenstaffabsent);
													 hr1.setApprenstaffsalary(subapprenstaffsalary);
													
													 hr1.setContractapprstrength(subcontractapprstrength);

													 hr1.setSkilledpresent(subskilledpresent);
													 hr1.setUnskilledpresent(subunskilledpresent);
													 hr1.setSemiskilledpresent(subsemiskilledpresent);
													 hr1.setSecuritypresent(subsecuritypresent);
													 hr1.setProjectspresent(subprojectspresent);
													
													 hr1.setSkilledabsent(subskilledabsent);
													 hr1.setUnskilledabsent(subunskilledabsent);
													 hr1.setSemiskilledabsent(subsemiskilledabsent);
													 hr1.setSecurityabsent(subsecurityabsent);
													 hr1.setProjectsabsent(subprojectsabsent);
													
													 hr1.setTotcontractpresent(subtotcontractpresent);
													 hr1.setTotcontractabsent(subtotcontractabsent);
													 hr1.setTotcontractSalary(subtotcontractSalary);
													
													
													 hr1.setHouseapprstrength(subhouseapprstrength);
													 hr1.setHouseavailstrength(subhouseavailstrength);	
													 hr1.setHousepresent(subhousepresent);
													 hr1.setHouseabsent(subhouseabsent);
													 hr1.setHousesalary(subhousesalary);
													
													 hr1.setTotpresent(subtotpresent);
													 hr1.setTotabsent(subtotabsent);
													 hr1.setTotsalary(subtotsalary);
																										
													 hr1.setThreeapprstrength(subthreeapprstrength);	
													 hr1.setThreepresent(subthreepresent);
													 hr1.setThreeabsent(subthreeabsent);
													 hr1.setThreesalary(subthreesalary);
													
													 man.add(hr1);
													 
													 
													  substaffapprstrength=0;
													  substaffavailstrength=0;
													  substaffpresent=0;
													  substaffabsent=0;
													  substaffsalary=0;
													
													  subtechstaffapprstrength=0;
													  subtechstaffavailstrength=0;
													  subtechstaffpresent=0;
													  subtechstaffabsent=0;
													  subtechstaffsalary=0;
													
													
													  subapprenstaffapprstrength=0;
													  subapprenstaffavailstrength=0;
													  subapprenstaffpresent=0;
													  subapprenstaffabsent=0;
													  subapprenstaffsalary=0;
													
													  subcontractapprstrength=0;
													  subcontractavailstrength=0;

													  subskilledpresent=0;
													  subunskilledpresent=0;
													  subsemiskilledpresent=0;
													  subsecuritypresent=0;
													  subprojectspresent=0;
													  
													  subskilledabsent=0;
													  subunskilledabsent=0;
													  subsemiskilledabsent=0;
													  subsecurityabsent=0;
													  subprojectsabsent=0;
													
													
													  subtotcontractpresent=0;
													  subtotcontractabsent=0;
													  subtotcontractSalary=0;
													
													
													  subhouseapprstrength=0;
													  subhouseavailstrength=0;
													  subhousepresent=0;
													  subhouseabsent=0;
													  subhousesalary=0;
													
													  subtotpresent=0;
													  subtotabsent=0;
													  subtotsalary=0;
													
													
													  subthreeapprstrength=0;	
													  subthreepresent=0;
													  subthreeabsent=0;
													  subthreesalary=0;
													
												}
												
												 int present1=0;
												 int present2=0;
												 int present3=0;
												 int present4=0;
												 int present5=0;
												 int present6=0;
												 int present7=0;
												 int present8=0;
												 int present9=0;
												 int absent1=0;
												 int absent2=0;
												 int absent3=0;
												 int absent4=0;
												 int absent5=0;
												 int absent6=0;
												 int absent7=0;
												 int absent8=0;
												 int absent9=0;
												 String empnos1="";
												 String empnos2="";
												 String empnos3="";
												 String empnos4="";
												 String empnos5="";
												 String empnos6="";
												 String empnos7="";
												 String empnos8="";
												 String empnos9="";
												 
												 
												 subdptid=rsabc.getString("AREA");
												 chk=1;
												 
													hr.setLocationId(help.getLocationId());
													hr.setDepartment(rsabc.getString("Description"));
													hr.setShift(help.getShift());
													
															hr.setStaffapprstrength(rsabc.getInt("Staff"));
															hr.setTechstaffapprstrength(rsabc.getInt("Tech_Staff"));
															hr.setApprenstaffapprstrength(rsabc.getInt("Apprentice"));
															hr.setContractapprstrength(rsabc.getInt("Cont1"));
															hr.setHouseapprstrength(rsabc.getInt("cont2_house"));
														
														
														
														
												 
												 ///Staff/////////////////////////////////////////////////////////////////////////////
													//AVAILABLE
													String ava="select count(*) as availableStrength,dep.DPTSTXT as dep,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT,sum(emp.dptid) as  salary from emp_official_info as emp,reporting_group as rep,DEPARTMENT as dep,SUBDEPARTMENT as subdep,EMP_Shift_Register as sh where sh.pernr=emp.PERNR and rep.grp_id=emp.Reporting_Grp  and dep.DPTID=emp.DPTID and emp.SDPTID=subdep.SDPTID and emp.LOCID='"+help.getLocationId()+"' and subdep.SDPTID in ("+rsabc.getString("SDPTID")+")   and sh.Month='"+frmmon+"' and (sh.DAY"+frmday+"='"+ACtualshift+"') and sh.year='"+frmyear+"'  AND EMP.ACTIVE=1 AND Reporting_Grp=1  group by emp.DPTID,dep.DPTSTXT,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT";	
													ResultSet rsava= ad.selectQuery(ava); 
													if(rsava.next())
													{
														hr.setStaffavailstrength(rsava.getInt("availableStrength"));
														hr.setStaffsalary(0);
													}
														
													rsava.close();
													String query1="select emp_official_info.pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master ,EMP_Shift_Register as sh where sh.pernr=emp_official_info.PERNR and sh.Month='"+frmmon+"' and (sh.DAY"+frmday+"='"+ACtualshift+"') and sh.year='"+frmyear+"'and Location.LOCATION_CODE=emp_official_info.LOCID and "
															+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'    and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (1)  and ACTIVE = 1";
													ResultSet rs4= ad.selectQuery(query1); 
													try {
														while(rs4.next())
														{
															empnos1=empnos1+","+rs4.getString("pernr");
														}
														if(!empnos1.equalsIgnoreCase(""))
														empnos1=empnos1.substring(1, empnos1.length());
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													rs4.close();
													for(int j=frmday;j<=today;j++)
													{
													if(!empnos1.equalsIgnoreCase(""))	
													{
												String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos1+") and (day"+j+" like '%PP%') and year='"+frmyear+"'";
												ResultSet ji= ad.selectQuery(tr); 
												
												
												try {
													if(ji.next())
													{
														present1=present1+ji.getInt(1);
													}
												} catch (SQLException e1) {
													// TODO Auto-generated catch block
													e1.printStackTrace();
												}
												ji.close();
													}
													}
													
													hr.setStaffpresent(present1);
													
													///absent
													for(int j=frmday;j<=today;j++)
													{
													if(!empnos1.equalsIgnoreCase(""))	
													{
												String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos1+") and (day"+j+" not like '%PP%') and year='"+frmyear+"'";
												ResultSet ji= ad.selectQuery(tr); 
												
												
												try {
													if(ji.next())
													{
														absent1=absent1+ji.getInt(1);
													}
												} catch (SQLException e1) {
													// TODO Auto-generated catch block
													e1.printStackTrace();
												}
												ji.close();
													}
													}
												
													hr.setStaffabsent(absent1);
													
													
													
												
													//tech staff//////////////////////////////////////////////////////////////////////////////////////////
													
													//AVAILABLE
													String ava1="select count(*) as availableStrength,dep.DPTSTXT as dep,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT,sum(emp.dptid) as  salary from emp_official_info as emp,reporting_group as rep,DEPARTMENT as dep,SUBDEPARTMENT as subdep,EMP_Shift_Register as sh where sh.pernr=emp.PERNR and sh.Month='"+frmmon+"' and (sh.DAY"+frmday+"='"+ACtualshift+"') and sh.year='"+frmyear+"' AND  rep.grp_id=emp.Reporting_Grp and dep.DPTID=emp.DPTID and emp.SDPTID=subdep.SDPTID  and emp.LOCID='"+help.getLocationId()+"' and subdep.SDPTID in ("+rsabc.getString("SDPTID")+") AND EMP.ACTIVE=1 AND Reporting_Grp=2  group by emp.DPTID,dep.DPTSTXT,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT";	
													ResultSet rsava1= ad.selectQuery(ava1); 
													if(rsava1.next())
													{
														hr.setTechstaffavailstrength(rsava1.getInt("availableStrength"));
														hr.setTechstaffsalary(0);
													}
													rsava1.close();
													String query2="select emp_official_info.pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master, EMP_Shift_Register as sh where sh.pernr=emp_official_info.PERNR and sh.Month='"+frmmon+"' and (sh.DAY"+frmday+"='"+ACtualshift+"') and sh.year='"+frmyear+"' AND Location.LOCATION_CODE=emp_official_info.LOCID and "
															+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'    and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (2)  and ACTIVE = 1";
													ResultSet rs44= ad.selectQuery(query2); 
													try {
														while(rs44.next())
														{
															empnos2=empnos2+","+rs44.getString("pernr");
														}
														if(!empnos2.equalsIgnoreCase(""))
														empnos2=empnos2.substring(1, empnos2.length());
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													rs44.close();
													
													
													for(int j=frmday;j<=today;j++)
													{
														if(!empnos2.equalsIgnoreCase(""))	
														{
													
												String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos2+") and (day"+j+" like '%PP%') and year='"+frmyear+"'";
												ResultSet ji= ad.selectQuery(tr); 
												try {
													if(ji.next())
													{
														present2=present2+ji.getInt(1);
													}
												} catch (SQLException e1) {
													// TODO Auto-generated catch block
													e1.printStackTrace();
												}ji.close();
												
													}}
													
                                                  hr.setTechstaffpresent(present2);
                                                  
                                                  ///absent

													for(int j=frmday;j<=today;j++)
													{
														if(!empnos2.equalsIgnoreCase(""))	
														{
													
												String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos2+") and (day"+j+" not like '%PP%') and year='"+frmyear+"'";
												ResultSet ji= ad.selectQuery(tr); 
												try {
													if(ji.next())
													{
														absent2=absent2+ji.getInt(1);
													}
												} catch (SQLException e1) {
													// TODO Auto-generated catch block
													e1.printStackTrace();
												}ji.close();
												
													}}
													
                                                hr.setTechstaffabsent(absent2);
                                                  
													
												///Apprentice////////////////////////////////////////////////////////////////////////
													
                                                //AVAILABLE
													String ava2="select count(*) as availableStrength,dep.DPTSTXT as dep,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT,sum(emp.dptid) as  salary from emp_official_info as emp,reporting_group as rep,DEPARTMENT as dep,SUBDEPARTMENT as subdep,EMP_Shift_Register as sh where sh.pernr=emp.PERNR and sh.Month='"+frmmon+"' and (sh.DAY"+frmday+"='"+ACtualshift+"') and sh.year='"+frmyear+"' AND  rep.grp_id=emp.Reporting_Grp and dep.DPTID=emp.DPTID and emp.SDPTID=subdep.SDPTID  and emp.LOCID='"+help.getLocationId()+"' and subdep.SDPTID in ("+rsabc.getString("SDPTID")+") AND EMP.ACTIVE=1 AND Reporting_Grp=3  group by emp.DPTID,dep.DPTSTXT,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT";	
													ResultSet rsava2= ad.selectQuery(ava2); 
													if(rsava2.next())
													{
														hr.setApprenstaffavailstrength(rsava2.getInt("availableStrength"));
														hr.setApprenstaffsalary(0);
													}
													rsava2.close();
														
													String query3="select emp_official_info.pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master,EMP_Shift_Register as sh where sh.pernr=emp_official_info.PERNR and sh.Month='"+frmmon+"' and (sh.DAY"+frmday+"='"+ACtualshift+"') and sh.year='"+frmyear+"' AND Location.LOCATION_CODE=emp_official_info.LOCID and "
															+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'   and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (3)  and ACTIVE = 1";
													ResultSet rs43= ad.selectQuery(query3); 
													try {
														while(rs43.next())
														{
															empnos3=empnos3+","+rs43.getString("pernr");
														}
														if(!empnos3.equalsIgnoreCase(""))
														empnos3=empnos3.substring(1, empnos3.length());
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													rs43.close();
													
												
													for(int j=frmday;j<=today;j++)
													{
														if(!empnos3.equalsIgnoreCase(""))	
														{	
												String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos3+") and (day"+j+" like '%PP%') and year='"+frmyear+"'";
												ResultSet ji= ad.selectQuery(tr); 
												try {
													if(ji.next())
													{
														present3=present3+ji.getInt(1);
													}
												} catch (SQLException e1) {
													// TODO Auto-generated catch block
													e1.printStackTrace();
												}
												ji.close();
													}
													}
												
													hr.setApprenstaffpresent(present3);
													//absent
													for(int j=frmday;j<=today;j++)
													{
														if(!empnos3.equalsIgnoreCase(""))	
														{	
												String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos3+") and (day"+j+" not like '%PP%') and year='"+frmyear+"'";
												ResultSet ji= ad.selectQuery(tr); 
												try {
													if(ji.next())
													{
													absent3=absent3+ji.getInt(1);
													}
												} catch (SQLException e1) {
													// TODO Auto-generated catch block
													e1.printStackTrace();
												}
												ji.close();
													}
													}
												
													hr.setApprenstaffabsent(absent3);			  
												  
													
													/////House keeping///////////////////////////////////////////////////////////////////////////////
												
													String hava2="select count(*) as availableStrength,dep.DPTSTXT as dep,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT,sum(emp.dptid) as  salary from emp_official_info as emp,reporting_group as rep,DEPARTMENT as dep,SUBDEPARTMENT as subdep where  rep.grp_id=emp.Reporting_Grp and dep.DPTID=emp.DPTID and emp.SDPTID=subdep.SDPTID  and emp.LOCID='"+help.getLocationId()+"' and subdep.SDPTID in ("+rsabc.getString("SDPTID")+") AND EMP.ACTIVE=1 AND Reporting_Grp=7  group by emp.DPTID,dep.DPTSTXT,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT";	
													ResultSet hrsava2= ad.selectQuery(hava2); 
													if(hrsava2.next())
													{
														hr.setHouseavailstrength(hrsava2.getInt("availableStrength"));
														
													}
													hrsava2.close();
														
													
													
														
													String query4="select emp_official_info.pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master,EMP_Shift_Register as sh where sh.pernr=emp_official_info.PERNR and sh.Month='"+frmmon+"' and (sh.DAY"+frmday+"='"+ACtualshift+"') and sh.year='"+frmyear+"' AND Location.LOCATION_CODE=emp_official_info.LOCID and "
															+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'    and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (7)  and ACTIVE = 1";
													ResultSet rs5= ad.selectQuery(query4); 
													try {
														while(rs5.next())
														{
															empnos7=empnos7+","+rs5.getString("pernr");
														}
														if(!empnos7.equalsIgnoreCase(""))
														empnos7=empnos7.substring(1, empnos7.length());
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
												rs5.close();
													for(int j=frmday;j<=today;j++)
													{
														if(!empnos7.equalsIgnoreCase(""))	
														{
													
												String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos7+") and (day"+j+" like '%PP%') and year='"+frmyear+"'";
												ResultSet ji= ad.selectQuery(tr); 
												try {
													if(ji.next())
													{
														present7=present7+ji.getInt(1);
													}
												} catch (SQLException e1) {
													// TODO Auto-generated catch block
													e1.printStackTrace();
												}
												ji.close();
												
													}}
													
												
													hr.setHousepresent(present7);	
												
													for(int j=frmday;j<=today;j++)
													{
														if(!empnos7.equalsIgnoreCase(""))	
														{
													
												String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos7+") and (day"+j+" not like '%PP%') and year='"+frmyear+"'";
												ResultSet ji= ad.selectQuery(tr); 
												try {
													if(ji.next())
													{
														absent7=absent7+ji.getInt(1);
													}
												} catch (SQLException e1) {
													// TODO Auto-generated catch block
													e1.printStackTrace();
												}
												ji.close();
												
													}}
													
												
													hr.setHouseabsent(absent7);	
													
													
													//Contract Avil 
													String sava1="select count(*) as availableStrength,dep.DPTSTXT as dep,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT,sum(emp.dptid) as  salary from emp_official_info as emp,reporting_group as rep,DEPARTMENT as dep,SUBDEPARTMENT as subdep where  rep.grp_id=emp.Reporting_Grp and dep.DPTID=emp.DPTID and emp.SDPTID=subdep.SDPTID  and emp.LOCID='"+help.getLocationId()+"' and subdep.SDPTID in ("+rsabc.getString("SDPTID")+") AND EMP.ACTIVE=1 AND Reporting_Grp in(4,5,6,8,9) group by emp.DPTID,dep.DPTSTXT,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT";	
													ResultSet srsava1= ad.selectQuery(sava1); 
													if(srsava1.next())
													{
														hr.setContractavailstrength(srsava1.getInt("availableStrength"));
														hr.setTechstaffsalary(0);
													}
													srsava1.close();
													
													
													///SKILLED
													if(ACtualrepgrp.contains("4"))
													{
														String query5="select emp_official_info.pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master,EMP_Shift_Register as sh where sh.pernr=emp_official_info.PERNR and sh.Month='"+frmmon+"' and (sh.DAY"+frmday+"='"+ACtualshift+"') and sh.year='"+frmyear+"' AND Location.LOCATION_CODE=emp_official_info.LOCID and "
																+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'    and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (4)  and ACTIVE = 1";
														ResultSet rs6= ad.selectQuery(query5); 
														try {
															while(rs6.next())
															{
																empnos4=empnos4+","+rs6.getString("pernr");
															}
															if(!empnos4.equalsIgnoreCase(""))
															empnos4=empnos4.substring(1, empnos4.length());
														} catch (SQLException e1) {
															// TODO Auto-generated catch block
															e1.printStackTrace();
														}
														rs6.close();
														
														for(int j=frmday;j<=today;j++)
														{
															if(!empnos4.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos4+") and (day"+j+" like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
															present4=present4+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
														}}
														hr.setSkilledpresent(present4);
														
														for(int j=frmday;j<=today;j++)
														{
															if(!empnos4.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos4+") and (day"+j+" not like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
															absent4=absent4+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
														}}
														hr.setSkilledabsent(absent4);
														
														
														request.setAttribute("skilled", "skilled");
													}
													///SEMISKILLED	
													if(ACtualrepgrp.contains("6"))
													{
														String query6="select emp_official_info.pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master,EMP_Shift_Register as sh where sh.pernr=emp_official_info.PERNR and sh.Month='"+frmmon+"' and (sh.DAY"+frmday+"='"+ACtualshift+"') and sh.year='"+frmyear+"' AND Location.LOCATION_CODE=emp_official_info.LOCID and "
																+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'    and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (6)  and ACTIVE = 1";
														ResultSet rs7= ad.selectQuery(query6); 
														try {
															while(rs7.next())
															{
																empnos5=empnos5+","+rs7.getString("pernr");
															}
															if(!empnos5.equalsIgnoreCase(""))
															empnos5=empnos5.substring(1, empnos5.length());
														} catch (SQLException e1) {
															// TODO Auto-generated catch block
															e1.printStackTrace();
														}
														rs7.close();
														for(int j=frmday;j<=today;j++)
														{
															if(!empnos5.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos5+") and (day"+j+" like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
															present5=present5+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
														}}
														///
														
													
														hr.setSemiskilledpresent(present5);
														for(int j=frmday;j<=today;j++)
														{
															if(!empnos5.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos5+") and (day"+j+" not like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
															absent5=absent5+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
														}}
														///
														
													
														hr.setSemiskilledabsent(absent5);
														request.setAttribute("semiskilled", "semiskilled");
													}
													
													///UNSKILLED	
													if(ACtualrepgrp.contains("5"))
													{
														String query7="select emp_official_info.pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master,EMP_Shift_Register as sh where sh.pernr=emp_official_info.PERNR and sh.Month='"+frmmon+"' and (sh.DAY"+frmday+"='"+ACtualshift+"') and sh.year='"+frmyear+"' AND Location.LOCATION_CODE=emp_official_info.LOCID and "
																+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'    and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (5)  and ACTIVE = 1";
														ResultSet rs8= ad.selectQuery(query7); 
														try {
															while(rs8.next())
															{
																empnos6=empnos6+","+rs8.getString("pernr");
															}
															if(!empnos6.equalsIgnoreCase(""))
															empnos6=empnos6.substring(1, empnos6.length());
														} catch (SQLException e1) {
															// TODO Auto-generated catch block
															e1.printStackTrace();
														}
														rs8.close();
														for(int j=frmday;j<=today;j++)
														{
															if(!empnos6.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos6+") and (day"+j+" like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
															present6=present6+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
														}}
														
													
														hr.setUnskilledpresent(present6);
														for(int j=frmday;j<=today;j++)
														{
															if(!empnos6.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos6+") and (day"+j+" not like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
															absent6=absent6+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
														}}
														
													
														hr.setUnskilledabsent(absent6);
														
														request.setAttribute("unskilled", "unskilled");
														
														
													}
													
													///G4s
	
													if(ACtualrepgrp.contains("8"))
													{

														String query8="select emp_official_info.pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master,EMP_Shift_Register as sh where sh.pernr=emp_official_info.PERNR and sh.Month='"+frmmon+"' and (sh.DAY"+frmday+"='"+ACtualshift+"') and sh.year='"+frmyear+"' AND Location.LOCATION_CODE=emp_official_info.LOCID and "
																+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'    and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (8)  and ACTIVE = 1";
														ResultSet rs9= ad.selectQuery(query8); 
														try {
															while(rs9.next())
															{
																empnos8=empnos8+","+rs9.getString("pernr");
															}
															if(!empnos8.equalsIgnoreCase(""))
															empnos8=empnos8.substring(1, empnos8.length());
														} catch (SQLException e1) {
															// TODO Auto-generated catch block
															e1.printStackTrace();
														}rs9.close();
													
														for(int j=frmday;j<=today;j++)
														{
															if(!empnos8.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos8+") and (day"+j+" like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
															present8=present8+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
													
														}}
														hr.setSecuritypresent(present8);
														for(int j=frmday;j<=today;j++)
														{
															if(!empnos8.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos8+") and (day"+j+" not like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
															absent8=absent8+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
													
														}}
														hr.setSecurityabsent(absent8);
														request.setAttribute("g4s", "g4s");
													}
													
													///projects
													
													if(ACtualrepgrp.contains("9"))
													{


														String query9="select emp_official_info.pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master,EMP_Shift_Register as sh where sh.pernr=emp_official_info.PERNR and sh.Month='"+frmmon+"' and (sh.DAY"+frmday+"='"+ACtualshift+"') and sh.year='"+frmyear+"' AND Location.LOCATION_CODE=emp_official_info.LOCID and "
																+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'  and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (9)  and ACTIVE = 1";
														ResultSet rs10= ad.selectQuery(query9); 
														try {
															while(rs10.next())
															{
																empnos9=empnos9+","+rs10.getString("pernr");
															}
															if(!empnos9.equalsIgnoreCase(""))
															empnos9=empnos9.substring(1, empnos9.length());
														} catch (SQLException e1) {
															// TODO Auto-generated catch block
															e1.printStackTrace();
														}
														rs10.close();
														for(int j=frmday;j<=today;j++)
														{
														
															if(!empnos9.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos9+") and (day"+j+" like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
															present9=present9+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
														}}
														hr.setProjectspresent(present9);
														for(int j=frmday;j<=today;j++)
														{
														
															if(!empnos9.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos9+") and (day"+j+" not like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
															absent9=absent9+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
														}}
														hr.setProjectsabsent(absent9);
														request.setAttribute("project", "project");
													}
														
											   hr.setTotcontractpresent(present4+present5+present6+present8+present9);	
											   hr.setTotcontractabsent(absent4+absent5+absent6+absent8+absent9);	
											   
											   hr.setTotpresent(hr.getTotcontractpresent()+present1+present2+present3+present7);
											   hr.setTotabsent(hr.getTotcontractabsent()+absent1+absent2+absent3+absent7);
											   hr.setThreeapprstrength(hr.getStaffapprstrength()+hr.getApprenstaffapprstrength()+hr.getTechstaffapprstrength());
											   hr.setThreepresent(present1+present2+present3);
											   hr.setThreeabsent(absent1+absent2+absent3);
											   hr.setThreesalary(hr.getStaffsalary()+hr.getTechstaffsalary()+hr.getApprenstaffsalary());
											   
												man.add(hr);
												
												
												//grnd
												  grnstaffapprstrength=grnstaffapprstrength+hr.getStaffapprstrength();
												  grnstaffavailstrength=grnstaffavailstrength+hr.getStaffavailstrength();
												  grnstaffpresent=grnstaffpresent+hr.getStaffpresent();
												  grnstaffabsent=grnstaffabsent+hr.getStaffabsent();
												  grnstaffsalary=grnstaffsalary+hr.getStaffsalary();
												
												  grntechstaffapprstrength=grntechstaffapprstrength+hr.getTechstaffapprstrength();
												  grntechstaffavailstrength=grntechstaffavailstrength+hr.getTechstaffavailstrength();
												  grntechstaffpresent=grntechstaffpresent+hr.getTechstaffpresent();
												  grntechstaffabsent=grntechstaffabsent+hr.getTechstaffabsent();
												  grntechstaffsalary=grntechstaffsalary+hr.getTechstaffsalary();
												
												
												  grnapprenstaffapprstrength=grnapprenstaffapprstrength+hr.getApprenstaffapprstrength();
												  grnapprenstaffavailstrength=grnapprenstaffavailstrength+hr.getApprenstaffavailstrength();
												  grnapprenstaffpresent=grnapprenstaffpresent+hr.getApprenstaffpresent();
												  grnapprenstaffabsent=grnapprenstaffabsent+hr.getApprenstaffabsent();
													 
												  grnapprenstaffsalary=grnapprenstaffsalary+hr.getApprenstaffsalary();
												
												  grncontractapprstrength=grncontractapprstrength+hr.getContractapprstrength();
												  grncontractavailstrength=grncontractavailstrength+hr.getContractavailstrength();

												  grnskilledpresent=grnskilledpresent+hr.getSkilledpresent();
												  grnskilledabsent=grnskilledabsent+hr.getSkilledabsent();
												  
												  grnunskilledpresent=grnunskilledpresent+hr.getUnskilledpresent();
												  grnunskilledabsent=grnunskilledabsent+hr.getUnskilledabsent();
												  
												  grnsemiskilledpresent=grnsemiskilledpresent+hr.getSemiskilledpresent();
												  grnsemiskilledabsent=grnsemiskilledabsent+hr.getSemiskilledabsent();
												  
												  
												  grnsecuritypresent=grnsecuritypresent+hr.getSecuritypresent();
												  grnsecurityabsent=grnsecurityabsent+hr.getSecurityabsent();
												  
												  
												  grnprojectspresent=grnprojectspresent+hr.getProjectspresent();
												  grnprojectsabsent=grnprojectsabsent+hr.getProjectsabsent();
												
												
												  grntotcontractpresent=grntotcontractpresent+hr.getTotcontractpresent();
												  grntotcontractabsent=grntotcontractabsent+hr.getTotcontractabsent();
												  grntotcontractSalary=grntotcontractSalary+hr.getTotcontractSalary();
												
												
												  grnhouseapprstrength=grnhouseapprstrength+hr.getHouseapprstrength();	
												  grnhouseavailstrength=grnhouseavailstrength+hr.getHouseavailstrength();
												  grntotcontractpresent=grntotcontractpresent+hr.getTotcontractpresent();
												  grntotcontractabsent=grntotcontractabsent+hr.getTotcontractabsent();
												  grnhousesalary=grnhousepresent+hr.getHousesalary();
												
												  grntotpresent=grntotpresent+hr.getTotpresent();
												  grntotabsent=grntotabsent+hr.getTotabsent();
												  grntotsalary=grntotsalary+hr.getTotsalary();
												
												
												  grnthreeapprstrength=grnthreeapprstrength+hr.getThreeapprstrength();	
												  grnthreepresent=grnthreepresent+hr.getThreepresent();
												  grnthreeabsent=grnthreeabsent+hr.getThreeabsent();
												  grnthreesalary=grnthreesalary+hr.getThreesalary();
												  
												  ///sub
												  
												  substaffapprstrength=substaffapprstrength+hr.getStaffapprstrength();
												  substaffavailstrength=substaffavailstrength+hr.getStaffavailstrength();
												  substaffpresent=substaffpresent+hr.getStaffpresent();
												  substaffabsent=substaffabsent+hr.getStaffabsent();
												  substaffsalary=substaffsalary+hr.getStaffsalary();
												
												  subtechstaffapprstrength=subtechstaffapprstrength+hr.getTechstaffapprstrength();
												  subtechstaffavailstrength=subtechstaffavailstrength+hr.getTechstaffavailstrength();
												  subtechstaffpresent=subtechstaffpresent+hr.getTechstaffpresent();
												  subtechstaffabsent=subtechstaffabsent+hr.getTechstaffabsent();
												  subtechstaffsalary=subtechstaffsalary+hr.getTechstaffsalary();
												
												
												  subapprenstaffapprstrength=subapprenstaffapprstrength+hr.getApprenstaffapprstrength();
												  subapprenstaffavailstrength=subapprenstaffavailstrength+hr.getApprenstaffavailstrength();
												  subapprenstaffpresent=subapprenstaffpresent+hr.getApprenstaffpresent();
												  subapprenstaffabsent=subapprenstaffabsent+hr.getApprenstaffabsent();
													 
												  subapprenstaffsalary=subapprenstaffsalary+hr.getApprenstaffsalary();
												
												  subcontractapprstrength=subcontractapprstrength+hr.getContractapprstrength();
												  subcontractavailstrength=subcontractavailstrength+hr.getContractavailstrength();

												  subskilledpresent=subskilledpresent+hr.getSkilledpresent();
												  subunskilledpresent=subunskilledpresent+hr.getUnskilledpresent();
												  subsemiskilledpresent=subsemiskilledpresent+hr.getSemiskilledpresent();
												  subsecuritypresent=subsecuritypresent+hr.getSecuritypresent();
												  subprojectspresent=subprojectspresent+hr.getProjectspresent();
												
												  subskilledabsent=subskilledabsent+hr.getSkilledabsent();
												  subunskilledabsent=subunskilledabsent+hr.getUnskilledabsent();
												  subsemiskilledabsent=subsemiskilledabsent+hr.getSemiskilledabsent();
												  subsecurityabsent=subsecurityabsent+hr.getSecurityabsent();
												  subprojectsabsent=subprojectsabsent+hr.getProjectsabsent();
												
												  subtotcontractpresent=subtotcontractpresent+hr.getTotcontractpresent();
												  subtotcontractabsent=subtotcontractabsent+hr.getTotcontractabsent();
												  subtotcontractSalary=subtotcontractSalary+hr.getTotcontractSalary();
												
												
												  subhouseapprstrength=subhouseapprstrength+hr.getHouseapprstrength();	
												 
												  subhouseavailstrength=subhouseavailstrength+hr.getHouseavailstrength();
												  subhousepresent=subhousepresent+hr.getHousepresent();
												  subhouseabsent=subhouseabsent+hr.getHouseabsent();
												  subhousesalary=subhousepresent+hr.getHousesalary();
												
												  subtotpresent=subtotpresent+hr.getTotpresent();
												  subtotabsent=subtotabsent+hr.getTotabsent();
												  subtotsalary=subtotsalary+hr.getTotsalary();
												
												
												  subthreeapprstrength=subthreeapprstrength+hr.getThreeapprstrength();	
												  subthreepresent=subthreepresent+hr.getThreepresent();
												  subthreeabsent=subthreeabsent+hr.getThreeabsent();
												  subthreesalary=subthreesalary+hr.getThreesalary();
												  
												  if(rowno.equalsIgnoreCase(rsabc.getString("RowNum"))) 
												  {
													  HRApprovalForm hr2=new HRApprovalForm();
														
														
														hr2.setDepartment(subdptid);
														hr2.setLocationId("Sub");
														
													    hr2.setStaffapprstrength(substaffapprstrength);
														 hr2.setStaffavailstrength(substaffavailstrength);
														 hr2.setStaffpresent(substaffpresent);
														 hr2.setStaffabsent(substaffabsent);
														 hr2.setStaffsalary(substaffsalary);
														
														 hr2.setTechstaffapprstrength(subtechstaffapprstrength);
														 hr2.setTechstaffavailstrength(subtechstaffavailstrength);
														 hr2.setTechstaffpresent(subtechstaffpresent);
														 hr2.setTechstaffabsent(subtechstaffabsent);
														 hr2.setTechstaffsalary(subtechstaffsalary);
														
														
														 hr2.setApprenstaffapprstrength(subapprenstaffapprstrength);
														 hr2.setApprenstaffavailstrength(subapprenstaffavailstrength);
														 hr2.setApprenstaffabsent(subapprenstaffabsent);
														 hr2.setApprenstaffsalary(subapprenstaffsalary);
														
														 hr2.setContractapprstrength(subcontractapprstrength);
														 hr2.setContractavailstrength(subcontractavailstrength);

														 hr2.setSkilledpresent(subskilledpresent);
														 hr2.setUnskilledpresent(subunskilledpresent);
														 hr2.setSemiskilledpresent(subsemiskilledpresent);
														 hr2.setSecuritypresent(subsecuritypresent);
														 hr2.setProjectspresent(subprojectspresent);
														 
														 hr2.setSkilledabsent(subskilledabsent);
														 hr2.setUnskilledabsent(subunskilledabsent);
														 hr2.setSemiskilledabsent(subsemiskilledabsent);
														 hr2.setSecurityabsent(subsecurityabsent);
														 hr2.setProjectsabsent(subprojectsabsent);
														
														
														
														 hr2.setTotcontractpresent(subtotcontractpresent);
														 hr2.setTotcontractabsent(subtotcontractabsent);
														 hr2.setTotcontractSalary(subtotcontractSalary);
														
														
														 hr2.setHouseapprstrength(subhouseapprstrength);
														 hr2.setHouseavailstrength(subhouseavailstrength);
														 hr2.setHousepresent(subhousepresent);
														 hr2.setHouseabsent(subhouseabsent);
														 hr2.setHousesalary(subhousesalary);
														
														 hr2.setTotpresent(subtotpresent);
														 hr2.setTotabsent(subtotabsent);
														 hr2.setTotsalary(subtotsalary);
														
														
														 hr2.setThreeapprstrength(subthreeapprstrength);	
														 hr2.setThreepresent(subthreepresent);
														 hr2.setThreeabsent(subthreeabsent);
														 hr2.setThreesalary(subthreesalary);
														
														 man.add(hr2);
														
												  }
												
												
											}
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										finally{
							    			query1="";
							    			query2="";
							    			query3="";
							    			query4="";
							    			query5="";
							    			query6="";
							    		}
										//last subtotla
										
										
										
										
										
										//
										
										
                                        help.setGrnstaffapprstrength(grnstaffapprstrength);
										 help.setGrnstaffavailstrength(grnstaffavailstrength);
										 help.setGrnstaffpresent(grnstaffpresent);
										 help.setGrnstaffabsent(grnstaffabsent);
										 help.setGrnstaffsalary(grnstaffsalary);
										
										 help.setGrntechstaffapprstrength(grntechstaffapprstrength);
										 help.setGrntechstaffavailstrength(grntechstaffavailstrength);
										 help.setGrntechstaffpresent(grntechstaffpresent);
										 help.setGrntechstaffabsent(grntechstaffabsent);
										 help.setGrntechstaffsalary(grntechstaffsalary);
										
										
										 help.setGrnapprenstaffapprstrength(grnapprenstaffapprstrength);
										 help.setGrnapprenstaffavailstrength(grnapprenstaffavailstrength);
										 help.setGrnapprenstaffpresent(grnapprenstaffpresent);
										 help.setGrnapprenstaffabsent(grnapprenstaffabsent);
										 help.setGrnapprenstaffsalary(grnapprenstaffsalary);
										
										 help.setGrncontractapprstrength(grncontractapprstrength);
										 help.setGrncontractavailstrength(grncontractavailstrength);

										 help.setGrnskilledpresent(grnskilledpresent);
										 help.setGrnunskilledpresent(grnunskilledpresent);
										 help.setGrnsemiskilledpresent(grnsemiskilledpresent);
										 help.setGrnsecuritypresent(grnsecuritypresent);
										 help.setGrnprojectspresent(grnprojectspresent);
										
										 help.setGrnskilledabsent(grnskilledabsent);
										 help.setGrnunskilledabsent(grnunskilledabsent);
										 help.setGrnsemiskilledabsent(grnsemiskilledabsent);
										 help.setGrnsecurityabsent(grnsecurityabsent);
										 help.setGrnprojectsabsent(grnprojectsabsent);
										
										 help.setGrntotcontractpresent(grntotcontractpresent);
										 help.setGrntotcontractabsent(grntotcontractabsent);
										 help.setGrntotcontractSalary(grntotcontractSalary);
										
										
										 help.setGrnhouseapprstrength(grnhouseapprstrength);
										 help.setGrnhouseavailstrength(grnhouseavailstrength);
										 help.setGrnhousepresent(grnhousepresent);
										 help.setGrnhouseabsent(grnhouseabsent);
										 help.setGrnhousesalary(grnhousesalary);
										
										 help.setGrntotpresent(grntotpresent);
										 help.setGrntotabsent(grntotabsent);
										 help.setGrntotsalary(grntotsalary);
										
										
										 help.setGrnthreeapprstrength(grnthreeapprstrength);	
										 help.setGrnthreepresent(grnthreepresent);
										 help.setGrnthreeabsent(grnthreeabsent);
										 help.setGrnthreesalary(grnthreesalary);
										
								
										request.setAttribute("man", man);
										
										
										if(man.size()==0)
										{
											request.setAttribute("nolist", "nolist");	
										}
	 
				
				request.setAttribute("result", "result");
				
				try {
					rsf.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				
				
				try {
					rscat.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				try {
					rsabc.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
									    }
									    
									    else
									    	
									    {
									    	
									    	
									    
									    	String st="";
									    	ArrayList depman=new ArrayList();
									    	if(!ACtualpay.equalsIgnoreCase(""))
									    	{
									    	String pay=" select Short_desc from Paygroup_Master where Paygroup="+ACtualpay+" ";
									    	ResultSet bpay=ad.selectQuery(pay);
									    	try {
												if(bpay.next()){
													help.setPaygrp(bpay.getString("Short_desc"));
												}
											} catch (SQLException e1) {
												// TODO Auto-generated catch block
												e1.printStackTrace();
											}
									    	
									    
									    	 st="  select  sum(case when  STAFFCAT=7   then 1 else 0 end )  as factorystaffavailable,  "
		+ " sum(case when day"+frmday+" like '%PP%' and STAFFCAT=7   then 1 else 0 end ) as factorystaffpresent, "
		+ "  sum(case when  STAFFCAT=3   then 1 else 0 end )  as workersavailable,      sum(case when day"+frmday+" like '%PP%' and STAFFCAT=3   then 1 else 0 end ) "
		+ "as workerspresent,	  (sum(case when  STAFFCAT=7   then 1 else 0 end )+sum(case when  STAFFCAT=3   then 1 else 0 end ) ) as"
		+ " totalavlable,(sum(case when day"+frmday+" like '%PP%' and STAFFCAT=7   then 1 else 0 end )+sum(case when day"+frmday+" like '%PP%' and STAFFCAT=3   then 1 else 0 end )) "
		+ "as totalpresent  , emp.dptid,DEPARTMENT.dptstxt    from EMP_IN_OUT_Status  ,emp_official_info as emp,department where "
		+ "EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and  year='"+frmyear+"' and emp.LOCID='"+help.getLocationId()+"'"
				+ " and EMP.ACTIVE=1 AND STAFFCAT in (3,7) and PAY_GROUP='"+ACtualpay+"' and department.dptid=emp.dptid group by emp.dptid,DEPARTMENT.dptstxt "
				+ "union "
				+"  select  sum(case when  STAFFCAT=7   then 1 else 0 end )  as factorystaffavailable,  "
				+ " sum(case when day"+frmday+" like '%PP%' and STAFFCAT=7   then 1 else 0 end ) as factorystaffpresent, "
				+ "  sum(case when  STAFFCAT=3   then 1 else 0 end )  as workersavailable,      sum(case when day"+frmday+" like '%PP%' and STAFFCAT=3   then 1 else 0 end ) "
				+ "as workerspresent,	  (sum(case when  STAFFCAT=7   then 1 else 0 end )+sum(case when  STAFFCAT=3   then 1 else 0 end ) ) as"
				+ " totalavlable,(sum(case when day"+frmday+" like '%PP%' and STAFFCAT=7   then 1 else 0 end )+sum(case when day"+frmday+" like '%PP%' and STAFFCAT=3   then 1 else 0 end )) "
				+ "as totalpresent  , '',''    from EMP_IN_OUT_Status  ,emp_official_info as emp,department where "
				+ "EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and  year='"+frmyear+"' and emp.LOCID='"+help.getLocationId()+"'"
						+ " and EMP.ACTIVE=1 AND STAFFCAT in (3,7) and PAY_GROUP='"+ACtualpay+"' and department.dptid=emp.dptid  ";
									    	}
									    	
									    	else
									    	{
			 st="  select  sum(case when  STAFFCAT=7   then 1 else 0 end )  as factorystaffavailable,  "
						+ " sum(case when day"+frmday+" like '%PP%' and STAFFCAT=7   then 1 else 0 end ) as factorystaffpresent, "
						+ "  sum(case when  STAFFCAT=3   then 1 else 0 end )  as workersavailable,      sum(case when day"+frmday+" like '%PP%' and STAFFCAT=3   then 1 else 0 end ) "
						+ "as workerspresent,	  (sum(case when  STAFFCAT=7   then 1 else 0 end )+sum(case when  STAFFCAT=3   then 1 else 0 end ) ) as"
						+ " totalavlable,(sum(case when day"+frmday+" like '%PP%' and STAFFCAT=7   then 1 else 0 end )+sum(case when day"+frmday+" like '%PP%' and STAFFCAT=3   then 1 else 0 end )) "
						+ "as totalpresent  , emp.dptid,DEPARTMENT.dptstxt    from EMP_IN_OUT_Status  ,emp_official_info as emp,department where "
						+ "EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and  year='"+frmyear+"' and emp.LOCID='"+help.getLocationId()+"'"
								+ " and EMP.ACTIVE=1 AND STAFFCAT in (3,7)  and department.dptid=emp.dptid group by emp.dptid,DEPARTMENT.dptstxt "
								+ "union "
								+"  select  sum(case when  STAFFCAT=7   then 1 else 0 end )  as factorystaffavailable,  "
								+ " sum(case when day"+frmday+" like '%PP%' and STAFFCAT=7   then 1 else 0 end ) as factorystaffpresent, "
								+ "  sum(case when  STAFFCAT=3   then 1 else 0 end )  as workersavailable,      sum(case when day"+frmday+" like '%PP%' and STAFFCAT=3   then 1 else 0 end ) "
								+ "as workerspresent,	  (sum(case when  STAFFCAT=7   then 1 else 0 end )+sum(case when  STAFFCAT=3   then 1 else 0 end ) ) as"
								+ " totalavlable,(sum(case when day"+frmday+" like '%PP%' and STAFFCAT=7   then 1 else 0 end )+sum(case when day"+frmday+" like '%PP%' and STAFFCAT=3   then 1 else 0 end )) "
								+ "as totalpresent  , '',''    from EMP_IN_OUT_Status  ,emp_official_info as emp,department where "
								+ "EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and  year='"+frmyear+"' and emp.LOCID='"+help.getLocationId()+"'"
										+ " and EMP.ACTIVE=1 AND STAFFCAT in (3,7)  and department.dptid=emp.dptid  ";
	}
									    
									    	
									    	ResultSet h=ad.selectQuery(st);
									    	
									    	try {
												while(h.next())
												{
													HRApprovalForm hr=new HRApprovalForm();
													hr.setDepartment(h.getString("dptstxt"));
													hr.setStaffavailstrength(h.getInt("factorystaffavailable"));
													hr.setStaffpresent(h.getInt("factorystaffpresent"));
													hr.setTechstaffavailstrength(h.getInt("workersavailable"));
													hr.setTechstaffpresent(h.getInt("workerspresent"));
													hr.setTotalRecords(h.getInt("totalavlable"));
													hr.setTotpresent(h.getInt("totalpresent"));
													
													depman.add(hr);
												}
											} catch (SQLException e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
									    	
									    	
									    	
									    	if(depman.size()>0)
									    		request.setAttribute("depman", depman);
									    	else
									    		request.setAttribute("nodepman", "nodepman");
									    }
				
				
				
				try {
					cc.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				try {
					rs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					subrs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				/*try {
					rs115.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}*/
				
				try {
					reprs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return mapping.findForward("displayDaywisemanpowerreport");	
	
	
		
	
		
	}
	
	public ActionForward exportmanpowerreport(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
		
		Calendar mycal = Calendar.getInstance();
		help.setFrommonth(Integer.toString(mycal.get(Calendar.MONTH) + 1));
		
		
		Date dNow = new Date( );
		SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd");
		String exportdate=ft.format(dNow);

		response.setHeader("Content-Disposition", "inline; filename="+exportdate+"_Manpower_Report.xls");
		
		
		ArrayList shiftList=new ArrayList();
		ArrayList shiftLabelList=new ArrayList();
		ResultSet rs115 = ad.selectQuery("select shift_code," +
				"Shift_Name from EMP_SHIFT_MASTER order by Shift_Name"); 
				try {
					while(rs115.next()) {
						shiftList.add(rs115.getString("shift_code"));
						shiftLabelList.add(rs115.getString("Shift_Name"));
					}
					rs115.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setShiftList(shiftList);
				help.setShiftLabelList(shiftLabelList);
		
				String cmpcode="";
				int id=user.getGroupId();
				String cmp[]=new String[0]; 
				String locations="";
				
				String aa="select * from user_group where id='"+id+"'";
				ResultSet cc=ad.selectQuery(aa);
				try {
					if(cc.next())
					{
						cmpcode=cc.getString("Attendance_Loc");
						
						if(cmpcode.contains(","))
						{
						 cmp=cmpcode.split(",");
						
						for(int b=0;b<cmp.length;b++)
						{
							locations=locations+"'"+cmp[b]+"',";
						}
						
						locations=locations.substring(0, locations.length()-1);
						}
						else
						{
							locations="'"+cmpcode+"'";
						}
					}
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
		
		
		   ArrayList locationList=new ArrayList();
					ArrayList locationLabelList=new ArrayList();
					ResultSet rs11 = ad.selectQuery("select LOCID," +
							"LOCNAME,location_code from location where location_code in ("+locations+") "); 
							try {
								while(rs11.next()) {
									locationList.add(rs11.getString("location_code"));
									locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
									
								}
								rs11.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							help.setLocationIdList(locationList);
							help.setLocationLabelList(locationLabelList);
	
		
	
		
					
	
				ArrayList deptList=new ArrayList();
				ArrayList deptLabelList=new ArrayList();
				ResultSet rs15 = ad.selectQuery("select dptid," +
						"DPTLTXT from DEPARTMENT order by DPTLTXT"); 
						try {
							while(rs15.next()) {
								deptList.add(rs15.getString("dptid"));
								deptLabelList.add(rs15.getString("DPTLTXT"));
							}
							rs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						help.setDeptList(deptList);
						help.setDeptLabelList(deptLabelList);
						
						//subdep
						ArrayList subdeptList=new ArrayList();
						ArrayList subdeptLabelList=new ArrayList();
						ResultSet subrs15 = ad.selectQuery("select SDPTID," +
								"SDPTID_LTXT from SUBDEPARTMENT order by SDPTID_LTXT "); 
								try {
									while(subrs15.next()) {
										subdeptList.add(subrs15.getString("SDPTID"));
										subdeptLabelList.add(subrs15.getString("SDPTID_LTXT"));
									}
									subrs15.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								
								help.setSubdeptList(subdeptList);
								help.setSubdeptLabelList(subdeptLabelList);
								
								//repgrp
								ArrayList repgrptList=new ArrayList();
								ArrayList repgrpLabelList=new ArrayList();
								ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
										"Grp_LTXT from REPORTING_GROUP where  Grp_ID not in(1,2,3,7)"); 
										try {
											while(reprs15.next()) {
												repgrptList.add(reprs15.getString("Grp_ID"));
												repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
											}
											reprs15.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										
										help.setRepgrpList(repgrptList);
										help.setRepgrpLabelList(repgrpLabelList);
										
										
								
										//dept
										String ACtualdept="";
									    if(help.getDeptArray()!=null)
									    {	
									    String[] dept = help.getDeptArray();
									    
									    StringBuffer reqdept = new StringBuffer();
										for (int i = 0; i < dept.length; i++) {
											reqdept.append("'"+dept[i]+"'" + ",");
										}
										 ACtualdept= reqdept.substring(0, reqdept.length() - 1).toString();
									    }
										
									    
									    //subdept
									    
									    String ACtualsubdept="";
									    if(help.getSubdeptArray()!=null)
									    {	
									    String[] subdept = help.getSubdeptArray();
									    
									    StringBuffer reqsubdept = new StringBuffer();
										for (int i = 0; i < subdept.length; i++) {
											reqsubdept.append("'"+subdept[i]+"'" + ",");
										}
										ACtualsubdept= reqsubdept.substring(0, reqsubdept.length() - 1).toString();
									    }
									    
                                        //reporting
									    
									    String ACtualrepgrp="";
									    if(help.getRepgrpArray()!=null)
									    {	
									    String[] repgrp = help.getRepgrpArray();
									    
									    StringBuffer reqrepgrp = new StringBuffer();
										for (int i = 0; i < repgrp.length; i++) {
											reqrepgrp.append("'"+repgrp[i]+"'" + ",");
										}
										ACtualrepgrp= reqrepgrp.substring(0, reqrepgrp.length() - 1).toString();
									    }
									    
										 int staffapprstrength=0;
										 int staffavailstrength=0;
										 int staffpresent=0;
										 int staffabsent=0;
										 float staffsalary=0;
										
										 int techstaffapprstrength=0;
										 int techstaffavailstrength=0;
										 int techstaffpresent=0;
										 int techstaffabsent=0;
										 float techstaffsalary=0;
										
										
										 int apprenstaffapprstrength=0;
										 int apprenstaffavailstrength=0;
										 int apprenstaffpresent=0;
										 int apprenstaffabsent=0;
										 float apprenstaffsalary=0;
										
										 int contractapprstrength=0;

										 int skilledpresent=0;
										 int unskilledpresent=0;
										 int semiskilledpresent=0;
										 int securitypresent=0;
										 int projectspresent=0;
										 
										 int skilledabsent=0;
										 int unskilledabsent=0;
										 int semiskilledabsent=0;
										 int securityabsent=0;
										 int projectsabsent=0;
										
										
										 int totcontractpresent=0;
										 int totcontractabsent=0;
										 int totcontractSalary=0;
										
										
										 int houseapprstrength=0;	
										 int housepresent=0;
										 int houseabsent=0;
										 float housesalary=0;
										
										 int totpresent=0;
										 int totabsent=0;
										 float totsalary=0;
										
										
										 int threeapprstrength=0;	
										 int threepresent=0;
										 int threeabsnet=0;
										 float threesalary=0;
										
										///grand
										
										 int grnstaffapprstrength=0;
										 int grnstaffavailstrength=0;
										 int grnstaffpresent=0;
										 int grnstaffabsent=0;
										 float grnstaffsalary=0;
										
										 int grntechstaffapprstrength=0;
										 int grntechstaffavailstrength=0;
										 int grntechstaffpresent=0;
										 int grntechstaffabsent=0;
										 float grntechstaffsalary=0;
										
										
										 int grnapprenstaffapprstrength=0;
										 int grnapprenstaffavailstrength=0;
										 int grnapprenstaffpresent=0;
										 int grnapprenstaffabsent=0;
										 float grnapprenstaffsalary=0;
										
										 int grncontractapprstrength=0;

										 int grnskilledpresent=0;
										 int grnunskilledpresent=0;
										 int grnsemiskilledpresent=0;
										 int grnsecuritypresent=0;
										 int grnprojectspresent=0;
										 
										 int grnskilledabsent=0;
										 int grnunskilledabsent=0;
										 int grnsemiskilledabsent=0;
										 int grnsecurityabsent=0;
										 int grnprojectsabsent=0;
										
										
										 int grntotcontractpresent=0;
										 int grntotcontractabsent=0;
										 
										 int grntotcontractSalary=0;
										
										
										 int grnhouseapprstrength=0;	
										 int grnhousepresent=0;
										 int grnhouseabsent=0;
										 float grnhousesalary=0;
										
										 int grntotpresent=0;
										 int grntotabsent=0;
										 float grntotsalary=0;
										
										
										 int grnthreeapprstrength=0;	
										 int grnthreepresent=0;
										 int grnthreeabsent=0;
										 float grnthreesalary=0;
										 
										 
										 //subtotal
										 
											
										 int substaffapprstrength=0;
										 int substaffavailstrength=0;
										 int substaffpresent=0;
										 int substaffabsent=0;
										 float substaffsalary=0;
										
										 int subtechstaffapprstrength=0;
										 int subtechstaffavailstrength=0;
										 int subtechstaffpresent=0;
										 int subtechstaffabsent=0;
										 float subtechstaffsalary=0;
										
										
										 int subapprenstaffapprstrength=0;
										 int subapprenstaffavailstrength=0;
										 int subapprenstaffpresent=0;
										 int subapprenstaffabsent=0;
										 float subapprenstaffsalary=0;
										
										 int subcontractapprstrength=0;

										 int subskilledpresent=0;
										 int subunskilledpresent=0;
										 int subsemiskilledpresent=0;
										 int subsecuritypresent=0;
										 int subprojectspresent=0;
										 
										 int subskilledabsent=0;
										 int subunskilledabsent=0;
										 int subsemiskilledabsent=0;
										 int subsecurityabsent=0;
										 int subprojectsabsent=0;
										
										
										 int subtotcontractpresent=0;
										 int subtotcontractabsent=0;
										 int subtotcontractSalary=0;
										
										
										 int subhouseapprstrength=0;	
										 int subhousepresent=0;
										 int subhouseabsent=0;
										 float subhousesalary=0;
										
										 int subtotpresent=0;
										 int subtotabsent=0;
										 float subtotsalary=0;
										
										
										 int subthreeapprstrength=0;	
										 int subthreepresent=0;
										 int subthreeabsent=0;
										 float subthreesalary=0;
										
								
									    LinkedList man=new LinkedList();
									    
									    int frmday=0;
									    int today=0;
									    int frmmon=0;
									    int tomon=0;
									    int frmyear=0;
									    int toyear=0;
									    
									    String fromdate=help.getFromDate();
									    String todate=help.getToDate();
									    
									    String from[]=fromdate.split("/");
									    frmday=Integer.parseInt(from[0]);
									    frmmon=Integer.parseInt(from[1]);
									    frmyear=Integer.parseInt(from[2]);
									    
									    String to[]=todate.split("/");
									    today=Integer.parseInt(to[0]);
									    tomon=Integer.parseInt(to[1]);
									    toyear=Integer.parseInt(to[2]);
									    
									    String subdptid="";
									    int chk=0;
									    
									    if(!ACtualsubdept.equalsIgnoreCase(""))
									    {
									    
									    //
									    String catdesc=" select * from REPORTING_GROUP where Grp_ID in ("+ACtualrepgrp+")";
									   
										 ResultSet rscat=ad.selectQuery(catdesc);
										 LinkedList categorylist=new LinkedList();
										 String reqrcateg="";
										 try {
											while (rscat.next()) 
											  {
												 HRApprovalForm m1=new HRApprovalForm(); 
												 m1.setRepgrp(rscat.getString("Grp_STXT"));
												 categorylist.add(m1);
											  }
										} catch (SQLException e3) {
											// TODO Auto-generated catch block
											e3.printStackTrace();
										}
										request.setAttribute("categorylist", categorylist);
									    
									    
									    String abc1="select * From (SELECT ROW_NUMBER() OVER(ORDER BY  APPROVED_STRENGTH.Area) AS RowNum,*,id as SDPTID from APPROVED_STRENGTH where plant='"+help.getLocationId()+"' and id in ("+ACtualsubdept+"))as sub order by id";
									    
										/*String abc="select dep.DPTSTXT as dep,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT"
												+ " from emp_official_info as emp,reporting_group as rep,DEPARTMENT as dep,SUBDEPARTMENT as subdep where rep.grp_id=emp.Reporting_Grp and dep.DPTID=emp.DPTID"
												+ " and emp.SDPTID=subdep.SDPTID and emp.DPTID in ("+ACtualdept+") and emp.LOCID='"+help.getLocationId()+"' and subdep.SDPTID in ("+ACtualsubdept+") "
														+ "and ACTIVE = 1 group by emp.DPTID,dep.DPTSTXT,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT order by SDPTID";*/
										
									    ResultSet rsf=ad.selectQuery(abc1);
										//get last row no
										  String rowno="";
										  try {
											rsf.afterLast();
									
										if(rsf.previous())
										{
											rowno=rsf.getString("RowNum");
											   
										}
											} catch (SQLException e2) {
												// TODO Auto-generated catch block
												e2.printStackTrace();
											}
									    
										ResultSet rsabc= ad.selectQuery(abc1); 
										
								
										try {
											while(rsabc.next())
											{
												
												HRApprovalForm hr=new HRApprovalForm();
												
												if(!rsabc.getString("AREA").equalsIgnoreCase(subdptid) && chk==1)
												{
													HRApprovalForm hr1=new HRApprovalForm();
													
										
													hr1.setDepartment(subdptid);
													hr1.setLocationId("Sub");
												    hr1.setStaffapprstrength(substaffapprstrength);
													 hr1.setStaffavailstrength(substaffavailstrength);
													 hr1.setStaffpresent(substaffpresent);
													 hr1.setStaffabsent(substaffabsent);
													 hr1.setStaffsalary(substaffsalary);
													
													 hr1.setTechstaffapprstrength(subtechstaffapprstrength);
													 hr1.setTechstaffavailstrength(subtechstaffavailstrength);
													 hr1.setTechstaffpresent(subtechstaffpresent);
													 hr1.setTechstaffabsent(subtechstaffabsent);
													 hr1.setTechstaffsalary(subtechstaffsalary);
													
													
													 hr1.setApprenstaffapprstrength(subapprenstaffapprstrength);
													 hr1.setApprenstaffavailstrength(subapprenstaffavailstrength);
													 hr1.setApprenstaffpresent(subapprenstaffpresent);
													 hr1.setApprenstaffabsent(subapprenstaffabsent);
													 hr1.setApprenstaffsalary(subapprenstaffsalary);
													
													 hr1.setContractapprstrength(subcontractapprstrength);

													 hr1.setSkilledpresent(subskilledpresent);
													 hr1.setUnskilledpresent(subunskilledpresent);
													 hr1.setSemiskilledpresent(subsemiskilledpresent);
													 hr1.setSecuritypresent(subsecuritypresent);
													 hr1.setProjectspresent(subprojectspresent);
													 
													 hr1.setSkilledabsent(subskilledabsent);
													 hr1.setUnskilledabsent(subunskilledabsent);
													 hr1.setSemiskilledabsent(subsemiskilledabsent);
													 hr1.setSecurityabsent(subsecurityabsent);
													 hr1.setProjectsabsent(subprojectsabsent);
													
													
													 hr1.setTotcontractpresent(subtotcontractpresent);
													 hr1.setTotcontractabsent(subtotcontractabsent);
													 hr1.setTotcontractSalary(subtotcontractSalary);
													
													
													 hr1.setHouseapprstrength(subhouseapprstrength);	
													 hr1.setHousepresent(subhousepresent);
													 hr1.setHouseabsent(subhouseabsent);
													 hr1.setHousesalary(subhousesalary);
													
													 hr1.setTotpresent(subtotpresent);
													 hr1.setTotabsent(subtotabsent);
													 hr1.setTotsalary(subtotsalary);
													
													
													 hr1.setThreeapprstrength(subthreeapprstrength);	
													 hr1.setThreepresent(subthreepresent);
													 hr1.setThreeabsent(subthreeabsent);
													 hr1.setThreesalary(subthreesalary);
													
													 man.add(hr1);
													 
													 
													  substaffapprstrength=0;
													  substaffavailstrength=0;
													  substaffpresent=0;
													  substaffabsent=0;
													  substaffsalary=0;
													
													  subtechstaffapprstrength=0;
													  subtechstaffavailstrength=0;
													  subtechstaffpresent=0;
													  subtechstaffabsent=0;
													  subtechstaffsalary=0;
													
													
													  subapprenstaffapprstrength=0;
													  subapprenstaffavailstrength=0;
													  subapprenstaffpresent=0;
													  subapprenstaffabsent=0;
													  subapprenstaffsalary=0;
													
													  subcontractapprstrength=0;

													  subskilledpresent=0;
													  subunskilledpresent=0;
													  subsemiskilledpresent=0;
													  subsecuritypresent=0;
													  subprojectspresent=0;
													  
													  subskilledabsent=0;
													  subunskilledabsent=0;
													  subsemiskilledabsent=0;
													  subsecurityabsent=0;
													  subprojectsabsent=0;
													
													
													  subtotcontractpresent=0;
													  subtotcontractabsent=0;
													  subtotcontractSalary=0;
													
													
													  subhouseapprstrength=0;	
													  subhousepresent=0;
													  subhouseabsent=0;
													  subhousesalary=0;
													
													  subtotpresent=0;
													  subtotabsent=0;
													  subtotsalary=0;
													
													
													  subthreeapprstrength=0;	
													  subthreepresent=0;
													  subthreeabsent=0;
													  subthreesalary=0;
													
												}
												
												 int present1=0;
												 int present2=0;
												 int present3=0;
												 int present4=0;
												 int present5=0;
												 int present6=0;
												 int present7=0;
												 int present8=0;
												 int present9=0;
												 
												 int absent1=0;
												 int absent2=0;
												 int absent3=0;
												 int absent4=0;
												 int absent5=0;
												 int absent6=0;
												 int absent7=0;
												 int absent8=0;
												 int absent9=0;
												 
												 String empnos1="";
												 String empnos2="";
												 String empnos3="";
												 String empnos4="";
												 String empnos5="";
												 String empnos6="";
												 String empnos7="";
												 String empnos8="";
												 String empnos9="";
												 
												 
												 subdptid=rsabc.getString("AREA");
												 chk=1;
												 
													hr.setLocationId(help.getLocationId());
													hr.setDepartment(rsabc.getString("Description"));
													
													
															hr.setStaffapprstrength(rsabc.getInt("Staff"));
															hr.setTechstaffapprstrength(rsabc.getInt("Tech_Staff"));
															hr.setApprenstaffapprstrength(rsabc.getInt("Apprentice"));
															hr.setContractapprstrength(rsabc.getInt("Cont1"));
															hr.setHouseapprstrength(rsabc.getInt("cont2_house"));
														
														
														
														
												 
												 ///Staff/////////////////////////////////////////////////////////////////////////////
													//AVAILABLE
													String ava="select count(*) as availableStrength,dep.DPTSTXT as dep,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT,sum(emp.dptid) as  salary from emp_official_info as emp,reporting_group as rep,DEPARTMENT as dep,SUBDEPARTMENT as subdep where  rep.grp_id=emp.Reporting_Grp and dep.DPTID=emp.DPTID and emp.SDPTID=subdep.SDPTID  and emp.LOCID='"+help.getLocationId()+"' and subdep.SDPTID in ("+rsabc.getString("SDPTID")+") AND EMP.ACTIVE=1 AND Reporting_Grp=1  group by emp.DPTID,dep.DPTSTXT,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT";	
													ResultSet rsava= ad.selectQuery(ava); 
													if(rsava.next())
													{
														hr.setStaffavailstrength(rsava.getInt("availableStrength"));
														hr.setStaffsalary(0);
													}
													rsava.close();
														
													String query1="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master where Location.LOCATION_CODE=emp_official_info.LOCID and "
															+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'    and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (1)  and ACTIVE = 1";
													ResultSet rs4= ad.selectQuery(query1); 
													try {
														while(rs4.next())
														{
															empnos1=empnos1+","+rs4.getString("pernr");
														}
														if(!empnos1.equalsIgnoreCase(""))
														empnos1=empnos1.substring(1, empnos1.length());
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													rs4.close();
													
													for(int j=frmday;j<=today;j++)
													{
													if(!empnos1.equalsIgnoreCase(""))	
													{
												String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 and EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos1+") and (day"+j+" like '%PP%') and year='"+frmyear+"'";
												ResultSet ji= ad.selectQuery(tr); 
												
												
												try {
													if(ji.next())
													{
														present1=present1+ji.getInt(1);
													}
												} catch (SQLException e1) {
													// TODO Auto-generated catch block
													e1.printStackTrace();
												}
												ji.close();
													}
													}
												
													hr.setStaffpresent(present1);
													
													for(int j=frmday;j<=today;j++)
													{
													if(!empnos1.equalsIgnoreCase(""))	
													{
												String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 and EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos1+") and (day"+j+" not like '%PP%') and year='"+frmyear+"'";
												ResultSet ji= ad.selectQuery(tr); 
												
												
												try {
													if(ji.next())
													{
														absent1=absent1+ji.getInt(1);
													}
												} catch (SQLException e1) {
													// TODO Auto-generated catch block
													e1.printStackTrace();
												}
												ji.close();
													}
													}
												
													hr.setStaffabsent(absent1);
													
													
													
												
													//tech staff//////////////////////////////////////////////////////////////////////////////////////////
													
													//AVAILABLE
													String ava1="select count(*) as availableStrength,dep.DPTSTXT as dep,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT,sum(emp.dptid) as  salary from emp_official_info as emp,reporting_group as rep,DEPARTMENT as dep,SUBDEPARTMENT as subdep where  rep.grp_id=emp.Reporting_Grp and dep.DPTID=emp.DPTID and emp.SDPTID=subdep.SDPTID  and emp.LOCID='"+help.getLocationId()+"' and subdep.SDPTID in ("+rsabc.getString("SDPTID")+") AND EMP.ACTIVE=1 AND Reporting_Grp=2  group by emp.DPTID,dep.DPTSTXT,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT";	
													ResultSet rsava1= ad.selectQuery(ava1); 
													if(rsava1.next())
													{
														hr.setTechstaffavailstrength(rsava1.getInt("availableStrength"));
														hr.setTechstaffsalary(0);
													}
													rsava1.close();
												
													String query2="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master where Location.LOCATION_CODE=emp_official_info.LOCID and "
															+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'    and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (2)  and ACTIVE = 1";
													ResultSet rs44= ad.selectQuery(query2); 
													try {
														while(rs44.next())
														{
															empnos2=empnos2+","+rs44.getString("pernr");
														}
													
														if(!empnos2.equalsIgnoreCase(""))
														empnos2=empnos2.substring(1, empnos2.length());
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													rs44.close();
													
													for(int j=frmday;j<=today;j++)
													{
														if(!empnos2.equalsIgnoreCase(""))	
														{
													
												String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 and EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos2+") and (day"+j+" like '%PP%') and year='"+frmyear+"'";
												ResultSet ji= ad.selectQuery(tr); 
												try {
													if(ji.next())
													{
														present2=present2+ji.getInt(1);
													}
												} catch (SQLException e1) {
													// TODO Auto-generated catch block
													e1.printStackTrace();
												}
												ji.close();
												
													}}
													
                                                  hr.setTechstaffpresent(present2);
                                                  
                                                  for(int j=frmday;j<=today;j++)
													{
														if(!empnos2.equalsIgnoreCase(""))	
														{
													
												String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 and EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos2+") and (day"+j+" not like '%PP%') and year='"+frmyear+"'";
												ResultSet ji= ad.selectQuery(tr); 
												try {
													if(ji.next())
													{
														absent2=absent2+ji.getInt(1);
													}
												} catch (SQLException e1) {
													// TODO Auto-generated catch block
													e1.printStackTrace();
												}
												ji.close();
												
													}}
													
                                                hr.setTechstaffabsent(absent2);
												
													
												///Apprentice////////////////////////////////////////////////////////////////////////
													
                                                //AVAILABLE
													String ava2="select count(*) as availableStrength,dep.DPTSTXT as dep,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT,sum(emp.dptid) as  salary from emp_official_info as emp,reporting_group as rep,DEPARTMENT as dep,SUBDEPARTMENT as subdep where  rep.grp_id=emp.Reporting_Grp and dep.DPTID=emp.DPTID and emp.SDPTID=subdep.SDPTID  and emp.LOCID='"+help.getLocationId()+"' and subdep.SDPTID in ("+rsabc.getString("SDPTID")+") AND EMP.ACTIVE=1 AND Reporting_Grp=3  group by emp.DPTID,dep.DPTSTXT,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT";	
													ResultSet rsava2= ad.selectQuery(ava2); 
													if(rsava2.next())
													{
														hr.setApprenstaffavailstrength(rsava2.getInt("availableStrength"));
														hr.setApprenstaffsalary(0);
													}
														
													rsava2.close();
													String query3="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master where Location.LOCATION_CODE=emp_official_info.LOCID and "
															+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'   and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (3)  and ACTIVE = 1";
													ResultSet rs43= ad.selectQuery(query3); 
													try {
														while(rs43.next())
														{
															empnos3=empnos3+","+rs43.getString("pernr");
														}
														if(!empnos3.equalsIgnoreCase(""))
														empnos3=empnos3.substring(1, empnos3.length());
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													rs43.close();
													for(int j=frmday;j<=today;j++)
													{
														if(!empnos3.equalsIgnoreCase(""))	
														{	
												String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos3+") and (day"+j+" like '%PP%') and year='"+frmyear+"'";
												ResultSet ji= ad.selectQuery(tr); 
												try {
													if(ji.next())
													{
														present3=present3+ji.getInt(1);
													}
												} catch (SQLException e1) {
													// TODO Auto-generated catch block
													e1.printStackTrace();
												}ji.close();
												
													}
													}
												
													hr.setApprenstaffpresent(present3);
													
													for(int j=frmday;j<=today;j++)
													{
														if(!empnos3.equalsIgnoreCase(""))	
														{	
												String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos3+") and (day"+j+" not like '%PP%') and year='"+frmyear+"'";
												ResultSet ji= ad.selectQuery(tr); 
												try {
													if(ji.next())
													{
														absent3=absent3+ji.getInt(1);
													}
												} catch (SQLException e1) {
													// TODO Auto-generated catch block
													e1.printStackTrace();
												}ji.close();
												
													}
													}
												
													hr.setApprenstaffabsent(absent3);
													
													/////House keeping///////////////////////////////////////////////////////////////////////////////
												
														
														
													String query4="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master where Location.LOCATION_CODE=emp_official_info.LOCID and "
															+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'    and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (7)  and ACTIVE = 1";
													ResultSet rs5= ad.selectQuery(query4); 
													try {
														while(rs5.next())
														{
															empnos7=empnos7+","+rs5.getString("pernr");
														}
														if(!empnos7.equalsIgnoreCase(""))
														empnos7=empnos7.substring(1, empnos7.length());
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													rs5.close();
												
													for(int j=frmday;j<=today;j++)
													{
														if(!empnos7.equalsIgnoreCase(""))	
														{
													
												String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 and  EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos7+") and (day"+j+" like '%PP%') and year='"+frmyear+"'";
												ResultSet ji= ad.selectQuery(tr); 
												try {
													if(ji.next())
													{
														present7=present7+ji.getInt(1);
													}
												} catch (SQLException e1) {
													// TODO Auto-generated catch block
													e1.printStackTrace();
												}
												ji.close();
													}}
													
												
													hr.setHousepresent(present7);	
													
													for(int j=frmday;j<=today;j++)
													{
														if(!empnos7.equalsIgnoreCase(""))	
														{
													
												String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 and  EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos7+") and (day"+j+" not like '%PP%') and year='"+frmyear+"'";
												ResultSet ji= ad.selectQuery(tr); 
												try {
													if(ji.next())
													{
														absent7=absent7+ji.getInt(1);
													}
												} catch (SQLException e1) {
													// TODO Auto-generated catch block
													e1.printStackTrace();
												}
												ji.close();
													}}
													
												
													hr.setHouseabsent(absent7);
													
													
													///SKILLED
													if(ACtualrepgrp.contains("4"))
													{
														String query5="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master where Location.LOCATION_CODE=emp_official_info.LOCID and "
																+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'    and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (4)  and ACTIVE = 1";
														ResultSet rs6= ad.selectQuery(query5); 
														try {
															while(rs6.next())
															{
																empnos4=empnos4+","+rs6.getString("pernr");
															}
															if(!empnos4.equalsIgnoreCase(""))
															empnos4=empnos4.substring(1, empnos4.length());
														} catch (SQLException e1) {
															// TODO Auto-generated catch block
															e1.printStackTrace();
														}rs6.close();
													
														for(int j=frmday;j<=today;j++)
														{
															if(!empnos4.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 and  EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos4+") and (day"+j+" like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
															present4=present4+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
														}}
														
														
													
														hr.setSkilledpresent(present4);
														
														for(int j=frmday;j<=today;j++)
														{
															if(!empnos4.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 and  EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos4+") and (day"+j+" not like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
															absent4=absent4+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
														}}
														
														
													
														hr.setSkilledabsent(absent4);
														
														request.setAttribute("skilled", "skilled");
													}
													///SEMISKILLED	
													if(ACtualrepgrp.contains("6"))
													{
														String query6="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master where Location.LOCATION_CODE=emp_official_info.LOCID and "
																+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'    and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (6)  and ACTIVE = 1";
														ResultSet rs7= ad.selectQuery(query6); 
														try {
															while(rs7.next())
															{
																empnos5=empnos5+","+rs7.getString("pernr");
															}
															if(!empnos5.equalsIgnoreCase(""))
															empnos5=empnos5.substring(1, empnos5.length());
														} catch (SQLException e1) {
															// TODO Auto-generated catch block
															e1.printStackTrace();
														}
													rs7.close();
														for(int j=frmday;j<=today;j++)
														{
															if(!empnos5.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 and EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos5+") and (day"+j+" like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
															present5=present5+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
														}}
														
													
														hr.setSemiskilledpresent(present5);
														for(int j=frmday;j<=today;j++)
														{
															if(!empnos5.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 and EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos5+") and (day"+j+" not like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
															absent5=absent5+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
														}}
														
													
														hr.setSemiskilledabsent(absent5);
														
														request.setAttribute("semiskilled", "semiskilled");
													}
													
													///UNSKILLED	
													if(ACtualrepgrp.contains("5"))
													{
														String query7="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master where Location.LOCATION_CODE=emp_official_info.LOCID and "
																+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'    and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (5)  and ACTIVE = 1";
														ResultSet rs8= ad.selectQuery(query7); 
														try {
															while(rs8.next())
															{
																empnos6=empnos6+","+rs8.getString("pernr");
															}
															if(!empnos6.equalsIgnoreCase(""))
															empnos6=empnos6.substring(1, empnos6.length());
														} catch (SQLException e1) {
															// TODO Auto-generated catch block
															e1.printStackTrace();
														}
														rs8.close();
														for(int j=frmday;j<=today;j++)
														{
															if(!empnos6.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 and EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos6+") and (day"+j+" like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
															present6=present6+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
														}}
														
													
														hr.setUnskilledpresent(present6);
														for(int j=frmday;j<=today;j++)
														{
															if(!empnos6.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 and EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos6+") and (day"+j+" not like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
															absent6=absent6+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
														}}
														
													
														hr.setUnskilledabsent(absent6);
														
														request.setAttribute("unskilled", "unskilled");
														
														
													}
													///G4s
	
													if(ACtualrepgrp.contains("8"))
													{

														String query8="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master where Location.LOCATION_CODE=emp_official_info.LOCID and "
																+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'    and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (8)  and ACTIVE = 1";
														ResultSet rs9= ad.selectQuery(query8); 
														try {
															while(rs9.next())
															{
																empnos8=empnos8+","+rs9.getString("pernr");
															}
															if(!empnos8.equalsIgnoreCase(""))
															empnos8=empnos8.substring(1, empnos8.length());
														} catch (SQLException e1) {
															// TODO Auto-generated catch block
															e1.printStackTrace();
														}
													rs9.close();
														for(int j=frmday;j<=today;j++)
														{
															if(!empnos8.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 and EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos8+") and (day"+j+" like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
															present8=present8+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
													
														}}
														hr.setSecuritypresent(present8);
														
														for(int j=frmday;j<=today;j++)
														{
															if(!empnos8.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 and EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos8+") and (day"+j+" not like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
															absent8=absent8+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
													
														}}
														hr.setSecurityabsent(absent8);
														request.setAttribute("g4s", "g4s");
													}
													
													///projects
													
													if(ACtualrepgrp.contains("9"))
													{


														String query9="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master where Location.LOCATION_CODE=emp_official_info.LOCID and "
																+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'  and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (9)  and ACTIVE = 1";
														ResultSet rs10= ad.selectQuery(query9); 
														try {
															while(rs10.next())
															{
																empnos9=empnos9+","+rs10.getString("pernr");
															}
															if(!empnos9.equalsIgnoreCase(""))
															empnos9=empnos9.substring(1, empnos9.length());
														} catch (SQLException e1) {
															// TODO Auto-generated catch block
															e1.printStackTrace();
														}
														rs10.close();
														for(int j=frmday;j<=today;j++)
														{
														
															if(!empnos9.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 and EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos9+") and (day"+j+" like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
															present9=present9+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
														}}
														
														hr.setProjectspresent(present9);
														for(int j=frmday;j<=today;j++)
														{
														
															if(!empnos9.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 and EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos9+") and (day"+j+" not like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
														absent9=absent9+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
														}}
														
														hr.setProjectsabsent(absent9);
														
														request.setAttribute("project", "project");
													
													}
														
											   hr.setTotcontractpresent(present4+present5+present6+present8+present9);	
											   hr.setTotcontractabsent(absent4+absent5+absent6+absent8+absent9);
											   hr.setTotpresent(hr.getTotcontractpresent()+present1+present2+present3+present7);
											   hr.setTotabsent(hr.getTotcontractabsent()+absent1+absent2+absent3+absent7);
											   
											   hr.setThreeapprstrength(hr.getStaffapprstrength()+hr.getApprenstaffapprstrength()+hr.getTechstaffapprstrength());
											  
											   
											   hr.setThreepresent(present1+present2+present3);
											   hr.setThreeabsent(absent1+absent2+absent3);
											   hr.setThreesalary(hr.getStaffsalary()+hr.getTechstaffsalary()+hr.getApprenstaffsalary());
											   
												man.add(hr);
												
												
												//grnd
												  grnstaffapprstrength=grnstaffapprstrength+hr.getStaffapprstrength();
												  grnstaffavailstrength=grnstaffavailstrength+hr.getStaffavailstrength();
												  grnstaffpresent=grnstaffpresent+hr.getStaffpresent();
												  grnstaffabsent=grnstaffabsent+hr.getStaffabsent();
												  grnstaffsalary=grnstaffsalary+hr.getStaffsalary();
												
												  grntechstaffapprstrength=grntechstaffapprstrength+hr.getTechstaffapprstrength();
												  grntechstaffavailstrength=grntechstaffavailstrength+hr.getTechstaffavailstrength();
												  grntechstaffpresent=grntechstaffpresent+hr.getTechstaffpresent();
												  grntechstaffabsent=grntechstaffabsent+hr.getTechstaffabsent();
												  
												  grntechstaffsalary=grntechstaffsalary+hr.getTechstaffsalary();
												
												
												  grnapprenstaffapprstrength=grnapprenstaffapprstrength+hr.getApprenstaffapprstrength();
												  grnapprenstaffavailstrength=grnapprenstaffavailstrength+hr.getApprenstaffavailstrength();
												  grnapprenstaffpresent=grnapprenstaffpresent+hr.getApprenstaffpresent();
												  grnapprenstaffabsent=grnapprenstaffabsent+hr.getApprenstaffabsent();
												  grnapprenstaffsalary=grnapprenstaffsalary+hr.getApprenstaffsalary();
												
												  grncontractapprstrength=grncontractapprstrength+hr.getContractapprstrength();

												  grnskilledpresent=grnskilledpresent+hr.getSkilledpresent();
												  grnunskilledpresent=grnunskilledpresent+hr.getUnskilledpresent();
												  grnsemiskilledpresent=grnsemiskilledpresent+hr.getSemiskilledpresent();
												  grnsecuritypresent=grnsecuritypresent+hr.getSecuritypresent();
												  grnprojectspresent=grnprojectspresent+hr.getProjectspresent();
												
												  grnskilledabsent=grnskilledabsent+hr.getSkilledabsent();
												  grnunskilledabsent=grnunskilledabsent+hr.getUnskilledabsent();
												  grnsemiskilledabsent=grnsemiskilledabsent+hr.getSemiskilledabsent();
												  
												  grnsecurityabsent=grnsecurityabsent+hr.getSecurityabsent();
												  grnprojectsabsent=grnprojectsabsent+hr.getProjectsabsent();
												  
												  grntotcontractpresent=grntotcontractpresent+hr.getTotcontractpresent();
												  grntotcontractabsent=grntotcontractabsent+hr.getTotcontractabsent();
												  grntotcontractSalary=grntotcontractSalary+hr.getTotcontractSalary();
												
												
												  grnhouseapprstrength=grnhouseapprstrength+hr.getHouseapprstrength();	
												  grnhousepresent=grnhousepresent+hr.getHousepresent();
												  grnhouseabsent=grnhouseabsent+hr.getHouseabsent();
												  grnhousesalary=grnhousepresent+hr.getHousesalary();
												
												  grntotpresent=grntotpresent+hr.getTotpresent();
												  grntotabsent=grntotabsent+hr.getTotabsent();
												  grntotsalary=grntotsalary+hr.getTotsalary();
												
												
												  grnthreeapprstrength=grnthreeapprstrength+hr.getThreeapprstrength();	
												  grnthreepresent=grnthreepresent+hr.getThreepresent();
												  grnthreeabsent=grnthreeabsent+hr.getThreeabsent();
												  grnthreesalary=grnthreesalary+hr.getThreesalary();
												  
												  ///sub
												  
												  substaffapprstrength=substaffapprstrength+hr.getStaffapprstrength();
												  substaffavailstrength=substaffavailstrength+hr.getStaffavailstrength();
												  substaffpresent=substaffpresent+hr.getStaffpresent();
												 
												  substaffabsent=substaffabsent+hr.getStaffabsent();
												  substaffsalary=substaffsalary+hr.getStaffsalary();
												
												  subtechstaffapprstrength=subtechstaffapprstrength+hr.getTechstaffapprstrength();
												  subtechstaffavailstrength=subtechstaffavailstrength+hr.getTechstaffavailstrength();
												  subtechstaffpresent=subtechstaffpresent+hr.getTechstaffpresent();
												  subtechstaffabsent=subtechstaffabsent+hr.getTechstaffabsent();
												  subtechstaffsalary=subtechstaffsalary+hr.getTechstaffsalary();
												
												
												  subapprenstaffapprstrength=subapprenstaffapprstrength+hr.getApprenstaffapprstrength();
												  subapprenstaffavailstrength=subapprenstaffavailstrength+hr.getApprenstaffavailstrength();
												  subapprenstaffpresent=subapprenstaffpresent+hr.getApprenstaffpresent();
												  subapprenstaffabsent=subapprenstaffabsent+hr.getApprenstaffabsent();
												  subapprenstaffsalary=subapprenstaffsalary+hr.getApprenstaffsalary();
												
												  subcontractapprstrength=subcontractapprstrength+hr.getContractapprstrength();

												  subskilledpresent=subskilledpresent+hr.getSkilledpresent();
												  subunskilledpresent=subunskilledpresent+hr.getUnskilledpresent();
												  subsemiskilledpresent=subsemiskilledpresent+hr.getSemiskilledpresent();
												  subsecuritypresent=subsecuritypresent+hr.getSecuritypresent();
												  subprojectspresent=subprojectspresent+hr.getProjectspresent();
												
												  subskilledabsent=subskilledabsent+hr.getSkilledabsent();
												  subunskilledabsent=subunskilledabsent+hr.getUnskilledabsent();
												  subsemiskilledabsent=subsemiskilledabsent+hr.getSemiskilledabsent();
												  subsecurityabsent=subsecurityabsent+hr.getSecurityabsent();
												  subprojectsabsent=subprojectsabsent+hr.getProjectsabsent();
												
												  
												  subtotcontractpresent=subtotcontractpresent+hr.getTotcontractpresent();
												  subtotcontractabsent=subtotcontractabsent+hr.getTotcontractabsent();
													
												  subtotcontractSalary=subtotcontractSalary+hr.getTotcontractSalary();
												
												
												  subhouseapprstrength=subhouseapprstrength+hr.getHouseapprstrength();	
												  subhousepresent=subhousepresent+hr.getHousepresent();
												  subhouseabsent=subhouseabsent+hr.getHouseabsent();
												  subhousesalary=subhousepresent+hr.getHousesalary();
												
												  subtotpresent=subtotpresent+hr.getTotpresent();
												  subtotabsent=subtotabsent+hr.getTotabsent();
												  subtotsalary=subtotsalary+hr.getTotsalary();
												
												
												  subthreeapprstrength=subthreeapprstrength+hr.getThreeapprstrength();	
												  subthreepresent=subthreepresent+hr.getThreepresent();
												  subthreeabsent=subthreeabsent+hr.getThreeabsent();
												  subthreesalary=subthreesalary+hr.getThreesalary();
												  
												  if(rowno.equalsIgnoreCase(rsabc.getString("RowNum"))) 
												  {
													  HRApprovalForm hr2=new HRApprovalForm();
														
														
														hr2.setDepartment(subdptid);
														hr2.setLocationId("Sub");
														
														hr2.setStaffapprstrength(substaffapprstrength);
														 hr2.setStaffavailstrength(substaffavailstrength);
														 hr2.setStaffpresent(substaffpresent);
														 hr2.setStaffabsent(substaffabsent);
														 hr2.setStaffsalary(substaffsalary);
														
														 hr2.setTechstaffapprstrength(subtechstaffapprstrength);
														 hr2.setTechstaffavailstrength(subtechstaffavailstrength);
														 hr2.setTechstaffpresent(subtechstaffpresent);
														 hr2.setTechstaffabsent(subtechstaffabsent);
														 hr2.setTechstaffsalary(subtechstaffsalary);
														
														
														 hr2.setApprenstaffapprstrength(subapprenstaffapprstrength);
														 hr2.setApprenstaffavailstrength(subapprenstaffavailstrength);
														 hr2.setApprenstaffpresent(subapprenstaffpresent);
														 hr2.setApprenstaffabsent(subapprenstaffabsent);
														 hr2.setApprenstaffsalary(subapprenstaffsalary);
														
														 hr2.setContractapprstrength(subcontractapprstrength);

														 hr2.setSkilledpresent(subskilledpresent);
														 hr2.setUnskilledpresent(subunskilledpresent);
														 hr2.setSemiskilledpresent(subsemiskilledpresent);
														 hr2.setSecuritypresent(subsecuritypresent);
														 hr2.setProjectspresent(subprojectspresent);
														 
														 hr2.setSkilledabsent(subskilledabsent);
														 hr2.setUnskilledabsent(subunskilledabsent);
														 hr2.setSemiskilledabsent(subsemiskilledabsent);
														 hr2.setSecurityabsent(subsecurityabsent);
														 hr2.setProjectsabsent(subprojectsabsent);
														
														
														 hr2.setTotcontractpresent(subtotcontractpresent);
														 hr2.setTotcontractSalary(subtotcontractSalary);
														
														
														 hr2.setHouseapprstrength(subhouseapprstrength);	
														 hr2.setHousepresent(subhousepresent);
														 hr2.setHouseabsent(subhouseabsent);
														 hr2.setHousesalary(subhousesalary);
														
														 hr2.setTotpresent(subtotpresent);
														 hr2.setTotabsent(subtotabsent);
														 hr2.setTotsalary(subtotsalary);
														
														
														 hr2.setThreeapprstrength(subthreeapprstrength);	
														 hr2.setThreepresent(subthreepresent);
														 hr2.setThreeabsent(subthreeabsent);
														 hr2.setThreesalary(subthreesalary);
														
														 man.add(hr2);
														
												  }
												
												
											}
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										
										//last subtotla
										
										
										
										
										
										//
										
										
                                        help.setGrnstaffapprstrength(grnstaffapprstrength);
										 help.setGrnstaffavailstrength(grnstaffavailstrength);
										 help.setGrnstaffpresent(grnstaffpresent);
										 help.setGrnstaffabsent(grnstaffabsent);
										 help.setGrnstaffsalary(grnstaffsalary);
										
										 help.setGrntechstaffapprstrength(grntechstaffapprstrength);
										 help.setGrntechstaffavailstrength(grntechstaffavailstrength);
										 help.setGrntechstaffpresent(grntechstaffpresent);
										 help.setGrntechstaffabsent(grntechstaffabsent);
										 help.setGrntechstaffsalary(grntechstaffsalary);
										
										
										 help.setGrnapprenstaffapprstrength(grnapprenstaffapprstrength);
										 help.setGrnapprenstaffavailstrength(grnapprenstaffavailstrength);
										 help.setGrnapprenstaffpresent(grnapprenstaffpresent);
										 help.setGrnapprenstaffabsent(grnapprenstaffabsent);
										 help.setGrnapprenstaffsalary(grnapprenstaffsalary);
										
										 help.setGrncontractapprstrength(grncontractapprstrength);

										 help.setGrnskilledpresent(grnskilledpresent);
										 help.setGrnunskilledpresent(grnunskilledpresent);
										 help.setGrnsemiskilledpresent(grnsemiskilledpresent);
										 help.setGrnsecuritypresent(grnsecuritypresent);
										 help.setGrnprojectspresent(grnprojectspresent);
										
										 help.setGrnskilledabsent(grnskilledabsent);
										 help.setGrnunskilledabsent(grnunskilledabsent);
										 help.setGrnsemiskilledabsent(grnsemiskilledabsent);
										 help.setGrnsecurityabsent(grnsecurityabsent);
										 help.setGrnprojectsabsent(grnprojectsabsent);
										
										 help.setGrntotcontractpresent(grntotcontractpresent);
										 help.setGrntotcontractabsent(grntotcontractabsent);
										 help.setGrntotcontractSalary(grntotcontractSalary);
										
										
										 help.setGrnhouseapprstrength(grnhouseapprstrength);	
										 help.setGrnhousepresent(grnhousepresent);
										 help.setGrnhouseabsent(grnhouseabsent);
										 help.setGrnhousesalary(grnhousesalary);
										
										 help.setGrntotpresent(grntotpresent);
										 help.setGrntotabsent(grntotabsent);
										 help.setGrntotsalary(grntotsalary);
										
										
										 help.setGrnthreeapprstrength(grnthreeapprstrength);	
										 help.setGrnthreepresent(grnthreepresent);
										 help.setGrnthreeabsent(grnthreeabsent);
										 help.setGrnthreesalary(grnthreesalary);
										
								
										request.setAttribute("man", man);
										
										
										if(man.size()==0)
										{
											request.setAttribute("nolist", "nolist");	
										}
	 
				
				request.setAttribute("result", "result");
				
				try {
					rsabc.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				try {
					rscat.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rsf.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
 }
									    
									    else
									    	
									    	
									    {
									    	
									    	String actualpay=help.getPaygrp();
									    	String st="";
									    	ArrayList depman=new ArrayList();
									    	if(!actualpay.equalsIgnoreCase(""))
									    	{
									    	String pay=" select Short_desc from Paygroup_Master where Paygroup="+actualpay+" ";
									    	ResultSet bpay=ad.selectQuery(pay);
									    	try {
												if(bpay.next()){
													help.setPaygrp(bpay.getString("Short_desc"));
												}
											} catch (SQLException e1) {
												// TODO Auto-generated catch block
												e1.printStackTrace();
											}
									    	
									    	
									    	
									    	 st="  select  sum(case when  STAFFCAT=7   then 1 else 0 end )  as factorystaffavailable,  "
		+ " sum(case when day"+frmday+" like '%PP%' and STAFFCAT=7   then 1 else 0 end ) as factorystaffpresent, "
		+ "  sum(case when  STAFFCAT=3   then 1 else 0 end )  as workersavailable,      sum(case when day"+frmday+" like '%PP%' and STAFFCAT=3   then 1 else 0 end ) "
		+ "as workerspresent,	  (sum(case when  STAFFCAT=7   then 1 else 0 end )+sum(case when  STAFFCAT=3   then 1 else 0 end ) ) as"
		+ " totalavlable,(sum(case when day"+frmday+" like '%PP%' and STAFFCAT=7   then 1 else 0 end )+sum(case when day"+frmday+" like '%PP%' and STAFFCAT=3   then 1 else 0 end )) "
		+ "as totalpresent  , emp.dptid,DEPARTMENT.dptstxt    from EMP_IN_OUT_Status  ,emp_official_info as emp,department where "
		+ "EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and  year='"+frmyear+"' and emp.LOCID='"+help.getLocationId()+"'"
				+ " and EMP.ACTIVE=1 AND STAFFCAT in (3,7) and PAY_GROUP='"+actualpay+"' and department.dptid=emp.dptid group by emp.dptid,DEPARTMENT.dptstxt "
				+ "union "
				+"  select  sum(case when  STAFFCAT=7   then 1 else 0 end )  as factorystaffavailable,  "
				+ " sum(case when day"+frmday+" like '%PP%' and STAFFCAT=7   then 1 else 0 end ) as factorystaffpresent, "
				+ "  sum(case when  STAFFCAT=3   then 1 else 0 end )  as workersavailable,      sum(case when day"+frmday+" like '%PP%' and STAFFCAT=3   then 1 else 0 end ) "
				+ "as workerspresent,	  (sum(case when  STAFFCAT=7   then 1 else 0 end )+sum(case when  STAFFCAT=3   then 1 else 0 end ) ) as"
				+ " totalavlable,(sum(case when day"+frmday+" like '%PP%' and STAFFCAT=7   then 1 else 0 end )+sum(case when day"+frmday+" like '%PP%' and STAFFCAT=3   then 1 else 0 end )) "
				+ "as totalpresent  , '',''    from EMP_IN_OUT_Status  ,emp_official_info as emp,department where "
				+ "EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and  year='"+frmyear+"' and emp.LOCID='"+help.getLocationId()+"'"
						+ " and EMP.ACTIVE=1 AND STAFFCAT in (3,7)  and PAY_GROUP='"+actualpay+"' and department.dptid=emp.dptid  ";
									    	
									    	}
									    	
									    	else
									    	{
									    		
									    	
										    	 st="  select  sum(case when  STAFFCAT=7   then 1 else 0 end )  as factorystaffavailable,  "
			+ " sum(case when day"+frmday+" like '%PP%' and STAFFCAT=7   then 1 else 0 end ) as factorystaffpresent, "
			+ "  sum(case when  STAFFCAT=3   then 1 else 0 end )  as workersavailable,      sum(case when day"+frmday+" like '%PP%' and STAFFCAT=3   then 1 else 0 end ) "
			+ "as workerspresent,	  (sum(case when  STAFFCAT=7   then 1 else 0 end )+sum(case when  STAFFCAT=3   then 1 else 0 end ) ) as"
			+ " totalavlable,(sum(case when day"+frmday+" like '%PP%' and STAFFCAT=7   then 1 else 0 end )+sum(case when day"+frmday+" like '%PP%' and STAFFCAT=3   then 1 else 0 end )) "
			+ "as totalpresent  , emp.dptid,DEPARTMENT.dptstxt    from EMP_IN_OUT_Status  ,emp_official_info as emp,department where "
			+ "EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and  year='"+frmyear+"' and emp.LOCID='"+help.getLocationId()+"'"
					+ " and EMP.ACTIVE=1 AND STAFFCAT in (3,7)  and department.dptid=emp.dptid group by emp.dptid,DEPARTMENT.dptstxt "
					+ "union "
					+"  select  sum(case when  STAFFCAT=7   then 1 else 0 end )  as factorystaffavailable,  "
					+ " sum(case when day"+frmday+" like '%PP%' and STAFFCAT=7   then 1 else 0 end ) as factorystaffpresent, "
					+ "  sum(case when  STAFFCAT=3   then 1 else 0 end )  as workersavailable,      sum(case when day"+frmday+" like '%PP%' and STAFFCAT=3   then 1 else 0 end ) "
					+ "as workerspresent,	  (sum(case when  STAFFCAT=7   then 1 else 0 end )+sum(case when  STAFFCAT=3   then 1 else 0 end ) ) as"
					+ " totalavlable,(sum(case when day"+frmday+" like '%PP%' and STAFFCAT=7   then 1 else 0 end )+sum(case when day"+frmday+" like '%PP%' and STAFFCAT=3   then 1 else 0 end )) "
					+ "as totalpresent  , '',''    from EMP_IN_OUT_Status  ,emp_official_info as emp,department where "
					+ "EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and  year='"+frmyear+"' and emp.LOCID='"+help.getLocationId()+"'"
							+ " and EMP.ACTIVE=1 AND STAFFCAT in (3,7)   and department.dptid=emp.dptid  ";
									    		
									    	}
									    	ResultSet h=ad.selectQuery(st);
									    	
									    	try {
												while(h.next())
												{
													HRApprovalForm hr=new HRApprovalForm();
													hr.setDepartment(h.getString("dptstxt"));
													hr.setStaffavailstrength(h.getInt("factorystaffavailable"));
													hr.setStaffpresent(h.getInt("factorystaffpresent"));
													hr.setTechstaffavailstrength(h.getInt("workersavailable"));
													hr.setTechstaffpresent(h.getInt("workerspresent"));
													hr.setTotalRecords(h.getInt("totalavlable"));
													hr.setTotpresent(h.getInt("totalpresent"));
													
													depman.add(hr);
												}
											} catch (SQLException e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
									    	
									    	
									    	
									    	if(depman.size()>0)
									    		request.setAttribute("depman", depman);
									    	else
									    		request.setAttribute("nodepman", "nodepman");
									    }
			
				try {
					rs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					reprs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}try {
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					cc.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					subrs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs115.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return mapping.findForward("exportmanpowerreport");	
	
	}
	
	public ActionForward exportDaywisemanpowerreport(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
		
		Calendar mycal = Calendar.getInstance();
		help.setFrommonth(Integer.toString(mycal.get(Calendar.MONTH) + 1));
		
		
		Date dNow = new Date( );
		SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd");
		String exportdate=ft.format(dNow);

		response.setHeader("Content-Disposition", "inline; filename="+exportdate+"_Manpower_Report.xls");
		
		
		ArrayList shiftList=new ArrayList();
		ArrayList shiftLabelList=new ArrayList();
		ResultSet rs115 = ad.selectQuery("select shift_code," +
				"Shift_Name from EMP_SHIFT_MASTER order by Shift_Name"); 
				try {
					while(rs115.next()) {
						shiftList.add(rs115.getString("shift_code"));
						shiftLabelList.add(rs115.getString("Shift_Name"));
					}
					rs115.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setShiftList(shiftList);
				help.setShiftLabelList(shiftLabelList);
		
				String cmpcode="";
				int id=user.getGroupId();
				String cmp[]=new String[0]; 
				String locations="";
				
				String aa="select * from user_group where id='"+id+"'";
				ResultSet cc=ad.selectQuery(aa);
				try {
					if(cc.next())
					{
						cmpcode=cc.getString("Attendance_Loc");
						
						if(cmpcode.contains(","))
						{
						 cmp=cmpcode.split(",");
						
						for(int b=0;b<cmp.length;b++)
						{
							locations=locations+"'"+cmp[b]+"',";
						}
						
						locations=locations.substring(0, locations.length()-1);
						}
						else
						{
							locations="'"+cmpcode+"'";
						}
					}
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
		
		
		   ArrayList locationList=new ArrayList();
					ArrayList locationLabelList=new ArrayList();
					ResultSet rs11 = ad.selectQuery("select LOCID," +
							"LOCNAME,location_code from location where location_code in ("+locations+") "); 
							try {
								while(rs11.next()) {
									locationList.add(rs11.getString("location_code"));
									locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
									
								}
								rs11.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							help.setLocationIdList(locationList);
							help.setLocationLabelList(locationLabelList);
	
		
	
		
					
	
				ArrayList deptList=new ArrayList();
				ArrayList deptLabelList=new ArrayList();
				ResultSet rs15 = ad.selectQuery("select dptid," +
						"DPTLTXT from DEPARTMENT order by DPTLTXT"); 
						try {
							while(rs15.next()) {
								deptList.add(rs15.getString("dptid"));
								deptLabelList.add(rs15.getString("DPTLTXT"));
							}
							rs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						help.setDeptList(deptList);
						help.setDeptLabelList(deptLabelList);
						
						//subdep
						ArrayList subdeptList=new ArrayList();
						ArrayList subdeptLabelList=new ArrayList();
						ResultSet subrs15 = ad.selectQuery("select SDPTID," +
								"SDPTID_LTXT from SUBDEPARTMENT order by SDPTID_LTXT "); 
								try {
									while(subrs15.next()) {
										subdeptList.add(subrs15.getString("SDPTID"));
										subdeptLabelList.add(subrs15.getString("SDPTID_LTXT"));
									}
									subrs15.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								
								help.setSubdeptList(subdeptList);
								help.setSubdeptLabelList(subdeptLabelList);
								
								//repgrp
								ArrayList repgrptList=new ArrayList();
								ArrayList repgrpLabelList=new ArrayList();
								ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
										"Grp_LTXT from REPORTING_GROUP where  Grp_ID not in(1,2,3,7)"); 
										try {
											while(reprs15.next()) {
												repgrptList.add(reprs15.getString("Grp_ID"));
												repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
											}
											reprs15.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										
										help.setRepgrpList(repgrptList);
										help.setRepgrpLabelList(repgrpLabelList);
										
										
								
										//dept
										String ACtualdept="";
									    if(help.getDeptArray()!=null)
									    {	
									    String[] dept = help.getDeptArray();
									    
									    StringBuffer reqdept = new StringBuffer();
										for (int i = 0; i < dept.length; i++) {
											reqdept.append("'"+dept[i]+"'" + ",");
										}
										 ACtualdept= reqdept.substring(0, reqdept.length() - 1).toString();
									    }
										
									    
									    //subdept
									    
									    String ACtualsubdept="";
									    if(help.getSubdeptArray()!=null)
									    {	
									    String[] subdept = help.getSubdeptArray();
									    
									    StringBuffer reqsubdept = new StringBuffer();
										for (int i = 0; i < subdept.length; i++) {
											reqsubdept.append("'"+subdept[i]+"'" + ",");
										}
										ACtualsubdept= reqsubdept.substring(0, reqsubdept.length() - 1).toString();
									    }
									    
                                        //reporting
									    
									    String ACtualrepgrp="";
									    if(help.getRepgrpArray()!=null)
									    {	
									    String[] repgrp = help.getRepgrpArray();
									    
									    StringBuffer reqrepgrp = new StringBuffer();
										for (int i = 0; i < repgrp.length; i++) {
											reqrepgrp.append("'"+repgrp[i]+"'" + ",");
										}
										ACtualrepgrp= reqrepgrp.substring(0, reqrepgrp.length() - 1).toString();
									    }
									    
										 int staffapprstrength=0;
										 int staffavailstrength=0;
										 int staffpresent=0;
										 int staffabsent=0;
										 float staffsalary=0;
										
										 int techstaffapprstrength=0;
										 int techstaffavailstrength=0;
										 int techstaffpresent=0;
										 int techstaffabsent=0;
										 float techstaffsalary=0;
										
										
										 int apprenstaffapprstrength=0;
										 int apprenstaffavailstrength=0;
										 int apprenstaffpresent=0;
										 int apprenstaffabsent=0;
										 float apprenstaffsalary=0;
										
										 int contractapprstrength=0;

										/* int skilledpresent=0;
										 int unskilledpresent=0;
										 int semiskilledpresent=0;
										 int securitypresent=0;
										 int projectspresent=0;*/
										 int skilledpresent=0;
										 int skilledabsent=0;
										 int unskilledpresent=0;
										 int unskilledabsent=0;
										 int semiskilledpresent=0;
										 int semiskilledabsent=0;
										 int securitypresent=0;
										 int securityabsent=0;
										 int projectspresent=0;
										 int projectsabsent=0;
										
										 int totcontractpresent=0;
										 int totcontractSalary=0;
										
										
										 int houseapprstrength=0;	
										 int housepresent=0;
										 float housesalary=0;
										
										 int totpresent=0;
										 float totsalary=0;
										
										
										 int threeapprstrength=0;	
										 int threepresent=0;
										 float threesalary=0;
										
										///grand
										
										 int grnstaffapprstrength=0;
										 int grnstaffavailstrength=0;
										 int grnstaffpresent=0;
										 int grnstaffabsent=0;
										 float grnstaffsalary=0;
										
										 int grntechstaffapprstrength=0;
										 int grntechstaffavailstrength=0;
										 int grntechstaffpresent=0;
										 int grntechstaffabsent=0;
										 float grntechstaffsalary=0;
										
										
										 int grnapprenstaffapprstrength=0;
										 int grnapprenstaffavailstrength=0;
										 int grnapprenstaffpresent=0;
										 int grnapprenstaffabsent=0;
										 float grnapprenstaffsalary=0;
										
										 int grncontractapprstrength=0;

										 int grnskilledpresent=0;
										 int grnunskilledpresent=0;
										 int grnsemiskilledpresent=0;
										 int grnsecuritypresent=0;
										 int grnprojectspresent=0;
										
										 int grnskilledabsent=0;
										 int grnunskilledabsent=0;
										 int grnsemiskilledabsent=0;
										 int grnsecurityabsent=0;
										 int grnprojectsabsent=0;
										 
										 int grntotcontractpresent=0;
										 int grntotcontractSalary=0;
										
										
										 int grnhouseapprstrength=0;	
										 int grnhousepresent=0;
										 float grnhousesalary=0;
										
										 int grntotpresent=0;
										 float grntotsalary=0;
										
										
										 int grnthreeapprstrength=0;	
										 int grnthreepresent=0;
										 float grnthreesalary=0;
										 
										 
										 //subtotal
										 
											
										 int substaffapprstrength=0;
										 int substaffavailstrength=0;
										 int substaffpresent=0;
										 int substaffabsent=0;
										 float substaffsalary=0;
										
										 int subtechstaffapprstrength=0;
										 int subtechstaffavailstrength=0;
										 int subtechstaffpresent=0;
										 int subtechstaffabsent=0;
										 float subtechstaffsalary=0;
										
										
										 int subapprenstaffapprstrength=0;
										 int subapprenstaffavailstrength=0;
										 int subapprenstaffpresent=0;
										 int subapprenstaffabsent=0;
										 float subapprenstaffsalary=0;
										
										 int subcontractapprstrength=0;

										/* int subskilledpresent=0;
										 int subunskilledpresent=0;
										 int subsemiskilledpresent=0;
										 int subsecuritypresent=0;
										 int subprojectspresent=0;
										*/
										 int subskilledpresent=0;
										 int subskilledabsent=0;
										 
										 int subunskilledpresent=0;
										 int subunskilledabsent=0;
													 
										 int subsemiskilledpresent=0;
										 int subsemiskilledabsent=0;
																				
										 int subsecuritypresent=0;
										 int subsecurityabsent=0;
														 
										int subprojectspresent=0;
										int subprojectsabsent=0;

										
										 int subtotcontractpresent=0;
										 int subtotcontractSalary=0;
										
										
										 int subhouseapprstrength=0;	
										 int subhousepresent=0;
										 float subhousesalary=0;
										
										 int subtotpresent=0;
										 float subtotsalary=0;
										
										
										 int subthreeapprstrength=0;	
										 int subthreepresent=0;
										 float subthreesalary=0;
										
								
									    LinkedList man=new LinkedList();
									    
									    int frmday=0;
									    int today=0;
									    int frmmon=0;
									    int tomon=0;
									    int frmyear=0;
									    int toyear=0;
									    
									    String fromdate=help.getFromDate();
									    String todate=help.getToDate();
									    
									    String from[]=fromdate.split("/");
									    frmday=Integer.parseInt(from[0]);
									    frmmon=Integer.parseInt(from[1]);
									    frmyear=Integer.parseInt(from[2]);
									    
									    String to[]=todate.split("/");
									    today=Integer.parseInt(to[0]);
									    tomon=Integer.parseInt(to[1]);
									    toyear=Integer.parseInt(to[2]);
									    
									    String subdptid="";
									    
									    
									    int chk=0;
									    
									    String ACtualshift =request.getParameter("shift");
										   try{ 
										    String shif="select * from EMP_SHIFT_MASTER where Shift_code='"+ACtualshift+"'";
										    ResultSet rshif= ad.selectQuery(shif); 
										    if(rshif.next())
											{
												help.setShift(rshif.getString("Shift_Name"));
												
											}
											rshif.close();
										} catch (SQLException e1) {
								// TODO Auto-generated catch block
								e1.printStackTrace();
									}		
										 /*   help.setShift(request.getParameter("shift"));*/

									    
									    if(!ACtualsubdept.equalsIgnoreCase(""))
									    {
									    
									    //
									    String catdesc=" select * from REPORTING_GROUP where Grp_ID in ("+ACtualrepgrp+")";
									   
										 ResultSet rscat=ad.selectQuery(catdesc);
										 LinkedList categorylist=new LinkedList();
										 String reqrcateg="";
										 try {
											while (rscat.next()) 
											  {
												 HRApprovalForm m1=new HRApprovalForm(); 
												 m1.setRepgrp(rscat.getString("Grp_STXT"));
												 categorylist.add(m1);
											  }
										} catch (SQLException e3) {
											// TODO Auto-generated catch block
											e3.printStackTrace();
										}
										request.setAttribute("categorylist", categorylist);
									    
									    
									    String abc1="select * From (SELECT ROW_NUMBER() OVER(ORDER BY  APPROVED_STRENGTH.Area) AS RowNum,*,id as SDPTID from APPROVED_STRENGTH where plant='"+help.getLocationId()+"' and id in ("+ACtualsubdept+"))as sub order by id";
									    
										/*String abc="select dep.DPTSTXT as dep,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT"
												+ " from emp_official_info as emp,reporting_group as rep,DEPARTMENT as dep,SUBDEPARTMENT as subdep where rep.grp_id=emp.Reporting_Grp and dep.DPTID=emp.DPTID"
												+ " and emp.SDPTID=subdep.SDPTID and emp.DPTID in ("+ACtualdept+") and emp.LOCID='"+help.getLocationId()+"' and subdep.SDPTID in ("+ACtualsubdept+") "
														+ "and ACTIVE = 1 group by emp.DPTID,dep.DPTSTXT,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT order by SDPTID";*/
										
									    ResultSet rsf=ad.selectQuery(abc1);
										//get last row no
										  String rowno="";
										  try {
											rsf.afterLast();
									
										if(rsf.previous())
										{
											rowno=rsf.getString("RowNum");
											   
										}
											} catch (SQLException e2) {
												// TODO Auto-generated catch block
												e2.printStackTrace();
											}
									    
										ResultSet rsabc= ad.selectQuery(abc1); 
										
								
										try {
											while(rsabc.next())
											{
												
												HRApprovalForm hr=new HRApprovalForm();
												
												if(!rsabc.getString("AREA").equalsIgnoreCase(subdptid) && chk==1)
												{
													HRApprovalForm hr1=new HRApprovalForm();
													
										
													hr1.setDepartment(subdptid);
													hr1.setLocationId("Sub");
												    hr1.setStaffapprstrength(substaffapprstrength);
													 hr1.setStaffavailstrength(substaffavailstrength);
													 hr1.setStaffpresent(substaffpresent);
													 hr1.setStaffabsent(substaffabsent);
													 hr1.setStaffsalary(substaffsalary);
													
													 hr1.setTechstaffapprstrength(subtechstaffapprstrength);
													 hr1.setTechstaffavailstrength(subtechstaffavailstrength);
													 hr1.setTechstaffpresent(subtechstaffpresent);
													 hr1.setTechstaffabsent(subtechstaffabsent);
													 hr1.setTechstaffsalary(subtechstaffsalary);
													
													
													 hr1.setApprenstaffapprstrength(subapprenstaffapprstrength);
													 hr1.setApprenstaffavailstrength(subapprenstaffavailstrength);
													 hr1.setApprenstaffpresent(subapprenstaffpresent);
													 hr1.setApprenstaffabsent(subapprenstaffabsent);
													 hr1.setApprenstaffsalary(subapprenstaffsalary);
													
													 hr1.setContractapprstrength(subcontractapprstrength);

													 hr1.setSkilledpresent(subskilledpresent);
													 hr1.setUnskilledpresent(subunskilledpresent);
													 hr1.setSemiskilledpresent(subsemiskilledpresent);
													 hr1.setSecuritypresent(subsecuritypresent);
													 hr1.setProjectspresent(subprojectspresent);
													
													 hr1.setSkilledabsent(subskilledabsent);
													 hr1.setUnskilledabsent(subunskilledabsent);
													 hr1.setSemiskilledabsent(subsemiskilledabsent);
													 hr1.setSecurityabsent(subsecurityabsent);
													 hr1.setProjectsabsent(subprojectsabsent);
													
													 hr1.setTotcontractpresent(subtotcontractpresent);
													 hr1.setTotcontractSalary(subtotcontractSalary);
													
													
													 hr1.setHouseapprstrength(subhouseapprstrength);	
													 hr1.setHousepresent(subhousepresent);
													 hr1.setHousesalary(subhousesalary);
													
													 hr1.setTotpresent(subtotpresent);
													 hr1.setTotsalary(subtotsalary);
													
													
													 hr1.setThreeapprstrength(subthreeapprstrength);	
													 hr1.setThreepresent(subthreepresent);
													 hr1.setThreesalary(subthreesalary);
													
													 man.add(hr1);
													 
													 
													  substaffapprstrength=0;
													  substaffavailstrength=0;
													  substaffpresent=0;
													  substaffabsent=0;
													  substaffsalary=0;
													
													  subtechstaffapprstrength=0;
													  subtechstaffavailstrength=0;
													  subtechstaffpresent=0;
													  subtechstaffabsent=0;
													  subtechstaffsalary=0;
													
													
													  subapprenstaffapprstrength=0;
													  subapprenstaffavailstrength=0;
													  subapprenstaffpresent=0;
													  subapprenstaffabsent=0;
													  subapprenstaffsalary=0;
													
													  subcontractapprstrength=0;

													  subskilledpresent=0;
													  subunskilledpresent=0;
													  subsemiskilledpresent=0;
													  subsecuritypresent=0;
													  subprojectspresent=0;
													
													  subskilledabsent=0;
													  subskilledabsent=0;
													  subunskilledabsent=0;
													  subsemiskilledabsent=0;
													  subsecurityabsent=0;
													  subprojectsabsent=0;	
													
													  subtotcontractpresent=0;
													  subtotcontractSalary=0;
													
													
													  subhouseapprstrength=0;	
													  subhousepresent=0;
													  subhousesalary=0;
													
													  subtotpresent=0;
													  subtotsalary=0;
													
													
													  subthreeapprstrength=0;	
													  subthreepresent=0;
													  subthreesalary=0;
													
												}
												
												 int present1=0;
												 int present2=0;
												 int present3=0;
												 int present4=0;
												 int present5=0;
												 int present6=0;
												 int present7=0;
												 int present8=0;
												 int present9=0;
												 int absent1=0;
												 int absent2=0;
												 int absent3=0;
												 int absent4=0;
												 int absent5=0;
												 int absent6=0;
												 int absent7=0;
												 int absent8=0;
												 int absent9=0;
												 String empnos1="";
												 String empnos2="";
												 String empnos3="";
												 String empnos4="";
												 String empnos5="";
												 String empnos6="";
												 String empnos7="";
												 String empnos8="";
												 String empnos9="";
												 
												 
												 subdptid=rsabc.getString("AREA");
												 chk=1;
												 
													hr.setLocationId(help.getLocationId());
													hr.setDepartment(rsabc.getString("Description"));
													
													
															hr.setStaffapprstrength(rsabc.getInt("Staff"));
															hr.setTechstaffapprstrength(rsabc.getInt("Tech_Staff"));
															hr.setApprenstaffapprstrength(rsabc.getInt("Apprentice"));
															hr.setContractapprstrength(rsabc.getInt("Cont1"));
															hr.setHouseapprstrength(rsabc.getInt("cont2_house"));
														
														
														
														
												 
												 ///Staff/////////////////////////////////////////////////////////////////////////////
													//AVAILABLE
													/*String ava="select count(*) as availableStrength,dep.DPTSTXT as dep,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT,sum(emp.dptid) as  salary from emp_official_info as emp,reporting_group as rep,DEPARTMENT as dep,SUBDEPARTMENT as subdep where  rep.grp_id=emp.Reporting_Grp and dep.DPTID=emp.DPTID and emp.SDPTID=subdep.SDPTID  and emp.LOCID='"+help.getLocationId()+"' and subdep.SDPTID in ("+rsabc.getString("SDPTID")+") AND EMP.ACTIVE=1 AND Reporting_Grp=1  group by emp.DPTID,dep.DPTSTXT,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT";	
													ResultSet rsava= ad.selectQuery(ava); */
															String ava="select count(*) as availableStrength,dep.DPTSTXT as dep,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT,sum(emp.dptid) as  salary from emp_official_info as emp,reporting_group as rep,DEPARTMENT as dep,SUBDEPARTMENT as subdep,EMP_Shift_Register as sh where sh.pernr=emp.PERNR and rep.grp_id=emp.Reporting_Grp  and dep.DPTID=emp.DPTID and emp.SDPTID=subdep.SDPTID and emp.LOCID='"+help.getLocationId()+"' and subdep.SDPTID in ("+rsabc.getString("SDPTID")+")   and sh.Month='"+frmmon+"' and (sh.DAY"+frmday+"='"+ACtualshift+"') and sh.year='"+frmyear+"'  AND EMP.ACTIVE=1 AND Reporting_Grp=1  group by emp.DPTID,dep.DPTSTXT,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT";	
															ResultSet rsava= ad.selectQuery(ava); 		
													if(rsava.next())
													{
														hr.setStaffavailstrength(rsava.getInt("availableStrength"));
														hr.setStaffsalary(0);
													}
													rsava.close();
														
													/*String query1="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master where Location.LOCATION_CODE=emp_official_info.LOCID and "
															+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'    and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (1)  and ACTIVE = 1";
													ResultSet rs4= ad.selectQuery(query1); */
													String query1="select emp_official_info.pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master ,EMP_Shift_Register as sh where sh.pernr=emp_official_info.PERNR and sh.Month='"+frmmon+"' and (sh.DAY"+frmday+"='"+ACtualshift+"') and sh.year='"+frmyear+"'and Location.LOCATION_CODE=emp_official_info.LOCID and "
															+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'    and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (1)  and ACTIVE = 1";
													ResultSet rs4= ad.selectQuery(query1); 
													try {
														while(rs4.next())
														{
															empnos1=empnos1+","+rs4.getString("pernr");
														}
														if(!empnos1.equalsIgnoreCase(""))
														empnos1=empnos1.substring(1, empnos1.length());
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													rs4.close();
													for(int j=frmday;j<=today;j++)
													{
													if(!empnos1.equalsIgnoreCase(""))	
													{
												String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 and EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos1+") and (day"+j+" like '%PP%') and year='"+frmyear+"'";
												ResultSet ji= ad.selectQuery(tr); 
												
												
												try {
													if(ji.next())
													{
														present1=present1+ji.getInt(1);
													}
												} catch (SQLException e1) {
													// TODO Auto-generated catch block
													e1.printStackTrace();
												}
												ji.close();
													}
													}
												
													hr.setStaffpresent(present1);
													
													for(int j=frmday;j<=today;j++)
													{
													if(!empnos1.equalsIgnoreCase(""))	
													{
												String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 and EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos1+") and (day"+j+" not like '%PP%') and year='"+frmyear+"'";
												ResultSet ji= ad.selectQuery(tr); 
												
												
												try {
													if(ji.next())
													{
														absent1=absent1+ji.getInt(1);
													}
												} catch (SQLException e1) {
													// TODO Auto-generated catch block
													e1.printStackTrace();
												}
												ji.close();
													}
													}
												
													hr.setStaffabsent(absent1);
													
												
													//tech staff//////////////////////////////////////////////////////////////////////////////////////////
													
													//AVAILABLE
													/*String ava1="select count(*) as availableStrength,dep.DPTSTXT as dep,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT,sum(emp.dptid) as  salary from emp_official_info as emp,reporting_group as rep,DEPARTMENT as dep,SUBDEPARTMENT as subdep where  rep.grp_id=emp.Reporting_Grp and dep.DPTID=emp.DPTID and emp.SDPTID=subdep.SDPTID  and emp.LOCID='"+help.getLocationId()+"' and subdep.SDPTID in ("+rsabc.getString("SDPTID")+") AND EMP.ACTIVE=1 AND Reporting_Grp=2  group by emp.DPTID,dep.DPTSTXT,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT";	
													ResultSet rsava1= ad.selectQuery(ava1);*/ 
													String ava1="select count(*) as availableStrength,dep.DPTSTXT as dep,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT,sum(emp.dptid) as  salary from emp_official_info as emp,reporting_group as rep,DEPARTMENT as dep,SUBDEPARTMENT as subdep,EMP_Shift_Register as sh where sh.pernr=emp.PERNR and sh.Month='"+frmmon+"' and (sh.DAY"+frmday+"='"+ACtualshift+"') and sh.year='"+frmyear+"' AND  rep.grp_id=emp.Reporting_Grp and dep.DPTID=emp.DPTID and emp.SDPTID=subdep.SDPTID  and emp.LOCID='"+help.getLocationId()+"' and subdep.SDPTID in ("+rsabc.getString("SDPTID")+") AND EMP.ACTIVE=1 AND Reporting_Grp=2  group by emp.DPTID,dep.DPTSTXT,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT";	
													ResultSet rsava1= ad.selectQuery(ava1); 
													if(rsava1.next())
													{
														hr.setTechstaffavailstrength(rsava1.getInt("availableStrength"));
														hr.setTechstaffsalary(0);
													}
													rsava1.close();
												
													/*String query2="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master where Location.LOCATION_CODE=emp_official_info.LOCID and "
															+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'    and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (2)  and ACTIVE = 1";
													ResultSet rs44= ad.selectQuery(query2); */
													String query2="select emp_official_info.pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master, EMP_Shift_Register as sh where sh.pernr=emp_official_info.PERNR and sh.Month='"+frmmon+"' and (sh.DAY"+frmday+"='"+ACtualshift+"') and sh.year='"+frmyear+"' AND Location.LOCATION_CODE=emp_official_info.LOCID and "
															+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'    and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (2)  and ACTIVE = 1";
													ResultSet rs44= ad.selectQuery(query2); 
													try {
														while(rs44.next())
														{
															empnos2=empnos2+","+rs44.getString("pernr");
														}
													
														if(!empnos2.equalsIgnoreCase(""))
														empnos2=empnos2.substring(1, empnos2.length());
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													rs44.close();
													
													for(int j=frmday;j<=today;j++)
													{
														if(!empnos2.equalsIgnoreCase(""))	
														{
													
												String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 and EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos2+") and (day"+j+" like '%PP%') and year='"+frmyear+"'";
												ResultSet ji= ad.selectQuery(tr); 
												try {
													if(ji.next())
													{
														present2=present2+ji.getInt(1);
													}
												} catch (SQLException e1) {
													// TODO Auto-generated catch block
													e1.printStackTrace();
												}
												ji.close();
												
													}}
													
                                                  hr.setTechstaffpresent(present2);
                                                  
                                          		for(int j=frmday;j<=today;j++)
												{
													if(!empnos2.equalsIgnoreCase(""))	
													{
												
											String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 and EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos2+") and (day"+j+" not like '%PP%') and year='"+frmyear+"'";
											ResultSet ji= ad.selectQuery(tr); 
											try {
												if(ji.next())
												{
													absent2=absent2+ji.getInt(1);
												}
											} catch (SQLException e1) {
												// TODO Auto-generated catch block
												e1.printStackTrace();
											}
											ji.close();
											
												}}
												
                                              hr.setTechstaffabsent(absent2);
													
												///Apprentice////////////////////////////////////////////////////////////////////////
													
                                                //AVAILABLE
													/*String ava2="select count(*) as availableStrength,dep.DPTSTXT as dep,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT,sum(emp.dptid) as  salary from emp_official_info as emp,reporting_group as rep,DEPARTMENT as dep,SUBDEPARTMENT as subdep where  rep.grp_id=emp.Reporting_Grp and dep.DPTID=emp.DPTID and emp.SDPTID=subdep.SDPTID  and emp.LOCID='"+help.getLocationId()+"' and subdep.SDPTID in ("+rsabc.getString("SDPTID")+") AND EMP.ACTIVE=1 AND Reporting_Grp=3  group by emp.DPTID,dep.DPTSTXT,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT";	
													ResultSet rsava2= ad.selectQuery(ava2);*/ 
                                                  	String ava2="select count(*) as availableStrength,dep.DPTSTXT as dep,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT,sum(emp.dptid) as  salary from emp_official_info as emp,reporting_group as rep,DEPARTMENT as dep,SUBDEPARTMENT as subdep,EMP_Shift_Register as sh where sh.pernr=emp.PERNR and sh.Month='"+frmmon+"' and (sh.DAY"+frmday+"='"+ACtualshift+"') and sh.year='"+frmyear+"' AND  rep.grp_id=emp.Reporting_Grp and dep.DPTID=emp.DPTID and emp.SDPTID=subdep.SDPTID  and emp.LOCID='"+help.getLocationId()+"' and subdep.SDPTID in ("+rsabc.getString("SDPTID")+") AND EMP.ACTIVE=1 AND Reporting_Grp=3  group by emp.DPTID,dep.DPTSTXT,dep.DPTID,subdep.SDPTID,subdep.SDPTID_LTXT";	
													ResultSet rsava2= ad.selectQuery(ava2); 
													if(rsava2.next())
													{
														hr.setApprenstaffavailstrength(rsava2.getInt("availableStrength"));
														hr.setApprenstaffsalary(0);
													}
														
													rsava2.close();
													/*String query3="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master where Location.LOCATION_CODE=emp_official_info.LOCID and "
															+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'   and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (3)  and ACTIVE = 1";
													ResultSet rs43= ad.selectQuery(query3); */
													String query3="select emp_official_info.pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master,EMP_Shift_Register as sh where sh.pernr=emp_official_info.PERNR and sh.Month='"+frmmon+"' and (sh.DAY"+frmday+"='"+ACtualshift+"') and sh.year='"+frmyear+"' AND Location.LOCATION_CODE=emp_official_info.LOCID and "
															+" DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'   and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (3)  and ACTIVE = 1";
													ResultSet rs43= ad.selectQuery(query3);
													try {
														while(rs43.next())
														{
															empnos3=empnos3+","+rs43.getString("pernr");
														}
														if(!empnos3.equalsIgnoreCase(""))
														empnos3=empnos3.substring(1, empnos3.length());
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													rs43.close();
													
													
													for(int j=frmday;j<=today;j++)
													{
														if(!empnos3.equalsIgnoreCase(""))	
														{	
												String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos3+") and (day"+j+" like '%PP%') and year='"+frmyear+"'";
												ResultSet ji= ad.selectQuery(tr); 
												try {
													if(ji.next())
													{
														present3=present3+ji.getInt(1);
													}
												} catch (SQLException e1) {
													// TODO Auto-generated catch block
													e1.printStackTrace();
												}ji.close();
												
													}
													}
												
													hr.setApprenstaffpresent(present3);
													
													//absent
													for(int j=frmday;j<=today;j++)
													{
														if(!empnos3.equalsIgnoreCase(""))	
														{	
												String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos3+") and (day"+j+" not like '%PP%') and year='"+frmyear+"'";
												ResultSet ji= ad.selectQuery(tr); 
												try {
													if(ji.next())
													{
														absent3=absent3+ji.getInt(1);
													}
												} catch (SQLException e1) {
													// TODO Auto-generated catch block
													e1.printStackTrace();
												}ji.close();
												
													}
													}
												
													hr.setApprenstaffabsent(absent3);
												
													
													/////House keeping///////////////////////////////////////////////////////////////////////////////
												
														
													/*	
													String query4="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master where Location.LOCATION_CODE=emp_official_info.LOCID and "
															+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'    and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (7)  and ACTIVE = 1";
													ResultSet rs5= ad.selectQuery(query4);*/ 
													String query4="select emp_official_info.pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master,EMP_Shift_Register as sh where sh.pernr=emp_official_info.PERNR and sh.Month='"+frmmon+"' and (sh.DAY"+frmday+"='"+ACtualshift+"') and sh.year='"+frmyear+"' AND Location.LOCATION_CODE=emp_official_info.LOCID and "
															+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'    and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (7)  and ACTIVE = 1";
													ResultSet rs5= ad.selectQuery(query4); 
													try {
														while(rs5.next())
														{
															empnos7=empnos7+","+rs5.getString("pernr");
														}
														if(!empnos7.equalsIgnoreCase(""))
														empnos7=empnos7.substring(1, empnos7.length());
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													rs5.close();
												
													for(int j=frmday;j<=today;j++)
													{
														if(!empnos7.equalsIgnoreCase(""))	
														{
													
												String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 and  EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos7+") and (day"+j+" like '%PP%') and year='"+frmyear+"'";
												ResultSet ji= ad.selectQuery(tr); 
												try {
													if(ji.next())
													{
														present7=present7+ji.getInt(1);
													}
												} catch (SQLException e1) {
													// TODO Auto-generated catch block
													e1.printStackTrace();
												}
												ji.close();
													}}
													
												
													hr.setHousepresent(present7);	
													
													
													///SKILLED
													if(ACtualrepgrp.contains("4"))
													{
														/*String query5="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master where Location.LOCATION_CODE=emp_official_info.LOCID and "
																+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'    and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (4)  and ACTIVE = 1";
														ResultSet rs6= ad.selectQuery(query5);*/ 
														String query5="select emp_official_info.pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master,EMP_Shift_Register as sh where sh.pernr=emp_official_info.PERNR and sh.Month='"+frmmon+"' and (sh.DAY"+frmday+"='"+ACtualshift+"') and sh.year='"+frmyear+"' AND Location.LOCATION_CODE=emp_official_info.LOCID and "
																+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'    and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (4)  and ACTIVE = 1";
														ResultSet rs6= ad.selectQuery(query5);
														try {
															while(rs6.next())
															{
																empnos4=empnos4+","+rs6.getString("pernr");
															}
															if(!empnos4.equalsIgnoreCase(""))
															empnos4=empnos4.substring(1, empnos4.length());
														} catch (SQLException e1) {
															// TODO Auto-generated catch block
															e1.printStackTrace();
														}rs6.close();
													
														for(int j=frmday;j<=today;j++)
														{
															if(!empnos4.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 and  EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos4+") and (day"+j+" like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
															present4=present4+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
														}}
																										
														hr.setSkilledpresent(present4);
														for(int j=frmday;j<=today;j++)
														{
															if(!empnos4.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos4+") and (day"+j+" not like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
															absent4=absent4+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
														}}
														hr.setSkilledabsent(absent4);
														request.setAttribute("skilled", "skilled");
													}
													///SEMISKILLED	
													if(ACtualrepgrp.contains("6"))
													{
														String query6="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master where Location.LOCATION_CODE=emp_official_info.LOCID and "
																+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'    and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (6)  and ACTIVE = 1";
														ResultSet rs7= ad.selectQuery(query6); 
														try {
															while(rs7.next())
															{
																empnos5=empnos5+","+rs7.getString("pernr");
															}
															if(!empnos5.equalsIgnoreCase(""))
															empnos5=empnos5.substring(1, empnos5.length());
														} catch (SQLException e1) {
															// TODO Auto-generated catch block
															e1.printStackTrace();
														}
													rs7.close();
														for(int j=frmday;j<=today;j++)
														{
															if(!empnos5.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 and EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos5+") and (day"+j+" like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
															present5=present5+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
														}}
														hr.setSemiskilledpresent(present5);
														for(int j=frmday;j<=today;j++)
														{
															if(!empnos5.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos5+") and (day"+j+" not like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
															absent5=absent5+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
														}}
														///
														
													
														hr.setSemiskilledabsent(absent5);
														
														request.setAttribute("semiskilled", "semiskilled");
													}
													
													///UNSKILLED	
													if(ACtualrepgrp.contains("5"))
													{
														String query7="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master where Location.LOCATION_CODE=emp_official_info.LOCID and "
																+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'    and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (5)  and ACTIVE = 1";
														ResultSet rs8= ad.selectQuery(query7); 
														try {
															while(rs8.next())
															{
																empnos6=empnos6+","+rs8.getString("pernr");
															}
															if(!empnos6.equalsIgnoreCase(""))
															empnos6=empnos6.substring(1, empnos6.length());
														} catch (SQLException e1) {
															// TODO Auto-generated catch block
															e1.printStackTrace();
														}
														rs8.close();
														for(int j=frmday;j<=today;j++)
														{
															if(!empnos6.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 and EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos6+") and (day"+j+" like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
															present6=present6+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
														}}
														
													
														hr.setUnskilledpresent(present6);
														for(int j=frmday;j<=today;j++)
														{
															if(!empnos6.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos6+") and (day"+j+" not like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
															absent6=absent6+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
														}}
														
													
														hr.setUnskilledabsent(absent6);
														request.setAttribute("unskilled", "unskilled");
														
														
													}
													///G4s
	
													if(ACtualrepgrp.contains("8"))
													{

														String query8="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master where Location.LOCATION_CODE=emp_official_info.LOCID and "
																+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'    and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (8)  and ACTIVE = 1";
														ResultSet rs9= ad.selectQuery(query8); 
														try {
															while(rs9.next())
															{
																empnos8=empnos8+","+rs9.getString("pernr");
															}
															if(!empnos8.equalsIgnoreCase(""))
															empnos8=empnos8.substring(1, empnos8.length());
														} catch (SQLException e1) {
															// TODO Auto-generated catch block
															e1.printStackTrace();
														}
													rs9.close();
														for(int j=frmday;j<=today;j++)
														{
															if(!empnos8.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 and EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos8+") and (day"+j+" like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
															present8=present8+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
													
														}}
														hr.setSecuritypresent(present8);
														for(int j=frmday;j<=today;j++)
														{
															if(!empnos8.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos8+") and (day"+j+" not like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
															absent8=absent8+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
													
														}}
														hr.setSecurityabsent(absent8);
														
														request.setAttribute("g4s", "g4s");
													}
													
													///projects
													
													if(ACtualrepgrp.contains("9"))
													{


														String query9="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master where Location.LOCATION_CODE=emp_official_info.LOCID and "
																+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP and emp_official_info.LOCID='"+help.getLocationId()+"'  and emp_official_info.SDPTID='"+rsabc.getString("SDPTID")+"' and emp_official_info.Reporting_Grp in (9)  and ACTIVE = 1";
														ResultSet rs10= ad.selectQuery(query9); 
														try {
															while(rs10.next())
															{
																empnos9=empnos9+","+rs10.getString("pernr");
															}
															if(!empnos9.equalsIgnoreCase(""))
															empnos9=empnos9.substring(1, empnos9.length());
														} catch (SQLException e1) {
															// TODO Auto-generated catch block
															e1.printStackTrace();
														}
														rs10.close();
														for(int j=frmday;j<=today;j++)
														{
														
															if(!empnos9.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where emp.Active=1 and EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos9+") and (day"+j+" like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
															present9=present9+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
														}}
														
														hr.setProjectspresent(present9);
														for(int j=frmday;j<=today;j++)
														{
														
															if(!empnos9.equalsIgnoreCase(""))	
															{
													String tr="select count(*) as present from emp_official_info as emp ,EMP_IN_OUT_Status where EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and EMP_IN_OUT_Status.Pernr in ("+empnos9+") and (day"+j+" not like '%PP%') and year='"+frmyear+"'";
													ResultSet ji= ad.selectQuery(tr); 
													try {
														if(ji.next())
														{
															absent9=absent9+ji.getInt(1);
														}
													} catch (SQLException e1) {
														// TODO Auto-generated catch block
														e1.printStackTrace();
													}
													ji.close();
														}}
														hr.setProjectsabsent(absent9);
														request.setAttribute("project", "project");
													
													}
														
											   hr.setTotcontractpresent(present4+present5+present6+present8+present9);	
											   hr.setTotpresent(hr.getTotcontractpresent()+present1+present2+present3+present7);
											   
											   hr.setThreeapprstrength(hr.getStaffapprstrength()+hr.getApprenstaffapprstrength()+hr.getTechstaffapprstrength());
											   hr.setThreepresent(present1+present2+present3);
											   hr.setThreesalary(hr.getStaffsalary()+hr.getTechstaffsalary()+hr.getApprenstaffsalary());
											   
												man.add(hr);
												
												
												//grnd
												  grnstaffapprstrength=grnstaffapprstrength+hr.getStaffapprstrength();
												  grnstaffavailstrength=grnstaffavailstrength+hr.getStaffavailstrength();
												  grnstaffpresent=grnstaffpresent+hr.getStaffpresent();
												  grnstaffabsent=grnstaffabsent+hr.getStaffabsent();
												  grnstaffsalary=grnstaffsalary+hr.getStaffsalary();
												
												  grntechstaffapprstrength=grntechstaffapprstrength+hr.getTechstaffapprstrength();
												  grntechstaffavailstrength=grntechstaffavailstrength+hr.getTechstaffavailstrength();
												  grntechstaffpresent=grntechstaffpresent+hr.getTechstaffpresent();
												  grntechstaffabsent=grntechstaffabsent+hr.getTechstaffabsent();
												  grntechstaffsalary=grntechstaffsalary+hr.getTechstaffsalary();
												
												
												  grnapprenstaffapprstrength=grnapprenstaffapprstrength+hr.getApprenstaffapprstrength();
												  grnapprenstaffavailstrength=grnapprenstaffavailstrength+hr.getApprenstaffavailstrength();
												  grnapprenstaffpresent=grnapprenstaffpresent+hr.getApprenstaffpresent();
												  grnapprenstaffabsent=grnapprenstaffabsent+hr.getApprenstaffabsent();
												  grnapprenstaffsalary=grnapprenstaffsalary+hr.getApprenstaffsalary();
												
												  grncontractapprstrength=grncontractapprstrength+hr.getContractapprstrength();

												/*  grnskilledpresent=grnskilledpresent+hr.getSkilledpresent();
												  grnunskilledpresent=grnunskilledpresent+hr.getUnskilledpresent();
												  grnsemiskilledpresent=grnsemiskilledpresent+hr.getSemiskilledpresent();
												  grnsecuritypresent=grnsecuritypresent+hr.getSecuritypresent();
												  grnprojectspresent=grnprojectspresent+hr.getProjectspresent();*/
												  grnskilledpresent=grnskilledpresent+hr.getSkilledpresent();
												  grnskilledabsent=grnskilledabsent+hr.getSkilledabsent();
												  
												  grnunskilledpresent=grnunskilledpresent+hr.getUnskilledpresent();
												  grnunskilledabsent=grnunskilledabsent+hr.getUnskilledabsent();
												  
												  grnsemiskilledpresent=grnsemiskilledpresent+hr.getSemiskilledpresent();
												  grnsemiskilledabsent=grnsemiskilledabsent+hr.getSemiskilledabsent();
												  
												  grnsecuritypresent=grnsecuritypresent+hr.getSecuritypresent();
												  grnsecurityabsent=grnsecurityabsent+hr.getSecurityabsent();
												  
												  
												  grnprojectspresent=grnprojectspresent+hr.getProjectspresent();
												  grnprojectsabsent=grnprojectsabsent+hr.getProjectsabsent();
												
												
												  grntotcontractpresent=grntotcontractpresent+hr.getTotcontractpresent();
												  grntotcontractSalary=grntotcontractSalary+hr.getTotcontractSalary();
												
												
												  grnhouseapprstrength=grnhouseapprstrength+hr.getHouseapprstrength();	
												  grnhousepresent=grnhousepresent+hr.getHousepresent();
												  grnhousesalary=grnhousepresent+hr.getHousesalary();
												
												  grntotpresent=grntotpresent+hr.getTotpresent();
												  grntotsalary=grntotsalary+hr.getTotsalary();
												
												
												  grnthreeapprstrength=grnthreeapprstrength+hr.getThreeapprstrength();	
												  grnthreepresent=grnthreepresent+hr.getThreepresent();
												  grnthreesalary=grnthreesalary+hr.getThreesalary();
												  
												  ///sub
												  
												  substaffapprstrength=substaffapprstrength+hr.getStaffapprstrength();
												  substaffavailstrength=substaffavailstrength+hr.getStaffavailstrength();
												  substaffpresent=substaffpresent+hr.getStaffpresent();
												  substaffabsent=substaffabsent+hr.getStaffabsent();
												  substaffsalary=substaffsalary+hr.getStaffsalary();
												
												  subtechstaffapprstrength=subtechstaffapprstrength+hr.getTechstaffapprstrength();
												  subtechstaffavailstrength=subtechstaffavailstrength+hr.getTechstaffavailstrength();
												  subtechstaffpresent=subtechstaffpresent+hr.getTechstaffpresent();
												  subtechstaffabsent=subtechstaffabsent+hr.getTechstaffabsent();
												  subtechstaffsalary=subtechstaffsalary+hr.getTechstaffsalary();
												
												
												  subapprenstaffapprstrength=subapprenstaffapprstrength+hr.getApprenstaffapprstrength();
												  subapprenstaffavailstrength=subapprenstaffavailstrength+hr.getApprenstaffavailstrength();
												  subapprenstaffpresent=subapprenstaffpresent+hr.getApprenstaffpresent();
												  subapprenstaffabsent=subapprenstaffabsent+hr.getApprenstaffabsent();
												  subapprenstaffsalary=subapprenstaffsalary+hr.getApprenstaffsalary();
												
												  subcontractapprstrength=subcontractapprstrength+hr.getContractapprstrength();

												  subskilledpresent=subskilledpresent+hr.getSkilledpresent();
												  subunskilledpresent=subunskilledpresent+hr.getUnskilledpresent();
												  subsemiskilledpresent=subsemiskilledpresent+hr.getSemiskilledpresent();
												  subsecuritypresent=subsecuritypresent+hr.getSecuritypresent();
												  subprojectspresent=subprojectspresent+hr.getProjectspresent();
												
												  subskilledabsent=subskilledabsent+hr.getSkilledabsent();
												  subunskilledabsent=subunskilledabsent+hr.getUnskilledabsent();
												  subsemiskilledabsent=subsemiskilledabsent+hr.getSemiskilledabsent();
												  subsecurityabsent=subsecurityabsent+hr.getSecurityabsent();
												  subprojectsabsent=subprojectsabsent+hr.getProjectsabsent();
												  
												
												  subtotcontractpresent=subtotcontractpresent+hr.getTotcontractpresent();
												  subtotcontractSalary=subtotcontractSalary+hr.getTotcontractSalary();
												
												
												  subhouseapprstrength=subhouseapprstrength+hr.getHouseapprstrength();	
												  subhousepresent=subhousepresent+hr.getHousepresent();
												  subhousesalary=subhousepresent+hr.getHousesalary();
												
												  subtotpresent=subtotpresent+hr.getTotpresent();
												  subtotsalary=subtotsalary+hr.getTotsalary();
												
												
												  subthreeapprstrength=subthreeapprstrength+hr.getThreeapprstrength();	
												  subthreepresent=subthreepresent+hr.getThreepresent();
												  subthreesalary=subthreesalary+hr.getThreesalary();
												  
												  if(rowno.equalsIgnoreCase(rsabc.getString("RowNum"))) 
												  {
													  HRApprovalForm hr2=new HRApprovalForm();
														
														
														hr2.setDepartment(subdptid);
														hr2.setLocationId("Sub");
														
														hr2.setStaffapprstrength(substaffapprstrength);
														 hr2.setStaffavailstrength(substaffavailstrength);
														 hr2.setStaffpresent(substaffpresent);
														 hr2.setStaffabsent(substaffabsent);
														 hr2.setStaffsalary(substaffsalary);
														
														 hr2.setTechstaffapprstrength(subtechstaffapprstrength);
														 hr2.setTechstaffavailstrength(subtechstaffavailstrength);
														 hr2.setTechstaffpresent(subtechstaffpresent);
														 hr2.setTechstaffabsent(subtechstaffabsent);
														 hr2.setTechstaffsalary(subtechstaffsalary);
														
														
														 hr2.setApprenstaffapprstrength(subapprenstaffapprstrength);
														 hr2.setApprenstaffavailstrength(subapprenstaffavailstrength);
														 hr2.setApprenstaffpresent(subapprenstaffpresent);
														 hr2.setApprenstaffabsent(subapprenstaffabsent);
														 hr2.setApprenstaffsalary(subapprenstaffsalary);
														
														 hr2.setContractapprstrength(subcontractapprstrength);

														 hr2.setSkilledpresent(subskilledpresent);
														 hr2.setUnskilledpresent(subunskilledpresent);
														 hr2.setSemiskilledpresent(subsemiskilledpresent);
														 hr2.setSecuritypresent(subsecuritypresent);
														 hr2.setProjectspresent(subprojectspresent);
														
														 hr2.setSkilledabsent(subskilledabsent);
														 hr2.setUnskilledabsent(subunskilledabsent);
														 hr2.setSemiskilledabsent(subsemiskilledabsent);
														 hr2.setSecurityabsent(subsecurityabsent);
														 hr2.setProjectsabsent(subprojectsabsent);

														
														 hr2.setTotcontractpresent(subtotcontractpresent);
														 hr2.setTotcontractSalary(subtotcontractSalary);
														
														
														 hr2.setHouseapprstrength(subhouseapprstrength);	
														 hr2.setHousepresent(subhousepresent);
														 hr2.setHousesalary(subhousesalary);
														
														 hr2.setTotpresent(subtotpresent);
														 hr2.setTotsalary(subtotsalary);
														
														
														 hr2.setThreeapprstrength(subthreeapprstrength);	
														 hr2.setThreepresent(subthreepresent);
														 hr2.setThreesalary(subthreesalary);
														
														 man.add(hr2);
														
												  }
												
												
											}
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										
										//last subtotla
										
										
										
										
										
										//
										
										
                                        help.setGrnstaffapprstrength(grnstaffapprstrength);
										 help.setGrnstaffavailstrength(grnstaffavailstrength);
										 help.setGrnstaffpresent(grnstaffpresent);
										 help.setGrnstaffabsent(grnstaffabsent);
										 help.setGrnstaffsalary(grnstaffsalary);
										
										 help.setGrntechstaffapprstrength(grntechstaffapprstrength);
										 help.setGrntechstaffavailstrength(grntechstaffavailstrength);
										 help.setGrntechstaffpresent(grntechstaffpresent);
										 help.setGrntechstaffabsent(grntechstaffabsent);
										 help.setGrntechstaffsalary(grntechstaffsalary);
										
										
										 help.setGrnapprenstaffapprstrength(grnapprenstaffapprstrength);
										 help.setGrnapprenstaffavailstrength(grnapprenstaffavailstrength);
										 help.setGrnapprenstaffpresent(grnapprenstaffpresent);
										 help.setGrnapprenstaffabsent(grnapprenstaffabsent);
										 help.setGrnapprenstaffsalary(grnapprenstaffsalary);
										
										 help.setGrncontractapprstrength(grncontractapprstrength);

										 help.setGrnskilledpresent(grnskilledpresent);
										 help.setGrnunskilledpresent(grnunskilledpresent);
										 help.setGrnsemiskilledpresent(grnsemiskilledpresent);
										 help.setGrnsecuritypresent(grnsecuritypresent);
										 help.setGrnprojectspresent(grnprojectspresent);
										
										
										 help.setGrntotcontractpresent(grntotcontractpresent);
										 help.setGrntotcontractSalary(grntotcontractSalary);
										
										
										 help.setGrnhouseapprstrength(grnhouseapprstrength);	
										 help.setGrnhousepresent(grnhousepresent);
										 help.setGrnhousesalary(grnhousesalary);
										
										 help.setGrntotpresent(grntotpresent);
										 help.setGrntotsalary(grntotsalary);
										
										
										 help.setGrnthreeapprstrength(grnthreeapprstrength);	
										 help.setGrnthreepresent(grnthreepresent);
										 help.setGrnthreesalary(grnthreesalary);
										
								
										request.setAttribute("man", man);
										
										
										if(man.size()==0)
										{
											request.setAttribute("nolist", "nolist");	
										}
	 
				
				request.setAttribute("result", "result");
				
				try {
					rsabc.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				try {
					rscat.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rsf.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
 }
									    
									    else
									    	
									    	
									    {
									    	
									    	String actualpay=help.getPaygrp();
									    	String st="";
									    	ArrayList depman=new ArrayList();
									    	if(!actualpay.equalsIgnoreCase(""))
									    	{
									    	String pay=" select Short_desc from Paygroup_Master where Paygroup="+actualpay+" ";
									    	ResultSet bpay=ad.selectQuery(pay);
									    	try {
												if(bpay.next()){
													help.setPaygrp(bpay.getString("Short_desc"));
												}
											} catch (SQLException e1) {
												// TODO Auto-generated catch block
												e1.printStackTrace();
											}
									    	
									    	
									    	
									    	 st="  select  sum(case when  STAFFCAT=7   then 1 else 0 end )  as factorystaffavailable,  "
		+ " sum(case when day"+frmday+" like '%PP%' and STAFFCAT=7   then 1 else 0 end ) as factorystaffpresent, "
		+ "  sum(case when  STAFFCAT=3   then 1 else 0 end )  as workersavailable,      sum(case when day"+frmday+" like '%PP%' and STAFFCAT=3   then 1 else 0 end ) "
		+ "as workerspresent,	  (sum(case when  STAFFCAT=7   then 1 else 0 end )+sum(case when  STAFFCAT=3   then 1 else 0 end ) ) as"
		+ " totalavlable,(sum(case when day"+frmday+" like '%PP%' and STAFFCAT=7   then 1 else 0 end )+sum(case when day"+frmday+" like '%PP%' and STAFFCAT=3   then 1 else 0 end )) "
		+ "as totalpresent  , emp.dptid,DEPARTMENT.dptstxt    from EMP_IN_OUT_Status  ,emp_official_info as emp,department where "
		+ "EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and  year='"+frmyear+"' and emp.LOCID='"+help.getLocationId()+"'"
				+ " and EMP.ACTIVE=1 AND STAFFCAT in (3,7) and PAY_GROUP='"+actualpay+"' and department.dptid=emp.dptid group by emp.dptid,DEPARTMENT.dptstxt "
				+ "union "
				+"  select  sum(case when  STAFFCAT=7   then 1 else 0 end )  as factorystaffavailable,  "
				+ " sum(case when day"+frmday+" like '%PP%' and STAFFCAT=7   then 1 else 0 end ) as factorystaffpresent, "
				+ "  sum(case when  STAFFCAT=3   then 1 else 0 end )  as workersavailable,      sum(case when day"+frmday+" like '%PP%' and STAFFCAT=3   then 1 else 0 end ) "
				+ "as workerspresent,	  (sum(case when  STAFFCAT=7   then 1 else 0 end )+sum(case when  STAFFCAT=3   then 1 else 0 end ) ) as"
				+ " totalavlable,(sum(case when day"+frmday+" like '%PP%' and STAFFCAT=7   then 1 else 0 end )+sum(case when day"+frmday+" like '%PP%' and STAFFCAT=3   then 1 else 0 end )) "
				+ "as totalpresent  , '',''    from EMP_IN_OUT_Status  ,emp_official_info as emp,department where "
				+ "EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and  year='"+frmyear+"' and emp.LOCID='"+help.getLocationId()+"'"
						+ " and EMP.ACTIVE=1 AND STAFFCAT in (3,7)  and PAY_GROUP='"+actualpay+"' and department.dptid=emp.dptid  ";
									    	
									    	}
									    	
									    	else
									    	{
									    		
									    	
										    	 st="  select  sum(case when  STAFFCAT=7   then 1 else 0 end )  as factorystaffavailable,  "
			+ " sum(case when day"+frmday+" like '%PP%' and STAFFCAT=7   then 1 else 0 end ) as factorystaffpresent, "
			+ "  sum(case when  STAFFCAT=3   then 1 else 0 end )  as workersavailable,      sum(case when day"+frmday+" like '%PP%' and STAFFCAT=3   then 1 else 0 end ) "
			+ "as workerspresent,	  (sum(case when  STAFFCAT=7   then 1 else 0 end )+sum(case when  STAFFCAT=3   then 1 else 0 end ) ) as"
			+ " totalavlable,(sum(case when day"+frmday+" like '%PP%' and STAFFCAT=7   then 1 else 0 end )+sum(case when day"+frmday+" like '%PP%' and STAFFCAT=3   then 1 else 0 end )) "
			+ "as totalpresent  , emp.dptid,DEPARTMENT.dptstxt    from EMP_IN_OUT_Status  ,emp_official_info as emp,department where "
			+ "EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and  year='"+frmyear+"' and emp.LOCID='"+help.getLocationId()+"'"
					+ " and EMP.ACTIVE=1 AND STAFFCAT in (3,7)  and department.dptid=emp.dptid group by emp.dptid,DEPARTMENT.dptstxt "
					+ "union "
					+"  select  sum(case when  STAFFCAT=7   then 1 else 0 end )  as factorystaffavailable,  "
					+ " sum(case when day"+frmday+" like '%PP%' and STAFFCAT=7   then 1 else 0 end ) as factorystaffpresent, "
					+ "  sum(case when  STAFFCAT=3   then 1 else 0 end )  as workersavailable,      sum(case when day"+frmday+" like '%PP%' and STAFFCAT=3   then 1 else 0 end ) "
					+ "as workerspresent,	  (sum(case when  STAFFCAT=7   then 1 else 0 end )+sum(case when  STAFFCAT=3   then 1 else 0 end ) ) as"
					+ " totalavlable,(sum(case when day"+frmday+" like '%PP%' and STAFFCAT=7   then 1 else 0 end )+sum(case when day"+frmday+" like '%PP%' and STAFFCAT=3   then 1 else 0 end )) "
					+ "as totalpresent  , '',''    from EMP_IN_OUT_Status  ,emp_official_info as emp,department where "
					+ "EMP_IN_OUT_Status.Pernr=emp.PERNR and Month='"+frmmon+"' and  year='"+frmyear+"' and emp.LOCID='"+help.getLocationId()+"'"
							+ " and EMP.ACTIVE=1 AND STAFFCAT in (3,7)   and department.dptid=emp.dptid  ";
									    		
									    	}
									    	ResultSet h=ad.selectQuery(st);
									    	
									    	try {
												while(h.next())
												{
													HRApprovalForm hr=new HRApprovalForm();
													hr.setDepartment(h.getString("dptstxt"));
													hr.setStaffavailstrength(h.getInt("factorystaffavailable"));
													hr.setStaffpresent(h.getInt("factorystaffpresent"));
													hr.setTechstaffavailstrength(h.getInt("workersavailable"));
													hr.setTechstaffpresent(h.getInt("workerspresent"));
													hr.setTotalRecords(h.getInt("totalavlable"));
													hr.setTotpresent(h.getInt("totalpresent"));
													
													depman.add(hr);
												}
											} catch (SQLException e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
									    	
									    	
									    	
									    	if(depman.size()>0)
									    		request.setAttribute("depman", depman);
									    	else
									    		request.setAttribute("nodepman", "nodepman");
									    }
			
				try {
					rs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					reprs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}try {
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					cc.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					subrs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs115.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return mapping.findForward("exportDaywisemanpowerreport");	
	
	}
	
	public ActionForward organogrammanpowerreportSearch(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {


		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");

		HRApprovalForm help = (HRApprovalForm) form;

		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		ArrayList locationList=new ArrayList();
		ArrayList locationLabelList=new ArrayList();
		ResultSet rs11 = ad.selectQuery("select LOCID," +
				"LOCNAME,location_code from location where location_code in ("+locations+")"); 
		try {
			while(rs11.next()) {
				locationList.add(rs11.getString("location_code"));
				locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));

			}
			rs11.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		help.setLocationIdList(locationList);
		help.setLocationLabelList(locationLabelList);

		ArrayList deptList=new ArrayList();
		ArrayList deptLabelList=new ArrayList();
		ResultSet rs15 = ad.selectQuery("select dptid," +
				"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
		try {
			while(rs15.next()) {
				deptList.add(rs15.getString("dptid"));
				deptLabelList.add(rs15.getString("DPTLTXT"));
			}
			rs15.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		help.setDeptList(deptList);
		help.setDeptLabelList(deptLabelList);





		//dept
		String ACtualdept="";
		if(help.getDeptArray()!=null)
		{	
			String[] dept = help.getDeptArray();

			StringBuffer reqdept = new StringBuffer();
			for (int i = 0; i < dept.length; i++) {
				reqdept.append("'"+dept[i]+"'" + ",");
			}
			ACtualdept= reqdept.substring(0, reqdept.length() - 1).toString();
		}

		
		
		this.query1=ACtualdept;

		
		
		request.setAttribute("result", "result");
		try {
			rs11.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			cc.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs15.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return mapping.findForward("organogrammanpowerreport");	
	}
	
	public ActionForward cumulativemanpowerreportSearch(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {


		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");

		HRApprovalForm help = (HRApprovalForm) form;

		Calendar mycal = Calendar.getInstance();
		help.setFrommonth(Integer.toString(mycal.get(Calendar.MONTH) + 1));

		
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		ArrayList locationList=new ArrayList();
		ArrayList locationLabelList=new ArrayList();
		ResultSet rs11 = ad.selectQuery("select LOCID," +
				"LOCNAME,location_code from location where location_code in ("+locations+") "); 
		try {
			while(rs11.next()) {
				locationList.add(rs11.getString("location_code"));
				locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));

			}
			rs11.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		help.setLocationIdList(locationList);
		help.setLocationLabelList(locationLabelList);


		ArrayList yearList=new ArrayList();
		ResultSet rs17 = ad.selectQuery("select distinct year from EMP_IN_OUT_Status  order by year desc"); 
				try {
					while(rs17.next()) {
						yearList.add(rs17.getString("year"));
					}
					rs17.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
		help.setYearList(yearList);



		ArrayList<String> deptList=new ArrayList<String>();
		ArrayList deptLabelList=new ArrayList();
		/*ResultSet rs15 = ad.selectQuery("select dptid," +
				"DPTLTXT from DEPARTMENT  "); */
		String Dprt="select dptid," +
				"DPTLTXT from DEPARTMENT where Location like '%"+help.getLocationId()+"%' ";
		ResultSet rs15 = ad.selectQuery(Dprt); 
		try {
			while(rs15.next()) {
				deptList.add(rs15.getString("dptid"));
				deptLabelList.add(rs15.getString("DPTLTXT"));
			}
			rs15.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		help.setDeptList(deptList);
		help.setDeptLabelList(deptLabelList);





		//dept
		String ACtualdept="";
		if(!(deptList.isEmpty()))
		{	
			String[] dept = deptList.toArray(new String[deptList.size()]);


			StringBuffer reqdept = new StringBuffer();
			for (int i = 0; i < dept.length; i++) {
				reqdept.append("'"+dept[i]+"'" + ",");
			}
			ACtualdept= reqdept.substring(0,reqdept.length()-1).toString();
			this.query1=ACtualdept;
		}
		else{
			help.setMessage2("Selected Location as to be mapped with Department to generate the report");		}
		
		/*String ACtualdept="";
		if(help.getDeptArray()!=null)
		{	
			String[] dept = help.getDeptArray();

			StringBuffer reqdept = new StringBuffer();
			for (int i = 0; i < dept.length; i++) {
				reqdept.append("'"+dept[i]+"'" + ",");
			}
			ACtualdept= reqdept.substring(0, reqdept.length() - 1).toString();
		}
*/
		
		
		
		
		
		
		
		
		
		request.setAttribute("result", "result");
		try {
			cc.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs11.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs17.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs15.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return mapping.findForward("cumulativemanpowerreport");	
	}
	
	
	public ActionForward manpowerreportSearch(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {


		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
		
		Calendar mycal = Calendar.getInstance();
		help.setFrommonth(Integer.toString(mycal.get(Calendar.MONTH) + 1));
		
		
		
		
		
		ArrayList shiftList=new ArrayList();
		ArrayList shiftLabelList=new ArrayList();
		ResultSet rs115 = ad.selectQuery("select shift_code," +
				"Shift_Name from EMP_SHIFT_MASTER order by Shift_Name"); 
				try {
					while(rs115.next()) {
						shiftList.add(rs115.getString("shift_code"));
						shiftLabelList.add(rs115.getString("Shift_Name"));
					}
					rs115.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setShiftList(shiftList);
				help.setShiftLabelList(shiftLabelList);
		
				String cmpcode="";
				int id=user.getGroupId();
				String cmp[]=new String[0]; 
				String locations="";
				
				String aa="select * from user_group where id='"+id+"'";
				ResultSet cc=ad.selectQuery(aa);
				try {
					if(cc.next())
					{
						cmpcode=cc.getString("Attendance_Loc");
						
						if(cmpcode.contains(","))
						{
						 cmp=cmpcode.split(",");
						
						for(int b=0;b<cmp.length;b++)
						{
							locations=locations+"'"+cmp[b]+"',";
						}
						
						locations=locations.substring(0, locations.length()-1);
						}
						else
						{
							locations="'"+cmpcode+"'";
						}
					}
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
		
		   ArrayList locationList=new ArrayList();
					ArrayList locationLabelList=new ArrayList();
					ResultSet rs11 = ad.selectQuery("select LOCID," +
							"LOCNAME,location_code from location where location_code in ("+locations+")"); 
							try {
								while(rs11.next()) {
									locationList.add(rs11.getString("location_code"));
									locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
									
								}
								rs11.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							help.setLocationIdList(locationList);
							help.setLocationLabelList(locationLabelList);
	
		
	
		
					
	
				ArrayList deptList=new ArrayList();
				ArrayList deptLabelList=new ArrayList();
				ResultSet rs15 = ad.selectQuery("select dptid," +
						"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
						try {
							while(rs15.next()) {
								deptList.add(rs15.getString("dptid"));
								deptLabelList.add(rs15.getString("DPTLTXT"));
							}
							rs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						help.setDeptList(deptList);
						help.setDeptLabelList(deptLabelList);
						
						//subdep
						/*ArrayList subdeptList=new ArrayList();
						ArrayList subdeptLabelList=new ArrayList();
						ResultSet subrs15 = ad.selectQuery("select SDPTID," +
								"SDPTID_LTXT from SUBDEPARTMENT order by SDPTID_LTXT "); 
								try {
									while(subrs15.next()) {
										subdeptList.add(subrs15.getString("SDPTID"));
										subdeptLabelList.add(subrs15.getString("SDPTID_LTXT"));
									}
									subrs15.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								
								help.setSubdeptList(subdeptList);
								help.setSubdeptLabelList(subdeptLabelList);*/
						//subdep
						//ArrayList<String> deptList=new ArrayList<String>();
						ArrayList<String> subdeptList=new ArrayList<String>();
						ArrayList subdeptLabelList=new ArrayList();
						ResultSet subrs15 = ad.selectQuery("select SDPTID," +
								"SDPTID_LTXT from SUBDEPARTMENT order by SDPTID_LTXT "); 
								try {
									while(subrs15.next()) {
										subdeptList.add(subrs15.getString("SDPTID"));
										subdeptLabelList.add(subrs15.getString("SDPTID_LTXT"));
									}
									subrs15.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								
								help.setSubdeptList(subdeptList);
								help.setSubdeptLabelList(subdeptLabelList);
								
								
								
								
								//Subdept
						String ACtualsubdept="";
								if(subdeptList!=null)
								{	
											
									String[] dept = subdeptList.toArray(new String[subdeptList.size()]);
										StringBuffer reqsdept = new StringBuffer();
									for (int i = 0; i < dept.length; i++) {
										reqsdept.append("'"+dept[i]+"'" + ",");
									}
									ACtualsubdept= reqsdept.substring(0, reqsdept.length() -1).toString();
								}
								
								
								
								/*//repgrp
								ArrayList repgrptList=new ArrayList();
								ArrayList repgrpLabelList=new ArrayList();
								ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
										"Grp_LTXT from REPORTING_GROUP where  Grp_ID not in(1,2,3,7)   order by Grp_LTXT "); 
										try {
											while(reprs15.next()) {
												repgrptList.add(reprs15.getString("Grp_ID"));
												repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
											}
											reprs15.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										
										help.setRepgrpList(repgrptList);
										help.setRepgrpLabelList(repgrpLabelList);*/
								
								//repgrp
								ArrayList<String> repgrptList=new ArrayList<String>();
								ArrayList repgrpLabelList=new ArrayList();
								
								String repgr=request.getParameter("loc");
								ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
										"Grp_LTXT from REPORTING_GROUP where location='"+repgr+"' and Grp_ID not in(1,2,3,7)   order by Grp_LTXT "); 
										try {
											while(reprs15.next()) {
												repgrptList.add(reprs15.getString("Grp_ID"));
												repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
											}
											reprs15.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										
										help.setRepgrpList(repgrptList);
										help.setRepgrpLabelList(repgrpLabelList);
										
										//Reporting group
																	String ACtualrepgrp="";
																		if(repgrptList!=null)
																		{	
																					
																			String[] dept = repgrptList.toArray(new String[repgrptList.size()]);
																				StringBuffer reqrsdept = new StringBuffer();
																			for (int i = 0; i < dept.length; i++) {
																				reqrsdept.append("'"+dept[i]+"'" + ",");
																			}
																			ACtualrepgrp= reqrsdept.substring(0, reqrsdept.length() -1).toString();
																		}
										
										ArrayList payGroupList=new ArrayList();
										ArrayList payGroupLabelList=new ArrayList();
										ResultSet rs12 = ad.selectQuery("select Paygroup," +
										"Long_Desc from Paygroup_Master"); 
										try {
											while(rs12.next()) {
												payGroupList.add(rs12.getString("Paygroup"));
												payGroupLabelList.add(rs12.getString("Long_Desc"));
											}
											rs12.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										
										help.setPayGroupList(payGroupList);
										help.setPayGroupLabelList(payGroupLabelList);	
								
										//dept
										String ACtualdept="";
									    if(help.getDeptArray()!=null)
									    {	
									    String[] dept = help.getDeptArray();
									    
									    StringBuffer reqdept = new StringBuffer();
										for (int i = 0; i < dept.length; i++) {
											reqdept.append("'"+dept[i]+"'" + ",");
										}
										 ACtualdept= reqdept.substring(0, reqdept.length() - 1).toString();
									    }
										
									    
									    //subdept
									  /*  
									    String ACtualsubdept="";
									    if(help.getSubdeptArray()!=null)
									    {	
									    String[] subdept = help.getSubdeptArray();
									    
									    StringBuffer reqsubdept = new StringBuffer();
										for (int i = 0; i < subdept.length; i++) {
											reqsubdept.append("'"+subdept[i]+"'" + ",");
										}
										ACtualsubdept= reqsubdept.substring(0, reqsubdept.length() - 1).toString();
									    }*/
									    
									    
									 
                                        //reporting
									    
									   /* String ACtualrepgrp="";
									    if(help.getRepgrpArray()!=null)
									    {	
									    String[] repgrp = help.getRepgrpArray();
									    
									    StringBuffer reqrepgrp = new StringBuffer();
										for (int i = 0; i < repgrp.length; i++) {
											reqrepgrp.append("'"+repgrp[i]+"'" + ",");
										}
										ACtualrepgrp= reqrepgrp.substring(0, reqrepgrp.length() - 1).toString();
									    }*/
									    
										 int staffapprstrength=0;
										 int staffavailstrength=0;
										 int staffpresent=0;
										 float staffsalary=0;
										
										 int techstaffapprstrength=0;
										 int techstaffavailstrength=0;
										 int techstaffpresent=0;
										 float techstaffsalary=0;
										
										
										 int apprenstaffapprstrength=0;
										 int apprenstaffavailstrength=0;
										 int apprenstaffpresent=0;
										 float apprenstaffsalary=0;
										
										 int contractapprstrength=0;

										 int skilledpresent=0;
										 int unskilledpresent=0;
										 int semiskilledpresent=0;
										 int securitypresent=0;
										 int projectspresent=0;
										
										
										 int totcontractpresent=0;
										 int totcontractSalary=0;
										
										
										 int houseapprstrength=0;	
										 int housepresent=0;
										 float housesalary=0;
										
										 int totpresent=0;
										 float totsalary=0;
										
										
										 int threeapprstrength=0;	
										 int threepresent=0;
										 float threesalary=0;
										
										///grand
										
										 int grnstaffapprstrength=0;
										 int grnstaffavailstrength=0;
										 int grnstaffpresent=0;
										 float grnstaffsalary=0;
										
										 int grntechstaffapprstrength=0;
										 int grntechstaffavailstrength=0;
										 int grntechstaffpresent=0;
										 
										 float grntechstaffsalary=0;
										
										
										 int grnapprenstaffapprstrength=0;
										 int grnapprenstaffavailstrength=0;
										 int grnapprenstaffpresent=0;
										 float grnapprenstaffsalary=0;
										
										 int grncontractapprstrength=0;

										 int grnskilledpresent=0;
										 int grnunskilledpresent=0;
										 int grnsemiskilledpresent=0;
										 int grnsecuritypresent=0;
										 int grnprojectspresent=0;
										
										
										 int grntotcontractpresent=0;
										 int grntotcontractSalary=0;
										
										
										 int grnhouseapprstrength=0;	
										 int grnhousepresent=0;
										 float grnhousesalary=0;
										
										 int grntotpresent=0;
										 float grntotsalary=0;
										
										
										 int grnthreeapprstrength=0;	
										 int grnthreepresent=0;
										 float grnthreesalary=0;
										 
										 
										 //subtotal
										 
											
										 int substaffapprstrength=0;
										 int substaffavailstrength=0;
										 int substaffpresent=0;
										 float substaffsalary=0;
										
										 int subtechstaffapprstrength=0;
										 int subtechstaffavailstrength=0;
										 int subtechstaffpresent=0;
										 float subtechstaffsalary=0;
										
										
										 int subapprenstaffapprstrength=0;
										 int subapprenstaffavailstrength=0;
										 int subapprenstaffpresent=0;
										 float subapprenstaffsalary=0;
										
										 int subcontractapprstrength=0;

										 int subskilledpresent=0;
										 int subunskilledpresent=0;
										 int subsemiskilledpresent=0;
										 int subsecuritypresent=0;
										 int subprojectspresent=0;
										
										
										 int subtotcontractpresent=0;
										 int subtotcontractSalary=0;
										
										
										 int subhouseapprstrength=0;	
										 int subhousepresent=0;
										 float subhousesalary=0;
										
										 int subtotpresent=0;
										 float subtotsalary=0;
										
										
										 int subthreeapprstrength=0;	
										 int subthreepresent=0;
										 float subthreesalary=0;
										
								
									    LinkedList man=new LinkedList();
									    
									    int frmday=0;
									    int today=0;
									    int frmmon=0;
									    int tomon=0;
									    
									    String fromdate=help.getFromDate();
									    String todate=help.getFromDate();
									    
									    String from[]=fromdate.split("/");
									    frmday=Integer.parseInt(from[0]);
									    frmmon=Integer.parseInt(from[1]);
									    
									    String to[]=todate.split("/");
									    today=Integer.parseInt(to[0]);
									    tomon=Integer.parseInt(to[1]);
									    
									    String subdptid="";
									    int chk=0;
									    
									    
									    
										
										
										this.query1=ACtualsubdept;
										this.query2=ACtualrepgrp;
										

				
				request.setAttribute("result", "result");
				try {
					cc.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				try {
					rs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					subrs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs115.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					reprs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return mapping.findForward("manpowerreport");	
	
	
		
	}
	public ActionForward DaywisemanpowerreportSearch(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {


		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
		
		Calendar mycal = Calendar.getInstance();
		help.setFrommonth(Integer.toString(mycal.get(Calendar.MONTH) + 1));
		
		
		
		
		
		ArrayList shiftList=new ArrayList();
		ArrayList shiftLabelList=new ArrayList();
		ResultSet rs115 = ad.selectQuery("select shift_code," +
				"Shift_Name from EMP_SHIFT_MASTER order by Shift_Name"); 
				try {
					while(rs115.next()) {
						shiftList.add(rs115.getString("shift_code"));
						shiftLabelList.add(rs115.getString("Shift_Name"));
					}
					rs115.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setShiftList(shiftList);
				help.setShiftLabelList(shiftLabelList);
		
				String cmpcode="";
				int id=user.getGroupId();
				String cmp[]=new String[0]; 
				String locations="";
				
				String aa="select * from user_group where id='"+id+"'";
				ResultSet cc=ad.selectQuery(aa);
				try {
					if(cc.next())
					{
						cmpcode=cc.getString("Attendance_Loc");
						
						if(cmpcode.contains(","))
						{
						 cmp=cmpcode.split(",");
						
						for(int b=0;b<cmp.length;b++)
						{
							locations=locations+"'"+cmp[b]+"',";
						}
						
						locations=locations.substring(0, locations.length()-1);
						}
						else
						{
							locations="'"+cmpcode+"'";
						}
					}
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
		
		   ArrayList locationList=new ArrayList();
					ArrayList locationLabelList=new ArrayList();
					ResultSet rs11 = ad.selectQuery("select LOCID," +
							"LOCNAME,location_code from location where location_code in ("+locations+")"); 
							try {
								while(rs11.next()) {
									locationList.add(rs11.getString("location_code"));
									locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
									
								}
								rs11.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							help.setLocationIdList(locationList);
							help.setLocationLabelList(locationLabelList);
	
		
	
		
					
	
				ArrayList deptList=new ArrayList();
				ArrayList deptLabelList=new ArrayList();
				ResultSet rs15 = ad.selectQuery("select dptid," +
						"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
						try {
							while(rs15.next()) {
								deptList.add(rs15.getString("dptid"));
								deptLabelList.add(rs15.getString("DPTLTXT"));
							}
							rs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						help.setDeptList(deptList);
						help.setDeptLabelList(deptLabelList);
						
						/*//subdep
						ArrayList subdeptList=new ArrayList();
						ArrayList subdeptLabelList=new ArrayList();
						ResultSet subrs15 = ad.selectQuery("select SDPTID," +
								"SDPTID_LTXT from SUBDEPARTMENT order by SDPTID_LTXT "); 
								try {
									while(subrs15.next()) {
										subdeptList.add(subrs15.getString("SDPTID"));
										subdeptLabelList.add(subrs15.getString("SDPTID_LTXT"));
									}
									subrs15.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								
								help.setSubdeptList(subdeptList);
								help.setSubdeptLabelList(subdeptLabelList);*/
								
						//subdep
						//ArrayList<String> deptList=new ArrayList<String>();
						ArrayList<String> subdeptList=new ArrayList<String>();
						ArrayList subdeptLabelList=new ArrayList();
						ResultSet subrs15 = ad.selectQuery("select SDPTID," +
								"SDPTID_LTXT from SUBDEPARTMENT order by SDPTID_LTXT "); 
								try {
									while(subrs15.next()) {
										subdeptList.add(subrs15.getString("SDPTID"));
										subdeptLabelList.add(subrs15.getString("SDPTID_LTXT"));
									}
									subrs15.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								
								help.setSubdeptList(subdeptList);
								help.setSubdeptLabelList(subdeptLabelList);
								
								
								
								
								//Subdept
						String ACtualsubdept="";
								if(subdeptList!=null)
								{	
											
									String[] dept = subdeptList.toArray(new String[subdeptList.size()]);
										StringBuffer reqsdept = new StringBuffer();
									for (int i = 0; i < dept.length; i++) {
										reqsdept.append("'"+dept[i]+"'" + ",");
									}
									ACtualsubdept= reqsdept.substring(0, reqsdept.length() -1).toString();
								}
								
								
								/*//repgrp
								ArrayList repgrptList=new ArrayList();
								ArrayList repgrpLabelList=new ArrayList();
								ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
										"Grp_LTXT from REPORTING_GROUP where  Grp_ID not in(1,2,3,7)   order by Grp_LTXT "); 
										try {
											while(reprs15.next()) {
												repgrptList.add(reprs15.getString("Grp_ID"));
												repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
											}
											reprs15.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										
										help.setRepgrpList(repgrptList);
										help.setRepgrpLabelList(repgrpLabelList);*/
										
								//repgrp
								ArrayList<String> repgrptList=new ArrayList<String>();
								ArrayList repgrpLabelList=new ArrayList();
								
								String repgr=request.getParameter("loc");
								ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
										"Grp_LTXT from REPORTING_GROUP where location='"+repgr+"' and Grp_ID not in(1,2,3,7)   order by Grp_LTXT "); 
										try {
											while(reprs15.next()) {
												repgrptList.add(reprs15.getString("Grp_ID"));
												repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
											}
											reprs15.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										
										help.setRepgrpList(repgrptList);
										help.setRepgrpLabelList(repgrpLabelList);
										
										//Reporting group
																	String ACtualrepgrp="";
																		if(repgrptList!=null)
																		{	
																					
																			String[] dept = repgrptList.toArray(new String[repgrptList.size()]);
																				StringBuffer reqrsdept = new StringBuffer();
																			for (int i = 0; i < dept.length; i++) {
																				reqrsdept.append("'"+dept[i]+"'" + ",");
																			}
																			ACtualrepgrp= reqrsdept.substring(0, reqrsdept.length() -1).toString();
																		}
								
										ArrayList payGroupList=new ArrayList();
										ArrayList payGroupLabelList=new ArrayList();
										ResultSet rs12 = ad.selectQuery("select Paygroup," +
										"Long_Desc from Paygroup_Master"); 
										try {
											while(rs12.next()) {
												payGroupList.add(rs12.getString("Paygroup"));
												payGroupLabelList.add(rs12.getString("Long_Desc"));
											}
											rs12.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										
										help.setPayGroupList(payGroupList);
										help.setPayGroupLabelList(payGroupLabelList);	
								
										//dept
										String ACtualdept="";
									    if(help.getDeptArray()!=null)
									    {	
									    String[] dept = help.getDeptArray();
									    
									    StringBuffer reqdept = new StringBuffer();
										for (int i = 0; i < dept.length; i++) {
											reqdept.append("'"+dept[i]+"'" + ",");
										}
										 ACtualdept= reqdept.substring(0, reqdept.length() - 1).toString();
									    }
										
									    
									   /* //subdept
									    
									    String ACtualsubdept="";
									    if(help.getSubdeptArray()!=null)
									    {	
									    String[] subdept = help.getSubdeptArray();
									    
									    StringBuffer reqsubdept = new StringBuffer();
										for (int i = 0; i < subdept.length; i++) {
											reqsubdept.append("'"+subdept[i]+"'" + ",");
										}
										ACtualsubdept= reqsubdept.substring(0, reqsubdept.length() - 1).toString();
									    }*/
									    
									    
									 
                                       /* //reporting
									    
									    String ACtualrepgrp="";
									    if(help.getRepgrpArray()!=null)
									    {	
									    String[] repgrp = help.getRepgrpArray();
									    
									    StringBuffer reqrepgrp = new StringBuffer();
										for (int i = 0; i < repgrp.length; i++) {
											reqrepgrp.append("'"+repgrp[i]+"'" + ",");
										}
										ACtualrepgrp= reqrepgrp.substring(0, reqrepgrp.length() - 1).toString();
									    }*/
									    
										 int staffapprstrength=0;
										 int staffavailstrength=0;
										 int staffpresent=0;
										 float staffsalary=0;
										
										 int techstaffapprstrength=0;
										 int techstaffavailstrength=0;
										 int techstaffpresent=0;
										 float techstaffsalary=0;
										
										
										 int apprenstaffapprstrength=0;
										 int apprenstaffavailstrength=0;
										 int apprenstaffpresent=0;
										 float apprenstaffsalary=0;
										
										 int contractapprstrength=0;

										 int skilledpresent=0;
										 int unskilledpresent=0;
										 int semiskilledpresent=0;
										 int securitypresent=0;
										 int projectspresent=0;
										
										
										 int totcontractpresent=0;
										 int totcontractSalary=0;
										
										
										 int houseapprstrength=0;	
										 int housepresent=0;
										 float housesalary=0;
										
										 int totpresent=0;
										 float totsalary=0;
										
										
										 int threeapprstrength=0;	
										 int threepresent=0;
										 float threesalary=0;
										
										///grand
										
										 int grnstaffapprstrength=0;
										 int grnstaffavailstrength=0;
										 int grnstaffpresent=0;
										 float grnstaffsalary=0;
										
										 int grntechstaffapprstrength=0;
										 int grntechstaffavailstrength=0;
										 int grntechstaffpresent=0;
										 float grntechstaffsalary=0;
										
										
										 int grnapprenstaffapprstrength=0;
										 int grnapprenstaffavailstrength=0;
										 int grnapprenstaffpresent=0;
										 float grnapprenstaffsalary=0;
										
										 int grncontractapprstrength=0;

										 int grnskilledpresent=0;
										 int grnunskilledpresent=0;
										 int grnsemiskilledpresent=0;
										 int grnsecuritypresent=0;
										 int grnprojectspresent=0;
										
										
										 int grntotcontractpresent=0;
										 int grntotcontractSalary=0;
										
										
										 int grnhouseapprstrength=0;	
										 int grnhousepresent=0;
										 float grnhousesalary=0;
										
										 int grntotpresent=0;
										 float grntotsalary=0;
										
										
										 int grnthreeapprstrength=0;	
										 int grnthreepresent=0;
										 float grnthreesalary=0;
										 
										 
										 //subtotal
										 
											
										 int substaffapprstrength=0;
										 int substaffavailstrength=0;
										 int substaffpresent=0;
										 float substaffsalary=0;
										
										 int subtechstaffapprstrength=0;
										 int subtechstaffavailstrength=0;
										 int subtechstaffpresent=0;
										 float subtechstaffsalary=0;
										
										
										 int subapprenstaffapprstrength=0;
										 int subapprenstaffavailstrength=0;
										 int subapprenstaffpresent=0;
										 float subapprenstaffsalary=0;
										
										 int subcontractapprstrength=0;

										 int subskilledpresent=0;
										 int subunskilledpresent=0;
										 int subsemiskilledpresent=0;
										 int subsecuritypresent=0;
										 int subprojectspresent=0;
										
										
										 int subtotcontractpresent=0;
										 int subtotcontractSalary=0;
										
										
										 int subhouseapprstrength=0;	
										 int subhousepresent=0;
										 float subhousesalary=0;
										
										 int subtotpresent=0;
										 float subtotsalary=0;
										
										
										 int subthreeapprstrength=0;	
										 int subthreepresent=0;
										 float subthreesalary=0;
										
								
									    LinkedList man=new LinkedList();
									    
									    int frmday=0;
									    int today=0;
									    int frmmon=0;
									    int tomon=0;
									    
									    String fromdate=help.getFromDate();
									    String todate=help.getFromDate();
									    
									    String from[]=fromdate.split("/");
									    frmday=Integer.parseInt(from[0]);
									    frmmon=Integer.parseInt(from[1]);
									    
									    String to[]=todate.split("/");
									    today=Integer.parseInt(to[0]);
									    tomon=Integer.parseInt(to[1]);
									    
									    String subdptid="";
									    int chk=0;
									    
									    
									    
										
										
										this.query1=ACtualsubdept;
										this.query2=ACtualrepgrp;
										

				
				request.setAttribute("result", "result");
				try {
					cc.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				try {
					rs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					subrs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs115.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					reprs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return mapping.findForward("Daywisemanpowerreport");	
	
	
		
	}
	
	
	public ActionForward departmentSummaryreportEXE(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {




		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
		
		Calendar mycal = Calendar.getInstance();
		help.setFrommonth(Integer.toString(mycal.get(Calendar.MONTH) + 1));
		
		
	
		
							
							float working=0;
							float wo=0;
							 float od=0;							
							 float cl=0;
							 float sl=0;
							 float el=0;
							 float lp=0;
							 float co=0;
							 float ml=0;
							 float ph=0;
							
							
							 float leave_Availed=0;
							 float total_worked=0;
							 float week_off_earned=0;
							 float paid_days=0;
							 float worK_hrs=0;
						
							 
								
								
										help.setMonth(request.getParameter("month"));
										help.setYear(request.getParameter("year"));
										help.setLocationId(request.getParameter("loc"));
									
								
								
										String[] monthName = {"","JAN", "FEB",
														  "MAR", "APR", "MAY", "JUN", "JUL",
														  "AUG", "SEP", "OCT", "NOV",
														  "DEC"
														  };
									    
										ArrayList list1=new ArrayList();
										ArrayList list2=new ArrayList();
										ArrayList deptlist = new ArrayList();
										
									
										help.setSummbrkup(request.getParameter("summbrkup"));
										
										if( help.getSummbrkup().equalsIgnoreCase("Department Wise") )
										{
										
											
											String list="select distinct DEPARTMENT.DPTID,SUBDEPARTMENT.SDPTID,Grp_ID,DPTSTXT,SDPTID_STXT,Grp_STXT  from DEPARTMENT,SUBDEPARTMENT,"
													+ "REPORTING_GROUP,emp_official_info where LOCID='"+request.getParameter("loc")+"' and emp_official_info.DPTID=DEPARTMENT.DPTID and emp_official_info.SDPTID=SUBDEPARTMENT.SDPTID "
													+ "and emp_official_info.Reporting_Grp=REPORTING_GROUP.Grp_ID  and DEPARTMENT.dptid in ("+query1+") and SUBDEPARTMENT.SDPTID in ("+query2+") and REPORTING_GROUP.Grp_ID in("+query3+") order by DPTID,SDPTID,Grp_ID";
												ResultSet rs1 = ad.selectQuery(list);
											try {
												while(rs1.next())
												{
													HRApprovalForm help1 = new HRApprovalForm();
													help1.setDepartment(rs1.getString("DPTID"));
													help1.setSubdepartment(rs1.getString("SDPTID"));
													help1.setRepgrp(rs1.getString("Grp_ID"));
													help1.setDeptFrom(rs1.getString("DPTSTXT"));
													help1.setDeptTo(rs1.getString("SDPTID_STXT"));
													help1.setDesgTo(rs1.getString("Grp_STXT"));
													deptlist.add(help1);
												}
											} catch (SQLException e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
											
											try {
												rs1.close();
											} catch (SQLException e1) {
												// TODO Auto-generated catch block
												e1.printStackTrace();
											}
											request.setAttribute("deptlist", deptlist);
											
								
	/*String query1="  select 'd' as prefix, count(k.PERNR) as nofemp,k.SDPTID,k.SDPTID_STXT,SUM(k.od+k.wo+k.ph) as paid,sum(k.od) as od,sum(k.lp) as lp,sum(k.wo) as wo,"
	+ "SUM(k.ph) as ph,sum(k.cl) as cl,sum(k.sl) as sl,sum(k.el) as el,sum(k.co) as co,sum(k.Ml) as ml  from (SELECT emp_official_info.LOCID,"
	+ "emp_official_info.Pernr,emp_official_info.SDPTID,sub.SDPTID_STXT,(LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'PP', '')))*0.25 as od,"
	+ "(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as ab,(LEN(day) - LEN(REPLACE(day, 'WO', '')))*0.25 as wo,(LEN(day) - LEN(REPLACE(day, 'PH', '')))*0.25 as ph, "
	+ "(LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl, (LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl, (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL, "
	+ "(LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as LP, (LEN(day) - LEN(REPLACE(day, 'CO', '')))*0.25 as CO, "
	+ "(LEN(day) - LEN(REPLACE(day, 'ML', '')))*0.25 as ML   from( select 	"+currentmonthdays(help.getYear(), help.getMonth(), 0)+" as day,Pernr  from EMP_IN_OUT_Status where   month ='"+help.getMonth()+"' and year ='"+help.getYear()+"')t,"
	+ "emp_official_info,SUBDEPARTMENT as sub where t.Pernr=emp_official_info.PERNR  and sub.SDPTID=emp_official_info.SDPTID and emp_official_info.LOCID='"+help.getLocationId()+"' and"
	+ " emp_official_info.ACTIVE=1 and emp_official_info.SDPTID in ("+query2+") )k group by k.SDPTID,k.SDPTID_STXT    union all  select 'tot' as prefix, count(k.PERNR) as "
	+ "nofemp,'','',SUM(k.od+k.wo+k.ph) as paid,sum(k.od) as od,sum(k.lp) as lp,sum(k.wo) as wo,SUM(k.ph) as ph,sum(k.cl) as cl,sum(k.sl) as sl,sum(k.el) as el,"
	+ "sum(k.co) as co,sum(k.Ml) as ml  from (SELECT emp_official_info.LOCID,emp_official_info.Pernr,emp_official_info.SDPTID,sub.SDPTID_STXT,"
	+ "(LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'PP', '')))*0.25 as od,(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as ab,"
	+ "(LEN(day) - LEN(REPLACE(day, 'WO', '')))*0.25 as wo,(LEN(day) - LEN(REPLACE(day, 'PH', '')))*0.25 as ph, (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl, "
	+ "(LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl, (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL, (LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as LP,"
	+ " (LEN(day) - LEN(REPLACE(day, 'CO', '')))*0.25 as CO, (LEN(day) - LEN(REPLACE(day, 'ML', '')))*0.25 as ML   from"
	+ "( select "+currentmonthdays(help.getYear(), help.getMonth(), 0)+" as day,Pernr  from EMP_IN_OUT_Status where   month ='"+help.getMonth()+"' and year ='"+help.getYear()+"')t"
	+ ",emp_official_info,SUBDEPARTMENT as sub where t.Pernr=emp_official_info.PERNR  and sub.SDPTID=emp_official_info.SDPTID and emp_official_info.LOCID='"+help.getLocationId()+"' and"
	+ " emp_official_info.ACTIVE=1 and emp_official_info.SDPTID in ("+query2+") )k ";*/
	
	
	String q="  select 'd' as prefix, count(k.PERNR) as nofemp,k.SDPTID,k.SDPTID_STXT,k.DPTID,k.DPTSTXT,k.Grp_ID,k.Grp_STXT,SUM(k.od+k.wo+k.ph) as paid,sum(k.od) as od,"
	+ "sum(k.lp) as lp,sum(k.wo) as wo,SUM(k.ph) as ph,sum(k.cl) as cl,sum(k.sl) as sl,sum(k.el) as el,sum(k.co) as co,sum(k.Ml) as ml  from  "
	+ " (SELECT emp_official_info.LOCID,emp_official_info.Pernr,emp_official_info.SDPTID,sub.SDPTID_STXT,dep.DPTID,dep.DPTSTXT,rep.Grp_ID,rep.Grp_STXT,"
	+ "(LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'PP', '')))*0.25 as od,(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as ab,"
	+ "(LEN(day) - LEN(REPLACE(day, 'WO', '')))*0.25 as wo,(LEN(day) - LEN(REPLACE(day, 'PH', '')))*0.25 as ph, (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl, "
	+ "(LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl, (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL, (LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25+"
	+ "(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as LP, (LEN(day) - LEN(REPLACE(day, 'CO', '')))*0.25 as CO, (LEN(day) - LEN(REPLACE(day, 'ML', '')))*0.25 as ML  "
	+ " from( select 	"+currentmonthdays(help.getYear(), help.getMonth(), 0)+" as day,Pernr from EMP_IN_OUT_Status where   month ='"+help.getMonth()+"' and year ='"+help.getYear()+"')t,emp_official_info,SUBDEPARTMENT as sub ,DEPARTMENT as dep,REPORTING_GROUP as rep  "
	+ "where t.Pernr=emp_official_info.PERNR   and rep.Grp_ID=emp_official_info.Reporting_Grp and dep.DPTID=emp_official_info.DPTID and sub.SDPTID=emp_official_info.SDPTID and"
	+ " emp_official_info.LOCID='"+help.getLocationId()+"' and emp_official_info.ACTIVE=1 and emp_official_info.SDPTID in ("+query2+") and emp_official_info.DPTID in("+query1+") and"
	+ " emp_official_info.Reporting_Grp in ("+query3+"))k group by k.SDPTID,k.SDPTID_STXT,k.DPTID,k.DPTSTXT,k.Grp_ID,k.Grp_STXT    "
	+ " union all  select 'tot' as prefix, count(k.PERNR) as nofemp,'','','','','','',SUM(k.od+k.wo+k.ph) as paid,sum(k.od) as od,sum(k.lp) as lp,sum(k.wo) as wo,SUM(k.ph) "
	+ "as ph,sum(k.cl) as cl,sum(k.sl) as sl,sum(k.el) as el,sum(k.co) as co,sum(k.Ml) as ml  from  "
	+ " (SELECT emp_official_info.LOCID,emp_official_info.Pernr,emp_official_info.SDPTID,sub.SDPTID_STXT,dep.DPTID,dep.DPTSTXT,rep.Grp_ID,rep.Grp_STXT,"
	+ "(LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'PP', '')))*0.25 as od,(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as ab,"
	+ "(LEN(day) - LEN(REPLACE(day, 'WO', '')))*0.25 as wo,(LEN(day) - LEN(REPLACE(day, 'PH', '')))*0.25 as ph, (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl, "
	+ "(LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl, (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL, (LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as LP, (LEN(day) - LEN(REPLACE(day, 'CO', '')))*0.25 as CO, (LEN(day) - LEN(REPLACE(day, 'ML', '')))*0.25 as ML "
	+ "  from( select "+currentmonthdays(help.getYear(), help.getMonth(), 0)+" as day,Pernr  from EMP_IN_OUT_Status where    month ='"+help.getMonth()+"' and year ='"+help.getYear()+"')t,emp_official_info,SUBDEPARTMENT as sub,DEPARTMENT as dep,REPORTING_GROUP as rep    where t.Pernr=emp_official_info.PERNR  and rep.Grp_ID=emp_official_info.Reporting_Grp and dep.DPTID=emp_official_info.DPTID and sub.SDPTID=emp_official_info.SDPTID and emp_official_info.LOCID='"+help.getLocationId()+"' and emp_official_info.ACTIVE=1 and emp_official_info.SDPTID in"
	+ " ("+query2+")and emp_official_info.DPTID in("+query1+") and emp_official_info.Reporting_Grp in ("+query3+") )k ";						
							ResultSet rs20 = ad.selectQuery(q);
							
											try {
												while(rs20.next())
												{
													HRApprovalForm app=new HRApprovalForm();
													
													app.setStatus(rs20.getString("prefix"));
													app.setEmployeeno(rs20.getString("nofemp"));
													app.setDeptTo(rs20.getString("SDPTID_STXT"));
													app.setDepartment(rs20.getString("DPTID"));
													app.setSubdepartment(rs20.getString("SDPTID"));
													app.setRepgrp(rs20.getString("Grp_ID"));
													app.setPaid_days(rs20.getFloat("paid"));
													app.setOd(rs20.getFloat("Od"));
													app.setCl(rs20.getFloat("cl"));
													app.setSl(rs20.getFloat("sl"));
													app.setEl(rs20.getFloat("el"));					
													app.setLp(rs20.getFloat("lp"));						
													app.setCo(rs20.getFloat("Co"));
													app.setMl(rs20.getFloat("Ml"));
													app.setPh(rs20.getFloat("PH"));
													app.setWo(rs20.getFloat("wo"));
											
												
													
													list1.add(app);
												}
											} catch (SQLException e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
											try {
												rs20.close();
											} catch (SQLException e1) {
												// TODO Auto-generated catch block
												e1.printStackTrace();
											}		
											request.setAttribute("list1", list1);
										}
										
										if( help.getSummbrkup().equalsIgnoreCase("Employee Wise") )
										
										{
											String list="select distinct DEPARTMENT.DPTID,SUBDEPARTMENT.SDPTID,Grp_ID,DPTSTXT,SDPTID_STXT,Grp_STXT,CONTRACTOR_MASTER.Con_ID,Con_Name  from DEPARTMENT,SUBDEPARTMENT,"
													+ "REPORTING_GROUP,emp_official_info,CONTRACTOR_MASTER where LOCID='"+request.getParameter("loc")+"' and emp_official_info.DPTID=DEPARTMENT.DPTID and emp_official_info.SDPTID=SUBDEPARTMENT.SDPTID "
													+ "and emp_official_info.Reporting_Grp=REPORTING_GROUP.Grp_ID and CONTRACTOR_MASTER.Con_ID=emp_official_info.Con_ID and DEPARTMENT.dptid in ("+query1+") and SUBDEPARTMENT.SDPTID in ("+query2+") "
															+ "and REPORTING_GROUP.Grp_ID in("+query3+")   and CONTRACTOR_MASTER.Con_ID in("+query4+") order by DPTID,SDPTID,Grp_ID,Con_ID";
												ResultSet rs1 = ad.selectQuery(list);
											try {
												while(rs1.next())
												{
													HRApprovalForm help1 = new HRApprovalForm();
													help1.setDepartment(rs1.getString("DPTID"));
													help1.setSubdepartment(rs1.getString("SDPTID"));
													help1.setRepgrp(rs1.getString("Grp_ID"));
													help1.setDeptFrom(rs1.getString("DPTSTXT"));
													help1.setDeptTo(rs1.getString("SDPTID_STXT"));
													help1.setDesgTo(rs1.getString("Grp_STXT"));
													help1.setCongrp(rs1.getString("Con_ID"));
													help.setContentDescription(rs1.getString("Con_Name"));
													deptlist.add(help1);
												}
											} catch (SQLException e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
											
											try {
												rs1.close();
											} catch (SQLException e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
											request.setAttribute("deptlist", deptlist);
											

											/*String list="select distinct SUBDEPARTMENT.SDPTID,SDPTID_STXT from SUBDEPARTMENT,"
													+ "emp_official_info where LOCID='"+help.getLocationId()+"' and emp_official_info.SDPTID=SUBDEPARTMENT.SDPTID "
													+ "and SUBDEPARTMENT.SDPTID in ("+query2+")  order by SDPTID";
											
											ResultSet rs1 = ad.selectQuery(list);
											try {
												while(rs1.next())
												{
													HRApprovalForm help1 = new HRApprovalForm();
												
													help1.setSubdepartment(rs1.getString("SDPTID"));
												
													help1.setDeptTo(rs1.getString("SDPTID_STXT"));
										
													deptlist.add(help1);
												}
											} catch (SQLException e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
											
											request.setAttribute("deptlist", deptlist);*/
											
											float grandsal=0;
											
											String query1="    select * from(select 'd' as prefix,(k.Con_SAL*(SUM(k.od+k.wo+k.ph))) as monsal, k.PERNR as emp,k.EMP_FULLNAME,k.SDPTID,k.SDPTID_STXT,k.Grp_ID,k.Grp_STXT,k.Con_ID,k.Con_Name,SUM(k.od+k.wo+k.ph) as paid,sum(k.od) as od,sum(k.lp) as lp,sum(k.wo) as wo,"
											+ "SUM(k.ph) as ph,sum(k.cl) as cl,sum(k.sl) as sl,sum(k.el) as el,sum(k.co) as co,sum(k.Ml) as ml  from (SELECT emp_official_info.Con_SAL,emp_official_info.LOCID,"
											+ "emp_official_info.EMP_FULLNAME,emp_official_info.Pernr,emp_official_info.SDPTID,sub.SDPTID_STXT,rep.Grp_ID,rep.Grp_STXT,con.Con_ID,con.Con_Name,(LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'PP', '')))*0.25 as od,"
											+ "(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as ab,(LEN(day) - LEN(REPLACE(day, 'WO', '')))*0.25 as wo,(LEN(day) - LEN(REPLACE(day, 'PH', '')))*0.25 as ph, "
											+ "(LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl, (LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl, (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL, "
											+ "(LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as LP, (LEN(day) - LEN(REPLACE(day, 'CO', '')))*0.25 as CO, "
											+ "(LEN(day) - LEN(REPLACE(day, 'ML', '')))*0.25 as ML   from( select 	"+currentmonthdays(help.getYear(), help.getMonth(), 0)+" as day,Pernr  from EMP_IN_OUT_Status where   month ='"+help.getMonth()+"' and year ='"+help.getYear()+"')t,"
											+ "emp_official_info,SUBDEPARTMENT as sub,REPORTING_GROUP as rep,CONTRACTOR_MASTER as con where  con.Con_ID=emp_official_info.Con_ID and  t.Pernr=emp_official_info.PERNR and rep.Grp_ID=emp_official_info.Reporting_Grp and sub.SDPTID=emp_official_info.SDPTID and emp_official_info.LOCID='"+help.getLocationId()+"' and"
											+ " emp_official_info.ACTIVE=1 and emp_official_info.SDPTID in ("+query2+") AND emp_official_info.Reporting_Grp in ("+query3+")  AND emp_official_info.Con_ID in ("+query4+"))k group by  k.Con_SAL,k.PERNR,k.EMP_FULLNAME,k.SDPTID,k.SDPTID_STXT,k.Grp_ID,k.Grp_STXT,k.Con_ID,k.Con_Name )j "
										+ "left outer join (  select convert(nvarchar(10),floor(sum(datediff(minute, '0:00:00', convert(time,ot) ))/60))+':'+convert(nvarchar(10),"
										+ "sum(datediff(minute, '0:00:00', convert(time,ot) ))%60) as ot,pernr  from Report_Daily_wise where  month(Date)="+help.getMonth()+" and year(date)="+help.getYear()+" group by pernr )"
										+ " as ot on ot.Pernr=j.emp"
										+ " union all"
										+ "  select * from(select 'tot' as prefix,'' as monsal,'' as emp,'' as EMP_FULLNAME ,'' as a,'' as b,'' as c,'' as d,'' as e,'' as f,SUM(k.od+k.wo+k.ph) as paid"
										+ ",sum(k.od) as od,sum(k.lp) as lp,sum(k.wo) as wo,SUM(k.ph) as ph,sum(k.cl) as cl,sum(k.sl) as sl,sum(k.el) as el,sum(k.co)"
										+ " as co,sum(k.Ml) as ml,'' as ot,'' as pernr  from (SELECT emp_official_info.LOCID,emp_official_info.EMP_FULLNAME,"
										+ "emp_official_info.Pernr,emp_official_info.SDPTID,sub.SDPTID_STXT,rep.Grp_ID,rep.Grp_STXT,con.Con_ID,con.Con_Name,(LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'PP', '')))*0.25 as od,"
										+ "(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as ab,(LEN(day) - LEN(REPLACE(day, 'WO', '')))*0.25 as wo,(LEN(day) - LEN(REPLACE(day, 'PH', '')))*0.25 as ph,"
										+ " (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl, (LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl, (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL, "
										+ "(LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as LP, (LEN(day) - LEN(REPLACE(day, 'CO', '')))*0.25 as CO, "
										+ "(LEN(day) - LEN(REPLACE(day, 'ML', '')))*0.25 as ML  "
										+ " from( select 	"+currentmonthdays(help.getYear(), help.getMonth(), 0)+" as day,Pernr"
										+ "  from EMP_IN_OUT_Status where   month ="+help.getMonth()+"and year ="+help.getYear()+")t,emp_official_info,SUBDEPARTMENT as sub,REPORTING_GROUP as rep,CONTRACTOR_MASTER as con where  con.Con_ID=emp_official_info.Con_ID and t.Pernr=emp_official_info.PERNR  "
										+ "and sub.SDPTID=emp_official_info.SDPTID and rep.Grp_ID=emp_official_info.Reporting_Grp and emp_official_info.LOCID='"+help.getLocationId()+"' and emp_official_inf"
										+ "o.ACTIVE=1 and emp_official_info.SDPTID in "
										+ "("+query2+") AND emp_official_info.Reporting_Grp in ("+query3+")  AND emp_official_info.Con_ID in ("+query4+") )k    )j  ";
										
																
																			ResultSet rs20 = ad.selectQuery(query1);
																					try {
																						while(rs20.next())
																						{
																							HRApprovalForm app=new HRApprovalForm();
																							app.setRepgrp(rs20.getString("Grp_ID"));
																							app.setStatus(rs20.getString("prefix"));
																							app.setEmployeeno(rs20.getString("emp"));
																							app.setEmployeeName(rs20.getString("EMP_FULLNAME"));
																							app.setSubdepartment(rs20.getString("SDPTID"));
																							app.setPaid_days(rs20.getFloat("paid"));
																							app.setOd(rs20.getFloat("Od"));
																							app.setCl(rs20.getFloat("cl"));
																							app.setSl(rs20.getFloat("sl"));
																							app.setEl(rs20.getFloat("el"));					
																							app.setLp(rs20.getFloat("lp"));						
																							app.setCo(rs20.getFloat("Co"));
																							app.setMl(rs20.getFloat("Ml"));
																							app.setPh(rs20.getFloat("PH"));
																							app.setWo(rs20.getFloat("wo"));
																					        app.setOt(rs20.getString("ot"));
																					        app.setConsal(rs20.getFloat("monsal"));
																					        grandsal=grandsal+rs20.getFloat("monsal");
																							
																							list2.add(app);
																						}
																					} catch (SQLException e) {
																						// TODO Auto-generated catch block
																						e.printStackTrace();
																					}
																					
																					try {
																						rs20.close();
																					} catch (SQLException e) {
																						// TODO Auto-generated catch block
																						e.printStackTrace();
																					}
																					finally{
																		    			query1="";
																		    			query2="";
																		    			query3="";
																		    			query4="";
																		    			query5="";
																		    			query6="";
																		    		}	
																					request.setAttribute("list2", list2);
																			
																					help.setConsal(grandsal);
											
										}
										
															
									
								
				help.setMonth(monthName[Integer.parseInt(help.getMonth())]);
					
				return mapping.findForward("displaydeptSummaryreport");	
	
	
		
	
		
	
	}
	
	public ActionForward contractreportEXE(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {



		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
		
		Calendar mycal = Calendar.getInstance();
		help.setFrommonth(Integer.toString(mycal.get(Calendar.MONTH) + 1));
		
		
	
	
		
		
							
							float working=0;
							float wo=0;
							 float od=0;							
							 float cl=0;
							 float sl=0;
							 float el=0;
							 float lp=0;
							 float co=0;
							 float ml=0;
							 float ph=0;
							
							
							 float leave_Availed=0;
							 float total_worked=0;
							 float week_off_earned=0;
							 float paid_days=0;
							 float worK_hrs=0;
						
						
								
								//repgrp
								ArrayList repgrptList=new ArrayList();
								ArrayList repgrpLabelList=new ArrayList();
								ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
										"Grp_LTXT from REPORTING_GROUP where  Grp_ID not in(1,2,3)   order by Grp_LTXT "); 
										try {
											while(reprs15.next()) {
												repgrptList.add(reprs15.getString("Grp_ID"));
												repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
											}
											reprs15.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										
										help.setRepgrpList(repgrptList);
										help.setRepgrpLabelList(repgrpLabelList);
										
										//cat
										
										ArrayList categoryList=new ArrayList();
										ArrayList categoryLabelList=new ArrayList();
										ResultSet rs13 = ad.selectQuery("select STAFFCAT," +
												"CATLTEXT from category order by STAFFCAT "); 
												try {
													while(rs13.next()) {
														categoryList.add(rs13.getString("STAFFCAT"));
														categoryLabelList.add(rs13.getString("CATLTEXT"));
													}
													rs13.close();
												} catch (SQLException e) {
													// TODO Auto-generated catch block
													e.printStackTrace();
												}
												
												help.setCategoryList(categoryList);
												help.setCategoryLabelList(categoryLabelList);
								
										help.setMonth(request.getParameter("month"));
										help.setYear(request.getParameter("year"));
										help.setLocationId(request.getParameter("loc"));
								
								
										String[] monthName = {"","JAN", "FEB",
														  "MAR", "APR", "MAY", "JUN", "JUL",
														  "AUG", "SEP", "OCT", "NOV",
														  "DEC"
														  };
									    
										ArrayList list1=new ArrayList();
										ArrayList list2=new ArrayList();
										
										
										String ACtualcat=this.query1;
										String ACtualrepgrp=this.query2;
									
										
										String query1="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master where Location.LOCATION_CODE=emp_official_info.LOCID and "
												+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP ";

													
										if(!help.getLocationId().equalsIgnoreCase(""))
										{
											query1=query1+" and emp_official_info.LOCID = '"+help.getLocationId()+"' ";
										
										}
											
										

										if(!ACtualcat.equalsIgnoreCase(""))
										{
											query1=query1+" and emp_official_info.STAFFCAT in ("+ACtualcat+")  ";
										
										}

										if(!ACtualrepgrp.equalsIgnoreCase(""))
										{
											query1=query1+" and emp_official_info.Reporting_Grp in ("+ACtualrepgrp+")  ";
										
										}
										
										
												query1=query1+" and ACTIVE = 1 order by pernr";
												
												
												////  procedure to find weekoff	earned
												
												ResultSet rsproc = ad.selectQuery(query1);
												try {
													while(rsproc.next())
													{
														System.out
																.println(rsproc.getString("pernr"));
														int cou=0;
														String c="select count(*)  from EMP_CAL where pernr='"+rsproc.getString("pernr")+"'";
														ResultSet rsc = ad.selectQuery(c);
														if(rsc.next())
														{
                                                        cou=rsc.getInt(1);
														}
													
															rsc.close();
														
														if(cou==0)
														{
														
														
													String q2="EXEC weekly_off '"+help.getMonth()+"','"+help.getYear()+"','"+rsproc.getString("pernr")+"','Sunday'";
													int k1=ad.SqlExecuteUpdate(q2);
														}
														else
														{
															String q="";
															String week="select top 1 datename(dw,'"+help.getYear()+"'+'-'+'"+help.getMonth()+"'+'-'+convert(nvarchar(10),day)) as weekday from EMP_CAL where Pernr='"+rsproc.getString("pernr")+"' and "+monthName[Integer.parseInt(help.getMonth())]+"='WO' order by day";
															ResultSet rsweek = ad.selectQuery(week);
															if(rsweek.next())
															{
	                                                        q=rsweek.getString("weekday");
															}rsweek.close();
															
															String q2="EXEC weekly_off '"+help.getMonth()+"','"+help.getYear()+"','"+rsproc.getString("pernr")+"','"+q+"'";
															int k1=ad.SqlExecuteUpdate(q2);	
														}
														
														
														
													}
												} catch (SQLException e1) {
													// TODO Auto-generated catch block
													e1.printStackTrace();
												}
												
										///working days		
												
									String	ws= " select sum(case when "+monthName[Integer.parseInt(help.getMonth())]+" ='w' then 1 else 0 end  )as working"
											+ " from "+getTableName(help.getLocationId())+" where cyear = '"+help.getYear()+"'  ";
									
									ResultSet rs18 = ad.selectQuery(ws); 	
									
									try {
										if(rs18.next())
										{
										
											help.setWorking(rs18.getFloat("working"));
										
										}
									} catch (SQLException e1) {
										// TODO Auto-generated catch block
										e1.printStackTrace();
									}
										
									int j=0;
									ResultSet rs19 = ad.selectQuery(query1);
									try {
										while(rs19.next())
										{
											
											conn=AttConnectionFactory.getConnection();
											HRApprovalForm app =new HRApprovalForm();
											j++;
											
											
											
											app.setEmployeeno(rs19.getString("pernr"));
											app.setEmployeeName(rs19.getString("EMP_FULLNAME"));
											app.setDepartment(rs19.getString("DPTSTXT"));
											app.setDesignation(rs19.getString("DSGSTXT"));
											app.setPaygrp(rs19.getString("Paygroup"));
											app.setPayGrpTo(rs19.getString("Short_desc"));
											app.setWorking(help.getWorking());
											working=working+help.getWorking();
											String a="";
											
									
												
									a="  SELECT l.totwrkhrs,k.sum,	"
									+ "(LEN(day) - LEN(REPLACE(day, 'WO', '')))*0.25 as WO,"
									+ "(LEN(day) - LEN(REPLACE(day, 'PH', '')))*0.25 as PH,"
									+ " (LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25 as od,"
									+ " (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl,"
									+ " (LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl,"
									+ " (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL,"
									+ " (LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as LP,"
									+ " (LEN(day) - LEN(REPLACE(day, 'CO', '')))*0.25 as CO,"
									+ " (LEN(day) - LEN(REPLACE(day, 'ML', '')))*0.25 as ML"
									+ " from( "
									+ "select "+currentmonthdays(help.getYear(), help.getMonth(), 0)+" as day "
								    + " from EMP_IN_OUT_Status where pernr='"+rs19.getString("pernr")+"' and month ='"+help.getMonth()+"' and year ='"+help.getYear()+"')t  "
									+ " , (select Weekly_oFF as sum from EMP_IN_OUT_Status where pernr='"+rs19.getString("pernr")+"' and month ='"+help.getMonth()+"' and year ='"+help.getYear()+"')k , "
									+ "(select floor(sum((convert(int, left(total,CHARINDEX(':',total)-1))*60  + convert(int,SUBSTRING(total,CHARINDEX(':',total)+1,LEN(total)))))/60) as totwrkhrs "
									+ "from Report_Daily_wise where pernr ='"+rs19.getString("pernr")+"' and month(date)='"+help.getMonth()+"' and year(date)='"+help.getYear()+"'and total not like '%-%' )l";									
											
								
									ResultSet rs20 = ad.selectQuery(a);
											if(rs20.next())
											{
												
												System.out.println(rs19.getString("pernr"));
												app.setOd(rs20.getFloat("Od"));
												app.setCl(rs20.getFloat("cl"));
												app.setSl(rs20.getFloat("sl"));
												app.setEl(rs20.getFloat("el"));					
												app.setLp(rs20.getFloat("lp"));						
												app.setCo(rs20.getFloat("Co"));
												app.setMl(rs20.getFloat("Ml"));
												app.setPh(rs20.getFloat("PH"));
												app.setWo(rs20.getFloat("wo"));
												app.setLeave_Availed(rs20.getFloat("cl")+rs20.getFloat("sl")+rs20.getFloat("el")+app.getLp()+rs20.getFloat("co")+rs20.getFloat("Ml"));
												app.setTotal_worked(help.getWorking()-(rs20.getFloat("cl")+rs20.getFloat("sl")+rs20.getFloat("el")+app.getLp()+rs20.getFloat("co")+rs20.getFloat("Ml")));
												app.setWeek_off_earned(rs20.getFloat("sum"));	
												app.setPaid_days(rs20.getFloat("CO")+rs20.getFloat("PH")+rs20.getFloat("OD")+app.getTotal_worked()+app.getWeek_off_earned());
												app.setWorK_hrs(rs20.getFloat("totwrkhrs"));
												
												 wo=wo+app.getWo();
												 od=od+app.getOd();							
												  cl=cl+app.getCl();
												  sl=sl+app.getSl();
												  el=el+app.getEl();
												  lp=lp+app.getLp();
												  co=co+app.getCo();
												  ml=ml+app.getMl();
												  ph=ph+app.getPh();
												
												
												  leave_Availed=leave_Availed+app.getLeave_Availed();
												  total_worked=total_worked+app.getTotal_worked();														  ;
												  week_off_earned=week_off_earned+app.getWeek_off_earned();
												  paid_days=paid_days+app.getPaid_days();
												  worK_hrs=worK_hrs+app.getWorK_hrs();
												
											
											}
														
											rs20.close();
											list1.add(app);
											
										}
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
									
									finally{
						    			query1="";
						    			query2="";
						    			query3="";
						    			query4="";
						    			query5="";
						    			query6="";
						    		}		
									
									HRApprovalForm he=new HRApprovalForm();
									he.setEmployeeno("TOTAL");
									he.setWorking(working);
									he.setOd(od);
									he.setCl(cl);
									he.setSl(sl);
									he.setEl(el);					
									he.setLp(lp);						
									he.setCo(co);
									he.setMl(ml);
									he.setPh(ph);
									he.setWo(wo);
									he.setLeave_Availed(leave_Availed);
									he.setTotal_worked(total_worked);
									he.setWeek_off_earned(week_off_earned);	
									he.setPaid_days(paid_days);
									he.setWorK_hrs(worK_hrs);
									list1.add(he);

				help.setMonth(monthName[Integer.parseInt(help.getMonth())]);
					request.setAttribute("list1", list1);
					try {
						rs18.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					try {
						rsproc.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					try {
						rs13.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					try {
						reprs15.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					try {
						rs19.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				return mapping.findForward("displaycontractreport");	
	
	
		
	
		
	}
	
	
	public ActionForward deptSummarySearch(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		



		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
		
		Calendar mycal = Calendar.getInstance();
		help.setFrommonth(Integer.toString(mycal.get(Calendar.MONTH) + 1));
		
		
		ArrayList yearList=new ArrayList();
		ResultSet rs17 = ad.selectQuery("select distinct year from EMP_IN_OUT_Status  order by year desc"); 
				try {
					while(rs17.next()) {
						yearList.add(rs17.getString("year"));
					}
					rs17.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setYearList(yearList);
		
		
				String cmpcode="";
				int id=user.getGroupId();
				String cmp[]=new String[0]; 
				String locations="";
				
				String aa="select * from user_group where id='"+id+"'";
				ResultSet cc=ad.selectQuery(aa);
				try {
					if(cc.next())
					{
						cmpcode=cc.getString("Attendance_Loc");
						
						if(cmpcode.contains(","))
						{
						 cmp=cmpcode.split(",");
						
						for(int b=0;b<cmp.length;b++)
						{
							locations=locations+"'"+cmp[b]+"',";
						}
						
						locations=locations.substring(0, locations.length()-1);
						}
						else
						{
							locations="'"+cmpcode+"'";
						}
					}
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
		
		   ArrayList locationList=new ArrayList();
					ArrayList locationLabelList=new ArrayList();
					ResultSet rs11 = ad.selectQuery("select LOCID," +
							"LOCNAME,location_code from location where location_code in ("+locations+") "); 
							try {
								while(rs11.next()) {
									locationList.add(rs11.getString("location_code"));
									locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
									
								}
								rs11.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							help.setLocationIdList(locationList);
							help.setLocationLabelList(locationLabelList);
	
		
							
							//dept
							ArrayList deptList=new ArrayList();
							ArrayList deptLabelList=new ArrayList();
							ResultSet rs15 = ad.selectQuery("select dptid," +
									"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
									try {
										while(rs15.next()) {
											deptList.add(rs15.getString("dptid"));
											deptLabelList.add(rs15.getString("DPTLTXT"));
										}
										rs15.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
									
									help.setDeptList(deptList);
									help.setDeptLabelList(deptLabelList);
									
		
						
						
							//subdep
							ArrayList subdeptList=new ArrayList();
							ArrayList subdeptLabelList=new ArrayList();
							ResultSet subrs15 = ad.selectQuery("select SDPTID," +
									"SDPTID_LTXT from SUBDEPARTMENT order by SDPTID_LTXT "); 
									try {
										while(subrs15.next()) {
											subdeptList.add(subrs15.getString("SDPTID"));
											subdeptLabelList.add(subrs15.getString("SDPTID_LTXT"));
										}
										subrs15.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
									
									help.setSubdeptList(subdeptList);
									help.setSubdeptLabelList(subdeptLabelList);
								
									
									//repgrp
									ArrayList repgrptList=new ArrayList();
									ArrayList repgrpLabelList=new ArrayList();
									ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
											"Grp_LTXT from REPORTING_GROUP   order by Grp_LTXT "); 
											try {
												while(reprs15.next()) {
													repgrptList.add(reprs15.getString("Grp_ID"));
													repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
												}
												reprs15.close();
											} catch (SQLException e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
											
											help.setRepgrpList(repgrptList);
											help.setRepgrpLabelList(repgrpLabelList);	
											
											
											//contractor
											
											ArrayList contgrptList=new ArrayList();
											ArrayList contgrpLabelList=new ArrayList();
											ResultSet contrs15 = ad.selectQuery("select Con_ID," +
													"Con_Name from CONTRACTOR_MASTER   order by Con_ID "); 
													try {
														while(contrs15.next()) {
															contgrptList.add(contrs15.getString("Con_ID"));
															contgrpLabelList.add(contrs15.getString("Con_Name"));
														}
														contrs15.close();
													} catch (SQLException e) {
														// TODO Auto-generated catch block
														e.printStackTrace();
													}
													
													help.setCongrpList(contgrptList);
													help.setCongrpLabelList(contgrpLabelList);
	
								
												
											//dept
											String ACtualdept="";
										    if(help.getDeptArray()!=null)
										    {	
										    String[] dept = help.getDeptArray();
										    
										    StringBuffer reqdept = new StringBuffer();
											for (int i = 0; i < dept.length; i++) {
												reqdept.append("'"+dept[i]+"'" + ",");
											}
											 ACtualdept= reqdept.substring(0, reqdept.length() - 1).toString();
										    }
											
										    
										    //subdept
										    
										    String ACtualsubdept="";
										    if(help.getSubdeptArray()!=null)
										    {	
										    String[] subdept = help.getSubdeptArray();
										    
										    StringBuffer reqsubdept = new StringBuffer();
											for (int i = 0; i < subdept.length; i++) {
												reqsubdept.append("'"+subdept[i]+"'" + ",");
											}
											ACtualsubdept= reqsubdept.substring(0, reqsubdept.length() - 1).toString();
										    }
										    
										    //reporting
										    
										    String ACtualrepgrp="";
										    if(help.getRepgrpArray()!=null)
										    {	
										    String[] repgrp = help.getRepgrpArray();
										    
										    StringBuffer reqrepgrp = new StringBuffer();
											for (int i = 0; i < repgrp.length; i++) {
												reqrepgrp.append("'"+repgrp[i]+"'" + ",");
											}
											ACtualrepgrp= reqrepgrp.substring(0, reqrepgrp.length() - 1).toString();
										    }
									    
										  
										
										this.query1=ACtualdept;
										this.query2=ACtualsubdept;
										this.query3=ACtualrepgrp;
										this.query4=help.getCongrp();

				
				request.setAttribute("result", "result");
				try {
					contrs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					reprs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs17.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					subrs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					cc.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return mapping.findForward("deptSummaryreport");	
	
	
		
	
		
	}
	public ActionForward contractreportSearch(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {


		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
		
		Calendar mycal = Calendar.getInstance();
		help.setFrommonth(Integer.toString(mycal.get(Calendar.MONTH) + 1));
		
		
		ArrayList yearList=new ArrayList();
		ResultSet rs17 = ad.selectQuery("select distinct year from EMP_IN_OUT_Status  order by year desc"); 
				try {
					while(rs17.next()) {
						yearList.add(rs17.getString("year"));
					}
					rs17.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setYearList(yearList);
		
		
	
				String cmpcode="";
				int id=user.getGroupId();
				String cmp[]=new String[0]; 
				String locations="";
				
				String aa="select * from user_group where id='"+id+"'";
				ResultSet cc=ad.selectQuery(aa);
				try {
					if(cc.next())
					{
						cmpcode=cc.getString("Attendance_Loc");
						
						if(cmpcode.contains(","))
						{
						 cmp=cmpcode.split(",");
						
						for(int b=0;b<cmp.length;b++)
						{
							locations=locations+"'"+cmp[b]+"',";
						}
						
						locations=locations.substring(0, locations.length()-1);
						}
						else
						{
							locations="'"+cmpcode+"'";
						}
					}
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
		
		   ArrayList locationList=new ArrayList();
					ArrayList locationLabelList=new ArrayList();
					ResultSet rs11 = ad.selectQuery("select LOCID," +
							"LOCNAME,location_code from location where location_code in ("+locations+") "); 
							try {
								while(rs11.next()) {
									locationList.add(rs11.getString("location_code"));
									locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
									
								}
								rs11.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							help.setLocationIdList(locationList);
							help.setLocationLabelList(locationLabelList);
	
		
		
						
						
								
								//repgrp
								ArrayList repgrptList=new ArrayList();
								ArrayList repgrpLabelList=new ArrayList();
								ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
										"Grp_LTXT from REPORTING_GROUP where  Grp_ID not in(1,2,3)   order by Grp_LTXT "); 
										try {
											while(reprs15.next()) {
												repgrptList.add(reprs15.getString("Grp_ID"));
												repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
											}
											reprs15.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										
										help.setRepgrpList(repgrptList);
										help.setRepgrpLabelList(repgrpLabelList);
										
										//cat
										
										ArrayList categoryList=new ArrayList();
										ArrayList categoryLabelList=new ArrayList();
										ResultSet rs13 = ad.selectQuery("select STAFFCAT," +
												"CATLTEXT from category order by STAFFCAT "); 
												try {
													while(rs13.next()) {
														categoryList.add(rs13.getString("STAFFCAT"));
														categoryLabelList.add(rs13.getString("CATLTEXT"));
													}
													rs13.close();
												} catch (SQLException e) {
													// TODO Auto-generated catch block
													e.printStackTrace();
												}
												
												help.setCategoryList(categoryList);
												help.setCategoryLabelList(categoryLabelList);
								
									
										
								
												
										   //catArray
									    String ACtualcat="";
									    if(help.getCatArray()!=null)
									    {

										String[] cat = help.getCatArray();
									    StringBuffer reqcat = new StringBuffer();
										for (int i = 0; i < cat.length; i++) {
											reqcat.append("'"+cat[i]+"'" + ",");
										}
										ACtualcat = reqcat.substring(0, reqcat.length() - 1).toString();

									    }
									    
                                        //reporting
									    
									    String ACtualrepgrp="";
									    if(help.getRepgrpArray()!=null)
									    {	
									    String[] repgrp = help.getRepgrpArray();
									    
									    StringBuffer reqrepgrp = new StringBuffer();
										for (int i = 0; i < repgrp.length; i++) {
											reqrepgrp.append("'"+repgrp[i]+"'" + ",");
										}
										ACtualrepgrp= reqrepgrp.substring(0, reqrepgrp.length() - 1).toString();
									    }
									    
										   
									    String catdesc=" select * from REPORTING_GROUP where Grp_ID in ("+ACtualrepgrp+")order by Grp_ID";
									   
										 ResultSet rscat=ad.selectQuery(catdesc);
										 LinkedList categorylist=new LinkedList();
										 String reqrcateg="";
										 try {
											while (rscat.next()) 
											  {
												 HRApprovalForm m1=new HRApprovalForm(); 
												 m1.setRepgrp(rscat.getString("Grp_STXT"));
												 categorylist.add(m1);
											  }
										} catch (SQLException e3) {
											// TODO Auto-generated catch block
											e3.printStackTrace();
										}
										request.setAttribute("categorylist", categorylist);
										
										
										this.query1=ACtualcat;
										this.query2=ACtualrepgrp;

				
				request.setAttribute("result", "result");
				try {
					cc.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					reprs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rscat.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs17.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs13.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return mapping.findForward("contractreport");	
	
	
		
	}
	
	public ActionForward departmentsummary(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		



		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
		
		Calendar mycal = Calendar.getInstance();
		help.setFrommonth(Integer.toString(mycal.get(Calendar.MONTH) + 1));
		
		
		ArrayList yearList=new ArrayList();
		ResultSet rs17 = ad.selectQuery("select distinct year from EMP_IN_OUT_Status  order by year desc"); 
				try {
					while(rs17.next()) {
						yearList.add(rs17.getString("year"));
					}
					rs17.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setYearList(yearList);
		
		
				String cmpcode="";
				int id=user.getGroupId();
				String cmp[]=new String[0]; 
				String locations="";
				
				String aa="select * from user_group where id='"+id+"'";
				ResultSet cc=ad.selectQuery(aa);
				try {
					if(cc.next())
					{
						cmpcode=cc.getString("Attendance_Loc");
						
						if(cmpcode.contains(","))
						{
						 cmp=cmpcode.split(",");
						
						for(int b=0;b<cmp.length;b++)
						{
							locations=locations+"'"+cmp[b]+"',";
						}
						
						locations=locations.substring(0, locations.length()-1);
						}
						else
						{
							locations="'"+cmpcode+"'";
						}
					}
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
		
		
		   ArrayList locationList=new ArrayList();
					ArrayList locationLabelList=new ArrayList();
					ResultSet rs11 = ad.selectQuery("select LOCID," +
							"LOCNAME,location_code from location where location_code in ("+locations+")"); 
							try {
								while(rs11.next()) {
									locationList.add(rs11.getString("location_code"));
									locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
									
								}
								rs11.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							help.setLocationIdList(locationList);
							help.setLocationLabelList(locationLabelList);
	
		
							//dept
							ArrayList deptList=new ArrayList();
							ArrayList deptLabelList=new ArrayList();
							ResultSet rs15 = ad.selectQuery("select dptid," +
									"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
									try {
										while(rs15.next()) {
											deptList.add(rs15.getString("dptid"));
											deptLabelList.add(rs15.getString("DPTLTXT"));
										}
										rs15.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
									
									help.setDeptList(deptList);
									help.setDeptLabelList(deptLabelList);
									
									
									
	
							//subdep
							ArrayList subdeptList=new ArrayList();
							ArrayList subdeptLabelList=new ArrayList();
							ResultSet subrs15 = ad.selectQuery("select SDPTID," +
									"SDPTID_LTXT from SUBDEPARTMENT order by SDPTID_LTXT "); 
									try {
										while(subrs15.next()) {
											subdeptList.add(subrs15.getString("SDPTID"));
											subdeptLabelList.add(subrs15.getString("SDPTID_LTXT"));
										}
										subrs15.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
									
									help.setSubdeptList(subdeptList);
									help.setSubdeptLabelList(subdeptLabelList);
								
									//repgrp
									ArrayList repgrptList=new ArrayList();
									ArrayList repgrpLabelList=new ArrayList();
									ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
											"Grp_LTXT from REPORTING_GROUP   order by Grp_LTXT "); 
											try {
												while(reprs15.next()) {
													repgrptList.add(reprs15.getString("Grp_ID"));
													repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
												}
												reprs15.close();
											} catch (SQLException e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
											
											help.setRepgrpList(repgrptList);
											help.setRepgrpLabelList(repgrpLabelList);
				
											
											//contractor
									
											ArrayList contgrptList=new ArrayList();
											ArrayList contgrpLabelList=new ArrayList();
											ResultSet contrs15 = ad.selectQuery("select Con_ID," +
													"Con_Name from CONTRACTOR_MASTER   order by Con_ID "); 
													try {
														while(contrs15.next()) {
															contgrptList.add(contrs15.getString("Con_ID"));
															contgrpLabelList.add(contrs15.getString("Con_Name"));
														}
														contrs15.close();
													} catch (SQLException e) {
														// TODO Auto-generated catch block
														e.printStackTrace();
													}
													
													help.setCongrpList(contgrptList);
													help.setCongrpLabelList(contgrpLabelList);
	
				
				request.setAttribute("result", "result");
				try {
					rs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					cc.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs17.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					subrs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					contrs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					reprs15.close();
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				return mapping.findForward("deptSummaryreport");	
	
	
		
	
	}
	
	
	public ActionForward leavebalreportEXE(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		

		
		try {
			Thread.sleep(2000);
		} catch (InterruptedException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}
		
		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
		
		Calendar mycal = Calendar.getInstance();
		help.setFrommonth(Integer.toString(mycal.get(Calendar.MONTH) + 1));
		
	
		help.setYear(request.getParameter("year"));
		help.setLocationId(request.getParameter("loc"));
        help.setSummbrkup(request.getParameter("summbrkup"));
        help.setWorkLocId(request.getParameter("wrk"));
		
		
		

		ArrayList l1=new ArrayList();
	
		ArrayList addi=new ArrayList();
		ArrayList attri=new ArrayList();
		ArrayList deptlist = new ArrayList();
		if(help.getSummbrkup().equalsIgnoreCase("Final Settlement"))
		{
			
			
			
			String emp = "Select PERNR,EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT,emp.DOJ from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as desg where PERNR='"
					+ query4
					+ "' and dep.DPTID=emp.DPTID and desg.DSGID=emp.DSGID ";

			ResultSet rs1 = ad.selectQuery(emp);

			try {
				ArrayList offlist = new ArrayList();
				while (rs1.next())

				{
					LeaveForm leaveForm = new LeaveForm();
					leaveForm.setDepartment(rs1.getString("DPTSTXT"));
					leaveForm.setDesignation(rs1.getString("DSGSTXT"));
					leaveForm.setDoj(EMicroUtils.display1(rs1.getDate("DOJ")));
					leaveForm.setEmployeeName(rs1.getString("EMP_FULLNAME"));
					leaveForm.setEmployeeNumber(rs1.getString("PERNR"));
					offlist.add(leaveForm);
				}
				
				
				request.setAttribute("offlist", offlist);
			} catch (SQLException e1) {

				e1.printStackTrace();
			}try {
				rs1.close();
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
			try {
				LeaveForm leaveForm = new LeaveForm();
				
				String getleaveBalence = "select t.lv_calyear,t.lv_opbal,t.lv_awtBal,t.lv_typeid,t.lv_availed,t.lv_clbal,m.lv_type from lv_type_d as t,lv_type_m as m where t.lv_empcode='"
						+ query4
						+ "' and t.lv_calyear='"
						+ help.getYear()
						+ "' and t.lv_typeid=m.lv_typeid";
				ResultSet rsBalance = ad.selectQuery(getleaveBalence);
				ArrayList balList = new ArrayList();
				while (rsBalance.next()) {
					leaveForm.setYear(rsBalance.getInt("lv_calyear"));
					LeaveForm form2 = new LeaveForm();
					form2.setLeaveType(rsBalance.getString("lv_type"));
					form2.setOpeningBalence(rsBalance.getFloat("lv_opbal"));
					form2.setAvalableBalence(rsBalance.getFloat("lv_availed"));
					form2.setNoOfDays(rsBalance.getString("lv_availed"));
					form2.setClosingBalence(rsBalance.getFloat("lv_clbal"));
					form2.setAwaitingBalence(rsBalance.getFloat("lv_awtBal"));
					balList.add(form2);
				}
				request.setAttribute("LeaveBalenceList", balList);

				rsBalance.close();

			} catch (Exception e) {
				e.printStackTrace();
			}
			
			String startdate = "" + help.getYear() + "-01-01";
			String enddate = "" + help.getYear() + "-12-31";
			LinkedList report = new LinkedList();
			String data = "select m.lv_type,convert(nvarchar(11),start_date,103) as fromdate,convert(nvarchar(11),end_date,103) as enddate,no_of_days,submit_date,convert(nvarchar(11),approved_date,103) as approveddate,reason from leave_details,lv_type_m as m where user_id='"
					+ query4
					+ "' and m.lv_typeid=leave_type and Approvel_Status='Approved'  and start_date between '"
					+ startdate + "' and '" + enddate + "' ";

			ResultSet rs = ad.selectQuery(data);
			try {
				while (rs.next()) {
					LeaveForm leaveForm0 = new LeaveForm();
					leaveForm0.setLeaveType(rs.getString("lv_type"));
					leaveForm0.setSubmitDate(rs.getString("submit_date"));
					leaveForm0.setApprovedDate(rs.getString("approveddate"));
					leaveForm0.setStartDate(rs.getString("fromdate"));
					leaveForm0.setEndDate(rs.getString("enddate"));
					leaveForm0.setNoOfDays(rs.getString("no_of_days"));
					leaveForm0.setReason(rs.getString("reason"));

					report.add(leaveForm0);
					}
				request.setAttribute("list", report);

				if (report.size() == 0) {
					request.setAttribute("norecords", "norecords");
				}
		}
			catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			try {
				rs.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		}
	
	if(help.getSummbrkup().equalsIgnoreCase("Summary"))
	{
		
		if(!(query2.equalsIgnoreCase("") && query3.equalsIgnoreCase("")))
    	{
		String list="select distinct DEPARTMENT.DPTID,SUBDEPARTMENT.SDPTID,Grp_ID,DPTSTXT,SDPTID_STXT,Grp_STXT  from DEPARTMENT,SUBDEPARTMENT,"
				+ "REPORTING_GROUP,emp_official_info where LOCID='"+request.getParameter("loc")+"' and emp_official_info.DPTID=DEPARTMENT.DPTID and emp_official_info.SDPTID=SUBDEPARTMENT.SDPTID "
				+ "and emp_official_info.Reporting_Grp=REPORTING_GROUP.Grp_ID  and DEPARTMENT.dptid in ("+query1+") and SUBDEPARTMENT.SDPTID in ("+query2+") and REPORTING_GROUP.Grp_ID in("+query3+") order by DPTID,SDPTID,Grp_ID";
			ResultSet rs1 = ad.selectQuery(list);
		try {
			while(rs1.next())
			{
				HRApprovalForm help1 = new HRApprovalForm();
				help1.setDepartment(rs1.getString("DPTID"));
				help1.setSubdepartment(rs1.getString("SDPTID"));
				help1.setRepgrp(rs1.getString("Grp_ID"));
				help1.setDeptFrom(rs1.getString("DPTSTXT"));
				help1.setDeptTo(rs1.getString("SDPTID_STXT"));
				help1.setDesgTo(rs1.getString("Grp_STXT"));
				deptlist.add(help1);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		try {
			rs1.close();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		request.setAttribute("deptlist", deptlist);
    	
		
/*		String rec="select sum(l.cl_open) as cl_open,sum(l.cl_avail) as cl_avail,sum(l.cl_close) as cl_close,sum(l.sl_open) as sl_open,"
				+ "sum(l.sl_avail) as sl_avail,sum(l.sl_close) as sl_close,sum(l.el_open) as el_open,sum(l.el_avail) as el_avail,sum(l.el_close) as el_close,l.DPTID,l.DPTSTXT "
				+ "from(select sum(cl_open) as cl_open,sum(cl_avail) as cl_avail,sum(cl_close) as cl_close,sum(sl_open) as sl_open,sum(sl_avail) as sl_avail,sum(sl_close) as sl_close,"
				+ "sum(el_open) as el_open,sum(el_avail) as el_avail,sum(el_close) as el_close,t.PERNR,t.DPTID,t.EMP_FULLNAME,t.DPTSTXT,t.DSGSTXT  from(select case when lv_typeid=1 then"
				+ " lv_opbal else 0 end as cl_open,case when lv_typeid=1 then lv_availed else 0 end as cl_avail,case when lv_typeid=1 then lv_clbal else 0 end as cl_close,case when"
				+ " lv_typeid=2 then lv_opbal else 0 end as sl_open,case when lv_typeid=2 then lv_availed else 0 end as sl_avail,case when lv_typeid=2 then lv_clbal else 0 end "
				+ "as sl_close,case when lv_typeid=3 then lv_opbal else 0 end as el_open,case when lv_typeid=3 then lv_availed else 0 end as el_avail,case when lv_typeid=3 then lv_clbal"
				+ " else 0 end as el_close,pernr,emp_official_info.EMP_FULLNAME,emp_official_info.DPTID,DEPARTMENT.DPTSTXT,DESIGNATION.DSGSTXT from lv_type_d,emp_official_info,"
				+ "DEPARTMENT,DESIGNATION  where lv_calyear='"+help.getYear()+"' and emp_official_info.PERNR=lv_type_d.lv_empcode and emp_official_info.LOCID='"+help.getLocationId()+"'  "
				+ " and emp_official_info.DPTID=DEPARTMENT.DPTID and DESIGNATION.DSGID=emp_official_info.DSGID and emp_official_info.ACTIVE=1)t,emp_official_info"
				+ " where emp_official_info.PERNR=t.PERNR and emp_official_info.ACTIVE=1  group by t.PERNR,t.DPTID,t.EMP_FULLNAME,t.DPTSTXT,t.DSGSTXT )l,emp_official_info  "
				+ "where emp_official_info.PERNR=l.PERNR  and emp_official_info.DPTID in ("+query1+")   and emp_official_info.ACTIVE=1  group by l.DPTID,l.DPTSTXT order by l.DPTID";
		*/
		String rec="select sum(l.cl_open) as cl_open,sum(l.cl_avail) as cl_avail,sum(l.cl_close) as cl_close,sum(l.sl_open) as sl_open,sum(l.sl_avail) as sl_avail,"
				+ "sum(l.sl_close) as sl_close,sum(l.el_open) as el_open,sum(l.el_avail) as el_avail,sum(l.el_close) as el_close,l.DPTID,l.DPTSTXT,l.SDPTID,l.SDPTID_STXT,"
				+ "l.Grp_ID,l.Grp_STXT from(select sum(cl_open) as cl_open,sum(cl_avail) as cl_avail,sum(cl_close) as cl_close,sum(sl_open) as sl_open,sum(sl_avail) "
				+ "as sl_avail,sum(sl_close) as sl_close,sum(el_open) as el_open,sum(el_avail) as el_avail,sum(el_close) as el_close,t.PERNR,t.DPTID,t.EMP_FULLNAME,"
				+ "t.DPTSTXT,t.DSGSTXT,t.SDPTID_STXT,t.Grp_STXT,t.Grp_ID,t.SDPTID from(select case when lv_typeid=1 then lv_opbal else 0 end as cl_open,case when "
				+ "lv_typeid=1 then lv_availed else 0 end as cl_avail,case when lv_typeid=1 then lv_clbal else 0 end as cl_close,case when lv_typeid=2 then lv_opbal "
				+ "else 0 end as sl_open,case when lv_typeid=2 then lv_availed else 0 end as sl_avail,case when lv_typeid=2 then lv_clbal else 0 end as sl_close,case"
				+ " when lv_typeid=3 then lv_opbal else 0 end as el_open,case when lv_typeid=3 then lv_availed else 0 end as el_avail,case when lv_typeid=3 then "
				+ "lv_clbal else 0 end as el_close,pernr,emp_official_info.EMP_FULLNAME,emp_official_info.DPTID,DEPARTMENT.DPTSTXT,DESIGNATION.DSGSTXT,"
				+ "SUBDEPARTMENT.SDPTID,SUBDEPARTMENT.SDPTID_STXT,REPORTING_GROUP.Grp_ID,REPORTING_GROUP.Grp_STXT from lv_type_d,emp_official_info,DEPARTMENT,DESIGNATION,"
				+ "SUBDEPARTMENT,REPORTING_GROUP  where lv_calyear='"+help.getYear()+"' and emp_official_info.PERNR=lv_type_d.lv_empcode and emp_official_info.LOCID='"+help.getLocationId()+"'  "
				+ " and emp_official_info.DPTID=DEPARTMENT.DPTID and DESIGNATION.DSGID=emp_official_info.DSGID and emp_official_info.ACTIVE=1  and "
				+ " emp_official_info.SDPTID=SUBDEPARTMENT.SDPTID and emp_official_info.Reporting_Grp=REPORTING_GROUP.Grp_ID)t,emp_official_info where"
				+ " emp_official_info.PERNR=t.PERNR and emp_official_info.ACTIVE=1  group by t.PERNR,t.DPTID,t.EMP_FULLNAME,t.DPTSTXT,t.DSGSTXT,t.SDPTID_STXT,t.Grp_STXT,"
				+ "t.Grp_ID,t.SDPTID )l,emp_official_info  where emp_official_info.PERNR=l.PERNR  and emp_official_info.DPTID in ("+query1+") and emp_official_info.SDPTID in ("+query2+")"
				+ " and emp_official_info.Reporting_Grp in ("+query3+")   and emp_official_info.ACTIVE=1  ";		
		
		if(!help.getWorkLocId().equalsIgnoreCase(""))
		{
			rec=rec+" and emp_official_info.Work_ID in ("+help.getWorkLocId()+")  ";
		
		}
		rec=rec+"group by l.DPTID,l.DPTSTXT,l.SDPTID_STXT,l.Grp_STXT,l.Grp_ID,l.SDPTID order by l.DPTID";
		ResultSet a=ad.selectQuery(rec);
		try {
			while(a.next())
			{
				HRApprovalForm hr=new HRApprovalForm();	
	
				hr.setDepartment(a.getString("DPTID"));
				hr.setSubdepartment(a.getString("SDPTID"));
				hr.setRepgrp(a.getString("Grp_ID"));
			    hr.setCl_openingBalence(a.getFloat("cl_open"));
			    hr.setCl_avalableBalence(a.getFloat("cl_avail"));
			    hr.setCl_closingBalence(a.getFloat("cl_close"));
			    hr.setSl_openingBalence(a.getFloat("sl_open"));
			    hr.setSl_avalableBalence(a.getFloat("sl_avail"));
			    hr.setSl_closingBalence(a.getFloat("sl_close"));
			    hr.setEl_openingBalence(a.getFloat("el_open"));
			    hr.setEl_avalableBalence(a.getFloat("el_avail"));
			    hr.setEl_closingBalence(a.getFloat("el_close"));		    
				l1.add(hr);
				
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			a.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		request.setAttribute("list1", l1);
    	}
		
		else
		{
			String rec="select sum(l.cl_open) as cl_open,sum(l.cl_avail) as cl_avail,sum(l.cl_close) as cl_close,sum(l.sl_open) as sl_open,"
					+ "sum(l.sl_avail) as sl_avail,sum(l.sl_close) as sl_close,sum(l.el_open) as el_open,sum(l.el_avail) as el_avail,sum(l.el_close) as el_close,l.DPTID,l.DPTSTXT "
					+ "from(select sum(cl_open) as cl_open,sum(cl_avail) as cl_avail,sum(cl_close) as cl_close,sum(sl_open) as sl_open,sum(sl_avail) as sl_avail,sum(sl_close) as sl_close,"
					+ "sum(el_open) as el_open,sum(el_avail) as el_avail,sum(el_close) as el_close,t.PERNR,t.DPTID,t.EMP_FULLNAME,t.DPTSTXT,t.DSGSTXT  from(select case when lv_typeid=1 then"
					+ " lv_opbal else 0 end as cl_open,case when lv_typeid=1 then lv_availed else 0 end as cl_avail,case when lv_typeid=1 then lv_clbal else 0 end as cl_close,case when"
					+ " lv_typeid=2 then lv_opbal else 0 end as sl_open,case when lv_typeid=2 then lv_availed else 0 end as sl_avail,case when lv_typeid=2 then lv_clbal else 0 end "
					+ "as sl_close,case when lv_typeid=3 then lv_opbal else 0 end as el_open,case when lv_typeid=3 then lv_availed else 0 end as el_avail,case when lv_typeid=3 then lv_clbal"
					+ " else 0 end as el_close,pernr,emp_official_info.EMP_FULLNAME,emp_official_info.DPTID,DEPARTMENT.DPTSTXT,DESIGNATION.DSGSTXT from lv_type_d,emp_official_info,"
					+ "DEPARTMENT,DESIGNATION  where lv_calyear='"+help.getYear()+"' and emp_official_info.PERNR=lv_type_d.lv_empcode and emp_official_info.LOCID='"+help.getLocationId()+"'  "
					+ " and emp_official_info.DPTID=DEPARTMENT.DPTID and DESIGNATION.DSGID=emp_official_info.DSGID and emp_official_info.ACTIVE=1)t,emp_official_info"
					+ " where emp_official_info.PERNR=t.PERNR and emp_official_info.ACTIVE=1  group by t.PERNR,t.DPTID,t.EMP_FULLNAME,t.DPTSTXT,t.DSGSTXT )l,emp_official_info  "
					+ "where emp_official_info.PERNR=l.PERNR  and emp_official_info.DPTID in ("+query1+")    and emp_official_info.ACTIVE=1  ";
		
			
			if(!help.getWorkLocId().equalsIgnoreCase(""))
			{
				rec=rec+" and emp_official_info.Work_ID in ("+help.getWorkLocId()+")  ";
			
			}
			
			rec=rec+"group by l.DPTID,l.DPTSTXT order by l.DPTID";
			ResultSet a=ad.selectQuery(rec);
			try {
				while(a.next())
				{
					HRApprovalForm hr=new HRApprovalForm();
					hr.setDepartment(a.getString("DPTSTXT"));
				    hr.setCl_openingBalence(a.getFloat("cl_open"));
				    hr.setCl_avalableBalence(a.getFloat("cl_avail"));
				    hr.setCl_closingBalence(a.getFloat("cl_close"));
				    hr.setSl_openingBalence(a.getFloat("sl_open"));
				    hr.setSl_avalableBalence(a.getFloat("sl_avail"));
				    hr.setSl_closingBalence(a.getFloat("sl_close"));
				    hr.setEl_openingBalence(a.getFloat("el_open"));
				    hr.setEl_avalableBalence(a.getFloat("el_avail"));
				    hr.setEl_closingBalence(a.getFloat("el_close"));		    
					l1.add(hr);
					
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			try {
				a.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			request.setAttribute("onlydept", l1);
		}
	
		
	}
	
	if(help.getSummbrkup().equalsIgnoreCase("Detailed"))
	{
		
		
		
		String add="select sum(cl_open) as cl_open,sum(cl_avail) as cl_avail,sum(cl_close) as cl_close,sum(sl_open) as sl_open,sum(sl_avail) as sl_avail,"
+ "sum(sl_close) as sl_close,sum(el_open) as el_open,sum(el_avail) as el_avail,sum(el_close) as el_close,t.PERNR,t.DPTID,t.EMP_FULLNAME,t.DPTSTXT,t.DSGSTXT "
+ " from(select case when lv_typeid=1 then lv_opbal else 0 end as cl_open,case when lv_typeid=1 then lv_availed else 0 end as cl_avail,case when lv_typeid=1 then"
+ " lv_clbal else 0 end as cl_close,case when lv_typeid=2 then lv_opbal else 0 end as sl_open,case when lv_typeid=2 then lv_availed else 0 end as sl_avail,case "
+ "when lv_typeid=2 then lv_clbal else 0 end as sl_close,case when lv_typeid=3 then lv_opbal else 0 end as el_open,case when lv_typeid=3 then lv_availed else 0 "
+ "end as el_avail,case when lv_typeid=3 then lv_clbal else 0 end as el_close,pernr,emp_official_info.EMP_FULLNAME,emp_official_info.DPTID,DEPARTMENT.DPTSTXT,"
+ "DESIGNATION.DSGSTXT from lv_type_d,emp_official_info,DEPARTMENT,DESIGNATION  where lv_calyear='"+help.getYear()+"' and emp_official_info.PERNR=lv_type_d.lv_empcode and"
+ " emp_official_info.LOCID='"+help.getLocationId()+"'   and emp_official_info.DPTID=DEPARTMENT.DPTID and DESIGNATION.DSGID=emp_official_info.DSGID and emp_official_info.ACTIVE=1)t,"
+ "emp_official_info where emp_official_info.PERNR=t.PERNR and emp_official_info.DPTID in ("+query1+")  and emp_official_info.ACTIVE=1  ";
	
		
		if(!help.getWorkLocId().equalsIgnoreCase(""))
		{
			add=add+" and emp_official_info.Work_ID in ("+help.getWorkLocId()+")  ";
		
		}
		
		
		if(!query3.equalsIgnoreCase(""))
		{
			add=add+" and emp_official_info.Reporting_Grp in ("+query3+")  ";
		
		}
		
		add=add+"group by t.PERNR,t.DPTID,t.EMP_FULLNAME,t.DPTSTXT,t.DSGSTXT";
		
		
		ResultSet a=ad.selectQuery(add);
		try {
			while(a.next())
			{
				HRApprovalForm hr=new HRApprovalForm();
				hr.setDepartment(a.getString("DPTSTXT"));
				hr.setEmployeeno(a.getString("PERNR"));
				hr.setEmployeeName(a.getString("EMP_FULLNAME"));
				hr.setDesignation(a.getString("DSGSTXT"));
				hr.setCl_openingBalence(a.getFloat("cl_open"));
			    hr.setCl_avalableBalence(a.getFloat("cl_avail"));
			    hr.setCl_closingBalence(a.getFloat("cl_close"));
			    hr.setSl_openingBalence(a.getFloat("sl_open"));
			    hr.setSl_avalableBalence(a.getFloat("sl_avail"));
			    hr.setSl_closingBalence(a.getFloat("sl_close"));
			    hr.setEl_openingBalence(a.getFloat("el_open"));
			    hr.setEl_avalableBalence(a.getFloat("el_avail"));
			    hr.setEl_closingBalence(a.getFloat("el_close"));		    
			    addi.add(hr);
				
			}
			
			
			request.setAttribute("addi", addi);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			a.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally{
			query1="";
			query2="";
			query3="";
			query4="";
			query5="";
			query6="";
		}
		
		
		
		
	}
		

		return mapping.findForward("displayleavbalreport");	
	
		
		
	}
	public ActionForward attritionreportEXE(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
		try {
			Thread.sleep(2000);
		} catch (InterruptedException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}
		
		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
		
		Calendar mycal = Calendar.getInstance();
		help.setFrommonth(Integer.toString(mycal.get(Calendar.MONTH) + 1));
		
		help.setMonth(request.getParameter("month"));
		help.setYear(request.getParameter("year"));
		help.setLocationId(request.getParameter("loc"));
        help.setSummbrkup(request.getParameter("summbrkup"));
        help.setEmployeeNumber(user.getFullName());

		String[] monthName = {"","JAN", "FEB",
						  "MAR", "APR", "MAY", "JUN", "JUL",
						  "AUG", "SEP", "OCT", "NOV",
						  "DEC"
						  };
		
		

		ArrayList l1=new ArrayList();
	
		ArrayList addi=new ArrayList();
		ArrayList attri=new ArrayList();
	
	if(help.getSummbrkup().equalsIgnoreCase("Summary"))
	{
		String attr=" select * from DEPARTMENT where DPTID in ("+query1+")";
		ResultSet a=ad.selectQuery(attr);
		try {
			while(a.next())
			{
				HRApprovalForm hr=new HRApprovalForm();
				hr.setDepartment(a.getString("DPTSTXT"));
				
				String rec="select * from (select count(pernr) as available from  emp_official_info where LOCID='"+help.getLocationId()+"' and month(DOJ)<"+help.getMonth()+"  and YEAR(doj)='"+help.getYear()+"' and "
						+ "emp_official_info.DPTID="+a.getString("DPTID")+" and Active=1)k,(select count(pernr) as addition from  emp_official_info where LOCID='"+help.getLocationId()+"'  and month(DOJ)="+help.getMonth()+" "
						+ " and YEAR(doj)='"+help.getYear()+"' and emp_official_info.DPTID="+a.getString("DPTID")+")l,(select count(pernr) as attrition from  emp_official_info where LOCID='"+help.getLocationId()+"'"
						+ " and month(DOL)="+help.getMonth()+"  and YEAR(DOL)='"+help.getYear()+"' and emp_official_info.DPTID="+a.getString("DPTID")+")m";
				ResultSet aq=ad.selectQuery(rec);
				if(aq.next())
				{
					hr.setAvailablecount(aq.getInt("available"));
					hr.setAdditioncount(aq.getInt("addition"));
					hr.setAttritioncount(aq.getInt("attrition"));
					l1.add(hr);
				}
				aq.close();
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			a.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		request.setAttribute("list1", l1);
		
	}
	
	if(help.getSummbrkup().equalsIgnoreCase("Detailed"))
	{
		//addtion
		
		
		String add="select pernr,EMP_FULLNAME,Grp_STXT,DPTSTXT,DSGSTXT,convert(nvarchar(10),DOJ,104) as doj from emp_official_info,REPORTING_GROUP,DEPARTMENT,DESIGNATION where "
				+ " month(doj)='"+help.getMonth()+"' and year(doj)='"+help.getYear()+"' and LOCID='"+help.getLocationId()+"' and "
						+ "DEPARTMENT.DPTID=emp_official_info.DPTID and REPORTING_GROUP.Grp_ID=emp_official_info.Reporting_Grp and DESIGNATION.DSGID=emp_official_info.DSGID order by REPORTING_GROUP.Grp_STXT,DEPARTMENT.DPTSTXT,DESIGNATION.DSGSTXT ";
		ResultSet aq=ad.selectQuery(add);
		try {
			while(aq.next())
			{
				HRApprovalForm hr=new HRApprovalForm();
				hr.setEmployeeno(aq.getString("pernr"));
				hr.setEmployeeName(aq.getString("EMP_FULLNAME"));
				hr.setRepgrp(aq.getString("Grp_STXT"));
				hr.setDepartment(aq.getString("DPTSTXT"));
				hr.setDesignation(aq.getString("DSGSTXT"));
				hr.setDoj(aq.getString("doj"));
				addi.add(hr);
				
			}
			
			
			request.setAttribute("addi", addi);
			

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		try {
			aq.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		


		//attritioin

		
		String attr="select pernr,EMP_FULLNAME,Grp_STXT,DPTSTXT,DSGSTXT,convert(nvarchar(10),DOL,104) as doL from emp_official_info,REPORTING_GROUP,DEPARTMENT,DESIGNATION where "
				+ " month(DOL)='"+help.getMonth()+"' and year(DOL)='"+help.getYear()+"' and LOCID='"+help.getLocationId()+"' and "
						+ "DEPARTMENT.DPTID=emp_official_info.DPTID and REPORTING_GROUP.Grp_ID=emp_official_info.Reporting_Grp and DESIGNATION.DSGID=emp_official_info.DSGID order by REPORTING_GROUP.Grp_STXT,DEPARTMENT.DPTSTXT,DESIGNATION.DSGSTXT";
		ResultSet aqattr=ad.selectQuery(attr);
		try {
			while(aqattr.next())
			{
				HRApprovalForm hratt=new HRApprovalForm();
				hratt.setEmployeeno(aqattr.getString("pernr"));
				hratt.setEmployeeName(aqattr.getString("EMP_FULLNAME"));
				hratt.setRepgrp(aqattr.getString("Grp_STXT"));
				hratt.setDepartment(aqattr.getString("DPTSTXT"));
				hratt.setDesignation(aqattr.getString("DSGSTXT"));
				hratt.setDoj(aqattr.getString("DOL"));
				attri.add(hratt);
				
			}
		
			
			request.setAttribute("attri", attri);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}try {
			aqattr.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally{
			query1="";
			query2="";
			query3="";
			query4="";
			query5="";
			query6="";
		}
		
		
	}
		
		help.setMonth(monthName[Integer.parseInt(help.getMonth())]);
		return mapping.findForward("displayattritionreport");	
	}
	
	public ActionForward leavebalreportSearch(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		

		
		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
		
		Calendar mycal = Calendar.getInstance();
		help.setFrommonth(Integer.toString(mycal.get(Calendar.MONTH) + 1));
	
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		   ArrayList locationList=new ArrayList();
					ArrayList locationLabelList=new ArrayList();
					ResultSet rs11 = ad.selectQuery("select LOCID," +
							"LOCNAME,location_code from location where location_code in ("+locations+")"); 
							try {
								while(rs11.next()) {
									locationList.add(rs11.getString("location_code"));
									locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
									
								}
								rs11.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							help.setLocationIdList(locationList);
							help.setLocationLabelList(locationLabelList);
	
		
	
							ArrayList deptList=new ArrayList();
							ArrayList deptLabelList=new ArrayList();
							ResultSet rs15 = ad.selectQuery("select dptid," +
									"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
									try {
										while(rs15.next()) {
											deptList.add(rs15.getString("dptid"));
											deptLabelList.add(rs15.getString("DPTLTXT"));
										}
										rs15.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
									
									help.setDeptList(deptList);
									help.setDeptLabelList(deptLabelList);
									
									//subdep
									ArrayList subdeptList=new ArrayList();
									ArrayList subdeptLabelList=new ArrayList();
									ResultSet subrs15 = ad.selectQuery("select SDPTID," +
											"SDPTID_LTXT from SUBDEPARTMENT order by SDPTID_LTXT "); 
											try {
												while(subrs15.next()) {
													subdeptList.add(subrs15.getString("SDPTID"));
													subdeptLabelList.add(subrs15.getString("SDPTID_LTXT"));
												}
												subrs15.close();
											} catch (SQLException e) {
												// TODO Auto-generated catch block
												e.printStackTrace();
											}
											
											help.setSubdeptList(subdeptList);
											help.setSubdeptLabelList(subdeptLabelList);
										
											//repgrp
											ArrayList repgrptList=new ArrayList();
											ArrayList repgrpLabelList=new ArrayList();
											ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
													"Grp_LTXT from REPORTING_GROUP   order by Grp_LTXT "); 
													try {
														while(reprs15.next()) {
															repgrptList.add(reprs15.getString("Grp_ID"));
															repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
														}
														reprs15.close();
													} catch (SQLException e) {
														// TODO Auto-generated catch block
														e.printStackTrace();
													}
													
													help.setRepgrpList(repgrptList);
													help.setRepgrpLabelList(repgrpLabelList);
						
													ArrayList workList=new ArrayList();
													ArrayList workLabelList=new ArrayList();
													ResultSet rs14 = ad.selectQuery("select loc_id," +
															"loc_name from working_location order by loc_name"); 
															try {
																while(rs14.next()) {
																	workList.add(rs14.getString("loc_id"));
																	workLabelList.add(rs14.getString("loc_name"));
																}
																rs14.close();
															} catch (SQLException e) {
																// TODO Auto-generated catch block
																e.printStackTrace();
															}
															
															help.setWorkList(workList);
															help.setWorkLabelList(workLabelList);
															
															ArrayList yearList=new ArrayList();
															ResultSet rs17 = ad.selectQuery("select distinct year from EMP_IN_OUT_Status  order by year desc"); 
																	try {
																		while(rs17.next()) {
																			yearList.add(rs17.getString("year"));
																		}
																		rs17.close();
																	} catch (SQLException e) {
																		// TODO Auto-generated catch block
																		e.printStackTrace();
																	}
																	
																	help.setYearList(yearList);
								
									//dept
									String ACtualdept="";
								    if(help.getDeptArray()!=null)
								    {	
								    String[] dept = help.getDeptArray();
								    
								    StringBuffer reqdept = new StringBuffer();
									for (int i = 0; i < dept.length; i++) {
										reqdept.append("'"+dept[i]+"'" + ",");
									}
									 ACtualdept= reqdept.substring(0, reqdept.length() - 1).toString();
								    }
									
								    //subdept
								    
								    String ACtualsubdept="";
								    if(help.getSubdeptArray()!=null)
								    {	
								    String[] subdept = help.getSubdeptArray();
								    
								    StringBuffer reqsubdept = new StringBuffer();
									for (int i = 0; i < subdept.length; i++) {
										reqsubdept.append("'"+subdept[i]+"'" + ",");
									}
									ACtualsubdept= reqsubdept.substring(0, reqsubdept.length() - 1).toString();
								    }
								    
								    //reporting
								    
								    String ACtualrepgrp="";
								    if(help.getRepgrpArray()!=null)
								    {	
								    String[] repgrp = help.getRepgrpArray();
								    
								    StringBuffer reqrepgrp = new StringBuffer();
									for (int i = 0; i < repgrp.length; i++) {
										reqrepgrp.append("'"+repgrp[i]+"'" + ",");
									}
									ACtualrepgrp= reqrepgrp.substring(0, reqrepgrp.length() - 1).toString();
								    }
							    
								   
							
								
								
								this.query1=ACtualdept;
								this.query2=ACtualsubdept;
								this.query3=ACtualrepgrp;
						
								this.query4=help.getEmployeeno();;

		
								try {
									rs17.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								try {
									rs11.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								try {
									reprs15.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								
								try {
									cc.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								
								try {
									rs14.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								try {
									subrs15.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
			
								try {
									rs15.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
				return mapping.findForward("leavbalancereport");	
	
		
		
	
		
	}
	
	public ActionForward attritionreportSearch(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
		
		Calendar mycal = Calendar.getInstance();
		help.setFrommonth(Integer.toString(mycal.get(Calendar.MONTH) + 1));
		
		
		ArrayList yearList=new ArrayList();
		ResultSet rs17 = ad.selectQuery("select distinct year from EMP_IN_OUT_Status  order by year desc"); 
				try {
					while(rs17.next()) {
						yearList.add(rs17.getString("year"));
					}
					rs17.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setYearList(yearList);
		
				String cmpcode="";
				int id=user.getGroupId();
				String cmp[]=new String[0]; 
				String locations="";
				
				String aa="select * from user_group where id='"+id+"'";
				ResultSet cc=ad.selectQuery(aa);
				try {
					if(cc.next())
					{
						cmpcode=cc.getString("Attendance_Loc");
						
						if(cmpcode.contains(","))
						{
						 cmp=cmpcode.split(",");
						
						for(int b=0;b<cmp.length;b++)
						{
							locations=locations+"'"+cmp[b]+"',";
						}
						
						locations=locations.substring(0, locations.length()-1);
						}
						else
						{
							locations="'"+cmpcode+"'";
						}
					}
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
		   ArrayList locationList=new ArrayList();
					ArrayList locationLabelList=new ArrayList();
					ResultSet rs11 = ad.selectQuery("select LOCID," +
							"LOCNAME,location_code from location where location_code in ("+locations+") "); 
							try {
								while(rs11.next()) {
									locationList.add(rs11.getString("location_code"));
									locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
									
								}
								rs11.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							help.setLocationIdList(locationList);
							help.setLocationLabelList(locationLabelList);
	
		
	
							ArrayList<String> deptList=new ArrayList<String>();
							ArrayList deptLabelList=new ArrayList();
							/*ResultSet rs15 = ad.selectQuery("select dptid," +
									"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
									try {
										while(rs15.next()) {
											deptList.add(rs15.getString("dptid"));
											deptLabelList.add(rs15.getString("DPTLTXT"));
										}*/
							String Dprt="select dptid," +
									"DPTLTXT from DEPARTMENT where Location like '%"+help.getLocationId()+"%' ";
							ResultSet rs15 = ad.selectQuery(Dprt); 
							try {
								while(rs15.next()) {
									deptList.add(rs15.getString("dptid"));
									deptLabelList.add(rs15.getString("DPTLTXT"));
								}
										rs15.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
									
									help.setDeptList(deptList);
									help.setDeptLabelList(deptLabelList);
								
								
									//dept
									String ACtualdept="";
									if(!(deptList.isEmpty()))
									{	
										String[] dept = deptList.toArray(new String[deptList.size()]);


										StringBuffer reqdept = new StringBuffer();
										for (int i = 0; i < dept.length; i++) {
											reqdept.append("'"+dept[i]+"'" + ",");
										}
										ACtualdept= reqdept.substring(0,reqdept.length()-1).toString();
										this.query1=ACtualdept;
									}
									else{
										help.setMessage2("Selected Location as to be mapped with Department to generate the report");		}
									/*String ACtualdept="";
								    if(help.getDeptArray()!=null)
								    {	
								    String[] dept = help.getDeptArray();
								    
								    StringBuffer reqdept = new StringBuffer();
									for (int i = 0; i < dept.length; i++) {
										reqdept.append("'"+dept[i]+"'" + ",");
									}
									 ACtualdept= reqdept.substring(0, reqdept.length() - 1).toString();
								    }*/
									
								    this.query1=ACtualdept;
				
								    try {
										cc.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
								    
								    try {
										rs15.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
								    try {
										rs11.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
								    try {
										rs17.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
				return mapping.findForward("attritionreport");	
	
		
		
	}
	
	public ActionForward attritionreport(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		



		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
		
		Calendar mycal = Calendar.getInstance();
		help.setFrommonth(Integer.toString(mycal.get(Calendar.MONTH) + 1));
		
		
		ArrayList yearList=new ArrayList();
		ResultSet rs17 = ad.selectQuery("select distinct year from EMP_IN_OUT_Status  order by year desc"); 
				try {
					while(rs17.next()) {
						yearList.add(rs17.getString("year"));
					}
					rs17.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setYearList(yearList);
		
		
				String cmpcode="";
				int id=user.getGroupId();
				String cmp[]=new String[0]; 
				String locations="";
				
				String aa="select * from user_group where id='"+id+"'";
				ResultSet cc=ad.selectQuery(aa);
				try {
					if(cc.next())
					{
						cmpcode=cc.getString("Attendance_Loc");
						
						if(cmpcode.contains(","))
						{
						 cmp=cmpcode.split(",");
						
						for(int b=0;b<cmp.length;b++)
						{
							locations=locations+"'"+cmp[b]+"',";
						}
						
						locations=locations.substring(0, locations.length()-1);
						}
						else
						{
							locations="'"+cmpcode+"'";
						}
					}
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				
		   ArrayList locationList=new ArrayList();
					ArrayList locationLabelList=new ArrayList();
					ResultSet rs11 = ad.selectQuery("select LOCID," +
							"LOCNAME,location_code from location where location_code in ("+locations+") "); 
							try {
								while(rs11.next()) {
									locationList.add(rs11.getString("location_code"));
									locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
									
								}
								rs11.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							help.setLocationIdList(locationList);
							help.setLocationLabelList(locationLabelList);
	
		
	
							ArrayList deptList=new ArrayList();
							ArrayList deptLabelList=new ArrayList();
							ResultSet rs15 = ad.selectQuery("select dptid," +
									"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
									try {
										while(rs15.next()) {
											deptList.add(rs15.getString("dptid"));
											deptLabelList.add(rs15.getString("DPTLTXT"));
										}
										rs15.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
									
									help.setDeptList(deptList);
									help.setDeptLabelList(deptLabelList);
								
								
				
	
				
				request.setAttribute("result", "result");
				try {
					rs17.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					cc.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return mapping.findForward("attritionreport");	
	
	
		
	
		
	}
	
	public ActionForward contractreport(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {


		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
		
		Calendar mycal = Calendar.getInstance();
		help.setFrommonth(Integer.toString(mycal.get(Calendar.MONTH) + 1));
		
		
		ArrayList yearList=new ArrayList();
		ResultSet rs17 = ad.selectQuery("select distinct year from EMP_IN_OUT_Status  order by year desc"); 
				try {
					while(rs17.next()) {
						yearList.add(rs17.getString("year"));
					}
					rs17.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setYearList(yearList);
				
				String cmpcode="";
				int id=user.getGroupId();
				String cmp[]=new String[0]; 
				String locations="";
				
				String aa="select * from user_group where id='"+id+"'";
				ResultSet cc=ad.selectQuery(aa);
				try {
					if(cc.next())
					{
						cmpcode=cc.getString("Attendance_Loc");
						
						if(cmpcode.contains(","))
						{
						 cmp=cmpcode.split(",");
						
						for(int b=0;b<cmp.length;b++)
						{
							locations=locations+"'"+cmp[b]+"',";
						}
						
						locations=locations.substring(0, locations.length()-1);
						}
						else
						{
							locations="'"+cmpcode+"'";
						}
					}
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
		
		
		   ArrayList locationList=new ArrayList();
					ArrayList locationLabelList=new ArrayList();
					ResultSet rs11 = ad.selectQuery("select LOCID," +
							"LOCNAME,location_code from location where location_code in ("+locations+") "); 
							try {
								while(rs11.next()) {
									locationList.add(rs11.getString("location_code"));
									locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
									
								}
								rs11.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							help.setLocationIdList(locationList);
							help.setLocationLabelList(locationLabelList);
	
		
	
							ArrayList categoryList=new ArrayList();
							ArrayList categoryLabelList=new ArrayList();
							ResultSet rs13 = ad.selectQuery("select STAFFCAT," +
									"CATLTEXT from category order by STAFFCAT "); 
									try {
										while(rs13.next()) {
											categoryList.add(rs13.getString("STAFFCAT"));
											categoryLabelList.add(rs13.getString("CATLTEXT"));
										}
										rs13.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
									
									help.setCategoryList(categoryList);
									help.setCategoryLabelList(categoryLabelList);
					
	
				
								
								//repgrp
								ArrayList repgrptList=new ArrayList();
								ArrayList repgrpLabelList=new ArrayList();
								ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
										"Grp_LTXT from REPORTING_GROUP where  Grp_ID not in(1,2,3)  order by Grp_LTXT "); 
										try {
											while(reprs15.next()) {
												repgrptList.add(reprs15.getString("Grp_ID"));
												repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
											}
											reprs15.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										
										help.setRepgrpList(repgrptList);
										help.setRepgrpLabelList(repgrpLabelList);
								
								
				
	
				
				request.setAttribute("result", "result");
				try {
					rs13.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					reprs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				try {
					cc.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs17.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return mapping.findForward("contractreport");	
	
	
		
	}
	
	public ActionForward missingpunchreport(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
		
		
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		   ArrayList locationList=new ArrayList();
					ArrayList locationLabelList=new ArrayList();
					ResultSet rs11 = ad.selectQuery("select LOCID," +
							"LOCNAME,location_code from location where location_code in ("+locations+") "); 
							try {
								while(rs11.next()) {
									locationList.add(rs11.getString("location_code"));
									locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
									
								}
								rs11.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							help.setLocationIdList(locationList);
							help.setLocationLabelList(locationLabelList);
							try {
								cc.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
		
							try {
								rs11.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
		return mapping.findForward("missingpunchreport");	
		
	}
	
	public ActionForward organogrammanpowerreport(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
		



		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
		
		Calendar mycal = Calendar.getInstance();
		help.setFrommonth(Integer.toString(mycal.get(Calendar.MONTH) + 1));
		
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		   ArrayList locationList=new ArrayList();
					ArrayList locationLabelList=new ArrayList();
					ResultSet rs11 = ad.selectQuery("select LOCID," +
							"LOCNAME,location_code from location where location_code in ("+locations+") "); 
							try {
								while(rs11.next()) {
									locationList.add(rs11.getString("location_code"));
									locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
									
								}
								rs11.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							help.setLocationIdList(locationList);
							help.setLocationLabelList(locationLabelList);
	
		
							ArrayList deptList=new ArrayList();
							ArrayList deptLabelList=new ArrayList();
							ResultSet rs15 = ad.selectQuery("select dptid," +
									"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
							try {
								while(rs15.next()) {
									deptList.add(rs15.getString("dptid"));
									deptLabelList.add(rs15.getString("DPTLTXT"));
								}
								rs15.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}

							help.setDeptList(deptList);
							help.setDeptLabelList(deptLabelList);
			
	
				
				request.setAttribute("result", "result");
				try {
					cc.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return mapping.findForward("organogrammanpowerreport");	
	
	
		
	
		
	}
	
	
	public ActionForward cumulativemanpowerreport(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
		



		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
		
		Calendar mycal = Calendar.getInstance();
		help.setFrommonth(Integer.toString(mycal.get(Calendar.MONTH) + 1));
		
		
		ArrayList yearList=new ArrayList();
		ResultSet rs17 = ad.selectQuery("select distinct year from EMP_IN_OUT_Status  order by year desc"); 
				try {
					while(rs17.next()) {
						yearList.add(rs17.getString("year"));
					}
					rs17.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
		help.setYearList(yearList);
		
		
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		
		   ArrayList locationList=new ArrayList();
					ArrayList locationLabelList=new ArrayList();
					ResultSet rs11 = ad.selectQuery("select LOCID," +
							"LOCNAME,location_code from location where location_code in ("+locations+") "); 
							try {
								while(rs11.next()) {
									locationList.add(rs11.getString("location_code"));
									locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
									
								}
								rs11.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							help.setLocationIdList(locationList);
							help.setLocationLabelList(locationLabelList);
	
		
	
		
					
	
				ArrayList deptList=new ArrayList();
				ArrayList deptLabelList=new ArrayList();
				ResultSet rs15 = ad.selectQuery("select dptid," +
						"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
						try {
							while(rs15.next()) {
								deptList.add(rs15.getString("dptid"));
								deptLabelList.add(rs15.getString("DPTLTXT"));
							}
							rs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						help.setDeptList(deptList);
						help.setDeptLabelList(deptLabelList);
						
						
	
				
				request.setAttribute("result", "result");
				try {
					rs17.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					cc.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return mapping.findForward("cumulativemanpowerreport");	
	
	
		
	
		
	}
	public ActionForward manpowerreport(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {


		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
		
		Calendar mycal = Calendar.getInstance();
		help.setFrommonth(Integer.toString(mycal.get(Calendar.MONTH) + 1));
		
		
		
		
		
		ArrayList shiftList=new ArrayList();
		ArrayList shiftLabelList=new ArrayList();
		ResultSet rs115 = ad.selectQuery("select shift_code," +
				"Shift_Name from EMP_SHIFT_MASTER order by Shift_Name"); 
				try {
					while(rs115.next()) {
						shiftList.add(rs115.getString("shift_code"));
						shiftLabelList.add(rs115.getString("Shift_Name"));
					}
					rs115.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setShiftList(shiftList);
				help.setShiftLabelList(shiftLabelList);
		
				String cmpcode="";
				int id=user.getGroupId();
				String cmp[]=new String[0]; 
				String locations="";
				
				String aa="select * from user_group where id='"+id+"'";
				ResultSet cc=ad.selectQuery(aa);
				try {
					if(cc.next())
					{
						cmpcode=cc.getString("Attendance_Loc");
						
						if(cmpcode.contains(","))
						{
						 cmp=cmpcode.split(",");
						
						for(int b=0;b<cmp.length;b++)
						{
							locations=locations+"'"+cmp[b]+"',";
						}
						
						locations=locations.substring(0, locations.length()-1);
						}
						else
						{
							locations="'"+cmpcode+"'";
						}
					}
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
		   ArrayList locationList=new ArrayList();
					ArrayList locationLabelList=new ArrayList();
					ResultSet rs11 = ad.selectQuery("select LOCID," +
							"LOCNAME,location_code from location where location_code in ("+locations+") "); 
							try {
								while(rs11.next()) {
									locationList.add(rs11.getString("location_code"));
									locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
									
								}
								rs11.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							help.setLocationIdList(locationList);
							help.setLocationLabelList(locationLabelList);
	
		
	
		
					
	
				ArrayList deptList=new ArrayList();
				ArrayList deptLabelList=new ArrayList();
				ResultSet rs15 = ad.selectQuery("select dptid," +
						"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
						try {
							while(rs15.next()) {
								deptList.add(rs15.getString("dptid"));
								deptLabelList.add(rs15.getString("DPTLTXT"));
							}
							rs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						help.setDeptList(deptList);
						help.setDeptLabelList(deptLabelList);
						
						//subdep
						ArrayList subdeptList=new ArrayList();
						ArrayList subdeptLabelList=new ArrayList();
						ResultSet subrs15 = ad.selectQuery("select SDPTID," +
								"SDPTID_LTXT from SUBDEPARTMENT order by SDPTID_LTXT "); 
								try {
									while(subrs15.next()) {
										subdeptList.add(subrs15.getString("SDPTID"));
										subdeptLabelList.add(subrs15.getString("SDPTID_LTXT"));
									}
									subrs15.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								
								help.setSubdeptList(subdeptList);
								help.setSubdeptLabelList(subdeptLabelList);
								
								//repgrp
								ArrayList repgrptList=new ArrayList();
								ArrayList repgrpLabelList=new ArrayList();
								ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
										"Grp_LTXT from REPORTING_GROUP where  Grp_ID not in(1,2,3,7)  order by Grp_LTXT "); 
										try {
											while(reprs15.next()) {
												repgrptList.add(reprs15.getString("Grp_ID"));
												repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
											}
											reprs15.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										
										help.setRepgrpList(repgrptList);
										help.setRepgrpLabelList(repgrpLabelList);
								
								
				
										ArrayList payGroupList=new ArrayList();
										ArrayList payGroupLabelList=new ArrayList();
										ResultSet rs12 = ad.selectQuery("select Paygroup," +
										"Long_Desc from Paygroup_Master order by Long_Desc"); 
										try {
											while(rs12.next()) {
												payGroupList.add(rs12.getString("Paygroup"));
												payGroupLabelList.add(rs12.getString("Long_Desc"));
											}
											rs12.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										
										help.setPayGroupList(payGroupList);
										help.setPayGroupLabelList(payGroupLabelList);
				
				request.setAttribute("result", "result");
				try {
					reprs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					subrs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					cc.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs115.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return mapping.findForward("manpowerreport");	
	
	
		
	}
	public ActionForward Daywisemanpowerreport(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {


		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
		
		Calendar mycal = Calendar.getInstance();
		help.setFrommonth(Integer.toString(mycal.get(Calendar.MONTH) + 1));
		
		
		
		
		
		/*ArrayList shiftList=new ArrayList();
		ArrayList shiftLabelList=new ArrayList();
		ResultSet rs115 = ad.selectQuery("select shift_code," +
				"Shift_Name from EMP_SHIFT_MASTER order by Shift_Name"); 
				try {
					while(rs115.next()) {
						shiftList.add(rs115.getString("shift_code"));
						shiftLabelList.add(rs115.getString("Shift_Name"));
					}
					rs115.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setShiftList(shiftList);
				help.setShiftLabelList(shiftLabelList);
		*/
				String cmpcode="";
				int id=user.getGroupId();
			/*	String location=user.getLocname();*/
 				
				String cmp[]=new String[0]; 
				String locations="";
				
				String aa="select * from user_group where id='"+id+"'";
				ResultSet cc=ad.selectQuery(aa);
				try {
					if(cc.next())
					{
						cmpcode=cc.getString("Attendance_Loc");
						
						if(cmpcode.contains(","))
						{
						 cmp=cmpcode.split(",");
						
						for(int b=0;b<cmp.length;b++)
						{
							locations=locations+"'"+cmp[b]+"',";
						}
						
						locations=locations.substring(0, locations.length()-1);
						}
						else
						{
							locations="'"+cmpcode+"'";
						}
					}
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
		   ArrayList locationList=new ArrayList();
					ArrayList locationLabelList=new ArrayList();
					ResultSet rs11 = ad.selectQuery("select LOCID," +
							"LOCNAME,location_code from location where location_code in ("+locations+") "); 
							try {
								while(rs11.next()) {
									locationList.add(rs11.getString("location_code"));
									locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
									
								}
								rs11.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							help.setLocationIdList(locationList);
							help.setLocationLabelList(locationLabelList);
	
		
	///Shift locationwise
							String location=request.getParameter("loc");
							ArrayList shiftList=new ArrayList();
							ArrayList shiftLabelList=new ArrayList();
							ResultSet rs115 = ad.selectQuery("select shift_code," +
									"Shift_Name from EMP_SHIFT_MASTER where loc like ('%"+location+"%')  order by Shift_Name"); 
							/*where loc like ('%"+locations+"%')*/	
							try {
										while(rs115.next()) {
											shiftList.add(rs115.getString("shift_code"));
											shiftLabelList.add(rs115.getString("Shift_Name"));
										}
										rs115.close();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
									
									help.setShiftList(shiftList);
									help.setShiftLabelList(shiftLabelList);
							
		
					
	
				ArrayList deptList=new ArrayList();
				ArrayList deptLabelList=new ArrayList();
				ResultSet rs15 = ad.selectQuery("select dptid," +
						"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
						try {
							while(rs15.next()) {
								deptList.add(rs15.getString("dptid"));
								deptLabelList.add(rs15.getString("DPTLTXT"));
							}
							rs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						help.setDeptList(deptList);
						help.setDeptLabelList(deptLabelList);
						
						//subdep
						ArrayList subdeptList=new ArrayList();
						ArrayList subdeptLabelList=new ArrayList();
						ResultSet subrs15 = ad.selectQuery("select SDPTID," +
								"SDPTID_LTXT from SUBDEPARTMENT order by SDPTID_LTXT "); 
								try {
									while(subrs15.next()) {
										subdeptList.add(subrs15.getString("SDPTID"));
										subdeptLabelList.add(subrs15.getString("SDPTID_LTXT"));
									}
									subrs15.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									e.printStackTrace();
								}
								
								help.setSubdeptList(subdeptList);
								help.setSubdeptLabelList(subdeptLabelList);
								
								//repgrp
								ArrayList repgrptList=new ArrayList();
								ArrayList repgrpLabelList=new ArrayList();
								ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
										"Grp_LTXT from REPORTING_GROUP where  Grp_ID not in(1,2,3,7)  order by Grp_LTXT "); 
										try {
											while(reprs15.next()) {
												repgrptList.add(reprs15.getString("Grp_ID"));
												repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
											}
											reprs15.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										
										help.setRepgrpList(repgrptList);
										help.setRepgrpLabelList(repgrpLabelList);
								
								
				
										ArrayList payGroupList=new ArrayList();
										ArrayList payGroupLabelList=new ArrayList();
										ResultSet rs12 = ad.selectQuery("select Paygroup," +
										"Long_Desc from Paygroup_Master where Plant in("+locations+") order by Long_Desc"); 
										try {
											while(rs12.next()) {
												payGroupList.add(rs12.getString("Paygroup"));
												payGroupLabelList.add(rs12.getString("Long_Desc"));
											}
											rs12.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										
										help.setPayGroupList(payGroupList);
										help.setPayGroupLabelList(payGroupLabelList);
				
				request.setAttribute("result", "result");
				try {
					reprs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					subrs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					cc.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs115.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return mapping.findForward("Daywisemanpowerreport");	
	
	
		
	}
	
	
	public ActionForward musterreport(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		HRApprovalForm help = (HRApprovalForm) form;
		
		Calendar mycal = Calendar.getInstance();
		help.setFrommonth(Integer.toString(mycal.get(Calendar.MONTH) + 1));
		
		
		ArrayList workList=new ArrayList();
		ArrayList workLabelList=new ArrayList();
		ResultSet rs14 = ad.selectQuery("select loc_id," +
				"loc_name from working_location order by loc_name"); 
				try {
					while(rs14.next()) {
						workList.add(rs14.getString("loc_id"));
						workLabelList.add(rs14.getString("loc_name"));
					}
					rs14.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
		help.setWorkList(workList);
		help.setWorkLabelList(workLabelList);
		
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		   ArrayList locationList=new ArrayList();
					ArrayList locationLabelList=new ArrayList();
					ResultSet rs11 = ad.selectQuery("select LOCID," +
							"LOCNAME,location_code from location where location_code in ("+locations+") "); 
							try {
								while(rs11.next()) {
									locationList.add(rs11.getString("location_code"));
									locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
									
								}
								rs11.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							
							help.setLocationIdList(locationList);
							help.setLocationLabelList(locationLabelList);
	
		
		ArrayList categoryList=new ArrayList();
		ArrayList categoryLabelList=new ArrayList();
		ResultSet rs13 = ad.selectQuery("select STAFFCAT," +
				"CATLTEXT from category order by CATLTEXT "); 
				try {
					while(rs13.next()) {
						categoryList.add(rs13.getString("STAFFCAT"));
						categoryLabelList.add(rs13.getString("CATLTEXT"));
					}
					rs13.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setCategoryList(categoryList);
				help.setCategoryLabelList(categoryLabelList);
		
				ArrayList payGroupList=new ArrayList();
				ArrayList payGroupLabelList=new ArrayList();
				ResultSet rs12 = ad.selectQuery("select Paygroup," +
				"Long_Desc from Paygroup_Master order by Long_Desc"); 
				try {
					while(rs12.next()) {
						payGroupList.add(rs12.getString("Paygroup"));
						payGroupLabelList.add(rs12.getString("Long_Desc"));
					}
					rs12.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setPayGroupList(payGroupList);
				help.setPayGroupLabelList(payGroupLabelList);	
				
				//repgrp
				ArrayList repgrptList=new ArrayList();
				ArrayList repgrpLabelList=new ArrayList();
				ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
						"Grp_LTXT from REPORTING_GROUP   order by Grp_LTXT "); 
						try {
							while(reprs15.next()) {
								repgrptList.add(reprs15.getString("Grp_ID"));
								repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
							}
							reprs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						help.setRepgrpList(repgrptList);
						help.setRepgrpLabelList(repgrpLabelList);
				
	
				ArrayList deptList=new ArrayList();
				ArrayList deptLabelList=new ArrayList();
				ResultSet rs15 = ad.selectQuery("select dptid," +
						"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
				try {
							while(rs15.next()) {
								deptList.add(rs15.getString("dptid"));
								deptLabelList.add(rs15.getString("DPTLTXT"));
							}
							rs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						help.setDeptList(deptList);
						help.setDeptLabelList(deptLabelList);
				
				ArrayList desgList=new ArrayList();
				ArrayList desgLabelList=new ArrayList();
				ResultSet rs16 = ad.selectQuery("select dsgid," +
						"DSGLTXT from DESIGNATION order by DSGLTXT"); 
						try {
							while(rs16.next()) {
								desgList.add(rs16.getString("dsgid"));
								desgLabelList.add(rs16.getString("DSGLTXT"));
							}
							rs16.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
				help.setDesgList(desgList);
				help.setDesgLabelList(desgLabelList);
				
				ArrayList yearList=new ArrayList();
				ResultSet rs17 = ad.selectQuery("select distinct year from EMP_IN_OUT_Status order by year desc"); 
						try {
							while(rs17.next()) {
								yearList.add(rs17.getString("year"));
							}
							rs17.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
				help.setYearList(yearList);
				
				request.setAttribute("result", "result");
				try {
					rs14.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs13.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs12.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					cc.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs16.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					reprs15.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs17.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				return mapping.findForward("displaymusterreport");	
	
	}
	
	
	public HashMap shiftmap()
	{ 
		
	HashMap<String, String> hash=new HashMap<>();
		
		String abc="select * From EMP_SHIFT_MASTER";
		ResultSet as=ad.selectQuery(abc);
		try {
			while(as.next())
			{
				hash.put(as.getString("Shift_code"), as.getString("stxt"));
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		try {
			as.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return hash;
	}
	
	
	
	
	public String shiftname(String a)
	{
		
			
		
		
		

		String b = "";
		if(a==null)
		{
		  return b;	
		}
		
		if(!a.equalsIgnoreCase(""))
		{
		
		switch(a){
  	  case "0001": b="GS";
  	  break;
  	  case "0002": b="GS";
  	  break;
  	  case "0003": b="FS";
  	  break;
  	  case "0004": b="SS";
  	  break;
  	  case "0005": b="TS";
  	  break;
  	  case "0006": b="SS1";
  	  break;
  	  case "0007": b="FS";
  	  break;
  	  case "0008": b="SS";
  	  break;
  	  case "0009": b="TS";
  	  break;
  	  case "0010": b="NS";
  	  break;
  	  case "0011": b="SS";
  	  break;
  	  case "0012": b="Engg B";
  	  break;
  	  case "0013": b="Engg C";
  	  break;
  	  case "0014": b="Sec A";
  	  break;
  	  case "0015": b="Sec B";
  	  break; 
	  case "0016": b="Sec C";
  	  break; 
	  case "0017":  b="GS";
	  break;
	  case "0018": b="NS";
	  break;
	  case "0087": b="GS";
  	  break; 
	  case "0088":  b="RD";
	  break;
	  case "0089": b="SS";
	  break;
		

		}}
		return b;

	} 
	public ActionForward musterReportSearch(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
				HttpServletResponse response) {
		
		query1="";
		query2="";
		query3="";
		query4="";
		query5="";
		
		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
	HRApprovalForm help = (HRApprovalForm) form;
		
	
	       
	ArrayList workList=new ArrayList();
	ArrayList workLabelList=new ArrayList();
	ResultSet rs14 = ad.selectQuery("select loc_id," +
			"loc_name from working_location order by loc_name"); 
			try {
				while(rs14.next()) {
					workList.add(rs14.getString("loc_id"));
					workLabelList.add(rs14.getString("loc_name"));
				}
				rs14.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
	help.setWorkList(workList);
	help.setWorkLabelList(workLabelList);
	
	//repgrp
	ArrayList repgrptList=new ArrayList();
	ArrayList repgrpLabelList=new ArrayList();
	ResultSet reprs15 = ad.selectQuery("select Grp_ID," +
			"Grp_LTXT from REPORTING_GROUP   order by Grp_LTXT "); 
			try {
				while(reprs15.next()) {
					repgrptList.add(reprs15.getString("Grp_ID"));
					repgrpLabelList.add(reprs15.getString("Grp_LTXT"));
				}
				reprs15.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			help.setRepgrpList(repgrptList);
			help.setRepgrpLabelList(repgrpLabelList);	
			String cmpcode="";
			int id=user.getGroupId();
			String cmp[]=new String[0]; 
			String locations="";
			
			String aa="select * from user_group where id='"+id+"'";
			ResultSet cc=ad.selectQuery(aa);
			try {
				if(cc.next())
				{
					cmpcode=cc.getString("Attendance_Loc");
					
					if(cmpcode.contains(","))
					{
					 cmp=cmpcode.split(",");
					
					for(int b=0;b<cmp.length;b++)
					{
						locations=locations+"'"+cmp[b]+"',";
					}
					
					locations=locations.substring(0, locations.length()-1);
					}
					else
					{
						locations="'"+cmpcode+"'";
					}
				}
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		ArrayList locationList=new ArrayList();
		ArrayList locationLabelList=new ArrayList();
		ResultSet rs11 = ad.selectQuery("select LOCID," +
				"LOCNAME,location_code from location where location_code in ("+locations+") "); 
				try {
					while(rs11.next()) {
						locationList.add(rs11.getString("location_code"));
						locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
						
					}
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setLocationIdList(locationList);
				help.setLocationLabelList(locationLabelList);
		
		ArrayList list1=new ArrayList();
		ArrayList list2=new ArrayList();
		String[] monthName = {"","JAN", "FEB",
				  "MAR", "APR", "MAY", "JUN", "JUL",
				  "AUG", "SEP", "OCT", "NOV",
				  "DEC"
				  };
		

		
		ArrayList categoryList=new ArrayList();
		ArrayList categoryLabelList=new ArrayList();
		ResultSet rs13 = ad.selectQuery("select STAFFCAT," +
				"CATLTEXT from category order by CATLTEXT"); 
				try {
					while(rs13.next()) {
						categoryList.add(rs13.getString("STAFFCAT"));
						categoryLabelList.add(rs13.getString("CATLTEXT"));
					}
					rs13.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setCategoryList(categoryList);
				help.setCategoryLabelList(categoryLabelList);
		
				ArrayList payGroupList=new ArrayList();
				ArrayList payGroupLabelList=new ArrayList();
				ResultSet rs12 = ad.selectQuery("select Paygroup," +
				"Long_Desc from Paygroup_Master"); 
				try {
					while(rs12.next()) {
						payGroupList.add(rs12.getString("Paygroup"));
						payGroupLabelList.add(rs12.getString("Long_Desc"));
					}
					rs12.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setPayGroupList(payGroupList);
				help.setPayGroupLabelList(payGroupLabelList);		

				ArrayList deptList=new ArrayList();
				ArrayList deptLabelList=new ArrayList();
				ResultSet rs15 = ad.selectQuery("select dptid," +
						"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
						try {
							while(rs15.next()) {
								deptList.add(rs15.getString("dptid"));
								deptLabelList.add(rs15.getString("DPTLTXT"));
							}
							rs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						help.setDeptList(deptList);
						help.setDeptLabelList(deptLabelList);
				
				ArrayList desgList=new ArrayList();
				ArrayList desgLabelList=new ArrayList();
				ResultSet rs16 = ad.selectQuery("select dsgid," +
						"DSGLTXT from DESIGNATION order by DSGLTXT "); 
						try {
							while(rs16.next()) {
								desgList.add(rs16.getString("dsgid"));
								desgLabelList.add(rs16.getString("DSGLTXT"));
							}
							rs16.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
				help.setDesgList(desgList);
				help.setDesgLabelList(desgLabelList);
				
				ArrayList yearList=new ArrayList();
				ResultSet rs17 = ad.selectQuery("select distinct year from EMP_IN_OUT_Status  order by year desc"); 
						try {
							while(rs17.next()) {
								yearList.add(rs17.getString("year"));
							}
							rs17.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						help.setYearList(yearList);
						
						
						
						
						
						String ACtualdept="";
					    if(help.getDeptArray()!=null)
					    {	
					    String[] dept = help.getDeptArray();
					    
					    StringBuffer reqdept = new StringBuffer();
						for (int i = 0; i < dept.length; i++) {
							reqdept.append("'"+dept[i]+"'" + ",");
						}
						 ACtualdept= reqdept.substring(0, reqdept.length() - 1).toString();
					    }
						
						
					    String ACtualdesg="";
					    if(help.getDesgArray()!=null)
					    {
					    
						String[] desg = help.getDesgArray();
					    StringBuffer reqdesg = new StringBuffer();
						for (int i = 0; i < desg.length; i++) {
							reqdesg.append("'"+desg[i]+"'" + ",");
						}
						ACtualdesg = reqdesg.substring(0, reqdesg.length() - 1).toString();
					    
					    }
					    
					 
					    
					    String ACtualpay="";
					    if(help.getPayArray()!=null)
					    {
					    
						String[] pay = help.getPayArray();
					    StringBuffer reqpay = new StringBuffer();
						for (int i = 0; i < pay.length; i++) {
							reqpay.append("'"+pay[i]+"'" + ",");
						}
						ACtualpay = reqpay.substring(0, reqpay.length() - 1).toString();
					    
					    }
					    
					    //catArray
					    String ACtualcat="";
					    if(help.getCatArray()!=null)
					    {
					    
						String[] cat = help.getCatArray();
					    StringBuffer reqcat = new StringBuffer();
						for (int i = 0; i < cat.length; i++) {
							reqcat.append("'"+cat[i]+"'" + ",");
						}
						ACtualcat = reqcat.substring(0, reqcat.length() - 1).toString();
					    
					    }
					    
					    
					    
					    String ACtualloc="";
					    if(help.getLocArray()!=null)
					    {
					    
						String[] loc = help.getLocArray();
					    StringBuffer reqloc = new StringBuffer();
						for (int i = 0; i < loc.length; i++) {
							reqloc.append("'"+loc[i]+"'" + ",");
						}
						ACtualloc = reqloc.substring(0, reqloc.length() - 1).toString();
					    
					    }
					    
					    //reporting
					    
					    String ACtualrepgrp="";
					    if(help.getRepgrpArray()!=null)
					    {	
					    String[] repgrp = help.getRepgrpArray();
					    
					    StringBuffer reqrepgrp = new StringBuffer();
						for (int i = 0; i < repgrp.length; i++) {
							reqrepgrp.append("'"+repgrp[i]+"'" + ",");
						}
						ACtualrepgrp= reqrepgrp.substring(0, reqrepgrp.length() - 1).toString();
					    }
					    
					    
						
						String query1="select pernr,EMP_FULLNAME,DPTSTXT,DSGSTXT,Paygroup_Master.Paygroup,Paygroup_Master.Short_desc,Swipe_count from emp_official_info ,location ,DEPARTMENT ,DESIGNATION,Paygroup_Master where Location.LOCATION_CODE=emp_official_info.LOCID and "
								+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and Paygroup_Master.Paygroup =  emp_official_info.PAY_GROUP  ";
						String sqlfromdate="";
						String sqltodate="";
									
						
					
						
						if(!help.getLocationId().equalsIgnoreCase(""))
						{
							query1=query1+" and emp_official_info.LOCID ='"+help.getLocationId()+"' ";
						
						}
							
						if(!ACtualpay.equalsIgnoreCase(""))
						{
							query1=query1+" and emp_official_info.PAY_GROUP in("+ACtualpay+")  ";
						
						}

						if(!ACtualcat.equalsIgnoreCase(""))
						{
							query1=query1+" and emp_official_info.STAFFCAT in ("+ACtualcat+") ";
						
						}

						if(!ACtualdept.equalsIgnoreCase(""))
						{
							query1=query1+" and emp_official_info.DPTID in ("+ACtualdept+") ";
						}
						
						if(!ACtualdesg.equalsIgnoreCase(""))
						{
							query1=query1+" and emp_official_info.DSGID in ("+ACtualdesg+") ";
						}
						
						
						if(!help.getFrompernr().equalsIgnoreCase(""))
						{
							query1=query1+" and emp_official_info.pernr in ("+help.getFrompernr()+")  ";
						}
						
						
						if(!ACtualloc.equalsIgnoreCase(""))
						{
							query1=query1+" and emp_official_info.Work_ID in("+ACtualloc+") ";
						
						}
						
						if(!ACtualrepgrp.equalsIgnoreCase(""))
						{
							query1=query1+" and emp_official_info.Reporting_Grp in("+ACtualrepgrp+") ";
						
						}
						
						if(help.getEmptype().equalsIgnoreCase("Active"))
							query1 =query1+" and active=1 ";
						else
							query1 =query1+" and active=0 ";
							
							this.query1=query1;
							
							/*help.setMonth(monthName[Integer.parseInt(help.getFrommonth())]);*/
							
						request.setAttribute("result", "");
						try {
							rs14.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						try {
							rs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						try {
							rs17.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						try {
							rs16.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						try {
							rs11.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						try {
							cc.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						try {
							rs13.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						try {
							reprs15.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						try {
							rs12.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						return mapping.findForward("displaymusterreport");
						
					}
	
	
	public ActionForward musterReportExe(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
				HttpServletResponse response) {
		
		try {
			Thread.sleep(2000);
		} catch (InterruptedException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		} 
		
		
		HashMap ab=shiftmap();
		
		String key="";
		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
	
		HRApprovalForm help = (HRApprovalForm) form;
		ArrayList locationList=new ArrayList();
		ArrayList locationLabelList=new ArrayList();
		ArrayList datelist = new ArrayList();
		ArrayList list1=new ArrayList();
		ArrayList list2=new ArrayList();
		
		ArrayList list3=new ArrayList();
		ArrayList list4=new ArrayList();
		
		String[] monthName = {"","JAN", "FEB",
				  "MAR", "APR", "MAY", "JUN", "JUL",
				  "AUG", "SEP", "OCT", "NOV",
				  "DEC"
				  };
		

		Date dNow = new Date( );
		SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd");
		String exportdate=ft.format(dNow);
		

      help.setFrommonth(request.getParameter("month"));
      help.setYear(request.getParameter("year"));
      help.setAttntype(request.getParameter("attntype"));
	  help.setSummbrkup(request.getParameter("summbrkup"));	
	  help.setLocationId(request.getParameter("loc"));
			
			if(help.getSummbrkup().equalsIgnoreCase("Detailed"))
			{
		
			try {
				
				String selectedmon=help.getFrommonth();
				String selectedyear=help.getYear();
				String prevmont=Integer.toString((Integer.parseInt(selectedmon)-1));
				String prevyear="";
				if(prevmont.equalsIgnoreCase("0"))
				{
				 prevmont="12";
				 prevyear=Integer.toString((Integer.parseInt(selectedyear)-1));	
				}
				else
					prevyear=selectedyear;
				
				
			
				try {
					key = insertTEMPEMP(query1);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
			
					
				HRApprovalForm app1 =new HRApprovalForm();
				
					
				
					
					String b = "";		
				if(help.getAttntype().equalsIgnoreCase("Calendar Month")  )
						{
							
						
							
					    b = " select  ord,pernr,month,day1,	day2,	day3,	day4,	day5,	day6,	day7,	day8,	day9,	day10,	day11,	day12,	day13,	day14,	day15,	day16,	day17,	day18,	day19,	day20 ,  day21,	day22,	day23,	day24,	day25,	day26,	day27,	day28,	day29,	day30,	day31  "
					    		+ "from (select 1 as ord ,Temp_emp.pernr,convert(nvarchar(10),month) as month ,day1,	day2,	day3,	day4,	day5,	day6,	day7,	day8,	day9,	day10,	day11,	day12,	day13,	day14,	day15,	day16,	day17,	day18,	day19,	day20,	day21,	day22,	day23,	day24,	day25,	day26,	day27,	day28,	day29,	day30,	day31 "
							+ " from EMP_IN_OUT_Status,Temp_emp where EMP_IN_OUT_Status.pernr =Temp_emp.pernr and  month = '"+help.getFrommonth()+"' and Temp_emp.Date_Time='"+key+"' and year ='"+help.getYear()+"'  and Temp_emp.Swipe_count!=0 "
							+ " union"
							+ " select 1 as ord ,Temp_emp.pernr,convert(nvarchar(10),month) as month ,replace(day1,'AA','PP'),	replace(day2,'AA','PP'),	replace(day3,'AA','PP'),	replace(day4,'AA','PP'),	replace(day5,'AA','PP'),	replace(day6,'AA','PP'),	replace(day7,'AA','PP'),	replace(day8,'AA','PP'),	replace(day9,'AA','PP'),	replace(day10,'AA','PP'),	replace(day11,'AA','PP'),	replace(day12,'AA','PP'),	replace(day13,'AA','PP'),	replace(day14,'AA','PP'),	replace(day15,'AA','PP'),	replace(day16,'AA','PP'),	replace(day17,'AA','PP'),	replace(day18,'AA','PP'),	replace(day19,'AA','PP'),	replace(day20,'AA','PP'),	replace(day21,'AA','PP'),	replace(day22,'AA','PP'),	replace(day23,'AA','PP'),	replace(day24,'AA','PP'),	replace(day25,'AA','PP'),	replace(day26,'AA','PP'),	replace(day27,'AA','PP'),	replace(day28,'AA','PP'),	replace(day29,'AA','PP'),	replace(day30,'AA','PP'),	replace(day31,'AA','PP') "
							+ " from EMP_IN_OUT_Status,Temp_emp where EMP_IN_OUT_Status.pernr =Temp_emp.pernr and  month = '"+help.getFrommonth()+"' and Temp_emp.Date_Time='"+key+"' and year ='"+help.getYear()+"'  and Temp_emp.Swipe_count=0 "
							+ " union"
							+ " select 2,Temp_emp.pernr,convert(nvarchar(10),month) as month, convert(nvarchar(5),day1),	convert(nvarchar(5),day2),	convert(nvarchar(5),day3),	convert(nvarchar(5),day4),	convert(nvarchar(5),day5),	convert(nvarchar(5),day6),	convert(nvarchar(5),day7),	convert(nvarchar(5),day8),	convert(nvarchar(5),day9),	convert(nvarchar(5),day10),	convert(nvarchar(5),day11),	convert(nvarchar(5),day12),	convert(nvarchar(5),day13),	convert(nvarchar(5),day14),	convert(nvarchar(5),day15),	convert(nvarchar(5),day16),	convert(nvarchar(5),day17),	convert(nvarchar(5),day18),	convert(nvarchar(5),day19),	convert(nvarchar(5),day20),	convert(nvarchar(5),day21),	convert(nvarchar(5),day22),	convert(nvarchar(5),day23),	convert(nvarchar(5),day24),	convert(nvarchar(5),day25),	convert(nvarchar(5),day26),	convert(nvarchar(5),day27),	convert(nvarchar(5),day28),	convert(nvarchar(5),day29),	convert(nvarchar(5),day30),	convert(nvarchar(5),day31)"
							+ " from EMP_IN_OUT,Temp_emp where In_Out='I' and  EMP_IN_OUT.pernr =Temp_emp.pernr and  month = '"+help.getFrommonth()+"' and Temp_emp.Date_Time='"+key+"' and year ='"+help.getYear()+"' "
							+ " union"
							+ " select 3,Temp_emp.pernr, convert(nvarchar(10),month) as month,convert(nvarchar(5),day1),	convert(nvarchar(5),day2),	convert(nvarchar(5),day3),	convert(nvarchar(5),day4),	convert(nvarchar(5),day5),	convert(nvarchar(5),day6),	convert(nvarchar(5),day7),	convert(nvarchar(5),day8),	convert(nvarchar(5),day9),	convert(nvarchar(5),day10),	convert(nvarchar(5),day11),	convert(nvarchar(5),day12),	convert(nvarchar(5),day13),	convert(nvarchar(5),day14),	convert(nvarchar(5),day15),	convert(nvarchar(5),day16),	convert(nvarchar(5),day17),	convert(nvarchar(5),day18),	convert(nvarchar(5),day19),	convert(nvarchar(5),day20),	convert(nvarchar(5),day21),	convert(nvarchar(5),day22),	convert(nvarchar(5),day23),	convert(nvarchar(5),day24),	convert(nvarchar(5),day25),	convert(nvarchar(5),day26),	convert(nvarchar(5),day27),	convert(nvarchar(5),day28),	convert(nvarchar(5),day29),	convert(nvarchar(5),day30),	convert(nvarchar(5),day31)"
							+ " from EMP_IN_OUT,Temp_emp where In_Out='O' and EMP_IN_OUT.pernr =Temp_emp.pernr and  month = '"+help.getFrommonth()+"'  and Temp_emp.Date_Time='"+key+"' and year ='"+help.getYear()+"' "
							+ " union "
							+ " select 8 ,Temp_emp.pernr,convert(nvarchar(10),month) as month,day1,	day2,	day3,	day4,	day5,	day6,	day7,	day8,	day9,	day10,	day11,	day12,	day13,	day14,	day15,	day16,	day17,	day18,	day19,	day20,	day21,	day22,	day23,	day24,	day25,	day26,	day27,	day28,	day29,	day30,	day31"
							+ " from EMP_Shift_Register,Temp_emp where EMP_Shift_Register.pernr =Temp_emp.pernr and  month = '"+help.getFrommonth()+"' and Temp_emp.Date_Time='"+key+"' and  year ='"+help.getYear()+"' "
							+ " union "
							+ " SELECT *FROM ( SELECT '6' as ord,Temp_emp.pernr,convert(nvarchar(10),month(date)) as month ,'day'+convert(nvarchar(10),day(Date)) as d,Total  FROM Report_Daily_wise,Temp_emp where Report_Daily_wise.pernr =Temp_emp.pernr and month(date)='"+help.getFrommonth()+"' and Temp_emp.Date_Time='"+key+"' and year(date)='"+help.getYear()+"'   ) as SourceTable PIVOT(  max(Total)    FOR d in([day1],	[day2],	[day3],	[day4],	[day5],	[day6],	[day7],	[day8],	[day9],	[day10],	[day11],	[day12],	[day13],	[day14],	[day15],	[day16],	[day17],	[day18],	[day19],	[day20],	[day21],	[day22],	[day23],	[day24],	[day25],	[day26],	[day27],	[day28],	[day29],	[day30],	[day31]) )AS PivotTable"
							+ "	union  "
						   + "  SELECT *FROM ( SELECT '7' as ord,Temp_emp.pernr,convert(nvarchar(10),month(date)) as month ,'day'+convert(nvarchar(10),day(Date)) as d,ot  FROM Report_Daily_wise,Temp_emp where Report_Daily_wise.pernr =Temp_emp.pernr and month(date)='"+help.getFrommonth()+"' and Temp_emp.Date_Time='"+key+"' and year(date)='"+help.getYear()+"'   ) as SourceTable PIVOT(  max(ot)    FOR d in([day1],	[day2],	[day3],	[day4],	[day5],	[day6],	[day7],	[day8],	[day9],	[day10],	[day11],	[day12],	[day13],	[day14],	[day15],	[day16],	[day17],	[day18],	[day19],	[day20],	[day21],	[day22],	[day23],	[day24],	[day25],	[day26],	[day27],	[day28],	[day29],	[day30],	[day31]) )AS PivotTable" 
							+ " union "
							+ " SELECT *FROM ( SELECT '4' as ord,Temp_emp.pernr,convert(nvarchar(10),month(date)) as month ,'day'+convert(nvarchar(10),day(Date)) as d,Late  FROM Report_Daily_wise,Temp_emp where Report_Daily_wise.pernr =Temp_emp.pernr and month(date)='"+help.getFrommonth()+"' and Temp_emp.Date_Time='"+key+"' and year(date)='"+help.getYear()+"'   ) as SourceTable PIVOT(  max(Late)    FOR d in([day1],	[day2],	[day3],	[day4],	[day5],	[day6],	[day7],	[day8],	[day9],	[day10],	[day11],	[day12],	[day13],	[day14],	[day15],	[day16],	[day17],	[day18],	[day19],	[day20],	[day21],	[day22],	[day23],	[day24],	[day25],	[day26],	[day27],	[day28],	[day29],	[day30],	[day31]) )AS PivotTable"
						    + " union "
							+ " SELECT *FROM ( SELECT '5' as ord,Temp_emp.pernr,convert(nvarchar(10),month(date)) as month ,'day'+convert(nvarchar(10),day(Date)) as d,early  FROM Report_Daily_wise,Temp_emp where Report_Daily_wise.pernr =Temp_emp.pernr and month(date)='"+help.getFrommonth()+"' and Temp_emp.Date_Time='"+key+"' and year(date)='"+help.getYear()+"'   ) as SourceTable PIVOT(  max(early)    FOR d in([day1],	[day2],	[day3],	[day4],	[day5],	[day6],	[day7],	[day8],	[day9],	[day10],	[day11],	[day12],	[day13],	[day14],	[day15],	[day16],	[day17],	[day18],	[day19],	[day20],	[day21],	[day22],	[day23],	[day24],	[day25],	[day26],	[day27],	[day28],	[day29],	[day30],	[day31]) )AS PivotTable"
						
							+ "   union select 0 as ord ,Temp_emp.pernr,convert(nvarchar(10),Temp_emp.Pernr)+': '+EMP_FULLNAME+': '+DPTSTXT+': '+DSGSTXT,'','',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	''  from emp_official_info,DEPARTMENT,DESIGNATION,Temp_emp where emp_official_info.pernr =Temp_emp.pernr and Temp_emp.Date_Time='"+key+"'  and emp_official_info.DPTID=DEPARTMENT.DPTID and emp_official_info.DSGID=DESIGNATION.DSGID"
							+ ")t order by pernr,1";
						}
						
						if(help.getAttntype().equalsIgnoreCase("Payable Month")  )
						{
								
							b = " select t.ord ,t.pernr, t.month, day1,	day2,	day3,	day4,	day5,	day6,	day7,	day8,	day9,	day10,	day11,	day12,	day13,	day14,	day15,	day16,	day17,	day18,	day19,	day20 ,  day21,	day22,	day23,	day24,	day25,	day26,	day27,	day28,	day29,	day30,	day31  from ("
									+ " select 8 as ord,Temp_emp.pernr,convert(nvarchar(10),month) as month,	day21,	day22,	day23,	day24,	day25,	day26,	day27,	day28,	day29,	day30,	day31"
									+ " from EMP_Shift_Register,Temp_emp where EMP_Shift_Register.pernr =Temp_emp.pernr and Temp_emp.Date_Time='"+key+"' and  month = '"+prevmont+"' and  year ='"+prevyear+"' " 
									+ " union"
									+ " select 2,Temp_emp.pernr,convert(nvarchar(10),month) as month,	convert(nvarchar(5),day21),	convert(nvarchar(5),day22),	convert(nvarchar(5),day23),	convert(nvarchar(5),day24),	convert(nvarchar(5),day25),	convert(nvarchar(5),day26),	convert(nvarchar(5),day27),	convert(nvarchar(5),day28),	convert(nvarchar(5),day29),	convert(nvarchar(5),day30),	convert(nvarchar(5),day31)"
									+ " from EMP_IN_OUT,Temp_emp where In_Out='I' and  EMP_IN_OUT.pernr =Temp_emp.pernr and Temp_emp.Date_Time='"+key+"' and  month = '"+prevmont+"' and  year ='"+prevyear+"' "
									+ " union"
									+ " select 3,Temp_emp.pernr, convert(nvarchar(10),month) as month, convert(nvarchar(5),day21),	convert(nvarchar(5),day22),	convert(nvarchar(5),day23),	convert(nvarchar(5),day24),	convert(nvarchar(5),day25),	convert(nvarchar(5),day26),	convert(nvarchar(5),day27),	convert(nvarchar(5),day28),	convert(nvarchar(5),day29),	convert(nvarchar(5),day30),	convert(nvarchar(5),day31)"
									+ " from EMP_IN_OUT,Temp_emp where In_Out='O' and EMP_IN_OUT.pernr =Temp_emp.pernr and Temp_emp.Date_Time='"+key+"' and  month = '"+prevmont+"' and  year ='"+prevyear+"' "
									+ " union "
									+ " select 1 as ord ,Temp_emp.pernr,convert(nvarchar(10),month) as month ,	day21,	day22,	day23,	day24,	day25,	day26,	day27,	day28,	day29,	day30,	day31"
									+ " from EMP_IN_OUT_Status,Temp_emp where EMP_IN_OUT_Status.pernr =Temp_emp.pernr  and Temp_emp.Date_Time='"+key+"' and  month = '"+prevmont+"' and  year ='"+prevyear+"'  and Temp_emp.Swipe_count!=0 " 
								    + " union "
									+ "select 1 as ord ,Temp_emp.pernr,convert(nvarchar(10),month) as month ,	replace(day21,'AA','PP'),	replace(day22,'AA','PP'),	replace(day23,'AA','PP'),	replace(day24,'AA','PP'),	replace(day25,'AA','PP'),	replace(day26,'AA','PP'),	replace(day27,'AA','PP'),	replace(day28,'AA','PP'),	replace(day29,'AA','PP'),	replace(day30,'AA','PP'),	replace(day31,'AA','PP') "
									+ " from EMP_IN_OUT_Status,Temp_emp where EMP_IN_OUT_Status.pernr =Temp_emp.pernr  and Temp_emp.Date_Time='"+key+"' and  month = '"+prevmont+"' and  year ='"+prevyear+"'  and Temp_emp.Swipe_count=0 " 
									+ " union "
									+ " SELECT *FROM ( SELECT '6' as ord,Temp_emp.pernr,convert(nvarchar(10),month(date)) as month ,'day'+convert(nvarchar(10),day(Date)) as d,Total  FROM Report_Daily_wise,Temp_emp where Report_Daily_wise.pernr =Temp_emp.pernr and Temp_emp.Date_Time='"+key+"' and month(date)='"+prevmont+"' and year(date)='"+prevyear+"'   ) as SourceTable PIVOT(  max(Total)    FOR d in(	[day21],	[day22],	[day23],	[day24],	[day25],	[day26],	[day27],	[day28],	[day29],	[day30],	[day31]) )AS PivotTable"
										+ "	union  "
						          + "  SELECT *FROM ( SELECT '7' as ord,Temp_emp.pernr,convert(nvarchar(10),month(date)) as month ,'day'+convert(nvarchar(10),day(Date)) as d,ot  FROM Report_Daily_wise,Temp_emp where Report_Daily_wise.pernr =Temp_emp.pernr and month(date)='"+prevmont+"' and Temp_emp.Date_Time='"+key+"' and year(date)='"+prevyear+"'   ) as SourceTable PIVOT(  max(ot)    FOR d in([day21],	[day22],	[day23],	[day24],	[day25],	[day26],	[day27],	[day28],	[day29],	[day30],	[day31]) )AS PivotTable" 
															+ " union "
									+ " SELECT *FROM ( SELECT '4' as ord,Temp_emp.pernr,convert(nvarchar(10),month(date)) as month ,'day'+convert(nvarchar(10),day(Date)) as d,Late  FROM Report_Daily_wise,Temp_emp where Report_Daily_wise.pernr =Temp_emp.pernr  and Temp_emp.Date_Time='"+key+"' and month(date)='"+prevmont+"' and year(date)='"+prevyear+"'   ) as SourceTable PIVOT(  max(Late)    FOR d in(	[day21],	[day22],	[day23],	[day24],	[day25],	[day26],	[day27],	[day28],	[day29],	[day30],	[day31]) )AS PivotTable"
								    + " union "
									+ " SELECT *FROM ( SELECT '5' as ord,Temp_emp.pernr,convert(nvarchar(10),month(date)) as month ,'day'+convert(nvarchar(10),day(Date)) as d,early  FROM Report_Daily_wise,Temp_emp where Report_Daily_wise.pernr =Temp_emp.pernr and Temp_emp.Date_Time='"+key+"' and month(date)='"+prevmont+"' and year(date)='"+prevyear+"'   ) as SourceTable PIVOT(  max(early)    FOR d in(	[day21],	[day22],	[day23],	[day24],	[day25],	[day26],	[day27],	[day28],	[day29],	[day30],	[day31]) )AS PivotTable"
									+ "   union select 0 as ord ,Temp_emp.pernr,convert(nvarchar(10),Temp_emp.Pernr)+': '+EMP_FULLNAME+': '+DPTSTXT+': '+DSGSTXT,'','',	'',	'',	'',	'',	'',	'',	'',	'',	''  from emp_official_info,DEPARTMENT,DESIGNATION,Temp_emp where emp_official_info.pernr =Temp_emp.pernr and Temp_emp.Date_Time='"+key+"'  and emp_official_info.DPTID=DEPARTMENT.DPTID and emp_official_info.DSGID=DESIGNATION.DSGID"	
									+ " )t ,"
									+ " ("
									+ " select 8 as ord,Temp_emp.pernr,convert(nvarchar(10),month) as month, day1,	day2,	day3,	day4,	day5,	day6,	day7,	day8,	day9,	day10,	day11,	day12,	day13,	day14,	day15,	day16,	day17,	day18,	day19,	day20"
									+ " from EMP_Shift_Register,Temp_emp where EMP_Shift_Register.pernr =Temp_emp.pernr and Temp_emp.Date_Time='"+key+"' and   month = '"+help.getFrommonth()+"' and  year ='"+help.getYear()+"' " 
									+ " union"
									+ " select 2,Temp_emp.pernr,convert(nvarchar(10),month) as month, convert(nvarchar(5),day1),	convert(nvarchar(5),day2),	convert(nvarchar(5),day3),	convert(nvarchar(5),day4),	convert(nvarchar(5),day5),	convert(nvarchar(5),day6),	convert(nvarchar(5),day7),	convert(nvarchar(5),day8),	convert(nvarchar(5),day9),	convert(nvarchar(5),day10),	convert(nvarchar(5),day11),	convert(nvarchar(5),day12),	convert(nvarchar(5),day13),	convert(nvarchar(5),day14),	convert(nvarchar(5),day15),	convert(nvarchar(5),day16),	convert(nvarchar(5),day17),	convert(nvarchar(5),day18),	convert(nvarchar(5),day19),	convert(nvarchar(5),day20) "
									+ " from EMP_IN_OUT,Temp_emp where In_Out='I' and  EMP_IN_OUT.pernr =Temp_emp.pernr and Temp_emp.Date_Time='"+key+"' and  month = '"+help.getFrommonth()+"' and year ='"+help.getYear()+"' "
									+ " union"
									+ " select 3,Temp_emp.pernr, convert(nvarchar(10),month) as month,convert(nvarchar(5),day1),	convert(nvarchar(5),day2),	convert(nvarchar(5),day3),	convert(nvarchar(5),day4),	convert(nvarchar(5),day5),	convert(nvarchar(5),day6),	convert(nvarchar(5),day7),	convert(nvarchar(5),day8),	convert(nvarchar(5),day9),	convert(nvarchar(5),day10),	convert(nvarchar(5),day11),	convert(nvarchar(5),day12),	convert(nvarchar(5),day13),	convert(nvarchar(5),day14),	convert(nvarchar(5),day15),	convert(nvarchar(5),day16),	convert(nvarchar(5),day17),	convert(nvarchar(5),day18),	convert(nvarchar(5),day19),	convert(nvarchar(5),day20) "
									+ " from EMP_IN_OUT,Temp_emp where In_Out='O' and EMP_IN_OUT.pernr =Temp_emp.pernr and Temp_emp.Date_Time='"+key+"' and  month = '"+help.getFrommonth()+"' and year ='"+help.getYear()+"' "
									+ " union "
									+ " select 1 as ord ,Temp_emp.pernr,convert(nvarchar(10),month) as month, day1,	day2,	day3,	day4,	day5,	day6,	day7,	day8,	day9,	day10,	day11,	day12,	day13,	day14,	day15,	day16,	day17,	day18,	day19,	day20"
									+ " from EMP_IN_OUT_Status,Temp_emp where EMP_IN_OUT_Status.pernr =Temp_emp.pernr and Temp_emp.Date_Time='"+key+"' and  month = '"+help.getFrommonth()+"' and year ='"+help.getYear()+"' and Temp_emp.Swipe_count!=0  "
									+ " union "
									+ "select 1 as ord ,Temp_emp.pernr,convert(nvarchar(10),month) as month ,replace(day1,'AA','PP'),	replace(day2,'AA','PP'),	replace(day3,'AA','PP'),	replace(day4,'AA','PP'),	replace(day5,'AA','PP'),	replace(day6,'AA','PP'),	replace(day7,'AA','PP'),	replace(day8,'AA','PP'),	replace(day9,'AA','PP'),	replace(day10,'AA','PP'),	replace(day11,'AA','PP'),	replace(day12,'AA','PP'),	replace(day13,'AA','PP'),	replace(day14,'AA','PP'),	replace(day15,'AA','PP'),	replace(day16,'AA','PP'),	replace(day17,'AA','PP'),	replace(day18,'AA','PP'),	replace(day19,'AA','PP'),	replace(day20,'AA','PP') "
									+ " from EMP_IN_OUT_Status,Temp_emp where EMP_IN_OUT_Status.pernr =Temp_emp.pernr and Temp_emp.Date_Time='"+key+"' and  month = '"+help.getFrommonth()+"' and year ='"+help.getYear()+"' and Temp_emp.Swipe_count=0  "
									+ " union "
									+ " SELECT *FROM ( SELECT '6' as ord,Temp_emp.pernr,convert(nvarchar(10),month(date)) as month ,'day'+convert(nvarchar(10),day(Date)) as d,Total  FROM Report_Daily_wise,Temp_emp where Report_Daily_wise.pernr =Temp_emp.pernr and Temp_emp.Date_Time='"+key+"' and month(date)='"+help.getFrommonth()+"' and year(date)='"+help.getYear()+"'   ) as SourceTable PIVOT(  max(Total)    FOR d in([day1],	[day2],	[day3],	[day4],	[day5],	[day6],	[day7],	[day8],	[day9],	[day10],	[day11],	[day12],	[day13],	[day14],	[day15],	[day16],	[day17],	[day18],	[day19],	[day20]) )AS PivotTable"
									+ "	union  "
						          + "  SELECT *FROM ( SELECT '7' as ord,Temp_emp.pernr,convert(nvarchar(10),month(date)) as month ,'day'+convert(nvarchar(10),day(Date)) as d,ot  FROM Report_Daily_wise,Temp_emp where Report_Daily_wise.pernr =Temp_emp.pernr and month(date)='"+help.getFrommonth()+"' and Temp_emp.Date_Time='"+key+"' and year(date)='"+help.getYear()+"'   ) as SourceTable PIVOT(  max(ot)    FOR d in([day1],	[day2],	[day3],	[day4],	[day5],	[day6],	[day7],	[day8],	[day9],	[day10],	[day11],	[day12],	[day13],	[day14],	[day15],	[day16],	[day17],	[day18],	[day19],	[day20]) )AS PivotTable" 
																	+ " union "
									+ " SELECT *FROM ( SELECT '4' as ord,Temp_emp.pernr,convert(nvarchar(10),month(date)) as month ,'day'+convert(nvarchar(10),day(Date)) as d,Late  FROM Report_Daily_wise,Temp_emp where Report_Daily_wise.pernr =Temp_emp.pernr and Temp_emp.Date_Time='"+key+"' and month(date)='"+help.getFrommonth()+"' and year(date)='"+help.getYear()+"'   ) as SourceTable PIVOT(  max(Late)    FOR d in([day1],	[day2],	[day3],	[day4],	[day5],	[day6],	[day7],	[day8],	[day9],	[day10],	[day11],	[day12],	[day13],	[day14],	[day15],	[day16],	[day17],	[day18],	[day19],	[day20]) )AS PivotTable"
								    + " union "
									+ " SELECT *FROM ( SELECT '5' as ord,Temp_emp.pernr,convert(nvarchar(10),month(date)) as month ,'day'+convert(nvarchar(10),day(Date)) as d,early  FROM Report_Daily_wise,Temp_emp where Report_Daily_wise.pernr =Temp_emp.pernr and Temp_emp.Date_Time='"+key+"' and month(date)='"+help.getFrommonth()+"' and year(date)='"+help.getYear()+"'   ) as SourceTable PIVOT(  max(early)    FOR d in([day1],	[day2],	[day3],	[day4],	[day5],	[day6],	[day7],	[day8],	[day9],	[day10],	[day11],	[day12],	[day13],	[day14],	[day15],	[day16],	[day17],	[day18],	[day19],	[day20]) )AS PivotTable"
										+ "   union select 0 as ord ,Temp_emp.pernr,convert(nvarchar(10),Temp_emp.Pernr)+': '+EMP_FULLNAME+': '+DPTSTXT+': '+DSGSTXT,'','',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'',	'' from emp_official_info,DEPARTMENT,DESIGNATION,Temp_emp where emp_official_info.pernr =Temp_emp.pernr and Temp_emp.Date_Time='"+key+"'  and emp_official_info.DPTID=DEPARTMENT.DPTID and emp_official_info.DSGID=DESIGNATION.DSGID"
									
									+ " )k"
									+ " where k.ord = t.ord AND K.PERNR=T.PERNR"
									+ " order by pernr,1";
							
						}

						 
					
					
					
			ResultSet rs20 = ad.selectQuery(b);
			while(rs20.next())
			{	
				HRApprovalForm app =new HRApprovalForm();
		       app.setOdsize(rs20.getInt("ord"));
		 
				app1.setMonth(rs20.getString("month"));
				app.setMonth(rs20.getString("month"));
				if(rs20.getString("ord").equalsIgnoreCase("8"))					
				{
				app.setDay1((String) ab.get(rs20.getString("day1")));								
				app.setDay2((String) ab.get(rs20.getString("day2")));
				app.setDay3((String) ab.get(rs20.getString("day3")));
				app.setDay4((String) ab.get(rs20.getString("day4")));
				app.setDay5((String) ab.get(rs20.getString("day5")));
				app.setDay6((String) ab.get(rs20.getString("day6")));
				app.setDay7((String) ab.get(rs20.getString("day7")));
				app.setDay8((String) ab.get(rs20.getString("day8")));
				app.setDay9((String) ab.get(rs20.getString("day9")));
				app.setDay10((String) ab.get(rs20.getString("day10")));
				app.setDay11((String) ab.get(rs20.getString("day11")));
				app.setDay12((String) ab.get(rs20.getString("day12")));
				app.setDay13((String) ab.get(rs20.getString("day13")));
				app.setDay14((String) ab.get(rs20.getString("day14")));
				app.setDay15((String) ab.get(rs20.getString("day15")));
				app.setDay16((String) ab.get(rs20.getString("day16")));
				app.setDay17((String) ab.get(rs20.getString("day17")));
				app.setDay18((String) ab.get(rs20.getString("day18")));
				app.setDay19((String) ab.get(rs20.getString("day19")));
				app.setDay20((String) ab.get(rs20.getString("day20")));
				app.setDay21((String) ab.get(rs20.getString("day21")));
				app.setDay22((String) ab.get(rs20.getString("day22")));
				app.setDay23((String) ab.get(rs20.getString("day23")));
				app.setDay24((String) ab.get(rs20.getString("day24")));
				app.setDay25((String) ab.get(rs20.getString("day25")));
				app.setDay26((String) ab.get(rs20.getString("day26")));
				app.setDay27((String) ab.get(rs20.getString("day27")));
				app.setDay28((String) ab.get(rs20.getString("day28")));
				app.setDay29((String) ab.get(rs20.getString("day29")));
				app.setDay30((String) ab.get(rs20.getString("day30")));
				app.setDay31((String) ab.get(rs20.getString("day31")));
				
				}
				else
				{
					if(rs20.getString("day1")!=null)
					{
					if(rs20.getString("day1").contains("NL"))
					app.setDay1(rs20.getString("day1").replace("NL", "LP"));	
					else
					app.setDay1(rs20.getString("day1"));	
					}
					
					if(rs20.getString("day2")!=null)
					{
					if(rs20.getString("day2").contains("NL"))
					app.setDay2(rs20.getString("day2").replace("NL", "LP"));
					else
				    app.setDay2(rs20.getString("day2"));
					}
					
					if(rs20.getString("day3")!=null)
					{
					if(rs20.getString("day3").contains("NL"))
					app.setDay3(rs20.getString("day3").replace("NL", "LP"));
					else
					app.setDay3(rs20.getString("day3"));
					}
					
					if(rs20.getString("day4")!=null)
					{
					if(rs20.getString("day4").contains("NL"))
					app.setDay4(rs20.getString("day4").replace("NL", "LP"));
					else
					app.setDay4(rs20.getString("day4"));
					}
					
					if(rs20.getString("day5")!=null)
					{
					if(rs20.getString("day5").contains("NL"))
					app.setDay5(rs20.getString("day5").replace("NL", "LP"));
					else
					app.setDay5(rs20.getString("day5"));
					}
					
					if(rs20.getString("day6")!=null)
					{
					if(rs20.getString("day6").contains("NL"))
					app.setDay6(rs20.getString("day6").replace("NL", "LP"));
					else
					app.setDay6(rs20.getString("day6"));
					}
					
					
					if(rs20.getString("day7")!=null)
					{
					if(rs20.getString("day7").contains("NL"))
					app.setDay7(rs20.getString("day7").replace("NL", "LP"));
					else
					app.setDay7(rs20.getString("day7"));
					}
					
					if(rs20.getString("day8")!=null)
					{
					if(rs20.getString("day8").contains("NL"))
					app.setDay8(rs20.getString("day8").replace("NL", "LP"));
					else
					app.setDay8(rs20.getString("day8"));
					}
					if(rs20.getString("day9")!=null)
					{
					if(rs20.getString("day9").contains("NL"))
					app.setDay9(rs20.getString("day9").replace("NL", "LP"));
					else
					app.setDay9(rs20.getString("day9"));
					}
					if(rs20.getString("day10")!=null)
					{
					if(rs20.getString("day10").contains("NL"))
					app.setDay10(rs20.getString("day10").replace("NL", "LP"));
					else
					app.setDay10(rs20.getString("day10"));
					}
					if(rs20.getString("day11")!=null)
					{
					if(rs20.getString("day11").contains("NL"))
					app.setDay11(rs20.getString("day11").replace("NL", "LP"));
					else
					app.setDay11(rs20.getString("day11"));
					}
					if(rs20.getString("day12")!=null)
					{
					if(rs20.getString("day12").contains("NL"))
					app.setDay12(rs20.getString("day12").replace("NL", "LP"));
					else
					app.setDay12(rs20.getString("day12"));
					}
					if(rs20.getString("day13")!=null)
					{
					if(rs20.getString("day13").contains("NL"))
					app.setDay13(rs20.getString("day13").replace("NL", "LP"));
					else
					app.setDay13(rs20.getString("day13"));
					}
					if(rs20.getString("day14")!=null)
					{
					if(rs20.getString("day14").contains("NL"))
					app.setDay14(rs20.getString("day14").replace("NL", "LP"));
					else
					app.setDay14(rs20.getString("day14"));
					}
					if(rs20.getString("day15")!=null)
					{
					if(rs20.getString("day15").contains("NL"))
					app.setDay15(rs20.getString("day15").replace("NL", "LP"));
					else
					app.setDay15(rs20.getString("day15"));
					}
					if(rs20.getString("day16")!=null)
					{
					if(rs20.getString("day16").contains("NL"))
					app.setDay16(rs20.getString("day16").replace("NL", "LP"));
					else
					app.setDay16(rs20.getString("day16"));
					}
					if(rs20.getString("day17")!=null)
					{
					if(rs20.getString("day17").contains("NL"))
					app.setDay17(rs20.getString("day17").replace("NL", "LP"));
					else
					app.setDay17(rs20.getString("day17"));
					}
					if(rs20.getString("day18")!=null)
					{
					if(rs20.getString("day18").contains("NL"))
					app.setDay18(rs20.getString("day18").replace("NL", "LP"));
					else
					app.setDay18(rs20.getString("day18"));
					}
					if(rs20.getString("day19")!=null)
					{
					if(rs20.getString("day19").contains("NL"))
					app.setDay19(rs20.getString("day19").replace("NL", "LP"));
					else
					app.setDay19(rs20.getString("day19"));
					}
					if(rs20.getString("day20")!=null)
					{
					if(rs20.getString("day20").contains("NL"))
					app.setDay20(rs20.getString("day20").replace("NL", "LP"));
					else
					app.setDay20(rs20.getString("day20"));
					}
					if(rs20.getString("day21")!=null)
					{
					if(rs20.getString("day21").contains("NL"))
					app.setDay21(rs20.getString("day21").replace("NL", "LP"));
					else
					app.setDay21(rs20.getString("day21"));
					}
					if(rs20.getString("day22")!=null)
					{
					if(rs20.getString("day22").contains("NL"))
					app.setDay22(rs20.getString("day22").replace("NL", "LP"));
					else
					app.setDay22(rs20.getString("day22"));
					}
					if(rs20.getString("day23")!=null)
					{
					if(rs20.getString("day23").contains("NL"))
					app.setDay23(rs20.getString("day23").replace("NL", "LP"));
					else
					app.setDay23(rs20.getString("day23"));
					}
					if(rs20.getString("day24")!=null)
					{
					if(rs20.getString("day24").contains("NL"))
					app.setDay24(rs20.getString("day24").replace("NL", "LP"));
					else
					app.setDay24(rs20.getString("day24"));
					}
					if(rs20.getString("day25")!=null)
					{
					if(rs20.getString("day25").contains("NL"))
					app.setDay25(rs20.getString("day25").replace("NL", "LP"));
					else
					app.setDay25(rs20.getString("day25"));
					}
					if(rs20.getString("day26")!=null)
					{
					if(rs20.getString("day26").contains("NL"))
					app.setDay26(rs20.getString("day26").replace("NL", "LP"));
					else
					app.setDay26(rs20.getString("day26"));
					}
					if(rs20.getString("day27")!=null)
					{
					if(rs20.getString("day27").contains("NL"))
					app.setDay27(rs20.getString("day27").replace("NL", "LP"));
					else
					app.setDay27(rs20.getString("day27"));
					}
					if(rs20.getString("day28")!=null)
					{
					if(rs20.getString("day28").contains("NL"))
					app.setDay28(rs20.getString("day28").replace("NL", "LP"));
					else
					app.setDay28(rs20.getString("day28"));
					}
					if(rs20.getString("day29")!=null)
					{
					if(rs20.getString("day29").contains("NL"))
					app.setDay29(rs20.getString("day29").replace("NL", "LP"));
					else
					app.setDay29(rs20.getString("day29"));
					}
					if(rs20.getString("day30")!=null)
					{
					if(rs20.getString("day30").contains("NL"))
					app.setDay30(rs20.getString("day30").replace("NL", "LP"));
					else
					app.setDay30(rs20.getString("day30"));
					}
					if(rs20.getString("day31")!=null)
					{
					if(rs20.getString("day31").contains("NL"))
					app.setDay31(rs20.getString("day31").replace("NL", "LP"));
					else
					app.setDay31(rs20.getString("day31"));
					}
				}
				list1.add(app);
			}	
					
			try {
				rs20.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
				
				
				if(help.getAttntype().equalsIgnoreCase("Calendar Month")  )
				{
					
					// Create a calendar object and set year and month
					Calendar mycal = Calendar.getInstance();

					mycal.set(Integer.parseInt(help.getYear()), Integer.parseInt(help.getFrommonth())-1, 1);
					
					// Get the number of days in that month
					int daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
					
					String countdays="SELECT day(thedate) as day FROM dbo.ExplodeDates('"+help.getYear()+"-"+help.getFrommonth()+"-01','"+help.getYear()+"-"+help.getFrommonth()+"-"+daysInMonth+"') as thedate";
		    	    ResultSet rscount=ad.selectQuery(countdays);
		    	    
		    			while(rscount.next())
		    			{
		                   
		                    HRApprovalForm date=new  HRApprovalForm();
		                    date.setDay(rscount.getString("day"));
		                    date.setDate("day"+rscount.getString("day"));
		                    datelist.add(date);
		    			}
		    			
		    			try {
							rscount.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
		    			help.setDay(Integer.toString(datelist.size()+4));
		    			request.setAttribute("datelist", datelist);
				}
				if(help.getAttntype().equalsIgnoreCase("Payable Month")  )
				{
					// Create a calendar object and set year and month
					Calendar mycal = Calendar.getInstance();

					mycal.set(Integer.parseInt(help.getYear()), Integer.parseInt(help.getFrommonth())-1, 1);
					
					// Get the number of days in that month
					int daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
					
					String countdays="SELECT day(thedate) as day FROM dbo.ExplodeDates('"+prevyear+"-"+prevmont+"-21','"+help.getYear()+"-"+help.getFrommonth()+"-20') as thedate";
		    	    ResultSet rscount=ad.selectQuery(countdays);
		    	    
		    			while(rscount.next())
		    			{
		                   
		                    HRApprovalForm date=new  HRApprovalForm();
		                    date.setDay(rscount.getString("day"));
		                    date.setDate("day"+rscount.getString("day"));
		                    datelist.add(date);
		    			}
		    			help.setDay(Integer.toString(datelist.size()+4));
		    			request.setAttribute("datelist", datelist);
		    			try {
							rscount.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
				}
				
				
				 //delete empNos
			    
			    String delete="delete Temp_Emp where Date_Time='"+key+"'";						    
			   int lldd=ad.SqlExecuteUpdate(delete);
				
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			request.setAttribute("list1", list1);
			
			
		
			
	 
			}
			
			
			
			
			
			if(help.getSummbrkup().equalsIgnoreCase("Summary"))
			{
				 float pp=0;
				 float od=0;				
				 float cl=0;
				 float sl=0;
				 float el=0;
				 float lp=0;			
				 float ph=0;
				 float wo=0;
				 float ss=0;
				 float sh=0;
				 float paid_days=0;
				 float total=0;
				
		
				
				
				
				
				
				try {
					
					String selectedmon=help.getFrommonth();
					String selectedyear=help.getYear();
					String prevmont=Integer.toString((Integer.parseInt(selectedmon)-1));
					String prevyear="";
					if(prevmont.equalsIgnoreCase("0"))
					{
					 prevmont="12";
					 prevyear=Integer.toString((Integer.parseInt(selectedyear)-1));	
					}
					else
						prevyear=selectedyear;
					
					try {
						key = insertTEMPEMP(query1);
					} catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
						
					HRApprovalForm app1 =new HRApprovalForm();
						
						
						
						
						String b = "";		
				
								
							  
							
							if(help.getAttntype().equalsIgnoreCase("Calendar Month")  )
							{
								
							    b = " select emp_official_info.EMP_FULLNAME,t.*,month ,year,day1,	day2,	day3,	day4,	day5,	day6,	day7,	day8,	day9,	day10,	day11,	day12,	day13,	day14,	day15,	day16,	day17,	day18,	day19,	day20,	day21,	day22,	day23,	day24,	day25,	day26,	day27,	day28,	day29,	day30,	day31  from EMP_IN_OUT_Status  ,"
							    		+ "  ( select k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,sum(k.WO+k.ss+k.PH+k.PP+k.SH+k.od+k.SL+k.CL+k.EL) as totpaid,k.Pernr from (  SELECT 	Pernr,(LEN(day) - LEN(REPLACE(day, 'PP', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'PM', '')))*0.25 as PP,(LEN(day) - LEN(REPLACE(day, 'WO', '')))*0.25 as WO,(LEN(day) - LEN(REPLACE(day, 'SS', '')))*0.25 as SS,(LEN(day) - LEN(REPLACE(day, 'PH', '')))*0.25 as PH,"
							    		+ " (LEN(day) - LEN(REPLACE(day, 'SH', '')))*0.25 as SH,(LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25 as od, (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl, "
							    		+ "(LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl, (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL, (LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as LP "
							    		+ " from( select "+currentmonthdays(help.getYear(),help.getFrommonth(), 0)+" as day,Temp_emp.pernr  from EMP_IN_OUT_Status,Temp_emp where  EMP_IN_OUT_Status.pernr =Temp_emp.pernr and month = '"+help.getFrommonth()+"' and year ='"+help.getYear()+"')t  ) k group by k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,k.Pernr)t,Temp_emp,emp_official_info where emp_official_info.PERNR=Temp_emp.pernr and  t.pernr =Temp_emp.pernr "
							    		+ "   and  month = '"+help.getFrommonth()+"' and year ='"+help.getYear()+"'  and t.Pernr=EMP_IN_OUT_Status.Pernr and Temp_Emp.Date_Time='"+key+"' and Temp_Emp.Swipe_count!=0 "
				    				+ "union"
				    				+ "	select emp_official_info.EMP_FULLNAME, t.*,month ,year,replace(day1,'AA','PP')as day1,	replace(day2,'AA','PP')as day2,	replace(day3,'AA','PP')as day3,	replace(day4,'AA','PP')as day4,	replace(day5,'AA','PP')as day5,	replace(day6,'AA','PP')as day6,	replace(day7,'AA','PP')as day7,	replace(day8,'AA','PP')as day8,	replace(day9,'AA','PP')as day9,	replace(day10,'AA','PP')as day10,	replace(day11,'AA','PP')as day11,	replace(day12,'AA','PP')as day12,	replace(day13,'AA','PP')as day13,	replace(day14,'AA','PP')as day14,	replace(day15,'AA','PP')as day15,	replace(day16,'AA','PP')as day16,	replace(day17,'AA','PP')as day17,	replace(day18,'AA','PP')as day18,	replace(day19,'AA','PP')as day19,	replace(day20,'AA','PP')as day20,	replace(day21,'AA','PP')as day21,	replace(day22,'AA','PP')as day22,	replace(day23,'AA','PP')as day23,	replace(day24,'AA','PP')as day24,	replace(day25,'AA','PP')as day25,	replace(day26,'AA','PP')as day26,	replace(day27,'AA','PP')as day27,	replace(day28,'AA','PP')as day28,	replace(day29,'AA','PP')as day29,	replace(day30,'AA','PP')as day30,	replace(day31,'AA','PP')as day31  from EMP_IN_OUT_Status  ,"
						    		+ "  ( select k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,sum(k.WO+k.ss+k.PH+k.PP+k.SH+k.od+k.SL+k.CL+k.EL) as totpaid,k.Pernr from (  SELECT 	Pernr,(LEN(day) - LEN(REPLACE(day, 'PP', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as PP,(LEN(day) - LEN(REPLACE(day, 'WO', '')))*0.25 as WO,(LEN(day) - LEN(REPLACE(day, 'SS', '')))*0.25 as SS,(LEN(day) - LEN(REPLACE(day, 'PH', '')))*0.25 as PH,"
						    		+ " (LEN(day) - LEN(REPLACE(day, 'SH', '')))*0.25 as SH,(LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25 as od, (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl, "
						    		+ "(LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl, (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL, (LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25 as LP "
						    		+ " from( select "+currentmonthdays(help.getYear(),help.getFrommonth(), 0)+" as day,Temp_emp.pernr  from EMP_IN_OUT_Status,Temp_emp where  EMP_IN_OUT_Status.pernr =Temp_emp.pernr and month = '"+help.getFrommonth()+"' and year ='"+help.getYear()+"')t  ) k group by k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,k.Pernr)t,Temp_emp,emp_official_info where emp_official_info.PERNR=Temp_emp.pernr and  t.pernr =Temp_emp.pernr "
						    		+ "   and  month = '"+help.getFrommonth()+"' and year ='"+help.getYear()+"'  and t.Pernr=EMP_IN_OUT_Status.Pernr and Temp_Emp.Date_Time='"+key+"' and Temp_Emp.Swipe_count=0 ";
			    			}
							
							if(help.getAttntype().equalsIgnoreCase("Payable Month")  )
							{
			
			        b="  select emp_official_info.PERNR,EMP_FULLNAME,(t.PP + k.PP) as PP,(t.cl+k.cl)CL,(t.EL+k.EL) as EL,(t.sl+k.Sl) as SL,(t.wo+k.WO) as wo,(t.ss+k.ss) as ss,(t.PH+k.ph) "
			        		+ "as ph,(t.lp+k.lp) as lp,(t.SH+k.SH) as sh,(t.od+k.od) as od,t.totpaid, day1,	day2,	day3,	day4,	day5,	day6,	day7,	day8,	day9,"
			        		+ "	day10,	day11,	day12,	day13,	day14,	day15,	day16,	day17,	day18,	day19,	day20 ,  day21,	day22,	day23,	day24,"
			        		+ "	day25,	day26,	day27,	day28,	day29,	day30,	day31  from (  select t.*,month ,	day21,	day22,	day23,	day24,	day25,"
			        		+ "	day26,	day27,	day28,	day29,	day30,	day31 from EMP_IN_OUT_Status, "
			        		+ " ( select k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,sum(k.WO+k.ss+k.PH+k.PP+k.SH+k.od+k.SL+k.CL+k.EL) as totpaid,k.Pernr from"
			        		+ " (  SELECT 	Pernr,(LEN(day) - LEN(REPLACE(day, 'PP', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'PM', '')))*0.25 as PP,"
			        		+ "(LEN(day) - LEN(REPLACE(day, 'WO', '')))*0.25 as WO,(LEN(day) - LEN(REPLACE(day, 'SS', '')))*0.25 as ss,(LEN(day) - LEN(REPLACE(day, 'PH', '')))*0.25 as PH,"
			        		+ " (LEN(day) - LEN(REPLACE(day, 'SH', '')))*0.25 as SH,(LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25 as od,"
			        		+ " (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl, (LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl, "
			        		+ "(LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL, (LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'AA', '')))"
			        		+ "*0.25 as LP  from( select "+prevmonthdays(prevyear, prevmont)+" as day,Temp_Emp.Pernr "
			        		+ " from EMP_IN_OUT_Status,Temp_Emp where Temp_Emp.pernr=EMP_IN_OUT_Status.Pernr and month ='"+prevmont+"' and year ='"+prevyear+"')t  ) k,Temp_Emp where"
			        		+ "  Temp_Emp.Pernr=k.Pernr group by k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,k.Pernr)t,Temp_Emp   where EMP_IN_OUT_Status.pernr =Temp_Emp.Pernr "
			        		+ "and  month ='"+prevmont+"' and year ='"+prevyear+"' and t.Pernr=EMP_IN_OUT_Status.Pernr and Date_Time='"+key+"' and temp_emp.Swipe_count!=0)t ,  "
			        		+ " ( select t.*,month ,	day1,	day2,	day3,	day4,	day5,	day6,	day7,	day8,	day9,	day10,	day11,	day12,	day13,	day14,	day15,	"
			        		+ "day16,	day17,	day18,	day19,	day20  from EMP_IN_OUT_Status,  ( select k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,"
			        		+ "sum(k.WO+k.ss+k.PH+k.PP+k.SH+k.od+k.SL+k.CL+k.EL) as totpaid,k.Pernr from "
			        		+ "(  SELECT 	Pernr,(LEN(day) - LEN(REPLACE(day, 'PP', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'PM', '')))*0.25 as PP,"
			        		+ "(LEN(day) - LEN(REPLACE(day, 'WO', '')))*0.25 as WO,(LEN(day) - LEN(REPLACE(day, 'SS', '')))*0.25 as ss,(LEN(day) - LEN(REPLACE(day, 'PH', '')))*0.25 as PH, (LEN(day) - LEN(REPLACE(day, 'SH', '')))*0.25"
			        		+ " as SH,(LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25 as od, (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl,"
			        		+ " (LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl, (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL,"
			        		+ " (LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as LP from"
			        		+ "( select "+currentmonthdays(help.getYear(),help.getFrommonth(), 20)+" as day,Temp_Emp.Pernr"
			        		+ "  from EMP_IN_OUT_Status,Temp_Emp where Temp_Emp.Pernr=EMP_IN_OUT_Status.Pernr and month ='"+help.getFrommonth()+"' and year ='"+help.getYear()+"' and Date_Time='"+key+"'  and temp_emp.Swipe_count!=0)t  )"
			        		+ " k,Temp_Emp where  Temp_Emp.Pernr=k.Pernr group by k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,k.Pernr)t,Temp_Emp "
			        		+ "  where EMP_IN_OUT_Status.pernr =Temp_Emp.Pernr and  month ='"+help.getFrommonth()+"' and year ='"+help.getYear()+"'  and t.Pernr=EMP_IN_OUT_Status.Pernr and"
			        		+ " Date_Time='"+key+"'  and temp_emp.Swipe_count!=0)k,emp_official_info where t.Pernr=k.Pernr and emp_official_info.PERNR=k.Pernr"
			        				+ " union "
    				   + "	select emp_official_info.PERNR,EMP_FULLNAME,(t.PP + k.PP) as PP,(t.cl+k.cl)CL,(t.EL+k.EL) as EL,(t.sl+k.Sl) as SL,(t.wo+k.WO) as wo,(t.ss+k.ss) as ss,(t.PH+k.ph) "
			        		+ "as ph,(t.lp+k.lp) as lp,(t.SH+k.SH) as sh,(t.od+k.od) as od,t.totpaid, day1,	day2,	day3,	day4,	day5,	day6,	day7,	day8,	day9,"
			        		+ "	day10,	day11,	day12,	day13,	day14,	day15,	day16,	day17,	day18,	day19,	day20 ,  day21,	day22,	day23,	day24,"
			        		+ "	day25,	day26,	day27,	day28,	day29,	day30,	day31  from (  select t.*,month ,	replace(day21,'AA','PP')as day21,	replace(day22,'AA','PP')as day22,"
			        		+ "	replace(day23,'AA','PP')as day23,	replace(day24,'AA','PP')as day24,	replace(day25,'AA','PP')as day25,	replace(day26,'AA','PP')as day26,	replace(day27,'AA','PP')as day27,	replace(day28,'AA','PP')as day28,	replace(day29,'AA','PP')as day29,	replace(day30,'AA','PP')as day30,	replace(day31,'AA','PP')as day31 from EMP_IN_OUT_Status, "
			        		+ " ( select k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,sum(k.WO+k.ss+k.PH+k.PP+k.SH+k.od+k.SL+k.CL+k.EL) as totpaid,k.Pernr from"
			        		+ " (  SELECT 	Pernr,(LEN(day) - LEN(REPLACE(day, 'PP', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as PP,(LEN(day) - LEN(REPLACE(day, 'WO', '')))*0.25 as WO,(LEN(day) - LEN(REPLACE(day, 'SS', '')))*0.25 as ss,(LEN(day) - LEN(REPLACE(day, 'PH', '')))*0.25 as PH, (LEN(day) - LEN(REPLACE(day, 'SH', '')))*0.25 as SH,(LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25 as od, (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl, (LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl, (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL,(LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25 as LP  from( select "+prevmonthdays(prevyear, prevmont)+" as day,Temp_Emp.Pernr "
			        		+ " from EMP_IN_OUT_Status,Temp_Emp where Temp_Emp.pernr=EMP_IN_OUT_Status.Pernr and month ='"+prevmont+"' and year ='"+prevyear+"')t  ) k,Temp_Emp where"
			        		+ "  Temp_Emp.Pernr=k.Pernr group by k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,k.Pernr)t,Temp_Emp   where EMP_IN_OUT_Status.pernr =Temp_Emp.Pernr "
			        		+ "and  month ='"+prevmont+"' and year ='"+prevyear+"' and t.Pernr=EMP_IN_OUT_Status.Pernr and Date_Time='"+key+"' and temp_emp.Swipe_count=0)t ,  "
			        		+ " ( select t.*,month ,	replace(day1,'AA','PP')as day1,	replace(day2,'AA','PP')as day2,	replace(day3,'AA','PP')as day3,	replace(day4,'AA','PP')as day4,	replace(day5,'AA','PP')as day5,	"
			        		+ "replace(day6,'AA','PP')as day6,	replace(day7,'AA','PP')as day7,	replace(day8,'AA','PP')as day8,	replace(day9,'AA','PP')as day9,	replace(day10,'AA','PP')as day10,	replace(day11,'AA','PP')as day11,	replace(day12,'AA','PP')as day12,	replace(day13,'AA','PP')as day13,	replace(day14,'AA','PP')as day14,	replace(day15,'AA','PP')as day15,	replace(day16,'AA','PP')as day16,	replace(day17,'AA','PP')as day17,	replace(day18,'AA','PP')as day18,	replace(day19,'AA','PP')as day19,	replace(day20,'AA','PP')as day20  from EMP_IN_OUT_Status,  ( select k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,"
			        		+ "sum(k.WO+k.ss+k.PH+k.PP+k.SH+k.od+k.SL+k.CL+k.EL) as totpaid,k.Pernr from "
			        		+ "(  SELECT 	Pernr,(LEN(day) - LEN(REPLACE(day, 'PP', '')))*0.25+(LEN(day) - LEN(REPLACE(day, 'AA', '')))*0.25 as PP,(LEN(day) - LEN(REPLACE(day, 'WO', '')))*0.25 as WO,(LEN(day) - LEN(REPLACE(day, 'SS', '')))*0.25 as ss,(LEN(day) - LEN(REPLACE(day, 'PH', '')))*0.25 as PH, (LEN(day) - LEN(REPLACE(day, 'SH', '')))*0.25 as SH,(LEN(day) - LEN(REPLACE(day, 'OD', '')))*0.25 as od, (LEN(day) - LEN(REPLACE(day, 'CL', '')))*0.25 as cl, (LEN(day) - LEN(REPLACE(day, 'SL', '')))*0.25 as Sl, (LEN(day) - LEN(REPLACE(day, 'EL', '')))*0.25 as EL,"
						+ " (LEN(day) - LEN(REPLACE(day, 'NL', '')))*0.25 as LP from"
			        		+ "( select "+currentmonthdays(help.getYear(),help.getFrommonth(), 20)+" as day,Temp_Emp.Pernr"
			        		+ "  from EMP_IN_OUT_Status,Temp_Emp where Temp_Emp.Pernr=EMP_IN_OUT_Status.Pernr and month ='"+help.getFrommonth()+"' and year ='"+help.getYear()+"' and Date_Time='"+key+"'  and temp_emp.Swipe_count=0)t  )"
			        		+ " k,Temp_Emp where  Temp_Emp.Pernr=k.Pernr group by k.PP,k.cl,k.EL,k.Sl,k.WO,k.ss,k.PH,k.lp,k.SH,k.od,k.Pernr)t,Temp_Emp "
			        		+ "  where EMP_IN_OUT_Status.pernr =Temp_Emp.Pernr and  month ='"+help.getFrommonth()+"' and year ='"+help.getYear()+"'  and t.Pernr=EMP_IN_OUT_Status.Pernr and"
			        		+ " Date_Time='"+key+"'  and temp_emp.Swipe_count=0)k,emp_official_info where t.Pernr=k.Pernr and emp_official_info.PERNR=k.Pernr";
			        		
							}

						 
						
						
						
				ResultSet rs20 = ad.selectQuery(b);
				while(rs20.next())
				{	
					HRApprovalForm app =new HRApprovalForm();
					
					app.setEmployeeno(rs20.getString("pernr"));
					app.setEmployeeName(rs20.getString("EMP_FULLNAME"));
					app1.setMonth(help.getFrommonth());
					app.setMonth(help.getFrommonth());
					
					app1.setYear(help.getYear());
					app.setYear(help.getYear());
					
					
					if(rs20.getString("day1")!=null)
					{
					if(rs20.getString("day1").contains("NL"))
					app.setDay1(rs20.getString("day1").replace("NL", "LP"));	
					else
					app.setDay1(rs20.getString("day1"));	
					}
					
					if(rs20.getString("day2")!=null)
					{
					if(rs20.getString("day2").contains("NL"))
					app.setDay2(rs20.getString("day2").replace("NL", "LP"));
					else
				    app.setDay2(rs20.getString("day2"));
					}
					
					if(rs20.getString("day3")!=null)
					{
					if(rs20.getString("day3").contains("NL"))
					app.setDay3(rs20.getString("day3").replace("NL", "LP"));
					else
					app.setDay3(rs20.getString("day3"));
					}
					
					if(rs20.getString("day4")!=null)
					{
					if(rs20.getString("day4").contains("NL"))
					app.setDay4(rs20.getString("day4").replace("NL", "LP"));
					else
					app.setDay4(rs20.getString("day4"));
					}
					
					if(rs20.getString("day5")!=null)
					{
					if(rs20.getString("day5").contains("NL"))
					app.setDay5(rs20.getString("day5").replace("NL", "LP"));
					else
					app.setDay5(rs20.getString("day5"));
					}
					
					if(rs20.getString("day6")!=null)
					{
					if(rs20.getString("day6").contains("NL"))
					app.setDay6(rs20.getString("day6").replace("NL", "LP"));
					else
					app.setDay6(rs20.getString("day6"));
					}
					
					
					if(rs20.getString("day7")!=null)
					{
					if(rs20.getString("day7").contains("NL"))
					app.setDay7(rs20.getString("day7").replace("NL", "LP"));
					else
					app.setDay7(rs20.getString("day7"));
					}
					
					if(rs20.getString("day8")!=null)
					{
					if(rs20.getString("day8").contains("NL"))
					app.setDay8(rs20.getString("day8").replace("NL", "LP"));
					else
					app.setDay8(rs20.getString("day8"));
					}
					if(rs20.getString("day9")!=null)
					{
					if(rs20.getString("day9").contains("NL"))
					app.setDay9(rs20.getString("day9").replace("NL", "LP"));
					else
					app.setDay9(rs20.getString("day9"));
					}
					if(rs20.getString("day10")!=null)
					{
					if(rs20.getString("day10").contains("NL"))
					app.setDay10(rs20.getString("day10").replace("NL", "LP"));
					else
					app.setDay10(rs20.getString("day10"));
					}
					if(rs20.getString("day11")!=null)
					{
					if(rs20.getString("day11").contains("NL"))
					app.setDay11(rs20.getString("day11").replace("NL", "LP"));
					else
					app.setDay11(rs20.getString("day11"));
					}
					if(rs20.getString("day12")!=null)
					{
					if(rs20.getString("day12").contains("NL"))
					app.setDay12(rs20.getString("day12").replace("NL", "LP"));
					else
					app.setDay12(rs20.getString("day12"));
					}
					if(rs20.getString("day13")!=null)
					{
					if(rs20.getString("day13").contains("NL"))
					app.setDay13(rs20.getString("day13").replace("NL", "LP"));
					else
					app.setDay13(rs20.getString("day13"));
					}
					if(rs20.getString("day14")!=null)
					{
					if(rs20.getString("day14").contains("NL"))
					app.setDay14(rs20.getString("day14").replace("NL", "LP"));
					else
					app.setDay14(rs20.getString("day14"));
					}
					if(rs20.getString("day15")!=null)
					{
					if(rs20.getString("day15").contains("NL"))
					app.setDay15(rs20.getString("day15").replace("NL", "LP"));
					else
					app.setDay15(rs20.getString("day15"));
					}
					if(rs20.getString("day16")!=null)
					{
					if(rs20.getString("day16").contains("NL"))
					app.setDay16(rs20.getString("day16").replace("NL", "LP"));
					else
					app.setDay16(rs20.getString("day16"));
					}
					if(rs20.getString("day17")!=null)
					{
					if(rs20.getString("day17").contains("NL"))
					app.setDay17(rs20.getString("day17").replace("NL", "LP"));
					else
					app.setDay17(rs20.getString("day17"));
					}
					if(rs20.getString("day18")!=null)
					{
					if(rs20.getString("day18").contains("NL"))
					app.setDay18(rs20.getString("day18").replace("NL", "LP"));
					else
					app.setDay18(rs20.getString("day18"));
					}
					if(rs20.getString("day19")!=null)
					{
					if(rs20.getString("day19").contains("NL"))
					app.setDay19(rs20.getString("day19").replace("NL", "LP"));
					else
					app.setDay19(rs20.getString("day19"));
					}
					if(rs20.getString("day20")!=null)
					{
					if(rs20.getString("day20").contains("NL"))
					app.setDay20(rs20.getString("day20").replace("NL", "LP"));
					else
					app.setDay20(rs20.getString("day20"));
					}
					if(rs20.getString("day21")!=null)
					{
					if(rs20.getString("day21").contains("NL"))
					app.setDay21(rs20.getString("day21").replace("NL", "LP"));
					else
					app.setDay21(rs20.getString("day21"));
					}
					if(rs20.getString("day22")!=null)
					{
					if(rs20.getString("day22").contains("NL"))
					app.setDay22(rs20.getString("day22").replace("NL", "LP"));
					else
					app.setDay22(rs20.getString("day22"));
					}
					if(rs20.getString("day23")!=null)
					{
					if(rs20.getString("day23").contains("NL"))
					app.setDay23(rs20.getString("day23").replace("NL", "LP"));
					else
					app.setDay23(rs20.getString("day23"));
					}
					if(rs20.getString("day24")!=null)
					{
					if(rs20.getString("day24").contains("NL"))
					app.setDay24(rs20.getString("day24").replace("NL", "LP"));
					else
					app.setDay24(rs20.getString("day24"));
					}
					if(rs20.getString("day25")!=null)
					{
					if(rs20.getString("day25").contains("NL"))
					app.setDay25(rs20.getString("day25").replace("NL", "LP"));
					else
					app.setDay25(rs20.getString("day25"));
					}
					if(rs20.getString("day26")!=null)
					{
					if(rs20.getString("day26").contains("NL"))
					app.setDay26(rs20.getString("day26").replace("NL", "LP"));
					else
					app.setDay26(rs20.getString("day26"));
					}
					if(rs20.getString("day27")!=null)
					{
					if(rs20.getString("day27").contains("NL"))
					app.setDay27(rs20.getString("day27").replace("NL", "LP"));
					else
					app.setDay27(rs20.getString("day27"));
					}
					if(rs20.getString("day28")!=null)
					{
					if(rs20.getString("day28").contains("NL"))
					app.setDay28(rs20.getString("day28").replace("NL", "LP"));
					else
					app.setDay28(rs20.getString("day28"));
					}
					if(rs20.getString("day29")!=null)
					{
					if(rs20.getString("day29").contains("NL"))
					app.setDay29(rs20.getString("day29").replace("NL", "LP"));
					else
					app.setDay29(rs20.getString("day29"));
					}
					if(rs20.getString("day30")!=null)
					{
					if(rs20.getString("day30").contains("NL"))
					app.setDay30(rs20.getString("day30").replace("NL", "LP"));
					else
					app.setDay30(rs20.getString("day30"));
					}
					if(rs20.getString("day31")!=null)
					{
					if(rs20.getString("day31").contains("NL"))
					app.setDay31(rs20.getString("day31").replace("NL", "LP"));
					else
					app.setDay31(rs20.getString("day31"));
					}
						
						app.setOd(rs20.getFloat("Od"));
                        od=od+rs20.getFloat("Od");
						app.setCl(rs20.getFloat("cl"));
						cl=cl+rs20.getFloat("cl");
						app.setSl(rs20.getFloat("sl"));
						sl=sl+rs20.getFloat("sl");
						app.setEl(rs20.getFloat("el"));		
						el=el+rs20.getFloat("el");
						app.setLp(rs20.getFloat("lp"));		
						lp=lp+rs20.getFloat("lp");
				  	    app.setPh(rs20.getFloat("PH"));
				  	    ph=ph+rs20.getFloat("ph");
						app.setWo(rs20.getFloat("wo"));
				  	    wo=wo+rs20.getFloat("wo");
				  	    app.setSs( rs20.getFloat("ss"));
				  	    ss=ss+rs20.getFloat("ss");
						app.setSh(rs20.getFloat("SH"));
				  	    sh=sh+rs20.getFloat("sh");
						app.setPp(rs20.getFloat("PP"));
				  	    pp=pp+rs20.getFloat("pp");
						app.setPaid_days(rs20.getFloat("totpaid"));
						paid_days=paid_days+rs20.getFloat("totpaid");						
						app.setTotal(Float.toString((app.getLp()+app.getPaid_days())));
						total=total+Float.parseFloat((app.getTotal()));
					
						list3.add(app);
				}	
				try {
					rs20.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				help.setOd(od);
   
				help.setCl(cl);
			
				help.setSl(sl);
				
				help.setEl(el);		
	
				help.setLp(lp);		
				
		  	    help.setPh(ph);
		  	  
				help.setWo(wo);
				
				help.setSs(ss);
		
				help.setSh(sh);
		  	
				help.setPp(pp);
		  
				help.setPaid_days(paid_days);
				
				help.setTotal(Float.toString(total));
				
				list4.add(app1);
				
					
					
					if(help.getAttntype().equalsIgnoreCase("Calendar Month")  )
					{
						
						// Create a calendar object and set year and month
						Calendar mycal = Calendar.getInstance();

						mycal.set(Integer.parseInt(help.getYear()), Integer.parseInt(help.getFrommonth())-1, 1);
						
						// Get the number of days in that month
						int daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
						
						String countdays="SELECT day(thedate) as day FROM dbo.ExplodeDates('"+help.getYear()+"-"+help.getFrommonth()+"-01','"+help.getYear()+"-"+help.getFrommonth()+"-"+daysInMonth+"') as thedate";
			    	    ResultSet rscount=ad.selectQuery(countdays);
			    	    
			    			while(rscount.next())
			    			{
			                   
			                    HRApprovalForm date=new  HRApprovalForm();
			                    date.setDay(rscount.getString("day"));
			                    date.setDate("day"+rscount.getString("day"));
			                    datelist.add(date);
			    			}
			    			try {
								rscount.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
			    			help.setDay(Integer.toString(datelist.size()+4));
			    			request.setAttribute("datelist", datelist);
					}
					if(help.getAttntype().equalsIgnoreCase("Payable Month")  )
					{
						// Create a calendar object and set year and month
						Calendar mycal = Calendar.getInstance();

						mycal.set(Integer.parseInt(help.getYear()), Integer.parseInt(help.getFrommonth())-1, 1);
						
						// Get the number of days in that month
						int daysInMonth = mycal.getActualMaximum(Calendar.DAY_OF_MONTH);
						
						String countdays="SELECT day(thedate) as day FROM dbo.ExplodeDates('"+prevyear+"-"+prevmont+"-21','"+help.getYear()+"-"+help.getFrommonth()+"-20') as thedate";
			    	    ResultSet rscount=ad.selectQuery(countdays);
			    	    
			    			while(rscount.next())
			    			{
			                   
			                    HRApprovalForm date=new  HRApprovalForm();
			                    date.setDay(rscount.getString("day"));
			                    date.setDate("day"+rscount.getString("day"));
			                    datelist.add(date);
			    			}
			    			try {
								rscount.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
			    			help.setDay(Integer.toString(datelist.size()+4));
			    			request.setAttribute("datelist", datelist);
					}
					
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				finally{
	    			query1="";
	    			query2="";
	    			query3="";
	    			query4="";
	    			query5="";
	    			query6="";
	    			 //delete empNos
				    
				    String delete="delete Temp_Emp where Date_Time='"+key+"'";						    
				   int lldd=ad.SqlExecuteUpdate(delete);
	    		}
				request.setAttribute("list3", list3);
			
				
				}
		
		
			help.setMonth(monthName[Integer.parseInt(help.getFrommonth())]);
		
						request.setAttribute("result", "");
						return mapping.findForward("displaymusterreportview");
						
					}
	
	
	
	public ActionForward emptimeentry(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		

		
		HRApprovalForm approvalsForm = (HRApprovalForm) form;
		
		
		Date dNow = new Date( );
		SimpleDateFormat ft = new SimpleDateFormat ("dd/MM/yyyy");
		String exportdate=ft.format(dNow);
		
		
		Date today = new Date();  

        Calendar calendar = Calendar.getInstance();  
        calendar.setTime(today);  

        calendar.add(Calendar.MONTH, 1);  
        calendar.set(Calendar.DAY_OF_MONTH, 1);  
        calendar.add(Calendar.DATE, -1);  

        Date lastDayOfMonth = calendar.getTime();  

        DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");  
        System.out.println("Today            : " + sdf.format(today));  
        System.out.println("Last Day of Month: " + sdf.format(lastDayOfMonth));
		
		
		
		
		
		int mb = 1024*1024;

        //Getting the runtime reference from system
        Runtime runtime = Runtime.getRuntime();

        System.out.println("##### Heap utilization statistics [MB] #####");

        //Print used memory
        System.out.println("Used Memory:"
            + (runtime.totalMemory() - runtime.freeMemory()) / mb);

        //Print free memory
        System.out.println("Free Memory:"
            + runtime.freeMemory() / mb);

        //Print total available memory
        System.out.println("Total Memory:" + runtime.totalMemory() / mb);

        //Print Maximum available memory
        System.out.println("Max Memory:" + runtime.maxMemory() / mb); 
		
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		if(user==null){
			request.setAttribute("message","Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
	
		
		ArrayList locationList=new ArrayList();
		ArrayList locationLabelList=new ArrayList();
		ResultSet rs11 = ad.selectQuery("select LOCID," +
				"LOCNAME,location_code from location where locid ='"+user.getPlantId()+"' "); 
		//date modified 23-05-2017
		
		if(user.getPlantId().equalsIgnoreCase("40")){
			
			request.setAttribute("disablegateButton", "disablegateButton");
					
				}
		
		if(user.getPlantId().equalsIgnoreCase("18")||user.getPlantId().equalsIgnoreCase("19"))
		{
			locationList.add("ML01");
			locationLabelList.add(("ML01")+"-"+("HOSUR"));
			
			approvalsForm.setLocationIdList(locationList);
			approvalsForm.setLocationLabelList(locationLabelList);
	
		}
		else
		{
		
		//date modified 23-05-2017
				try {
					while(rs11.next()) {
						locationList.add(rs11.getString("location_code"));
						locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
						
					}
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				approvalsForm.setLocationIdList(locationList);
				approvalsForm.setLocationLabelList(locationLabelList);
		}
				request.setAttribute("Alert", "Alert");
		
				try {
					rs11.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					cc.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		return mapping.findForward("emptimeentry");
	}
	
	
	
	
	public String convertDate(Date date1) {

		DateFormat formatter = new SimpleDateFormat("E MMM dd HH:mm:ss Z yyyy"); 
		String formatedDate = "";
		try {
			Date date = (Date) formatter.parse(date1.toString());

			Calendar cal = Calendar.getInstance();
			cal.setTime(date);
			formatedDate = cal.get(Calendar.YEAR) + "-"
					+ (cal.get(Calendar.MONTH) + 1) + "-"
					+ cal.get(Calendar.DATE);
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return formatedDate;
	}
	
	private void connectSAP() {
		try {

			Properties connectProperties = new Properties();// TODO change the
			// details
			connectProperties.setProperty(DestinationDataProvider.JCO_ASHOST,
					"192.168.1.2");
			connectProperties.setProperty(DestinationDataProvider.JCO_SYSNR,
					"00");
			connectProperties.setProperty(DestinationDataProvider.JCO_CLIENT,
					"900");
			connectProperties.setProperty(DestinationDataProvider.JCO_USER,
					"rfcprd");
			connectProperties.setProperty(DestinationDataProvider.JCO_PASSWD,
					"Test123#");
			connectProperties.setProperty(DestinationDataProvider.JCO_LANG,
					"EN");
			File destCfg = new File(DESTINATION + ".jcoDestination");

			FileOutputStream fos = new FileOutputStream(destCfg, false);
			connectProperties.store(fos, "SAP_DESTINATION config");
			fos.close();

		} catch (Exception e) {
			throw new RuntimeException("Unable to create the destination file",
					e);
		}
	}
	
	public static String display1(Date dbDate)
	{
	String dt="";
	DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
	try
	{
	dt=dateFormat.format(dbDate);
	}
	catch (Exception e)
	{
	dt="";
	}
	return dt;
	}
	
	
	public ActionForward displaycancelRequests(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
		
		
		
		return mapping.findForward("displaycancelrecords");
	}
	
	
	public ActionForward pendingcancelRecords(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) 
	{
		
		HRApprovalForm approvalsForm = (HRApprovalForm) form;
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		NewsandMediaDao ad=new NewsandMediaDao();
		String plantcode=user.getPlantId();
		
		int rowCount = 0;
    	int empcount = 0;
    	MainDao exeQry = new MainDao();
    	String reqList="";
    	int totalRecords =0;
    	
		if(user==null){
			request.setAttribute("message","Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		String type=approvalsForm.getReqRequstType();
		approvalsForm.setReqRequstType(type);
		String filter=approvalsForm.getSelectedFilter();
		approvalsForm.setSelectedFilter(filter);
	
		
		
	        totalRecords = getCountForTable(approvalsForm.getSelectedFilter(),approvalsForm.getReqRequstType(),plantcode,"",request,response);
		
			if(filter.equalsIgnoreCase("CPending"))
				filter="Pending";
		
		  int  startRecord=0;
		  int  endRecord=0;
			 if(totalRecords>10)
			 {
				 approvalsForm.setTotalRecords(totalRecords);
			 startRecord=1;
			 endRecord=50;
			 approvalsForm.setStartRecord(1);
			 approvalsForm.setEndRecord(50);
				request.setAttribute("disablePreviousButton", "disablePreviousButton");
			 request.setAttribute("displayRecordNo", "displayRecordNo");
			 request.setAttribute("nextButton", "nextButton");
			 }else
			 {
				  startRecord=1;
				  endRecord=totalRecords;
				  approvalsForm.setTotalRecords(totalRecords);
				  approvalsForm.setStartRecord(1);
				  approvalsForm.setEndRecord(totalRecords); 
			 }
			 
			 if(type.equalsIgnoreCase("Cancel OT"))
				{
				 LinkedList OT=new LinkedList();
					String getOndutyRecords="";
				
					if(filter.equalsIgnoreCase("pending"))
					{
						getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,"
								+ "emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,CONVERT(varchar(10),comp.RequestedDate,103) as Created_date1 "
								+ " from  All_Request as all_R,emp_official_info as emp,"
								+ "over_time_details as comp where  Req_Status='"+filter+"' and   (Actual_Approver_status is null or Actual_Approver_status='' or "
								+ "Actual_Approver_status='Cancelled') and all_R.Req_Id=comp.Req_no  and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='"+type+"'"
								+ " and all_R.Pending_Approver='"+user.getEmployeeNo()+"'  group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,"
								+ "all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,comp.RequestedDate ) as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
					}
					else
					{
						getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,"
								+ "emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,CONVERT(varchar(10),comp.RequestedDate,103) as Created_date1  "
								+ " from  All_Request as all_R,emp_official_info as emp,"
								+ "over_time_details as comp where  Req_Status='"+filter+"' and   (Actual_Approver_status is null or Actual_Approver_status='' or "
								+ "Actual_Approver_status='Cancelled') and all_R.Req_Id=comp.Req_no  and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='"+type+"'"
								+ " and all_R.Last_Approver='"+user.getEmployeeNo()+"'  group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,"
								+ "all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,comp.RequestedDate) as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
					
						
					}
					 ResultSet rsit=ad.selectQuery(getOndutyRecords);
						try {
							while (rsit.next()) {
								LeaveForm leave = new LeaveForm();
								leave.setRequestNumber(rsit.getInt("Req_no"));
								leave.setSubmitDate(rsit.getString("Created_date1"));
								leave.setStatus(rsit.getString("ApprvrStatus"));
								leave.setStartDate(EMicroUtils.display(rsit.getDate("FromDate")));
								leave.setEndDate(EMicroUtils.display(rsit.getDate("ToDate")));
								leave.setEmployeeName(rsit.getString("EMP_FULLNAME"));

								OT.add(leave);
							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						try {
							rsit.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						request.setAttribute("OTlist", OT);
						if(OT.size()>0){
							if(type.equalsIgnoreCase("Pending")){
								request.setAttribute("displayButton", "displayButton");
								}
							}
						request.setAttribute("disablePreviousButton","disablePreviousButton");
						if(OT.size()==0)
						{
							request.setAttribute("noOT", "noOT");
						
						}
				 
				}
			 
			 if(type.equalsIgnoreCase("Cancel Comp-Off"))
				{
				 LinkedList comp=new LinkedList();
					String getOndutyRecords="";
				
					if(filter.equalsIgnoreCase("pending"))
					{
						getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,"
								+ "emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,CONVERT(varchar(10),comp.RequestedDate,103) as Created_date1 "
								+ " from  All_Request as all_R,emp_official_info as emp,"
								+ "comp_ot as comp where  Req_Status='"+filter+"' and   (Actual_Approver_status is null or Actual_Approver_status='' or "
								+ "Actual_Approver_status='Cancelled') and all_R.Req_Id=comp.Req_no  and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='"+type+"'"
								+ " and all_R.Pending_Approver='"+user.getEmployeeNo()+"'  group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,"
								+ "all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,comp.RequestedDate ) as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
					}
					else
					{
						getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,"
								+ "emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,CONVERT(varchar(10),comp.RequestedDate,103) as Created_date1  "
								+ " from  All_Request as all_R,emp_official_info as emp,"
								+ "comp_ot as comp where  Req_Status='"+filter+"' and   (Actual_Approver_status is null or Actual_Approver_status='' or "
								+ "Actual_Approver_status='Cancelled') and all_R.Req_Id=comp.Req_no  and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='"+type+"'"
								+ " and all_R.Last_Approver='"+user.getEmployeeNo()+"'  group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,"
								+ "all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,comp.RequestedDate) as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
					
						
					}
					 ResultSet rsit=ad.selectQuery(getOndutyRecords);
						try {
							while (rsit.next()) {
								LeaveForm leave = new LeaveForm();
								leave.setRequestNumber(rsit.getInt("Req_no"));
								leave.setSubmitDate(rsit.getString("Created_date1"));
								leave.setStatus(rsit.getString("ApprvrStatus"));
								leave.setStartDate(EMicroUtils.display(rsit.getDate("FromDate")));
								leave.setEndDate(EMicroUtils.display(rsit.getDate("ToDate")));
								leave.setEmployeeName(rsit.getString("EMP_FULLNAME"));

								comp.add(leave);
							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						try {
							rsit.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						request.setAttribute("complist", comp);
						if(comp.size()>0){
							if(type.equalsIgnoreCase("Pending")){
								request.setAttribute("displayButton", "displayButton");
								}
							}
						request.setAttribute("disablePreviousButton","disablePreviousButton");
						if(comp.size()==0)
						{
							request.setAttribute("nocomp", "nocomp");
						
						}
				 
				}
			 if(type.equalsIgnoreCase("Cancel Permission"))
				{
				 
					LinkedList permlist=new LinkedList();
					String getOndutyRecords="";
				
					if(filter.equalsIgnoreCase("pending"))
					{
						getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,perm.type,"
								+ "perm.startTime,perm.endTime,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,perm.date,perm.request_no,perm.Approver_Status,CONVERT(varchar(10),perm.Created_date,103)+' '+ CONVERT(varchar(5),perm.Created_date,108) as Created_date1  from  All_Request as all_R,emp_official_info as emp,"
								+ "Permission_details as perm where  Req_Status='"+filter+"' and   (Actual_Approver_status is null or Actual_Approver_status='' or "
								+ "Actual_Approver_status='Cancelled') and all_R.Req_Id=perm.request_no  and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='"+type+"'"
								+ " and all_R.Pending_Approver='"+user.getEmployeeNo()+"'  group by all_R.Req_Id,all_R.Requester_Name,perm.type,perm.startTime,perm.endTime,emp.EMP_FULLNAME,"
								+ "all_R.Req_Status,all_R.Req_Date,perm.date,perm.request_no,perm.Approver_Status,perm.Created_date ) as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
					}
					else
					{
						getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,perm.type,"
								+ "perm.startTime,perm.endTime,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,perm.date,perm.request_no,perm.Approver_Status,CONVERT(varchar(10),perm.Created_date,103)+' '+ CONVERT(varchar(5),perm.Created_date,108) as Created_date1  from  All_Request as all_R,emp_official_info as emp,"
								+ "Permission_details as perm where  Req_Status='"+filter+"' and   (Actual_Approver_status is null or Actual_Approver_status='' or "
								+ "Actual_Approver_status='Cancelled') and all_R.Req_Id=perm.request_no  and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='"+type+"'"
								+ " and all_R.Last_Approver='"+user.getEmployeeNo()+"'  group by all_R.Req_Id,all_R.Requester_Name,perm.type,perm.startTime,perm.endTime,emp.EMP_FULLNAME,"
								+ "all_R.Req_Status,all_R.Req_Date,perm.date,perm.request_no,perm.Approver_Status,perm.Created_date ) as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
					
						
					}
					 ResultSet rs=ad.selectQuery(getOndutyRecords);
					try {
						while (rs.next()) {
							PermissionForm permissionForm2=new PermissionForm();
				
							permissionForm2.setRequestNumber(rs.getInt("request_no"));
							permissionForm2.setEmployeeName(rs.getString("EMP_FULLNAME"));
							permissionForm2.setStartTime(rs.getString("startTime"));
							permissionForm2.setEndTime(rs.getString("endTime"));
							permissionForm2.setType(rs.getString("type"));
						

                            permissionForm2.setReqdate(rs.getString("Created_date1"));
							String date = rs.getString("date");
							String a[]=date.split(" ");
							date=a[0];
							String b[]=date.split("-");
							date=b[2]+"/"+b[1]+"/"+b[0];
							
							permissionForm2.setDate(date);
							int OnDuty_status=rs.getInt("Approver_Status");
							//String OnDuty_status =rs.getString("Approver_Status");
							
							String status="";
							if(OnDuty_status==0)
							{
								status="Pending";
							}
							if(OnDuty_status==1)
							{
								status="Approved";
							}
							if(OnDuty_status==2)
							{
								status="Rejected";
							}
							if(OnDuty_status==3)
							{
								status="Cancelled";
							}
							permissionForm2.setApproverStatus(status);
							
							permlist.add(permissionForm2);
						
						}
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					try {
						rs.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					request.setAttribute("Permissionlist", permlist);
					if(permlist.size()>0){
						if(type.equalsIgnoreCase("Pending")){
							request.setAttribute("displayButton", "displayButton");
							}
						}
					request.setAttribute("disablePreviousButton","disablePreviousButton");
					if(permlist.size()==0)
					{
						request.setAttribute("noRecords", "noRecords");
					
					}
				 
				}
			 
			 
			 if(type.equalsIgnoreCase("Cancel On Duty"))
				{


					LinkedList ondutyList=new LinkedList();
					String getOndutyRecords="";
				
					if(filter.equalsIgnoreCase("pending"))
					{
						getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime," +
						"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,onduty.start_date,onduty.end_date " +
						"from  All_Request as all_R,emp_official_info as emp,OnDuty_details as onduty where  Req_Status='"+filter+"' and   (Actual_Approver_status is null or Actual_Approver_status='' or Actual_Approver_status='Cancelled') and all_R.Req_Id=onduty.request_no " +
						" and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='"+type+"' and all_R.Pending_Approver='"+user.getEmployeeNo()+"'  group by all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,onduty.start_date,onduty.end_date) as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
					}
					else
					{
						getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime," +
								"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,onduty.start_date,onduty.end_date " +
								"from  All_Request as all_R,emp_official_info as emp,OnDuty_details as onduty where  Req_Status='"+filter+"' and   (Actual_Approver_status is null or Actual_Approver_status='' or Actual_Approver_status='"+filter+"') and all_R.Req_Id=onduty.request_no " +
								" and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='"+type+"' and all_R.Last_Approver='"+user.getEmployeeNo()+"'  group by all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,onduty.start_date,onduty.end_date) as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
						
						
					}
	
						
					
					
					ResultSet rsOnduty=ad.selectQuery(getOndutyRecords);
					try{
					while(rsOnduty.next()){
					OnDutyForm onduty=new OnDutyForm();
					onduty.setRequestNumber(rsOnduty.getInt("Req_Id"));
					onduty.setEmployeeNumber(rsOnduty.getString("Requester_Name"));
				
					onduty.setOnDutyType(rsOnduty.getString("onDuty_Type"));
					onduty.setLocationId(rsOnduty.getString("location"));
					onduty.setEmployeeName(rsOnduty.getString("EMP_FULLNAME"));
					onduty.setSubmitDate(rsOnduty.getString("Req_Date"));
					onduty.setStartDate(EMicroUtils.display(rsOnduty.getDate("start_date")));
					onduty.setLocationId(rsOnduty.getString("location"));
					onduty.setStartTime(rsOnduty.getString("startTime"));
					onduty.setEndDate(EMicroUtils.display(rsOnduty.getDate("end_date")));
					
					
					onduty.setEndTime(rsOnduty.getString("endTime"));
					onduty.setApprover(rsOnduty.getString("Req_Status"));
					ondutyList.add(onduty);
					}
					if(ondutyList.size()>0){
					if(type.equalsIgnoreCase("Pending")){
						request.setAttribute("displayButton", "displayButton");
						}
					}
					request.setAttribute("ondutyList", ondutyList);
					if(ondutyList.size()==0){
						request.setAttribute("no OnDuty records", "no OnDuty records");
						approvalsForm.setMessage3("No Records Found..");
					}
					}catch (Exception e) {
						e.printStackTrace();
					}
					
					try {
						rsOnduty.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
			 
				 
				}
		
		if(type.equalsIgnoreCase("Cancel Leave"))
		{
		 
			LinkedList leaveList=new LinkedList();
			String getLeaveRecords="";
			
			if(filter.equalsIgnoreCase("pending"))
			{
			
		    getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,leave.leave_type,emp.PERNR,emp.EMP_FULLNAME,"
		    		+ "all_R.Req_Status,all_R.Req_Date,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days from  "
		    		+ "All_Request as all_R,emp_official_info as emp,leave_details as leave  where   all_R.Req_Status='"+filter+"' and  "
		    				+ " (Actual_Approver_status is null or Actual_Approver_status='' or Actual_Approver_status='Cancelled') and all_R.Req_Type='Cancel Leave'  "
		    				+ "and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id  and all_R.Pending_Approver='"+user.getEmployeeNo()+"' group by all_R.Req_Id,leave.leave_type,emp.PERNR,emp.EMP_FULLNAME,"
		    				+ "all_R.Req_Status,all_R.Req_Date,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days) as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
			
			}
			else
			{
				
			    getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,leave.leave_type,emp.PERNR,emp.EMP_FULLNAME,"
			    		+ "all_R.Req_Status,all_R.Req_Date,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days from  "
			    		+ "All_Request as all_R,emp_official_info as emp,leave_details as leave  where   all_R.Req_Status='"+filter+"' and  "
			    				+ " (Actual_Approver_status is null or Actual_Approver_status='' or Actual_Approver_status='"+filter+"') and all_R.Req_Type='"+type+"'  "
			    				+ "and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id  and all_R.Last_approver='"+user.getEmployeeNo()+"' group by all_R.Req_Id,leave.leave_type,emp.PERNR,emp.EMP_FULLNAME,"
			    				+ "all_R.Req_Status,all_R.Req_Date,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days) as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
					
			}
		   
		    ResultSet rsLeave=ad.selectQuery(getLeaveRecords);
			try{
			while(rsLeave.next()){
			LeaveForm leave=new LeaveForm();
			leave.setRequestNumber(rsLeave.getInt("Req_Id"));
			
		String	leaveType=rsLeave.getString("leave_type");
			if(leaveType.equalsIgnoreCase("1")){
				leaveType="Casual";
			}
			if(leaveType.equalsIgnoreCase("2")){
				leaveType="Sick";
			}
			if(leaveType.equalsIgnoreCase("3")){
				leaveType="privilege";
			}
			if(leaveType.equalsIgnoreCase("4")){
				leaveType="Loss Of Pay";
			}
			if(leaveType.equalsIgnoreCase("5")){
				leaveType="Maternity";
			}
			if(leaveType.equalsIgnoreCase("6")){
				leaveType="Comp-Off";
			}
			leave.setLeaveType(leaveType);
			leave.setEmployeeNumber(rsLeave.getString("PERNR"));
			
			leave.setEmployeeName(rsLeave.getString("EMP_FULLNAME"));
			leave.setSubmitDate(rsLeave.getString("Req_Date"));
			leave.setStartDate(EMicroUtils.display(rsLeave.getDate("start_date")));
			String stDur=rsLeave.getString("start_duration");
			
			if(stDur.equalsIgnoreCase("FD")){
				stDur="Full Day";
			}
			if(stDur.equalsIgnoreCase("FH")){
				stDur="First Half";
			}
			if(stDur.equalsIgnoreCase("SH")){
				stDur="Second Half";
			}
			leave.setStartDurationType(stDur);
			
			leave.setEndDate(EMicroUtils.display(rsLeave.getDate("end_date")));
			
			String endDur=rsLeave.getString("end_duration");
			
			if(endDur.equalsIgnoreCase("FD")){
				endDur="Full Day";
			}
			if(endDur.equalsIgnoreCase("FH")){
				endDur="First Half";
			}
			if(endDur.equalsIgnoreCase("SH")){
				endDur="Second Half";
			}
			leave.setEndDurationType(endDur);
			leave.setNoOfDays(rsLeave.getString("no_of_days"));
			leave.setApproveStatus(rsLeave.getString("Req_Status"));
			leaveList.add(leave);
			}
			if(leaveList.size()>0){
			if(type.equalsIgnoreCase("Pending")){
				request.setAttribute("displayButton", "displayButton");
				}
			}
			request.setAttribute("leaveList", leaveList);
			if(leaveList.size()==0){
				request.setAttribute("no Leave records", "no Leave records");
				approvalsForm.setMessage3("No Records Found..");
			}
			}catch (Exception e) {
				e.printStackTrace();
			}
			try {
				rsLeave.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			 
		}
		return mapping.findForward("displaycancelrecords");
	}
	
	
	public String resetattendance(String userno,String deldate,String inout,String stday,String stmont,String styear)
	{
		
		String b = "";
		if(userno==null)
		{
		  return b;		
		}
		
		String up="update EMP_MANUAL_SWIPE set Status_Flag=0 where pernr='"+userno+"' and Start_date='"+deldate+"' and In_Out='"+inout+"' and remarks='User Request'";
	    int s1d= ad.SqlExecuteUpdate(up);
	    

	    
		return b;
		
	}
	public ActionForward cancelpermissionRequest(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
	
		
		HRApprovalForm permissionform=(HRApprovalForm)form;
		NewsandMediaDao ad=new NewsandMediaDao();
		String HRid="";
		int requestNo=Integer.parseInt(request.getParameter("ReqNo"));
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		if(user == null)
		{
			permissionform.setMessage("Session Expried! Try to Login again!");
			return mapping.findForward("displaycancelRequest");
		}
		String reqType=permissionform.getReqRequstType();
		permissionform.setReqRequstType(reqType);
		String status=permissionform.getSelectedFilter();
		String reqestType=request.getParameter("ReqType");
		try{
			Date dNow = new Date( );
			 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS ");
		String dateNow = ft.format(dNow);
	
		
		String deldate="";
		String inout="";
		String userno="";
		String stday="";
		String stmont="";
		String styear="";
		String getdetails="select right(left(convert(varchar(11),date,106) ,6),3)as monname,day(date) as startday,right('0' + rtrim(month(date)),2) as mon,YEAR(date) as year,CONVERT(varchar(10),Created_date,103)+' '+ CONVERT(varchar(5),Created_date,108) as Created_date1,* from Permission_details where request_no='"+requestNo+"'";
		ResultSet rs=ad.selectQuery(getdetails);
		while(rs.next())
		{
			deldate=rs.getString("date");
			inout=rs.getString("swipe_type");
			userno=rs.getString("user_id");
			if(inout.equalsIgnoreCase("In"))
				inout="I";
			else
				inout="O";
			stday=rs.getString("startday");
			stmont=rs.getString("mon");
			styear=rs.getString("year");
		}
	
		String modifyRequest=" update  All_Request set Actual_Approver_status='Cancelled',Last_Approver=Pending_Approver,Pending_Approver='',Req_Status='Cancelled',Actual_Approved_Date='"+dateNow+"',Actual_Approver='"+user.getEmployeeNo()+"',Actual_Approved_Comments='"+permissionform.getComments()+"' where Req_Type='Cancel Permission' and Req_Id='"+requestNo+"'";	
		int statsChange=ad.SqlExecuteUpdate(modifyRequest);
		if(statsChange>0){
			permissionform.setMessage("Request has been cancelled successfully");
			String updateOnduty="update Permission_details set Approver_Status='3',Last_Approver='"+user.getEmployeeNo()+"',Pending_Approver='',approved_date='',rejected_date='"+dateNow+"',cancelflag='2' where request_no='"+requestNo+"'";
			int ii=ad.SqlExecuteUpdate(updateOnduty);
			
			
		    
//reset attencfd
		    resetattendance(userno,deldate,inout,stday,stmont,styear); 
		    
		}
	
		}catch (Exception e) {
			e.printStackTrace();
		}
		
		String reqmon="";
		String reqyear="";
		String reqstart="";
		String reqend="";
		String userid="";
		String reqstart1="";
		String reqend1="";
		String reqmonname="";
		
		try{
			String getdetails="select right(left(convert(varchar(11),date,106) ,6),3)as monname,day(date) as startday,right('0' + rtrim(month(date)),2) as mon,YEAR(date) as year,CONVERT(varchar(10),Created_date,103)+' '+ CONVERT(varchar(5),Created_date,108) as Created_date1,* from Permission_details where request_no='"+requestNo+"'";
			ResultSet rs=ad.selectQuery(getdetails);
			while(rs.next())
			{
				permissionform.setReqdate(rs.getString("Created_date1"));
				permissionform.setRequestNumber(Integer.parseInt(rs.getString("request_no")));
				reqmon=rs.getString("mon");
				reqyear=rs.getString("year");
				reqmonname=rs.getString("monname");
				permissionform.setStatus(rs.getString("cancelflag"));
				userid=rs.getString("user_id");
				reqstart=rs.getString("startday");
				reqend=rs.getString("startday");
				reqstart1=display1(rs.getDate("date"));
				reqend1=display1(rs.getDate("date"));
				String date = rs.getString("date");
				String a[]=date.split(" ");
				date=a[0];
				String b[]=date.split("-");
				date=b[2]+"/"+b[1]+"/"+b[0];
				permissionform.setDate(date);
				permissionform.setStartTime(rs.getString("startTime"));
				permissionform.setEndTime(rs.getString("endTime"));
				permissionform.setReason(rs.getString("reason"));
				permissionform.setType(rs.getString("type"));
				int perm_status=rs.getInt("Approver_Status");
				permissionform.setComments(rs.getString("comments"));
				//String OnDuty_status =rs.getString("Approver_Status");
				
				
				
				 status="";
				if(perm_status==0)
				{
					status="Pending";
				}
				if(perm_status==1)
				{
					status="Approved";
				}
				if(perm_status==2)
				{
					status="Rejected";
				}
				if(perm_status==3)
				{
					status="Cancelled";
				}
				permissionform.setApproverStatus(status);
				String approveDate="";
				if(status.equalsIgnoreCase("Approved"))
				{
					approveDate=rs.getString("approved_date");
				}
				if(status.equalsIgnoreCase("Rejected") || status.equalsIgnoreCase("Cancelled"))
				{
					approveDate=rs.getString("rejected_date");
				}
				if(!(approveDate.equalsIgnoreCase("")))
				{
					String c[]=approveDate.split(" ");
					approveDate=a[0];
					String d[]=approveDate.split("-");
					approveDate=d[2]+"/"+d[1]+"/"+d[0]+" "+c[1];
					permissionform.setApproveDate(approveDate);
				}
			
				String gender="";
				String pernr="";
				String name="";
				String doj="";
				String dep="";
				String desg="";
				String getGender="select emp.PERNR,emp.EMP_FULLNAME,emp.SEX,emp.DOJ,dep.DPTSTXT,desg.DSGSTXT from emp_official_info emp,DEPARTMENT as dep,DESIGNATION as desg where emp.PERNR='"+userid+"' and dep.DPTID=emp.DPTID and desg.DSGID=emp.DSGID";
				ResultSet rsGender=ad.selectQuery(getGender);
				while(rsGender.next())
				{
					gender=rsGender.getString("SEX");
					pernr=rsGender.getString("PERNR");
					name=rsGender.getString("EMP_FULLNAME");
					doj=rsGender.getString("DOJ");
					dep=rsGender.getString("DPTSTXT");
					desg=rsGender.getString("DSGSTXT");
					
				}
			
					rsGender.close();
			
				permissionform.setEmployeeNumber(pernr);
				permissionform.setEmployeeNo(name);
				permissionform.setDepartment(dep);
				permissionform.setDesignation(desg);
	
				
				
			}
		
			try {
				rs.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			//remarks

			String comments="select * from All_Request where Req_Id='"+requestNo+"' and req_type='Cancel Permission' ";
			ResultSet a=ad.selectQuery(comments);
			try {
				while(a.next())
				{
					permissionform.setRemark(a.getString("Comments"));
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			try {
				a.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			//Attendance

			SAPAttendenceDAO dao = new SAPAttendenceDAO();

			String month=reqyear+reqmon+"01";



			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			Date datenow = new Date();
			String time = sdf.format(datenow);

			String today[]=time.split("-");

			int datetoday=Integer.parseInt(today[2]);
			String monthtoday=today[1];
			String monName=monthtoday;

			if (monName.equals("01"))
				monName = "Jan";
			if (monName.equals("02"))
				monName = "Feb";
			if (monName.equals("03"))
				monName = "Mar";
			if (monName.equals("04"))
				monName = "Apr";
			if (monName.equals("05"))
				monName = "May";
			if (monName.equals("06"))
				monName = "Jun";
			if (monName.equals("07"))
				monName = "Jul";
			if (monName.equals("08"))
				monName = "Aug";
			if (monName.equals("09"))
				monName = "Sep";
			if (monName.equals("10"))
				monName = "Oct";
			if (monName.equals("11"))
				monName = "Nov";
			if (monName.equals("12"))
				monName = "Dec";



			LinkedList attDataList = new LinkedList();
			Calendar cal = Calendar.getInstance();



			String calendarmon=monName;
			String mon=month.substring(0, 3);
			String year = month.substring(month.length() - 4, month.length());

			/*
			 * String reqyear=month.substring(month.length()-2, month.length());
			 * String reqmonth=monName+reqyear; AttendenceForm attendenceForm = new
			 * AttendenceForm(); attendenceForm.setEmpcode(empNo);
			 * attendenceForm.setDat(reqmonth); AttendenceAction a4=new
			 * AttendenceAction(); if(monName.equalsIgnoreCase("Nov")) {
			 * a4.submit(mapping, attendenceForm, request, response); return
			 * mapping.findForward("display"); }
			 */




			if (monName.equals("Jan"))
				monName = "01";
			if (monName.equals("Feb"))
				monName = "02";
			if (monName.equals("Mar"))
				monName = "03";
			if (monName.equals("Apr"))
				monName = "04";
			if (monName.equals("May"))
				monName = "05";
			if (monName.equals("Jun"))
				monName = "06";
			if (monName.equals("Jul"))
				monName = "07";
			if (monName.equals("Aug"))
				monName = "08";
			if (monName.equals("Sep"))
				monName = "09";
			if (monName.equals("Oct"))
				monName = "10";
			if (monName.equals("Nov"))
				monName = "11";
			if (monName.equals("Dec"))
				monName = "12";

			String date ="";	




			ArrayList att = new ArrayList();

			cal.set(Integer.parseInt(year), Integer.parseInt(monName)-1, 1);
			int days = cal.getActualMaximum(Calendar.DAY_OF_MONTH);

			int i=1;
			/*    String query="EXEC daily_report_status_Att '"+days+"','"+monName+"','"+year+"','"+empNo+"' ";
			int k=ad.SqlExecuteUpdate(query);*/

				String s9 = " select date,convert(varchar(11),date,106) as date1,left(DATENAME(WEEKDAY,date),3) as day,left(In_time,5) as intime,left(out_time,5) as outtime,"
						+ "left(status,2) as instatus,right(status,2) as outstatus,shift from Report_Daily_wise,emp_official_info where emp_official_info.PERNR=Report_Daily_wise.Pernr and emp_official_info.LOCID=Report_Daily_wise.Location and  emp_official_info.Pernr='"+userid+"'  and year(date)='"+reqyear+"' "
								+ "and date between '"+reqstart1+"' and '"+reqend1+"' order by date";
				ResultSet rs9 = ad.selectQuery(s9);
				try {
					while(rs9.next())
					{
						
						SAPAttendenceForm help = new SAPAttendenceForm();
						help.setDate(rs9.getString("date1"));
						help.setDay(rs9.getString("day"));
						date=rs9.getString("date");
						
						if(!(rs9.getString("intime").equalsIgnoreCase("00:00") && rs9.getString("instatus").equalsIgnoreCase("AA")))
			    			help.setiNTIME(rs9.getString("intime"));


				    	if(!(rs9.getString("outtime").equalsIgnoreCase("00:00") && rs9.getString("outstatus").equalsIgnoreCase("AA")))
						help.setoUTTIME(rs9.getString("outtime"));

				    	if(monName.equalsIgnoreCase(monthtoday))
				    	{
			            if(datetoday>=i)
			            {
			            	help.setiNSTATUS(rs9.getString("instatus"));
			            	if(datetoday==i)
			            	{
			            		if(rs9.getString("outstatus").equalsIgnoreCase("AA"))
			            		{
			            			help.setoUTSTATUS("");
			            		}
			            		else
			            		{
			            			help.setoUTSTATUS(rs9.getString("outstatus"));
			            		}
			            	}
			            	else
			            	{
			            		help.setoUTSTATUS(rs9.getString("outstatus"));
			            	}
							
							
							switch(rs9.getString("shift")){
							case "0001": help.setShift("Gen(0001)");
							  break;
		case "0002": help.setShift("Gen(0002)");
							  break;
		case "0003": help.setShift("FS(0003)");
							  break;
		case "0004": help.setShift("SS(0004)");
							  break;
		case "0005": help.setShift("TS(0005)");
							  break;
		case "0006": help.setShift("SS1(0006)");
							  break;
		case "0007": help.setShift("FS(0007)");
							  break;
		case "0008": help.setShift("SS0008)");
							  break;
		case "0009": help.setShift("TS(0009)");
							  break;
		case "0010": help.setShift("NS(0010)");
							  break;
		case "0011": help.setShift("SS-SM(0011)");
							  break;
		case "0012": help.setShift("EnggB(0012)");
							  break;
		case "0013": help.setShift("EnggC(0013)");
							  break;
		case "0014": help.setShift("SecA(0014)");
							  break;
		case "0015": help.setShift("SecB(0015)");
							  break;
		case "0016": help.setShift("SecC(0016)");
							  break;
		case "0017": help.setShift("Gen(0017)");
							  break;
		case "0018": help.setShift("Night(0018)");
							  break;
		case "0019": help.setShift("Gen(0019)");
							  break;
		case "0020": help.setShift("Gen2(0020)");
							  break;
		case "0021": help.setShift("2ND(0021)");
							  break;
		case "0022": help.setShift("2ND1(0022)");
							  break;
		case "0023": help.setShift("EnggGen(0023)");
							  break;
		case "0024": help.setShift("EnggGen1(0024)");
							  break;
		case "0025": help.setShift("1ST(0025)");
							  break;
		case "0026": help.setShift("Engg2ND(0026)");
							  break;
		case "0027": help.setShift("3RD(0027)");
							  break;
		case "0028": help.setShift("QC1ST(0028)");
							  break;
		case "0030": help.setShift("Gen4(0030)");
							  break;
		case "0031": help.setShift("1ST(0031)");
							  break;
		case "0032": help.setShift("Gen(0032)");
							  break;
		case "0033": help.setShift("2ND(0033)");
							  break;
		case "0034": help.setShift("Night(0034)");
							  break;
		case "0035": help.setShift("GOASecA(0035)");
							  break;
		case "0036": help.setShift("GOASecB(0036)");
							  break;
		case "0037": help.setShift("GOASecC(0037)");
							  break;
		case "0038": help.setShift("Gen3(0038)");
							  break;
		case "0029": help.setShift("QC2ND(0029)");
							  break;
		case "0039": help.setShift("Gen1(0039)");
							  break;
		case "0040": help.setShift("Gen2(0040)");
							  break;
		case "0041": help.setShift("FS(0041)");
							  break;
		case "0042": help.setShift("SS(0042)");
							  break;
		case "0043": help.setShift("TS(0043)");
							  break;
		case "0054": help.setShift("Gen(0054)");
							  break;
		case "0055": help.setShift("1ST(0055)");
							  break;
		case "0056": help.setShift("2ND(0056)");
							  break;
		case "0057": help.setShift("Night(0057)");
							  break;
		case "0058": help.setShift("Gen5(0058)");
							  break;
		case "0059": help.setShift("Gen6(0059)");
							  break;
		case "0060": help.setShift("Gen(0060)");
							  break;
		case "0061": help.setShift("FS(0061)");
							  break;
		case "0062": help.setShift("SS(0062)");
							  break;
		case "0063": help.setShift("TS(0063)");
							  break;
		case "0064": help.setShift("Night(0064)");
							  break;
		case "0065": help.setShift("Gen(0065)");
							  break;
		case "0066": help.setShift("SSQC(0066)");
							  break;
		case "0067": help.setShift("FS(0067)");
							  break;
		case "0069": help.setShift("Gen(0069)");
							  break;
		case "0070": help.setShift("Gen2(0070)");
							  break;
		case "0071": help.setShift("Gen3(0071)");
							  break;
		case "0072": help.setShift("QC2ND1(0072)");
							  break;
		case "0074": help.setShift("EnggA(0074)");
							  break;
		case "0075": help.setShift("EnggD(0075)");
							  break;
		case "0044": help.setShift("FS1(0044)");
							  break;
		case "0045": help.setShift("FS2(0045)");
							  break;
		case "0046": help.setShift("Gen1(0046)");
							  break;
		case "0047": help.setShift("Gen2(0047)");
							  break;
		case "0048": help.setShift("SS(0048)");
							  break;
		case "0049": help.setShift("3RD(0049)");
							  break;
		case "0050": help.setShift("Gen(0050)");
							  break;
		case "0051": help.setShift("FS(0051)");
							  break;
		case "0052": help.setShift("SS(0052)");
							  break;
		case "0053": help.setShift("TS(0053)");
							  break;
		case "0068": help.setShift("Gen(0068)");
							  break;
		case "0073": help.setShift("QcNig(0073)");
							  break;
		case "0087": help.setShift("Gen(0087)");
		  break;
		case "0088": help.setShift("RD(0088)");
		  break;
		case "0089": help.setShift("Sec(0089)");
		  break;
}
						


					
			                	
			            }
			            else
				    	{
				    		
			            	help.setiNSTATUS("");
							help.setoUTSTATUS("");	
			                  
				    	}
			            
			    	}
				    	else
				    	{
				    		
				    		help.setiNSTATUS(rs9.getString("instatus"));
							help.setoUTSTATUS(rs9.getString("outstatus"));
							
							switch(rs9.getString("shift")){
							  case "0001": help.setShift("GS");
							  break;
							  case "0002": help.setShift("GS");
							  break;
							  case "0003": help.setShift("FS");
							  break;
							  case "0004": help.setShift("SS");
							  break;
							  case "0005": help.setShift("TS");
							  break;
							  case "0006": help.setShift("SS1");
							  break;
							  case "0007": help.setShift("FS");
							  break;
							  case "0008": help.setShift("SS");
							  break;
							  case "0009": help.setShift("TS");
							  break;
							  case "0010": help.setShift("NS");
							  break;
							  case "0011": help.setShift("SS");
							  break;
							  case "0012": help.setShift("Engg B");
							  break;
							  case "0013": help.setShift("Engg B");
							  break;
							  case "0014": help.setShift("Sec A");
							  break;
							  case "0015": help.setShift("Sec B");
							  break;
							  case "0016": help.setShift("Sec C");
							  break;
							  case "0017": help.setShift("GS");
							  break;
							  case "0018": help.setShift("NS");
							  break;
							  case "0087": help.setShift("GS");
						  	  break; 
							  case "0088": help.setShift("RD");
							  break;
							  case "0089": help.setShift("SS");
							  break;
									

						}
						            
				    	}
					   

				    	String data = "select Approvel_Status,reason from leave_details where  user_id='"
								+ userid
								+ "' and Approvel_Status in('Approved','Pending') and record_status!='Draft'  and '"
								+  date 
								+ "' between start_date and  end_date and YEAR(start_date)='"
								+ year + "'";
						ResultSet rs10 = ad.selectQuery(data);
						while (rs10.next()) {
							if (rs10.getString("Approvel_Status").equalsIgnoreCase(
									"Approved"))
								help.setRemarks(rs10.getString("reason"));
							else
								help.setRemarks("Leave to be Approved");
						}
						rs10.close();

						String data1 = "select Approver_Status,reason from OnDuty_details where  user_id='"
								+userid
								+ "' and Approver_Status in('Approved','In Process') and '"
								+ date
								+ "' between start_date and  end_date  and YEAR(start_date)='"
								+ year + "'";
						ResultSet rs101 = ad.selectQuery(data1);
						while (rs101.next()) {
							if (rs101.getString("Approver_Status")
									.equalsIgnoreCase("Approved"))
								help.setRemarks(rs101.getString("reason"));
							else
								help.setRemarks("Onduty to be Approved");
							
						} 

						rs101.close();
						



						String data11 = "select * from holidays where date = '"+date+"' and location = '"+user.getPlantId()+"' ";

						ResultSet rs1011 = ad.selectQuery(data11);
						try {
							while (rs1011.next()) {

									help.setRemarks(rs1011.getString("Holiday_Name"));
									help.setMessage("HOL");
									

							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						rs1011.close();
						

					i++;
					
					attDataList.add(help);
					}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs9.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				if (attDataList.size() > 0) {
					request.setAttribute("attDataList", attDataList);
				}
			
		}catch (Exception e) {
			e.printStackTrace();
		}
		
		return mapping.findForward("displaypermissioncancelRequest");
	}
	
	public ActionForward cancelondutyRequest(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		

		HRApprovalForm leaveForm=(HRApprovalForm)form;
		NewsandMediaDao ad=new NewsandMediaDao();
		String HRid="";
		int requestNo=Integer.parseInt(request.getParameter("ReqNo"));
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		if(user == null)
		{
			leaveForm.setMessage("Session Expried! Try to Login again!");
			return mapping.findForward("displaycancelRequest");
		}
		String reqType=leaveForm.getReqRequstType();
		leaveForm.setReqRequstType(reqType);
		String status=leaveForm.getSelectedFilter();
		String reqestType=request.getParameter("ReqType");
		String apprstatus=request.getParameter("status");
		try{
			Date dNow = new Date( );
			 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS ");
		String dateNow = ft.format(dNow);
	
		if(apprstatus.equalsIgnoreCase("Cancel Onduty"))
		{
		String modifyRequest=" update  All_Request set Actual_Approver_status='Cancelled',Last_Approver=Pending_Approver,Pending_Approver='',Req_Status='Cancelled',Actual_Approved_Date='"+dateNow+"',Actual_Approver='"+user.getEmployeeNo()+"',Actual_Approved_Comments='"+leaveForm.getComments()+"' where Req_Type='Cancel On Duty' and Req_Id='"+requestNo+"'";	
		int statsChange=ad.SqlExecuteUpdate(modifyRequest);
		if(statsChange>0){
			leaveForm.setMessage2("Request has been cancelled successfully");
			String updateOnduty="update OnDuty_details set Approver_Status='Cancelled',OnDuty_status='3',Last_Approver='"+user.getEmployeeNo()+"',Pending_Approver='',approved_date='',rejected_date='"+dateNow+"',cancelflag='2' where request_no='"+requestNo+"'";
			int ii=ad.SqlExecuteUpdate(updateOnduty);
		}
		}
		else
		{
			String modifyRequest=" update  All_Request set Actual_Approver_status='Rejected',Last_Approver=Pending_Approver,Pending_Approver='',Req_Status='Rejected',Actual_Approved_Date='"+dateNow+"',Actual_Approver='"+user.getEmployeeNo()+"',Actual_Approved_Comments='"+leaveForm.getComments()+"' where Req_Type='Cancel On Duty' and Req_Id='"+requestNo+"'";	
			int statsChange=ad.SqlExecuteUpdate(modifyRequest);
			if(statsChange>0){
				leaveForm.setMessage2("Request has been rejected successfully");
				String updateOnduty="update OnDuty_details set Approver_Status='HR Rejected',OnDuty_status='5',Last_Approver='"+user.getEmployeeNo()+"',Pending_Approver='',approved_date='',rejected_date='"+dateNow+"',cancelflag='3' where request_no='"+requestNo+"'";
				int ii=ad.SqlExecuteUpdate(updateOnduty);
			}	
		}
	
		}catch (Exception e) {
			e.printStackTrace();
		}
		
		

		
		
		String userid="";
		
	
	String getOnDutyDetails="select * from OnDuty_details where request_no='"+requestNo+"'";
	ResultSet rsDetails=ad.selectQuery(getOnDutyDetails);
	try {
		while(rsDetails.next())
		{
			userid=rsDetails.getString("user_id");
			leaveForm.setRequestNo(Integer.toString(requestNo));
			leaveForm.setOnDutyType(rsDetails.getString("onDuty_Type"));
			leaveForm.setLocationId(rsDetails.getString("location"));
			leaveForm.setStartDate(EMicroUtils.display(rsDetails.getDate("start_date")));
			leaveForm.setStartTime(rsDetails.getString("startTime"));
			leaveForm.setEndDate(EMicroUtils.display(rsDetails.getDate("end_date")));
			leaveForm.setEndTime(rsDetails.getString("endTime"));
			leaveForm.setDocumentName(rsDetails.getString("documents"));
			leaveForm.setReason(rsDetails.getString("reason"));
		}
	} catch (SQLException e1) {
		// TODO Auto-generated catch block
		e1.printStackTrace();
	}
	
	
	String gender="";
	String pernr="";
	String name="";
	String doj="";
	String dep="";
	String desg="";
	String getGender="select emp.PERNR,emp.EMP_FULLNAME,emp.SEX,emp.DOJ,dep.DPTSTXT,desg.DSGSTXT from emp_official_info emp,DEPARTMENT as dep,DESIGNATION as desg where emp.PERNR='"+userid+"' and dep.DPTID=emp.DPTID and desg.DSGID=emp.DSGID";
	ResultSet rsGender=ad.selectQuery(getGender);
	try {
		while(rsGender.next())
		{
			gender=rsGender.getString("SEX");
			pernr=rsGender.getString("PERNR");
			name=rsGender.getString("EMP_FULLNAME");
			doj=rsGender.getString("DOJ");
			dep=rsGender.getString("DPTSTXT");
			desg=rsGender.getString("DSGSTXT");
			
		}
	} catch (SQLException e1) {
		// TODO Auto-generated catch block
		e1.printStackTrace();
	}
	
	leaveForm.setEmployeeNumber(pernr);
	leaveForm.setEmployeeName(name);
	leaveForm.setDepartment(dep);
	leaveForm.setDesignation(desg);
	leaveForm.setDate(doj);
	
	
	
	String sql1="select * from onDuty_emp_documents where request_no='"+requestNo+"' ";
	ResultSet rs=ad.selectQuery(sql1);
	OnDutyForm ondutyForm1=null;
		ArrayList a1=new ArrayList();
		try {
			while(rs.next()) {
				ondutyForm1=new OnDutyForm();
				ondutyForm1.setFileName(rs.getString("file_name"));
				ondutyForm1.setId(rs.getString("id"));
				a1.add(ondutyForm1);
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		request.setAttribute("documentDetails", a1);
		LinkedList approverList=new LinkedList();
		String approverName="";
		String approverID="";
		String reportingMgrID="";
		String reportingMgrName="";
		String appDesig="";
		String reportMgrDesg="";
		String getApprovers="select APPMGR,RPTMGR  from emp_official_info  emp where " +
		"PERNR='"+userid+"'  ";	
ResultSet rsApprovers=ad.selectQuery(getApprovers);
try {
	while(rsApprovers.next())
	{
		approverID=rsApprovers.getString("APPMGR");
		reportingMgrID=rsApprovers.getString("RPTMGR");
	}
} catch (SQLException e1) {
	// TODO Auto-generated catch block
	e1.printStackTrace();
}
boolean existStatus=false;
 reqType="";

ArrayList paralist=new ArrayList();
String checkESSApproverList="select count(*),reqType from ESS_Approvers where employeeNumber='"+userid+"' and essType='Leave' group by reqType";
ResultSet rsCheckInEss=ad.selectQuery(checkESSApproverList);
try {
	while(rsCheckInEss.next())
	{
		int number=rsCheckInEss.getInt(1);
		reqType=rsCheckInEss.getString("reqType");
		if(number==0)
		{
			existStatus=false;
		}else{
			existStatus=true;
		}
	}
} catch (SQLException e1) {
	// TODO Auto-generated catch block
	e1.printStackTrace();
}
if(existStatus==true){
	if(reqType.equalsIgnoreCase("sequential"))
	{
	String getApproverDesig=" select e.ApproverId,emp.EMP_FULLNAME,desg.DSGSTXT  from ESS_Approvers as e,emp_official_info as emp,DESIGNATION as desg " +
"where employeeNumber='"+userid+"' and  e.ApproverId=emp.PERNR and emp.DSGID=desg.DSGID and essType='Leave' order by Priority";
	 
	ResultSet rsA=ad.selectQuery(getApproverDesig);
		try {
			while(rsA.next())
			{
				LeaveForm lvform=new LeaveForm();
				 lvform.setApprover(rsA.getString("EMP_FULLNAME"));	
				 lvform.setAppDesig(rsA.getString("DSGSTXT"));	
				String getdetails=" select all_R.Comments,desg.DSGSTXT,emp.EMP_FULLNAME,all_R.Hr_Id,all_R.Req_Status,all_R.approved_date," +
						"all_R.rejected_date from 	All_Request as all_R,emp_official_info as emp, DESIGNATION as desg   " +
						" where all_R.Req_Id='"+requestNo+"' and all_R.Req_Type='On Duty' and ((emp.PERNR=all_R.Last_Approver) or " +
						"(emp.PERNR=all_R.Pending_Approver))  and (emp.DSGID=desg.DSGID) and((Last_Approver='"+rsA.getString("ApproverId")+"') or " +
						"(Pending_Approver='"+rsA.getString("ApproverId")+"'))  and Requester_Name='"+userid+"'";
				
				ResultSet rsApproverDsg=ad.selectQuery(getdetails);
				
				while(rsApproverDsg.next())
				{
					HRid=rsApproverDsg.getString("Hr_Id");
				
					String reqstatus=rsApproverDsg.getString("Req_Status");
					lvform.setStatus(rsApproverDsg.getString("Req_Status"));
					if(reqstatus.equalsIgnoreCase("Pending"))
					{
						
						 lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
						 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
						
					}
					if(reqstatus.equalsIgnoreCase("Approved"))
					{
					lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));
					 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
				   lvform.setApprovedDate(rsApproverDsg.getString("approved_date"));
					}
					
					if(reqstatus.equalsIgnoreCase("Rejected"))
					{
						  lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
						  lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
					     lvform.setApprovedDate(rsApproverDsg.getString("rejected_date"));
					}
					if(reqstatus.equalsIgnoreCase("Cancelled"))
					{
						  lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
						  lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
					     lvform.setApprovedDate(rsApproverDsg.getString("rejected_date"));
					}
					lvform.setComments(rsApproverDsg.getString("Comments"));
					
					
					if(HRid!=null)
					{
						if( reqstatus.equalsIgnoreCase("Approved")){
						String hrdetails="select emp.EMP_FULLNAME,des.DSGSTXT from emp_official_info as emp,DESIGNATION as des where PERNR='"+HRid+"' and emp.DSGID=des.DSGID";
						
						ResultSet rs1=ad.selectQuery(hrdetails);
						
						while(rs1.next())
						{
							lvform.setApprover(rs1.getString("EMP_FULLNAME"));
							 lvform.setAppDesig(rs1.getString("DSGSTXT"));
						}
			
							rs1.close();
						
					}}
				}
				
			
					rsApproverDsg.close();
			
				paralist.add(lvform);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rsA.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		

		
	}
	if(reqType.equalsIgnoreCase("parallel"))
	{
		
		String getApproverDesig="  select all_R.Comments,desg.DSGSTXT,emp.EMP_FULLNAME,all_R.Hr_Id,all_R.Req_Status,all_R.approved_date,all_R.rejected_date from " +
				"All_Request as all_R,emp_official_info as emp, DESIGNATION as desg    where all_R.Req_Id='"+requestNo+"' and all_R.Req_Type='On Duty' and " +
				"((emp.PERNR=all_R.Last_Approver) or (emp.PERNR=all_R.Pending_Approver))  and (emp.DSGID=desg.DSGID) ";
		    ResultSet rsApproverDsg=ad.selectQuery(getApproverDesig);
			try {
				while(rsApproverDsg.next())
				{
					HRid=rsApproverDsg.getString("Hr_Id");
					LeaveForm lvform=new LeaveForm();
					String reqstatus=rsApproverDsg.getString("Req_Status");
					lvform.setStatus(rsApproverDsg.getString("Req_Status"));
					if(reqstatus.equalsIgnoreCase("Pending"))
					{
						
					 lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
					 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));	
						
					}
					if(reqstatus.equalsIgnoreCase("Approved"))
					{
					lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));
					 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
				   lvform.setApprovedDate(rsApproverDsg.getString("approved_date"));
					}
					
					if(reqstatus.equalsIgnoreCase("Rejected")||reqstatus.equalsIgnoreCase("Cancelled"))
					{
						  lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
						  lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
					     lvform.setApprovedDate(rsApproverDsg.getString("rejected_date"));
					}
					lvform.setComments(rsApproverDsg.getString("Comments"));
					
					if(HRid!=null)
					{
						if( reqstatus.equalsIgnoreCase("Approved")){
						String hrdetails="select emp.EMP_FULLNAME,des.DSGSTXT from emp_official_info as emp,DESIGNATION as des where PERNR='"+HRid+"' and emp.DSGID=des.DSGID";
						
						ResultSet rs2=ad.selectQuery(hrdetails);
						
						while(rs2.next())
						{
							lvform.setApprover(rs2.getString("EMP_FULLNAME"));
							 lvform.setAppDesig(rs2.getString("DSGSTXT"));
						}
						rs2.close();
					}
					}
					
					
					paralist.add(lvform);
					
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			try {
				rsApproverDsg.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		
	}
	
	///Actual approver 
	
			String actual="select a.*,e.EMP_FULLNAME,d.DSGSTXT from All_Request a,emp_official_info e,DESIGNATION d where Req_Id='"+requestNo+"' and Req_Type='Cancel On Duty'  and e.PERNR=a.Actual_Approver and e.DSGID=d.DSGID  ";
			ResultSet rsact=ad.selectQuery(actual);
			try {
				if(rsact.next())
				{
					LeaveForm l=new LeaveForm();
					l.setApprover(rsact.getString("EMP_FULLNAME"));	
				 l.setAppDesig(rsact.getString("DSGSTXT"));	
					l.setStatus(rsact.getString("Actual_Approver_status"));
					  String approveDate=rsact.getString("Actual_Approved_Date");
						
						String a[]=approveDate.split(" ");
						approveDate=a[0];
						String b[]=approveDate.split("-");
						approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
						
						 l.setApprovedDate(approveDate);
						 l.setComments(rsact.getString("Actual_Approved_Comments"));
							paralist.add(l);
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			try {
				rsact.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	
	
	
	request.setAttribute("onduty", paralist);
}
if(existStatus==false){

String getRepMgrDesig="select dept.DPTSTXT,desg.DSGSTXT,emp.EMP_FULLNAME from emp_official_info as emp,DEPARTMENT as dept,DESIGNATION as desg where " +
" emp.PERNR='"+approverID+"' and emp.DPTID=dept.DPTID and emp.DSGID=desg.DSGID";
ResultSet rsRepMgrDesig=ad.selectQuery(getRepMgrDesig);
try {
	while(rsRepMgrDesig.next())
	{
	LeaveForm leaveForm2=new LeaveForm();
	leaveForm2.setApptype("Approver Manager");
	leaveForm2.setApproverID(approverID);
	reportMgrDesg=rsRepMgrDesig.getString("DSGSTXT");
	reportingMgrName=rsRepMgrDesig.getString("EMP_FULLNAME");
	leaveForm2.setAppDesig(reportMgrDesg);
	leaveForm2.setApproverName(reportingMgrName);
	
	approverList.add(leaveForm2);
	}
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}
try {
	rsRepMgrDesig.close();
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}
request.setAttribute("appList", approverList);

}

//remarks

		String comments="select * from All_Request where Req_Id='"+requestNo+"' and req_type='Cancel On Duty' ";
		ResultSet a=ad.selectQuery(comments);
		try {
			while(a.next())
			{
				leaveForm.setRemark(a.getString("Comments"));
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		try {
			a.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		try {
			rsGender.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		try {
			rsCheckInEss.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rsApprovers.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rsDetails.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return mapping.findForward("displayondutycancelRequest");
	
		
	}
	
	
	public ActionForward selectpermissionRequest(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
{
		
		String HRid="";
		HRApprovalForm permissionform=(HRApprovalForm)form;// TODO Auto-generated method stub
		String reqId=request.getParameter("requstNo");
		permissionform.setId(reqId);
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		String reqmon="";
		String reqyear="";
		String reqstart="";
		String reqend="";
		String userid="";
		String reqstart1="";
		String reqend1="";
		String reqmonname="";
		try{
			String getdetails="select right(left(convert(varchar(11),date,106) ,6),3)as monname,day(date) as startday,right('0' + rtrim(month(date)),2) as mon,YEAR(date) as year,CONVERT(varchar(10),Created_date,103)+' '+ CONVERT(varchar(5),Created_date,108) as Created_date1,* from Permission_details where request_no='"+reqId+"'";
			ResultSet rs=ad.selectQuery(getdetails);
			while(rs.next())
			{
				permissionform.setReqdate(rs.getString("Created_date1"));
				permissionform.setRequestNumber(Integer.parseInt(rs.getString("request_no")));
				reqmon=rs.getString("mon");
				reqyear=rs.getString("year");
				reqmonname=rs.getString("monname");
				permissionform.setStatus(rs.getString("cancelflag"));
				userid=rs.getString("user_id");
				reqstart=rs.getString("startday");
				reqend=rs.getString("startday");
				reqstart1=display1(rs.getDate("date"));
				reqend1=display1(rs.getDate("date"));
				String date = rs.getString("date");
				String a[]=date.split(" ");
				date=a[0];
				String b[]=date.split("-");
				date=b[2]+"/"+b[1]+"/"+b[0];
				permissionform.setDate(date);
				permissionform.setStartTime(rs.getString("startTime"));
				permissionform.setEndTime(rs.getString("endTime"));
				permissionform.setReason(rs.getString("reason"));
				permissionform.setType(rs.getString("type"));
				int perm_status=rs.getInt("Approver_Status");
				permissionform.setComments(rs.getString("comments"));
				//String OnDuty_status =rs.getString("Approver_Status");
				
				
				
				String status="";
				if(perm_status==0)
				{
					status="Pending";
				}
				if(perm_status==1)
				{
					status="Approved";
				}
				if(perm_status==2)
				{
					status="Rejected";
				}
				if(perm_status==3)
				{
					status="Cancelled";
				}
				permissionform.setApproverStatus(status);
				String approveDate="";
				if(status.equalsIgnoreCase("Approved"))
				{
					approveDate=rs.getString("approved_date");
				}
				if(status.equalsIgnoreCase("Rejected") || status.equalsIgnoreCase("Cancelled"))
				{
					approveDate=rs.getString("rejected_date");
				}
				if(!(approveDate.equalsIgnoreCase("")))
				{
					String c[]=approveDate.split(" ");
					approveDate=a[0];
					String d[]=approveDate.split("-");
					approveDate=d[2]+"/"+d[1]+"/"+d[0]+" "+c[1];
					permissionform.setApproveDate(approveDate);
				}
			
				String gender="";
				String pernr="";
				String name="";
				String doj="";
				String dep="";
				String desg="";
				String getGender="select emp.PERNR,emp.EMP_FULLNAME,emp.SEX,emp.DOJ,dep.DPTSTXT,desg.DSGSTXT from emp_official_info emp,DEPARTMENT as dep,DESIGNATION as desg where emp.PERNR='"+userid+"' and dep.DPTID=emp.DPTID and desg.DSGID=emp.DSGID";
				ResultSet rsGender=ad.selectQuery(getGender);
				while(rsGender.next())
				{
					gender=rsGender.getString("SEX");
					pernr=rsGender.getString("PERNR");
					name=rsGender.getString("EMP_FULLNAME");
					doj=rsGender.getString("DOJ");
					dep=rsGender.getString("DPTSTXT");
					desg=rsGender.getString("DSGSTXT");
					
				}
				
	
					rsGender.close();
				
				permissionform.setEmployeeNumber(pernr);
				permissionform.setEmployeeNo(name);
				permissionform.setDepartment(dep);
				permissionform.setDesignation(desg);
	
				
				
			}
			try {
				rs.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			Permission lA = new Permission();
			LinkedList appList= lA.viewOnduty(mapping, form, request, response);
			request.setAttribute("appList", appList);
			
			
			//remarks

			String comments="select * from All_Request where Req_Id='"+reqId+"' and req_type='Cancel Permission' ";
			ResultSet a=ad.selectQuery(comments);
			try {
				while(a.next())
				{
					permissionform.setRemark(a.getString("Comments"));
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			try {
				a.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			

			//Attendance

			SAPAttendenceDAO dao = new SAPAttendenceDAO();

			String month=reqyear+reqmon+"01";



			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			Date datenow = new Date();
			String time = sdf.format(datenow);

			String today[]=time.split("-");

			int datetoday=Integer.parseInt(today[2]);
			String monthtoday=today[1];
			String monName=monthtoday;

			if (monName.equals("01"))
				monName = "Jan";
			if (monName.equals("02"))
				monName = "Feb";
			if (monName.equals("03"))
				monName = "Mar";
			if (monName.equals("04"))
				monName = "Apr";
			if (monName.equals("05"))
				monName = "May";
			if (monName.equals("06"))
				monName = "Jun";
			if (monName.equals("07"))
				monName = "Jul";
			if (monName.equals("08"))
				monName = "Aug";
			if (monName.equals("09"))
				monName = "Sep";
			if (monName.equals("10"))
				monName = "Oct";
			if (monName.equals("11"))
				monName = "Nov";
			if (monName.equals("12"))
				monName = "Dec";



			LinkedList attDataList = new LinkedList();
			Calendar cal = Calendar.getInstance();



			String calendarmon=monName;
			String mon=month.substring(0, 3);
			String year = month.substring(month.length() - 4, month.length());

			/*
			 * String reqyear=month.substring(month.length()-2, month.length());
			 * String reqmonth=monName+reqyear; AttendenceForm attendenceForm = new
			 * AttendenceForm(); attendenceForm.setEmpcode(empNo);
			 * attendenceForm.setDat(reqmonth); AttendenceAction a4=new
			 * AttendenceAction(); if(monName.equalsIgnoreCase("Nov")) {
			 * a4.submit(mapping, attendenceForm, request, response); return
			 * mapping.findForward("display"); }
			 */




			if (monName.equals("Jan"))
				monName = "01";
			if (monName.equals("Feb"))
				monName = "02";
			if (monName.equals("Mar"))
				monName = "03";
			if (monName.equals("Apr"))
				monName = "04";
			if (monName.equals("May"))
				monName = "05";
			if (monName.equals("Jun"))
				monName = "06";
			if (monName.equals("Jul"))
				monName = "07";
			if (monName.equals("Aug"))
				monName = "08";
			if (monName.equals("Sep"))
				monName = "09";
			if (monName.equals("Oct"))
				monName = "10";
			if (monName.equals("Nov"))
				monName = "11";
			if (monName.equals("Dec"))
				monName = "12";

			String date ="";	




			ArrayList att = new ArrayList();

			cal.set(Integer.parseInt(year), Integer.parseInt(monName)-1, 1);
			int days = cal.getActualMaximum(Calendar.DAY_OF_MONTH);

			int i=1;
			/*    String query="EXEC daily_report_status_Att '"+days+"','"+monName+"','"+year+"','"+empNo+"' ";
			int k=ad.SqlExecuteUpdate(query);*/

				String s9 = " select date,convert(varchar(11),date,106) as date1,left(DATENAME(WEEKDAY,date),3) as day,left(In_time,5) as intime,left(out_time,5) as outtime,"
						+ "left(status,2) as instatus,right(status,2) as outstatus,shift from Report_Daily_wise,emp_official_info where emp_official_info.PERNR=Report_Daily_wise.Pernr and emp_official_info.LOCID=Report_Daily_wise.Location and  emp_official_info.Pernr='"+userid+"'  and year(date)='"+reqyear+"' "
								+ "and date between '"+reqstart1+"' and '"+reqend1+"' order by date";
				ResultSet rs9 = ad.selectQuery(s9);
				try {
					while(rs9.next())
					{
						
						SAPAttendenceForm help = new SAPAttendenceForm();
						help.setDate(rs9.getString("date1"));
						help.setDay(rs9.getString("day"));
						date=rs9.getString("date");
						
						if(!(rs9.getString("intime").equalsIgnoreCase("00:00") && rs9.getString("instatus").equalsIgnoreCase("AA")))
			    			help.setiNTIME(rs9.getString("intime"));


				    	if(!(rs9.getString("outtime").equalsIgnoreCase("00:00") && rs9.getString("outstatus").equalsIgnoreCase("AA")))
						help.setoUTTIME(rs9.getString("outtime"));

				    	if(monName.equalsIgnoreCase(monthtoday))
				    	{
			            if(datetoday>=i)
			            {
			            	help.setiNSTATUS(rs9.getString("instatus"));
			            	if(datetoday==i)
			            	{
			            		if(rs9.getString("outstatus").equalsIgnoreCase("AA"))
			            		{
			            			help.setoUTSTATUS("");
			            		}
			            		else
			            		{
			            			help.setoUTSTATUS(rs9.getString("outstatus"));
			            		}
			            	}
			            	else
			            	{
			            		help.setoUTSTATUS(rs9.getString("outstatus"));
			            	}
							
							
							switch(rs9.getString("shift")){
							case "0001": help.setShift("Gen(0001)");
							  break;
		case "0002": help.setShift("Gen(0002)");
							  break;
		case "0003": help.setShift("FS(0003)");
							  break;
		case "0004": help.setShift("SS(0004)");
							  break;
		case "0005": help.setShift("TS(0005)");
							  break;
		case "0006": help.setShift("SS1(0006)");
							  break;
		case "0007": help.setShift("FS(0007)");
							  break;
		case "0008": help.setShift("SS(0008)");
							  break;
		case "0009": help.setShift("TS(0009)");
							  break;
		case "0010": help.setShift("NS(0010)");
							  break;
		case "0011": help.setShift("SS-SM(0011)");
							  break;
		case "0012": help.setShift("EnggB(0012)");
							  break;
		case "0013": help.setShift("EnggC(0013)");
							  break;
		case "0014": help.setShift("SecA(0014)");
							  break;
		case "0015": help.setShift("SecB(0015)");
							  break;
		case "0016": help.setShift("SecC(0016)");
							  break;
		case "0017": help.setShift("Gen(0017)");
							  break;
		case "0018": help.setShift("Night(0018)");
							  break;
		case "0019": help.setShift("Gen(0019)");
							  break;
		case "0020": help.setShift("Gen2(0020)");
							  break;
		case "0021": help.setShift("2ND(0021)");
							  break;
		case "0022": help.setShift("2ND1(0022)");
							  break;
		case "0023": help.setShift("EnggGen(0023)");
							  break;
		case "0024": help.setShift("EnggGen1(0024)");
							  break;
		case "0025": help.setShift("1ST(0025)");
							  break;
		case "0026": help.setShift("Engg2ND(0026)");
							  break;
		case "0027": help.setShift("3RD(0027)");
							  break;
		case "0028": help.setShift("QC1ST(0028)");
							  break;
		case "0030": help.setShift("Gen4(0030)");
							  break;
		case "0031": help.setShift("1ST(0031)");
							  break;
		case "0032": help.setShift("Gen(0032)");
							  break;
		case "0033": help.setShift("2ND(0033)");
							  break;
		case "0034": help.setShift("Night(0034)");
							  break;
		case "0035": help.setShift("GOASecA(0035)");
							  break;
		case "0036": help.setShift("GOASecB(0036)");
							  break;
		case "0037": help.setShift("GOASecC(0037)");
							  break;
		case "0038": help.setShift("Gen3(0038)");
							  break;
		case "0029": help.setShift("QC2ND(0029)");
							  break;
		case "0039": help.setShift("Gen1(0039)");
							  break;
		case "0040": help.setShift("Gen2(0040)");
							  break;
		case "0041": help.setShift("FS(0041)");
							  break;
		case "0042": help.setShift("SS(0042)");
							  break;
		case "0043": help.setShift("TS(0043)");
							  break;
		case "0054": help.setShift("Gen(0054)");
							  break;
		case "0055": help.setShift("1ST(0055)");
							  break;
		case "0056": help.setShift("2ND(0056)");
							  break;
		case "0057": help.setShift("Night(0057)");
							  break;
		case "0058": help.setShift("Gen5(0058)");
							  break;
		case "0059": help.setShift("Gen6(0059)");
							  break;
		case "0060": help.setShift("Gen(0060)");
							  break;
		case "0061": help.setShift("FS(0061)");
							  break;
		case "0062": help.setShift("SS(0062)");
							  break;
		case "0063": help.setShift("TS(0063)");
							  break;
		case "0064": help.setShift("Night(0064)");
							  break;
		case "0065": help.setShift("Gen(0065)");
							  break;
		case "0066": help.setShift("SSQC(0066)");
							  break;
		case "0067": help.setShift("FS(0067)");
							  break;
		case "0069": help.setShift("Gen(0069)");
							  break;
		case "0070": help.setShift("Gen2(0070)");
							  break;
		case "0071": help.setShift("Gen3(0071)");
							  break;
		case "0072": help.setShift("QC2ND1(0072)");
							  break;
		case "0074": help.setShift("EnggA(0074)");
							  break;
		case "0075": help.setShift("EnggD(0075)");
							  break;
		case "0044": help.setShift("FS1(0044)");
							  break;
		case "0045": help.setShift("FS2(0045)");
							  break;
		case "0046": help.setShift("Gen1(0046)");
							  break;
		case "0047": help.setShift("Gen2(0047)");
							  break;
		case "0048": help.setShift("SS(0048)");
							  break;
		case "0049": help.setShift("3RD(0049)");
							  break;
		case "0050": help.setShift("Gen(0050)");
							  break;
		case "0051": help.setShift("FS(0051)");
							  break;
		case "0052": help.setShift("SS(0052)");
							  break;
		case "0053": help.setShift("TS(0053)");
							  break;
		case "0068": help.setShift("Gen(0068)");
							  break;
		case "0073": help.setShift("QcNig(0073)");
							  break;
		case "0087": help.setShift("Gen(0087)");
		  break;
case "0088": help.setShift("RD(0088)");
		  break;
case "0089": help.setShift("Sec(0089)");
		  break;
}
						


					
			                	
			            }
			            else
				    	{
				    		
			            	help.setiNSTATUS("");
							help.setoUTSTATUS("");	
			                  
				    	}
			            
			    	}
				    	else
				    	{
				    		
				    		help.setiNSTATUS(rs9.getString("instatus"));
							help.setoUTSTATUS(rs9.getString("outstatus"));
							
							switch(rs9.getString("shift")){
							  case "0001": help.setShift("GS");
							  break;
							  case "0002": help.setShift("GS");
							  break;
							  case "0003": help.setShift("FS");
							  break;
							  case "0004": help.setShift("SS");
							  break;
							  case "0005": help.setShift("TS");
							  break;
							  case "0006": help.setShift("SS1");
							  break;
							  case "0007": help.setShift("FS");
							  break;
							  case "0008": help.setShift("SS");
							  break;
							  case "0009": help.setShift("TS");
							  break;
							  case "0010": help.setShift("NS");
							  break;
							  case "0011": help.setShift("SS");
							  break;
							  case "0012": help.setShift("Engg B");
							  break;
							  case "0013": help.setShift("Engg B");
							  break;
							  case "0014": help.setShift("Sec A");
							  break;
							  case "0015": help.setShift("Sec B");
							  break;
							  case "0016": help.setShift("Sec C");
							  break;
							  case "0017": help.setShift("GS");
							  break;
							  case "0018": help.setShift("NS");
							  break;
							  case "0087": help.setShift("GS");
						  	  break; 
							  case "0088": help.setShift("RD");
							  break;
							  case "0089": help.setShift("SS");
							  break;
									

						}
						            
				    	}
					   

				    	String data = "select Approvel_Status,reason from leave_details where  user_id='"
								+ userid
								+ "' and Approvel_Status in('Approved','Pending') and record_status!='Draft'  and '"
								+  date 
								+ "' between start_date and  end_date and YEAR(start_date)='"
								+ year + "'";
						ResultSet rs10 = ad.selectQuery(data);
						while (rs10.next()) {
							if (rs10.getString("Approvel_Status").equalsIgnoreCase(
									"Approved"))
								help.setRemarks(rs10.getString("reason"));
							else
								help.setRemarks("Leave to be Approved");
						}
						rs10.close();

						String data1 = "select Approver_Status,reason from OnDuty_details where  user_id='"
								+userid
								+ "' and Approver_Status in('Approved','In Process') and '"
								+ date
								+ "' between start_date and  end_date  and YEAR(start_date)='"
								+ year + "'";
						ResultSet rs101 = ad.selectQuery(data1);
						while (rs101.next()) {
							if (rs101.getString("Approver_Status")
									.equalsIgnoreCase("Approved"))
								help.setRemarks(rs101.getString("reason"));
							else
								help.setRemarks("Onduty to be Approved");
							
						} 

						rs101.close();
						



						String data11 = "select * from holidays where date = '"+date+"' and location = '"+user.getPlantId()+"' ";

						ResultSet rs1011 = ad.selectQuery(data11);
						try {
							while (rs1011.next()) {

									help.setRemarks(rs1011.getString("Holiday_Name"));
									help.setMessage("HOL");
									

							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						rs1011.close();
						

					i++;
					
					attDataList.add(help);
					}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs9.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				if (attDataList.size() > 0) {
					request.setAttribute("attDataList", attDataList);
				}

		}catch (Exception e) {
			e.printStackTrace();
		}
		
		
		
		
		   request.setAttribute("cancelbutton", "cancelbutton");
			return mapping.findForward("displaypermissioncancelRequest");
		
}
	
	public ActionForward selectondutyRequest(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
{
		
		String HRid="";
		HRApprovalForm pendAppForm=(HRApprovalForm)form;// TODO Auto-generated method stub
		String reqId=request.getParameter("requstNo");
		pendAppForm.setId(reqId);
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		String reqmon="";
		String reqyear="";
		String reqstart="";
		String reqend="";
		String reqstart1="";
		String reqend1="";
		String userid="";
		String reqmonname="";
		try 
		{
			
				
		String getOnDutyDetails="select right(left(convert(varchar(11),start_date,106) ,6),3)as monname,day(start_date) as startday,day(end_date) as enday,*,right('0' + rtrim(month(start_date)),2) as mon,YEAR(start_date) as year,cancelflag from OnDuty_details where request_no='"+reqId+"'";
		ResultSet rsDetails=ad.selectQuery(getOnDutyDetails);
		while(rsDetails.next())
		{
			reqmon=rsDetails.getString("mon");
			reqyear=rsDetails.getString("year");
			reqmonname=rsDetails.getString("monname");
			pendAppForm.setStatus(rsDetails.getString("cancelflag"));
			userid=rsDetails.getString("user_id");
			pendAppForm.setRequestNo(reqId);
			pendAppForm.setOnDutyType(rsDetails.getString("onDuty_Type"));
			pendAppForm.setLocationId(rsDetails.getString("location"));
			pendAppForm.setStartDate(EMicroUtils.display(rsDetails.getDate("start_date")));
			reqstart=rsDetails.getString("startday");
			reqend=rsDetails.getString("enday");
			reqstart1=display1(rsDetails.getDate("start_date"));
			reqend1=display1(rsDetails.getDate("end_date"));
			pendAppForm.setStartTime(rsDetails.getString("startTime"));
			pendAppForm.setEndDate(EMicroUtils.display(rsDetails.getDate("end_date")));
			pendAppForm.setEndTime(rsDetails.getString("endTime"));
			pendAppForm.setDocumentName(rsDetails.getString("documents"));
			pendAppForm.setReason(rsDetails.getString("reason"));
		}
		
		rsDetails.close();
		String gender="";
		String pernr="";
		String name="";
		String doj="";
		String dep="";
		String desg="";
		String getGender="select emp.PERNR,emp.EMP_FULLNAME,emp.SEX,emp.DOJ,dep.DPTSTXT,desg.DSGSTXT from emp_official_info emp,DEPARTMENT as dep,DESIGNATION as desg where emp.PERNR='"+userid+"' and dep.DPTID=emp.DPTID and desg.DSGID=emp.DSGID";
		ResultSet rsGender=ad.selectQuery(getGender);
		while(rsGender.next())
		{
			gender=rsGender.getString("SEX");
			pernr=rsGender.getString("PERNR");
			name=rsGender.getString("EMP_FULLNAME");
			doj=rsGender.getString("DOJ");
			dep=rsGender.getString("DPTSTXT");
			desg=rsGender.getString("DSGSTXT");
			
		}
		rsGender.close();
		pendAppForm.setEmployeeNumber(pernr);
		pendAppForm.setEmployeeName(name);
		pendAppForm.setDepartment(dep);
		pendAppForm.setDesignation(desg);
		pendAppForm.setDate(doj);
		
		
		
		String sql1="select * from onDuty_emp_documents where request_no='"+reqId+"' ";
		ResultSet rs=ad.selectQuery(sql1);
		OnDutyForm ondutyForm1=null;
			ArrayList a1=new ArrayList();
			while(rs.next()) {
				ondutyForm1=new OnDutyForm();
				ondutyForm1.setFileName(rs.getString("file_name"));
				ondutyForm1.setId(rs.getString("id"));
				a1.add(ondutyForm1);
			}
			rs.close();
			request.setAttribute("documentDetails", a1);
			LinkedList approverList=new LinkedList();
			String approverName="";
			String approverID="";
			String reportingMgrID="";
			String reportingMgrName="";
			String appDesig="";
			String reportMgrDesg="";
			String getApprovers="select APPMGR,RPTMGR  from emp_official_info  emp where " +
			"PERNR='"+userid+"'  ";	
	ResultSet rsApprovers=ad.selectQuery(getApprovers);
	while(rsApprovers.next())
	{
		approverID=rsApprovers.getString("APPMGR");
		reportingMgrID=rsApprovers.getString("RPTMGR");
	}
rsApprovers.close();
	boolean existStatus=false;
	String reqType="";

	ArrayList paralist=new ArrayList();
	String checkESSApproverList="select count(*),reqType from ESS_Approvers where employeeNumber='"+userid+"' and essType='Leave' group by reqType";
	ResultSet rsCheckInEss=ad.selectQuery(checkESSApproverList);
	while(rsCheckInEss.next())
	{
		int number=rsCheckInEss.getInt(1);
		reqType=rsCheckInEss.getString("reqType");
		if(number==0)
		{
			existStatus=false;
		}else{
			existStatus=true;
		}
	}
	rsCheckInEss.close();
	if(existStatus==true){
		if(reqType.equalsIgnoreCase("sequential"))
		{
		String getApproverDesig=" select e.ApproverId,emp.EMP_FULLNAME,desg.DSGSTXT  from ESS_Approvers as e,emp_official_info as emp,DESIGNATION as desg " +
	"where employeeNumber='"+userid+"' and  e.ApproverId=emp.PERNR and emp.DSGID=desg.DSGID and essType='Leave' order by Priority";
		 
		ResultSet rsA=ad.selectQuery(getApproverDesig);
			while(rsA.next())
			{
				LeaveForm lvform=new LeaveForm();
				 lvform.setApprover(rsA.getString("EMP_FULLNAME"));	
				 lvform.setAppDesig(rsA.getString("DSGSTXT"));	
				String getdetails=" select all_R.Comments,desg.DSGSTXT,emp.EMP_FULLNAME,all_R.Hr_Id,all_R.Req_Status,all_R.approved_date," +
						"all_R.rejected_date from 	All_Request as all_R,emp_official_info as emp, DESIGNATION as desg   " +
						" where all_R.Req_Id='"+reqId+"' and all_R.Req_Type='On Duty' and ((emp.PERNR=all_R.Last_Approver) or " +
						"(emp.PERNR=all_R.Pending_Approver))  and (emp.DSGID=desg.DSGID) and((Last_Approver='"+rsA.getString("ApproverId")+"') or " +
						"(Pending_Approver='"+rsA.getString("ApproverId")+"'))  and Requester_Name='"+userid+"'";
				
				ResultSet rsApproverDsg=ad.selectQuery(getdetails);
				
				while(rsApproverDsg.next())
				{
					HRid=rsApproverDsg.getString("Hr_Id");
				
					String reqstatus=rsApproverDsg.getString("Req_Status");
					lvform.setStatus(rsApproverDsg.getString("Req_Status"));
					if(reqstatus.equalsIgnoreCase("Pending"))
					{
						
						 lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
						 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
						
					}
					if(reqstatus.equalsIgnoreCase("Approved"))
					{
					lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));
					 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
				   lvform.setApprovedDate(rsApproverDsg.getString("approved_date"));
					}
					
					if(reqstatus.equalsIgnoreCase("Rejected"))
					{
						  lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
						  lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
					     lvform.setApprovedDate(rsApproverDsg.getString("rejected_date"));
					}
					if(reqstatus.equalsIgnoreCase("Cancelled"))
					{
						  lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
						  lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
					     lvform.setApprovedDate(rsApproverDsg.getString("rejected_date"));
					}
					lvform.setComments(rsApproverDsg.getString("Comments"));
					
					
					if(HRid!=null)
					{
						if( reqstatus.equalsIgnoreCase("Approved")){
						String hrdetails="select emp.EMP_FULLNAME,des.DSGSTXT from emp_official_info as emp,DESIGNATION as des where PERNR='"+HRid+"' and emp.DSGID=des.DSGID";
						
						ResultSet rs1=ad.selectQuery(hrdetails);
						
						while(rs1.next())
						{
							lvform.setApprover(rs1.getString("EMP_FULLNAME"));
							 lvform.setAppDesig(rs1.getString("DSGSTXT"));
						}
						rs1.close();
					}}
				}
				rsApproverDsg.close();
				paralist.add(lvform);
			}rsA.close();
			
			
			
			
			
		}
		if(reqType.equalsIgnoreCase("parallel"))
		{
			
			String getApproverDesig="  select all_R.Comments,desg.DSGSTXT,emp.EMP_FULLNAME,all_R.Hr_Id,all_R.Req_Status,all_R.approved_date,all_R.rejected_date from " +
					"All_Request as all_R,emp_official_info as emp, DESIGNATION as desg    where all_R.Req_Id='"+reqId+"' and all_R.Req_Type='On Duty' and " +
					"((emp.PERNR=all_R.Last_Approver) or (emp.PERNR=all_R.Pending_Approver))  and (emp.DSGID=desg.DSGID) ";
			    ResultSet rsApproverDsg=ad.selectQuery(getApproverDesig);
				while(rsApproverDsg.next())
				{
					HRid=rsApproverDsg.getString("Hr_Id");
					LeaveForm lvform=new LeaveForm();
					String reqstatus=rsApproverDsg.getString("Req_Status");
					lvform.setStatus(rsApproverDsg.getString("Req_Status"));
					if(reqstatus.equalsIgnoreCase("Pending"))
					{
						
					 lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
					 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));	
						
					}
					if(reqstatus.equalsIgnoreCase("Approved"))
					{
					lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));
					 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
				   lvform.setApprovedDate(rsApproverDsg.getString("approved_date"));
					}
					
					if(reqstatus.equalsIgnoreCase("Rejected")||reqstatus.equalsIgnoreCase("Cancelled"))
					{
						  lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
						  lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
					     lvform.setApprovedDate(rsApproverDsg.getString("rejected_date"));
					}
					lvform.setComments(rsApproverDsg.getString("Comments"));
					
					if(HRid!=null)
					{
						if( reqstatus.equalsIgnoreCase("Approved")){
						String hrdetails="select emp.EMP_FULLNAME,des.DSGSTXT from emp_official_info as emp,DESIGNATION as des where PERNR='"+HRid+"' and emp.DSGID=des.DSGID";
						
						ResultSet rs2=ad.selectQuery(hrdetails);
						
						while(rs2.next())
						{
							lvform.setApprover(rs2.getString("EMP_FULLNAME"));
							 lvform.setAppDesig(rs2.getString("DSGSTXT"));
						}
						rs2.close();
					}
					}
					
					
					
					
					
					paralist.add(lvform);
					
				}
				rsApproverDsg.close();
		}
		
		///Actual approver 
		
		String actual="select a.*,e.EMP_FULLNAME,d.DSGSTXT from All_Request a,emp_official_info e,DESIGNATION d where Req_Id='"+reqId+"' and Req_Type='Cancel On Duty'  and e.PERNR=a.Actual_Approver and e.DSGID=d.DSGID  ";
		ResultSet rsact=ad.selectQuery(actual);
		if(rsact.next())
		{
			LeaveForm l=new LeaveForm();
			l.setApprover(rsact.getString("EMP_FULLNAME"));	
		 l.setAppDesig(rsact.getString("DSGSTXT"));	
			l.setStatus(rsact.getString("Actual_Approver_status"));
			  String approveDate=rsact.getString("Actual_Approved_Date");
				
				String a[]=approveDate.split(" ");
				approveDate=a[0];
				String b[]=approveDate.split("-");
				approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
				
				 l.setApprovedDate(approveDate);
				 l.setComments(rsact.getString("Actual_Approved_Comments"));
					paralist.add(l);
		}
		request.setAttribute("onduty", paralist);
		rsact.close();
	}
	if(existStatus==false){
	
	String getRepMgrDesig="select dept.DPTSTXT,desg.DSGSTXT,emp.EMP_FULLNAME from emp_official_info as emp,DEPARTMENT as dept,DESIGNATION as desg where " +
	" emp.PERNR='"+approverID+"' and emp.DPTID=dept.DPTID and emp.DSGID=desg.DSGID";
ResultSet rsRepMgrDesig=ad.selectQuery(getRepMgrDesig);
while(rsRepMgrDesig.next())
{
LeaveForm leaveForm2=new LeaveForm();
leaveForm2.setApptype("Approver Manager");
leaveForm2.setApproverID(approverID);
reportMgrDesg=rsRepMgrDesig.getString("DSGSTXT");
reportingMgrName=rsRepMgrDesig.getString("EMP_FULLNAME");
leaveForm2.setAppDesig(reportMgrDesg);
leaveForm2.setApproverName(reportingMgrName);

approverList.add(leaveForm2);
}
rsRepMgrDesig.close();
request.setAttribute("appList", approverList);

	}

		}catch (Exception e) {
	e.printStackTrace();
}
	 
		//remarks

		String comments="select * from All_Request where Req_Id='"+reqId+"' and req_type='Cancel On Duty' ";
		ResultSet a=ad.selectQuery(comments);
		try {
			while(a.next())
			{
				pendAppForm.setRemark(a.getString("Comments"));
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if(true)
		{
			//Attendance

			SAPAttendenceDAO dao = new SAPAttendenceDAO();

			String month=reqyear+reqmon+"01";



			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			Date datenow = new Date();
			String time = sdf.format(datenow);

			String today[]=time.split("-");

			int datetoday=Integer.parseInt(today[2]);
			String monthtoday=today[1];
			String monName=monthtoday;

			if (monName.equals("01"))
				monName = "Jan";
			if (monName.equals("02"))
				monName = "Feb";
			if (monName.equals("03"))
				monName = "Mar";
			if (monName.equals("04"))
				monName = "Apr";
			if (monName.equals("05"))
				monName = "May";
			if (monName.equals("06"))
				monName = "Jun";
			if (monName.equals("07"))
				monName = "Jul";
			if (monName.equals("08"))
				monName = "Aug";
			if (monName.equals("09"))
				monName = "Sep";
			if (monName.equals("10"))
				monName = "Oct";
			if (monName.equals("11"))
				monName = "Nov";
			if (monName.equals("12"))
				monName = "Dec";



			LinkedList attDataList = new LinkedList();
			Calendar cal = Calendar.getInstance();



			String calendarmon=monName;
			String mon=month.substring(0, 3);
			String year = month.substring(month.length() - 4, month.length());

			/*
			 * String reqyear=month.substring(month.length()-2, month.length());
			 * String reqmonth=monName+reqyear; AttendenceForm attendenceForm = new
			 * AttendenceForm(); attendenceForm.setEmpcode(empNo);
			 * attendenceForm.setDat(reqmonth); AttendenceAction a4=new
			 * AttendenceAction(); if(monName.equalsIgnoreCase("Nov")) {
			 * a4.submit(mapping, attendenceForm, request, response); return
			 * mapping.findForward("display"); }
			 */




			if (monName.equals("Jan"))
				monName = "01";
			if (monName.equals("Feb"))
				monName = "02";
			if (monName.equals("Mar"))
				monName = "03";
			if (monName.equals("Apr"))
				monName = "04";
			if (monName.equals("May"))
				monName = "05";
			if (monName.equals("Jun"))
				monName = "06";
			if (monName.equals("Jul"))
				monName = "07";
			if (monName.equals("Aug"))
				monName = "08";
			if (monName.equals("Sep"))
				monName = "09";
			if (monName.equals("Oct"))
				monName = "10";
			if (monName.equals("Nov"))
				monName = "11";
			if (monName.equals("Dec"))
				monName = "12";

			String date ="";	




			ArrayList att = new ArrayList();

			cal.set(Integer.parseInt(year), Integer.parseInt(monName)-1, 1);
			int days = cal.getActualMaximum(Calendar.DAY_OF_MONTH);

			int i=1;
			/*    String query="EXEC daily_report_status_Att '"+days+"','"+monName+"','"+year+"','"+empNo+"' ";
			int k=ad.SqlExecuteUpdate(query);*/

				String s9 = " select date,convert(varchar(11),date,106) as date1,left(DATENAME(WEEKDAY,date),3) as day,left(In_time,5) as intime,left(out_time,5) as outtime,"
						+ "left(status,2) as instatus,right(status,2) as outstatus,shift from Report_Daily_wise,emp_official_info where emp_official_info.PERNR=Report_Daily_wise.Pernr and emp_official_info.LOCID=Report_Daily_wise.Location and  emp_official_info.Pernr='"+userid+"'  and year(date)='"+reqyear+"' "
								+ "and date between '"+reqstart1+"' and '"+reqend1+"' order by date";
				ResultSet rs9 = ad.selectQuery(s9);
				try {
					while(rs9.next())
					{
						
						SAPAttendenceForm help = new SAPAttendenceForm();
						help.setDate(rs9.getString("date1"));
						help.setDay(rs9.getString("day"));
						date=rs9.getString("date");
						
						if(!(rs9.getString("intime").equalsIgnoreCase("00:00") && rs9.getString("instatus").equalsIgnoreCase("AA")))
			    			help.setiNTIME(rs9.getString("intime"));


				    	if(!(rs9.getString("outtime").equalsIgnoreCase("00:00") && rs9.getString("outstatus").equalsIgnoreCase("AA")))
						help.setoUTTIME(rs9.getString("outtime"));

				    	if(monName.equalsIgnoreCase(monthtoday))
				    	{
			            if(datetoday>=i)
			            {
			            	help.setiNSTATUS(rs9.getString("instatus"));
			            	if(datetoday==i)
			            	{
			            		if(rs9.getString("outstatus").equalsIgnoreCase("AA"))
			            		{
			            			help.setoUTSTATUS("");
			            		}
			            		else
			            		{
			            			help.setoUTSTATUS(rs9.getString("outstatus"));
			            		}
			            	}
			            	else
			            	{
			            		help.setoUTSTATUS(rs9.getString("outstatus"));
			            	}
							
							
							switch(rs9.getString("shift")){
							case "0001": help.setShift("Gen(0001)");
							  break;
		case "0002": help.setShift("Gen(0002)");
							  break;
		case "0003": help.setShift("FS(0003)");
							  break;
		case "0004": help.setShift("SS(0004)");
							  break;
		case "0005": help.setShift("TS(0005)");
							  break;
		case "0006": help.setShift("SS1(0006)");
							  break;
		case "0007": help.setShift("FS(0007)");
							  break;
		case "0008": help.setShift("SS0008)");
							  break;
		case "0009": help.setShift("TS(0009)");
							  break;
		case "0010": help.setShift("NS(0010)");
							  break;
		case "0011": help.setShift("SS-SM(0011)");
							  break;
		case "0012": help.setShift("EnggB(0012)");
							  break;
		case "0013": help.setShift("EnggC(0013)");
							  break;
		case "0014": help.setShift("SecA(0014)");
							  break;
		case "0015": help.setShift("SecB(0015)");
							  break;
		case "0016": help.setShift("SecC(0016)");
							  break;
		case "0017": help.setShift("Gen(0017)");
							  break;
		case "0018": help.setShift("Night(0018)");
							  break;
		case "0019": help.setShift("Gen(0019)");
							  break;
		case "0020": help.setShift("Gen2(0020)");
							  break;
		case "0021": help.setShift("2ND(0021)");
							  break;
		case "0022": help.setShift("2ND1(0022)");
							  break;
		case "0023": help.setShift("EnggGen(0023)");
							  break;
		case "0024": help.setShift("EnggGen1(0024)");
							  break;
		case "0025": help.setShift("1ST(0025)");
							  break;
		case "0026": help.setShift("Engg2ND(0026)");
							  break;
		case "0027": help.setShift("3RD(0027)");
							  break;
		case "0028": help.setShift("QC1ST(0028)");
							  break;
		case "0030": help.setShift("Gen4(0030)");
							  break;
		case "0031": help.setShift("1ST(0031)");
							  break;
		case "0032": help.setShift("Gen(0032)");
							  break;
		case "0033": help.setShift("2ND(0033)");
							  break;
		case "0034": help.setShift("Night(0034)");
							  break;
		case "0035": help.setShift("GOASecA(0035)");
							  break;
		case "0036": help.setShift("GOASecB(0036)");
							  break;
		case "0037": help.setShift("GOASecC(0037)");
							  break;
		case "0038": help.setShift("Gen3(0038)");
							  break;
		case "0029": help.setShift("QC2ND(0029)");
							  break;
		case "0039": help.setShift("Gen1(0039)");
							  break;
		case "0040": help.setShift("Gen2(0040)");
							  break;
		case "0041": help.setShift("FS(0041)");
							  break;
		case "0042": help.setShift("SS(0042)");
							  break;
		case "0043": help.setShift("TS(0043)");
							  break;
		case "0054": help.setShift("Gen(0054)");
							  break;
		case "0055": help.setShift("1ST(0055)");
							  break;
		case "0056": help.setShift("2ND(0056)");
							  break;
		case "0057": help.setShift("Night(0057)");
							  break;
		case "0058": help.setShift("Gen5(0058)");
							  break;
		case "0059": help.setShift("Gen6(0059)");
							  break;
		case "0060": help.setShift("Gen(0060)");
							  break;
		case "0061": help.setShift("FS(0061)");
							  break;
		case "0062": help.setShift("SS(0062)");
							  break;
		case "0063": help.setShift("TS(0063)");
							  break;
		case "0064": help.setShift("Night(0064)");
							  break;
		case "0065": help.setShift("Gen(0065)");
							  break;
		case "0066": help.setShift("SSQC(0066)");
							  break;
		case "0067": help.setShift("FS(0067)");
							  break;
		case "0069": help.setShift("Gen(0069)");
							  break;
		case "0070": help.setShift("Gen2(0070)");
							  break;
		case "0071": help.setShift("Gen3(0071)");
							  break;
		case "0072": help.setShift("QC2ND1(0072)");
							  break;
		case "0074": help.setShift("EnggA(0074)");
							  break;
		case "0075": help.setShift("EnggD(0075)");
							  break;
		case "0044": help.setShift("FS1(0044)");
							  break;
		case "0045": help.setShift("FS2(0045)");
							  break;
		case "0046": help.setShift("Gen1(0046)");
							  break;
		case "0047": help.setShift("Gen2(0047)");
							  break;
		case "0048": help.setShift("SS(0048)");
							  break;
		case "0049": help.setShift("3RD(0049)");
							  break;
		case "0050": help.setShift("Gen(0050)");
							  break;
		case "0051": help.setShift("FS(0051)");
							  break;
		case "0052": help.setShift("SS(0052)");
							  break;
		case "0053": help.setShift("TS(0053)");
							  break;
		case "0068": help.setShift("Gen(0068)");
							  break;
		case "0073": help.setShift("QcNig(0073)");
							  break;
		case "0087": help.setShift("Gen(0087)");
		  break;
case "0088": help.setShift("RD(0088)");
		  break;
case "0089": help.setShift("Sec(0089)");
		  break;
							  
}
						


					
			                	
			            }
			            else
				    	{
				    		
			            	help.setiNSTATUS("");
							help.setoUTSTATUS("");	
			                  
				    	}
			            
			    	}
				    	else
				    	{
				    		
				    		help.setiNSTATUS(rs9.getString("instatus"));
							help.setoUTSTATUS(rs9.getString("outstatus"));
							
							switch(rs9.getString("shift")){
							case "0001": help.setShift("Gen(0001)");
							  break;
		case "0002": help.setShift("Gen(0002)");
							  break;
		case "0003": help.setShift("FS(0003)");
							  break;
		case "0004": help.setShift("SS(0004)");
							  break;
		case "0005": help.setShift("TS(0005)");
							  break;
		case "0006": help.setShift("SS1(0006)");
							  break;
		case "0007": help.setShift("FS(0007)");
							  break;
		case "0008": help.setShift("SS0008)");
							  break;
		case "0009": help.setShift("TS(0009)");
							  break;
		case "0010": help.setShift("NS(0010)");
							  break;
		case "0011": help.setShift("SS-SM(0011)");
							  break;
		case "0012": help.setShift("EnggB(0012)");
							  break;
		case "0013": help.setShift("EnggC(0013)");
							  break;
		case "0014": help.setShift("SecA(0014)");
							  break;
		case "0015": help.setShift("SecB(0015)");
							  break;
		case "0016": help.setShift("SecC(0016)");
							  break;
		case "0017": help.setShift("Gen(0017)");
							  break;
		case "0018": help.setShift("Night(0018)");
							  break;
		case "0019": help.setShift("Gen(0019)");
							  break;
		case "0020": help.setShift("Gen2(0020)");
							  break;
		case "0021": help.setShift("2ND(0021)");
							  break;
		case "0022": help.setShift("2ND1(0022)");
							  break;
		case "0023": help.setShift("EnggGen(0023)");
							  break;
		case "0024": help.setShift("EnggGen1(0024)");
							  break;
		case "0025": help.setShift("1ST(0025)");
							  break;
		case "0026": help.setShift("Engg2ND(0026)");
							  break;
		case "0027": help.setShift("3RD(0027)");
							  break;
		case "0028": help.setShift("QC1ST(0028)");
							  break;
		case "0030": help.setShift("Gen4(0030)");
							  break;
		case "0031": help.setShift("1ST(0031)");
							  break;
		case "0032": help.setShift("Gen(0032)");
							  break;
		case "0033": help.setShift("2ND(0033)");
							  break;
		case "0034": help.setShift("Night(0034)");
							  break;
		case "0035": help.setShift("GOASecA(0035)");
							  break;
		case "0036": help.setShift("GOASecB(0036)");
							  break;
		case "0037": help.setShift("GOASecC(0037)");
							  break;
		case "0038": help.setShift("Gen3(0038)");
							  break;
		case "0029": help.setShift("QC2ND(0029)");
							  break;
		case "0039": help.setShift("Gen1(0039)");
							  break;
		case "0040": help.setShift("Gen2(0040)");
							  break;
		case "0041": help.setShift("FS(0041)");
							  break;
		case "0042": help.setShift("SS(0042)");
							  break;
		case "0043": help.setShift("TS(0043)");
							  break;
		case "0054": help.setShift("Gen(0054)");
							  break;
		case "0055": help.setShift("1ST(0055)");
							  break;
		case "0056": help.setShift("2ND(0056)");
							  break;
		case "0057": help.setShift("Night(0057)");
							  break;
		case "0058": help.setShift("Gen5(0058)");
							  break;
		case "0059": help.setShift("Gen6(0059)");
							  break;
		case "0060": help.setShift("Gen(0060)");
							  break;
		case "0061": help.setShift("FS(0061)");
							  break;
		case "0062": help.setShift("SS(0062)");
							  break;
		case "0063": help.setShift("TS(0063)");
							  break;
		case "0064": help.setShift("Night(0064)");
							  break;
		case "0065": help.setShift("Gen(0065)");
							  break;
		case "0066": help.setShift("SSQC(0066)");
							  break;
		case "0067": help.setShift("FS(0067)");
							  break;
		case "0069": help.setShift("Gen(0069)");
							  break;
		case "0070": help.setShift("Gen2(0070)");
							  break;
		case "0071": help.setShift("Gen3(0071)");
							  break;
		case "0072": help.setShift("QC2ND1(0072)");
							  break;
		case "0074": help.setShift("EnggA(0074)");
							  break;
		case "0075": help.setShift("EnggD(0075)");
							  break;
		case "0044": help.setShift("FS1(0044)");
							  break;
		case "0045": help.setShift("FS2(0045)");
							  break;
		case "0046": help.setShift("Gen1(0046)");
							  break;
		case "0047": help.setShift("Gen2(0047)");
							  break;
		case "0048": help.setShift("SS(0048)");
							  break;
		case "0049": help.setShift("3RD(0049)");
							  break;
		case "0050": help.setShift("Gen(0050)");
							  break;
		case "0051": help.setShift("FS(0051)");
							  break;
		case "0052": help.setShift("SS(0052)");
							  break;
		case "0053": help.setShift("TS(0053)");
							  break;
		case "0068": help.setShift("Gen(0068)");
							  break;
		case "0073": help.setShift("QcNig(0073)");
							  break;
							  
		case "0087": help.setShift("Gen(0087)");
		  break;
case "0088": help.setShift("RD(0088)");
		  break;
case "0089": help.setShift("Sec(0089)");
		  break;
}
						            
				    	}
					   

				    	String data = "select Approvel_Status,reason from leave_details where  user_id='"
								+ userid
								+ "' and Approvel_Status in('Approved','Pending') and record_status!='Draft'  and '"
								+  date 
								+ "' between start_date and  end_date and YEAR(start_date)='"
								+ year + "'";
						ResultSet rs10 = ad.selectQuery(data);
						while (rs10.next()) {
							if (rs10.getString("Approvel_Status").equalsIgnoreCase(
									"Approved"))
								help.setRemarks(rs10.getString("reason"));
							else
								help.setRemarks("Leave to be Approved");
						}
						rs10.close();

						String data1 = "select Approver_Status,reason from OnDuty_details where  user_id='"
								+userid
								+ "' and Approver_Status in('Approved','In Process') and '"
								+ date
								+ "' between start_date and  end_date  and YEAR(start_date)='"
								+ year + "'";
						ResultSet rs101 = ad.selectQuery(data1);
						while (rs101.next()) {
							if (rs101.getString("Approver_Status")
									.equalsIgnoreCase("Approved"))
								help.setRemarks(rs101.getString("reason"));
							else
								help.setRemarks("Onduty to be Approved");
							
						} 

						rs101.close();
						



						String data11 = "select * from holidays where date = '"+date+"' and location = '"+user.getPlantId()+"' ";

						ResultSet rs1011 = ad.selectQuery(data11);
						try {
							while (rs1011.next()) {

									help.setRemarks(rs1011.getString("Holiday_Name"));
									help.setMessage("HOL");
									

							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						rs1011.close();
						

					i++;
					
					attDataList.add(help);
					}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs9.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				if (attDataList.size() > 0) {
					request.setAttribute("attDataList", attDataList);
				}
}
		
		else
		{

			//Attendance

			SAPAttendenceDAO dao = new SAPAttendenceDAO();
			try
					{
			connectSAP();
			JCoDestination destination = JCoDestinationManager
					.getDestination(DESTINATION);// TODO change to real
													// destination
			if (destination == null) {

				destination = JCoDestinationManager
						.getDestination(DESTINATION);// TODO change to
														// real
														// destination
				if (destination == null) {
					throw new RuntimeException(
							"Could not connect to SAP, destination not found.");
				}
			}

			String month=reqyear+reqmon+"01";
			JCoFunction function = null;
			String pay="";
			String getPayGroup = "Select PAY_GROUP from emp_official_info where PERNR='"
					+ user.getEmployeeNo() + "'";
			ResultSet rsPayGroup = ad.selectQuery(getPayGroup);
			try {
				while (rsPayGroup.next()) {
					pay=rsPayGroup.getString("PAY_GROUP");
				}
			} catch (Exception e) {
				e.printStackTrace();
			}


			function = destination.getRepository().getFunction(
					"ZBAPI_HR_ATTENDANCE");
			if (function == null) {
				throw new RuntimeException(
						" ZBAPI_HR_ATTENDANCE not found in SAP.");// ZBAPI_HR_PAYSLIP
			}
			function.getImportParameterList().setValue("PAYGROUP",pay);
			function.getImportParameterList().setValue("PERNR", user.getEmployeeNo());
			function.getImportParameterList().setValue("MONTH", month);

			function.execute(destination);
			LinkedList attdList = new LinkedList();
			JCoTable returnTable = function.getTableParameterList()
					.getTable("ATTNDATA");// PAYDATA_D_H
			Map<Integer, Character> returnMap = new HashMap<Integer, Character>();
			if (returnTable.getNumRows() > 0) {
				returnTable.firstRow();
				do {
					String reqDate = convertDate(returnTable
							.getDate("BEGDA"));
					String inTime = returnTable.getTime("INTIME")
							.toString();
					String a1[] = inTime.split(" ");
					if (a1.length == 6)
						inTime = a1[3];
					String outTime = returnTable.getTime("OUTTIME")
							.toString();
					String b1[] = outTime.split(" ");
					if (b1.length == 6)
						outTime = b1[3];

					SAPAttendenceForm attData = new SAPAttendenceForm();
					attData.setDate(reqDate);
					attData.setiNTIME(returnTable.getString("INTIME"));
					attData.setiNSTATUS(returnTable.getString("INSTATUS"));
					attData.setoUTTIME(returnTable.getString("OUTTIME"));
					attData.setoUTSTATUS(returnTable.getString("OUTSTATUS"));
					attdList.add(attData);

				} while (returnTable.nextRow());

				String deleteRecords = "delete from SAP_Attendence where PERNR='"
						+ user.getEmployeeNo() + "'  ";
				ad.SqlExecuteUpdate(deleteRecords);

				dao.updateAttendenceDetails(attdList, user.getEmployeeNo());

			}

			if (returnTable.getNumRows() == 0) {

				JCoTable returnStatus = function.getTableParameterList()
						.getTable("RETURN");
				if (returnStatus.getNumRows() > 0) {
					char c = returnStatus.getChar("TYPE");
					if (c == 'E') {
						pendAppForm.setMessage(returnStatus
								.getString("MESSAGE"));
					}
				}

			}

					}catch (Exception e) {
						e.printStackTrace();
					}

			//DATA SET

			LinkedList attDataList = new LinkedList();
			String getAttendence = "select convert(varchar(11),s.[BEGDA],106) as date,BEGDA as rdate,DATENAME(WEEKDAY,S.[BEGDA]) as day,convert(varchar(5),s.[INTIME],"
					+ "106) as INTIME,s.INSTATUS,convert(varchar(5),s.[OUTTIME],106) as OUTTIME,s.OUTSTATUS,(SELECT Holiday_Name FROM holidays WHERE Location='"
					+ user.getPlantId()
					+ "' "
					+ "AND convert(varchar(11),s.[BEGDA],103)=convert(varchar(11),Date,103) ) as holiday from SAP_Attendence as s where s.PERNR='"
					+ user.getEmployeeNo()
					+ "' and"
					+ " MONTH(s.[BEGDA])='"
					+ reqmon
					+ "' and BEGDA between '"+reqstart1+"' and '"+reqend1+"' order by date";
			ResultSet rsAttend = ad.selectQuery(getAttendence);

			try {
				while (rsAttend.next()) {	
					SAPAttendenceForm attData = new SAPAttendenceForm();
				Date today = new Date();
				String date = today.toString();
				String b[] = date.split(" ");
				date = b[2] + " " + b[1] + " " + b[5];
				attData.setDate(rsAttend.getString("date"));
				attData.setDay(rsAttend.getString("day").substring(0, 3));
				
				/* if(!rsAttend.getString("INSTATUS").equalsIgnoreCase("")) 
						attData.setiNTIME(rsAttend.getString("INTIME"));
				if (!(rsAttend.getString("INSTATUS").equalsIgnoreCase("PP")|| rsAttend.getString("INSTATUS").equalsIgnoreCase("AA")|| rsAttend.getString("INSTATUS").equalsIgnoreCase("TI") || rsAttend.getString("INSTATUS").equalsIgnoreCase("TO")))
					attData.setiNTIME(rsAttend.getString("INSTATUS"));	
				if((rsAttend.getString("INSTATUS").equalsIgnoreCase("PP")|| rsAttend.getString("INSTATUS").equalsIgnoreCase("AA")|| rsAttend.getString("INSTATUS").equalsIgnoreCase("TI") || rsAttend.getString("INSTATUS").equalsIgnoreCase("TO")))
					attData.setiNTIME(rsAttend.getString("INTIME"));*/
				attData.setiNSTATUS(rsAttend.getString("INSTATUS"));	
				attData.setiNTIME(rsAttend.getString("INTIME"));	
				attData.setoUTTIME(rsAttend.getString("OUTTIME"));
				attData.setoUTSTATUS(rsAttend.getString("OUTSTATUS"));
				
				/* if(!rsAttend.getString("OUTSTATUS").equalsIgnoreCase("")) 
						attData.setoUTTIME(rsAttend.getString("OUTTIME"));
				
				if (!(rsAttend.getString("OUTSTATUS")
						.equalsIgnoreCase("PP")
						|| rsAttend.getString("OUTSTATUS")
								.equalsIgnoreCase("AA")
						|| rsAttend.getString("OUTSTATUS")
								.equalsIgnoreCase("TI") || rsAttend
						.getString("OUTSTATUS").equalsIgnoreCase("TO")))
					attData.setoUTTIME(rsAttend.getString("OUTSTATUS"));
				if((rsAttend.getString("OUTSTATUS")
						.equalsIgnoreCase("PP")
						|| rsAttend.getString("OUTSTATUS")
								.equalsIgnoreCase("AA")
						|| rsAttend.getString("OUTSTATUS")
								.equalsIgnoreCase("TI") || rsAttend
						.getString("OUTSTATUS").equalsIgnoreCase("TO")))
					attData.setoUTTIME(rsAttend.getString("OUTTIME"));
				*/

				String remark = rsAttend.getString("holiday");
				if (remark != null) {
					attData.setRemarks(remark);
					attData.setMessage("HOL");
				}

				String data = "select * from leave_details where  user_id='"
						+ user.getEmployeeNo()
						+ "' and Approvel_Status in('Approved','Pending') and record_status!='Draft'  and '"
						+ rsAttend.getString("rdate")
						+ "' between start_date and  end_date and YEAR(start_date)='"
						+ reqyear + "'";
				ResultSet rs10 = ad.selectQuery(data);
				while (rs10.next()) {
					if (rs10.getString("Approvel_Status").equalsIgnoreCase(
							"Approved"))
						attData.setRemarks(rs10.getString("reason"));
					else
						attData.setRemarks("Leave to be Approved");
				}

				String data1 = "select * from OnDuty_details where  user_id='"
						+  user.getEmployeeNo()
						+ "' and Approver_Status in('Approved','In Process') and '"
						+ rsAttend.getString("rdate")
						+ "' between start_date and  end_date  and YEAR(start_date)='"
						+ reqyear + "'";
				ResultSet rs101 = ad.selectQuery(data1);
				while (rs101.next()) {
					if (rs101.getString("Approver_Status")
							.equalsIgnoreCase("Approved"))
						attData.setRemarks(rs101.getString("reason"));
					else
						attData.setRemarks("Onduty to be Approved");
				}
				
				//chk whether he can apply
				
			
				
				attDataList.add(attData);
				}
				if (attDataList.size() > 0) {
					request.setAttribute("attDataList", attDataList);
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		
			
		}
        request.setAttribute("cancelbutton", "cancelbutton");
        try {
			a.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return mapping.findForward("displayondutycancelRequest");
		
}
	
	
	public ActionForward searchForApprovers(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		HttpSession session = request.getSession();
		UserInfo user = (UserInfo) session.getAttribute("user");

		String sTxt = request.getParameter("searchText");
		String reqFieldName = request.getParameter("reqFieldName");
		HRApprovalForm f = (HRApprovalForm) form;

		f.setSearchText(sTxt);
		MailInboxAction mAction = new MailInboxAction();
		LinkedList searchList = new LinkedList();
		try {
			
			

			String searchQuery="select dpt.DPTSTXT,* from emp_official_info as emp,DEPARTMENT as dpt where dpt.DPTID=emp.DPTID and (EMP_FULLNAME like '%"+sTxt+"%' or EMAIL_ID like '%"+sTxt+"%' or PERNR like'%"+sTxt+"%')";
			ResultSet rs=ad.selectQuery(searchQuery);
		 int i=1;
			while(rs.next()) {
				
				ESSApproverForm emp=new ESSApproverForm();
				emp.setEmp(rs.getString("EMP_FULLNAME"));
				emp.setEmployeeNo(rs.getString("PERNR"));
				emp.setDepartment(rs.getString("DPTSTXT"));
				emp.setReqFieldName(reqFieldName);
			   searchList.add(emp);
			   if(i==100)
				  {
					  break;
				  }
			i++;
			}
			
			rs.close();
			if(searchList.size()==0)
			{
			String a[]=null;		
			String actualtext="";
	        if(sTxt.contains(" "))
	        {
	        	a=sTxt.split(" ");
	        
			 for(int h=0;h<a.length;h++)
	        {
	             if(!a[h].equalsIgnoreCase(""))
				 actualtext=actualtext+"EMP_FULLNAME like '%"+a[h]+"%' or EMAIL_ID like '%"+a[h]+"%' or PERNR like'%"+a[h]+"%' or ";
	        }
			 
			 
			 actualtext=actualtext.substring(0, actualtext.length()-3);
			
			 
	        }
	        
	        else
	        {
	        	actualtext="EMP_FULLNAME like '%"+sTxt+"%' or EMAIL_ID like '%"+sTxt+"%' or PERNR like'%"+sTxt+"%'";
	        }
	        
	       
	      
			String searchQuery1="select dpt.DPTSTXT,* from emp_official_info as emp,DEPARTMENT as dpt where dpt.DPTID=emp.DPTID and"
					+ " ("+actualtext+") "
							+ "and Active=1";
			ResultSet rs1=ad.selectQuery(searchQuery1);
		 int i1=1;
			while(rs1.next()) {
				
				ESSApproverForm emp=new ESSApproverForm();
				emp.setEmp(rs1.getString("EMP_FULLNAME"));
				emp.setEmployeeNo(rs1.getString("PERNR"));
				emp.setDepartment(rs1.getString("DPTSTXT"));
				emp.setReqFieldName(reqFieldName);
			   searchList.add(emp);
			   if(i1==100)
				  {
					  break;
				  }
			i1++;
			}
			rs1.close();
			}
		}

		catch (SQLException sqle) {
			System.out.println("SQLException @ searching User Details");
			sqle.printStackTrace();
		}

		request.setAttribute("SearchUserDetails", searchList);

		return mapping.findForward("searchemployee");
	}
	
	public ActionForward cancelOTRequest(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		

		HRApprovalForm leaveForm=(HRApprovalForm)form;
		NewsandMediaDao ad=new NewsandMediaDao();
		
		int requestNo=Integer.parseInt(request.getParameter("ReqNo"));
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		if(user == null)
		{
			leaveForm.setMessage("Session Expried! Try to Login again!");
			return mapping.findForward("displaycancelRequest");
		}
		String reqType=leaveForm.getReqRequstType();
		leaveForm.setReqRequstType(reqType);
		String status=leaveForm.getSelectedFilter();
		String reqestType=request.getParameter("ReqType");
		String apprstatus=request.getParameter("status");
		
		try{
			Date dNow = new Date( );
			 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS ");
		String dateNow = ft.format(dNow);
	
		if(apprstatus.equalsIgnoreCase("Cancel OT"))
		{
		String modifyRequest=" update  All_Request set Actual_Approver_status='Cancelled',Last_Approver=Pending_Approver,Pending_Approver='',Req_Status='Cancelled',Actual_Approved_Date='"+dateNow+"',Actual_Approver='"+user.getEmployeeNo()+"',Actual_Approved_Comments='"+leaveForm.getComments()+"' where Req_Type='Cancel OT' and Req_Id='"+requestNo+"'";	
		int statsChange=ad.SqlExecuteUpdate(modifyRequest);
		if(statsChange>0){
			leaveForm.setMessage2("Request has been cancelled successfully");
			String updateOnduty="update over_time_details set ApprvrStatus='Cancelled',Last_Approver='"+Empname(user.getEmployeeNo())+"',Pending_Approver='',apprvddate='"+dateNow+"',cancelflag='2' where Req_no='"+requestNo+"'";
			int ii=ad.SqlExecuteUpdate(updateOnduty);
		}
		}
		else
		{
			String modifyRequest=" update  All_Request set Actual_Approver_status='Rejected',Last_Approver=Pending_Approver,Pending_Approver='',Req_Status='Rejected',Actual_Approved_Date='"+dateNow+"',Actual_Approver='"+user.getEmployeeNo()+"',Actual_Approved_Comments='"+leaveForm.getComments()+"' where Req_Type='Cancel OT' and Req_Id='"+requestNo+"'";	
			int statsChange=ad.SqlExecuteUpdate(modifyRequest);
			if(statsChange>0){
				leaveForm.setMessage2("Request has been rejected successfully");
				String updateOnduty="update over_time_details set ApprvrStatus='HR Rejected',Last_Approver='"+Empname(user.getEmployeeNo())+"',Pending_Approver='',apprvddate='"+dateNow+"',cancelflag='3' where Req_no='"+requestNo+"'";
				int ii=ad.SqlExecuteUpdate(updateOnduty);
			}	
		}
	
		}catch (Exception e) {
			e.printStackTrace();
		}
		
		String reqmon="";
		String reqyear="";
		String reqstart="";
		String reqend="";
		String empcode="";
		String reqmonname="";
		String reqstart1="";
		String reqend1="";

		int j = 1;
		int reqby = 0;
		LinkedList comp = new LinkedList();
		 status = "";
		int requesterNo = requestNo;

		String getcomoff = "select right(left(convert(varchar(11),c.FromDate,106) ,6),3)as monname,day(c.FromDate) as startday,day(c.ToDate) as enday,right('0' + rtrim(month(c.FromDate)),2) as mon,YEAR(c.FromDate) as year,c.*,e.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT from OVER_TIME_DETAILS c,emp_official_info e,DEPARTMENT dept,DESIGNATION desg where Req_no='"
				+ requesterNo
				+ "' and e.PERNR=c.Pernr and dept.DPTID=e.DPTID and desg.DSGID=e.DSGID";
		ResultSet a = ad.selectQuery(getcomoff);

		try {
			while (a.next()) {
				LeaveForm l = new LeaveForm();
				reqmonname=a.getString("monname");
				reqmon=a.getString("mon");
				reqyear=a.getString("year");
				leaveForm.setStatus(a.getString("cancelflag"));
				leaveForm.setEmployeeNo(a.getString("EMP_FULLNAME"));
				reqmon=a.getString("mon");
				reqyear=a.getString("year");
				leaveForm.setStartDate(EMicroUtils.display(a
						.getDate("FromDate")));
				leaveForm
						.setEndDate(EMicroUtils.display(a.getDate("ToDate")));
				leaveForm.setReason(a.getString("Reason"));
				status = a.getString("ApprvrStatus");
				reqby = a.getInt("RequestedBy");
				reqstart1=display1(a.getDate("FromDate"));
				reqstart=a.getString("FromDate");
				reqend1=display1(a.getDate("ToDate"));
				reqend=a.getString("ToDate");
				l.setSlmindur(j);
				l.setEmployeeNumber(Integer.toString(a.getInt("Pernr")));
				l.setEmployeeName(a.getString("EMP_FULLNAME"));
				l.setDepartment(a.getString("DPTSTXT"));
				l.setDesignation(a.getString("DSGSTXT"));
				l.setNofhrs(a.getString("NoHRS"));

				++j;
				comp.add(l);

			}
		} catch (SQLException e) {

			e.printStackTrace();
		}
		request.setAttribute("comp", comp);


		// plant
		String app = "";
		// PLANT HEAD



		if (status.equalsIgnoreCase("Pending")) {
			app = "select a.*,e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from All_Request a,emp_official_info e,DEPARTMENT dep,DESIGNATION desg where Req_Type='OverTime' and a.Req_Id='"
					+ requesterNo
					+ "' and e.PERNR=a.Pending_Approver and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID "
					+ "union "
					 +"select a.*,e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from All_Request a,emp_official_info e,DEPARTMENT dep,DESIGNATION desg where Req_Type='OverTime' and a.Req_Id='"
						+ requesterNo
						+ "' and e.PERNR=a.Actual_Approver and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID ";

		} else {
			app = "select a.*,e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from All_Request a,emp_official_info e,DEPARTMENT dep,DESIGNATION desg where  Req_Type='OverTime' and a.Req_Id='"
					+ requesterNo
					+ "' and e.PERNR=a.Actual_Approver and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID ";
				

		}
		List appList = new LinkedList();
		ResultSet rsAppr = ad.selectQuery(app);
		String duplicate="";
		try {
			while (rsAppr.next()) {
				ApprovalsForm appr = new ApprovalsForm();
				appr.setApprover(rsAppr.getString("EMP_FULLNAME"));
				appr.setDesignation(rsAppr.getString("DSGSTXT"));
				appr.setApproveStatus(rsAppr.getString("Req_Status"));
				String approvaStatus = rsAppr.getString("Req_Status");
				if (approvaStatus.equals("Pending")) {
					appr.setApproveDate("");
					appr.setComments("");
				}
				if (approvaStatus.equals("Approved")
						|| approvaStatus.equals("Completed")) {
					appr.setApproveDate(rsAppr.getString("approved_date"));
					appr.setComments(rsAppr.getString("Comments"));
				}
				if (approvaStatus.equals("Rejected")
						|| approvaStatus.equals("Cancelled")) {
					appr.setApproveDate(rsAppr.getString("rejected_date"));
					appr.setComments(rsAppr.getString("Comments"));
				}

				
				if(!duplicate.equalsIgnoreCase(rsAppr.getString("approved_date")))
				appList.add(appr);
				duplicate=rsAppr.getString("approved_date");
			}
			request.setAttribute("appList", appList);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		//remarks

		String comments="select * from All_Request where Req_Id='"+requestNo+"' and req_type='Cancel OT' ";
		ResultSet a1=ad.selectQuery(comments);
		try {
			while(a1.next())
			{
				leaveForm.setRemark(a1.getString("Comments"));
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if(true)
		{
			//Attendance

			SAPAttendenceDAO dao = new SAPAttendenceDAO();

			String month=reqyear+reqmon+"01";



			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			Date datenow = new Date();
			String time = sdf.format(datenow);

			String today[]=time.split("-");

			int datetoday=Integer.parseInt(today[2]);
			String monthtoday=today[1];
			String monName=monthtoday;

			if (monName.equals("01"))
				monName = "Jan";
			if (monName.equals("02"))
				monName = "Feb";
			if (monName.equals("03"))
				monName = "Mar";
			if (monName.equals("04"))
				monName = "Apr";
			if (monName.equals("05"))
				monName = "May";
			if (monName.equals("06"))
				monName = "Jun";
			if (monName.equals("07"))
				monName = "Jul";
			if (monName.equals("08"))
				monName = "Aug";
			if (monName.equals("09"))
				monName = "Sep";
			if (monName.equals("10"))
				monName = "Oct";
			if (monName.equals("11"))
				monName = "Nov";
			if (monName.equals("12"))
				monName = "Dec";



			LinkedList attDataList = new LinkedList();
			Calendar cal = Calendar.getInstance();



			String calendarmon=monName;
			String mon=month.substring(0, 3);
			String year = month.substring(month.length() - 4, month.length());

			/*
			 * String reqyear=month.substring(month.length()-2, month.length());
			 * String reqmonth=monName+reqyear; AttendenceForm attendenceForm = new
			 * AttendenceForm(); attendenceForm.setEmpcode(empNo);
			 * attendenceForm.setDat(reqmonth); AttendenceAction a4=new
			 * AttendenceAction(); if(monName.equalsIgnoreCase("Nov")) {
			 * a4.submit(mapping, attendenceForm, request, response); return
			 * mapping.findForward("display"); }
			 */




			if (monName.equals("Jan"))
				monName = "01";
			if (monName.equals("Feb"))
				monName = "02";
			if (monName.equals("Mar"))
				monName = "03";
			if (monName.equals("Apr"))
				monName = "04";
			if (monName.equals("May"))
				monName = "05";
			if (monName.equals("Jun"))
				monName = "06";
			if (monName.equals("Jul"))
				monName = "07";
			if (monName.equals("Aug"))
				monName = "08";
			if (monName.equals("Sep"))
				monName = "09";
			if (monName.equals("Oct"))
				monName = "10";
			if (monName.equals("Nov"))
				monName = "11";
			if (monName.equals("Dec"))
				monName = "12";

			String date ="";	




			ArrayList att = new ArrayList();

			cal.set(Integer.parseInt(year), Integer.parseInt(monName)-1, 1);
			int days = cal.getActualMaximum(Calendar.DAY_OF_MONTH);

			int i=1;
			/*    String query="EXEC daily_report_status_Att '"+days+"','"+monName+"','"+year+"','"+empNo+"' ";
			int k=ad.SqlExecuteUpdate(query);*/

				String s9 = " select date,convert(varchar(11),date,106) as date1,left(DATENAME(WEEKDAY,date),3) as day,left(In_time,5) as intime,left(out_time,5) as outtime,"
						+ "left(status,2) as instatus,right(status,2) as outstatus,shift from Report_Daily_wise,emp_official_info where emp_official_info.PERNR=Report_Daily_wise.Pernr and emp_official_info.LOCID=Report_Daily_wise.Location and  emp_official_info.Pernr='"+empcode+"'  and year(date)='"+reqyear+"' "
								+ "and date between '"+reqstart1+"' and '"+reqend1+"' order by date";
				ResultSet rs9 = ad.selectQuery(s9);
				try {
					while(rs9.next())
					{
						
						SAPAttendenceForm help = new SAPAttendenceForm();
						help.setDate(rs9.getString("date1"));
						help.setDay(rs9.getString("day"));
						date=rs9.getString("date");
						
						if(!(rs9.getString("intime").equalsIgnoreCase("00:00") && rs9.getString("instatus").equalsIgnoreCase("AA")))
			    			help.setiNTIME(rs9.getString("intime"));


				    	if(!(rs9.getString("outtime").equalsIgnoreCase("00:00") && rs9.getString("outstatus").equalsIgnoreCase("AA")))
						help.setoUTTIME(rs9.getString("outtime"));

				    	if(monName.equalsIgnoreCase(monthtoday))
				    	{
			            if(datetoday>=i)
			            {
			            	help.setiNSTATUS(rs9.getString("instatus"));
			            	if(datetoday==i)
			            	{
			            		if(rs9.getString("outstatus").equalsIgnoreCase("AA"))
			            		{
			            			help.setoUTSTATUS("");
			            		}
			            		else
			            		{
			            			help.setoUTSTATUS(rs9.getString("outstatus"));
			            		}
			            	}
			            	else
			            	{
			            		help.setoUTSTATUS(rs9.getString("outstatus"));
			            	}
							
							
							switch(rs9.getString("shift")){
							case "0001": help.setShift("Gen(0001)");
							  break;
		case "0002": help.setShift("Gen(0002)");
							  break;
		case "0003": help.setShift("FS(0003)");
							  break;
		case "0004": help.setShift("SS(0004)");
							  break;
		case "0005": help.setShift("TS(0005)");
							  break;
		case "0006": help.setShift("SS1(0006)");
							  break;
		case "0007": help.setShift("FS(0007)");
							  break;
		case "0008": help.setShift("SS0008)");
							  break;
		case "0009": help.setShift("TS(0009)");
							  break;
		case "0010": help.setShift("NS(0010)");
							  break;
		case "0011": help.setShift("SS-SM(0011)");
							  break;
		case "0012": help.setShift("EnggB(0012)");
							  break;
		case "0013": help.setShift("EnggC(0013)");
							  break;
		case "0014": help.setShift("SecA(0014)");
							  break;
		case "0015": help.setShift("SecB(0015)");
							  break;
		case "0016": help.setShift("SecC(0016)");
							  break;
		case "0017": help.setShift("Gen(0017)");
							  break;
		case "0018": help.setShift("Night(0018)");
							  break;
		case "0019": help.setShift("Gen(0019)");
							  break;
		case "0020": help.setShift("Gen2(0020)");
							  break;
		case "0021": help.setShift("2ND(0021)");
							  break;
		case "0022": help.setShift("2ND1(0022)");
							  break;
		case "0023": help.setShift("EnggGen(0023)");
							  break;
		case "0024": help.setShift("EnggGen1(0024)");
							  break;
		case "0025": help.setShift("1ST(0025)");
							  break;
		case "0026": help.setShift("Engg2ND(0026)");
							  break;
		case "0027": help.setShift("3RD(0027)");
							  break;
		case "0028": help.setShift("QC1ST(0028)");
							  break;
		case "0030": help.setShift("Gen4(0030)");
							  break;
		case "0031": help.setShift("1ST(0031)");
							  break;
		case "0032": help.setShift("Gen(0032)");
							  break;
		case "0033": help.setShift("2ND(0033)");
							  break;
		case "0034": help.setShift("Night(0034)");
							  break;
		case "0035": help.setShift("GOASecA(0035)");
							  break;
		case "0036": help.setShift("GOASecB(0036)");
							  break;
		case "0037": help.setShift("GOASecC(0037)");
							  break;
		case "0038": help.setShift("Gen3(0038)");
							  break;
		case "0029": help.setShift("QC2ND(0029)");
							  break;
		case "0039": help.setShift("Gen1(0039)");
							  break;
		case "0040": help.setShift("Gen2(0040)");
							  break;
		case "0041": help.setShift("FS(0041)");
							  break;
		case "0042": help.setShift("SS(0042)");
							  break;
		case "0043": help.setShift("TS(0043)");
							  break;
		case "0054": help.setShift("Gen(0054)");
							  break;
		case "0055": help.setShift("1ST(0055)");
							  break;
		case "0056": help.setShift("2ND(0056)");
							  break;
		case "0057": help.setShift("Night(0057)");
							  break;
		case "0058": help.setShift("Gen5(0058)");
							  break;
		case "0059": help.setShift("Gen6(0059)");
							  break;
		case "0060": help.setShift("Gen(0060)");
							  break;
		case "0061": help.setShift("FS(0061)");
							  break;
		case "0062": help.setShift("SS(0062)");
							  break;
		case "0063": help.setShift("TS(0063)");
							  break;
		case "0064": help.setShift("Night(0064)");
							  break;
		case "0065": help.setShift("Gen(0065)");
							  break;
		case "0066": help.setShift("SSQC(0066)");
							  break;
		case "0067": help.setShift("FS(0067)");
							  break;
		case "0069": help.setShift("Gen(0069)");
							  break;
		case "0070": help.setShift("Gen2(0070)");
							  break;
		case "0071": help.setShift("Gen3(0071)");
							  break;
		case "0072": help.setShift("QC2ND1(0072)");
							  break;
		case "0074": help.setShift("EnggA(0074)");
							  break;
		case "0075": help.setShift("EnggD(0075)");
							  break;
		case "0044": help.setShift("FS1(0044)");
							  break;
		case "0045": help.setShift("FS2(0045)");
							  break;
		case "0046": help.setShift("Gen1(0046)");
							  break;
		case "0047": help.setShift("Gen2(0047)");
							  break;
		case "0048": help.setShift("SS(0048)");
							  break;
		case "0049": help.setShift("3RD(0049)");
							  break;
		case "0050": help.setShift("Gen(0050)");
							  break;
		case "0051": help.setShift("FS(0051)");
							  break;
		case "0052": help.setShift("SS(0052)");
							  break;
		case "0053": help.setShift("TS(0053)");
							  break;
		case "0068": help.setShift("Gen(0068)");
							  break;
		case "0073": help.setShift("QcNig(0073)");
							  break;
		case "0087": help.setShift("Gen(0087)");
		  break;
case "0088": help.setShift("RD(0088)");
		  break;
case "0089": help.setShift("Sec(0089)");
		  break;
							  
}
						


					
			                	
			            }
			            else
				    	{
				    		
			            	help.setiNSTATUS("");
							help.setoUTSTATUS("");	
			                  
				    	}
			            
			    	}
				    	else
				    	{
				    		
				    		help.setiNSTATUS(rs9.getString("instatus"));
							help.setoUTSTATUS(rs9.getString("outstatus"));
							
							switch(rs9.getString("shift")){
							case "0001": help.setShift("Gen(0001)");
							  break;
		case "0002": help.setShift("Gen(0002)");
							  break;
		case "0003": help.setShift("FS(0003)");
							  break;
		case "0004": help.setShift("SS(0004)");
							  break;
		case "0005": help.setShift("TS(0005)");
							  break;
		case "0006": help.setShift("SS1(0006)");
							  break;
		case "0007": help.setShift("FS(0007)");
							  break;
		case "0008": help.setShift("SS0008)");
							  break;
		case "0009": help.setShift("TS(0009)");
							  break;
		case "0010": help.setShift("NS(0010)");
							  break;
		case "0011": help.setShift("SS-SM(0011)");
							  break;
		case "0012": help.setShift("EnggB(0012)");
							  break;
		case "0013": help.setShift("EnggC(0013)");
							  break;
		case "0014": help.setShift("SecA(0014)");
							  break;
		case "0015": help.setShift("SecB(0015)");
							  break;
		case "0016": help.setShift("SecC(0016)");
							  break;
		case "0017": help.setShift("Gen(0017)");
							  break;
		case "0018": help.setShift("Night(0018)");
							  break;
		case "0019": help.setShift("Gen(0019)");
							  break;
		case "0020": help.setShift("Gen2(0020)");
							  break;
		case "0021": help.setShift("2ND(0021)");
							  break;
		case "0022": help.setShift("2ND1(0022)");
							  break;
		case "0023": help.setShift("EnggGen(0023)");
							  break;
		case "0024": help.setShift("EnggGen1(0024)");
							  break;
		case "0025": help.setShift("1ST(0025)");
							  break;
		case "0026": help.setShift("Engg2ND(0026)");
							  break;
		case "0027": help.setShift("3RD(0027)");
							  break;
		case "0028": help.setShift("QC1ST(0028)");
							  break;
		case "0030": help.setShift("Gen4(0030)");
							  break;
		case "0031": help.setShift("1ST(0031)");
							  break;
		case "0032": help.setShift("Gen(0032)");
							  break;
		case "0033": help.setShift("2ND(0033)");
							  break;
		case "0034": help.setShift("Night(0034)");
							  break;
		case "0035": help.setShift("GOASecA(0035)");
							  break;
		case "0036": help.setShift("GOASecB(0036)");
							  break;
		case "0037": help.setShift("GOASecC(0037)");
							  break;
		case "0038": help.setShift("Gen3(0038)");
							  break;
		case "0029": help.setShift("QC2ND(0029)");
							  break;
		case "0039": help.setShift("Gen1(0039)");
							  break;
		case "0040": help.setShift("Gen2(0040)");
							  break;
		case "0041": help.setShift("FS(0041)");
							  break;
		case "0042": help.setShift("SS(0042)");
							  break;
		case "0043": help.setShift("TS(0043)");
							  break;
		case "0054": help.setShift("Gen(0054)");
							  break;
		case "0055": help.setShift("1ST(0055)");
							  break;
		case "0056": help.setShift("2ND(0056)");
							  break;
		case "0057": help.setShift("Night(0057)");
							  break;
		case "0058": help.setShift("Gen5(0058)");
							  break;
		case "0059": help.setShift("Gen6(0059)");
							  break;
		case "0060": help.setShift("Gen(0060)");
							  break;
		case "0061": help.setShift("FS(0061)");
							  break;
		case "0062": help.setShift("SS(0062)");
							  break;
		case "0063": help.setShift("TS(0063)");
							  break;
		case "0064": help.setShift("Night(0064)");
							  break;
		case "0065": help.setShift("Gen(0065)");
							  break;
		case "0066": help.setShift("SSQC(0066)");
							  break;
		case "0067": help.setShift("FS(0067)");
							  break;
		case "0069": help.setShift("Gen(0069)");
							  break;
		case "0070": help.setShift("Gen2(0070)");
							  break;
		case "0071": help.setShift("Gen3(0071)");
							  break;
		case "0072": help.setShift("QC2ND1(0072)");
							  break;
		case "0074": help.setShift("EnggA(0074)");
							  break;
		case "0075": help.setShift("EnggD(0075)");
							  break;
		case "0044": help.setShift("FS1(0044)");
							  break;
		case "0045": help.setShift("FS2(0045)");
							  break;
		case "0046": help.setShift("Gen1(0046)");
							  break;
		case "0047": help.setShift("Gen2(0047)");
							  break;
		case "0048": help.setShift("SS(0048)");
							  break;
		case "0049": help.setShift("3RD(0049)");
							  break;
		case "0050": help.setShift("Gen(0050)");
							  break;
		case "0051": help.setShift("FS(0051)");
							  break;
		case "0052": help.setShift("SS(0052)");
							  break;
		case "0053": help.setShift("TS(0053)");
							  break;
		case "0068": help.setShift("Gen(0068)");
							  break;
		case "0073": help.setShift("QcNig(0073)");
							  break;
							  
		case "0087": help.setShift("Gen(0087)");
		  break;
case "0088": help.setShift("RD(0088)");
		  break;
case "0089": help.setShift("Sec(0089)");
		  break;
}
						            
				    	}
					   

				    	String data = "select Approvel_Status,reason from leave_details where  user_id='"
								+ empcode
								+ "' and Approvel_Status in('Approved','Pending') and record_status!='Draft'  and '"
								+  date 
								+ "' between start_date and  end_date and YEAR(start_date)='"
								+ year + "'";
						ResultSet rs10 = ad.selectQuery(data);
						while (rs10.next()) {
							if (rs10.getString("Approvel_Status").equalsIgnoreCase(
									"Approved"))
								help.setRemarks(rs10.getString("reason"));
							else
								help.setRemarks("Leave to be Approved");
						}
						rs10.close();
						String data1 = "select Approver_Status,reason from OnDuty_details where  user_id='"
								+empcode
								+ "' and Approver_Status in('Approved','In Process') and '"
								+ date
								+ "' between start_date and  end_date  and YEAR(start_date)='"
								+ year + "'";
						ResultSet rs101 = ad.selectQuery(data1);
						while (rs101.next()) {
							if (rs101.getString("Approver_Status")
									.equalsIgnoreCase("Approved"))
								help.setRemarks(rs101.getString("reason"));
							else
								help.setRemarks("Onduty to be Approved");
						} 

						rs101.close();
						



						String data11 = "select * from holidays where date = '"+date+"' and location = '"+user.getPlantId()+"' ";

						ResultSet rs1011 = ad.selectQuery(data11);
						try {
							while (rs1011.next()) {

									help.setRemarks(rs1011.getString("Holiday_Name"));
									help.setMessage("HOL");
									

							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						rs1011.close();
					i++;
					
					attDataList.add(help);
					}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs9.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				if (attDataList.size() > 0) {
					request.setAttribute("attDataList", attDataList);
				}
		}
		return mapping.findForward("displayOTcancelRequest");
	
	}
	
	public ActionForward cancelCompffRequest(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		HRApprovalForm leaveForm=(HRApprovalForm)form;
		NewsandMediaDao ad=new NewsandMediaDao();
		
		int requestNo=Integer.parseInt(request.getParameter("ReqNo"));
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		if(user == null)
		{
			leaveForm.setMessage("Session Expried! Try to Login again!");
			return mapping.findForward("displaycancelRequest");
		}
		String reqType=leaveForm.getReqRequstType();
		leaveForm.setReqRequstType(reqType);
		String status=leaveForm.getSelectedFilter();
		String reqestType=request.getParameter("ReqType");
		String apprstatus=request.getParameter("status");
		
		try{
			Date dNow = new Date( );
			 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS ");
		String dateNow = ft.format(dNow);
	
		if(apprstatus.equalsIgnoreCase("Cancel Comp-Off"))
		{
		String modifyRequest=" update  All_Request set Actual_Approver_status='Cancelled',Last_Approver=Pending_Approver,Pending_Approver='',Req_Status='Cancelled',Actual_Approved_Date='"+dateNow+"',Actual_Approver='"+user.getEmployeeNo()+"',Actual_Approved_Comments='"+leaveForm.getComments()+"' where Req_Type='Cancel Comp-Off' and Req_Id='"+requestNo+"'";	
		int statsChange=ad.SqlExecuteUpdate(modifyRequest);
		if(statsChange>0){
			leaveForm.setMessage2("Request has been cancelled successfully");
			String updateOnduty="update comp_ot set ApprvrStatus='Cancelled',Last_Approver='"+Empname(user.getEmployeeNo())+"',Pending_Approver='',apprvddate='"+dateNow+"',cancelflag='2' where Req_no='"+requestNo+"'";
			int ii=ad.SqlExecuteUpdate(updateOnduty);
		}
		}
		else
		{
			String modifyRequest=" update  All_Request set Actual_Approver_status='Rejected',Last_Approver=Pending_Approver,Pending_Approver='',Req_Status='Rejected',Actual_Approved_Date='"+dateNow+"',Actual_Approver='"+user.getEmployeeNo()+"',Actual_Approved_Comments='"+leaveForm.getComments()+"' where Req_Type='Cancel Comp-Off' and Req_Id='"+requestNo+"'";	
			int statsChange=ad.SqlExecuteUpdate(modifyRequest);
			if(statsChange>0){
				leaveForm.setMessage2("Request has been rejected successfully");
				String updateOnduty="update comp_ot set ApprvrStatus='HR Rejected',Last_Approver='"+Empname(user.getEmployeeNo())+"',Pending_Approver='',apprvddate='"+dateNow+"',cancelflag='3' where Req_no='"+requestNo+"'";
				int ii=ad.SqlExecuteUpdate(updateOnduty);
			}	
		}
	
		}catch (Exception e) {
			e.printStackTrace();
		}
		
		String reqmon="";
		String reqyear="";
		String reqstart="";
		String reqend="";
		String empcode="";
		String reqmonname="";
		String reqstart1="";
		String reqend1="";

		int j = 1;
		int reqby = 0;
		LinkedList comp = new LinkedList();
		 status = "";
		int requesterNo = requestNo;
		String getcomoff = "select right(left(convert(varchar(11),c.FromDate,106) ,6),3)as monname,day(c.FromDate) as startday,day(c.ToDate) as enday,right('0' + rtrim(month(c.FromDate)),2) as mon,YEAR(c.FromDate) as year,c.*,e.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT,COMP_OT_TYPE.Reason as compreason from COMP_OT c left outer join COMP_OT_TYPE on COMP_OT_TYPE.id=c.Comp_type,emp_official_info e,DEPARTMENT dept,DESIGNATION desg where Req_no='"
				+ requesterNo
				+ "' and e.PERNR=c.Pernr and dept.DPTID=e.DPTID and desg.DSGID=e.DSGID";
		ResultSet a = ad.selectQuery(getcomoff);
		try {
			while (a.next()) {
				LeaveForm l = new LeaveForm();
				reqmonname=a.getString("monname");
				reqmon=a.getString("mon");
				reqyear=a.getString("year");
				leaveForm.setStatus(a.getString("cancelflag"));
				leaveForm.setEmployeeNo(a.getString("EMP_FULLNAME"));
				reqmon=a.getString("mon");
				reqyear=a.getString("year");
				leaveForm.setStartDate(EMicroUtils.display(a
						.getDate("FromDate")));
				leaveForm
						.setEndDate(EMicroUtils.display(a.getDate("ToDate")));
				leaveForm.setReason(a.getString("Reason"));
				status = a.getString("ApprvrStatus");
				reqby = a.getInt("RequestedBy");
				reqstart1=display1(a.getDate("FromDate"));
				reqstart=a.getString("FromDate");
				reqend1=display1(a.getDate("ToDate"));
				reqend=a.getString("ToDate");
				l.setSlmindur(j);
				l.setEmployeeNumber(Integer.toString(a.getInt("Pernr")));
				l.setEmployeeName(a.getString("EMP_FULLNAME"));
				l.setDepartment(a.getString("DPTSTXT"));
				l.setDesignation(a.getString("DSGSTXT"));
				l.setNofhrs(a.getString("NoHRS"));
				String app = a.getString("Applicabale");
				if (app.equalsIgnoreCase("BS"))
					app = "Before Shift Start Time";
				if (app.equalsIgnoreCase("AS"))
					app = "After Shift End Time";
				leaveForm.setReasonType(a.getString("compreason"));

				l.setShift(app);
				++j;
				comp.add(l);

			}
		} catch (SQLException e) {

			e.printStackTrace();
		}
		request.setAttribute("comp", comp);


		// plant
		String app = "";
		// PLANT HEAD



		if (status.equalsIgnoreCase("Pending")) {
			app = "select a.*,e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from All_Request a,emp_official_info e,DEPARTMENT dep,DESIGNATION desg where Req_Type='Comp-Off/OT' and a.Req_Id='"
					+ requesterNo
					+ "' and e.PERNR=a.Pending_Approver and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID "
					+ "union "
					 +"select a.*,e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from All_Request a,emp_official_info e,DEPARTMENT dep,DESIGNATION desg where Req_Type='Comp-Off/OT' and a.Req_Id='"
						+ requesterNo
						+ "' and e.PERNR=a.Actual_Approver and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID ";

		} else {
			app = "select a.*,e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from All_Request a,emp_official_info e,DEPARTMENT dep,DESIGNATION desg where  Req_Type='Comp-Off/OT' and a.Req_Id='"
					+ requesterNo
					+ "' and e.PERNR=a.Actual_Approver and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID ";
				

		}
		List appList = new LinkedList();
		ResultSet rsAppr = ad.selectQuery(app);
		String duplicate="";
		try {
			while (rsAppr.next()) {
				ApprovalsForm appr = new ApprovalsForm();
				appr.setApprover(rsAppr.getString("EMP_FULLNAME"));
				appr.setDesignation(rsAppr.getString("DSGSTXT"));
				appr.setApproveStatus(rsAppr.getString("Req_Status"));
				String approvaStatus = rsAppr.getString("Req_Status");
				if (approvaStatus.equals("Pending")) {
					appr.setApproveDate("");
					appr.setComments("");
				}
				if (approvaStatus.equals("Approved")
						|| approvaStatus.equals("Completed")) {
					appr.setApproveDate(rsAppr.getString("approved_date"));
					appr.setComments(rsAppr.getString("Comments"));
				}
				if (approvaStatus.equals("Rejected")
						|| approvaStatus.equals("Cancelled")) {
					appr.setApproveDate(rsAppr.getString("rejected_date"));
					appr.setComments(rsAppr.getString("Comments"));
				}

				
				if(!duplicate.equalsIgnoreCase(rsAppr.getString("approved_date")))
				appList.add(appr);
				duplicate=rsAppr.getString("approved_date");
			}
			request.setAttribute("appList", appList);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		//remarks

		String comments="select * from All_Request where Req_Id='"+requestNo+"' and req_type='Cancel Comp-Off' ";
		ResultSet a1=ad.selectQuery(comments);
		try {
			while(a1.next())
			{
				leaveForm.setRemark(a1.getString("Comments"));
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		if(true)
		{
			//Attendance

			SAPAttendenceDAO dao = new SAPAttendenceDAO();

			String month=reqyear+reqmon+"01";



			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			Date datenow = new Date();
			String time = sdf.format(datenow);

			String today[]=time.split("-");

			int datetoday=Integer.parseInt(today[2]);
			String monthtoday=today[1];
			String monName=monthtoday;

			if (monName.equals("01"))
				monName = "Jan";
			if (monName.equals("02"))
				monName = "Feb";
			if (monName.equals("03"))
				monName = "Mar";
			if (monName.equals("04"))
				monName = "Apr";
			if (monName.equals("05"))
				monName = "May";
			if (monName.equals("06"))
				monName = "Jun";
			if (monName.equals("07"))
				monName = "Jul";
			if (monName.equals("08"))
				monName = "Aug";
			if (monName.equals("09"))
				monName = "Sep";
			if (monName.equals("10"))
				monName = "Oct";
			if (monName.equals("11"))
				monName = "Nov";
			if (monName.equals("12"))
				monName = "Dec";



			LinkedList attDataList = new LinkedList();
			Calendar cal = Calendar.getInstance();



			String calendarmon=monName;
			String mon=month.substring(0, 3);
			String year = month.substring(month.length() - 4, month.length());

			/*
			 * String reqyear=month.substring(month.length()-2, month.length());
			 * String reqmonth=monName+reqyear; AttendenceForm attendenceForm = new
			 * AttendenceForm(); attendenceForm.setEmpcode(empNo);
			 * attendenceForm.setDat(reqmonth); AttendenceAction a4=new
			 * AttendenceAction(); if(monName.equalsIgnoreCase("Nov")) {
			 * a4.submit(mapping, attendenceForm, request, response); return
			 * mapping.findForward("display"); }
			 */




			if (monName.equals("Jan"))
				monName = "01";
			if (monName.equals("Feb"))
				monName = "02";
			if (monName.equals("Mar"))
				monName = "03";
			if (monName.equals("Apr"))
				monName = "04";
			if (monName.equals("May"))
				monName = "05";
			if (monName.equals("Jun"))
				monName = "06";
			if (monName.equals("Jul"))
				monName = "07";
			if (monName.equals("Aug"))
				monName = "08";
			if (monName.equals("Sep"))
				monName = "09";
			if (monName.equals("Oct"))
				monName = "10";
			if (monName.equals("Nov"))
				monName = "11";
			if (monName.equals("Dec"))
				monName = "12";

			String date ="";	




			ArrayList att = new ArrayList();

			cal.set(Integer.parseInt(year), Integer.parseInt(monName)-1, 1);
			int days = cal.getActualMaximum(Calendar.DAY_OF_MONTH);

			int i=1;
			/*    String query="EXEC daily_report_status_Att '"+days+"','"+monName+"','"+year+"','"+empNo+"' ";
			int k=ad.SqlExecuteUpdate(query);*/

				String s9 = " select date,convert(varchar(11),date,106) as date1,left(DATENAME(WEEKDAY,date),3) as day,left(In_time,5) as intime,left(out_time,5) as outtime,"
						+ "left(status,2) as instatus,right(status,2) as outstatus,shift from Report_Daily_wise,emp_official_info where emp_official_info.PERNR=Report_Daily_wise.Pernr and emp_official_info.LOCID=Report_Daily_wise.Location and  emp_official_info.Pernr='"+empcode+"'  and year(date)='"+reqyear+"' "
								+ "and date between '"+reqstart1+"' and '"+reqend1+"' order by date";
				ResultSet rs9 = ad.selectQuery(s9);
				try {
					while(rs9.next())
					{
						
						SAPAttendenceForm help = new SAPAttendenceForm();
						help.setDate(rs9.getString("date1"));
						help.setDay(rs9.getString("day"));
						date=rs9.getString("date");
						
						if(!(rs9.getString("intime").equalsIgnoreCase("00:00") && rs9.getString("instatus").equalsIgnoreCase("AA")))
			    			help.setiNTIME(rs9.getString("intime"));


				    	if(!(rs9.getString("outtime").equalsIgnoreCase("00:00") && rs9.getString("outstatus").equalsIgnoreCase("AA")))
						help.setoUTTIME(rs9.getString("outtime"));

				    	if(monName.equalsIgnoreCase(monthtoday))
				    	{
			            if(datetoday>=i)
			            {
			            	help.setiNSTATUS(rs9.getString("instatus"));
			            	if(datetoday==i)
			            	{
			            		if(rs9.getString("outstatus").equalsIgnoreCase("AA"))
			            		{
			            			help.setoUTSTATUS("");
			            		}
			            		else
			            		{
			            			help.setoUTSTATUS(rs9.getString("outstatus"));
			            		}
			            	}
			            	else
			            	{
			            		help.setoUTSTATUS(rs9.getString("outstatus"));
			            	}
							
							
							switch(rs9.getString("shift")){
							case "0001": help.setShift("Gen(0001)");
							  break;
		case "0002": help.setShift("Gen(0002)");
							  break;
		case "0003": help.setShift("FS(0003)");
							  break;
		case "0004": help.setShift("SS(0004)");
							  break;
		case "0005": help.setShift("TS(0005)");
							  break;
		case "0006": help.setShift("SS1(0006)");
							  break;
		case "0007": help.setShift("FS(0007)");
							  break;
		case "0008": help.setShift("SS0008)");
							  break;
		case "0009": help.setShift("TS(0009)");
							  break;
		case "0010": help.setShift("NS(0010)");
							  break;
		case "0011": help.setShift("SS-SM(0011)");
							  break;
		case "0012": help.setShift("EnggB(0012)");
							  break;
		case "0013": help.setShift("EnggC(0013)");
							  break;
		case "0014": help.setShift("SecA(0014)");
							  break;
		case "0015": help.setShift("SecB(0015)");
							  break;
		case "0016": help.setShift("SecC(0016)");
							  break;
		case "0017": help.setShift("Gen(0017)");
							  break;
		case "0018": help.setShift("Night(0018)");
							  break;
		case "0019": help.setShift("Gen(0019)");
							  break;
		case "0020": help.setShift("Gen2(0020)");
							  break;
		case "0021": help.setShift("2ND(0021)");
							  break;
		case "0022": help.setShift("2ND1(0022)");
							  break;
		case "0023": help.setShift("EnggGen(0023)");
							  break;
		case "0024": help.setShift("EnggGen1(0024)");
							  break;
		case "0025": help.setShift("1ST(0025)");
							  break;
		case "0026": help.setShift("Engg2ND(0026)");
							  break;
		case "0027": help.setShift("3RD(0027)");
							  break;
		case "0028": help.setShift("QC1ST(0028)");
							  break;
		case "0030": help.setShift("Gen4(0030)");
							  break;
		case "0031": help.setShift("1ST(0031)");
							  break;
		case "0032": help.setShift("Gen(0032)");
							  break;
		case "0033": help.setShift("2ND(0033)");
							  break;
		case "0034": help.setShift("Night(0034)");
							  break;
		case "0035": help.setShift("GOASecA(0035)");
							  break;
		case "0036": help.setShift("GOASecB(0036)");
							  break;
		case "0037": help.setShift("GOASecC(0037)");
							  break;
		case "0038": help.setShift("Gen3(0038)");
							  break;
		case "0029": help.setShift("QC2ND(0029)");
							  break;
		case "0039": help.setShift("Gen1(0039)");
							  break;
		case "0040": help.setShift("Gen2(0040)");
							  break;
		case "0041": help.setShift("FS(0041)");
							  break;
		case "0042": help.setShift("SS(0042)");
							  break;
		case "0043": help.setShift("TS(0043)");
							  break;
		case "0054": help.setShift("Gen(0054)");
							  break;
		case "0055": help.setShift("1ST(0055)");
							  break;
		case "0056": help.setShift("2ND(0056)");
							  break;
		case "0057": help.setShift("Night(0057)");
							  break;
		case "0058": help.setShift("Gen5(0058)");
							  break;
		case "0059": help.setShift("Gen6(0059)");
							  break;
		case "0060": help.setShift("Gen(0060)");
							  break;
		case "0061": help.setShift("FS(0061)");
							  break;
		case "0062": help.setShift("SS(0062)");
							  break;
		case "0063": help.setShift("TS(0063)");
							  break;
		case "0064": help.setShift("Night(0064)");
							  break;
		case "0065": help.setShift("Gen(0065)");
							  break;
		case "0066": help.setShift("SSQC(0066)");
							  break;
		case "0067": help.setShift("FS(0067)");
							  break;
		case "0069": help.setShift("Gen(0069)");
							  break;
		case "0070": help.setShift("Gen2(0070)");
							  break;
		case "0071": help.setShift("Gen3(0071)");
							  break;
		case "0072": help.setShift("QC2ND1(0072)");
							  break;
		case "0074": help.setShift("EnggA(0074)");
							  break;
		case "0075": help.setShift("EnggD(0075)");
							  break;
		case "0044": help.setShift("FS1(0044)");
							  break;
		case "0045": help.setShift("FS2(0045)");
							  break;
		case "0046": help.setShift("Gen1(0046)");
							  break;
		case "0047": help.setShift("Gen2(0047)");
							  break;
		case "0048": help.setShift("SS(0048)");
							  break;
		case "0049": help.setShift("3RD(0049)");
							  break;
		case "0050": help.setShift("Gen(0050)");
							  break;
		case "0051": help.setShift("FS(0051)");
							  break;
		case "0052": help.setShift("SS(0052)");
							  break;
		case "0053": help.setShift("TS(0053)");
							  break;
		case "0068": help.setShift("Gen(0068)");
							  break;
		case "0073": help.setShift("QcNig(0073)");
							  break;
							  
		case "0087": help.setShift("Gen(0087)");
		  break;
case "0088": help.setShift("RD(0088)");
		  break;
case "0089": help.setShift("Sec(0089)");
		  break;
}
						


					
			                	
			            }
			            else
				    	{
				    		
			            	help.setiNSTATUS("");
							help.setoUTSTATUS("");	
			                  
				    	}
			            
			    	}
				    	else
				    	{
				    		
				    		help.setiNSTATUS(rs9.getString("instatus"));
							help.setoUTSTATUS(rs9.getString("outstatus"));
							
							switch(rs9.getString("shift")){
							case "0001": help.setShift("Gen(0001)");
							  break;
		case "0002": help.setShift("Gen(0002)");
							  break;
		case "0003": help.setShift("FS(0003)");
							  break;
		case "0004": help.setShift("SS(0004)");
							  break;
		case "0005": help.setShift("TS(0005)");
							  break;
		case "0006": help.setShift("SS1(0006)");
							  break;
		case "0007": help.setShift("FS(0007)");
							  break;
		case "0008": help.setShift("SS0008)");
							  break;
		case "0009": help.setShift("TS(0009)");
							  break;
		case "0010": help.setShift("NS(0010)");
							  break;
		case "0011": help.setShift("SS-SM(0011)");
							  break;
		case "0012": help.setShift("EnggB(0012)");
							  break;
		case "0013": help.setShift("EnggC(0013)");
							  break;
		case "0014": help.setShift("SecA(0014)");
							  break;
		case "0015": help.setShift("SecB(0015)");
							  break;
		case "0016": help.setShift("SecC(0016)");
							  break;
		case "0017": help.setShift("Gen(0017)");
							  break;
		case "0018": help.setShift("Night(0018)");
							  break;
		case "0019": help.setShift("Gen(0019)");
							  break;
		case "0020": help.setShift("Gen2(0020)");
							  break;
		case "0021": help.setShift("2ND(0021)");
							  break;
		case "0022": help.setShift("2ND1(0022)");
							  break;
		case "0023": help.setShift("EnggGen(0023)");
							  break;
		case "0024": help.setShift("EnggGen1(0024)");
							  break;
		case "0025": help.setShift("1ST(0025)");
							  break;
		case "0026": help.setShift("Engg2ND(0026)");
							  break;
		case "0027": help.setShift("3RD(0027)");
							  break;
		case "0028": help.setShift("QC1ST(0028)");
							  break;
		case "0030": help.setShift("Gen4(0030)");
							  break;
		case "0031": help.setShift("1ST(0031)");
							  break;
		case "0032": help.setShift("Gen(0032)");
							  break;
		case "0033": help.setShift("2ND(0033)");
							  break;
		case "0034": help.setShift("Night(0034)");
							  break;
		case "0035": help.setShift("GOASecA(0035)");
							  break;
		case "0036": help.setShift("GOASecB(0036)");
							  break;
		case "0037": help.setShift("GOASecC(0037)");
							  break;
		case "0038": help.setShift("Gen3(0038)");
							  break;
		case "0029": help.setShift("QC2ND(0029)");
							  break;
		case "0039": help.setShift("Gen1(0039)");
							  break;
		case "0040": help.setShift("Gen2(0040)");
							  break;
		case "0041": help.setShift("FS(0041)");
							  break;
		case "0042": help.setShift("SS(0042)");
							  break;
		case "0043": help.setShift("TS(0043)");
							  break;
		case "0054": help.setShift("Gen(0054)");
							  break;
		case "0055": help.setShift("1ST(0055)");
							  break;
		case "0056": help.setShift("2ND(0056)");
							  break;
		case "0057": help.setShift("Night(0057)");
							  break;
		case "0058": help.setShift("Gen5(0058)");
							  break;
		case "0059": help.setShift("Gen6(0059)");
							  break;
		case "0060": help.setShift("Gen(0060)");
							  break;
		case "0061": help.setShift("FS(0061)");
							  break;
		case "0062": help.setShift("SS(0062)");
							  break;
		case "0063": help.setShift("TS(0063)");
							  break;
		case "0064": help.setShift("Night(0064)");
							  break;
		case "0065": help.setShift("Gen(0065)");
							  break;
		case "0066": help.setShift("SSQC(0066)");
							  break;
		case "0067": help.setShift("FS(0067)");
							  break;
		case "0069": help.setShift("Gen(0069)");
							  break;
		case "0070": help.setShift("Gen2(0070)");
							  break;
		case "0071": help.setShift("Gen3(0071)");
							  break;
		case "0072": help.setShift("QC2ND1(0072)");
							  break;
		case "0074": help.setShift("EnggA(0074)");
							  break;
		case "0075": help.setShift("EnggD(0075)");
							  break;
		case "0044": help.setShift("FS1(0044)");
							  break;
		case "0045": help.setShift("FS2(0045)");
							  break;
		case "0046": help.setShift("Gen1(0046)");
							  break;
		case "0047": help.setShift("Gen2(0047)");
							  break;
		case "0048": help.setShift("SS(0048)");
							  break;
		case "0049": help.setShift("3RD(0049)");
							  break;
		case "0050": help.setShift("Gen(0050)");
							  break;
		case "0051": help.setShift("FS(0051)");
							  break;
		case "0052": help.setShift("SS(0052)");
							  break;
		case "0053": help.setShift("TS(0053)");
							  break;
		case "0068": help.setShift("Gen(0068)");
							  break;
		case "0073": help.setShift("QcNig(0073)");
							  break;
							  
		case "0087": help.setShift("Gen(0087)");
		  break;
case "0088": help.setShift("RD(0088)");
		  break;
case "0089": help.setShift("Sec(0089)");
		  break;
}
						            
				    	}
					   

				    	String data = "select Approvel_Status,reason from leave_details where  user_id='"
								+ empcode
								+ "' and Approvel_Status in('Approved','Pending') and record_status!='Draft'  and '"
								+  date 
								+ "' between start_date and  end_date and YEAR(start_date)='"
								+ year + "'";
						ResultSet rs10 = ad.selectQuery(data);
						while (rs10.next()) {
							if (rs10.getString("Approvel_Status").equalsIgnoreCase(
									"Approved"))
								help.setRemarks(rs10.getString("reason"));
							else
								help.setRemarks("Leave to be Approved");
						}
						rs10.close();
						String data1 = "select Approver_Status,reason from OnDuty_details where  user_id='"
								+empcode
								+ "' and Approver_Status in('Approved','In Process') and '"
								+ date
								+ "' between start_date and  end_date  and YEAR(start_date)='"
								+ year + "'";
						ResultSet rs101 = ad.selectQuery(data1);
						while (rs101.next()) {
							if (rs101.getString("Approver_Status")
									.equalsIgnoreCase("Approved"))
								help.setRemarks(rs101.getString("reason"));
							else
								help.setRemarks("Onduty to be Approved");
						} 

						rs101.close();
						



						String data11 = "select * from holidays where date = '"+date+"' and location = '"+user.getPlantId()+"' ";

						ResultSet rs1011 = ad.selectQuery(data11);
						try {
							while (rs1011.next()) {

									help.setRemarks(rs1011.getString("Holiday_Name"));
									help.setMessage("HOL");
									

							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						rs1011.close();
					i++;
					
					attDataList.add(help);
					}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				try {
					rs9.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				if (attDataList.size() > 0) {
					request.setAttribute("attDataList", attDataList);
				}
		}
		return mapping.findForward("displaycompoffcancelRequest");
	}
	
	public ActionForward cancelRequest(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		HRApprovalForm leaveForm=(HRApprovalForm)form;
		NewsandMediaDao ad=new NewsandMediaDao();
		
		int requestNo=Integer.parseInt(request.getParameter("ReqNo"));
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		if(user == null)
		{
			leaveForm.setMessage("Session Expried! Try to Login again!");
			return mapping.findForward("displaycancelRequest");
		}
		String reqType=leaveForm.getReqRequstType();
		leaveForm.setReqRequstType(reqType);
		String status=leaveForm.getSelectedFilter();
		String reqestType=request.getParameter("ReqType");
		String apprstatus=request.getParameter("status");
		try{
			Date dNow = new Date( );
			 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS ");
		String dateNow = ft.format(dNow);
	
		if(reqestType.equalsIgnoreCase("Leave"))
		{
			boolean existStatus=false;
			String empID="";
			int priorityCout=0;
			int totalApproverCount=0;
			float noOfDays=0;
			String leaveType="";
			int year=0;
			String getLeaveDetails="select *,year(start_date) as year from leave_details where Req_Id='"+requestNo+"'"; 
			ResultSet rsLeave=ad.selectQuery(getLeaveDetails);
			while(rsLeave.next())
			{
				noOfDays=rsLeave.getFloat("no_of_days");
				leaveType=rsLeave.getString("leave_type");
				empID=rsLeave.getString("firstname");
				year=Integer.parseInt(rsLeave.getString("year"));
			}
			try {
				rsLeave.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			int curyear = Calendar.getInstance().get(Calendar.YEAR);
			/*
			String dataFlowType=""; 
			String checkESSApproverList="select count(*) from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave'";
			ResultSet rsCheckInEss=ad.selectQuery(checkESSApproverList);
			while(rsCheckInEss.next())
			{
				int number=rsCheckInEss.getInt(1);
				totalApproverCount=rsCheckInEss.getInt(1);
				if(number==0)
				{
					existStatus=false;
				}else{
					existStatus=true;
				}
			}
			if(existStatus==true){
				String getDataFlowType="select * from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave' ";
				ResultSet rsDataFlowType=ad.selectQuery(getDataFlowType);
				while(rsDataFlowType.next())
				{
					dataFlowType=rsDataFlowType.getString("reqType");
				}
				if(dataFlowType.equalsIgnoreCase("sequential"))
				{
					
				//pending requst is available
				int pendingCount=0;	
				String checkPendingRecords="select COUNT(*) from All_Request where Req_Id='"+requestNo+"' and Req_Type='Leave' and Req_Status='Pending'";	
				ResultSet rsPendingCount=ad.selectQuery(checkPendingRecords);
				while(rsPendingCount.next())
				{
					pendingCount=rsPendingCount.getInt(1);
				}
				if(pendingCount>0)
				{
					existStatus=false;
				}
				//check main approve status
				String mainLeaveStatus="";
				String getmaniCount="select Approvel_Status from leave_details where Req_Id='"+requestNo+"' ";
				ResultSet rsMainCount=ad.selectQuery(getmaniCount);
				while(rsMainCount.next()){
					
					//mainCount=rsMainCount.getInt(1);
					mainLeaveStatus=rsMainCount.getString("Approvel_Status");
					if(mainLeaveStatus.equalsIgnoreCase("Approved"))
					{
						existStatus=false;
					}
					if(mainLeaveStatus.equalsIgnoreCase("Pending")){
						String modifyRequest="update  All_Request set Last_Approver='"+user.getEmployeeNo()+"',Approved_Persons='"+user.getEmployeeNo()+"',Req_Status='Cancelled',Pending_Approver='',approved_date='',rejected_date='"+dateNow+"' where Req_Type='Leave' and Req_Id='"+requestNo+"' and Approved_Persons='"+user.getEmployeeNo()+"'";	
						int statsChange=ad.SqlExecuteUpdate(modifyRequest);
						leaveForm.setMessage2("Request has been cancelled successfully");
						existStatus=true;
						float lvBal=0;
						float avlBal=0;
						float waitingBal=0;
						float closingBal=0;
							String leaveBal="select * from lv_type_d where lv_empcode='"+empID+"' and lv_typeid='"+leaveType+"'";
							ResultSet rsLeaveBal=ad.selectQuery(leaveBal);
							while(rsLeaveBal.next()){
								avlBal=rsLeaveBal.getFloat("lv_availed");
								closingBal=rsLeaveBal.getFloat("lv_clbal");
								waitingBal=rsLeaveBal.getFloat("lv_awtBal");
							}
							waitingBal=waitingBal-noOfDays;
							
							  String updateLeaveDetails="update lv_type_d set lv_awtBal='"+waitingBal+"' where lv_typeid='"+leaveType+"' and lv_empcode='"+empID+"'";
							  int checkResult=ad.SqlExecuteUpdate(updateLeaveDetails);
								String updateSql= "update leave_details set Approvel_Status='Cancelled',Last_Approver='"+user.getEmployeeNo()+"',Pending_Approver='',approved_date='',rejected_date='"+dateNow+"'  where Req_Id='"+requestNo+"'";
								int ii=ad.SqlExecuteUpdate(updateSql);
					}
					
				}
				}
				if(dataFlowType.equalsIgnoreCase("parallel"))
				{
					String modifyRequest="update  All_Request set Last_Approver='"+user.getEmployeeNo()+"',Approved_Persons='"+user.getEmployeeNo()+"',Req_Status='Cancelled',Pending_Approver='',approved_date='',rejected_date='"+dateNow+"' where Req_Type='Leave' and Req_Id='"+requestNo+"' and Approved_Persons='"+user.getEmployeeNo()+"'";	
					int statsChange=ad.SqlExecuteUpdate(modifyRequest);
					
					//check Approve Status in approve table
					int count=0;
					String getCancelCount="select * from All_Request where Req_Id='"+requestNo+"' and Requester_Name='"+empID+"' and Req_Type='Leave'";
					ResultSet rsCount=ad.selectQuery(getCancelCount);
					while(rsCount.next())
					{
					 String recordstatus=rsCount.getString("Req_Status");	
					
					  if(recordstatus.equalsIgnoreCase("Cancelled"))
					  {
					       ++count;
					  }
					  if(recordstatus.equalsIgnoreCase("Rejected"))
					  {
					       ++count;
					  }
					}
					System.out.println("count="+count);	
					if(count==1)
					{
						existStatus=false;
						
						String mainLeaveStatus="";
						String getmaniCount="select Approvel_Status from leave_details where Req_Id='"+requestNo+"' ";
						 ResultSet	 rsMainCount=ad.selectQuery(getmaniCount);
						while(rsMainCount.next()){
							mainLeaveStatus=rsMainCount.getString("Approvel_Status");
						}
											
											if(mainLeaveStatus.equalsIgnoreCase("Approved"))
											{
												float lvBal=0;
												float avlBal=0;
												float waitingBal=0;
												float closingBal=0;
												
													String leaveBal="select * from lv_type_d where lv_empcode='"+empID+"' and lv_typeid='"+leaveType+"'";
													ResultSet rsLeaveBal=ad.selectQuery(leaveBal);
													while(rsLeaveBal.next()){
														avlBal=rsLeaveBal.getFloat("lv_availed");
														closingBal=rsLeaveBal.getFloat("lv_clbal");
														waitingBal=rsLeaveBal.getFloat("lv_awtBal");
													}
													avlBal=avlBal-noOfDays;
													if(avlBal<0)
													{
														avlBal=0;
													}
													if(waitingBal<0)
													{
														waitingBal=0;
													}
													closingBal=closingBal+noOfDays;
													waitingBal=waitingBal+noOfDays;
												//  String updateLeaveDetails="update lv_type_d set lv_awtBal='"+waitingBal+"',lv_clbal='"+closingBal+"',lv_availed='"+avlBal+"' where lv_typeid='"+leaveType+"' and lv_empcode='"+empID+"'";
												//  int checkResult=ad.SqlExecuteUpdate(updateLeaveDetails);
												 // String updateSql= "update leave_details set Approvel_Status='Pending',Last_Approver='"+user.getEmployeeNo()+"',Pending_Approver='',approved_date='',rejected_date='"+dateNow+"'  where Req_Id='"+requestNo+"'";
												//	int ii=ad.SqlExecuteUpdate(updateSql);
													
													 
											}
									 
								
								
							
							 
						 
						
					
						
					}
					if(count==2){
						existStatus=false;
						
						String mainLeaveStatus="";
						String getmaniCount="select Approvel_Status from leave_details where Req_Id='"+requestNo+"' ";
						 ResultSet	 rsMainCount=ad.selectQuery(getmaniCount);
						while(rsMainCount.next()){
							mainLeaveStatus=rsMainCount.getString("Approvel_Status");
						}
						if(mainLeaveStatus.equalsIgnoreCase("Pending"))
						{
							existStatus=true;
						
						
						//change leave Balence
						float lvBal=0;
						float avlBal=0;
						float waitingBal=0;
						float closingBal=0;
						
							String leaveBal="select * from lv_type_d where lv_empcode='"+empID+"' and lv_typeid='"+leaveType+"'";
							ResultSet rsLeaveBal=ad.selectQuery(leaveBal);
							while(rsLeaveBal.next()){
								avlBal=rsLeaveBal.getFloat("lv_availed");
								closingBal=rsLeaveBal.getFloat("lv_clbal");
								waitingBal=rsLeaveBal.getFloat("lv_awtBal");
							}
							
							if(avlBal<0)
							{
								avlBal=0;
							}
							if(waitingBal<0)
							{
								waitingBal=0;
							}
							waitingBal=waitingBal-noOfDays;
						  String updateLeaveDetails="update lv_type_d set lv_awtBal='"+waitingBal+"',lv_clbal='"+closingBal+"',lv_availed='"+avlBal+"' where lv_typeid='"+leaveType+"' and lv_empcode='"+empID+"'";
						  int checkResult=ad.SqlExecuteUpdate(updateLeaveDetails);
						  String updateSql= "update leave_details set Approvel_Status='Cancelled',Last_Approver='"+user.getEmployeeNo()+"',Pending_Approver='',approved_date='',rejected_date='"+dateNow+"'  where Req_Id='"+requestNo+"'";
							int ii=ad.SqlExecuteUpdate(updateSql);
						}
						
					}
					}
			}*/
		if(existStatus==false)
		{
			/*int year = Calendar.getInstance().get(Calendar.YEAR);*/
			
			if(apprstatus.equalsIgnoreCase("Cancel Leave"))
			{
		String modifyRequest="update  All_Request set Actual_Approver_status='Cancelled',Last_Approver=Pending_Approver,Pending_Approver='',Req_Status='Cancelled',Actual_Approved_Date='"+dateNow+"',Actual_Approver='"+user.getEmployeeNo()+"',Actual_Approved_Comments='"+leaveForm.getComments()+"' where Req_Type='Cancel Leave' and Req_Id='"+requestNo+"' ";	
		int statsChange=ad.SqlExecuteUpdate(modifyRequest);	
		
		
		if(statsChange>0){
			leaveForm.setMessage("Request has been cancelled successfully");
			String updateSql= "update leave_details set Approvel_Status='Cancelled',Pending_Approver='',approved_date='',rejected_date='"+dateNow+"',cancelflag='2'   where Req_Id='"+requestNo+"'";
			int ii=ad.SqlExecuteUpdate(updateSql);
			//change leave Balence
			float lvBal=0;
			float avlBal=0;
			float waitingBal=0;
			float closingBal=0;
				try{
				String leaveBal="select * from lv_type_d where lv_empcode='"+empID+"' and lv_typeid='"+leaveType+"' and lv_calyear='"+year+"'";
				ResultSet rsLeaveBal=ad.selectQuery(leaveBal);
				while(rsLeaveBal.next()){
					avlBal=rsLeaveBal.getFloat("lv_availed");
					closingBal=rsLeaveBal.getFloat("lv_clbal");
					waitingBal=rsLeaveBal.getFloat("lv_awtBal");
				}
				rsLeaveBal.close();
				avlBal=avlBal-noOfDays;
				if(avlBal<0)
				{
					avlBal=0;
				}
				if(waitingBal<0)
				{
					waitingBal=0;
				}
				closingBal=closingBal+noOfDays;
				
				
			
			  
			  
			///fianaicial year
				if(leaveType.equalsIgnoreCase("2") || leaveType.equalsIgnoreCase("3"))
				{
				if(curyear==year)
				{
					String updateLeaveDetails="update lv_type_d set lv_awtBal='"+waitingBal+"',lv_clbal='"+closingBal+"',lv_availed='"+avlBal+"' where lv_typeid='"+leaveType+"' and lv_empcode='"+empID+"' and lv_calyear='"+year+"'";
					  int checkResult=ad.SqlExecuteUpdate(updateLeaveDetails);
				}
				else
				{
					String updateLeaveDetails="update lv_type_d set lv_awtBal='"+waitingBal+"',lv_clbal='"+closingBal+"',lv_availed='"+avlBal+"' where lv_typeid='"+leaveType+"' and lv_empcode='"+empID+"' and lv_calyear='"+year+"'";
					  int checkResult=ad.SqlExecuteUpdate(updateLeaveDetails);
					  
					  String updatecuryear="update lv_type_d set lv_clbal=lv_clbal+"+noOfDays+" ,lv_opbal=lv_opbal+"+noOfDays+" where lv_typeid='"+leaveType+"' and lv_empcode='"+empID+"' and lv_calyear='"+curyear+"'";
					  int curResult=ad.SqlExecuteUpdate(updatecuryear);	
				}
				}
				else
				{
					String updateLeaveDetails="update lv_type_d set lv_awtBal='"+waitingBal+"',lv_clbal='"+closingBal+"',lv_availed='"+avlBal+"' where lv_typeid='"+leaveType+"' and lv_empcode='"+empID+"' and lv_calyear='"+year+"'";
					  int checkResult=ad.SqlExecuteUpdate(updateLeaveDetails);	
				}
			  
			  int chk=0;
			  ////revert comp_sap balance
			  
			  float balance=0;
			   float available=0;
			  
				String bal="select * from COMP_OT_SAP where Leav_req_no='"+requestNo+"' order by Start_Date";
	       	    ResultSet ba=ad.selectQuery(bal);
	       	 try {
				while (ba.next ()) 
					{
					balance=ba.getFloat("Comp_Off_Balance");
					available=ba.getFloat("Comp_Off_Availed_Days");
					if(balance==0)
					{
					String update="update COMP_OT_SAP set Comp_Off_Availed_Days=Comp_Off_Balance,Comp_Off_Balance=Comp_Off_Availed_Days,Processd_Date='"+dateNow+"' where Leav_req_no='"+requestNo+"' ";
					chk=ad.SqlExecuteUpdate(update);
					}
					else
					{
						String update="update COMP_OT_SAP set Comp_Off_Availed_Days=Comp_Off_Balance-0.5,Comp_Off_Balance=Comp_Off_Availed_Days+0.5,Processd_Date='"+dateNow+"' where Leav_req_no='"+requestNo+"' ";
						chk=ad.SqlExecuteUpdate(update);
					}
					
					
			  
					}
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			  ba.close();
			  
				
				}catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
			
		
		
		else
		{
			
			String modifyRequest="update  All_Request set Actual_Approver_status='Rejected',Last_Approver=Pending_Approver,Pending_Approver='',Req_Status='Rejected',Actual_Approved_Date='"+dateNow+"',Actual_Approver='"+user.getEmployeeNo()+"',Actual_Approved_Comments='"+leaveForm.getComments()+"' where Req_Type='Cancel Leave' and Req_Id='"+requestNo+"' ";	
			int statsChange=ad.SqlExecuteUpdate(modifyRequest);	
			
			
			if(statsChange>0){
				
				leaveForm.setMessage("Request has been Rejected successfully");
				
				String updateSql= "update leave_details set Approvel_Status='HR Rejected',Pending_Approver='',approved_date='',rejected_date='"+dateNow+"',cancelflag='3'   where Req_Id='"+requestNo+"'";
				int ii=ad.SqlExecuteUpdate(updateSql);
			}
		}
			
		
		}
		}
		
	
		}catch (Exception e) {
			e.printStackTrace();
		}
		
	///values set
		String HRid="";
		String empcode="";
		
		try 
		{
			
			
			String sql="select leave.user_id,emp.EMP_FULLNAME,desg.DSGSTXT,leave.leave_type,leave.submit_date,leave.start_duration,leave.end_duration,leave.start_date,leave.end_date,leave.reason,leave.reasonType,leave.no_of_days,leave.documents,leave.Approvel_Status,leave.approved_date,leave.rejected_date" +
			" from leave_details as leave,emp_official_info as emp,DESIGNATION as desg where leave.Req_Id='"+requestNo+"'  and leave.Approver_id=emp.PERNR and emp.DSGID=desg.DSGID";

			ResultSet rs = ad.selectQuery(sql);
			String leaveType="";
			String userId="";
			while (rs.next()) {
				empcode=rs.getString("user_id");
				leaveType=rs.getString("leave_type");
				if(leaveType.equalsIgnoreCase("1")){
					leaveType="Casual";
				}
				if(leaveType.equalsIgnoreCase("2")){
					leaveType="Sick";
				}
				if(leaveType.equalsIgnoreCase("3")){
					leaveType="Privilege";
				}
				if(leaveType.equalsIgnoreCase("4")){
					leaveType="Loss Of Pay";
				}
				if(leaveType.equalsIgnoreCase("5")){
					leaveType="Maternity";
				}
				if(leaveType.equalsIgnoreCase("6")){
					leaveType="Comp-Off";
				}
				leaveForm.setLeaveType(leaveType);
				leaveForm.setSubmitDate(rs.getString("submit_date"));
				String stDur=rs.getString("start_duration");
				
				if(stDur.equalsIgnoreCase("FD")){
					stDur="Full Day";
				}
				if(stDur.equalsIgnoreCase("FH")){
					stDur="First Half";
				}
				if(stDur.equalsIgnoreCase("SH")){
					stDur="Second Half";
				}
				leaveForm.setStartDurationType(stDur);
				String endDur=rs.getString("end_duration");
				
				if(endDur.equalsIgnoreCase("FD")){
					endDur="Full Day";
				}
				if(endDur.equalsIgnoreCase("FH")){
					endDur="First Half";
				}
				if(endDur.equalsIgnoreCase("SH")){
					endDur="Second Half";
				}
				leaveForm.setEndDurationType(endDur);
				leaveForm.setSubmitDate(rs.getString("submit_date"));
				leaveForm.setStartDate(EMicroUtils.display1(rs.getDate("start_date")));
				leaveForm.setEndDate(EMicroUtils.display1(rs.getDate("end_date")));
				leaveForm.setReason(rs.getString("reason"));
				leaveForm.setReasonType(rs.getString("reasonType"));
				leaveForm.setNoOfDays(rs.getString("no_of_days"));
				leaveForm.setDocumentName(rs.getString("documents"));
				
			
			//list.add(pendAppForm);
			//leave approve timings
			boolean existStatus=false;
			String reqType1="";

			ArrayList paralist=new ArrayList();
			String checkESSApproverList="select count(*),reqType from ESS_Approvers where employeeNumber='"+empcode+"' and essType='Leave' group by reqType";
			ResultSet rsCheckInEss=ad.selectQuery(checkESSApproverList);
			while(rsCheckInEss.next())
			{
				int number=rsCheckInEss.getInt(1);
				reqType1=rsCheckInEss.getString("reqType");
				if(number==0)
				{
					existStatus=false;
				}else{
					existStatus=true;
				}
			}rsCheckInEss.close();
			
				if(reqType1.equalsIgnoreCase("sequential"))
				{
				String getApproverDesig=" select e.ApproverId,emp.EMP_FULLNAME,desg.DSGSTXT  from ESS_Approvers as e,emp_official_info as emp,DESIGNATION as desg " +
			"where employeeNumber='"+empcode+"' and  e.ApproverId=emp.PERNR and emp.DSGID=desg.DSGID and essType='Leave' order by Priority ";
				 
				ResultSet rsA=ad.selectQuery(getApproverDesig);
					while(rsA.next())
					{
						LeaveForm lvform=new LeaveForm();
						lvform.setApprover(rsA.getString("EMP_FULLNAME"));	
						 lvform.setAppDesig(rsA.getString("DSGSTXT"));	
						String getdetails=" select all_R.Comments,desg.DSGSTXT,all_R.Hr_Id,emp.EMP_FULLNAME,all_R.Req_Status,all_R.approved_date," +
								"all_R.rejected_date from 	All_Request as all_R,emp_official_info as emp, DESIGNATION as desg   " +
								" where all_R.Req_Id='"+requestNo+"' and all_R.Req_Type='Leave' and ((emp.PERNR=all_R.Last_Approver) or " +
								"(emp.PERNR=all_R.Pending_Approver))  and (emp.DSGID=desg.DSGID) and((Last_Approver='"+rsA.getString("ApproverId")+"') or " +
								"(Pending_Approver='"+rsA.getString("ApproverId")+"'))  and Requester_Name='"+empcode+"'";
						
						ResultSet rsApproverDsg=ad.selectQuery(getdetails);
						
						while(rsApproverDsg.next())
						{
						
							HRid=rsApproverDsg.getString("Hr_Id");
							String reqstatus=rsApproverDsg.getString("Req_Status");
							lvform.setStatus(rsApproverDsg.getString("Req_Status"));
							if(reqstatus.equalsIgnoreCase("Pending"))
							{
								
							
								
							}
							if(reqstatus.equalsIgnoreCase("Approved"))
							{
							lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));
							 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
						  
						   
							String approveDate=	rsApproverDsg.getString("approved_date");
							
							String a[]=approveDate.split(" ");
							approveDate=a[0];
							String b[]=approveDate.split("-");
							approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
							
							 lvform.setApprovedDate(approveDate);
							}
							
							if(reqstatus.equalsIgnoreCase("Rejected"))
							{
								  lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
								  lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
							  
							     
							     String approveDate=rsApproverDsg.getString("rejected_date");
									
									String a[]=approveDate.split(" ");
									approveDate=a[0];
									String b[]=approveDate.split("-");
									approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
									
									 lvform.setApprovedDate(approveDate);
							}
							if(reqstatus.equalsIgnoreCase("Cancelled"))
							{
								  lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
								  lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
								  String approveDate=rsApproverDsg.getString("rejected_date");
									
									String a[]=approveDate.split(" ");
									approveDate=a[0];
									String b[]=approveDate.split("-");
									approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
									
									 lvform.setApprovedDate(approveDate);
							}
							lvform.setComments(rsApproverDsg.getString("Comments"));
							if(HRid!=null)
							{
								if( reqstatus.equalsIgnoreCase("Approved")){
								String hrdetails="select emp.EMP_FULLNAME,des.DSGSTXT from emp_official_info as emp,DESIGNATION as des where PERNR='"+HRid+"' and emp.DSGID=des.DSGID";
								
								ResultSet rs1=ad.selectQuery(hrdetails);
								
								while(rs1.next())
								{
									lvform.setApprover(rs1.getString("EMP_FULLNAME"));
									 lvform.setAppDesig(rs1.getString("DSGSTXT"));
								}
								rs1.close();
							}
							}
							
						
						}
						
						rsApproverDsg.close();
						
						
						paralist.add(lvform);
					}
					rsA.close();
					///Actual approver 
					
					String actual="select a.*,e.EMP_FULLNAME,d.DSGSTXT from All_Request a,emp_official_info e,DESIGNATION d where Req_Id='"+requestNo+"' and Req_Type='Cancel Leave'  and e.PERNR=a.Actual_Approver and e.DSGID=d.DSGID  ";
					ResultSet rsact=ad.selectQuery(actual);
					if(rsact.next())
					{
						LeaveForm l=new LeaveForm();
						l.setApprover(rsact.getString("EMP_FULLNAME"));	
					 l.setAppDesig(rsact.getString("DSGSTXT"));	
						l.setStatus(rsact.getString("Actual_Approver_status"));
						  String approveDate=rsact.getString("Actual_Approved_Date");
							
							String a[]=approveDate.split(" ");
							approveDate=a[0];
							String b[]=approveDate.split("-");
							approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
							
							 l.setApprovedDate(approveDate);
							 l.setComments(rsact.getString("Actual_Approved_Comments"));
								paralist.add(l);
					}
					
					rsact.close();
					
					request.setAttribute("parallelapprovers", paralist);
					
				}
				else
				{
					
					String getApproverDesig="  select all_R.Comments,desg.DSGSTXT,all_R.Hr_Id,emp.EMP_FULLNAME,all_R.Req_Status,all_R.approved_date,all_R.rejected_date from " +
							"All_Request as all_R,emp_official_info as emp, DESIGNATION as desg    where all_R.Req_Id='"+requestNo+"' and all_R.Req_Type='Leave' and " +
							"((emp.PERNR=all_R.Last_Approver) or (emp.PERNR=all_R.Pending_Approver))  and (emp.DSGID=desg.DSGID) ";
					    ResultSet rsApproverDsg=ad.selectQuery(getApproverDesig);
						while(rsApproverDsg.next())
						{
							LeaveForm lvform=new LeaveForm();
							HRid=rsApproverDsg.getString("Hr_Id");
							String reqstatus=rsApproverDsg.getString("Req_Status");
							lvform.setStatus(rsApproverDsg.getString("Req_Status"));
							if(reqstatus.equalsIgnoreCase("Pending"))
							{
								
							 lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
							 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));	
								
							}
							if(reqstatus.equalsIgnoreCase("Approved"))
							{
							lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));
							 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
						   
						   String approveDate=	rsApproverDsg.getString("approved_date");
							
							String a[]=approveDate.split(" ");
							approveDate=a[0];
							String b[]=approveDate.split("-");
							approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
							
							 lvform.setApprovedDate(approveDate);
							}
							
							if(reqstatus.equalsIgnoreCase("Rejected"))
							{
								  lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
								  lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
							    
							     String approveDate=	rsApproverDsg.getString("rejected_date");
									
									String a[]=approveDate.split(" ");
									approveDate=a[0];
									String b[]=approveDate.split("-");
									approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
									
									 lvform.setApprovedDate(approveDate);
							}
							if(reqstatus.equalsIgnoreCase("Cancelled"))
							{
								  lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
								  lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
							    
							     String approveDate=	rsApproverDsg.getString("rejected_date");
									
									String a[]=approveDate.split(" ");
									approveDate=a[0];
									String b[]=approveDate.split("-");
									approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
									
									 lvform.setApprovedDate(approveDate);
							}
							lvform.setComments(rsApproverDsg.getString("Comments"));
							
							if(HRid!=null)
							{
								if( reqstatus.equalsIgnoreCase("Approved")){
								String hrdetails="select emp.EMP_FULLNAME,des.DSGSTXT from emp_official_info as emp,DESIGNATION as des where PERNR='"+HRid+"' and emp.DSGID=des.DSGID";
								
								ResultSet rs1=ad.selectQuery(hrdetails);
								
								while(rs1.next())
								{
									lvform.setApprover(rs1.getString("EMP_FULLNAME"));
									 lvform.setAppDesig(rs1.getString("DSGSTXT"));
								}
								rs1.close();
							}
							}
							
							
							paralist.add(lvform);
							
						}
						rsApproverDsg.close();
						
						
						///Actual approver 
						
						String actual="select a.*,e.EMP_FULLNAME,d.DSGSTXT from All_Request a,emp_official_info e,DESIGNATION d where Req_Id='"+requestNo+"' and Req_Type='Cancel Leave'  and e.PERNR=a.Actual_Approver and e.DSGID=d.DSGID  ";
						ResultSet rsact=ad.selectQuery(actual);
						if(rsact.next())
						{
							LeaveForm l=new LeaveForm();
							l.setApprover(rsact.getString("EMP_FULLNAME"));	
						 l.setAppDesig(rsact.getString("DSGSTXT"));	
							l.setStatus(rsact.getString("Actual_Approver_status"));
							  String approveDate=rsact.getString("Actual_Approved_Date");
								
								String a[]=approveDate.split(" ");
								approveDate=a[0];
								String b[]=approveDate.split("-");
								approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
								
								 l.setApprovedDate(approveDate);
								 l.setComments(rsact.getString("Actual_Approved_Comments"));
									paralist.add(l);
						}
						
						rsact.close();
						request.setAttribute("parallelapprovers", paralist);
				}
				
				LinkedList leaveReason=new LinkedList();
				LinkedList leaveDetReason=new LinkedList();
				
				String reason="select * from LEAVE_REASON";
				ResultSet a=ad.selectQuery(reason);
				try {
					while(a.next())
					{
				leaveReason.add(a.getString("Reason"));
				leaveDetReason.add(a.getString("Detailed_Reason"));
					}
					leaveForm.setLeaveReason(leaveReason);
					leaveForm.setLeaveDetReason(leaveDetReason);
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				a.close();
				
			
			String sql1="select * from leave_details where id='"+requestNo  + "' and documents not like ''";
			ResultSet rs11=ad.selectQuery(sql1);
				LeaveForm leaveForm1=null;
				ArrayList a1=new ArrayList();
				while(rs11.next()) {
					leaveForm1=new LeaveForm();
					leaveForm1.setDocumentName(rs11.getString("documents"));
					leaveForm1.setId(rs11.getString("id"));
					a1.add(leaveForm1);
				}
				rs11.close();
				request.setAttribute("documentDetails", a1);
			request.setAttribute("submitDetails", "submitDetails");
					request.setAttribute("leave", "leave");
			}
		rs.close();	
		}catch (Exception e) {
			e.printStackTrace();
		}
		

			
	
		//remarks

		String comments="select * from All_Request where Req_Id='"+requestNo+"' and req_type='Cancel Leave' ";
		ResultSet a=ad.selectQuery(comments);
		try {
			while(a.next())
			{
				leaveForm.setRemark(a.getString("Comments"));
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			a.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		return mapping.findForward("displaycancelRequest");
	}
	
	
	public ActionForward selectOTRequest(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
{
		

		
String HRid="";
HRApprovalForm leaveForm=(HRApprovalForm)form;// TODO Auto-generated method stub
String Id=request.getParameter("requstNo");
leaveForm.setId(Id);
HttpSession session=request.getSession();
UserInfo user=(UserInfo)session.getAttribute("user");

String reqmon="";
String reqyear="";
String reqstart="";
String reqend="";
String empcode="";
String reqmonname="";
String reqstart1="";
String reqend1="";

int j = 1;
int reqby = 0;
LinkedList comp = new LinkedList();
String status = "";
int requesterNo = Integer.parseInt(Id);

String getcomoff = "select right(left(convert(varchar(11),c.FromDate,106) ,6),3)as monname,day(c.FromDate) as startday,day(c.ToDate) as enday,right('0' + rtrim(month(c.FromDate)),2) as mon,YEAR(c.FromDate) as year,c.*,e.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT from OVER_TIME_DETAILS c,emp_official_info e,DEPARTMENT dept,DESIGNATION desg where Req_no='"
		+ requesterNo
		+ "' and e.PERNR=c.Pernr and dept.DPTID=e.DPTID and desg.DSGID=e.DSGID";
ResultSet a = ad.selectQuery(getcomoff);

try {
	while (a.next()) {
		LeaveForm l = new LeaveForm();
		reqmonname=a.getString("monname");
		reqmon=a.getString("mon");
		reqyear=a.getString("year");
		leaveForm.setStatus(a.getString("cancelflag"));
		leaveForm.setEmployeeNo(a.getString("EMP_FULLNAME"));
		reqmon=a.getString("mon");
		reqyear=a.getString("year");
		leaveForm.setStartDate(EMicroUtils.display(a
				.getDate("FromDate")));
		leaveForm
				.setEndDate(EMicroUtils.display(a.getDate("ToDate")));
		leaveForm.setReason(a.getString("Reason"));
		status = a.getString("ApprvrStatus");
		reqby = a.getInt("RequestedBy");
		reqstart1=display1(a.getDate("FromDate"));
		reqstart=a.getString("FromDate");
		reqend1=display1(a.getDate("ToDate"));
		reqend=a.getString("ToDate");
		l.setSlmindur(j);
		l.setEmployeeNumber(Integer.toString(a.getInt("Pernr")));
		l.setEmployeeName(a.getString("EMP_FULLNAME"));
		l.setDepartment(a.getString("DPTSTXT"));
		l.setDesignation(a.getString("DSGSTXT"));
		l.setNofhrs(a.getString("NoHRS"));

		++j;
		comp.add(l);

	}
} catch (SQLException e) {

	e.printStackTrace();
}
request.setAttribute("comp", comp);


// plant
String app = "";
// PLANT HEAD



if (status.equalsIgnoreCase("Pending")) {
	app = "select a.*,e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from All_Request a,emp_official_info e,DEPARTMENT dep,DESIGNATION desg where Req_Type='OverTime' and a.Req_Id='"
			+ requesterNo
			+ "' and e.PERNR=a.Pending_Approver and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID "
			+ "union "
			 +"select a.*,e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from All_Request a,emp_official_info e,DEPARTMENT dep,DESIGNATION desg where Req_Type='OverTime' and a.Req_Id='"
				+ requesterNo
				+ "' and e.PERNR=a.Actual_Approver and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID ";

} else {
	app = "select a.*,e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from All_Request a,emp_official_info e,DEPARTMENT dep,DESIGNATION desg where  Req_Type='OverTime' and a.Req_Id='"
			+ requesterNo
			+ "' and e.PERNR=a.Actual_Approver and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID ";
		

}
List appList = new LinkedList();
ResultSet rsAppr = ad.selectQuery(app);
String duplicate="";
try {
	while (rsAppr.next()) {
		ApprovalsForm appr = new ApprovalsForm();
		appr.setApprover(rsAppr.getString("EMP_FULLNAME"));
		appr.setDesignation(rsAppr.getString("DSGSTXT"));
		appr.setApproveStatus(rsAppr.getString("Req_Status"));
		String approvaStatus = rsAppr.getString("Req_Status");
		if (approvaStatus.equals("Pending")) {
			appr.setApproveDate("");
			appr.setComments("");
		}
		if (approvaStatus.equals("Approved")
				|| approvaStatus.equals("Completed")) {
			appr.setApproveDate(rsAppr.getString("approved_date"));
			appr.setComments(rsAppr.getString("Comments"));
		}
		if (approvaStatus.equals("Rejected")
				|| approvaStatus.equals("Cancelled")) {
			appr.setApproveDate(rsAppr.getString("rejected_date"));
			appr.setComments(rsAppr.getString("Comments"));
		}

		
		if(!duplicate.equalsIgnoreCase(rsAppr.getString("approved_date")))
		appList.add(appr);
		duplicate=rsAppr.getString("approved_date");
	}
	request.setAttribute("appList", appList);
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}
//remarks

String comments="select * from All_Request where Req_Id='"+Id+"' and req_type='Cancel OT' ";
ResultSet a1=ad.selectQuery(comments);
try {
	while(a1.next())
	{
		leaveForm.setRemark(a1.getString("Comments"));
	}
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}

if(true)
{
	//Attendance

	SAPAttendenceDAO dao = new SAPAttendenceDAO();

	String month=reqyear+reqmon+"01";



	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Date datenow = new Date();
	String time = sdf.format(datenow);

	String today[]=time.split("-");

	int datetoday=Integer.parseInt(today[2]);
	String monthtoday=today[1];
	String monName=monthtoday;

	if (monName.equals("01"))
		monName = "Jan";
	if (monName.equals("02"))
		monName = "Feb";
	if (monName.equals("03"))
		monName = "Mar";
	if (monName.equals("04"))
		monName = "Apr";
	if (monName.equals("05"))
		monName = "May";
	if (monName.equals("06"))
		monName = "Jun";
	if (monName.equals("07"))
		monName = "Jul";
	if (monName.equals("08"))
		monName = "Aug";
	if (monName.equals("09"))
		monName = "Sep";
	if (monName.equals("10"))
		monName = "Oct";
	if (monName.equals("11"))
		monName = "Nov";
	if (monName.equals("12"))
		monName = "Dec";



	LinkedList attDataList = new LinkedList();
	Calendar cal = Calendar.getInstance();



	String calendarmon=monName;
	String mon=month.substring(0, 3);
	String year = month.substring(month.length() - 4, month.length());

	/*
	 * String reqyear=month.substring(month.length()-2, month.length());
	 * String reqmonth=monName+reqyear; AttendenceForm attendenceForm = new
	 * AttendenceForm(); attendenceForm.setEmpcode(empNo);
	 * attendenceForm.setDat(reqmonth); AttendenceAction a4=new
	 * AttendenceAction(); if(monName.equalsIgnoreCase("Nov")) {
	 * a4.submit(mapping, attendenceForm, request, response); return
	 * mapping.findForward("display"); }
	 */




	if (monName.equals("Jan"))
		monName = "01";
	if (monName.equals("Feb"))
		monName = "02";
	if (monName.equals("Mar"))
		monName = "03";
	if (monName.equals("Apr"))
		monName = "04";
	if (monName.equals("May"))
		monName = "05";
	if (monName.equals("Jun"))
		monName = "06";
	if (monName.equals("Jul"))
		monName = "07";
	if (monName.equals("Aug"))
		monName = "08";
	if (monName.equals("Sep"))
		monName = "09";
	if (monName.equals("Oct"))
		monName = "10";
	if (monName.equals("Nov"))
		monName = "11";
	if (monName.equals("Dec"))
		monName = "12";

	String date ="";	




	ArrayList att = new ArrayList();

	cal.set(Integer.parseInt(year), Integer.parseInt(monName)-1, 1);
	int days = cal.getActualMaximum(Calendar.DAY_OF_MONTH);

	int i=1;
	/*    String query="EXEC daily_report_status_Att '"+days+"','"+monName+"','"+year+"','"+empNo+"' ";
	int k=ad.SqlExecuteUpdate(query);*/

		String s9 = " select date,convert(varchar(11),date,106) as date1,left(DATENAME(WEEKDAY,date),3) as day,left(In_time,5) as intime,left(out_time,5) as outtime,"
				+ "left(status,2) as instatus,right(status,2) as outstatus,shift from Report_Daily_wise,emp_official_info where emp_official_info.PERNR=Report_Daily_wise.Pernr and emp_official_info.LOCID=Report_Daily_wise.Location and  emp_official_info.Pernr='"+empcode+"'  and year(date)='"+reqyear+"' "
						+ "and date between '"+reqstart1+"' and '"+reqend1+"' order by date";
		ResultSet rs9 = ad.selectQuery(s9);
		try {
			while(rs9.next())
			{
				
				SAPAttendenceForm help = new SAPAttendenceForm();
				help.setDate(rs9.getString("date1"));
				help.setDay(rs9.getString("day"));
				date=rs9.getString("date");
				
				if(!(rs9.getString("intime").equalsIgnoreCase("00:00") && rs9.getString("instatus").equalsIgnoreCase("AA")))
	    			help.setiNTIME(rs9.getString("intime"));


		    	if(!(rs9.getString("outtime").equalsIgnoreCase("00:00") && rs9.getString("outstatus").equalsIgnoreCase("AA")))
				help.setoUTTIME(rs9.getString("outtime"));

		    	if(monName.equalsIgnoreCase(monthtoday))
		    	{
	            if(datetoday>=i)
	            {
	            	help.setiNSTATUS(rs9.getString("instatus"));
	            	if(datetoday==i)
	            	{
	            		if(rs9.getString("outstatus").equalsIgnoreCase("AA"))
	            		{
	            			help.setoUTSTATUS("");
	            		}
	            		else
	            		{
	            			help.setoUTSTATUS(rs9.getString("outstatus"));
	            		}
	            	}
	            	else
	            	{
	            		help.setoUTSTATUS(rs9.getString("outstatus"));
	            	}
					
					
					switch(rs9.getString("shift")){
					case "0001": help.setShift("Gen(0001)");
					  break;
case "0002": help.setShift("Gen(0002)");
					  break;
case "0003": help.setShift("FS(0003)");
					  break;
case "0004": help.setShift("SS(0004)");
					  break;
case "0005": help.setShift("TS(0005)");
					  break;
case "0006": help.setShift("SS1(0006)");
					  break;
case "0007": help.setShift("FS(0007)");
					  break;
case "0008": help.setShift("SS0008)");
					  break;
case "0009": help.setShift("TS(0009)");
					  break;
case "0010": help.setShift("NS(0010)");
					  break;
case "0011": help.setShift("SS-SM(0011)");
					  break;
case "0012": help.setShift("EnggB(0012)");
					  break;
case "0013": help.setShift("EnggC(0013)");
					  break;
case "0014": help.setShift("SecA(0014)");
					  break;
case "0015": help.setShift("SecB(0015)");
					  break;
case "0016": help.setShift("SecC(0016)");
					  break;
case "0017": help.setShift("Gen(0017)");
					  break;
case "0018": help.setShift("Night(0018)");
					  break;
case "0019": help.setShift("Gen(0019)");
					  break;
case "0020": help.setShift("Gen2(0020)");
					  break;
case "0021": help.setShift("2ND(0021)");
					  break;
case "0022": help.setShift("2ND1(0022)");
					  break;
case "0023": help.setShift("EnggGen(0023)");
					  break;
case "0024": help.setShift("EnggGen1(0024)");
					  break;
case "0025": help.setShift("1ST(0025)");
					  break;
case "0026": help.setShift("Engg2ND(0026)");
					  break;
case "0027": help.setShift("3RD(0027)");
					  break;
case "0028": help.setShift("QC1ST(0028)");
					  break;
case "0030": help.setShift("Gen4(0030)");
					  break;
case "0031": help.setShift("1ST(0031)");
					  break;
case "0032": help.setShift("Gen(0032)");
					  break;
case "0033": help.setShift("2ND(0033)");
					  break;
case "0034": help.setShift("Night(0034)");
					  break;
case "0035": help.setShift("GOASecA(0035)");
					  break;
case "0036": help.setShift("GOASecB(0036)");
					  break;
case "0037": help.setShift("GOASecC(0037)");
					  break;
case "0038": help.setShift("Gen3(0038)");
					  break;
case "0029": help.setShift("QC2ND(0029)");
					  break;
case "0039": help.setShift("Gen1(0039)");
					  break;
case "0040": help.setShift("Gen2(0040)");
					  break;
case "0041": help.setShift("FS(0041)");
					  break;
case "0042": help.setShift("SS(0042)");
					  break;
case "0043": help.setShift("TS(0043)");
					  break;
case "0054": help.setShift("Gen(0054)");
					  break;
case "0055": help.setShift("1ST(0055)");
					  break;
case "0056": help.setShift("2ND(0056)");
					  break;
case "0057": help.setShift("Night(0057)");
					  break;
case "0058": help.setShift("Gen5(0058)");
					  break;
case "0059": help.setShift("Gen6(0059)");
					  break;
case "0060": help.setShift("Gen(0060)");
					  break;
case "0061": help.setShift("FS(0061)");
					  break;
case "0062": help.setShift("SS(0062)");
					  break;
case "0063": help.setShift("TS(0063)");
					  break;
case "0064": help.setShift("Night(0064)");
					  break;
case "0065": help.setShift("Gen(0065)");
					  break;
case "0066": help.setShift("SSQC(0066)");
					  break;
case "0067": help.setShift("FS(0067)");
					  break;
case "0069": help.setShift("Gen(0069)");
					  break;
case "0070": help.setShift("Gen2(0070)");
					  break;
case "0071": help.setShift("Gen3(0071)");
					  break;
case "0072": help.setShift("QC2ND1(0072)");
					  break;
case "0074": help.setShift("EnggA(0074)");
					  break;
case "0075": help.setShift("EnggD(0075)");
					  break;
case "0044": help.setShift("FS1(0044)");
					  break;
case "0045": help.setShift("FS2(0045)");
					  break;
case "0046": help.setShift("Gen1(0046)");
					  break;
case "0047": help.setShift("Gen2(0047)");
					  break;
case "0048": help.setShift("SS(0048)");
					  break;
case "0049": help.setShift("3RD(0049)");
					  break;
case "0050": help.setShift("Gen(0050)");
					  break;
case "0051": help.setShift("FS(0051)");
					  break;
case "0052": help.setShift("SS(0052)");
					  break;
case "0053": help.setShift("TS(0053)");
					  break;
case "0068": help.setShift("Gen(0068)");
					  break;
case "0073": help.setShift("QcNig(0073)");
					  break;
					  
case "0087": help.setShift("Gen(0087)");
					  break;
case "0088": help.setShift("RD(0088)");
					  break;
case "0089": help.setShift("Sec(0089)");
					  break;
}
				


			
	                	
	            }
	            else
		    	{
		    		
	            	help.setiNSTATUS("");
					help.setoUTSTATUS("");	
	                  
		    	}
	            
	    	}
		    	else
		    	{
		    		
		    		help.setiNSTATUS(rs9.getString("instatus"));
					help.setoUTSTATUS(rs9.getString("outstatus"));
					
					switch(rs9.getString("shift")){
					case "0001": help.setShift("Gen(0001)");
					  break;
case "0002": help.setShift("Gen(0002)");
					  break;
case "0003": help.setShift("FS(0003)");
					  break;
case "0004": help.setShift("SS(0004)");
					  break;
case "0005": help.setShift("TS(0005)");
					  break;
case "0006": help.setShift("SS1(0006)");
					  break;
case "0007": help.setShift("FS(0007)");
					  break;
case "0008": help.setShift("SS0008)");
					  break;
case "0009": help.setShift("TS(0009)");
					  break;
case "0010": help.setShift("NS(0010)");
					  break;
case "0011": help.setShift("SS-SM(0011)");
					  break;
case "0012": help.setShift("EnggB(0012)");
					  break;
case "0013": help.setShift("EnggC(0013)");
					  break;
case "0014": help.setShift("SecA(0014)");
					  break;
case "0015": help.setShift("SecB(0015)");
					  break;
case "0016": help.setShift("SecC(0016)");
					  break;
case "0017": help.setShift("Gen(0017)");
					  break;
case "0018": help.setShift("Night(0018)");
					  break;
case "0019": help.setShift("Gen(0019)");
					  break;
case "0020": help.setShift("Gen2(0020)");
					  break;
case "0021": help.setShift("2ND(0021)");
					  break;
case "0022": help.setShift("2ND1(0022)");
					  break;
case "0023": help.setShift("EnggGen(0023)");
					  break;
case "0024": help.setShift("EnggGen1(0024)");
					  break;
case "0025": help.setShift("1ST(0025)");
					  break;
case "0026": help.setShift("Engg2ND(0026)");
					  break;
case "0027": help.setShift("3RD(0027)");
					  break;
case "0028": help.setShift("QC1ST(0028)");
					  break;
case "0030": help.setShift("Gen4(0030)");
					  break;
case "0031": help.setShift("1ST(0031)");
					  break;
case "0032": help.setShift("Gen(0032)");
					  break;
case "0033": help.setShift("2ND(0033)");
					  break;
case "0034": help.setShift("Night(0034)");
					  break;
case "0035": help.setShift("GOASecA(0035)");
					  break;
case "0036": help.setShift("GOASecB(0036)");
					  break;
case "0037": help.setShift("GOASecC(0037)");
					  break;
case "0038": help.setShift("Gen3(0038)");
					  break;
case "0029": help.setShift("QC2ND(0029)");
					  break;
case "0039": help.setShift("Gen1(0039)");
					  break;
case "0040": help.setShift("Gen2(0040)");
					  break;
case "0041": help.setShift("FS(0041)");
					  break;
case "0042": help.setShift("SS(0042)");
					  break;
case "0043": help.setShift("TS(0043)");
					  break;
case "0054": help.setShift("Gen(0054)");
					  break;
case "0055": help.setShift("1ST(0055)");
					  break;
case "0056": help.setShift("2ND(0056)");
					  break;
case "0057": help.setShift("Night(0057)");
					  break;
case "0058": help.setShift("Gen5(0058)");
					  break;
case "0059": help.setShift("Gen6(0059)");
					  break;
case "0060": help.setShift("Gen(0060)");
					  break;
case "0061": help.setShift("FS(0061)");
					  break;
case "0062": help.setShift("SS(0062)");
					  break;
case "0063": help.setShift("TS(0063)");
					  break;
case "0064": help.setShift("Night(0064)");
					  break;
case "0065": help.setShift("Gen(0065)");
					  break;
case "0066": help.setShift("SSQC(0066)");
					  break;
case "0067": help.setShift("FS(0067)");
					  break;
case "0069": help.setShift("Gen(0069)");
					  break;
case "0070": help.setShift("Gen2(0070)");
					  break;
case "0071": help.setShift("Gen3(0071)");
					  break;
case "0072": help.setShift("QC2ND1(0072)");
					  break;
case "0074": help.setShift("EnggA(0074)");
					  break;
case "0075": help.setShift("EnggD(0075)");
					  break;
case "0044": help.setShift("FS1(0044)");
					  break;
case "0045": help.setShift("FS2(0045)");
					  break;
case "0046": help.setShift("Gen1(0046)");
					  break;
case "0047": help.setShift("Gen2(0047)");
					  break;
case "0048": help.setShift("SS(0048)");
					  break;
case "0049": help.setShift("3RD(0049)");
					  break;
case "0050": help.setShift("Gen(0050)");
					  break;
case "0051": help.setShift("FS(0051)");
					  break;
case "0052": help.setShift("SS(0052)");
					  break;
case "0053": help.setShift("TS(0053)");
					  break;
case "0068": help.setShift("Gen(0068)");
					  break;
case "0073": help.setShift("QcNig(0073)");
					  break;
case "0087": help.setShift("Gen(0087)");
break;
case "0088": help.setShift("RD(0088)");
break;
case "0089": help.setShift("Sec(0089)");
break;
}
				            
		    	}
			   

		    	String data = "select Approvel_Status,reason from leave_details where  user_id='"
						+ empcode
						+ "' and Approvel_Status in('Approved','Pending') and record_status!='Draft'  and '"
						+  date 
						+ "' between start_date and  end_date and YEAR(start_date)='"
						+ year + "'";
				ResultSet rs10 = ad.selectQuery(data);
				while (rs10.next()) {
					if (rs10.getString("Approvel_Status").equalsIgnoreCase(
							"Approved"))
						help.setRemarks(rs10.getString("reason"));
					else
						help.setRemarks("Leave to be Approved");
				}
				rs10.close();
				String data1 = "select Approver_Status,reason from OnDuty_details where  user_id='"
						+empcode
						+ "' and Approver_Status in('Approved','In Process') and '"
						+ date
						+ "' between start_date and  end_date  and YEAR(start_date)='"
						+ year + "'";
				ResultSet rs101 = ad.selectQuery(data1);
				while (rs101.next()) {
					if (rs101.getString("Approver_Status")
							.equalsIgnoreCase("Approved"))
						help.setRemarks(rs101.getString("reason"));
					else
						help.setRemarks("Onduty to be Approved");
				} 

				rs101.close();
				



				String data11 = "select * from holidays where date = '"+date+"' and location = '"+user.getPlantId()+"' ";

				ResultSet rs1011 = ad.selectQuery(data11);
				try {
					while (rs1011.next()) {

							help.setRemarks(rs1011.getString("Holiday_Name"));
							help.setMessage("HOL");
							

					}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				rs1011.close();
			i++;
			
			attDataList.add(help);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs9.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if (attDataList.size() > 0) {
			request.setAttribute("attDataList", attDataList);
		}
		
		  request.setAttribute("cancelbutton", "cancelbutton");
}
return mapping.findForward("displayOTcancelRequest");

}
	public ActionForward selectCompoffRequest(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
{
		
String HRid="";
HRApprovalForm leaveForm=(HRApprovalForm)form;// TODO Auto-generated method stub
String Id=request.getParameter("requstNo");
leaveForm.setId(Id);
HttpSession session=request.getSession();
UserInfo user=(UserInfo)session.getAttribute("user");

String reqmon="";
String reqyear="";
String reqstart="";
String reqend="";
String empcode="";
String reqmonname="";
String reqstart1="";
String reqend1="";

int j = 1;
int reqby = 0;
LinkedList comp = new LinkedList();
String status = "";
int requesterNo = Integer.parseInt(Id);
String getcomoff = "select right(left(convert(varchar(11),c.FromDate,106) ,6),3)as monname,day(c.FromDate) as startday,day(c.ToDate) as enday,right('0' + rtrim(month(c.FromDate)),2) as mon,YEAR(c.FromDate) as year,c.*,e.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT,COMP_OT_TYPE.Reason as compreason from COMP_OT c left outer join COMP_OT_TYPE on COMP_OT_TYPE.id=c.Comp_type,emp_official_info e,DEPARTMENT dept,DESIGNATION desg where Req_no='"
		+ requesterNo
		+ "' and e.PERNR=c.Pernr and dept.DPTID=e.DPTID and desg.DSGID=e.DSGID";
ResultSet a = ad.selectQuery(getcomoff);
try {
	while (a.next()) {
		LeaveForm l = new LeaveForm();
		reqmonname=a.getString("monname");
		reqmon=a.getString("mon");
		reqyear=a.getString("year");
		leaveForm.setStatus(a.getString("cancelflag"));
		leaveForm.setEmployeeNo(a.getString("EMP_FULLNAME"));
		reqmon=a.getString("mon");
		reqyear=a.getString("year");
		leaveForm.setStartDate(EMicroUtils.display(a
				.getDate("FromDate")));
		leaveForm
				.setEndDate(EMicroUtils.display(a.getDate("ToDate")));
		leaveForm.setReason(a.getString("Reason"));
		status = a.getString("ApprvrStatus");
		reqby = a.getInt("RequestedBy");
		reqstart1=display1(a.getDate("FromDate"));
		reqstart=a.getString("FromDate");
		reqend1=display1(a.getDate("ToDate"));
		reqend=a.getString("ToDate");
		l.setSlmindur(j);
		l.setEmployeeNumber(Integer.toString(a.getInt("Pernr")));
		l.setEmployeeName(a.getString("EMP_FULLNAME"));
		l.setDepartment(a.getString("DPTSTXT"));
		l.setDesignation(a.getString("DSGSTXT"));
		l.setNofhrs(a.getString("NoHRS"));
		String app = a.getString("Applicabale");
		if (app.equalsIgnoreCase("BS"))
			app = "Before Shift Start Time";
		if (app.equalsIgnoreCase("AS"))
			app = "After Shift End Time";
		leaveForm.setReasonType(a.getString("compreason"));

		l.setShift(app);
		++j;
		comp.add(l);

	}
} catch (SQLException e) {

	e.printStackTrace();
}
request.setAttribute("comp", comp);


// plant
String app = "";
// PLANT HEAD



if (status.equalsIgnoreCase("Pending")) {
	app = "select a.*,e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from All_Request a,emp_official_info e,DEPARTMENT dep,DESIGNATION desg where Req_Type='Comp-Off/OT' and a.Req_Id='"
			+ requesterNo
			+ "' and e.PERNR=a.Pending_Approver and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID "
			+ "union "
			 +"select a.*,e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from All_Request a,emp_official_info e,DEPARTMENT dep,DESIGNATION desg where Req_Type='Comp-Off/OT' and a.Req_Id='"
				+ requesterNo
				+ "' and e.PERNR=a.Actual_Approver and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID ";

} else {
	app = "select a.*,e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from All_Request a,emp_official_info e,DEPARTMENT dep,DESIGNATION desg where  Req_Type='Comp-Off/OT' and a.Req_Id='"
			+ requesterNo
			+ "' and e.PERNR=a.Actual_Approver and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID ";
		

}
List appList = new LinkedList();
ResultSet rsAppr = ad.selectQuery(app);
String duplicate="";
try {
	while (rsAppr.next()) {
		ApprovalsForm appr = new ApprovalsForm();
		appr.setApprover(rsAppr.getString("EMP_FULLNAME"));
		appr.setDesignation(rsAppr.getString("DSGSTXT"));
		appr.setApproveStatus(rsAppr.getString("Req_Status"));
		String approvaStatus = rsAppr.getString("Req_Status");
		if (approvaStatus.equals("Pending")) {
			appr.setApproveDate("");
			appr.setComments("");
		}
		if (approvaStatus.equals("Approved")
				|| approvaStatus.equals("Completed")) {
			appr.setApproveDate(rsAppr.getString("approved_date"));
			appr.setComments(rsAppr.getString("Comments"));
		}
		if (approvaStatus.equals("Rejected")
				|| approvaStatus.equals("Cancelled")) {
			appr.setApproveDate(rsAppr.getString("rejected_date"));
			appr.setComments(rsAppr.getString("Comments"));
		}

		
		if(!duplicate.equalsIgnoreCase(rsAppr.getString("approved_date")))
		appList.add(appr);
		duplicate=rsAppr.getString("approved_date");
	}
	request.setAttribute("appList", appList);
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}
//remarks

String comments="select * from All_Request where Req_Id='"+Id+"' and req_type='Cancel Comp-Off' ";
ResultSet a1=ad.selectQuery(comments);
try {
	while(a1.next())
	{
		leaveForm.setRemark(a1.getString("Comments"));
	}
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}

if(true)
{
	//Attendance

	SAPAttendenceDAO dao = new SAPAttendenceDAO();

	String month=reqyear+reqmon+"01";



	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Date datenow = new Date();
	String time = sdf.format(datenow);

	String today[]=time.split("-");

	int datetoday=Integer.parseInt(today[2]);
	String monthtoday=today[1];
	String monName=monthtoday;

	if (monName.equals("01"))
		monName = "Jan";
	if (monName.equals("02"))
		monName = "Feb";
	if (monName.equals("03"))
		monName = "Mar";
	if (monName.equals("04"))
		monName = "Apr";
	if (monName.equals("05"))
		monName = "May";
	if (monName.equals("06"))
		monName = "Jun";
	if (monName.equals("07"))
		monName = "Jul";
	if (monName.equals("08"))
		monName = "Aug";
	if (monName.equals("09"))
		monName = "Sep";
	if (monName.equals("10"))
		monName = "Oct";
	if (monName.equals("11"))
		monName = "Nov";
	if (monName.equals("12"))
		monName = "Dec";



	LinkedList attDataList = new LinkedList();
	Calendar cal = Calendar.getInstance();



	String calendarmon=monName;
	String mon=month.substring(0, 3);
	String year = month.substring(month.length() - 4, month.length());

	/*
	 * String reqyear=month.substring(month.length()-2, month.length());
	 * String reqmonth=monName+reqyear; AttendenceForm attendenceForm = new
	 * AttendenceForm(); attendenceForm.setEmpcode(empNo);
	 * attendenceForm.setDat(reqmonth); AttendenceAction a4=new
	 * AttendenceAction(); if(monName.equalsIgnoreCase("Nov")) {
	 * a4.submit(mapping, attendenceForm, request, response); return
	 * mapping.findForward("display"); }
	 */




	if (monName.equals("Jan"))
		monName = "01";
	if (monName.equals("Feb"))
		monName = "02";
	if (monName.equals("Mar"))
		monName = "03";
	if (monName.equals("Apr"))
		monName = "04";
	if (monName.equals("May"))
		monName = "05";
	if (monName.equals("Jun"))
		monName = "06";
	if (monName.equals("Jul"))
		monName = "07";
	if (monName.equals("Aug"))
		monName = "08";
	if (monName.equals("Sep"))
		monName = "09";
	if (monName.equals("Oct"))
		monName = "10";
	if (monName.equals("Nov"))
		monName = "11";
	if (monName.equals("Dec"))
		monName = "12";

	String date ="";	




	ArrayList att = new ArrayList();

	cal.set(Integer.parseInt(year), Integer.parseInt(monName)-1, 1);
	int days = cal.getActualMaximum(Calendar.DAY_OF_MONTH);

	int i=1;
	/*    String query="EXEC daily_report_status_Att '"+days+"','"+monName+"','"+year+"','"+empNo+"' ";
	int k=ad.SqlExecuteUpdate(query);*/

		String s9 = " select date,convert(varchar(11),date,106) as date1,left(DATENAME(WEEKDAY,date),3) as day,left(In_time,5) as intime,left(out_time,5) as outtime,"
				+ "left(status,2) as instatus,right(status,2) as outstatus,shift from Report_Daily_wise,emp_official_info where emp_official_info.PERNR=Report_Daily_wise.Pernr and emp_official_info.LOCID=Report_Daily_wise.Location and  emp_official_info.Pernr='"+empcode+"'  and year(date)='"+reqyear+"' "
						+ "and date between '"+reqstart1+"' and '"+reqend1+"' order by date";
		ResultSet rs9 = ad.selectQuery(s9);
		try {
			while(rs9.next())
			{
				
				SAPAttendenceForm help = new SAPAttendenceForm();
				help.setDate(rs9.getString("date1"));
				help.setDay(rs9.getString("day"));
				date=rs9.getString("date");
				
				if(!(rs9.getString("intime").equalsIgnoreCase("00:00") && rs9.getString("instatus").equalsIgnoreCase("AA")))
	    			help.setiNTIME(rs9.getString("intime"));


		    	if(!(rs9.getString("outtime").equalsIgnoreCase("00:00") && rs9.getString("outstatus").equalsIgnoreCase("AA")))
				help.setoUTTIME(rs9.getString("outtime"));

		    	if(monName.equalsIgnoreCase(monthtoday))
		    	{
	            if(datetoday>=i)
	            {
	            	help.setiNSTATUS(rs9.getString("instatus"));
	            	if(datetoday==i)
	            	{
	            		if(rs9.getString("outstatus").equalsIgnoreCase("AA"))
	            		{
	            			help.setoUTSTATUS("");
	            		}
	            		else
	            		{
	            			help.setoUTSTATUS(rs9.getString("outstatus"));
	            		}
	            	}
	            	else
	            	{
	            		help.setoUTSTATUS(rs9.getString("outstatus"));
	            	}
					
					
					switch(rs9.getString("shift")){
					case "0001": help.setShift("Gen(0001)");
					  break;
case "0002": help.setShift("Gen(0002)");
					  break;
case "0003": help.setShift("FS(0003)");
					  break;
case "0004": help.setShift("SS(0004)");
					  break;
case "0005": help.setShift("TS(0005)");
					  break;
case "0006": help.setShift("SS1(0006)");
					  break;
case "0007": help.setShift("FS(0007)");
					  break;
case "0008": help.setShift("SS0008)");
					  break;
case "0009": help.setShift("TS(0009)");
					  break;
case "0010": help.setShift("NS(0010)");
					  break;
case "0011": help.setShift("SS-SM(0011)");
					  break;
case "0012": help.setShift("EnggB(0012)");
					  break;
case "0013": help.setShift("EnggC(0013)");
					  break;
case "0014": help.setShift("SecA(0014)");
					  break;
case "0015": help.setShift("SecB(0015)");
					  break;
case "0016": help.setShift("SecC(0016)");
					  break;
case "0017": help.setShift("Gen(0017)");
					  break;
case "0018": help.setShift("Night(0018)");
					  break;
case "0019": help.setShift("Gen(0019)");
					  break;
case "0020": help.setShift("Gen2(0020)");
					  break;
case "0021": help.setShift("2ND(0021)");
					  break;
case "0022": help.setShift("2ND1(0022)");
					  break;
case "0023": help.setShift("EnggGen(0023)");
					  break;
case "0024": help.setShift("EnggGen1(0024)");
					  break;
case "0025": help.setShift("1ST(0025)");
					  break;
case "0026": help.setShift("Engg2ND(0026)");
					  break;
case "0027": help.setShift("3RD(0027)");
					  break;
case "0028": help.setShift("QC1ST(0028)");
					  break;
case "0030": help.setShift("Gen4(0030)");
					  break;
case "0031": help.setShift("1ST(0031)");
					  break;
case "0032": help.setShift("Gen(0032)");
					  break;
case "0033": help.setShift("2ND(0033)");
					  break;
case "0034": help.setShift("Night(0034)");
					  break;
case "0035": help.setShift("GOASecA(0035)");
					  break;
case "0036": help.setShift("GOASecB(0036)");
					  break;
case "0037": help.setShift("GOASecC(0037)");
					  break;
case "0038": help.setShift("Gen3(0038)");
					  break;
case "0029": help.setShift("QC2ND(0029)");
					  break;
case "0039": help.setShift("Gen1(0039)");
					  break;
case "0040": help.setShift("Gen2(0040)");
					  break;
case "0041": help.setShift("FS(0041)");
					  break;
case "0042": help.setShift("SS(0042)");
					  break;
case "0043": help.setShift("TS(0043)");
					  break;
case "0054": help.setShift("Gen(0054)");
					  break;
case "0055": help.setShift("1ST(0055)");
					  break;
case "0056": help.setShift("2ND(0056)");
					  break;
case "0057": help.setShift("Night(0057)");
					  break;
case "0058": help.setShift("Gen5(0058)");
					  break;
case "0059": help.setShift("Gen6(0059)");
					  break;
case "0060": help.setShift("Gen(0060)");
					  break;
case "0061": help.setShift("FS(0061)");
					  break;
case "0062": help.setShift("SS(0062)");
					  break;
case "0063": help.setShift("TS(0063)");
					  break;
case "0064": help.setShift("Night(0064)");
					  break;
case "0065": help.setShift("Gen(0065)");
					  break;
case "0066": help.setShift("SSQC(0066)");
					  break;
case "0067": help.setShift("FS(0067)");
					  break;
case "0069": help.setShift("Gen(0069)");
					  break;
case "0070": help.setShift("Gen2(0070)");
					  break;
case "0071": help.setShift("Gen3(0071)");
					  break;
case "0072": help.setShift("QC2ND1(0072)");
					  break;
case "0074": help.setShift("EnggA(0074)");
					  break;
case "0075": help.setShift("EnggD(0075)");
					  break;
case "0044": help.setShift("FS1(0044)");
					  break;
case "0045": help.setShift("FS2(0045)");
					  break;
case "0046": help.setShift("Gen1(0046)");
					  break;
case "0047": help.setShift("Gen2(0047)");
					  break;
case "0048": help.setShift("SS(0048)");
					  break;
case "0049": help.setShift("3RD(0049)");
					  break;
case "0050": help.setShift("Gen(0050)");
					  break;
case "0051": help.setShift("FS(0051)");
					  break;
case "0052": help.setShift("SS(0052)");
					  break;
case "0053": help.setShift("TS(0053)");
					  break;
case "0068": help.setShift("Gen(0068)");
					  break;
case "0073": help.setShift("QcNig(0073)");
					  break;
case "0087": help.setShift("Gen(0087)");
break;
case "0088": help.setShift("RD(0088)");
break;
case "0089": help.setShift("Sec(0089)");
break;
}
				


			
	                	
	            }
	            else
		    	{
		    		
	            	help.setiNSTATUS("");
					help.setoUTSTATUS("");	
	                  
		    	}
	            
	    	}
		    	else
		    	{
		    		
		    		help.setiNSTATUS(rs9.getString("instatus"));
					help.setoUTSTATUS(rs9.getString("outstatus"));
					
					switch(rs9.getString("shift")){
					case "0001": help.setShift("Gen(0001)");
					  break;
case "0002": help.setShift("Gen(0002)");
					  break;
case "0003": help.setShift("FS(0003)");
					  break;
case "0004": help.setShift("SS(0004)");
					  break;
case "0005": help.setShift("TS(0005)");
					  break;
case "0006": help.setShift("SS1(0006)");
					  break;
case "0007": help.setShift("FS(0007)");
					  break;
case "0008": help.setShift("SS0008)");
					  break;
case "0009": help.setShift("TS(0009)");
					  break;
case "0010": help.setShift("NS(0010)");
					  break;
case "0011": help.setShift("SS-SM(0011)");
					  break;
case "0012": help.setShift("EnggB(0012)");
					  break;
case "0013": help.setShift("EnggC(0013)");
					  break;
case "0014": help.setShift("SecA(0014)");
					  break;
case "0015": help.setShift("SecB(0015)");
					  break;
case "0016": help.setShift("SecC(0016)");
					  break;
case "0017": help.setShift("Gen(0017)");
					  break;
case "0018": help.setShift("Night(0018)");
					  break;
case "0019": help.setShift("Gen(0019)");
					  break;
case "0020": help.setShift("Gen2(0020)");
					  break;
case "0021": help.setShift("2ND(0021)");
					  break;
case "0022": help.setShift("2ND1(0022)");
					  break;
case "0023": help.setShift("EnggGen(0023)");
					  break;
case "0024": help.setShift("EnggGen1(0024)");
					  break;
case "0025": help.setShift("1ST(0025)");
					  break;
case "0026": help.setShift("Engg2ND(0026)");
					  break;
case "0027": help.setShift("3RD(0027)");
					  break;
case "0028": help.setShift("QC1ST(0028)");
					  break;
case "0030": help.setShift("Gen4(0030)");
					  break;
case "0031": help.setShift("1ST(0031)");
					  break;
case "0032": help.setShift("Gen(0032)");
					  break;
case "0033": help.setShift("2ND(0033)");
					  break;
case "0034": help.setShift("Night(0034)");
					  break;
case "0035": help.setShift("GOASecA(0035)");
					  break;
case "0036": help.setShift("GOASecB(0036)");
					  break;
case "0037": help.setShift("GOASecC(0037)");
					  break;
case "0038": help.setShift("Gen3(0038)");
					  break;
case "0029": help.setShift("QC2ND(0029)");
					  break;
case "0039": help.setShift("Gen1(0039)");
					  break;
case "0040": help.setShift("Gen2(0040)");
					  break;
case "0041": help.setShift("FS(0041)");
					  break;
case "0042": help.setShift("SS(0042)");
					  break;
case "0043": help.setShift("TS(0043)");
					  break;
case "0054": help.setShift("Gen(0054)");
					  break;
case "0055": help.setShift("1ST(0055)");
					  break;
case "0056": help.setShift("2ND(0056)");
					  break;
case "0057": help.setShift("Night(0057)");
					  break;
case "0058": help.setShift("Gen5(0058)");
					  break;
case "0059": help.setShift("Gen6(0059)");
					  break;
case "0060": help.setShift("Gen(0060)");
					  break;
case "0061": help.setShift("FS(0061)");
					  break;
case "0062": help.setShift("SS(0062)");
					  break;
case "0063": help.setShift("TS(0063)");
					  break;
case "0064": help.setShift("Night(0064)");
					  break;
case "0065": help.setShift("Gen(0065)");
					  break;
case "0066": help.setShift("SSQC(0066)");
					  break;
case "0067": help.setShift("FS(0067)");
					  break;
case "0069": help.setShift("Gen(0069)");
					  break;
case "0070": help.setShift("Gen2(0070)");
					  break;
case "0071": help.setShift("Gen3(0071)");
					  break;
case "0072": help.setShift("QC2ND1(0072)");
					  break;
case "0074": help.setShift("EnggA(0074)");
					  break;
case "0075": help.setShift("EnggD(0075)");
					  break;
case "0044": help.setShift("FS1(0044)");
					  break;
case "0045": help.setShift("FS2(0045)");
					  break;
case "0046": help.setShift("Gen1(0046)");
					  break;
case "0047": help.setShift("Gen2(0047)");
					  break;
case "0048": help.setShift("SS(0048)");
					  break;
case "0049": help.setShift("3RD(0049)");
					  break;
case "0050": help.setShift("Gen(0050)");
					  break;
case "0051": help.setShift("FS(0051)");
					  break;
case "0052": help.setShift("SS(0052)");
					  break;
case "0053": help.setShift("TS(0053)");
					  break;
case "0068": help.setShift("Gen(0068)");
					  break;
case "0073": help.setShift("QcNig(0073)");
					  break;
case "0087": help.setShift("Gen(0087)");
break;
case "0088": help.setShift("RD(0088)");
break;
case "0089": help.setShift("Sec(0089)");
break;
}
				            
		    	}
			   

		    	String data = "select Approvel_Status,reason from leave_details where  user_id='"
						+ empcode
						+ "' and Approvel_Status in('Approved','Pending') and record_status!='Draft'  and '"
						+  date 
						+ "' between start_date and  end_date and YEAR(start_date)='"
						+ year + "'";
				ResultSet rs10 = ad.selectQuery(data);
				while (rs10.next()) {
					if (rs10.getString("Approvel_Status").equalsIgnoreCase(
							"Approved"))
						help.setRemarks(rs10.getString("reason"));
					else
						help.setRemarks("Leave to be Approved");
				}
				rs10.close();
				String data1 = "select Approver_Status,reason from OnDuty_details where  user_id='"
						+empcode
						+ "' and Approver_Status in('Approved','In Process') and '"
						+ date
						+ "' between start_date and  end_date  and YEAR(start_date)='"
						+ year + "'";
				ResultSet rs101 = ad.selectQuery(data1);
				while (rs101.next()) {
					if (rs101.getString("Approver_Status")
							.equalsIgnoreCase("Approved"))
						help.setRemarks(rs101.getString("reason"));
					else
						help.setRemarks("Onduty to be Approved");
				} 

				rs101.close();
				



				String data11 = "select * from holidays where date = '"+date+"' and location = '"+user.getPlantId()+"' ";

				ResultSet rs1011 = ad.selectQuery(data11);
				try {
					while (rs1011.next()) {

							help.setRemarks(rs1011.getString("Holiday_Name"));
							help.setMessage("HOL");
							

					}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				rs1011.close();
			i++;
			
			attDataList.add(help);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs9.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if (attDataList.size() > 0) {
			request.setAttribute("attDataList", attDataList);
		}
		
		  request.setAttribute("cancelbutton", "cancelbutton");
}
return mapping.findForward("displaycompoffcancelRequest");
}
	
	public ActionForward selectRequest(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
{
		
String HRid="";
HRApprovalForm leaveForm=(HRApprovalForm)form;// TODO Auto-generated method stub
String Id=request.getParameter("requstNo");
leaveForm.setId(Id);
HttpSession session=request.getSession();
UserInfo user=(UserInfo)session.getAttribute("user");

String reqmon="";
String reqyear="";
String reqstart="";
String reqend="";
String empcode="";
String reqmonname="";
String reqstart1="";
String reqend1="";

try 
{
	
	String flag="";
	String sql="select right(left(convert(varchar(11),start_date,106) ,6),3)as monname,day(start_date) as startday,day(end_date) as enday,right('0' + rtrim(month(start_date)),2) as mon,YEAR(start_date) as year,cancelflag,leave.user_id,emp.EMP_FULLNAME,desg.DSGSTXT,leave.leave_type,leave.submit_date,leave.start_duration,leave.end_duration,leave.start_date,leave.end_date,leave.reason,leave.reasonType,leave.no_of_days,leave.documents,leave.Approvel_Status,leave.approved_date,leave.rejected_date" +
	" from leave_details as leave,emp_official_info as emp,DESIGNATION as desg where leave.Req_Id='"+Id+"'  and leave.user_id=emp.PERNR and emp.DSGID=desg.DSGID";

	ResultSet rs = ad.selectQuery(sql);
	String leaveType="";
	
	String userId="";
	while (rs.next()) {
		reqmonname=rs.getString("monname");
		reqmon=rs.getString("mon");
		reqyear=rs.getString("year");
		leaveForm.setStatus(rs.getString("cancelflag"));
		empcode=rs.getString("user_id");
		leaveForm.setEmployeeNo(rs.getString("EMP_FULLNAME"));

		leaveType=rs.getString("leave_type");
		if(leaveType.equalsIgnoreCase("1")){
			leaveType="Casual";
		}
		if(leaveType.equalsIgnoreCase("2")){
			leaveType="Sick";
		}
		if(leaveType.equalsIgnoreCase("3")){
			leaveType="Privilege";
		}
		if(leaveType.equalsIgnoreCase("4")){
			leaveType="Loss Of Pay";
		}
		if(leaveType.equalsIgnoreCase("5")){
			leaveType="Maternity";
		}
		if(leaveType.equalsIgnoreCase("6")){
			leaveType="Comp-Off";
		}
		leaveForm.setLeaveType(leaveType);
		leaveForm.setSubmitDate(rs.getString("submit_date"));
		String stDur=rs.getString("start_duration");
		
		if(stDur.equalsIgnoreCase("FD")){
			stDur="Full Day";
		}
		if(stDur.equalsIgnoreCase("FH")){
			stDur="First Half";
		}
		if(stDur.equalsIgnoreCase("SH")){
			stDur="Second Half";
		}
		leaveForm.setStartDurationType(stDur);
		String endDur=rs.getString("end_duration");
		
		if(endDur.equalsIgnoreCase("FD")){
			endDur="Full Day";
		}
		if(endDur.equalsIgnoreCase("FH")){
			endDur="First Half";
		}
		if(endDur.equalsIgnoreCase("SH")){
			endDur="Second Half";
		}
		leaveForm.setEndDurationType(endDur);
		leaveForm.setSubmitDate(rs.getString("submit_date"));
		reqstart=rs.getString("startday");
		reqstart1=display1(rs.getDate("start_date"));
		leaveForm.setStartDate(EMicroUtils.display1(rs.getDate("start_date")));
		reqend=rs.getString("enday");
		reqend1=display1(rs.getDate("end_date"));
		leaveForm.setEndDate(EMicroUtils.display1(rs.getDate("end_date")));
		leaveForm.setReason(rs.getString("reason"));
		leaveForm.setReasonType(rs.getString("reasonType"));
		leaveForm.setNoOfDays(rs.getString("no_of_days"));
		leaveForm.setDocumentName(rs.getString("documents"));
		
	
	//list.add(pendAppForm);
	//leave approve timings
	boolean existStatus=false;
	String reqType="";

	ArrayList paralist=new ArrayList();
	String checkESSApproverList="select count(*),reqType from ESS_Approvers where employeeNumber='"+empcode+"' and essType='Leave' group by reqType";
	ResultSet rsCheckInEss=ad.selectQuery(checkESSApproverList);
	while(rsCheckInEss.next())
	{
		int number=rsCheckInEss.getInt(1);
		reqType=rsCheckInEss.getString("reqType");
		if(number==0)
		{
			existStatus=false;
		}else{
			existStatus=true;
		}
	}
	rsCheckInEss.close();
	
		if(reqType.equalsIgnoreCase("sequential"))
		{
		String getApproverDesig=" select e.ApproverId,emp.EMP_FULLNAME,desg.DSGSTXT  from ESS_Approvers as e,emp_official_info as emp,DESIGNATION as desg " +
	"where employeeNumber='"+empcode+"' and  e.ApproverId=emp.PERNR and emp.DSGID=desg.DSGID and essType='Leave' order by Priority ";
		 
		ResultSet rsA=ad.selectQuery(getApproverDesig);
			while(rsA.next())
			{
				LeaveForm lvform=new LeaveForm();
				 lvform.setApprover(rsA.getString("EMP_FULLNAME"));	
				 lvform.setAppDesig(rsA.getString("DSGSTXT"));	
				String getdetails=" select all_R.Comments,desg.DSGSTXT,all_R.Hr_Id,emp.EMP_FULLNAME,all_R.Req_Status,all_R.approved_date," +
						"all_R.rejected_date from 	All_Request as all_R,emp_official_info as emp, DESIGNATION as desg   " +
						" where all_R.Req_Id='"+Id+"' and all_R.Req_Type='Leave' and ((emp.PERNR=all_R.Last_Approver) or " +
						"(emp.PERNR=all_R.Pending_Approver))  and (emp.DSGID=desg.DSGID) and((Last_Approver='"+rsA.getString("ApproverId")+"') or " +
						"(Pending_Approver='"+rsA.getString("ApproverId")+"'))  and Requester_Name='"+empcode+"'";
				
				ResultSet rsApproverDsg=ad.selectQuery(getdetails);
				
				while(rsApproverDsg.next())
				{
				
					HRid=rsApproverDsg.getString("Hr_Id");
					String reqstatus=rsApproverDsg.getString("Req_Status");
					lvform.setStatus(rsApproverDsg.getString("Req_Status"));
					if(reqstatus.equalsIgnoreCase("Pending"))
					{
						
					
						
					}
					if(reqstatus.equalsIgnoreCase("Approved"))
					{
					lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));
					 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
				  
				   
					String approveDate=	rsApproverDsg.getString("approved_date");
					
					String a[]=approveDate.split(" ");
					approveDate=a[0];
					String b[]=approveDate.split("-");
					approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
					
					 lvform.setApprovedDate(approveDate);
					}
					
					if(reqstatus.equalsIgnoreCase("Rejected"))
					{
						  lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
						  lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
					  
					     
					     String approveDate=rsApproverDsg.getString("rejected_date");
							
							String a[]=approveDate.split(" ");
							approveDate=a[0];
							String b[]=approveDate.split("-");
							approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
							
							 lvform.setApprovedDate(approveDate);
					}
					if(reqstatus.equalsIgnoreCase("Cancelled"))
					{
						  lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
						  lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
						  String approveDate=rsApproverDsg.getString("rejected_date");
							
							String a[]=approveDate.split(" ");
							approveDate=a[0];
							String b[]=approveDate.split("-");
							approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
							
							 lvform.setApprovedDate(approveDate);
					}
					lvform.setComments(rsApproverDsg.getString("Comments"));
					if(HRid!=null)
					{
						if( reqstatus.equalsIgnoreCase("Approved")){
						String hrdetails="select emp.EMP_FULLNAME,des.DSGSTXT from emp_official_info as emp,DESIGNATION as des where PERNR='"+HRid+"' and emp.DSGID=des.DSGID";
						
						ResultSet rs1=ad.selectQuery(hrdetails);
						
						while(rs1.next())
						{
							lvform.setApprover(rs1.getString("EMP_FULLNAME"));
							 lvform.setAppDesig(rs1.getString("DSGSTXT"));
						}rs1.close();
					}
					}
					
				
				}
				rsApproverDsg.close();
///Actual approver 
				
				String actual="select a.*,e.EMP_FULLNAME,d.DSGSTXT from All_Request a,emp_official_info e,DESIGNATION d where Req_Id='"+Id+"' and Req_Type='Cancel Leave'  and e.PERNR=a.Actual_Approver and e.DSGID=d.DSGID  ";
				ResultSet rsact=ad.selectQuery(actual);
				if(rsact.next())
				{
					LeaveForm l=new LeaveForm();
					l.setApprover(rsact.getString("EMP_FULLNAME"));	
				 l.setAppDesig(rsact.getString("DSGSTXT"));	
					l.setStatus(rsact.getString("Actual_Approver_status"));
					  String approveDate=rsact.getString("Actual_Approved_Date");
						
						String a[]=approveDate.split(" ");
						approveDate=a[0];
						String b[]=approveDate.split("-");
						approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
						
						 l.setApprovedDate(approveDate);
						 l.setComments(rsact.getString("Actual_Approved_Comments"));
							paralist.add(l);
				}
				rsact.close();
				paralist.add(lvform);
			}
			
rsA.close();
			
			request.setAttribute("parallelapprovers", paralist);
			
		}
		else
		{
			
			String getApproverDesig="  select all_R.Comments,desg.DSGSTXT,all_R.Hr_Id,emp.EMP_FULLNAME,all_R.Req_Status,all_R.approved_date,all_R.rejected_date from " +
					"All_Request as all_R,emp_official_info as emp, DESIGNATION as desg    where all_R.Req_Id='"+Id+"' and all_R.Req_Type='Leave' and " +
					"((emp.PERNR=all_R.Last_Approver) or (emp.PERNR=all_R.Pending_Approver))  and (emp.DSGID=desg.DSGID) ";
			    ResultSet rsApproverDsg=ad.selectQuery(getApproverDesig);
				while(rsApproverDsg.next())
				{
					LeaveForm lvform=new LeaveForm();
					HRid=rsApproverDsg.getString("Hr_Id");
					String reqstatus=rsApproverDsg.getString("Req_Status");
					lvform.setStatus(rsApproverDsg.getString("Req_Status"));
					if(reqstatus.equalsIgnoreCase("Pending"))
					{
						
					 lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
					 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));	
						
					}
					if(reqstatus.equalsIgnoreCase("Approved"))
					{
					lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));
					 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
				   
				   String approveDate=	rsApproverDsg.getString("approved_date");
					
					String a[]=approveDate.split(" ");
					approveDate=a[0];
					String b[]=approveDate.split("-");
					approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
					
					 lvform.setApprovedDate(approveDate);
					}
					
					if(reqstatus.equalsIgnoreCase("Rejected"))
					{
						  lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
						  lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
					    
					     String approveDate=	rsApproverDsg.getString("rejected_date");
							
							String a[]=approveDate.split(" ");
							approveDate=a[0];
							String b[]=approveDate.split("-");
							approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
							
							 lvform.setApprovedDate(approveDate);
					}
					if(reqstatus.equalsIgnoreCase("Cancelled"))
					{
						  lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
						  lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
					    
					     String approveDate=	rsApproverDsg.getString("rejected_date");
							
							String a[]=approveDate.split(" ");
							approveDate=a[0];
							String b[]=approveDate.split("-");
							approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
							
							 lvform.setApprovedDate(approveDate);
					}
					lvform.setComments(rsApproverDsg.getString("Comments"));
					
					if(HRid!=null)
					{
						if( reqstatus.equalsIgnoreCase("Approved")){
						String hrdetails="select emp.EMP_FULLNAME,des.DSGSTXT from emp_official_info as emp,DESIGNATION as des where PERNR='"+HRid+"' and emp.DSGID=des.DSGID";
						
						ResultSet rs1=ad.selectQuery(hrdetails);
						
						while(rs1.next())
						{
							lvform.setApprover(rs1.getString("EMP_FULLNAME"));
							 lvform.setAppDesig(rs1.getString("DSGSTXT"));
						}
						rs1.close();
					}
					}
					
					
					paralist.add(lvform);
					
				}
				rsApproverDsg.close();
///Actual approver 
				
				String actual="select a.*,e.EMP_FULLNAME,d.DSGSTXT from All_Request a,emp_official_info e,DESIGNATION d where Req_Id='"+Id+"' and Req_Type='Cancel Leave'  and e.PERNR=a.Actual_Approver and e.DSGID=d.DSGID  ";
				ResultSet rsact=ad.selectQuery(actual);
				if(rsact.next())
				{
					LeaveForm l=new LeaveForm();
					l.setApprover(rsact.getString("EMP_FULLNAME"));	
				 l.setAppDesig(rsact.getString("DSGSTXT"));	
					l.setStatus(rsact.getString("Actual_Approver_status"));
					  String approveDate=rsact.getString("Actual_Approved_Date");
						
						String a[]=approveDate.split(" ");
						approveDate=a[0];
						String b[]=approveDate.split("-");
						approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
						
						 l.setApprovedDate(approveDate);
						 l.setComments(rsact.getString("Actual_Approved_Comments"));
							paralist.add(l);
				}
				rsact.close();
				request.setAttribute("parallelapprovers", paralist);
		}
		
		LinkedList leaveReason=new LinkedList();
		LinkedList leaveDetReason=new LinkedList();
		
		String reason="select * from LEAVE_REASON";
		ResultSet a=ad.selectQuery(reason);
		try {
			while(a.next())
			{
		leaveReason.add(a.getString("Reason"));
		leaveDetReason.add(a.getString("Detailed_Reason"));
			}
			leaveForm.setLeaveReason(leaveReason);
			leaveForm.setLeaveDetReason(leaveDetReason);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		a.close();
	
	String sql1="select * from leave_details where id='"+Id + "' and documents not like ''";
	ResultSet rs11=ad.selectQuery(sql1);
		LeaveForm leaveForm1=null;
		ArrayList a1=new ArrayList();
		while(rs11.next()) {
			leaveForm1=new LeaveForm();
			leaveForm1.setDocumentName(rs11.getString("documents"));
			leaveForm1.setId(rs11.getString("id"));
			a1.add(leaveForm1);
		}
		rs11.close();
		request.setAttribute("documentDetails", a1);
	request.setAttribute("submitDetails", "submitDetails");
			request.setAttribute("leave", "leave");
	}
	
	rs.close();
	
}catch (Exception e) {
	e.printStackTrace();
}



//remarks

String comments="select * from All_Request where Req_Id='"+Id+"' and req_type='Cancel Leave' ";
ResultSet a=ad.selectQuery(comments);
try {
	while(a.next())
	{
		leaveForm.setRemark(a.getString("Comments"));
	}
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}

if(true)
{
	//Attendance

	SAPAttendenceDAO dao = new SAPAttendenceDAO();

	String month=reqyear+reqmon+"01";



	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	Date datenow = new Date();
	String time = sdf.format(datenow);

	String today[]=time.split("-");

	int datetoday=Integer.parseInt(today[2]);
	String monthtoday=today[1];
	String monName=monthtoday;

	if (monName.equals("01"))
		monName = "Jan";
	if (monName.equals("02"))
		monName = "Feb";
	if (monName.equals("03"))
		monName = "Mar";
	if (monName.equals("04"))
		monName = "Apr";
	if (monName.equals("05"))
		monName = "May";
	if (monName.equals("06"))
		monName = "Jun";
	if (monName.equals("07"))
		monName = "Jul";
	if (monName.equals("08"))
		monName = "Aug";
	if (monName.equals("09"))
		monName = "Sep";
	if (monName.equals("10"))
		monName = "Oct";
	if (monName.equals("11"))
		monName = "Nov";
	if (monName.equals("12"))
		monName = "Dec";



	LinkedList attDataList = new LinkedList();
	Calendar cal = Calendar.getInstance();



	String calendarmon=monName;
	String mon=month.substring(0, 3);
	String year = month.substring(month.length() - 4, month.length());

	/*
	 * String reqyear=month.substring(month.length()-2, month.length());
	 * String reqmonth=monName+reqyear; AttendenceForm attendenceForm = new
	 * AttendenceForm(); attendenceForm.setEmpcode(empNo);
	 * attendenceForm.setDat(reqmonth); AttendenceAction a4=new
	 * AttendenceAction(); if(monName.equalsIgnoreCase("Nov")) {
	 * a4.submit(mapping, attendenceForm, request, response); return
	 * mapping.findForward("display"); }
	 */




	if (monName.equals("Jan"))
		monName = "01";
	if (monName.equals("Feb"))
		monName = "02";
	if (monName.equals("Mar"))
		monName = "03";
	if (monName.equals("Apr"))
		monName = "04";
	if (monName.equals("May"))
		monName = "05";
	if (monName.equals("Jun"))
		monName = "06";
	if (monName.equals("Jul"))
		monName = "07";
	if (monName.equals("Aug"))
		monName = "08";
	if (monName.equals("Sep"))
		monName = "09";
	if (monName.equals("Oct"))
		monName = "10";
	if (monName.equals("Nov"))
		monName = "11";
	if (monName.equals("Dec"))
		monName = "12";

	String date ="";	




	ArrayList att = new ArrayList();

	cal.set(Integer.parseInt(year), Integer.parseInt(monName)-1, 1);
	int days = cal.getActualMaximum(Calendar.DAY_OF_MONTH);

	int i=1;
	/*    String query="EXEC daily_report_status_Att '"+days+"','"+monName+"','"+year+"','"+empNo+"' ";
	int k=ad.SqlExecuteUpdate(query);*/

		String s9 = " select date,convert(varchar(11),date,106) as date1,left(DATENAME(WEEKDAY,date),3) as day,left(In_time,5) as intime,left(out_time,5) as outtime,"
				+ "left(status,2) as instatus,right(status,2) as outstatus,shift from Report_Daily_wise,emp_official_info where emp_official_info.PERNR=Report_Daily_wise.Pernr and emp_official_info.LOCID=Report_Daily_wise.Location and  emp_official_info.Pernr='"+empcode+"'  and year(date)='"+reqyear+"' "
						+ "and date between '"+reqstart1+"' and '"+reqend1+"' order by date";
		ResultSet rs9 = ad.selectQuery(s9);
		try {
			while(rs9.next())
			{
				
				SAPAttendenceForm help = new SAPAttendenceForm();
				help.setDate(rs9.getString("date1"));
				help.setDay(rs9.getString("day"));
				date=rs9.getString("date");
				
				if(!(rs9.getString("intime").equalsIgnoreCase("00:00") && rs9.getString("instatus").equalsIgnoreCase("AA")))
	    			help.setiNTIME(rs9.getString("intime"));


		    	if(!(rs9.getString("outtime").equalsIgnoreCase("00:00") && rs9.getString("outstatus").equalsIgnoreCase("AA")))
				help.setoUTTIME(rs9.getString("outtime"));

		    	if(monName.equalsIgnoreCase(monthtoday))
		    	{
	            if(datetoday>=i)
	            {
	            	help.setiNSTATUS(rs9.getString("instatus"));
	            	if(datetoday==i)
	            	{
	            		if(rs9.getString("outstatus").equalsIgnoreCase("AA"))
	            		{
	            			help.setoUTSTATUS("");
	            		}
	            		else
	            		{
	            			help.setoUTSTATUS(rs9.getString("outstatus"));
	            		}
	            	}
	            	else
	            	{
	            		help.setoUTSTATUS(rs9.getString("outstatus"));
	            	}
					
					
					switch(rs9.getString("shift")){
					case "0001": help.setShift("Gen(0001)");
					  break;
case "0002": help.setShift("Gen(0002)");
					  break;
case "0003": help.setShift("FS(0003)");
					  break;
case "0004": help.setShift("SS(0004)");
					  break;
case "0005": help.setShift("TS(0005)");
					  break;
case "0006": help.setShift("SS1(0006)");
					  break;
case "0007": help.setShift("FS(0007)");
					  break;
case "0008": help.setShift("SS0008)");
					  break;
case "0009": help.setShift("TS(0009)");
					  break;
case "0010": help.setShift("NS(0010)");
					  break;
case "0011": help.setShift("SS-SM(0011)");
					  break;
case "0012": help.setShift("EnggB(0012)");
					  break;
case "0013": help.setShift("EnggC(0013)");
					  break;
case "0014": help.setShift("SecA(0014)");
					  break;
case "0015": help.setShift("SecB(0015)");
					  break;
case "0016": help.setShift("SecC(0016)");
					  break;
case "0017": help.setShift("Gen(0017)");
					  break;
case "0018": help.setShift("Night(0018)");
					  break;
case "0019": help.setShift("Gen(0019)");
					  break;
case "0020": help.setShift("Gen2(0020)");
					  break;
case "0021": help.setShift("2ND(0021)");
					  break;
case "0022": help.setShift("2ND1(0022)");
					  break;
case "0023": help.setShift("EnggGen(0023)");
					  break;
case "0024": help.setShift("EnggGen1(0024)");
					  break;
case "0025": help.setShift("1ST(0025)");
					  break;
case "0026": help.setShift("Engg2ND(0026)");
					  break;
case "0027": help.setShift("3RD(0027)");
					  break;
case "0028": help.setShift("QC1ST(0028)");
					  break;
case "0030": help.setShift("Gen4(0030)");
					  break;
case "0031": help.setShift("1ST(0031)");
					  break;
case "0032": help.setShift("Gen(0032)");
					  break;
case "0033": help.setShift("2ND(0033)");
					  break;
case "0034": help.setShift("Night(0034)");
					  break;
case "0035": help.setShift("GOASecA(0035)");
					  break;
case "0036": help.setShift("GOASecB(0036)");
					  break;
case "0037": help.setShift("GOASecC(0037)");
					  break;
case "0038": help.setShift("Gen3(0038)");
					  break;
case "0029": help.setShift("QC2ND(0029)");
					  break;
case "0039": help.setShift("Gen1(0039)");
					  break;
case "0040": help.setShift("Gen2(0040)");
					  break;
case "0041": help.setShift("FS(0041)");
					  break;
case "0042": help.setShift("SS(0042)");
					  break;
case "0043": help.setShift("TS(0043)");
					  break;
case "0054": help.setShift("Gen(0054)");
					  break;
case "0055": help.setShift("1ST(0055)");
					  break;
case "0056": help.setShift("2ND(0056)");
					  break;
case "0057": help.setShift("Night(0057)");
					  break;
case "0058": help.setShift("Gen5(0058)");
					  break;
case "0059": help.setShift("Gen6(0059)");
					  break;
case "0060": help.setShift("Gen(0060)");
					  break;
case "0061": help.setShift("FS(0061)");
					  break;
case "0062": help.setShift("SS(0062)");
					  break;
case "0063": help.setShift("TS(0063)");
					  break;
case "0064": help.setShift("Night(0064)");
					  break;
case "0065": help.setShift("Gen(0065)");
					  break;
case "0066": help.setShift("SSQC(0066)");
					  break;
case "0067": help.setShift("FS(0067)");
					  break;
case "0069": help.setShift("Gen(0069)");
					  break;
case "0070": help.setShift("Gen2(0070)");
					  break;
case "0071": help.setShift("Gen3(0071)");
					  break;
case "0072": help.setShift("QC2ND1(0072)");
					  break;
case "0074": help.setShift("EnggA(0074)");
					  break;
case "0075": help.setShift("EnggD(0075)");
					  break;
case "0044": help.setShift("FS1(0044)");
					  break;
case "0045": help.setShift("FS2(0045)");
					  break;
case "0046": help.setShift("Gen1(0046)");
					  break;
case "0047": help.setShift("Gen2(0047)");
					  break;
case "0048": help.setShift("SS(0048)");
					  break;
case "0049": help.setShift("3RD(0049)");
					  break;
case "0050": help.setShift("Gen(0050)");
					  break;
case "0051": help.setShift("FS(0051)");
					  break;
case "0052": help.setShift("SS(0052)");
					  break;
case "0053": help.setShift("TS(0053)");
					  break;
case "0068": help.setShift("Gen(0068)");
					  break;
case "0073": help.setShift("QcNig(0073)");
					  break;
case "0087": help.setShift("Gen(0087)");
break;
case "0088": help.setShift("RD(0088)");
break;
case "0089": help.setShift("Sec(0089)");
break;
}
				


			
	                	
	            }
	            else
		    	{
		    		
	            	help.setiNSTATUS("");
					help.setoUTSTATUS("");	
	                  
		    	}
	            
	    	}
		    	else
		    	{
		    		
		    		help.setiNSTATUS(rs9.getString("instatus"));
					help.setoUTSTATUS(rs9.getString("outstatus"));
					
					switch(rs9.getString("shift")){
					case "0001": help.setShift("Gen(0001)");
					  break;
case "0002": help.setShift("Gen(0002)");
					  break;
case "0003": help.setShift("FS(0003)");
					  break;
case "0004": help.setShift("SS(0004)");
					  break;
case "0005": help.setShift("TS(0005)");
					  break;
case "0006": help.setShift("SS1(0006)");
					  break;
case "0007": help.setShift("FS(0007)");
					  break;
case "0008": help.setShift("SS0008)");
					  break;
case "0009": help.setShift("TS(0009)");
					  break;
case "0010": help.setShift("NS(0010)");
					  break;
case "0011": help.setShift("SS-SM(0011)");
					  break;
case "0012": help.setShift("EnggB(0012)");
					  break;
case "0013": help.setShift("EnggC(0013)");
					  break;
case "0014": help.setShift("SecA(0014)");
					  break;
case "0015": help.setShift("SecB(0015)");
					  break;
case "0016": help.setShift("SecC(0016)");
					  break;
case "0017": help.setShift("Gen(0017)");
					  break;
case "0018": help.setShift("Night(0018)");
					  break;
case "0019": help.setShift("Gen(0019)");
					  break;
case "0020": help.setShift("Gen2(0020)");
					  break;
case "0021": help.setShift("2ND(0021)");
					  break;
case "0022": help.setShift("2ND1(0022)");
					  break;
case "0023": help.setShift("EnggGen(0023)");
					  break;
case "0024": help.setShift("EnggGen1(0024)");
					  break;
case "0025": help.setShift("1ST(0025)");
					  break;
case "0026": help.setShift("Engg2ND(0026)");
					  break;
case "0027": help.setShift("3RD(0027)");
					  break;
case "0028": help.setShift("QC1ST(0028)");
					  break;
case "0030": help.setShift("Gen4(0030)");
					  break;
case "0031": help.setShift("1ST(0031)");
					  break;
case "0032": help.setShift("Gen(0032)");
					  break;
case "0033": help.setShift("2ND(0033)");
					  break;
case "0034": help.setShift("Night(0034)");
					  break;
case "0035": help.setShift("GOASecA(0035)");
					  break;
case "0036": help.setShift("GOASecB(0036)");
					  break;
case "0037": help.setShift("GOASecC(0037)");
					  break;
case "0038": help.setShift("Gen3(0038)");
					  break;
case "0029": help.setShift("QC2ND(0029)");
					  break;
case "0039": help.setShift("Gen1(0039)");
					  break;
case "0040": help.setShift("Gen2(0040)");
					  break;
case "0041": help.setShift("FS(0041)");
					  break;
case "0042": help.setShift("SS(0042)");
					  break;
case "0043": help.setShift("TS(0043)");
					  break;
case "0054": help.setShift("Gen(0054)");
					  break;
case "0055": help.setShift("1ST(0055)");
					  break;
case "0056": help.setShift("2ND(0056)");
					  break;
case "0057": help.setShift("Night(0057)");
					  break;
case "0058": help.setShift("Gen5(0058)");
					  break;
case "0059": help.setShift("Gen6(0059)");
					  break;
case "0060": help.setShift("Gen(0060)");
					  break;
case "0061": help.setShift("FS(0061)");
					  break;
case "0062": help.setShift("SS(0062)");
					  break;
case "0063": help.setShift("TS(0063)");
					  break;
case "0064": help.setShift("Night(0064)");
					  break;
case "0065": help.setShift("Gen(0065)");
					  break;
case "0066": help.setShift("SSQC(0066)");
					  break;
case "0067": help.setShift("FS(0067)");
					  break;
case "0069": help.setShift("Gen(0069)");
					  break;
case "0070": help.setShift("Gen2(0070)");
					  break;
case "0071": help.setShift("Gen3(0071)");
					  break;
case "0072": help.setShift("QC2ND1(0072)");
					  break;
case "0074": help.setShift("EnggA(0074)");
					  break;
case "0075": help.setShift("EnggD(0075)");
					  break;
case "0044": help.setShift("FS1(0044)");
					  break;
case "0045": help.setShift("FS2(0045)");
					  break;
case "0046": help.setShift("Gen1(0046)");
					  break;
case "0047": help.setShift("Gen2(0047)");
					  break;
case "0048": help.setShift("SS(0048)");
					  break;
case "0049": help.setShift("3RD(0049)");
					  break;
case "0050": help.setShift("Gen(0050)");
					  break;
case "0051": help.setShift("FS(0051)");
					  break;
case "0052": help.setShift("SS(0052)");
					  break;
case "0053": help.setShift("TS(0053)");
					  break;
case "0068": help.setShift("Gen(0068)");
					  break;
case "0073": help.setShift("QcNig(0073)");
					  break;
case "0087": help.setShift("Gen(0087)");
break;
case "0088": help.setShift("RD(0088)");
break;
case "0089": help.setShift("Sec(0089)");
break;
}
				            
		    	}
			   

		    	String data = "select Approvel_Status,reason from leave_details where  user_id='"
						+ empcode
						+ "' and Approvel_Status in('Approved','Pending') and record_status!='Draft'  and '"
						+  date 
						+ "' between start_date and  end_date and YEAR(start_date)='"
						+ year + "'";
				ResultSet rs10 = ad.selectQuery(data);
				while (rs10.next()) {
					if (rs10.getString("Approvel_Status").equalsIgnoreCase(
							"Approved"))
						help.setRemarks(rs10.getString("reason"));
					else
						help.setRemarks("Leave to be Approved");
				}
				rs10.close();
				String data1 = "select Approver_Status,reason from OnDuty_details where  user_id='"
						+empcode
						+ "' and Approver_Status in('Approved','In Process') and '"
						+ date
						+ "' between start_date and  end_date  and YEAR(start_date)='"
						+ year + "'";
				ResultSet rs101 = ad.selectQuery(data1);
				while (rs101.next()) {
					if (rs101.getString("Approver_Status")
							.equalsIgnoreCase("Approved"))
						help.setRemarks(rs101.getString("reason"));
					else
						help.setRemarks("Onduty to be Approved");
				} 

				rs101.close();
				



				String data11 = "select * from holidays where date = '"+date+"' and location = '"+user.getPlantId()+"' ";

				ResultSet rs1011 = ad.selectQuery(data11);
				try {
					while (rs1011.next()) {

							help.setRemarks(rs1011.getString("Holiday_Name"));
							help.setMessage("HOL");
							

					}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				rs1011.close();
			i++;
			
			attDataList.add(help);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs9.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if (attDataList.size() > 0) {
			request.setAttribute("attDataList", attDataList);
		}
}
else
{

	//Attendance

	SAPAttendenceDAO dao = new SAPAttendenceDAO();
	try
			{
	connectSAP();
	JCoDestination destination = JCoDestinationManager
			.getDestination(DESTINATION);// TODO change to real
											// destination
	if (destination == null) {

		destination = JCoDestinationManager
				.getDestination(DESTINATION);// TODO change to
												// real
												// destination
		if (destination == null) {
			throw new RuntimeException(
					"Could not connect to SAP, destination not found.");
		}
	}

	String month=reqyear+reqmon+"01";
	JCoFunction function = null;
	String pay="";
	String getPayGroup = "Select PAY_GROUP from emp_official_info where PERNR='"
			+ user.getEmployeeNo() + "'";
	ResultSet rsPayGroup = ad.selectQuery(getPayGroup);
	try {
		while (rsPayGroup.next()) {
			pay=rsPayGroup.getString("PAY_GROUP");
		}
	} catch (Exception e) {
		e.printStackTrace();
	}


	function = destination.getRepository().getFunction(
			"ZBAPI_HR_ATTENDANCE");
	if (function == null) {
		throw new RuntimeException(
				" ZBAPI_HR_ATTENDANCE not found in SAP.");// ZBAPI_HR_PAYSLIP
	}
	function.getImportParameterList().setValue("PAYGROUP",pay);
	function.getImportParameterList().setValue("PERNR", user.getEmployeeNo());
	function.getImportParameterList().setValue("MONTH", month);

	function.execute(destination);
	LinkedList attdList = new LinkedList();
	JCoTable returnTable = function.getTableParameterList()
			.getTable("ATTNDATA");// PAYDATA_D_H
	Map<Integer, Character> returnMap = new HashMap<Integer, Character>();
	if (returnTable.getNumRows() > 0) {
		returnTable.firstRow();
		do {
			String reqDate = convertDate(returnTable
					.getDate("BEGDA"));
			String inTime = returnTable.getTime("INTIME")
					.toString();
			String a1[] = inTime.split(" ");
			if (a1.length == 6)
				inTime = a1[3];
			String outTime = returnTable.getTime("OUTTIME")
					.toString();
			String b1[] = outTime.split(" ");
			if (b1.length == 6)
				outTime = b1[3];

			SAPAttendenceForm attData = new SAPAttendenceForm();
			attData.setDate(reqDate);
			attData.setiNTIME(returnTable.getString("INTIME"));
			attData.setiNSTATUS(returnTable.getString("INSTATUS"));
			attData.setoUTTIME(returnTable.getString("OUTTIME"));
			attData.setoUTSTATUS(returnTable.getString("OUTSTATUS"));
			attdList.add(attData);

		} while (returnTable.nextRow());

		String deleteRecords = "delete from SAP_Attendence where PERNR='"
				+ user.getEmployeeNo() + "'  ";
		ad.SqlExecuteUpdate(deleteRecords);

		dao.updateAttendenceDetails(attdList, user.getEmployeeNo());

	}

	if (returnTable.getNumRows() == 0) {

		JCoTable returnStatus = function.getTableParameterList()
				.getTable("RETURN");
		if (returnStatus.getNumRows() > 0) {
			char c = returnStatus.getChar("TYPE");
			if (c == 'E') {
				leaveForm.setMessage(returnStatus
						.getString("MESSAGE"));
			}
		}

	}

			}catch (Exception e) {
				e.printStackTrace();
			}

	//DATA SET

	LinkedList attDataList = new LinkedList();
	String getAttendence = "select convert(varchar(11),s.[BEGDA],106) as date,BEGDA as rdate,DATENAME(WEEKDAY,S.[BEGDA]) as day,convert(varchar(5),s.[INTIME],"
			+ "106) as INTIME,s.INSTATUS,convert(varchar(5),s.[OUTTIME],106) as OUTTIME,s.OUTSTATUS,(SELECT Holiday_Name FROM holidays WHERE Location='"
			+ user.getPlantId()
			+ "' "
			+ "AND convert(varchar(11),s.[BEGDA],103)=convert(varchar(11),Date,103) ) as holiday from SAP_Attendence as s where s.PERNR='"
			+ user.getEmployeeNo()
			+ "' and"
			+ " MONTH(s.[BEGDA])='"
			+ reqmon
			+ "' and BEGDA between '"+reqstart1+"' and '"+reqend1+"' order by date";
	ResultSet rsAttend = ad.selectQuery(getAttendence);

	try {
		while (rsAttend.next()) {	
			SAPAttendenceForm attData = new SAPAttendenceForm();
		Date today = new Date();
		String date = today.toString();
		String b[] = date.split(" ");
		date = b[2] + " " + b[1] + " " + b[5];
		attData.setDate(rsAttend.getString("date"));
		attData.setDay(rsAttend.getString("day").substring(0, 3));
		
		/* if(!rsAttend.getString("INSTATUS").equalsIgnoreCase("")) 
				attData.setiNTIME(rsAttend.getString("INTIME"));
		if (!(rsAttend.getString("INSTATUS").equalsIgnoreCase("PP")|| rsAttend.getString("INSTATUS").equalsIgnoreCase("AA")|| rsAttend.getString("INSTATUS").equalsIgnoreCase("TI") || rsAttend.getString("INSTATUS").equalsIgnoreCase("TO")))
			attData.setiNTIME(rsAttend.getString("INSTATUS"));	
		if((rsAttend.getString("INSTATUS").equalsIgnoreCase("PP")|| rsAttend.getString("INSTATUS").equalsIgnoreCase("AA")|| rsAttend.getString("INSTATUS").equalsIgnoreCase("TI") || rsAttend.getString("INSTATUS").equalsIgnoreCase("TO")))
			attData.setiNTIME(rsAttend.getString("INTIME"));*/
		attData.setiNSTATUS(rsAttend.getString("INSTATUS"));	
		attData.setiNTIME(rsAttend.getString("INTIME"));	
		attData.setoUTTIME(rsAttend.getString("OUTTIME"));
		attData.setoUTSTATUS(rsAttend.getString("OUTSTATUS"));
		
		/* if(!rsAttend.getString("OUTSTATUS").equalsIgnoreCase("")) 
				attData.setoUTTIME(rsAttend.getString("OUTTIME"));
		
		if (!(rsAttend.getString("OUTSTATUS")
				.equalsIgnoreCase("PP")
				|| rsAttend.getString("OUTSTATUS")
						.equalsIgnoreCase("AA")
				|| rsAttend.getString("OUTSTATUS")
						.equalsIgnoreCase("TI") || rsAttend
				.getString("OUTSTATUS").equalsIgnoreCase("TO")))
			attData.setoUTTIME(rsAttend.getString("OUTSTATUS"));
		if((rsAttend.getString("OUTSTATUS")
				.equalsIgnoreCase("PP")
				|| rsAttend.getString("OUTSTATUS")
						.equalsIgnoreCase("AA")
				|| rsAttend.getString("OUTSTATUS")
						.equalsIgnoreCase("TI") || rsAttend
				.getString("OUTSTATUS").equalsIgnoreCase("TO")))
			attData.setoUTTIME(rsAttend.getString("OUTTIME"));
		*/

		String remark = rsAttend.getString("holiday");
		if (remark != null) {
			attData.setRemarks(remark);
			attData.setMessage("HOL");
		}

		String data = "select * from leave_details where  user_id='"
				+ user.getEmployeeNo()
				+ "' and Approvel_Status in('Approved','Pending') and record_status!='Draft'  and '"
				+ rsAttend.getString("rdate")
				+ "' between start_date and  end_date and YEAR(start_date)='"
				+ reqyear + "'";
		ResultSet rs10 = ad.selectQuery(data);
		while (rs10.next()) {
			if (rs10.getString("Approvel_Status").equalsIgnoreCase(
					"Approved"))
				attData.setRemarks(rs10.getString("reason"));
			else
				attData.setRemarks("Leave to be Approved");
		}

		String data1 = "select * from OnDuty_details where  user_id='"
				+  user.getEmployeeNo()
				+ "' and Approver_Status in('Approved','In Process') and '"
				+ rsAttend.getString("rdate")
				+ "' between start_date and  end_date  and YEAR(start_date)='"
				+ reqyear + "'";
		ResultSet rs101 = ad.selectQuery(data1);
		while (rs101.next()) {
			if (rs101.getString("Approver_Status")
					.equalsIgnoreCase("Approved"))
				attData.setRemarks(rs101.getString("reason"));
			else
				attData.setRemarks("Onduty to be Approved");
		}
		
	
		
		attDataList.add(attData);
		}
		if (attDataList.size() > 0) {
			request.setAttribute("attDataList", attDataList);
		}
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}

}
        request.setAttribute("cancelbutton", "cancelbutton");
        
        try {
			a.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        
		return mapping.findForward("displaycancelRequest");
}
	
	
	public ActionForward lastRecord(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) 
	{
		
		HRApprovalForm approvalsForm = (HRApprovalForm) form;
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		NewsandMediaDao ad=new NewsandMediaDao();
		if(user==null){
			request.setAttribute("message","Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		String type=approvalsForm.getReqRequstType();
		approvalsForm.setReqRequstType(type);
		String filter=approvalsForm.getSelectedFilter();
		approvalsForm.setSelectedFilter(filter);
		String empno=approvalsForm.getEmployeeNo();
		
		int totalRecords=approvalsForm.getTotalRecords();//21
		int startRecord=approvalsForm.getStartRecord();//11
		int endRecord=approvalsForm.getEndRecord();	
		
		
		 startRecord=totalRecords-9;
		 endRecord=totalRecords;
		 approvalsForm.setTotalRecords(totalRecords);
		 approvalsForm.setStartRecord(startRecord);
		 approvalsForm.setEndRecord(totalRecords);
		 
		 String cmpcode="";
			int id=user.getGroupId();
			String cmp[]=new String[0]; 
			String locations="";
			
			String aa="select * from user_group where id='"+id+"'";
			ResultSet cc=ad.selectQuery(aa);
			try {
				if(cc.next())
				{
					cmpcode=cc.getString("Attendance_Loc");
					
					if(cmpcode.contains(","))
					{
					 cmp=cmpcode.split(",");
					
					for(int b=0;b<cmp.length;b++)
					{
						locations=locations+"'"+cmp[b]+"',";
					}
					
					locations=locations.substring(0, locations.length()-1);
					}
					else
					{
						locations="'"+cmpcode+"'";
					}
				}
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		 
			 if(type.equalsIgnoreCase("OverTime"))
				{
				 LinkedList OT=new LinkedList();
					String getLeaveRecords="";
					
					if(empno.equalsIgnoreCase("")){
						
					    
					    
					    getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,"
								+ "emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,CONVERT(varchar(10),comp.RequestedDate,103) as Created_date1 "
								+ " from  All_Request as all_R,emp_official_info as emp,"
								+ "over_time_details as comp,Location as loc where  Req_Status='"+filter+"' and   (Actual_Approver_status is null or Actual_Approver_status='' or "
								+ "Actual_Approver_status='Approved') and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+")  and  all_R.Req_Id=comp.Req_no  and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='OverTime'"
								+ " group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,"
								+ "all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,comp.RequestedDate ) as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
				
						
						}
						
						if(!empno.equalsIgnoreCase("")){
							
						
						    getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,"
									+ "emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,CONVERT(varchar(10),comp.RequestedDate,103) as Created_date1 "
									+ " from  All_Request as all_R,emp_official_info as emp,"
									+ "over_time_details as comp,Location as loc where  Req_Status='"+filter+"' and   (Actual_Approver_status is null or Actual_Approver_status='' or "
									+ "Actual_Approver_status='Approved') and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+")  and  all_R.Req_Id=comp.Req_no  and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='OverTime'"
									+ " and  all_R.Requester_Name='"+empno+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,"
									+ "all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,comp.RequestedDate ) as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
					
							
								}
				 
						
						ResultSet rsLeave=ad.selectQuery(getLeaveRecords);
						try{
						while(rsLeave.next()){
							

							LeaveForm leave = new LeaveForm();
							leave.setRequestNumber(rsLeave.getInt("Req_no"));
							leave.setSubmitDate(rsLeave.getString("Created_date1"));
							leave.setStatus(rsLeave.getString("ApprvrStatus"));
							leave.setStartDate(EMicroUtils.display(rsLeave.getDate("FromDate")));
							leave.setEndDate(EMicroUtils.display(rsLeave.getDate("ToDate")));
							leave.setEmployeeName(rsLeave.getString("EMP_FULLNAME"));

							OT.add(leave);
						
							
							
							
						}
							 
							}catch (Exception e) {
								e.printStackTrace();
							}
							try {
								rsLeave.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						
							request.setAttribute("OTlist", OT);
							if(OT.size()>0){
								if(type.equalsIgnoreCase("Pending")){
									request.setAttribute("displayButton", "displayButton");
									}
								}
						
								if(OT.size()==0){
									request.setAttribute("no Leave records", "no Leave records");
									approvalsForm.setMessage3("No Records Found..");
								}
								
								
								request.setAttribute("disableNextButton", "disableNextButton");
								request.setAttribute("previousButton", "previousButton");
								if(OT.size()<10)
								{
									
									request.setAttribute("previousButton", "previousButton");
									request.setAttribute("disablePreviousButton", "disablePreviousButton");
								}
								request.setAttribute("displayRecordNo", "displayRecordNo");
							
				}
			 
	    if(type.equalsIgnoreCase("Comp-off/OT"))
				{
	    	
	    	
	    	LinkedList comp=new LinkedList();
			String getLeaveRecords="";
			
			if(empno.equalsIgnoreCase("")){
			
		    
		    
		    getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,"
					+ "emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,CONVERT(varchar(10),comp.RequestedDate,103) as Created_date1 "
					+ " from  All_Request as all_R,emp_official_info as emp,"
					+ "comp_ot as comp,Location as loc where  Req_Status='"+filter+"' and   (Actual_Approver_status is null or Actual_Approver_status='' or "
					+ "Actual_Approver_status='Approved') and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+")  and  all_R.Req_Id=comp.Req_no  and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Comp-Off/OT'"
					+ " group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,"
					+ "all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,comp.RequestedDate ) as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
	
			
			}
			
			if(!empno.equalsIgnoreCase("")){
				
			
			    getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,"
						+ "emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,CONVERT(varchar(10),comp.RequestedDate,103) as Created_date1 "
						+ " from  All_Request as all_R,emp_official_info as emp,"
						+ "comp_ot as comp,Location as loc where  Req_Status='"+filter+"' and   (Actual_Approver_status is null or Actual_Approver_status='' or "
						+ "Actual_Approver_status='Approved') and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+")  and  all_R.Req_Id=comp.Req_no  and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Comp-Off/OT'"
						+ " and  all_R.Requester_Name='"+empno+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,"
						+ "all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,comp.RequestedDate ) as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
		
				
					}
			
			
			
			ResultSet rsLeave=ad.selectQuery(getLeaveRecords);
			try{
			while(rsLeave.next()){
				

				LeaveForm leave = new LeaveForm();
				leave.setRequestNumber(rsLeave.getInt("Req_no"));
				leave.setSubmitDate(rsLeave.getString("Created_date1"));
				leave.setStatus(rsLeave.getString("ApprvrStatus"));
				leave.setStartDate(EMicroUtils.display(rsLeave.getDate("FromDate")));
				leave.setEndDate(EMicroUtils.display(rsLeave.getDate("ToDate")));
				leave.setEmployeeName(rsLeave.getString("EMP_FULLNAME"));

				comp.add(leave);
			
				
				
				
			}
				 
				}catch (Exception e) {
					e.printStackTrace();
				}
				try {
					rsLeave.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				request.setAttribute("complist", comp);
				if(comp.size()>0){
					if(type.equalsIgnoreCase("Pending")){
						request.setAttribute("displayButton", "displayButton");
						}
					}
			
					if(comp.size()==0){
						request.setAttribute("no Leave records", "no Leave records");
						approvalsForm.setMessage3("No Records Found..");
					}
					
					
					request.setAttribute("disableNextButton", "disableNextButton");
					request.setAttribute("previousButton", "previousButton");
					if(comp.size()<10)
					{
						
						request.setAttribute("previousButton", "previousButton");
						request.setAttribute("disablePreviousButton", "disablePreviousButton");
					}
					request.setAttribute("displayRecordNo", "displayRecordNo");
				
				}
			
		 if(type.equalsIgnoreCase("Leave"))
			{
				LinkedList leaveList=new LinkedList();
				String getLeaveRecords="";
				
				if(empno.equalsIgnoreCase("")){
					
					getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,leave.leave_type,emp.PERNR," +
						"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days from  All_Request as all_R," +
						"emp_official_info as emp,leave_details as leave,Location as loc  where   Req_Status='"+filter+"' and  (Actual_Approver_status is null or Actual_Approver_status='' or Actual_Approver_status='Approved') and all_R.Req_Type='Leave' and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+") and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id) " +
						"as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
						
						}
				
				if(!empno.equalsIgnoreCase("")){
					
					getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,leave.leave_type,emp.PERNR," +
						"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days from  All_Request as all_R," +
						"emp_official_info as emp,leave_details as leave,Location as loc  where   Req_Status='"+filter+"' and  (Actual_Approver_status is null or Actual_Approver_status='' or Actual_Approver_status='Approved') and all_R.Req_Type='Leave' and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+") " +
								" and  all_R.Requester_Name='"+empno+"' and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id) " +
						"as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
						
						}
				
				ResultSet rsLeave=ad.selectQuery(getLeaveRecords);
				try{
				while(rsLeave.next()){
				LeaveForm leave=new LeaveForm();
				leave.setRequestNumber(rsLeave.getInt("Req_Id"));
				
			String	leaveType=rsLeave.getString("leave_type");
				if(leaveType.equalsIgnoreCase("1")){
					leaveType="Casual";
				}
				if(leaveType.equalsIgnoreCase("2")){
					leaveType="Sick";
				}
				if(leaveType.equalsIgnoreCase("3")){
					leaveType="privilege";
				}
				if(leaveType.equalsIgnoreCase("4")){
					leaveType="Loss Of Pay";
				}
				if(leaveType.equalsIgnoreCase("5")){
					leaveType="Maternity";
				}
				if(leaveType.equalsIgnoreCase("6")){
					leaveType="Comp-Off";
				}
				leave.setLeaveType(leaveType);
				leave.setEmployeeNumber(rsLeave.getString("PERNR"));
				
				leave.setEmployeeName(rsLeave.getString("EMP_FULLNAME"));
				leave.setSubmitDate(rsLeave.getString("Req_Date"));
				leave.setStartDate(EMicroUtils.display(rsLeave.getDate("start_date")));
				String stDur=rsLeave.getString("start_duration");
				
				if(stDur.equalsIgnoreCase("FD")){
					stDur="Full Day";
				}
				if(stDur.equalsIgnoreCase("FH")){
					stDur="First Half";
				}
				if(stDur.equalsIgnoreCase("SH")){
					stDur="Second Half";
				}
				leave.setStartDurationType(stDur);
				
				leave.setEndDate(EMicroUtils.display(rsLeave.getDate("end_date")));
				
				String endDur=rsLeave.getString("end_duration");
				
				if(endDur.equalsIgnoreCase("FD")){
					endDur="Full Day";
				}
				if(endDur.equalsIgnoreCase("FH")){
					endDur="First Half";
				}
				if(endDur.equalsIgnoreCase("SH")){
					endDur="Second Half";
				}
				leave.setEndDurationType(endDur);
				leave.setNoOfDays(rsLeave.getString("no_of_days"));
				leave.setApproveStatus(rsLeave.getString("Req_Status"));
				leaveList.add(leave);
				}
				if(leaveList.size()>0){
				if(type.equalsIgnoreCase("Pending")){
					request.setAttribute("displayButton", "displayButton");
					}
				}
				request.setAttribute("leaveList", leaveList);
				if(leaveList.size()==0){
					request.setAttribute("no Leave records", "no Leave records");
					approvalsForm.setMessage3("No Records Found..");
				}
				
				
				request.setAttribute("disableNextButton", "disableNextButton");
				request.setAttribute("previousButton", "previousButton");
				if(leaveList.size()<10)
				{
					
					request.setAttribute("previousButton", "previousButton");
					request.setAttribute("disablePreviousButton", "disablePreviousButton");
				}
				request.setAttribute("displayRecordNo", "displayRecordNo");
				}catch (Exception e) {
					e.printStackTrace();
				}
				
			
				try {
					rsLeave.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
			}
			
			 if(type.equalsIgnoreCase("On Duty"))
			 {

					LinkedList ondutyList=new LinkedList();
					String getOndutyRecords="";
					
					if(empno.equalsIgnoreCase("")){
						
						getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime," +
						"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,onduty.start_date,onduty.end_date " +
						"from  All_Request as all_R,emp_official_info as emp,OnDuty_details as onduty,Location as loc where  Req_Status='"+filter+"' and all_R.Req_Id=onduty.request_no " +
						"and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+") and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='On Duty') as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
					}
					
					if(!empno.equalsIgnoreCase("")){
						
						getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime," +
						"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,onduty.start_date,onduty.end_date " +
						"from  All_Request as all_R,emp_official_info as emp,OnDuty_details as onduty,Location as loc where  Req_Status='"+filter+"' and all_R.Req_Id=onduty.request_no  and  all_R.Requester_Name='"+empno+"' " +
						"and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+") and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='On Duty') as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
					}
					
					ResultSet rsOnduty=ad.selectQuery(getOndutyRecords);
					try{
					while(rsOnduty.next()){
					OnDutyForm onduty=new OnDutyForm();
					onduty.setRequestNumber(rsOnduty.getInt("Req_Id"));
					onduty.setEmployeeNumber(rsOnduty.getString("Requester_Name"));
				
					onduty.setOnDutyType(rsOnduty.getString("onDuty_Type"));
					onduty.setLocationId(rsOnduty.getString("location"));
					onduty.setEmployeeName(rsOnduty.getString("EMP_FULLNAME"));
					onduty.setSubmitDate(rsOnduty.getString("Req_Date"));
					onduty.setStartDate(EMicroUtils.display(rsOnduty.getDate("start_date")));
					onduty.setLocationId(rsOnduty.getString("location"));
					onduty.setStartTime(rsOnduty.getString("startTime"));
					onduty.setEndDate(EMicroUtils.display(rsOnduty.getDate("end_date")));
					
					
					onduty.setEndTime(rsOnduty.getString("endTime"));
					onduty.setApprover(rsOnduty.getString("Req_Status"));
					ondutyList.add(onduty);
					}
					if(ondutyList.size()>0){
					if(type.equalsIgnoreCase("Pending")){
						request.setAttribute("displayButton", "displayButton");
						}
					}
					request.setAttribute("ondutyList", ondutyList);
					if(ondutyList.size()==0){
						request.setAttribute("no OnDuty records", "no OnDuty records");
						approvalsForm.setMessage3("No Records Found..");
					}
					request.setAttribute("disableNextButton", "disableNextButton");
					request.setAttribute("previousButton", "previousButton");
					if(ondutyList.size()<10)
					{
						
						request.setAttribute("previousButton", "previousButton");
						request.setAttribute("disablePreviousButton", "disablePreviousButton");
					}
					request.setAttribute("displayRecordNo", "displayRecordNo");

					}catch (Exception e) {
						e.printStackTrace();
					}
					try {
						rsOnduty.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
				
			 }
			 if(type.equalsIgnoreCase("Permission"))
			 {
				 LinkedList permList=new LinkedList();
					String getPermissionRecords="";
					String getPermissionDetails="select * from Permission_details where user_id='"+user.getEmployeeNo()+"' ";
					
					
					
					if(empno.equalsIgnoreCase("")){
						
						getPermissionRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS RowNum,all_R.Req_Id," +
				"all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.date,perm.startTime,perm.endTime,CONVERT(varchar(10),perm.Created_date,103)+' '+ CONVERT(varchar(5),perm.Created_date,108) as Created_date1,perm.type from  All_Request as all_R," +
				"emp_official_info as emp, Permission_details as perm,Location as loc where  Req_Status='"+filter+"' and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+") " +
				"and all_R.Req_Id=perm.request_no and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Permission' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.date,perm.startTime,perm.endTime,perm.Created_date,perm.type ) as  sub Where  " +
				"sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";					
						
					}
					
					if(!empno.equalsIgnoreCase("")){
						
						getPermissionRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS RowNum,all_R.Req_Id," +
				"all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.date,perm.startTime,perm.endTime,CONVERT(varchar(10),perm.Created_date,103)+' '+ CONVERT(varchar(5),perm.Created_date,108) as Created_date1,perm.type from  All_Request as all_R," +
				"emp_official_info as emp, Permission_details as perm,Location as loc where  Req_Status='"+filter+"' and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+") " +
				" and  all_R.Requester_Name='"+empno+"' and all_R.Req_Id=perm.request_no and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Permission' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.date,perm.startTime,perm.endTime,perm.Created_date,perm.type ) as  sub Where  " +
				"sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";					
						
					}
					
					
					
					ResultSet rsPermission=ad.selectQuery(getPermissionRecords);
					try{
					while(rsPermission.next())
					{
						MyRequestForm permission=new MyRequestForm();
						permission.setReqdate(rsPermission.getString("Created_date1"));
						permission.setType(rsPermission.getString("type"));
						permission.setRequestNumber(rsPermission.getString("Req_Id"));
			            permission.setStartTime(rsPermission.getString("startTime"));
				          permission.setEndTime(rsPermission.getString("endTime"));
			        	permission.setRequestType("Permission");
						String requestDate=rsPermission.getString("Req_Date");
					  permission.setPermissiondate(EMicroUtils.display(rsPermission.getDate("date")));
						int isthere = (requestDate.indexOf("/"));
						if(isthere <= 0){
							String req[]=requestDate.split(" ");
							requestDate=req[0];
							String a[]=requestDate.split("-");
							requestDate=a[2]+"/"+a[1]+"/"+a[0];
						}
						permission.setCreateDate(requestDate);
						permission.setEmployeeName(rsPermission.getString("EMP_FULLNAME"));
						permission.setApprover(rsPermission.getString("Req_Status"));
						permission.setEmployeeNumber(rsPermission.getString("Requester_Name"));
						String url="";
						
						permission.setUrl(url);
						//leaveMaster.setLastApprover(rsLeaveDetails.getString("Last_approver"));
						//leaveMaster.setPendingApprover(rsLeaveDetails.getString("Pending_approver"));
						permList.add(permission);
							
					}
					
					if(permList.size()>0){
						if(type.equalsIgnoreCase("Pending")){
							request.setAttribute("displayButton", "displayButton");
							}
						}
						request.setAttribute("Permissionlist", permList);
						if(permList.size()==0){
							request.setAttribute("no Permission records", "no Permission records");
							approvalsForm.setMessage3("No Records Found..");
						}
						
						request.setAttribute("disableNextButton", "disableNextButton");
						request.setAttribute("previousButton", "previousButton");
						if(permList.size()<10)
						{
							
							request.setAttribute("previousButton", "previousButton");
							request.setAttribute("disablePreviousButton", "disablePreviousButton");
						}
						request.setAttribute("displayRecordNo", "displayRecordNo");
						
						

						}catch (Exception e) {
							e.printStackTrace();
						}
					try {
						rsPermission.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
				 
			 }
		
		
		
		
		return mapping.findForward("displayrecords");
	}
	
	public ActionForward previousRecord(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) 
	{
		HRApprovalForm approvalsForm = (HRApprovalForm) form;
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		NewsandMediaDao ad=new NewsandMediaDao();
		if(user==null){
			request.setAttribute("message","Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		String type=approvalsForm.getReqRequstType();
		approvalsForm.setReqRequstType(type);
		String filter=approvalsForm.getSelectedFilter();
		approvalsForm.setSelectedFilter(filter);
		String empno=approvalsForm.getEmployeeNo();
		
		int totalRecords=approvalsForm.getTotalRecords();//21
		int endRecord=approvalsForm.getStartRecord()-1;//20
		int startRecord=approvalsForm.getStartRecord()-10;//11
		
		if(startRecord==1)
		{
			request.setAttribute("disablePreviousButton", "disablePreviousButton");
			endRecord=10;
		}
		
		
		approvalsForm.setTotalRecords(totalRecords);
		approvalsForm.setStartRecord(1);
		approvalsForm.setEndRecord(10);
		
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		if(type.equalsIgnoreCase("OverTime"))
		{
		 LinkedList OT=new LinkedList();
			String getLeaveRecords="";
			
			if(empno.equalsIgnoreCase("")){
				
			    
			    
			    getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,"
						+ "emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,CONVERT(varchar(10),comp.RequestedDate,103) as Created_date1 "
						+ " from  All_Request as all_R,emp_official_info as emp,"
						+ "over_time_details as comp,Location as loc where  Req_Status='"+filter+"' and   (Actual_Approver_status is null or Actual_Approver_status='' or "
						+ "Actual_Approver_status='Approved') and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+")  and  all_R.Req_Id=comp.Req_no  and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='OverTime'"
						+ " group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,"
						+ "all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,comp.RequestedDate ) as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
		
				
				}
				
				if(!empno.equalsIgnoreCase("")){
					
				
				    getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,"
							+ "emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,CONVERT(varchar(10),comp.RequestedDate,103) as Created_date1 "
							+ " from  All_Request as all_R,emp_official_info as emp,"
							+ "over_time_details as comp,Location as loc where  Req_Status='"+filter+"' and   (Actual_Approver_status is null or Actual_Approver_status='' or "
							+ "Actual_Approver_status='Approved') and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+")  and  all_R.Req_Id=comp.Req_no  and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='OverTime'"
							+ " and  all_R.Requester_Name='"+empno+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,"
							+ "all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,comp.RequestedDate ) as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
			
					
						}
		 
				
				ResultSet rsLeave=ad.selectQuery(getLeaveRecords);
				try{
				while(rsLeave.next()){
					

					LeaveForm leave = new LeaveForm();
					leave.setRequestNumber(rsLeave.getInt("Req_no"));
					leave.setSubmitDate(rsLeave.getString("Created_date1"));
					leave.setStatus(rsLeave.getString("ApprvrStatus"));
					leave.setStartDate(EMicroUtils.display(rsLeave.getDate("FromDate")));
					leave.setEndDate(EMicroUtils.display(rsLeave.getDate("ToDate")));
					leave.setEmployeeName(rsLeave.getString("EMP_FULLNAME"));

					OT.add(leave);
				
					
					
					
				}
					 
					}catch (Exception e) {
						e.printStackTrace();
					}
					try {
						rsLeave.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				
					request.setAttribute("OTlist", OT);
					if(OT.size()>0){
						if(type.equalsIgnoreCase("Pending")){
							request.setAttribute("displayButton", "displayButton");
							}
						}
					
						if(OT.size()==0){
							request.setAttribute("no Leave records", "no Leave records");
							approvalsForm.setMessage3("No Records Found..");
						}
						
						
						 request.setAttribute("displayRecordNo", "displayRecordNo");
						 
						 
						 approvalsForm.setTotalRecords(totalRecords);
						  approvalsForm.setStartRecord(startRecord);
						  approvalsForm.setEndRecord(endRecord);
							request.setAttribute("nextButton", "nextButton");
							if(startRecord!=1)
							request.setAttribute("previousButton", "previousButton");
							request.setAttribute("displayRecordNo", "displayRecordNo");
							if(OT.size()<10)
							{
								approvalsForm.setStartRecord(1);
								request.setAttribute("previousButton", "");
								request.setAttribute("disablePreviousButton", "disablePreviousButton");
							}
					
		}
	 
if(type.equalsIgnoreCase("Comp-off/OT"))
		{
	
	
	LinkedList comp=new LinkedList();
	String getLeaveRecords="";
	
	if(empno.equalsIgnoreCase("")){
	
    
    
    getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,"
			+ "emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,CONVERT(varchar(10),comp.RequestedDate,103) as Created_date1 "
			+ " from  All_Request as all_R,emp_official_info as emp,"
			+ "comp_ot as comp,Location as loc where  Req_Status='"+filter+"' and   (Actual_Approver_status is null or Actual_Approver_status='' or "
			+ "Actual_Approver_status='Approved') and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+")  and  all_R.Req_Id=comp.Req_no  and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Comp-Off/OT'"
			+ " group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,"
			+ "all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,comp.RequestedDate ) as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";

	
	}
	
	if(!empno.equalsIgnoreCase("")){
		
	
	    getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,"
				+ "emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,CONVERT(varchar(10),comp.RequestedDate,103) as Created_date1 "
				+ " from  All_Request as all_R,emp_official_info as emp,"
				+ "comp_ot as comp,Location as loc where  Req_Status='"+filter+"' and   (Actual_Approver_status is null or Actual_Approver_status='' or "
				+ "Actual_Approver_status='Approved') and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+")  and  all_R.Req_Id=comp.Req_no  and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Comp-Off/OT'"
				+ " and  all_R.Requester_Name='"+empno+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,"
				+ "all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,comp.RequestedDate ) as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";

		
			}
	
	
	
	ResultSet rsLeave=ad.selectQuery(getLeaveRecords);
	try{
	while(rsLeave.next()){
		

		LeaveForm leave = new LeaveForm();
		leave.setRequestNumber(rsLeave.getInt("Req_no"));
		leave.setSubmitDate(rsLeave.getString("Created_date1"));
		leave.setStatus(rsLeave.getString("ApprvrStatus"));
		leave.setStartDate(EMicroUtils.display(rsLeave.getDate("FromDate")));
		leave.setEndDate(EMicroUtils.display(rsLeave.getDate("ToDate")));
		leave.setEmployeeName(rsLeave.getString("EMP_FULLNAME"));

		comp.add(leave);
	
		
		
		
	}
		 
		}catch (Exception e) {
			e.printStackTrace();
		}
		try {
			rsLeave.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		request.setAttribute("complist", comp);
		if(comp.size()>0){
			if(type.equalsIgnoreCase("Pending")){
				request.setAttribute("displayButton", "displayButton");
				}
			}
		
			if(comp.size()==0){
				request.setAttribute("no Leave records", "no Leave records");
				approvalsForm.setMessage3("No Records Found..");
			}
			
			
			 request.setAttribute("displayRecordNo", "displayRecordNo");
			 
			 
			 approvalsForm.setTotalRecords(totalRecords);
			  approvalsForm.setStartRecord(startRecord);
			  approvalsForm.setEndRecord(endRecord);
				request.setAttribute("nextButton", "nextButton");
				if(startRecord!=1)
				request.setAttribute("previousButton", "previousButton");
				request.setAttribute("displayRecordNo", "displayRecordNo");
				if(comp.size()<10)
				{
					approvalsForm.setStartRecord(1);
					request.setAttribute("previousButton", "");
					request.setAttribute("disablePreviousButton", "disablePreviousButton");
				}
		
		}
		
		if(type.equalsIgnoreCase("Leave"))
		{
			LinkedList leaveList=new LinkedList();
			String getLeaveRecords="";
			
			if(empno.equalsIgnoreCase("")){
				
				getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,leave.leave_type,emp.PERNR," +
					"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days from  All_Request as all_R," +
					"emp_official_info as emp,leave_details as leave,Location as loc  where   Req_Status='"+filter+"' and  (Actual_Approver_status is null or Actual_Approver_status='' or Actual_Approver_status='Approved') and all_R.Req_Type='Leave' and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+") and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id) " +
					"as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
					
					}
					
					if(!empno.equalsIgnoreCase("")){
						
						getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,leave.leave_type,emp.PERNR," +
							"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days from  All_Request as all_R," +
							"emp_official_info as emp,leave_details as leave,Location as loc  where   Req_Status='"+filter+"' and  (Actual_Approver_status is null or Actual_Approver_status='' or Actual_Approver_status='Approved') and all_R.Req_Type='Leave' and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+") " +
									" and  all_R.Requester_Name='"+empno+"' and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id) " +
							"as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
							
							}
			
			ResultSet rsLeave=ad.selectQuery(getLeaveRecords);
			try{
			while(rsLeave.next()){
			LeaveForm leave=new LeaveForm();
			leave.setRequestNumber(rsLeave.getInt("Req_Id"));
			
		String	leaveType=rsLeave.getString("leave_type");
			if(leaveType.equalsIgnoreCase("1")){
				leaveType="Casual";
			}
			if(leaveType.equalsIgnoreCase("2")){
				leaveType="Sick";
			}
			if(leaveType.equalsIgnoreCase("3")){
				leaveType="privilege";
			}
			if(leaveType.equalsIgnoreCase("4")){
				leaveType="Loss Of Pay";
			}
			if(leaveType.equalsIgnoreCase("5")){
				leaveType="Maternity";
			}
			if(leaveType.equalsIgnoreCase("6")){
				leaveType="Comp-Off";
			}
			leave.setLeaveType(leaveType);
			leave.setEmployeeNumber(rsLeave.getString("PERNR"));
			
			leave.setEmployeeName(rsLeave.getString("EMP_FULLNAME"));
			leave.setSubmitDate(rsLeave.getString("Req_Date"));
			leave.setStartDate(EMicroUtils.display(rsLeave.getDate("start_date")));
			String stDur=rsLeave.getString("start_duration");
			
			if(stDur.equalsIgnoreCase("FD")){
				stDur="Full Day";
			}
			if(stDur.equalsIgnoreCase("FH")){
				stDur="First Half";
			}
			if(stDur.equalsIgnoreCase("SH")){
				stDur="Second Half";
			}
			leave.setStartDurationType(stDur);
			
			leave.setEndDate(EMicroUtils.display(rsLeave.getDate("end_date")));
			
			String endDur=rsLeave.getString("end_duration");
			
			if(endDur.equalsIgnoreCase("FD")){
				endDur="Full Day";
			}
			if(endDur.equalsIgnoreCase("FH")){
				endDur="First Half";
			}
			if(endDur.equalsIgnoreCase("SH")){
				endDur="Second Half";
			}
			leave.setEndDurationType(endDur);
			leave.setNoOfDays(rsLeave.getString("no_of_days"));
			leave.setApproveStatus(rsLeave.getString("Req_Status"));
			leaveList.add(leave);
			}
			if(leaveList.size()>0){
			if(type.equalsIgnoreCase("Pending")){
				request.setAttribute("displayButton", "displayButton");
				}
			}
			request.setAttribute("leaveList", leaveList);
			if(leaveList.size()==0){
				request.setAttribute("no Leave records", "no Leave records");
				approvalsForm.setMessage3("No Records Found..");
			}
			
			
			 request.setAttribute("displayRecordNo", "displayRecordNo");
			 
			 
			 approvalsForm.setTotalRecords(totalRecords);
			  approvalsForm.setStartRecord(startRecord);
			  approvalsForm.setEndRecord(endRecord);
				request.setAttribute("nextButton", "nextButton");
				if(startRecord!=1)
				request.setAttribute("previousButton", "previousButton");
				request.setAttribute("displayRecordNo", "displayRecordNo");
				if(leaveList.size()<10)
				{
					approvalsForm.setStartRecord(1);
					request.setAttribute("previousButton", "");
					request.setAttribute("disablePreviousButton", "disablePreviousButton");
				}
			}catch (Exception e) {
				e.printStackTrace();
			}
			
try {
	rsLeave.close();
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}
			
			
		}
		
		 if(type.equalsIgnoreCase("On Duty"))
		 {

				LinkedList ondutyList=new LinkedList();
				String getOndutyRecords="";
				
				if(empno.equalsIgnoreCase("")){
					
					getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime," +
					"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,onduty.start_date,onduty.end_date " +
					"from  All_Request as all_R,emp_official_info as emp,OnDuty_details as onduty,Location as loc where  Req_Status='"+filter+"' and all_R.Req_Id=onduty.request_no " +
					"and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+") and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='On Duty') as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
				}
				
				if(!empno.equalsIgnoreCase("")){
					
					getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime," +
					"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,onduty.start_date,onduty.end_date " +
					"from  All_Request as all_R,emp_official_info as emp,OnDuty_details as onduty,Location as loc where  Req_Status='"+filter+"' and all_R.Req_Id=onduty.request_no  and  all_R.Requester_Name='"+empno+"' " +
					"and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+") and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='On Duty') as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
				}
				
				ResultSet rsOnduty=ad.selectQuery(getOndutyRecords);
				try{
				while(rsOnduty.next()){
				OnDutyForm onduty=new OnDutyForm();
				onduty.setRequestNumber(rsOnduty.getInt("Req_Id"));
				onduty.setEmployeeNumber(rsOnduty.getString("Requester_Name"));
			
				onduty.setOnDutyType(rsOnduty.getString("onDuty_Type"));
				onduty.setLocationId(rsOnduty.getString("location"));
				onduty.setEmployeeName(rsOnduty.getString("EMP_FULLNAME"));
				onduty.setSubmitDate(rsOnduty.getString("Req_Date"));
				onduty.setStartDate(EMicroUtils.display(rsOnduty.getDate("start_date")));
				onduty.setLocationId(rsOnduty.getString("location"));
				onduty.setStartTime(rsOnduty.getString("startTime"));
				onduty.setEndDate(EMicroUtils.display(rsOnduty.getDate("end_date")));
				
				
				onduty.setEndTime(rsOnduty.getString("endTime"));
				onduty.setApprover(rsOnduty.getString("Req_Status"));
				ondutyList.add(onduty);
				}
				if(ondutyList.size()>0){
				if(type.equalsIgnoreCase("Pending")){
					request.setAttribute("displayButton", "displayButton");
					}
				}
				request.setAttribute("ondutyList", ondutyList);
				if(ondutyList.size()==0){
					request.setAttribute("no OnDuty records", "no OnDuty records");
					approvalsForm.setMessage3("No Records Found..");
				}
				 request.setAttribute("displayRecordNo", "displayRecordNo");
				 
				 
				 approvalsForm.setTotalRecords(totalRecords);
				  approvalsForm.setStartRecord(startRecord);
				  approvalsForm.setEndRecord(endRecord);
					request.setAttribute("nextButton", "nextButton");
					if(startRecord!=1)
					request.setAttribute("previousButton", "previousButton");
					request.setAttribute("displayRecordNo", "displayRecordNo");
					if(ondutyList.size()<10)
					{
						approvalsForm.setStartRecord(1);
						request.setAttribute("previousButton", "");
						request.setAttribute("disablePreviousButton", "disablePreviousButton");
					}

				}catch (Exception e) {
					e.printStackTrace();
				}
				
				try {
					rsOnduty.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			
		 }
		 if(type.equalsIgnoreCase("Permission"))
		 {
			 LinkedList permList=new LinkedList();
				String getPermissionRecords="";
				String getPermissionDetails="select * from Permission_details where user_id='"+user.getEmployeeNo()+"' ";
				
				
				if(empno.equalsIgnoreCase("")){
					
					getPermissionRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS RowNum,all_R.Req_Id," +
			"all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.date,perm.startTime,perm.endTime,CONVERT(varchar(10),perm.Created_date,103)+' '+ CONVERT(varchar(5),perm.Created_date,108) as Created_date1,perm.type from  All_Request as all_R," +
			"emp_official_info as emp, Permission_details as perm,Location as loc where  Req_Status='"+filter+"' and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+") " +
			"and all_R.Req_Id=perm.request_no and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Permission' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.date,perm.startTime,perm.endTime,perm.Created_date,perm.type ) as  sub Where  " +
			"sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";					
					
				}
				
				if(!empno.equalsIgnoreCase("")){
					
					getPermissionRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS RowNum,all_R.Req_Id," +
			"all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.date,perm.startTime,perm.endTime,CONVERT(varchar(10),perm.Created_date,103)+' '+ CONVERT(varchar(5),perm.Created_date,108) as Created_date1,perm.type from  All_Request as all_R," +
			"emp_official_info as emp, Permission_details as perm,Location as loc where  Req_Status='"+filter+"' and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+") " +
			" and  all_R.Requester_Name='"+empno+"' and all_R.Req_Id=perm.request_no and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Permission' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.date,perm.startTime,perm.endTime,perm.Created_date,perm.type ) as  sub Where  " +
			"sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";					
					
				}
				
			
				
				
				
				
				ResultSet rsPermission=ad.selectQuery(getPermissionRecords);
				try{
				while(rsPermission.next())
				{
					MyRequestForm permission=new MyRequestForm();
					permission.setType(rsPermission.getString("type"));
					permission.setReqdate(rsPermission.getString("Created_date1"));
					permission.setRequestNumber(rsPermission.getString("Req_Id"));
		            permission.setStartTime(rsPermission.getString("startTime"));
			          permission.setEndTime(rsPermission.getString("endTime"));
		        	permission.setRequestType("Permission");
					String requestDate=rsPermission.getString("Req_Date");
				  permission.setPermissiondate(EMicroUtils.display(rsPermission.getDate("date")));
					int isthere = (requestDate.indexOf("/"));
					if(isthere <= 0){
						String req[]=requestDate.split(" ");
						requestDate=req[0];
						String a[]=requestDate.split("-");
						requestDate=a[2]+"/"+a[1]+"/"+a[0];
					}
					permission.setCreateDate(requestDate);
					permission.setEmployeeName(rsPermission.getString("EMP_FULLNAME"));
					permission.setApprover(rsPermission.getString("Req_Status"));
					permission.setEmployeeNumber(rsPermission.getString("Requester_Name"));
					String url="";
					
					permission.setUrl(url);
					//leaveMaster.setLastApprover(rsLeaveDetails.getString("Last_approver"));
					//leaveMaster.setPendingApprover(rsLeaveDetails.getString("Pending_approver"));
					permList.add(permission);
						
				}
		
				
				if(permList.size()>0){
					if(type.equalsIgnoreCase("Pending")){
						request.setAttribute("displayButton", "displayButton");
						}
					}
					request.setAttribute("Permissionlist", permList);
					if(permList.size()==0){
						request.setAttribute("no Permission records", "no Permission records");
						approvalsForm.setMessage3("No Records Found..");
					}
					
	               request.setAttribute("displayRecordNo", "displayRecordNo");
					 
					 
					 approvalsForm.setTotalRecords(totalRecords);
					  approvalsForm.setStartRecord(startRecord);
					  approvalsForm.setEndRecord(endRecord);
						request.setAttribute("nextButton", "nextButton");
						if(startRecord!=1)
						request.setAttribute("previousButton", "previousButton");
						request.setAttribute("displayRecordNo", "displayRecordNo");
						if(permList.size()<10)
						{
							approvalsForm.setStartRecord(1);
							request.setAttribute("previousButton", "");
							request.setAttribute("disablePreviousButton", "disablePreviousButton");
						}
					}catch (Exception e) {
						e.printStackTrace();
					}
			 
				try {
					rsPermission.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		 }
	
	
		
		return mapping.findForward("displayrecords");
	}
	public ActionForward nextRecord(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
	{
		
		HRApprovalForm approvalsForm = (HRApprovalForm) form;
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		NewsandMediaDao ad=new NewsandMediaDao();
		if(user==null){
			request.setAttribute("message","Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		String type=approvalsForm.getReqRequstType();
		approvalsForm.setReqRequstType(type);
		String filter=approvalsForm.getSelectedFilter();
		approvalsForm.setSelectedFilter(filter);
		String empno=approvalsForm.getEmployeeNo();
		
		int totalRecords=approvalsForm.getTotalRecords();//21
		int startRecord=approvalsForm.getStartRecord();//11
		int endRecord=approvalsForm.getEndRecord();	
		
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		if(totalRecords>endRecord)
		{
			if(totalRecords==endRecord)
			{
				startRecord=startRecord;
				endRecord=totalRecords;
			}
			if(totalRecords>endRecord)
			{
			startRecord=endRecord+1;
			endRecord=endRecord+10;
			}
			
			
			 if(type.equalsIgnoreCase("OverTime"))
				{
				 LinkedList OT=new LinkedList();
					String getLeaveRecords="";
					
					if(empno.equalsIgnoreCase("")){
						
					    
					    
					    getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,"
								+ "emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,CONVERT(varchar(10),comp.RequestedDate,103) as Created_date1 "
								+ " from  All_Request as all_R,emp_official_info as emp,"
								+ "over_time_details as comp,Location as loc where  Req_Status='"+filter+"' and   (Actual_Approver_status is null or Actual_Approver_status='' or "
								+ "Actual_Approver_status='Approved') and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+")  and  all_R.Req_Id=comp.Req_no  and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='OverTime'"
								+ " group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,"
								+ "all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,comp.RequestedDate ) as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
				
						
						}
						
						if(!empno.equalsIgnoreCase("")){
							
						
						    getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,"
									+ "emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,CONVERT(varchar(10),comp.RequestedDate,103) as Created_date1 "
									+ " from  All_Request as all_R,emp_official_info as emp,"
									+ "over_time_details as comp,Location as loc where  Req_Status='"+filter+"' and   (Actual_Approver_status is null or Actual_Approver_status='' or "
									+ "Actual_Approver_status='Approved') and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+")  and  all_R.Req_Id=comp.Req_no  and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='OverTime'"
									+ " and  all_R.Requester_Name='"+empno+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,"
									+ "all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,comp.RequestedDate ) as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
					
							
								}
				 
						
						ResultSet rsLeave=ad.selectQuery(getLeaveRecords);
						try{
						while(rsLeave.next()){
							

							LeaveForm leave = new LeaveForm();
							leave.setRequestNumber(rsLeave.getInt("Req_no"));
							leave.setSubmitDate(rsLeave.getString("Created_date1"));
							leave.setStatus(rsLeave.getString("ApprvrStatus"));
							leave.setStartDate(EMicroUtils.display(rsLeave.getDate("FromDate")));
							leave.setEndDate(EMicroUtils.display(rsLeave.getDate("ToDate")));
							leave.setEmployeeName(rsLeave.getString("EMP_FULLNAME"));

							OT.add(leave);
						
							
							
							
						}
							 
							}catch (Exception e) {
								e.printStackTrace();
							}
							try {
								rsLeave.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						
							request.setAttribute("OTlist", OT);
							if(OT.size()>0){
								if(type.equalsIgnoreCase("Pending")){
									request.setAttribute("displayButton", "displayButton");
									}
								}
						
								if(OT.size()==0){
									request.setAttribute("no Leave records", "no Leave records");
									approvalsForm.setMessage3("No Records Found..");
								}
								if(OT.size()!=0)
								{
									approvalsForm.setTotalRecords(totalRecords);
									approvalsForm.setStartRecord(startRecord);
									approvalsForm.setEndRecord(endRecord);
									request.setAttribute("nextButton", "nextButton");
									request.setAttribute("previousButton", "previousButton");
								}
								else
								{
									int start=startRecord;
									int end=startRecord;
									
									approvalsForm.setTotalRecords(totalRecords);
									approvalsForm.setStartRecord(start);
									approvalsForm.setEndRecord(end);
									
								}
							 if(OT.size()<10)
							 {
								 approvalsForm.setTotalRecords(totalRecords);
								 approvalsForm.setStartRecord(startRecord);
								 approvalsForm.setEndRecord(startRecord+OT.size()-1);
									request.setAttribute("nextButton", "");
									request.setAttribute("disableNextButton", "disableNextButton");
									request.setAttribute("previousButton", "previousButton"); 
								 
							 }
							 
							 if(endRecord==totalRecords)
							 {
								 request.setAttribute("nextButton", "");
									request.setAttribute("disableNextButton", "disableNextButton");
							 }
							 request.setAttribute("displayRecordNo", "displayRecordNo");
				}
			
			 if(type.equalsIgnoreCase("Comp-off/OT"))
				{
	    	
	    	
	    	LinkedList comp=new LinkedList();
			String getLeaveRecords="";
			
			if(empno.equalsIgnoreCase("")){
			
		    
		    
		    getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,"
					+ "emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,CONVERT(varchar(10),comp.RequestedDate,103) as Created_date1 "
					+ " from  All_Request as all_R,emp_official_info as emp,"
					+ "comp_ot as comp,Location as loc where  Req_Status='"+filter+"' and   (Actual_Approver_status is null or Actual_Approver_status='' or "
					+ "Actual_Approver_status='Approved') and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+")  and  all_R.Req_Id=comp.Req_no  and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Comp-Off/OT'"
					+ " group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,"
					+ "all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,comp.RequestedDate ) as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
	
			
			}
			
			if(!empno.equalsIgnoreCase("")){
				
			
			    getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,"
						+ "emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,CONVERT(varchar(10),comp.RequestedDate,103) as Created_date1 "
						+ " from  All_Request as all_R,emp_official_info as emp,"
						+ "comp_ot as comp,Location as loc where  Req_Status='"+filter+"' and   (Actual_Approver_status is null or Actual_Approver_status='' or "
						+ "Actual_Approver_status='Approved') and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+")  and  all_R.Req_Id=comp.Req_no  and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Comp-Off/OT'"
						+ " and  all_R.Requester_Name='"+empno+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,"
						+ "all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,comp.RequestedDate ) as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
		
				
					}
			
			
			
			ResultSet rsLeave=ad.selectQuery(getLeaveRecords);
			try{
			while(rsLeave.next()){
				

				LeaveForm leave = new LeaveForm();
				leave.setRequestNumber(rsLeave.getInt("Req_no"));
				leave.setSubmitDate(rsLeave.getString("Created_date1"));
				leave.setStatus(rsLeave.getString("ApprvrStatus"));
				leave.setStartDate(EMicroUtils.display(rsLeave.getDate("FromDate")));
				leave.setEndDate(EMicroUtils.display(rsLeave.getDate("ToDate")));
				leave.setEmployeeName(rsLeave.getString("EMP_FULLNAME"));

				comp.add(leave);
			
				
				
				
			}
				 
				}catch (Exception e) {
					e.printStackTrace();
				}
				try {
					rsLeave.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				request.setAttribute("complist", comp);
				if(comp.size()>0){
					if(type.equalsIgnoreCase("Pending")){
						request.setAttribute("displayButton", "displayButton");
						}
					}
			
					if(comp.size()==0){
						request.setAttribute("no Leave records", "no Leave records");
						approvalsForm.setMessage3("No Records Found..");
					}
					if(comp.size()!=0)
					{
						approvalsForm.setTotalRecords(totalRecords);
						approvalsForm.setStartRecord(startRecord);
						approvalsForm.setEndRecord(endRecord);
						request.setAttribute("nextButton", "nextButton");
						request.setAttribute("previousButton", "previousButton");
					}
					else
					{
						int start=startRecord;
						int end=startRecord;
						
						approvalsForm.setTotalRecords(totalRecords);
						approvalsForm.setStartRecord(start);
						approvalsForm.setEndRecord(end);
						
					}
				 if(comp.size()<10)
				 {
					 approvalsForm.setTotalRecords(totalRecords);
					 approvalsForm.setStartRecord(startRecord);
					 approvalsForm.setEndRecord(startRecord+comp.size()-1);
						request.setAttribute("nextButton", "");
						request.setAttribute("disableNextButton", "disableNextButton");
						request.setAttribute("previousButton", "previousButton"); 
					 
				 }
				 
				 if(endRecord==totalRecords)
				 {
					 request.setAttribute("nextButton", "");
						request.setAttribute("disableNextButton", "disableNextButton");
				 }
				 request.setAttribute("displayRecordNo", "displayRecordNo");
				
				}
			
			if(type.equalsIgnoreCase("Leave"))
			{
				LinkedList leaveList=new LinkedList();
				String getLeaveRecords="";
				
				if(empno.equalsIgnoreCase("")){
					
					getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,leave.leave_type,emp.PERNR," +
						"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days from  All_Request as all_R," +
						"emp_official_info as emp,leave_details as leave,Location as loc  where   Req_Status='"+filter+"' and  (Actual_Approver_status is null or Actual_Approver_status='' or Actual_Approver_status='Approved') and all_R.Req_Type='Leave' and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+") and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id) " +
						"as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
						
						}
						
				if(!empno.equalsIgnoreCase("")){
					
					getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,leave.leave_type,emp.PERNR," +
						"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days from  All_Request as all_R," +
						"emp_official_info as emp,leave_details as leave,Location as loc  where   Req_Status='"+filter+"' and  (Actual_Approver_status is null or Actual_Approver_status='' or Actual_Approver_status='Approved') and all_R.Req_Type='Leave' and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+") " +
								" and  all_R.Requester_Name='"+empno+"' and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id) " +
						"as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
						
						}
				
				
				ResultSet rsLeave=ad.selectQuery(getLeaveRecords);
				try{
				while(rsLeave.next()){
				LeaveForm leave=new LeaveForm();
				leave.setRequestNumber(rsLeave.getInt("Req_Id"));
				
			String	leaveType=rsLeave.getString("leave_type");
				if(leaveType.equalsIgnoreCase("1")){
					leaveType="Casual";
				}
				if(leaveType.equalsIgnoreCase("2")){
					leaveType="Sick";
				}
				if(leaveType.equalsIgnoreCase("3")){
					leaveType="privilege";
				}
				if(leaveType.equalsIgnoreCase("4")){
					leaveType="Loss Of Pay";
				}
				if(leaveType.equalsIgnoreCase("5")){
					leaveType="Maternity";
				}
				if(leaveType.equalsIgnoreCase("6")){
					leaveType="Comp-Off";
				}
				leave.setLeaveType(leaveType);
				leave.setEmployeeNumber(rsLeave.getString("PERNR"));
				
				leave.setEmployeeName(rsLeave.getString("EMP_FULLNAME"));
				leave.setSubmitDate(rsLeave.getString("Req_Date"));
				leave.setStartDate(EMicroUtils.display(rsLeave.getDate("start_date")));
				String stDur=rsLeave.getString("start_duration");
				
				if(stDur.equalsIgnoreCase("FD")){
					stDur="Full Day";
				}
				if(stDur.equalsIgnoreCase("FH")){
					stDur="First Half";
				}
				if(stDur.equalsIgnoreCase("SH")){
					stDur="Second Half";
				}
				leave.setStartDurationType(stDur);
				
				leave.setEndDate(EMicroUtils.display(rsLeave.getDate("end_date")));
				
				String endDur=rsLeave.getString("end_duration");
				
				if(endDur.equalsIgnoreCase("FD")){
					endDur="Full Day";
				}
				if(endDur.equalsIgnoreCase("FH")){
					endDur="First Half";
				}
				if(endDur.equalsIgnoreCase("SH")){
					endDur="Second Half";
				}
				leave.setEndDurationType(endDur);
				leave.setNoOfDays(rsLeave.getString("no_of_days"));
				leave.setApproveStatus(rsLeave.getString("Req_Status"));
				leaveList.add(leave);
				}
				
				rsLeave.close();
				if(leaveList.size()>0){
				if(type.equalsIgnoreCase("Pending")){
					request.setAttribute("displayButton", "displayButton");
					}
				}
				request.setAttribute("leaveList", leaveList);
				if(leaveList.size()==0){
					request.setAttribute("no Leave records", "no Leave records");
					approvalsForm.setMessage3("No Records Found..");
				}
				if(leaveList.size()!=0)
				{
					approvalsForm.setTotalRecords(totalRecords);
					approvalsForm.setStartRecord(startRecord);
					approvalsForm.setEndRecord(endRecord);
					request.setAttribute("nextButton", "nextButton");
					request.setAttribute("previousButton", "previousButton");
				}
				else
				{
					int start=startRecord;
					int end=startRecord;
					
					approvalsForm.setTotalRecords(totalRecords);
					approvalsForm.setStartRecord(start);
					approvalsForm.setEndRecord(end);
					
				}
			 if(leaveList.size()<10)
			 {
				 approvalsForm.setTotalRecords(totalRecords);
				 approvalsForm.setStartRecord(startRecord);
				 approvalsForm.setEndRecord(startRecord+leaveList.size()-1);
					request.setAttribute("nextButton", "");
					request.setAttribute("disableNextButton", "disableNextButton");
					request.setAttribute("previousButton", "previousButton"); 
				 
			 }
			 
			 if(endRecord==totalRecords)
			 {
				 request.setAttribute("nextButton", "");
					request.setAttribute("disableNextButton", "disableNextButton");
			 }
			 request.setAttribute("displayRecordNo", "displayRecordNo");
				
				
				}catch (Exception e) {
					e.printStackTrace();
				}
				try {
					rsLeave.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			
				
				
			}
			
			 if(type.equalsIgnoreCase("On Duty"))
			 {

					LinkedList ondutyList=new LinkedList();
					String getOndutyRecords="";
					if(empno.equalsIgnoreCase("")){
						
						getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime," +
						"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,onduty.start_date,onduty.end_date " +
						"from  All_Request as all_R,emp_official_info as emp,OnDuty_details as onduty,Location as loc where  Req_Status='"+filter+"' and all_R.Req_Id=onduty.request_no " +
						"and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+") and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='On Duty') as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
					}
					
					if(!empno.equalsIgnoreCase("")){
						
						getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime," +
						"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,onduty.start_date,onduty.end_date " +
						"from  All_Request as all_R,emp_official_info as emp,OnDuty_details as onduty,Location as loc where  Req_Status='"+filter+"' and all_R.Req_Id=onduty.request_no  and  all_R.Requester_Name='"+empno+"' " +
						"and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+") and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='On Duty') as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
					}
					
					ResultSet rsOnduty=ad.selectQuery(getOndutyRecords);
					try{
					while(rsOnduty.next()){
					OnDutyForm onduty=new OnDutyForm();
					onduty.setRequestNumber(rsOnduty.getInt("Req_Id"));
					onduty.setEmployeeNumber(rsOnduty.getString("Requester_Name"));
				
					onduty.setOnDutyType(rsOnduty.getString("onDuty_Type"));
					onduty.setLocationId(rsOnduty.getString("location"));
					onduty.setEmployeeName(rsOnduty.getString("EMP_FULLNAME"));
					onduty.setSubmitDate(rsOnduty.getString("Req_Date"));
					onduty.setStartDate(EMicroUtils.display(rsOnduty.getDate("start_date")));
					onduty.setLocationId(rsOnduty.getString("location"));
					onduty.setStartTime(rsOnduty.getString("startTime"));
					onduty.setEndDate(EMicroUtils.display(rsOnduty.getDate("end_date")));
					
					
					onduty.setEndTime(rsOnduty.getString("endTime"));
					onduty.setApprover(rsOnduty.getString("Req_Status"));
					ondutyList.add(onduty);
					}
					if(ondutyList.size()>0){
					if(type.equalsIgnoreCase("Pending")){
						request.setAttribute("displayButton", "displayButton");
						}
					}
					request.setAttribute("ondutyList", ondutyList);
					if(ondutyList.size()==0){
						request.setAttribute("no OnDuty records", "no OnDuty records");
						approvalsForm.setMessage3("No Records Found..");
					}
					
					if(ondutyList.size()!=0)
					{
						approvalsForm.setTotalRecords(totalRecords);
						approvalsForm.setStartRecord(startRecord);
						approvalsForm.setEndRecord(endRecord);
						request.setAttribute("nextButton", "nextButton");
						request.setAttribute("previousButton", "previousButton");
					}
					else
					{
						int start=startRecord;
						int end=startRecord;
						
						approvalsForm.setTotalRecords(totalRecords);
						approvalsForm.setStartRecord(start);
						approvalsForm.setEndRecord(end);
						
					}
				 if(ondutyList.size()<10)
				 {
					 approvalsForm.setTotalRecords(totalRecords);
					 approvalsForm.setStartRecord(startRecord);
					 approvalsForm.setEndRecord(startRecord+ondutyList.size()-1);
						request.setAttribute("nextButton", "");
						request.setAttribute("disableNextButton", "disableNextButton");
						request.setAttribute("previousButton", "previousButton"); 
					 
				 }
				 
				 if(endRecord==totalRecords)
				 {
					 request.setAttribute("nextButton", "");
						request.setAttribute("disableNextButton", "disableNextButton");
				 }
				 request.setAttribute("displayRecordNo", "displayRecordNo");
					}catch (Exception e) {
						e.printStackTrace();
					}
					
					try {
						rsOnduty.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				
			 }
			 if(type.equalsIgnoreCase("Permission"))
			 {
				 LinkedList permList=new LinkedList();
					String getPermissionRecords="";
					String getPermissionDetails="select * from Permission_details where user_id='"+user.getEmployeeNo()+"' ";
					
					
					
					if(empno.equalsIgnoreCase("")){
						
						getPermissionRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS RowNum,all_R.Req_Id," +
				"all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.date,perm.startTime,perm.endTime,CONVERT(varchar(10),perm.Created_date,103)+' '+ CONVERT(varchar(5),perm.Created_date,108) as Created_date1,perm.type from  All_Request as all_R," +
				"emp_official_info as emp, Permission_details as perm,Location as loc where  Req_Status='"+filter+"' and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+") " +
				"and all_R.Req_Id=perm.request_no and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Permission' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.date,perm.startTime,perm.endTime,perm.Created_date,perm.type ) as  sub Where  " +
				"sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";					
						
					}
					
					if(!empno.equalsIgnoreCase("")){
						
						getPermissionRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS RowNum,all_R.Req_Id," +
				"all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.date,perm.startTime,perm.endTime,CONVERT(varchar(10),perm.Created_date,103)+' '+ CONVERT(varchar(5),perm.Created_date,108) as Created_date1,perm.type from  All_Request as all_R," +
				"emp_official_info as emp, Permission_details as perm,Location as loc where  Req_Status='"+filter+"' and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+") " +
				" and  all_R.Requester_Name='"+empno+"' and all_R.Req_Id=perm.request_no and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Permission' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.date,perm.startTime,perm.endTime,perm.Created_date,perm.type ) as  sub Where  " +
				"sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";					
						
					}
					
					
					
					ResultSet rsPermission=ad.selectQuery(getPermissionRecords);
					try{
					while(rsPermission.next())
					{
						MyRequestForm permission=new MyRequestForm();
						permission.setReqdate(rsPermission.getString("Created_date1"));
						permission.setType(rsPermission.getString("type"));
						permission.setRequestNumber(rsPermission.getString("Req_Id"));
			            permission.setStartTime(rsPermission.getString("startTime"));
				          permission.setEndTime(rsPermission.getString("endTime"));
			        	permission.setRequestType("Permission");
						String requestDate=rsPermission.getString("Req_Date");
					  permission.setPermissiondate(EMicroUtils.display(rsPermission.getDate("date")));
						int isthere = (requestDate.indexOf("/"));
						if(isthere <= 0){
							String req[]=requestDate.split(" ");
							requestDate=req[0];
							String a[]=requestDate.split("-");
							requestDate=a[2]+"/"+a[1]+"/"+a[0];
						}
						permission.setCreateDate(requestDate);
						permission.setEmployeeName(rsPermission.getString("EMP_FULLNAME"));
						permission.setApprover(rsPermission.getString("Req_Status"));
						permission.setEmployeeNumber(rsPermission.getString("Requester_Name"));
						String url="";
						
						permission.setUrl(url);
						//leaveMaster.setLastApprover(rsLeaveDetails.getString("Last_approver"));
						//leaveMaster.setPendingApprover(rsLeaveDetails.getString("Pending_approver"));
						permList.add(permission);
							
					}
					
					
					if(permList.size()>0){
						if(type.equalsIgnoreCase("Pending")){
							request.setAttribute("displayButton", "displayButton");
							}
						}
						request.setAttribute("Permissionlist", permList);
						if(permList.size()==0){
							request.setAttribute("no Permission records", "no Permission records");
							approvalsForm.setMessage3("No Records Found..");
						}
						
						if(permList.size()!=0)
						{
							approvalsForm.setTotalRecords(totalRecords);
							approvalsForm.setStartRecord(startRecord);
							approvalsForm.setEndRecord(endRecord);
							request.setAttribute("nextButton", "nextButton");
							request.setAttribute("previousButton", "previousButton");
						}
						else
						{
							int start=startRecord;
							int end=startRecord;
							
							approvalsForm.setTotalRecords(totalRecords);
							approvalsForm.setStartRecord(start);
							approvalsForm.setEndRecord(end);
							
						}
					 if(permList.size()<10)
					 {
						 approvalsForm.setTotalRecords(totalRecords);
						 approvalsForm.setStartRecord(startRecord);
						 approvalsForm.setEndRecord(startRecord+permList.size()-1);
							request.setAttribute("nextButton", "");
							request.setAttribute("disableNextButton", "disableNextButton");
							request.setAttribute("previousButton", "previousButton"); 
						 
					 }
					 
					 if(endRecord==totalRecords)
					 {
						 request.setAttribute("nextButton", "");
							request.setAttribute("disableNextButton", "disableNextButton");
					 }
					 request.setAttribute("displayRecordNo", "displayRecordNo");
						}catch (Exception e) {
							e.printStackTrace();
						}
					try {
						rsPermission.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				 
			 }
		
		}
		
		
		return mapping.findForward("displayrecords");
	}
	
	
	 public int getCountForTable(String reqStatus,  String reqType,String plantcode,String EmpNo,HttpServletRequest request,HttpServletResponse response){
		  
		  HttpSession session = request.getSession();
		UserInfo user = (UserInfo) session.getAttribute("user");
		  
		  
   	int rowCount = 0;
   	int empcount = 0;
   	MainDao exeQry = new MainDao();
   	String reqList="";
   	
   	//chk emp exist
   	
   	
   	if(reqStatus.equalsIgnoreCase("Pending")){
   	if(EmpNo.equalsIgnoreCase("")){
   	
   	reqList="select count(distinct Req_Id) from All_Request as all_r,emp_official_info as emp,Location as loc where Req_Type='"+reqType+"' and " +
   			"Req_Status='Pending' and emp.PERNR=all_r.Requester_Id and loc.LOCATION_CODE=emp.LOCID and location_code in ("+plantcode+")";    
   	
   	}
   	
   	if(!EmpNo.equalsIgnoreCase("")){
   		
       	reqList="select count(distinct Req_Id) from All_Request as all_r,emp_official_info as emp,Location as loc where Req_Type='"+reqType+"' and " +
       			"Req_Status='Pending' and emp.PERNR=all_r.Requester_Id and loc.LOCATION_CODE=emp.LOCID and location_code in ("+plantcode+") and all_r.Requester_Name='"+EmpNo+"'";    
   	
   		 	}
   	}
   	if(reqStatus.equalsIgnoreCase("Approved")){
   		
   		if(EmpNo.equalsIgnoreCase("")){
   		
			reqList="select count(distinct Req_Id) from All_Request as all_r,emp_official_info as emp,Location as loc where Req_Type='"+reqType+"' and " +
   			"Req_Status='Approved' and  (Actual_Approver_status is null or Actual_Approver_status='') and emp.PERNR=all_r.Requester_Id and loc.LOCATION_CODE=emp.LOCID and location_code in ("+plantcode+")";
		           }
   		
   	 	if(!EmpNo.equalsIgnoreCase("")){
       		
       			reqList="select count(distinct Req_Id) from All_Request as all_r,emp_official_info as emp,Location as loc where Req_Type='"+reqType+"' and " +
       			"Req_Status='Approved'  and  (Actual_Approver_status is null or Actual_Approver_status='') and emp.PERNR=all_r.Requester_Id and loc.LOCATION_CODE=emp.LOCID and location_code in ("+plantcode+") and all_r.Requester_Name='"+EmpNo+"' ";
       		
           	}
   	 	
   	 	
   	}
   	
     if(reqStatus.equalsIgnoreCase("Cancelled")){    		
   		reqList="select count(distinct Req_Id) from All_Request where Req_Type='"+reqType+"' and Req_Status='Cancelled' and Last_approver='"+user.getEmployeeNo()+"'";
		 }
   	
     if(reqStatus.equalsIgnoreCase("CPending")){  		
 		   reqList="select count(distinct Req_Id) from All_Request where Req_Type='"+reqType+"' and Req_Status='Pending' and Pending_Approver='"+user.getEmployeeNo()+"'";
		 }
     if(reqStatus.equalsIgnoreCase("Rejected")){  		
		   reqList="select count(distinct Req_Id) from All_Request where Req_Type='"+reqType+"' and Req_Status='Rejected' and Last_approver='"+user.getEmployeeNo()+"'";
		 }
   	
   	
   	try
   	{
   		
   		ResultSet countrs=exeQry.selectQuery(reqList);
   		while(countrs.next()) {
   			rowCount=Integer.parseInt(countrs.getString(1));
   		}
   		countrs.close();
   	}
   	catch(SQLException se){
   		System.out.println("Exception @ getting count");
   		se.printStackTrace();
   	}
   	return rowCount;
   }
	
	public ActionForward approveRequest(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		
		HRApprovalForm approvalsForm = (HRApprovalForm) form;
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		NewsandMediaDao ad=new NewsandMediaDao();
		if(user==null){
			request.setAttribute("message","Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		
		String selectedReq[]=approvalsForm.getSelectedRequestNo();
		System.out.println("total="+selectedReq.length);
		
		String type=approvalsForm.getReqRequstType();
		approvalsForm.setReqRequstType(type);
		
		
		if(type.equalsIgnoreCase("Comp-off/OT"))
		{
			Date dNow = new Date( );
			 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS ");
				String dateNow = ft.format(dNow);
			int year = Calendar.getInstance().get(Calendar.YEAR);
			for(int i=0;i<selectedReq.length;i++)
			{
				
				String updateStatus = "update All_Request set Req_Status='Approved',Last_Approver=Pending_Approver,"
						+ "Pending_Approver='',Approved_Persons=Pending_Approver,approved_date='"
						+ dateNow
						+ "',Actual_Approver=Pending_Approver,"
						+ "Hr_Id='"+user.getEmployeeNo()+"' where Req_Id='"
						+ selectedReq[i]
						+ "' and Req_Type='Comp-Off/OT' and Req_Status='Pending'";
				int saveStatus = 0;
				saveStatus = ad.SqlExecuteUpdate(updateStatus);
				if (saveStatus > 0) {
				String updatemain = "update COMP_OT set ApprvrStatus='Approved',ApprvdDate='"
						+ dateNow + "',Pending_approver='No',Last_approver='"+Empname(user.getEmployeeNo())+"' where Req_no='" + selectedReq[i] + "'";
				int upStatus = 0;
				upStatus = ad.SqlExecuteUpdate(updatemain);
				}
			}
			
		}
		
		if(type.equalsIgnoreCase("OverTime"))
		{
			Date dNow = new Date( );
			 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS ");
				String dateNow = ft.format(dNow);
			int year = Calendar.getInstance().get(Calendar.YEAR);
			for(int i=0;i<selectedReq.length;i++)
			{
				
				String updateStatus = "update All_Request set Req_Status='Approved',Last_Approver=Pending_Approver,"
						+ "Pending_Approver='',Approved_Persons=Pending_Approver,approved_date='"
						+ dateNow
						+ "',Actual_Approver=Pending_Approver,"
						+ "Hr_Id='"+user.getEmployeeNo()+"' where Req_Id='"
						+ selectedReq[i]
						+ "' and Req_Type='OverTime' and Req_Status='Pending'";
				int saveStatus = 0;
				saveStatus = ad.SqlExecuteUpdate(updateStatus);
				if (saveStatus > 0) {
				String updatemain = "update OVER_TIME_DETAILS set ApprvrStatus='Approved',ApprvdDate='"
						+ dateNow + "',Pending_approver='No',Last_approver='"+Empname(user.getEmployeeNo())+"' where Req_no='" + selectedReq[i] + "'";
				int upStatus = 0;
				upStatus = ad.SqlExecuteUpdate(updatemain);
				}
			}
			
		}
		
		if(type.equalsIgnoreCase("Leave"))
		{
			int year = Calendar.getInstance().get(Calendar.YEAR);
			for(int i=0;i<selectedReq.length;i++)
			{
				Date dNow = new Date( );
				float noOfDays=0;
				String leaveType="";
				String empID="";
				boolean existStatus=false;
				String submit_date="";
				
				String getLeaveDetails="select * from leave_details where Req_Id='"+selectedReq[i]+"'"; 
				ResultSet rsLeave=ad.selectQuery(getLeaveDetails);
				try {
					while(rsLeave.next())
					{
						noOfDays=rsLeave.getFloat("no_of_days");
						leaveType=rsLeave.getString("leave_type");
						empID=rsLeave.getString("firstname");
						submit_date=rsLeave.getString("submit_date");
					}
				
					
					
				} catch (SQLException e2) {
					
					e2.printStackTrace();
				}
				
				
				
				String typeess="";
				 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS ");
					String dateNow = ft.format(dNow);
					
					//get ess type
					String ActualApprover="";
					String paralle1appr1="";
					String paralle1appr2="";
					String esstype="select * from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave'";
					ResultSet rs2=ad.selectQuery(esstype);
					try {
						while(rs2.next())
						{
							typeess=rs2.getString("reqType");
							if(typeess.equalsIgnoreCase("parallel"));
							{
								ActualApprover=rs2.getString("ApproverId");
								paralle1appr1=rs2.getString("Parallel_Approver1");
								paralle1appr2=rs2.getString("Parallel_Approver2");
							}
						
						}
						rs2.close();
					
					} catch (SQLException e2) {
					
						e2.printStackTrace();
					}
					
						
					
					
					
					
					String modifyRequest="";
					
					int statusChange=0;
					if(typeess.equalsIgnoreCase("sequential")){
						String data="Select * from All_Request where Req_Type='Leave' and Req_Id='"+selectedReq[i]+"' and Req_Status='Pending' ";
						ResultSet rs=ad.selectQuery(data);
						
						try {
							if(rs.next())
							{
								 ActualApprover=rs.getString("Pending_Approver");
						   }
						
							
						} catch (SQLException e1) {
							e1.printStackTrace();
						}	
					
						try {
							rs.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					
					 modifyRequest="update  All_Request set Last_Approver='"+ActualApprover+"',Approved_Persons='"+ActualApprover+"'," +
					"Req_Status='Approved',Pending_Approver='',approved_date='"+dateNow+"',rejected_date='',Hr_Id='"+user.getEmployeeNo()+"' " +
					"where Req_Type='Leave' and Req_Id='"+selectedReq[i]+"' and Pending_Approver='"+ActualApprover+"' and Req_Status='Pending'";	
					
						 statusChange=ad.SqlExecuteUpdate(modifyRequest);
					}
					
					if(typeess.equalsIgnoreCase("parallel"))
					{
						
						 modifyRequest="update  All_Request set Last_Approver='"+ActualApprover+"',Approved_Persons='"+ActualApprover+"'," +
						"Req_Status='Approved',Pending_Approver='',approved_date='"+dateNow+"',rejected_date='',Hr_Id='"+user.getEmployeeNo()+"' " +
						"where Req_Type='Leave' and Req_Id='"+selectedReq[i]+"' and Pending_Approver='"+ActualApprover+"' and Req_Status='Pending'";	
						 
						 statusChange=ad.SqlExecuteUpdate(modifyRequest);
						 
						 if(!(paralle1appr1.equalsIgnoreCase("")))
						 {
							 modifyRequest="update  All_Request set Last_Approver='"+paralle1appr1+"',Approved_Persons='"+paralle1appr1+"'," +
								"Req_Status='Approved',Pending_Approver='',approved_date='"+dateNow+"',rejected_date='',Hr_Id='"+user.getEmployeeNo()+"' " +
								"where Req_Type='Leave' and Req_Id='"+selectedReq[i]+"' and Pending_Approver='"+paralle1appr1+"' and Req_Status='Pending'";
							 
							 statusChange=ad.SqlExecuteUpdate(modifyRequest);
						 }
						 
						 if(!(paralle1appr2.equalsIgnoreCase("")))
						 {

							 modifyRequest="update  All_Request set Last_Approver='"+paralle1appr2+"',Approved_Persons='"+paralle1appr2+"'," +
							"Req_Status='Approved',Pending_Approver='',approved_date='"+dateNow+"',rejected_date='',Hr_Id='"+user.getEmployeeNo()+"' " +
							"where Req_Type='Leave' and Req_Id='"+selectedReq[i]+"' and Pending_Approver='"+paralle1appr2+"' and Req_Status='Pending'";
							 
							 statusChange=ad.SqlExecuteUpdate(modifyRequest);
						 }
						 
					}
					
					
					
					
					if(statusChange>0){
						
						 approvalsForm.setMessage("Request has been approved..");
					
					
						float lvBal=0;
						float avlBal=0;
						float closingBal=0;
						float leaveAvaild=0;
						
				
						
						String leaveBal="select * from lv_type_d where lv_empcode='"+empID+"' and lv_typeid='"+leaveType+"' and lv_calyear='"+year+"'";
						ResultSet rsLeaveBal=ad.selectQuery(leaveBal);
						try {
							while(rsLeaveBal.next()){
								avlBal=rsLeaveBal.getFloat("lv_awtBal");
								closingBal=rsLeaveBal.getFloat("lv_clbal");
								leaveAvaild=rsLeaveBal.getFloat("lv_availed");
							}
						} catch (SQLException e) {
				
							e.printStackTrace();
						}
						try {
							rsLeaveBal.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						avlBal=avlBal-noOfDays;
						closingBal=closingBal-noOfDays;
						leaveAvaild=leaveAvaild+noOfDays;
						
						String updateSql= "update leave_details set Last_approver='"+ActualApprover+"',Pending_approver='',leave_status='1',Approvel_Status='Approved',approved_date='"+dateNow+"',rejected_date='',lv_balence='"+closingBal+"',HR_id='"+user.getEmployeeNo()+"' where Req_Id='"+selectedReq[i]+"'";
						ad.SqlExecuteUpdate(updateSql);
						
					  String updateLeaveDetails="update lv_type_d set lv_clbal='"+closingBal+"',lv_awtBal='"+avlBal+"',lv_availed='"+leaveAvaild+"' where lv_typeid='"+leaveType+"' and lv_empcode='"+empID+"' and lv_calyear='"+year+"'";
					  int checkResult=ad.SqlExecuteUpdate(updateLeaveDetails);	
					
					}
					else
					{
						 approvalsForm.setMessage("Error..plz chk ..request not Approved");
					}
					
				
			}
		}
		
		if(type.equalsIgnoreCase("On Duty"))
		{
			
			for(int i=0;i<selectedReq.length;i++){
				try
				{
					
					Date dNow = new Date( );
					 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS ");
					String dateNow = ft.format(dNow);
					boolean existStatus=false;
					boolean checkStatus=false;
					String submit_date="";
					String empID="";
					String getLeaveDetails="select * from OnDuty_details where request_no='"+selectedReq[i]+"' "; 
					ResultSet rsLeave=ad.selectQuery(getLeaveDetails);
					while(rsLeave.next())
					{
						empID=rsLeave.getString("user_id");
						submit_date=rsLeave.getString("submit_date");
						
					}rsLeave.close();
					
					String typeess="";
					
						
						//get ess type
						String ActualApprover="";
						String paralle1appr1="";
						String paralle1appr2="";
						String esstype="select * from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave'";
						ResultSet rs2=ad.selectQuery(esstype);
						try {
							while(rs2.next())
							{
								typeess=rs2.getString("reqType");
								if(typeess.equalsIgnoreCase("parallel"));
								{
									ActualApprover=rs2.getString("ApproverId");
									paralle1appr1=rs2.getString("Parallel_Approver1");
									paralle1appr2=rs2.getString("Parallel_Approver2");
								}
							
							}
						} catch (SQLException e2) {
						
							e2.printStackTrace();
						}
					
             
					
                     String modifyRequest="";
					
					int statusChange=0;
					if(typeess.equalsIgnoreCase("sequential")){
						
					     //Get Pending Approver
						
						String data="Select * from All_Request where Req_Type='On Duty' and Req_Id='"+selectedReq[i]+"' and Req_Status='Pending' ";
						ResultSet rs=ad.selectQuery(data);
						
						try {
							if(rs.next())
							{
								
								 ActualApprover=rs.getString("Pending_Approver");
								
							}
							
							
						} catch (SQLException e1) {
							e1.printStackTrace();
						}
						
						rs.close();

					modifyRequest="update  All_Request set Last_Approver='"+ActualApprover+"'," +
					"Approved_Persons='"+ActualApprover+"',Req_Status='Approved',Pending_Approver=''," +
					"approved_date='"+dateNow+"',rejected_date='',Hr_Id='"+user.getEmployeeNo()+"' where Req_Type='On Duty' and Req_Id='"+selectedReq[i]+"' and" +
					" Pending_Approver='"+ActualApprover+"' and Req_Status='Pending'";	
					
				      statusChange=ad.SqlExecuteUpdate(modifyRequest);
					
					}
					
					if(typeess.equalsIgnoreCase("parallel"))
					{
						
						modifyRequest="update  All_Request set Last_Approver='"+ActualApprover+"'," +
						"Approved_Persons='"+ActualApprover+"',Req_Status='Approved',Pending_Approver=''," +
						"approved_date='"+dateNow+"',rejected_date='',Hr_Id='"+user.getEmployeeNo()+"' where Req_Type='On Duty' and Req_Id='"+selectedReq[i]+"' and" +
						" Pending_Approver='"+ActualApprover+"' and Req_Status='Pending'";	
						
					      statusChange=ad.SqlExecuteUpdate(modifyRequest);
						 
						 if(!(paralle1appr1.equalsIgnoreCase("")))
						 {
							 modifyRequest="update  All_Request set Last_Approver='"+paralle1appr1+"'," +
								"Approved_Persons='"+paralle1appr1+"',Req_Status='Approved',Pending_Approver=''," +
								"approved_date='"+dateNow+"',rejected_date='',Hr_Id='"+user.getEmployeeNo()+"' where Req_Type='On Duty' and Req_Id='"+selectedReq[i]+"' and" +
								" Pending_Approver='"+paralle1appr1+"' and Req_Status='Pending'";	
								
							      statusChange=ad.SqlExecuteUpdate(modifyRequest);
						 }
						 
						 if(!(paralle1appr2.equalsIgnoreCase("")))
						 {

							 modifyRequest="update  All_Request set Last_Approver='"+paralle1appr2+"'," +
							"Approved_Persons='"+paralle1appr2+"',Req_Status='Approved',Pending_Approver=''," +
							"approved_date='"+dateNow+"',rejected_date='',Hr_Id='"+user.getEmployeeNo()+"' where Req_Type='On Duty' and Req_Id='"+selectedReq[i]+"' and" +
							" Pending_Approver='"+paralle1appr2+"' and Req_Status='Pending'";	
								
							   statusChange=ad.SqlExecuteUpdate(modifyRequest);
						 }
						 
					}
					
					
					
					
					if(statusChange>0){
						
						 approvalsForm.setMessage("Request has been approved..");
						
					String updateSql= "update OnDuty_details set Last_approver='"+ActualApprover+"',Pending_approver=''," +
					"OnDuty_status='1',Approver_Status='Approved',approved_date='"+dateNow+"',rejected_date='',HR_id='"+user.getEmployeeNo()+"' " +
					"where request_no='"+selectedReq[i]+"'";
					ad.SqlExecuteUpdate(updateSql);
					}
					
					else
					{
						 approvalsForm.setMessage("Error..plz chk.. request not Approved");
					}
				
				}
				
				catch (Exception e) {
					e.printStackTrace();
				}
			}
			
			
		}
		
		if(type.equalsIgnoreCase("Permission"))
		{ 
			
			for(int i=0;i<selectedReq.length;i++)
			    {
				Date dNow = new Date( );
				 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS ");
				String dateNow = ft.format(dNow);
				String reqId=selectedReq[i];
				String getLeaveDetails="select left(startTime,5)+' '+right(startTime,2) as startTime1,left(endTime,5)+' '+right(endTime,2) as endTime1,"
						+ "* from Permission_details where request_no='"+reqId+"'"; 
				ResultSet rsLeave=ad.selectQuery(getLeaveDetails);
				String empID="";
				String submit_date="";
			
		
				String swipetype ="";
				String c[] = null;
				
				String manualdate="";
				
				String inTime ="";
				String outTime="";
				try{
				while(rsLeave.next())
				{
					empID=rsLeave.getString("user_id");
					submit_date=rsLeave.getString("date");
					manualdate=rsLeave.getString("date");
					c=submit_date.split("-");
					submit_date=c[2]+"/"+c[1]+"/"+c[0];
					type = rsLeave.getString("type");
					inTime =rsLeave.getString("startTime1");
					outTime=rsLeave.getString("endTime1");
					 swipetype=rsLeave.getString("swipe_type");
					
				}
				
				
				String typeess="";
				
				
				//get ess type
				String ActualApprover="";
				String paralle1appr1="";
				String paralle1appr2="";
				String esstype="select * from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave'";
				ResultSet rs2=ad.selectQuery(esstype);
				try {
					while(rs2.next())
					{
						typeess=rs2.getString("reqType");
						if(typeess.equalsIgnoreCase("parallel"));
						{
							ActualApprover=rs2.getString("ApproverId");
							paralle1appr1=rs2.getString("Parallel_Approver1");
							paralle1appr2=rs2.getString("Parallel_Approver2");
						}
					
					}
				} catch (SQLException e2) {
				
					e2.printStackTrace();
				}rs2.close();
				
				 
				
				 String modifyRequest="";
					
					int statusChange=0;
					if(typeess.equalsIgnoreCase("sequential")){
						
						//Get Pending Approver
						
						String data="Select * from All_Request where Req_Type='Permission' and Req_Id='"+selectedReq[i]+"' and Req_Status='Pending'";
						ResultSet rs=ad.selectQuery(data);
					
						try {
							while(rs.next())
							{
								
								 ActualApprover=rs.getString("Pending_Approver");
								
							}
							
							
						} catch (SQLException e1) {
							e1.printStackTrace();
						}
						rs.close();

				 modifyRequest="update  All_Request set Last_Approver='"+ActualApprover+"'," +
					"Approved_Persons='"+ActualApprover+"',Req_Status='Approved',Pending_Approver='',approved_date='"+dateNow+"'," +
					"rejected_date='',Hr_Id='"+user.getEmployeeNo()+"' where Req_Type='Permission' and Req_Id='"+selectedReq[i]+"' " +
					"and Pending_Approver='"+ActualApprover+"' and Req_Status='Pending' ";	
				 
				statusChange=ad.SqlExecuteUpdate(modifyRequest);
				
					}
					
					if(typeess.equalsIgnoreCase("parallel"))
					{

						
						modifyRequest="update  All_Request set Last_Approver='"+ActualApprover+"'," +
						"Approved_Persons='"+ActualApprover+"',Req_Status='Approved',Pending_Approver='',approved_date='"+dateNow+"'," +
						"rejected_date='',Hr_Id='"+user.getEmployeeNo()+"' where Req_Type='Permission' and Req_Id='"+selectedReq[i]+"' " +
						"and Pending_Approver='"+ActualApprover+"' and Req_Status='Pending'";	
					 
					statusChange=ad.SqlExecuteUpdate(modifyRequest);
						 
						 if(!(paralle1appr1.equalsIgnoreCase("")))
						 {
							 modifyRequest="update  All_Request set Last_Approver='"+paralle1appr1+"'," +
								"Approved_Persons='"+paralle1appr1+"',Req_Status='Approved',Pending_Approver='',approved_date='"+dateNow+"'," +
								"rejected_date='',Hr_Id='"+user.getEmployeeNo()+"' where Req_Type='Permission' and Req_Id='"+selectedReq[i]+"' " +
								"and Pending_Approver='"+paralle1appr1+"' and Req_Status='Pending' ";	
							 
							statusChange=ad.SqlExecuteUpdate(modifyRequest);
						 }
						 
						 if(!(paralle1appr2.equalsIgnoreCase("")))
						 {

							 modifyRequest="update  All_Request set Last_Approver='"+paralle1appr2+"'," +
								"Approved_Persons='"+paralle1appr2+"',Req_Status='Approved',Pending_Approver='',approved_date='"+dateNow+"'," +
								"rejected_date='',Hr_Id='"+user.getEmployeeNo()+"' where Req_Type='Permission' and Req_Id='"+selectedReq[i]+"' " +
								"and Pending_Approver='"+paralle1appr2+"' and Req_Status='Pending'";	
							 
							statusChange=ad.SqlExecuteUpdate(modifyRequest);
						 }
						 
					
						
					}
					
					
					if(statusChange>0){

						 approvalsForm.setMessage("Request has been approved..");
						
					String updateSql= "update Permission_details set Last_approver='"+ActualApprover+"'," +
					"Pending_approver='',Approver_Status='1',approved_date='"+dateNow+"',rejected_date='',HR_id='"+user.getEmployeeNo()+"' " +
					"where request_no='"+selectedReq[i]+"'";
					ad.SqlExecuteUpdate(updateSql);
					
					
					///insert into manula entry
					String manualswipe="";
					String manualtype="";
					
					if(swipetype.equalsIgnoreCase("In"))
					{
						manualswipe="I";
					}
					else
					{
						manualswipe="O";
					}
					
					if(type.equalsIgnoreCase("late Coming"))
					{
						manualtype="Late";
					}
					else
					{
						manualtype=type;
					}
					
					String up="update EMP_MANUAL_SWIPE set Status_Flag=0 where pernr='"+empID+"' and Start_date='"+manualdate+"' and In_Out='"+manualswipe+"'";
				    int s1d= ad.SqlExecuteUpdate(up);
				    
				    String s ="insert into EMP_MANUAL_SWIPE(Pernr,Start_date,In_Out,Start,Lost_Entry_Reason_Type,Remarks,Date,Time,Username,Created_date,Status_Flag) "
				    		+ "values('"+empID+"','"+manualdate+"', '"+manualswipe+"','"+getrailwaytime(inTime)+"', '"+manualtype+"','User Request',getdate(),getdate(),'"+user.getEmployeeNo()+"',getdate(),'1')";
					
					int k = ad.SqlExecuteUpdate(s);
					
					String time= "";
					String time_Status="";
					if(swipetype .equalsIgnoreCase("In"))
					{
						
						
						time = "update EMP_IN_OUT set  day"+Integer.parseInt(c[2])+" ='"+getrailwaytime(inTime)+"' where year ='"+Integer.parseInt(c[0])+"'  "
					    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"' and in_out = 'I' ";
							 int s1 = ad.SqlExecuteUpdate(time);
							 
					if(type.equalsIgnoreCase("late") || type.equalsIgnoreCase("Missing") || type.equalsIgnoreCase("Forgot Swipe"))
					{
						
							 
						time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" ='PP'+RIGHT(day"+Integer.parseInt(c[2])+",2) where year ='"+Integer.parseInt(c[0])+"'  "
							    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
									 int s2 = ad.SqlExecuteUpdate(time_Status);	 
						
					}
					if(type.equalsIgnoreCase("early"))
					{
						
					    
					    time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" ='PM'+RIGHT(day"+Integer.parseInt(c[2])+",2) where year ='"+Integer.parseInt(c[0])+"'  "
					    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
							 int s2 = ad.SqlExecuteUpdate(time_Status);
					}
					}
					else
						
					{
						
						time = "update EMP_IN_OUT set  day"+Integer.parseInt(c[2])+" ='"+getrailwaytime(inTime)+"' where year ='"+Integer.parseInt(c[0])+"'  "
					    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"' and in_out = 'O' ";
							 int s1 = ad.SqlExecuteUpdate(time);
						

						if(type.equalsIgnoreCase("late") || type.equalsIgnoreCase("Missing") || type.equalsIgnoreCase("Forgot Swipe"))
						{
							
								 
							time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" =LEFT(day"+Integer.parseInt(c[2])+",2)+'PP' where year ='"+Integer.parseInt(c[0])+"'  "
								    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
										 int s2 = ad.SqlExecuteUpdate(time_Status);	 
							
						}
						if(type.equalsIgnoreCase("early"))
						{
							
						    
						    time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" =LEFT(day"+Integer.parseInt(c[2])+",2)+'PM' where year ='"+Integer.parseInt(c[0])+"'  "
						    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
								 int s2 = ad.SqlExecuteUpdate(time_Status);
						}
						
					}
					
					
				}
					else
					{
						 approvalsForm.setMessage("Error..plz chk request not Approved");
					}
				
				
				
		         }catch (Exception e) {
						e.printStackTrace();
					}
				try {
					rsLeave.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}	
		pendingRecords(mapping, form, request, response);
		return mapping.findForward("displayrecords");
	}
	
	public ActionForward displayAllPending(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) 
	{
		
		return mapping.findForward("displayrecords");
	}
	
	public ActionForward pendingRecords(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) 
	{
		
		HRApprovalForm approvalsForm = (HRApprovalForm) form;
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		NewsandMediaDao ad=new NewsandMediaDao();
		String plantcode=user.getPlantId();
		
		int rowCount = 0;
    	int empcount = 0;
    	MainDao exeQry = new MainDao();
    	String reqList="";
    	int totalRecords =0;
    	
		if(user==null){
			request.setAttribute("message","Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		String type=approvalsForm.getReqRequstType();
		approvalsForm.setReqRequstType(type);
		String filter=approvalsForm.getSelectedFilter();
		approvalsForm.setSelectedFilter(filter);
		String empno=approvalsForm.getEmployeeNo();
		
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
		String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		
		if(empno.equalsIgnoreCase("")){
	        totalRecords = getCountForTable(approvalsForm.getSelectedFilter(),approvalsForm.getReqRequstType(),locations,empno,request,response);
		}
		
		if(!empno.equalsIgnoreCase("")){
			
			String emp=" select count(*) from emp_official_info where PERNR='"+empno+"'";
        	ResultSet rs1=exeQry.selectQuery(emp);
    		try {
    			while(rs1.next()) {
    				empcount=rs1.getInt(1);
    				totalRecords = getCountForTable(approvalsForm.getSelectedFilter(),approvalsForm.getReqRequstType(),locations,empno,request,response);
    			}
    		} catch (NumberFormatException e) {
    			
    			e.printStackTrace();
    		} catch (SQLException e) {
    			
    			e.printStackTrace();
    		}
    		try {
				rs1.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			 
				}
		
		  int  startRecord=0;
		  int  endRecord=0;
			 if(totalRecords>10)
			 {
				 approvalsForm.setTotalRecords(totalRecords);
			 startRecord=1;
			 endRecord=10;
			 approvalsForm.setStartRecord(1);
			 approvalsForm.setEndRecord(10);
				request.setAttribute("disablePreviousButton", "disablePreviousButton");
			 request.setAttribute("displayRecordNo", "displayRecordNo");
			 request.setAttribute("nextButton", "nextButton");
			 }else
			 {
				  startRecord=1;
				  endRecord=totalRecords;
				  approvalsForm.setTotalRecords(totalRecords);
				  approvalsForm.setStartRecord(1);
				  approvalsForm.setEndRecord(totalRecords); 
			 }
			 
			 
			 if(type.equalsIgnoreCase("OverTime"))
				{
				 LinkedList OT=new LinkedList();
					String getLeaveRecords="";
					
					if(empno.equalsIgnoreCase("")){
						
					    
					    
					    getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,"
								+ "emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,CONVERT(varchar(10),comp.RequestedDate,103) as Created_date1 "
								+ " from  All_Request as all_R,emp_official_info as emp,"
								+ "over_time_details as comp,Location as loc where  Req_Status='"+filter+"' and   (Actual_Approver_status is null or Actual_Approver_status='' or "
								+ "Actual_Approver_status='Approved') and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+")  and  all_R.Req_Id=comp.Req_no  and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='OverTime'"
								+ " group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,"
								+ "all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,comp.RequestedDate ) as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
				
						
						}
						
						if(!empno.equalsIgnoreCase("")){
							
						
						    getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,"
									+ "emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,CONVERT(varchar(10),comp.RequestedDate,103) as Created_date1 "
									+ " from  All_Request as all_R,emp_official_info as emp,"
									+ "over_time_details as comp,Location as loc where  Req_Status='"+filter+"' and   (Actual_Approver_status is null or Actual_Approver_status='' or "
									+ "Actual_Approver_status='Approved') and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+")  and  all_R.Req_Id=comp.Req_no  and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='OverTime'"
									+ " and  all_R.Requester_Name='"+empno+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,"
									+ "all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,comp.RequestedDate ) as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
					
							
								}
				 
						
						ResultSet rsLeave=ad.selectQuery(getLeaveRecords);
						try{
						while(rsLeave.next()){
							

							LeaveForm leave = new LeaveForm();
							leave.setRequestNumber(rsLeave.getInt("Req_no"));
							leave.setSubmitDate(rsLeave.getString("Created_date1"));
							leave.setStatus(rsLeave.getString("ApprvrStatus"));
							leave.setStartDate(EMicroUtils.display(rsLeave.getDate("FromDate")));
							leave.setEndDate(EMicroUtils.display(rsLeave.getDate("ToDate")));
							leave.setEmployeeName(rsLeave.getString("EMP_FULLNAME"));

							OT.add(leave);
						
							
							
							
						}
							 
							}catch (Exception e) {
								e.printStackTrace();
							}
							try {
								rsLeave.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						
							request.setAttribute("OTlist", OT);
							if(OT.size()>0){
								if(type.equalsIgnoreCase("Pending")){
									request.setAttribute("displayButton", "displayButton");
									}
								}
							request.setAttribute("disablePreviousButton","disablePreviousButton");
							if(OT.size()==0)
							{
								request.setAttribute("noOT", "noOT");
							
							}
				}
			 
	    if(type.equalsIgnoreCase("Comp-off/OT"))
				{
	    	
	    	
	    	LinkedList comp=new LinkedList();
			String getLeaveRecords="";
			
			if(empno.equalsIgnoreCase("")){
			
		    
		    
		    getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,"
					+ "emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,CONVERT(varchar(10),comp.RequestedDate,103) as Created_date1 "
					+ " from  All_Request as all_R,emp_official_info as emp,"
					+ "comp_ot as comp,Location as loc where  Req_Status='"+filter+"' and   (Actual_Approver_status is null or Actual_Approver_status='' or "
					+ "Actual_Approver_status='Approved') and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+")  and  all_R.Req_Id=comp.Req_no  and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Comp-Off/OT'"
					+ " group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,"
					+ "all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,comp.RequestedDate ) as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
	
			
			}
			
			if(!empno.equalsIgnoreCase("")){
				
			
			    getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,"
						+ "emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,CONVERT(varchar(10),comp.RequestedDate,103) as Created_date1 "
						+ " from  All_Request as all_R,emp_official_info as emp,"
						+ "comp_ot as comp,Location as loc where  Req_Status='"+filter+"' and   (Actual_Approver_status is null or Actual_Approver_status='' or "
						+ "Actual_Approver_status='Approved') and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+")  and  all_R.Req_Id=comp.Req_no  and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Comp-Off/OT'"
						+ " and  all_R.Requester_Name='"+empno+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,"
						+ "all_R.Req_Status,all_R.Req_Date,comp.FromDate,comp.ToDate,comp.Req_no,comp.ApprvrStatus,comp.RequestedDate ) as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
		
				
					}
			
			
			
			ResultSet rsLeave=ad.selectQuery(getLeaveRecords);
			try{
			while(rsLeave.next()){
				

				LeaveForm leave = new LeaveForm();
				leave.setRequestNumber(rsLeave.getInt("Req_no"));
				leave.setSubmitDate(rsLeave.getString("Created_date1"));
				leave.setStatus(rsLeave.getString("ApprvrStatus"));
				leave.setStartDate(EMicroUtils.display(rsLeave.getDate("FromDate")));
				leave.setEndDate(EMicroUtils.display(rsLeave.getDate("ToDate")));
				leave.setEmployeeName(rsLeave.getString("EMP_FULLNAME"));

				comp.add(leave);
			
				
				
				
			}
				 
				}catch (Exception e) {
					e.printStackTrace();
				}
				try {
					rsLeave.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				request.setAttribute("complist", comp);
				if(comp.size()>0){
					if(type.equalsIgnoreCase("Pending")){
						request.setAttribute("displayButton", "displayButton");
						}
					}
				request.setAttribute("disablePreviousButton","disablePreviousButton");
				if(comp.size()==0)
				{
					request.setAttribute("nocomp", "nocomp");
				
				}
				
				}
		if(type.equalsIgnoreCase("Leave"))
		{
			LinkedList leaveList=new LinkedList();
			String getLeaveRecords="";
			
			if(empno.equalsIgnoreCase("")){
			
		    getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,leave.leave_type,emp.PERNR," +
			"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days from  All_Request as all_R," +
			"emp_official_info as emp,leave_details as leave,Location as loc  where   Req_Status='"+filter+"' and   (Actual_Approver_status is null or Actual_Approver_status='' or Actual_Approver_status='Approved') and all_R.Req_Type='Leave' and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+") and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id group by all_R.Req_Id,leave.leave_type,emp.PERNR,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days) " +
			"as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
			
			}
			
			if(!empno.equalsIgnoreCase("")){
				
				getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,leave.leave_type,emp.PERNR," +
					"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days from  All_Request as all_R," +
					"emp_official_info as emp,leave_details as leave,Location as loc  where   Req_Status='"+filter+"' and  (Actual_Approver_status is null or Actual_Approver_status='' or Actual_Approver_status='Approved') and all_R.Req_Type='Leave' and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+") " +
							" and  all_R.Requester_Name='"+empno+"' and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id group by all_R.Req_Id,leave.leave_type,emp.PERNR,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days) " +
					"as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
					
					}
			
			
			
			ResultSet rsLeave=ad.selectQuery(getLeaveRecords);
			try{
			while(rsLeave.next()){
			LeaveForm leave=new LeaveForm();
			leave.setRequestNumber(rsLeave.getInt("Req_Id"));
			
		String	leaveType=rsLeave.getString("leave_type");
			if(leaveType.equalsIgnoreCase("1")){
				leaveType="Casual";
			}
			if(leaveType.equalsIgnoreCase("2")){
				leaveType="Sick";
			}
			if(leaveType.equalsIgnoreCase("3")){
				leaveType="privilege";
			}
			if(leaveType.equalsIgnoreCase("4")){
				leaveType="Loss Of Pay";
			}
			if(leaveType.equalsIgnoreCase("5")){
				leaveType="Maternity";
			}
			if(leaveType.equalsIgnoreCase("6")){
				leaveType="Comp-Off";
			}
			leave.setLeaveType(leaveType);
			leave.setEmployeeNumber(rsLeave.getString("PERNR"));
			
			leave.setEmployeeName(rsLeave.getString("EMP_FULLNAME"));
			leave.setSubmitDate(rsLeave.getString("Req_Date"));
			leave.setStartDate(EMicroUtils.display(rsLeave.getDate("start_date")));
			String stDur=rsLeave.getString("start_duration");
			
			if(stDur.equalsIgnoreCase("FD")){
				stDur="Full Day";
			}
			if(stDur.equalsIgnoreCase("FH")){
				stDur="First Half";
			}
			if(stDur.equalsIgnoreCase("SH")){
				stDur="Second Half";
			}
			leave.setStartDurationType(stDur);
			
			leave.setEndDate(EMicroUtils.display(rsLeave.getDate("end_date")));
			
			String endDur=rsLeave.getString("end_duration");
			
			if(endDur.equalsIgnoreCase("FD")){
				endDur="Full Day";
			}
			if(endDur.equalsIgnoreCase("FH")){
				endDur="First Half";
			}
			if(endDur.equalsIgnoreCase("SH")){
				endDur="Second Half";
			}
			leave.setEndDurationType(endDur);
			leave.setNoOfDays(rsLeave.getString("no_of_days"));
			leave.setApproveStatus(rsLeave.getString("Req_Status"));
			leaveList.add(leave);
			}
			if(leaveList.size()>0){
			if(type.equalsIgnoreCase("Pending")){
				request.setAttribute("displayButton", "displayButton");
				}
			}
			request.setAttribute("leaveList", leaveList);
			if(leaveList.size()==0){
				request.setAttribute("no Leave records", "no Leave records");
				approvalsForm.setMessage3("No Records Found..");
			}
			}catch (Exception e) {
				e.printStackTrace();
			}
			try {
				rsLeave.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		
			
			
		}
		
		 if(type.equalsIgnoreCase("On Duty"))
		 {

				LinkedList ondutyList=new LinkedList();
				String getOndutyRecords="";
				
				if(empno.equalsIgnoreCase("")){
				
					getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime," +
					"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,onduty.start_date,onduty.end_date " +
					"from  All_Request as all_R,emp_official_info as emp,OnDuty_details as onduty,Location as loc where  Req_Status='"+filter+"' and all_R.Req_Id=onduty.request_no " +
					"and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+") and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='On Duty') as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
				}
				
				if(!empno.equalsIgnoreCase("")){
					
					getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime," +
					"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,onduty.start_date,onduty.end_date " +
					"from  All_Request as all_R,emp_official_info as emp,OnDuty_details as onduty,Location as loc where  Req_Status='"+filter+"' and all_R.Req_Id=onduty.request_no  and  all_R.Requester_Name='"+empno+"' " +
					"and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+") and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='On Duty') as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
				}
				
				ResultSet rsOnduty=ad.selectQuery(getOndutyRecords);
				try{
				while(rsOnduty.next()){
				OnDutyForm onduty=new OnDutyForm();
				onduty.setRequestNumber(rsOnduty.getInt("Req_Id"));
				onduty.setEmployeeNumber(rsOnduty.getString("Requester_Name"));
			
				onduty.setOnDutyType(rsOnduty.getString("onDuty_Type"));
				onduty.setLocationId(rsOnduty.getString("location"));
				onduty.setEmployeeName(rsOnduty.getString("EMP_FULLNAME"));
				onduty.setSubmitDate(rsOnduty.getString("Req_Date"));
				onduty.setStartDate(EMicroUtils.display(rsOnduty.getDate("start_date")));
				onduty.setLocationId(rsOnduty.getString("location"));
				onduty.setStartTime(rsOnduty.getString("startTime"));
				onduty.setEndDate(EMicroUtils.display(rsOnduty.getDate("end_date")));
				
				
				onduty.setEndTime(rsOnduty.getString("endTime"));
				onduty.setApprover(rsOnduty.getString("Req_Status"));
				ondutyList.add(onduty);
				}
				if(ondutyList.size()>0){
				if(type.equalsIgnoreCase("Pending")){
					request.setAttribute("displayButton", "displayButton");
					}
				}
				request.setAttribute("ondutyList", ondutyList);
				if(ondutyList.size()==0){
					request.setAttribute("no OnDuty records", "no OnDuty records");
					approvalsForm.setMessage3("No Records Found..");
				}
				}catch (Exception e) {
					e.printStackTrace();
				}
				try {
					rsOnduty.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			
		 }
		 if(type.equalsIgnoreCase("Permission"))
		 {
			 LinkedList permList=new LinkedList();
				String getPermissionRecords="";
				String getPermissionDetails="select * from Permission_details where user_id='"+user.getEmployeeNo()+"' ";
				
				if(empno.equalsIgnoreCase("")){
				
					getPermissionRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS RowNum,all_R.Req_Id," +
			"all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.date,perm.startTime,perm.endTime,CONVERT(varchar(10),perm.Created_date,103)+' '+ CONVERT(varchar(5),perm.Created_date,108) as Created_date1,perm.type from  All_Request as all_R," +
			"emp_official_info as emp, Permission_details as perm,Location as loc where  Req_Status='"+filter+"' and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+") " +
			"and all_R.Req_Id=perm.request_no and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Permission' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.date,perm.startTime,perm.endTime,perm.Created_date,perm.type ) as  sub Where  " +
			"sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";					
					
				}
				
				if(!empno.equalsIgnoreCase("")){
					
					getPermissionRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS RowNum,all_R.Req_Id," +
			"all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.date,perm.startTime,perm.endTime,CONVERT(varchar(10),perm.Created_date,103)+' '+ CONVERT(varchar(5),perm.Created_date,108) as Created_date1,perm.type from  All_Request as all_R," +
			"emp_official_info as emp, Permission_details as perm,Location as loc where  Req_Status='"+filter+"' and loc.LOCATION_CODE=emp.LOCID and loc.location_code in ("+locations+") " +
			" and  all_R.Requester_Name='"+empno+"' and all_R.Req_Id=perm.request_no and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Permission' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.date,perm.startTime,perm.endTime,perm.Created_date,perm.type ) as  sub Where  " +
			"sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";					
					
				}
				
				
				
				
				ResultSet rsPermission=ad.selectQuery(getPermissionRecords);
				try{
				while(rsPermission.next())
				{
					MyRequestForm permission=new MyRequestForm();
					permission.setReqdate(rsPermission.getString("Created_date1"));
					permission.setRequestNumber(rsPermission.getString("Req_Id"));
		            permission.setStartTime(rsPermission.getString("startTime"));
			          permission.setEndTime(rsPermission.getString("endTime"));
			  		permission.setType(rsPermission.getString("type"));
		        	permission.setRequestType("Permission");
					String requestDate=rsPermission.getString("Req_Date");
				  permission.setPermissiondate(EMicroUtils.display(rsPermission.getDate("date")));
					int isthere = (requestDate.indexOf("/"));
					if(isthere <= 0){
						String req[]=requestDate.split(" ");
						requestDate=req[0];
						String a[]=requestDate.split("-");
						requestDate=a[2]+"/"+a[1]+"/"+a[0];
					}
					permission.setCreateDate(requestDate);
					permission.setEmployeeName(rsPermission.getString("EMP_FULLNAME"));
					permission.setApprover(rsPermission.getString("Req_Status"));
					permission.setEmployeeNumber(rsPermission.getString("Requester_Name"));
					String url="";
					
					permission.setUrl(url);
					//leaveMaster.setLastApprover(rsLeaveDetails.getString("Last_approver"));
					//leaveMaster.setPendingApprover(rsLeaveDetails.getString("Pending_approver"));
					permList.add(permission);
						
				}
				
				if(permList.size()>0){
					if(type.equalsIgnoreCase("Pending")){
						request.setAttribute("displayButton", "displayButton");
						}
					}
					request.setAttribute("Permissionlist", permList);
					if(permList.size()==0){
						request.setAttribute("no Permission records", "no Permission records");
						approvalsForm.setMessage3("No Records Found..");
					}
					}catch (Exception e) {
						e.printStackTrace();
					}
				try {
					rsPermission.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		 }
		
		
		return mapping.findForward("displayrecords");
	}
	
	public ActionForward empshift(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response)
{

			HRApprovalForm sform=(HRApprovalForm)form;
			HttpSession session=request.getSession();
			UserInfo user=(UserInfo)session.getAttribute("user");
			sform.setMessage("");
			sform.setMessage2("");
			ArrayList a1=new ArrayList();
			ArrayList myRequestList=new ArrayList();
			String leaveType="";
			String holidayType="";
			String status="";
			DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
			Date date = new Date();
			

			String username="";
			
			try{
				 String getLeaveRecords="select ess.employeeNumber as emp_no,emp.EMP_FULLNAME as emp_name,emp.Locid as Loc,desg.DSGLTXT as dsg,dept.DPTLTXT as dpt  from ESS_Approvers as ess,emp_official_info as emp,DESIGNATION as desg,DEPARTMENT as dept where emp.PERNR=ess.employeeNumber and emp.DSGID=desg.DSGID and emp.DPTID=dept.DPTID and  ApproverId='"+user.getEmployeeNo()+"' and Priority=1 and emp.Active=1";
				 
				 	ResultSet rsLeaveRecords=ad.selectQuery(getLeaveRecords);
			while(rsLeaveRecords.next())
			{
				HRApprovalForm hshift=new HRApprovalForm();
				hshift.setEmployeeNo(rsLeaveRecords.getString("emp_no"));
				hshift.setEmployeeName(rsLeaveRecords.getString("emp_name"));
				hshift.setDesignation(rsLeaveRecords.getString("dsg"));
				hshift.setDepartment(rsLeaveRecords.getString("dpt"));
				hshift.setCurentDate("");
				//shift
				String loc=rsLeaveRecords.getString("loc");
				ArrayList shiftList=new ArrayList();
			ArrayList shiftLabelList=new ArrayList();
			ResultSet rs16 = ad.selectQuery("select shift_code," +
					"Shift_Name from EMP_SHIFT_MASTER where loc like '%"+loc+"%'"); 
					try {
						while(rs16.next()) {
							shiftList.add(rs16.getString("shift_code"));
							shiftLabelList.add(rs16.getString("shift_code")+"-"+rs16.getString("Shift_Name"));
						}
						rs16.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					hshift.setShiftList(shiftList);
					hshift.setShiftLabelList(shiftLabelList);
				
				
				 a1.add(hshift);
			}
			Iterator it=a1.iterator();
			int i=0;
			while(i<1000){
				if(it.hasNext()){
					myRequestList.add(it.next());
				i++;
				}
				else
					break;
			}
			/*	ArrayList shiftList=new ArrayList();
		ArrayList shiftLabelList=new ArrayList();
		ResultSet rs16 = ad.selectQuery("select shift_code," +
				"Shift_Name from EMP_SHIFT_MASTER where loc like '%"+plantcode+"%'"); 
				try {
					while(rs16.next()) {
						shiftList.add(rs16.getString("shift_code"));
						shiftLabelList.add(rs16.getString("shift_code")+"-"+rs16.getString("Shift_Name"));
					}
					rs16.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setShiftList(shiftList);
				calenderForm.setShiftLabelList(shiftLabelList);*/
			
			/*int i=0;
			while(i<10){
				if(it.hasNext()){
					myRequestList.add(it.next());
				i++;
				}
				else
					break;
			}
			sform.setStartRecord(1);
			sform.setEndRecord(i);*/
		//	leaveForm.setNext(i);
			}catch (Exception e) {
				e.printStackTrace();
			}

			request.setAttribute("shiftEmpDetails", myRequestList);
			session.setAttribute("leaveMyRequest", a1);
			request.setAttribute("disablePreviousButton","disablePreviousButton");
			int length=a1.size();
			if(length==0)
			{
				request.setAttribute("noRecords", "noRecords");
				sform.setMessage("No Records Are Found");

			}

			/* if(totalRecords1>10)
			  {
				 sform.setTotalRecords(totalRecords1);
			  startRecord=1;
			  endRecord=10;*/
			/*  sform.setStartRecord(1);
			  sform.setEndRecord(10);*/
			 /* request.setAttribute("displayRecordNo", "displayRecordNo");
			  request.setAttribute("nextButton", "nextButton");*/
			 /* }else
			  {
				  startRecord=1;
				  endRecord=totalRecords1;
				  sform.setTotalRecords(totalRecords1);
				  sform.setStartRecord(1);
				  sform.setEndRecord(totalRecords1); 
			  }*/

			return mapping.findForward("empshift");
			}
	
	
	
	public ActionForward Modifyshiftdetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) 
	{
		EssDao ad1=new EssDao();
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		HRApprovalForm calenderForm=(HRApprovalForm)form;
	    String shift=calenderForm.getShift();
	    String pernr=request.getParameter("pernr");
	    String location=calenderForm.getLocationId();
		String date =calenderForm.getFromDate();
		String datet =calenderForm.getToDate();
		String reason =calenderForm.getReason();
		
		String date1[] = date.split("/");
		String day=date1[0];
		String mon1=date1[1];
		String year=date1[2];
		int sday1=Integer.parseInt(day);
	    int smonth=Integer.parseInt(mon1);
	    	
	    String tdate1[] = datet.split("/");
		String tday=tdate1[0];
		String tmon1=tdate1[1];
		String tyear=tdate1[2];
		int tsday1=Integer.parseInt(tday);
	    int tsmonth=Integer.parseInt(mon1);
	    int d=0;
	    
	    Date dn=new Date();
		SimpleDateFormat ft = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
		String dateNow = ft.format(dn);
	
	    
	   
	    	    
	    
	    for(int j=sday1; j<=tsday1; j++ )
		{
		  
	  String update="update EMP_Shift_Register set day"+sday1+" = '"+shift+"' where  month ='"+smonth+"' "
				+ " and year='"+date1[2]+"' and pernr in ("+pernr+")  ";
		 d = ad.SqlExecuteUpdate(update);
		 sday1++;
		}
		/*Date dNow = new Date( );
			 SimpleDateFormat ft = new SimpleDateFormat ("dd");
			 SimpleDateFormat ft1 = new SimpleDateFormat ("MM");
		int day = Integer.parseInt(ft.format(dNow));
		int month = Integer.parseInt(ft1.format(dNow));
		
		for(int j=day; j<=31; j++ )
		{
			String update2 = "update EMP_Shift_Register set day"+j+" =  '"+shiflist[i]+"' where month ='"+month+"' and pernr= '"+pernr[i]+"' ";
			int k=ad.SqlExecuteUpdate(update2);
		}
		*/
		
		
		if(d>0)
		{
			//insert shift log

			 String squery2="insert into Shift_request (Employee_No,From_date,To_date,Shift,Changed_by,Changed_Date,Comments,Location)values('"+pernr+"','"+date+"','"+datet+"','"+shift+"','"+user.getEmployeeNo()+"','"+dateNow+"','"+reason+"','"+location+"') ";
			    int a2=ad.SqlExecuteUpdate(squery2);
			    
			   	calenderForm.setMessage2("Updated Successfully");
		}
		
		else
		{
			calenderForm.setMessage("Error..Please update again");
		}
		return mapping.findForward("updateemployeeshift");
	}
	public ActionForward Updateemployeeshift(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) 
	{
		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		HRApprovalForm calenderForm=(HRApprovalForm)form;
		String plantcode=request.getParameter("plant");
		calenderForm.setEmployeeNo(request.getParameter("emp"));
		//String currentdate=request.getParameter("currentDate");
		// String a[]=currentdate.split("/");
		/*String day=a[0];
		String mon1=a[1];
		String year=a[2];
		int mon2=Integer.parseInt(mon1);
		  String[] monthName = {"","JAN", "FEB",
				  "MAR", "APR", "MAY", "JUN", "JUL",
				  "AUG", "SEP", "OCT", "NOV",
				  "DEC"
				  };
		
	  String mon = monthName[mon2];
		
	  
	  System.out.println(calenderForm.getEmplist());*/
	  String location=user.getPlantId();
	  String reqTable="";	  
	  String loc="";
		String cal1="Select  LOCATION_CODE,LOCNAME from Location where locid='"+location+"'";
		ResultSet rs=ad.selectQuery(cal1);
	
			
			try {
				if(rs.next())
				{
					 reqTable=getTableName(rs.getString("LOCATION_CODE"));
					 loc=rs.getString("LOCATION_CODE");
					calenderForm.setLocationId(rs.getString("LOCATION_CODE")+" - "+rs.getString("LOCNAME"));
				 }
			} catch (SQLException e) {
					e.printStackTrace();
			}
			

			   
			   
			    /*String cal="select "+mon+" as abc from "+reqTable+" where DAY="+a[0]+" and CYEAR="+a[2]+"";
			    ResultSet rs1=ad.selectQuery(cal);
				try {
					
					while(rs1.next())
					{
						calenderForm.setHolidayType(rs1.getString("abc"));
					
					}
					
				} catch (SQLException e) {
					
					e.printStackTrace();
				}
			
		
		calenderForm.setCurentDate(currentdate);*/
		
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		
	/*	String aa="select * from user_group where id='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
				cmpcode=cc.getString("Attendance_Loc");
				
				if(cmpcode.contains(","))
				{
				 cmp=cmpcode.split(",");
				
				for(int b=0;b<cmp.length;b++)
				{
					locations=locations+"'"+cmp[b]+"',";
				}
				
				locations=locations.substring(0, locations.length()-1);
				}
				else
				{
					locations="'"+cmpcode+"'";
				}
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}*/
		
		
		
		ArrayList shiftList=new ArrayList();
		ArrayList shiftLabelList=new ArrayList();
		ResultSet rs16 = ad.selectQuery("select shift_code," +
				"Shift_Name from EMP_SHIFT_MASTER where loc like '%"+loc+"%'"); 
				try {
					while(rs16.next()) {
						shiftList.add(rs16.getString("shift_code"));
						shiftLabelList.add(rs16.getString("shift_code")+"-"+rs16.getString("Shift_Name"));
					}
					rs16.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setShiftList(shiftList);
				calenderForm.setShiftLabelList(shiftLabelList);
		request.setAttribute("Button", "Button");
		
		try {
			rs16.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return mapping.findForward("updateemployeeshift");

	}
	
	
	public ActionForward viewemployeeshift(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) 
	{
		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		HRApprovalForm calenderForm=(HRApprovalForm)form;
		String plantcode=request.getParameter("plant");
		String emp_no=request.getParameter("emplist");
		String currentdate=request.getParameter("currentDate");
		String a[]=currentdate.split("/");
		String day=a[0];
		String mon1=a[1];
		String year=a[2];
		int mon2=Integer.parseInt(mon1);
		  String[] monthName = {"","JAN", "FEB",
				  "MAR", "APR", "MAY", "JUN", "JUL",
				  "AUG", "SEP", "OCT", "NOV",
				  "DEC"
				  };
		
	  String mon = monthName[mon2];
		
	  
	  System.out.println(calenderForm.getEmplist());
	  String location=user.getPlantId();
	  String reqTable="";	  
	  String loc="";
		String cal1="Select  LOCATION_CODE,LOCNAME from Location where locid='"+location+"'";
		ResultSet rs=ad.selectQuery(cal1);
	
			
			try {
				if(rs.next())
				{
					 reqTable=getTableName(rs.getString("LOCATION_CODE"));
					 loc=rs.getString("LOCATION_CODE");
					calenderForm.setLocationId(rs.getString("LOCATION_CODE")+" - "+rs.getString("LOCNAME"));
				 }
			} catch (SQLException e) {
					e.printStackTrace();
			}
			

			   
			   
			 
		calenderForm.setCurentDate(currentdate);
		
		String cmpcode="";
		int id=user.getGroupId();
		String cmp[]=new String[0]; 
		String locations="";
		String vshift="";
		
	
		
		String aa="select Day"+day+" from EMP_Shift_Register where Pernr= '"+emp_no+"' and month ='"+mon1+"' and year='"+year+"'  ";
		ResultSet cc=ad.selectQuery(aa);
		try {
			if(cc.next())
			{
			vshift=cc.getString("Day"+day+"");
						}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		
		
		ArrayList shiftList=new ArrayList();
		ArrayList shiftLabelList=new ArrayList();
		ResultSet rs16 = ad.selectQuery("select shift_code," +
				"Shift_Name from EMP_SHIFT_MASTER where Shift_code='"+vshift+"' "); 
				try {
					while(rs16.next()) {
						calenderForm.setShift(rs16.getString("shift_code")+"-"+rs16.getString("Shift_Name"));
					/*	shiftLabelList.add(rs16.getString("shift_code")+"-"+rs16.getString("Shift_Name"));*/
					}
					rs16.close();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				calenderForm.setShiftList(shiftList);
				calenderForm.setShiftLabelList(shiftLabelList);
		request.setAttribute("Button", "Button");
		
		try {
			rs16.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return mapping.findForward("viewemployeeshift");

	}
	
		
	
	
	
	public ActionForward shiftviewSearch(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			{
		HRApprovalForm calenderForm=(HRApprovalForm)form;
		
		HttpSession session = request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		 String Emp_no=request.getParameter("employeeNo");

		String id=user.getPlantId();
		String elocation="";
		
		String aa="select LOCATION_CODE from Location where Locid='"+id+"'";
		ResultSet cc=ad.selectQuery(aa);
		try {
			while(cc.next()) {
			elocation=cc.getString("LOCATION_CODE");
			}
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
			ArrayList shiftList=new ArrayList();
				ArrayList shiftLabelList=new ArrayList();
				ResultSet rs16 = ad.selectQuery("select shift_code," +
						"Shift_Name from EMP_SHIFT_MASTER order by Shift_Name "); 
						try {
							while(rs16.next()) {
								shiftList.add(rs16.getString("shift_code"));
								shiftLabelList.add(rs16.getString("Shift_Name"));
							}
							rs16.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						calenderForm.setShiftList(shiftList);
						calenderForm.setShiftLabelList(shiftLabelList);
						String location=elocation;
					    String reqTable=getTableName(location);	
						
						
					/*	String location=calenderForm.getLocationId();
					    String reqTable=getTableName(location);		*/
					    
					 
						
						String query1="select * from emp_official_info ,location ,DEPARTMENT ,DESIGNATION where Location.LOCATION_CODE=emp_official_info.LOCID and "
								+ " DESIGNATION.DSGID =emp_official_info.DSGID and DEPARTMENT.DPTID =emp_official_info.DPTID and emp_official_info.pernr='"+Emp_no+"' ";
						
						
						HRApprovalForm hshift=new HRApprovalForm();		
						ResultSet rs1 = ad.selectQuery(query1);
						try {
							if(rs1.next())
							{
								
								calenderForm.setEmployeeNo(rs1.getString("PERNR"));
								calenderForm.setLocationId(rs1.getString("LOCID"));
								calenderForm.setEmployeeName(rs1.getString("EMP_FULLNAME"));
								calenderForm.setDesignation(rs1.getString("DSGSTXT"));
								calenderForm.setDepartment(rs1.getString("DPTSTXT"));
								
							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						//calenderForm.setEmplist(hshift);

					 
					    Date dn=new Date();
						SimpleDateFormat ft = new SimpleDateFormat("yyyy-MM-dd");
						String dateNow = ft.format(dn);
					    
					    String tdate1[] = dateNow.split("-");
						String tday=tdate1[2];
						String tmon1=tdate1[1];
						String tyear=tdate1[0];
						int tsday1=Integer.parseInt(tday);
					    int tsmonth=Integer.parseInt(tmon1);
					    int d=0;
					    
					  
						
					    
						String iYears =tyear;
						String iMonths =tmon1;
						int iYear=Integer.parseInt(iYears);
						System.out.println("iYear="+iYear);
						int iMonth=Integer.parseInt(iMonths);
						iMonth=iMonth-1;
						
						if(iMonth==-1)
						{
							iMonth=11;
							iYear=iYear-1;
						}
						
						System.out.println("iMonth="+iMonth);
						
						Calendar ca = new GregorianCalendar();

						int iTDay = ca.get(Calendar.DATE);
						int iTYear = ca.get(Calendar.YEAR);
						int iTMonth = ca.get(Calendar.MONTH);

						if (iYear == 0) {
							iYear = iTYear;
							iMonth = iTMonth;
						}

						GregorianCalendar cal = new GregorianCalendar(iYear, iMonth, 1);

						int days = cal.getActualMaximum(Calendar.DAY_OF_MONTH);

						int weekStartDay = cal.get(Calendar.DAY_OF_WEEK);

						cal = new GregorianCalendar(iYear, iMonth, days);
						int iTotalweeks = cal.get(Calendar.WEEK_OF_MONTH);
						int ryear = iYear;
						int rmonth = iMonth;

						for (int iy = iTYear - 70; iy <= iTYear + 70; iy++) {
							if (iy == iYear) {
								iy = iy;
							} else {
								iy = iy;
							}
							int im = 0;
							for (im = 0; im <= 11; im++) {
								if (im == iMonth) {
									im = im;
								}
							}
						
						

							session.setAttribute("iYear", String.valueOf(iYear));
							session.setAttribute("iMonth", String.valueOf(iMonth));

						}
						int year=iYear; 
						   int month=rmonth;
						   
						   month=month+1;


						   String[] monthName = {"","JAN", "FEB",
									  "MAR", "APR", "MAY", "JUN", "JUL",
									  "AUG", "SEP", "OCT", "NOV",
									  "DEC"
									  };
							
						    String mon = monthName[month];
						   
						    HashMap holidaysMap=new HashMap();
						    String cal1="select DAY,"+mon+","+year+" as CYEAR from "+reqTable+" where "+mon+"!=''";
							ResultSet rs=ad.selectQuery(cal1);
							try {
								
								while(rs.next())
								{
									String reqDate=rs.getString("Day")+"/"+month+"/"+rs.getString("CYEAR");
									holidaysMap.put(reqDate, rs.getString(mon));
								}
								
							} catch (SQLException e) {
								
								e.printStackTrace();
							}
						    request.setAttribute("holidaysList", holidaysMap);
						    request.setAttribute("cal", "cal");
						    
						   
						    try {
								rs.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						 
						    try {
								rs16.close();
							} catch (SQLException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						   
		return mapping.findForward("shiftview");
	}
	
	
	public ActionForward shiftreportexe(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
		try {
			Thread.sleep(2000);
		} catch (InterruptedException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}
		
		
		
			HRApprovalForm help = (HRApprovalForm) form;
			
			
			String sqlfromdate="";
			String sqltodate="";
			String exportdate="";
			String location=request.getParameter("loc");
           help.setFromDate(request.getParameter("date"));
         help.setLocationId(request.getParameter("loc"));
	

			if(!help.getFromDate().equalsIgnoreCase(""))
			{
				String from[]=help.getFromDate().split("/");
			    sqlfromdate=from[2]+"-"+from[1]+"-"+from[0]; 
			    exportdate=help.getFromDate().replace("/", ".");
	            help.setDate(exportdate);
			}
		ArrayList shift = new ArrayList();
		 int day = Integer.parseInt(sqlfromdate.substring(8));
		
		/*String query ="select left(day"+day+",2) * from EMP_Shift , emp_official_info,Paygroup_Master ,Category ,department ,DESIGNATION" 
					+ "  where year= year('"+sqlfromdate+"') and month = month('"+sqlfromdate+"') and left(day"+day+",2) like '%AA%' and "
					+ "  emp_official_info.PERNR=EMP_IN_OUT_Status.PERNR and Paygroup_Master.Paygroup = emp_official_info.PAY_GROUP and Category.staffcat = emp_official_info.STAFFCAT and "
					+ "  DEPARTMENT.DPTID=emp_official_info.DPTID and DESIGNATION.dsgid=emp_official_info.dsgid and Swipe_Count !=0 and Active='1'  ";
		*/
		 String sname="";
		 
		 String query=" select emp.PERNR as pernr,emp.EMP_FullName as ename,es.day"+day+" as shift,dsg.DSGLTXT as desg,dept.DPTLTXT as dpt,reg.Grp_LTXT as regroup,sub.SDPTID_LTXT as subdept from EMP_Shift_Register as es,"
		 		+ "emp_official_info as emp,DEPARTMENT as dept,DESIGNATION as dsg,REPORTING_GROUP as reg,SUBDEPARTMENT as sub"
		 		+ " where emp.PERNR=es.Pernr and emp.Reporting_Grp=reg.Grp_ID and dept.DPTID=emp.DPTID and dsg.DSGID=emp.DSGID and "
		 		+ "sub.SDPTID=emp.SDPTID and emp.LOCID='"+location+"' and emp.ACTIVE=1 and es.month= month('"+sqlfromdate+"') and es.Year=year('"+sqlfromdate+"')order by shift,reg.Grp_LTXT,dept.DPTLTXT,sub.SDPTID_LTXT ";
		
		ResultSet rs = ad.selectQuery(query);
		try {
			while(rs.next())
			{
				HRApprovalForm help1 = new HRApprovalForm();
				help1.setEmployeeno(rs.getString("pernr") );
				help1.setEmployeeName(rs.getString("ename"));
				help1.setDepartment(rs.getString("dpt"));
				/*help1.setShift(rs.getString("shift"));*/
				sname=rs.getString("shift");
				
				
				ResultSet rs11 = ad.selectQuery("select Shift_Name, left(Shift_start_time,5)as starttime,left(Shift_end_time,5)as endtime from EMP_SHIFT_MASTER where Shift_code='"+sname+"'"); 
						try {
							while(rs11.next()) {
								help1.setShift(rs11.getString("Shift_Name"));
								help1.setStart_time(rs11.getString("starttime"));
								help1.setEnd_time(rs11.getString("endtime"));							}
							rs11.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
				
				
				
				help1.setRepgrp(rs.getString("regroup"));
				help1.setDesignation(rs.getString("desg"));
				help1.setSubdepartment(rs.getString("subdept"));
				
				shift.add(help1);

			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
				
			request.setAttribute("shift", shift);
			
            		request.setAttribute("result", "");
					
					
					try {
						rs.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					
										
			        return mapping.findForward("displayshiftreportview");

	 }		
	public ActionForward hodshiftreportexe(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
		try {
			Thread.sleep(2000);
		} catch (InterruptedException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}
		
		
		
			HRApprovalForm help = (HRApprovalForm) form;
			
			
			String month=request.getParameter("month");
			int month1 = Integer.parseInt(month);
			String year=request.getParameter("year");
			String location=request.getParameter("loc");
           
           help.setYear(request.getParameter("year"));
           help.setLocationId(request.getParameter("loc"));
           
           String monthString;
           switch (month1) {
               case 1:  monthString = "January";       break;
               case 2:  monthString = "February";      break;
               case 3:  monthString = "March";         break;
               case 4:  monthString = "April";         break;
               case 5:  monthString = "May";           break;
               case 6:  monthString = "June";          break;
               case 7:  monthString = "July";          break;
               case 8:  monthString = "August";        break;
               case 9:  monthString = "September";     break;
               case 10: monthString = "October";       break;
               case 11: monthString = "November";      break;
               case 12: monthString = "December";      break;
               default: monthString = "Invalid month"; break;
           }
           help.setMonth(monthString);
     


           

			
		ArrayList shift = new ArrayList();
		// int day = Integer.parseInt(sqlfromdate.substring(8));
		
		/*String query ="select left(day"+day+",2) * from EMP_Shift , emp_official_info,Paygroup_Master ,Category ,department ,DESIGNATION" 
					+ "  where year= year('"+sqlfromdate+"') and month = month('"+sqlfromdate+"') and left(day"+day+",2) like '%AA%' and "
					+ "  emp_official_info.PERNR=EMP_IN_OUT_Status.PERNR and Paygroup_Master.Paygroup = emp_official_info.PAY_GROUP and Category.staffcat = emp_official_info.STAFFCAT and "
					+ "  DEPARTMENT.DPTID=emp_official_info.DPTID and DESIGNATION.dsgid=emp_official_info.dsgid and Swipe_Count !=0 and Active='1'  ";
		
		select emp.PERNR as pernr,emp.EMP_FullName as ename,es.day"+day+" as shift,dsg.DSGLTXT as desg,dept.DPTLTXT as dpt,reg.Grp_LTXT as regroup,sub.SDPTID_LTXT as subdept from EMP_Shift_Register as es,"
		 		+ "emp_official_info as emp,DEPARTMENT as dept,DESIGNATION as dsg,REPORTING_GROUP as reg,SUBDEPARTMENT as sub"
		 		+ " where emp.PERNR=es.Pernr and emp.Reporting_Grp=reg.Grp_ID and dept.DPTID=emp.DPTID and dsg.DSGID=emp.DSGID and "
		 		+ "sub.SDPTID=emp.SDPTID and emp.LOCID='ML24' and emp.ACTIVE=1 and es.month= month('"+sqlfromdate+"') and es.Year=year('"+sqlfromdate+"') order by shift,dept.DPTLTXT ";
		
		
		*/
		 String sname="";
		 
		 String query="select sr.Shift,sr.Employee_No,sr.From_date,sr.To_date,sr.Changed_by,sr.Changed_Date,sr.Comments, emp.EMP_FullName as ename,dsg.DSGLTXT as desg,dept.DPTLTXT as dpt,reg.Grp_LTXT as regroup"
		 		+ " from  Shift_Request as sr,emp_official_info as emp,DEPARTMENT as dept,DESIGNATION as dsg,REPORTING_GROUP as reg "
		 		+ "where emp.PERNR=sr.Employee_No and emp.Reporting_Grp=reg.Grp_ID and dept.DPTID=emp.DPTID and dsg.DSGID=emp.DSGID and  month(sr.Changed_date)='"+month+"' and year(sr.Changed_date)='"+year+"' and sr.Location like'%"+location+"%' order by From_date ";
		ResultSet rs = ad.selectQuery(query);
		try {
			while(rs.next())
			{
				
				HRApprovalForm help1 = new HRApprovalForm();
				help1.setEmployeeno(rs.getString("Employee_No") );
				help1.setFromDate(rs.getString("From_date"));
				help1.setToDate(rs.getString("To_date"));
				help1.setApprover(rs.getString("Changed_by"));
				help1.setApproveDate(rs.getString("Changed_Date"));
				help1.setApproverStatus(rs.getString("Comments"));
				help1.setEmployeeName(rs.getString("ename"));
				help1.setDepartment(rs.getString("dpt"));
				/*help1.setShift(rs.getString("shift"));*/
				sname=rs.getString("shift");
				
				
				ResultSet rs11 = ad.selectQuery("select Shift_Name, left(Shift_start_time,5)as starttime,left(Shift_end_time,5)as endtime from EMP_SHIFT_MASTER where Shift_code='"+sname+"'"); 
						try {
							while(rs11.next()) {
								help1.setShift(rs11.getString("Shift_Name"));
								help1.setStart_time(rs11.getString("starttime"));
								help1.setEnd_time(rs11.getString("endtime"));							}
							rs11.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						
				help1.setRepgrp(rs.getString("regroup"));
				help1.setDesignation(rs.getString("desg"));
				//help1.setSubdepartment(rs.getString("subdept"));
				
				shift.add(help1);

			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
				
			request.setAttribute("shift", shift);
			
            		request.setAttribute("result", "");
					
					
					try {
						rs.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					
										
			        return mapping.findForward("displayhodshiftreportview");

	 }		

	
	public ActionForward monthlysummaryreportexe(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
		try {
			Thread.sleep(2000);
		} catch (InterruptedException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}
		
		
		
			HRApprovalForm help = (HRApprovalForm) form;
			
			
			String month=request.getParameter("month");
			 int month1 = Integer.parseInt(month);
			 int mone=month1;
			String year=request.getParameter("year");
			 int year1 = Integer.parseInt(year);
			String location=request.getParameter("loc");
           help.setMonth(request.getParameter("month"));
           help.setYear(request.getParameter("year"));
           help.setLocationId(request.getParameter("loc"));
           
          
           
           Date d = new Date();
           String sqlfromdate="";
           
          /* Date processdate = new Date();
			SimpleDateFormat tyt = new SimpleDateFormat("yyyy-MM-dd");
			sqlfromdate = tyt.format(d);
           String aa[] = sqlfromdate.split("-");
	    	String smys =aa[0];
	    	String smms= aa[1];	
			    int day = Integer.parseInt(sqlfromdate.substring(8));
			    int smy=Integer.parseInt(smys);
			    int smm=Integer.parseInt(smms);*/
           
           String monthString;
           switch (month1) {
               case 1:  monthString = "January";       break;
               case 2:  monthString = "February";      break;
               case 3:  monthString = "March";         break;
               case 4:  monthString = "April";         break;
               case 5:  monthString = "May";           break;
               case 6:  monthString = "June";          break;
               case 7:  monthString = "July";          break;
               case 8:  monthString = "August";        break;
               case 9:  monthString = "September";     break;
               case 10: monthString = "October";       break;
               case 11: monthString = "November";      break;
               case 12: monthString = "December";      break;
               default: monthString = "Invalid month"; break;
           }
           help.setMonth(monthString);
           
           int enday;
           switch (mone) {
               case 1:  enday = 31;       break;
               case 2:  enday = 28;      break;
               case 3:  enday = 31;         break;
               case 4:  enday = 30;         break;
               case 5:  enday = 31;           break;
               case 6:  enday = 30;          break;
               case 7:  enday = 31;          break;
               case 8:  enday = 31;        break;
               case 9:  enday = 30;     break;
               case 10: enday = 31;       break;
               case 11: enday = 30;      break;
               case 12: enday = 31;      break;
               default: enday = 31; break;
           }

			
		ArrayList shift = new ArrayList();
	
		 String sname="";
		 
		 String query="select convert (varchar,[Attendance_date],105) as Attendance_date1,* from Daily_Attendance_Summary_Count where Location='"+location+"' and Attendance_Date between '"+year1+"-"+month1+"-01' and '"+year1+"-"+month1+"-"+enday+"'order by Attendance_Date ";
		ResultSet rs = ad.selectQuery(query);
		try {
			while(rs.next())
			{
				
				HRApprovalForm help1 = new HRApprovalForm();
				
				help1.setStartDate(rs.getString("Attendance_Date1"));
				help1.setLocationId(rs.getString("Location"));
				help1.setStaffapprstrength(rs.getInt("Staff_Approvedstrength") );
				help1.setTechstaffapprstrength(rs.getInt("Techstaff_Approvedstrength") );
				help1.setContractapprstrength(rs.getInt("Contractor_Approvedstrength") );
				help1.setTotalapprovedstrength(rs.getInt("Total_Approvedstrength") );
				help1.setStaffavailstrength(rs.getInt("Staff_Avlstrength") );
				help1.setTechstaffavailstrength(rs.getInt("Techstaff_Avlstrength") );
				help1.setContractavailstrength(rs.getInt("Contractor_Avlstrength") );
				help1.setTotalavailstrength(rs.getInt("Total_Avlstrength") );
				help1.setStaffpresent(rs.getInt("Staff_Present") );
				help1.setTechstaffpresent(rs.getInt("Techstaff_Present") );
				help1.setContractpresent(rs.getInt("Contractor_Present") );
				help1.setPresize(rs.getInt("Total_Present") );
				
				help1.setStaffabsent(rs.getInt("Saff_Absent") );
				help1.setTechstaffabsent(rs.getInt("Techstaff_Absent") );
				help1.setContractabsent(rs.getInt("Contractor_Absent") );
				help1.setTotalabsent(rs.getInt("Total_Absent") );
				help1.setStaffondauty(rs.getInt("Staff_Onduty") );
				help1.setTechstaffondauty(rs.getInt("Techstaff_Onduty") );
				help1.setConondauty(rs.getInt("Contractor_Onduty") );
				help1.setTotalonduty(rs.getInt("Total_Onduty") );
				help1.setStaffleave(rs.getInt("Staff_Leave") );
				help1.setTechstaffleave(rs.getInt("Techstaff_Leave") );
				help1.setConleave(rs.getInt("Contractor_Leave") );
				help1.setTotalleave(rs.getInt("Total_Leave") );
				help1.setPerstaff(rs.getFloat("Staff_Percentage") );
				help1.setPertechstaff(rs.getFloat("Techstaff_Percentage") );
				help1.setPerconstaff(rs.getFloat("Contracor_Percentage") );
				help1.setTotalper(rs.getFloat("Total_Percentage") );
				
				
								
				shift.add(help1);

			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
				
			request.setAttribute("shift", shift);
			
            		request.setAttribute("result", "");
					
					
					try {
						rs.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					
										
			        return mapping.findForward("displaymonthdailyattendance");

	 }		


	
	

}
