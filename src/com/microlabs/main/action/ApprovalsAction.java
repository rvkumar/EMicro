/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.microlabs.main.action;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;

import javax.mail.MessagingException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.springframework.beans.factory.config.PropertyPlaceholderConfigurer;
import org.springframework.core.io.support.PropertiesLoaderUtils;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.microlabs.admin.dao.UserDao;
import com.microlabs.db.ConnectionFactory;
import com.microlabs.ess.action.CustomerMasterAction;
import com.microlabs.ess.action.HeaderFooterPageEventTravelDeskReport;
import com.microlabs.ess.action.LeaveAction;
import com.microlabs.ess.action.RawMaterialAction;
import com.microlabs.ess.action.ServiceMasterRequestAction;
import com.microlabs.ess.action.VendorMasterRequestAction;
import com.microlabs.ess.dao.ConferenceMail;
import com.microlabs.ess.dao.EssDao;
import com.microlabs.ess.dao.VCMail;
import com.microlabs.ess.form.ConferenceForm;
import com.microlabs.ess.form.CustomerMasterForm;
import com.microlabs.ess.form.JoiningFormalityForm;
import com.microlabs.ess.form.LeaveForm;
import com.microlabs.ess.form.MaterialCodeRequestForm;
import com.microlabs.ess.form.OnDutyForm;
import com.microlabs.ess.form.PackageMaterialMasterForm;
import com.microlabs.ess.form.PermissionForm;
import com.microlabs.ess.form.RawMaterialForm;
import com.microlabs.ess.form.ServiceMasterRequestForm;
import com.microlabs.ess.form.TravelRequestForm;
import com.microlabs.ess.form.VCForm;
import com.microlabs.ess.form.VendorMasterRequestForm;
import com.microlabs.hr.dao.SAPAttendenceDAO;
import com.microlabs.hr.form.HRApprovalForm;
import com.microlabs.hr.form.SAPAttendenceForm;
import com.microlabs.it.Dao.ITMail;
import com.microlabs.it.form.HelpDeskForm;
import com.microlabs.it.form.IssuesForm;
import com.microlabs.main.db.ApprovalsList;
import com.microlabs.main.db.MainDao;
import com.microlabs.main.form.ApprovalsForm;
import com.microlabs.main.form.MailInboxForm;
import com.microlabs.myrequest.form.MyRequestForm;
import com.microlabs.newsandmedia.dao.NewsandMediaDao;
import com.microlabs.utilities.EMailer;
import com.microlabs.utilities.EMicroUtils;
import com.microlabs.utilities.UserInfo;
import com.microlabs.utilities.VendorMaster;

/** 
 * MyEclipse Struts
 * Creation date: 02-13-2013
 * 
 * XDoclet definition:
 * @struts.action path="/approvals" name="approvalsForm" input="/jsp/main/approvals.jsp" parameter="method" scope="request"
 * @struts.action-forward name="display" path="/jsp/main/approvals.jsp"
 */

public class ApprovalsAction extends DispatchAction {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	private int MAIL_PER_PAGE = 10;
	
	
	
	public String getrailwaytime(String time)
	{
		String reqtime="";
		
	  
	      //Format of the date defined in the input String
	      DateFormat df = new SimpleDateFormat("hh:mm aa");
	      //Desired format: 24 hour format: Change the pattern as per the need
	      DateFormat outputformat = new SimpleDateFormat("HH:mm");
	      Date date = null;
	  
	      try{
	         //Converting the input String to Date
	    	 date= df.parse(time);
	         //Changing the format of date and storing it in String
	    	 reqtime = outputformat.format(date);
	         //Displaying the date
	    	 System.out.println(reqtime);
	      }catch(ParseException pe){
	         pe.printStackTrace();
	       }
	   
		
		return reqtime;
	}
	
 	private String[] empDet( String empno) {

 		EssDao ad = new EssDao();
		String emp=" select emp.eMP_FULLNAME,emp.lOCID,dep.DPTSTXT,desg.DSGSTXT,convert(nvarchar(10),emp.doj,103) as doj,datediff(year,dob,getdate()) as age,emp.Email_id, case when emp.sex='M' then 'Male' else 'Female' end as gender from Emp_official_info emp "
				+ " , Department dep ,Designation desg  where emp.dPTID = dep.DPTID and emp.pERNR='"+empno+"' "
						+ " and desg.DSGID= emp.dSGID  ";
		ResultSet ae=ad.selectQuery(emp);

		String[] a = new String[10];
	
		try {
			while(ae.next())
			{
			
			

			    a[0]=ae.getString("eMP_FULLNAME");
			    a[1]=ae.getString("lOCID");
			    a[2]=ae.getString("DPTSTXT");
			    a[3]=ae.getString("DSGSTXT");
			    a[4]=ae.getString("doj");
			    a[5]=ae.getString("age");
			    a[6]=ae.getString("EMAIL_ID");
			    a[7]=ae.getString("gender");


			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return a;
		}
	
	public String EmpLoc(String a)
	{
		
		String b = "";
		if(a==null)
		{
		  return b;	
		}
		
		if(!a.equalsIgnoreCase(""))
		{	
			
			EssDao ad = new EssDao();
		String emp = "select LOCID from emp_official_info where pernr = '"+a+"'";
		ResultSet rs = ad.selectQuery(emp);
		try {
			if(rs.next())
			{
				b=rs.getString("LOCID"); 
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		}
		return b;
		
	}
	
	
	
	
	//travel
	
	
	private String[] empPERDet( String empno) {

		//Created by Pradeep .Date:15-11-2016

 		EssDao ad = new EssDao();
		String emp=" select mobile_no,passport_no,place_of_issue_of_passport,convert(nvarchar(10),convert(date,date_of_issue_of_passp),103) as issue,"
				+ "convert(nvarchar(10),convert(date,date_of_expiry_of_passport),103) as exp,email_address from emp_personal_info where user_id='"+empno+"'";
		ResultSet ae=ad.selectQuery(emp);

		String[] a = new String[10];

		try {
			while(ae.next())
			{
			   a[0]=ae.getString("mobile_no");
			    a[1]=ae.getString("passport_no");
			    a[2]=ae.getString("place_of_issue_of_passport");
			    a[3]=ae.getString("issue");
			    a[4]=ae.getString("exp");
			    a[5]=ae.getString("email_address");




			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return a;
		} 
	
	public ActionForward TravelRequestToApprove(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws SQLException {
		

		ApprovalsForm pendAppForm = (ApprovalsForm) form;
		String reqId = request.getParameter("reqId");
		pendAppForm.setRequestNo(reqId);
		String reqType = pendAppForm.getReqRequstType();
		pendAppForm.setRequestType(reqType);
		HttpSession session = request.getSession();
		UserInfo user = (UserInfo) session.getAttribute("user");
		if (user == null) {
			request.setAttribute("message",
					"Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		String scount = Integer.toString(pendAppForm.getStartRecord());

		int totalRecords = pendAppForm.getTotalRecords();// 21
		int startRecord = pendAppForm.getStartRecord();// 11
		int endRecord = pendAppForm.getEndRecord();
		String filterBy = pendAppForm.getSelectedFilter();
		EssDao ad = new EssDao();
		pendAppForm.setTotalRecords(totalRecords);
		pendAppForm.setStartRecord(startRecord);
		pendAppForm.setEndRecord(endRecord);
		pendAppForm.setSelectedFilter(filterBy);
		if (reqId == null && reqType == null) {
			reqId = pendAppForm.getRequestNo();
			reqType = pendAppForm.getRequestType();
		}
		int j = 1;
		int reqby = 0;
		LinkedList OT = new LinkedList();
		int requesterNo = Integer.parseInt(request.getParameter("reqId"));
		ArrayList travel=new ArrayList();
		ArrayList tra= new ArrayList();
		ArrayList emplist=new ArrayList();
		ArrayList city=new ArrayList();
		 String TravelFor="";

		String lis="select PERNR,CONVERT(varchar(10),Req_date,103)+' '+ CONVERT(varchar(5),Req_date,108) as Created_date1,"
				+ "CONVERT(varchar(10),Depart_On,103)  as departon,"
				+ "CONVERT(varchar(10),Return_On,103)  as returnon,* from Travel_Desk,division where reqNo='"+requesterNo+"'";
		ResultSet ff=ad.selectQuery(lis);
		try {
			if(ff.next())
			{
				TravelRequestForm t=new TravelRequestForm();
				
				String re[]=empDet(Integer.toString(ff.getInt("pernr")));
				pendAppForm.setEmployeeno(Integer.toString(ff.getInt("pernr")));
				pendAppForm.setEmployeeName(re[0]);
			    pendAppForm.setLocationId(re[1]);
				pendAppForm.setDepartment(re[2]);
				pendAppForm.setDesignation(re[3]); 
				pendAppForm.setDateofBirth(re[4]);
				pendAppForm.RequestNo(ff.getString("reqNo"));
				
				
				
				t.setEmployeeno(user.getEmployeeNo());
				t.setEmployeeName(re[0]);
				t.setLocationId(re[1]);
				t.setDepartment(re[2]);
				t.setDesignation(re[3]); 
				t.setUserAge(re[5]);
				t.setUsermailId(re[6]);
				t.setUserGender(re[7]);
				
				String pe[]=empPERDet(Integer.toString(ff.getInt("pernr")));

				t.setUsermobno(pe[0]);
				t.setUserpassportno(pe[1]);
				t.setUserpassportplace(pe[2]);
				t.setUserPersonalmailId(pe[5]);
				
				if(!pe[3].contains("1900"))
					t.setUserpassportissuedate(pe[3]); 
					else
				    t.setUserpassportissuedate(""); 
					
					if(!pe[4].contains("1900"))
					t.setUserpassportexpirydate(pe[4]); 
					else
				    t.setUserpassportexpirydate(""); 
			
			
				t.setRequestNumber(ff.getInt("reqNo"));
				pendAppForm.setRequestername(Integer.toString(ff.getInt("PERNR")));
				pendAppForm.setRequestDate(ff.getString("Req_date"));
				t.setReqType(ff.getString("Req_type"));
				t.setTypeOfTravel(ff.getString("Type_of_travel"));
				t.setTravelFor(ff.getString("Travel_for"));
				t.setTravelRequestFor(ff.getString("Travel_Request_for"));
				String Travel_Request_for=ff.getString("Travel_Request_for");
				t.setModeOfTravel(ff.getString("Mode_of_travel"));
				t.setFromPlace(ff.getString("From_place"));
				t.setDepartOn(ff.getString("departon"));
				t.setDepartTime(ff.getString("Preferred_depart_time"));
				t.setReturnTime(ff.getString("Preferred_return_time"));	
				t.setDepartRemarks(ff.getString("Depart_Time_remarks"));
				t.setReturnRemarks(ff.getString("Return_Time_remarks"));
				t.setToPlace(ff.getString("To_place"));
                t.setVia(ff.getString("via"));
                t.setRemarks(ff.getString("Remarks"));
                t.setAccom_name(ff.getString("accom_name"));
                t.setPurposeOfVisit(ff.getString("Purpose"));
                t.setReturnOn(ff.getString("returnon"));
                t.setTravel_Adult(ff.getString("Travel_Adult"));
                t.setTravel_Child(ff.getString("Travel_Child"));
                t.setTravel_Infant(ff.getString("travel_Infant"));
                t.setPurposetext(ff.getString("purposetext"));
                t.setTravel_Days(ff.getString("travel_Days"));
                t.setAirline_Pref(ff.getString("airline_Pref"));
                t.setAirline_Just(ff.getString("airline_Just"));
                
                String sp = "select division.DIV_DESC as spon from travel_desk ,division where reqNo='"+requesterNo+"' and division.DIV_CODE=travel_Desk.spon_div";
              ResultSet rs1 = ad.selectQuery(sp);
              String spon="";
              while(rs1.next())
              {
            		t.setSpon_div(rs1.getString("spon"));
              }
                
              
                t.setBud_code(ff.getString("bud_code"));
                t.setEst_trip_cose(ff.getString("est_trip_cose"));
                t.setOnduty_Req(ff.getString("onduty_Req"));
                t.setTrip_Advance(ff.getString("trip_Advance"));
                t.setTrip_Amt(ff.getString("trip_Amt"));
                t.setTrip_Currency(ff.getString("trip_Currency"));
                t.setTrip_From_Date(ff.getString("trip_From_Date"));
                t.setTrip_To_Date(ff.getString("trip_To_Date"));
                t.setTrip_From_Time(ff.getString("trip_From_Time"));
                t.setTrip_To_time(ff.getString("trip_To_time"));
                t.setTrip_Priority(ff.getString("trip_Priority"));
                t.setPurposetype(ff.getString("purposetype"));
                t.setTravelmode(ff.getString("travelmode"));
                t.setTraveltype(ff.getString("Type_of_travel"));
                t.setService_class(ff.getString("service_class"));
                t.setReqDate(ff.getString("Created_date1"));
                t.setLocid(ff.getString("locid"));
                
                
                t.setFilepath(ff.getString("path"));
                t.setTravel_desk_type(Empname(ff.getString("travel_desk_type")));
                
                t.setId(ff.getInt("id"));
                
                TravelFor=ff.getString("Travel_for");
                if(((TravelFor.equalsIgnoreCase("Self") ||TravelFor.equalsIgnoreCase("Multiple"))&&(Travel_Request_for.equalsIgnoreCase("one way")||Travel_Request_for.equalsIgnoreCase("Round Trip"))))
                	
                {
                	  t.setAccom_type(ff.getString("accom_type"));
                      t.setAccom_name(ff.getString("accom_name"));
                      t.setHotel_Res(ff.getString("hotel_Res"));
                      t.setHotel_City(ff.getString("hotel_City"));
                      t.setHotel_Name(ff.getString("hotel_Name"));
                     
                      t.setRent_Car(ff.getString("rent_Car"));
                      t.setPickup_Details(ff.getString("pickup_Details"));
                      t.setDrop_Details(ff.getString("drop_Details"));
                      tra.add(t);
                      request.setAttribute("tra", tra);
                      
                }
                
                
                
                String his="select CONVERT(varchar(10),Date_of_issue,103)  as Date_of_issue1,CONVERT(varchar(10),Date_of_expiry,103)  as Date_of_expiry1,CONVERT(varchar(10),departOn,103)  as departOn,CONVERT(varchar(10),returnOn,103)  as returnOn,* from"
                		+ " Travel_Desk_Travellers where req_id='"+t.getId()+"'" ;
                ResultSet b=ad.selectQuery(his);
             
        		try {
        			while(b.next())
        			{
        					TravelRequestForm emp=new TravelRequestForm();
        				
        					String ere[]=empDet(Integer.toString(b.getInt("PERNR")));
        					emp.setGuest_pernr(Integer.toString(b.getInt("PERNR")));
        					emp.setEmployeeName(ere[0]);
        					emp.setLocationId(ere[1]);
        					emp.setDepartment(ere[2]);
        					emp.setDesignation(ere[3]); 
        					emp.setUserAge(ere[5]);
        					emp.setUserGender(ere[7]);                		
        					emp.setGuest_Type(b.getString("Req_type"));
        					
        					emp.setPassportno(b.getString("Passport_no"));
        					emp.setPassportplace(b.getString("Place_issue"));
        					emp.setPassportexpirydate(b.getString("Date_of_expiry"));
        					emp.setGuestName(b.getString("Name_of_guest"));
        					emp.setGuestContactNo(b.getString("Contact_guest"));
        					emp.setGuest_Company(b.getString("guest_Company"));
        					emp.setGuestAge(b.getString("Age_guest"));
        					emp.setGender(b.getString("Gender_guest"));
        					emp.setEmail_Guest(b.getString("Email_guest"));
        					emp.setFileName(b.getString("file_name"));
        					emp.setFileFullPath(b.getString("path"));
        					emp.setGuest_Title(b.getString("guest_Title"));
        					emp.setGuest_Visano(b.getString("guest_Visano"));
        					emp.setGuest_DOB(b.getString("guest_DOB"));
        					emp.setGuest_Meal(b.getString("guest_Meal"));
        					emp.setId(b.getInt("id"));
        				
        					emp.setAccom_type(b.getString("accom_type"));
        					emp.setAccom_name(b.getString("accom_name"));
        					emp.setHotel_Res(b.getString("hotel_Res"));
        					emp.setHotel_City(b.getString("hotel_City"));
        					emp.setHotel_Name(b.getString("hotel_Name"));
        					 emp.setRent_Car(b.getString("rent_Car"));
        					  emp.setPickup_Details(b.getString("pickup_Details"));
        		                emp.setDrop_Details(b.getString("drop_Details"));
        		                emp.setFromPlace(b.getString("fromPlace"));
            					emp.setToPlace(b.getString("toPlace"));
            					emp.setDepartOn(b.getString("departOn"));
        						emp.setReturnOn(b.getString("returnOn"));
        					if(!b.getString("Date_of_expiry1").contains("1900"))
        					emp.setUserpassportexpirydate(b.getString("Date_of_expiry1")); 
        					else
        			    	emp.setUserpassportexpirydate("");
        					emplist.add(emp);
        				
        			}
        		} catch (SQLException e1) {
        			// TODO Auto-generated catch block
        			e1.printStackTrace();
        		}
        		
        		
        		/*String his1="select * from"
                		+ " Travel_Multiple_City where req_id='"+t.getId()+"'" ;*/
        		
        		String his1 ="select trav.Name_of_guest,trav.Req_type,* from Travel_Multiple_City as multi,Travel_Desk_Travellers as trav where trav.req_id=multi.req_id and multi.req_id='"+t.getId()+"' and trav.id=multi.trav_id";
                ResultSet b1=ad.selectQuery(his1);
             
        		try {
        			while(b1.next())
        			{
        					TravelRequestForm emp=new TravelRequestForm();
        					emp.setLocationId(b1.getString("location"));
        					emp.setAirline_Pref(b1.getString("air_preference"));
        					emp.setTrip_From_Date(b1.getString("Arrival_date"));
        					emp.setTrip_To_time(b1.getString("Arrival_Time"));
        					emp.setTrip_To_Date(b1.getString("Departure_date"));
        					emp.setTrip_To_time(b1.getString("Departure_time"));
        					emp.setGuest_Type(b1.getString("Req_type"));

        					//other details for Multiple city list
        					emp.setGuestName(b1.getString("Name_of_guest"));
        					emp.setAccom_type(b1.getString("maccom_type"));
        					emp.setAccom_name(b1.getString("maccom_name"));
        					emp.setHotel_Res(b1.getString("mhotel_Res"));
        					emp.setHotel_City(b1.getString("mhotel_City"));
        					emp.setHotel_Name(b1.getString("mhotel_Name"));
        					 emp.setRent_Car(b1.getString("mrent_Car"));
        					  emp.setPickup_Details(b1.getString("mpickup_Details"));
        		                emp.setDrop_Details(b1.getString("mdrop_Details"));
        					
        					//other details
        					
        					
        					
        					city.add(emp);
        				
        			}
        		} catch (SQLException e1) {
        			// TODO Auto-generated catch block
        			e1.printStackTrace();
        		}
                
        		
        		if(city.size()>0)
                	request.setAttribute("city", city);
        		
        		if(emplist.size()>0)
                	request.setAttribute("emplist", emplist);
        		
        		
        		String monthplan="select tm.plan_date,tm.morigin,tm.mdestination,tm.mtravelmode,tm.mtraveltype,tm.mremarks from Travel_MTP as tm,Travel_Desk as td where td.reqNo='"+ reqId+"' and td.id=tm.req_id order by plan_date";
				List appList1 = new LinkedList();
		ResultSet rsAppr1 = ad.selectQuery(monthplan);
		try {
			while (rsAppr1.next()) {
				TravelRequestForm appr=new TravelRequestForm();
				
				String d[]=rsAppr1.getString("plan_date").split("-");
				String dateString = d[2]+"/"+d[1]+"/"+d[0];;
				
				appr.setFromdate(dateString);
				
				
				//appr.setFromdate(rsAppr1.getString("plan_date"));
				appr.setOrigin(rsAppr1.getString("morigin"));
				appr.setDeparture(rsAppr1.getString("mdestination"));
				appr.setTravelmode(rsAppr1.getString("mtravelmode"));
				appr.setTraveltype(rsAppr1.getString("mtraveltype"));
				appr.setRemarks(rsAppr1.getString("mremarks"));
				appList1.add(appr);
			}
			if(appList1.size()>0)
			request.setAttribute("appList1", appList1);
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        		
        		PDFTravelgenerate(mapping, t, request, response);
        		
        		t.setFileFullPath("/EMicro Files/ESS/Travel Request/PDF/TR_"+requesterNo+".pdf");
        		travel.add(t);
			
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	

		request.setAttribute("travel", travel);
		if (filterBy.equalsIgnoreCase("Pending")) {

			request.setAttribute("approveButton", "approveButton");
			request.setAttribute("rejectButton", "rejectButton");
			request.setAttribute("revertbutton", "revertbutton");
		}
		
		/*String countmonth="select count(*) from Travel_MTP as tm,Travel_Desk as td where td.reqNo='"+ reqId+"' and td.id=tm.req_id";
		
ResultSet rsAppr123 = ad.selectQuery(countmonth);
int counttab=0;
while(rsAppr123.next())
{
	counttab = rsAppr123.getInt(1);
}

if(counttab>0)
{
	request.setAttribute("revertbutton", "revertbutton");	
}*/
		String app = "";
		// PLANT HEAD
		/*if (filterBy.equalsIgnoreCase("Pending")) {
			app = "select a.*,e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from all_Request a,emp_official_info e,DEPARTMENT dep,DESIGNATION desg where Req_Type='Travel' and a.Req_Id='"
					+ requesterNo
					+ "' and e.PERNR=a.Pending_Approver and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID "
					+ "union "
					 +"select a.*,e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from all_request a,emp_official_info e,DEPARTMENT dep,DESIGNATION desg where Req_Type='Travel' and a.Req_Id='"
						+ requesterNo
						+ "' and e.PERNR=a.Actual_Approver and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID ";

		} else {
			app = "select a.*,e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from all_request a,emp_official_info e,DEPARTMENT dep,DESIGNATION desg where  Req_Type='Travel' and a.Req_Id='"
					+ requesterNo
					+ "' and e.PERNR=a.Actual_Approver and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID ";
				

		}
		List appList = new LinkedList();
		ResultSet rsAppr = ad.selectQuery(app);
		String duplicate="";
		try {
			while (rsAppr.next()) {
				ApprovalsForm appr = new ApprovalsForm();
				appr.setApprover(rsAppr.getString("EMP_FULLNAME"));
				appr.setDesignation(rsAppr.getString("DSGSTXT"));
				appr.setApproveStatus(rsAppr.getString("Req_Status"));
				String approvaStatus = rsAppr.getString("Req_Status");
				if (approvaStatus.equals("Pending")) {
					appr.setApproveDate("");
					appr.setComments("");
				}
				if (approvaStatus.equals("Approved")
						|| approvaStatus.equals("Completed")) {
					appr.setApproveDate(rsAppr.getString("approved_date"));
					appr.setComments(rsAppr.getString("Comments"));
				}
				if (approvaStatus.equals("Rejected")
						|| approvaStatus.equals("Cancelled")) {
					appr.setApproveDate(rsAppr.getString("rejected_date"));
					appr.setComments(rsAppr.getString("Comments"));
				}
				
				if (approvaStatus.equals("Reverted")) {
					appr.setApproveDate(rsAppr.getString("Reverted_on"));
					appr.setComments(rsAppr.getString("Reverted_By"));
				}
				
				if(duplicate==null)
				{
					duplicate="";
				}
				if(!duplicate.equalsIgnoreCase(rsAppr.getString("approved_date")))
					appList.add(appr);
					duplicate=rsAppr.getString("approved_date");
			}
			request.setAttribute("appList", appList);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}*/
		
		
		
		String getdet="select CONVERT(varchar(10),submitted_date,103)+' '+ CONVERT(varchar(5),submitted_date,108) as submitted_date,CONVERT(varchar(10),approved_date,103)+' '+ CONVERT(varchar(5),approved_date,108) as approved_date,CONVERT(varchar(10),Reverted_on,103)+' '+ CONVERT(varchar(5),Reverted_on,108) as Reverted_on,CONVERT(varchar(10),rejected_date,103)+' '+ CONVERT(varchar(5),rejected_date,108) as rejected_date,* from travel_request_history where req_id='"+requesterNo+"'";
		LinkedList appList = new LinkedList();
		ResultSet rsAppr = ad.selectQuery(getdet);
		String duplicate="";
		try {
			while (rsAppr.next()) {
				ApprovalsForm appr = new ApprovalsForm();
			/*	appr.setApprover(rsAppr.getString("EMP_FULLNAME"));
				appr.setDesignation(rsAppr.getString("DSGSTXT"));*/
				appr.setRole(rsAppr.getString("Role"));
				
				String approvaStatus = rsAppr.getString("Req_Status");
				if (approvaStatus.equals("Pending")) {
					
					int emp =Integer.parseInt(rsAppr.getString("Requester_Name"));
					appr.setApproveDate("");
					appr.setComments("");
					appr.setApproveStatus("Submitted");
					
					String empx="select e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from emp_official_info e,DEPARTMENT dep,DESIGNATION desg where e.PERNR='"+emp+"' and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID";
					ResultSet rr  =ad.selectQuery(empx);
					while(rr.next())
					{
						appr.setApprover(rr.getString("EMP_FULLNAME"));
						appr.setDesignation(rr.getString("DSGSTXT"));
						appr.setApproveDate(rsAppr.getString("submitted_date"));
					}
					
					
				}
				if (approvaStatus.equals("Approved")||approvaStatus.equalsIgnoreCase("Booking Accepted")||approvaStatus.equalsIgnoreCase("Bills Updated")||approvaStatus.equalsIgnoreCase("Travel Review")
						||approvaStatus.equalsIgnoreCase("Submitted To Finance")|| approvaStatus.equalsIgnoreCase("Received By finance")|| approvaStatus.equalsIgnoreCase("Verified By finance")||approvaStatus.equals("Completed")) {
					appr.setApproveStatus(rsAppr.getString("Req_Status"));
					
					int emp =Integer.parseInt(rsAppr.getString("Actual_Approver"));
					appr.setApproveDate(rsAppr.getString("approved_date"));
					appr.setComments(rsAppr.getString("Comments"));
					String empx="select e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from emp_official_info e,DEPARTMENT dep,DESIGNATION desg where e.PERNR='"+emp+"' and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID";
					ResultSet rr  =ad.selectQuery(empx);
					while(rr.next())
					{
						appr.setApprover(rr.getString("EMP_FULLNAME"));
						appr.setDesignation(rr.getString("DSGSTXT"));
						
					}
				}
				
				if (approvaStatus.equals("Reverted")
						|| approvaStatus.equals("Completed")) {
					appr.setApproveStatus(rsAppr.getString("Req_Status"));
					int emp =Integer.parseInt(rsAppr.getString("Actual_Approver"));
					appr.setApproveDate(rsAppr.getString("Reverted_on"));
					appr.setComments(rsAppr.getString("Comments"));
					
					String empx="select e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from emp_official_info e,DEPARTMENT dep,DESIGNATION desg where e.PERNR='"+emp+"' and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID";
					ResultSet rr  =ad.selectQuery(empx);
					while(rr.next())
					{
						appr.setApprover(rr.getString("EMP_FULLNAME"));
						appr.setDesignation(rr.getString("DSGSTXT"));
						
					}
				}
				if (approvaStatus.equals("Rejected")
						|| approvaStatus.equals("Cancelled")) {
					appr.setApproveStatus(rsAppr.getString("Req_Status"));
					int emp =Integer.parseInt(rsAppr.getString("Actual_Approver"));
					appr.setApproveDate(rsAppr.getString("rejected_date"));
					appr.setComments(rsAppr.getString("Comments"));
					String empx="select e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from emp_official_info e,DEPARTMENT dep,DESIGNATION desg where e.PERNR='"+emp+"'";
					ResultSet rr  =ad.selectQuery(empx);
					while(rr.next())
					{
						appr.setApprover(rr.getString("EMP_FULLNAME"));
						appr.setDesignation(rr.getString("DSGSTXT"));
						
					}
				}
				/*if(duplicate!=null)
				if(!duplicate.equalsIgnoreCase(rsAppr.getString("approved_date")))*/
					appList.add(appr);
					duplicate=rsAppr.getString("approved_date");
			}
			request.setAttribute("appList", appList);
		} catch (SQLException e) {

			e.printStackTrace();
		}
		
		

		String sql1 = "select * from Travel_documents where request_no='"+requesterNo+"' ";
		ResultSet rs = ad.selectQuery(sql1);
		TravelRequestForm leaveForm1 = null;
		ArrayList a1 = new ArrayList();

		try {
			while (rs.next()) {
				leaveForm1 = new TravelRequestForm();
				leaveForm1.setFileName(rs.getString("file_name"));
				leaveForm1.setId(rs.getInt("id"));				
				leaveForm1.setReqType(rs.getString("req_type"));
				a1.add(leaveForm1);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		request.setAttribute("documentDetails", a1);

		return mapping.findForward("travelRequest");
	}
	
	
	
	public ActionForward PDFTravelgenerate(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws SQLException {
		//Created by Arun .Date:15-11-2016
		TravelRequestForm requestForm = (TravelRequestForm)form;
		EssDao ad = new EssDao();
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		if(user==null){
			request.setAttribute("message","Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		
		Date dNow = new Date( );
		SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd");
		String exportdate=ft.format(dNow);
		String reqno=request.getParameter("requstNo");
		 String Travel_Request_for="";
		
		if(reqno==null)
		{
			reqno= Integer.toString(requestForm.getRequestNumber());
		}
		
		String forward = null;
		ArrayList workFlow1  = new  ArrayList();
		
		
		 Document document = new Document();
			InputStream in =ConnectionFactory.class.getClassLoader().getResourceAsStream("db.properties");
		Properties props = null;
		try {
			props = PropertiesLoaderUtils.loadAllProperties("db.properties");
		} catch (IOException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}
		PropertyPlaceholderConfigurer props2 = new PropertyPlaceholderConfigurer();
		props2.setProperties(props);
		try {
			props.load(in);
			
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		try {
			in.close();
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
	 	 
	 	  BaseFont base = null;
			try {
			
					try {
						base = BaseFont.createFont("\\Windows\\fonts\\wingding_0.ttf", BaseFont.IDENTITY_H, false);
					} catch (DocumentException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	 	 
			Font font = new Font(base, 16f, Font.BOLD);
		  char checked='\u00FE';
		  char unchecked='\u00A8';
	 	
	 	String uploadFilePath=props.getProperty("file.uploadFilePath");
	 	String filePath=uploadFilePath+"/EMicro Files/ESS/Travel Request/PDF/";
	 	
		File destinationDir = new File(filePath);
		if(!destinationDir.exists())
		{
			destinationDir.mkdirs();
			
			
			
		}
		String empfullnm="";
		PdfWriter writer;
		
		try {
			writer = PdfWriter.getInstance(document, new FileOutputStream(filePath.replace("/", "\\")+"TR_"+reqno+".pdf"));
	
		
        Rectangle rect = new Rectangle(30, 30, 550, 800);
        writer.setBoxSize("art", rect);
        
		
        Font largeBold = new Font(Font.FontFamily.COURIER, 10,
                Font.BOLD);
       
       Font columnheader = new Font(Font.FontFamily.UNDEFINED, 10,
                Font.BOLD);
       
       Font smallfont = new Font(Font.FontFamily.COURIER,10);
       smallfont.setColor(BaseColor.BLUE);
       Font mediumfont = new Font(Font.FontFamily.UNDEFINED,8,Font.BOLD);
       String TravelFor="";
       TravelRequestForm t =new TravelRequestForm();
	  	ArrayList data=new ArrayList();
		ArrayList emplist=new ArrayList();
		ArrayList guestlist=new ArrayList();
		String reqType="";
		String lis="select division.div_desc as spon_div,  emp.email_id,per.email_address ,emp.dob, per.mobile_no, per.passport_no  "
				+ " ,CONVERT(varchar(10),confirmdate,103)+' '+ CONVERT(varchar(5),confirmdate,108) as confirmdate1,CONVERT(varchar(10),Req_date,103)+' '+ CONVERT(varchar(5),Req_date,108) as Created_date1,CONVERT(varchar(10),bookeddate,103)+' '+ CONVERT(varchar(5),bookeddate,108) as bookeddate1,"
				+ " CONVERT(varchar(10),Depart_On,103)  as departon,"
				+ " CONVERT(varchar(10),Return_On,103)  as returnon,CONVERT(varchar(10),Return_On,103)  as returnon,CONVERT(varchar(10),billdate,103)  as billdate1,* from "
				+ " Travel_Desk left outer join  division on division.div_code=spon_div , emp_official_info as emp, emp_personal_info as per "
				+ " "
				+ "  where reqNo='"+reqno+"' and travel_Desk.PERNR=emp.PERNR  and per.user_id=emp.pernr "
				+ "  ";
		ResultSet ff=ad.selectQuery(lis);
		try {
			if(ff.next())
			{
				
				///////
			String ere[]=empDet(Integer.toString(ff.getInt("PERNR")));	
			t.setRequestNumber(Integer.parseInt(reqno));
			t.setId(ff.getInt("id"));	
			t.setEmployeeno(Integer.toString(ff.getInt("PERNR")));
			t.setLocationId(ere[1]);
			t.setDepartment(ere[2]);
			t.setEmployeeName(ere[0]);
			t.setDesignation(ere[3]);
			t.setGuest_DOB(ff.getString("dob"));
			t.setP_email(ff.getString("p_email"));
			t.setTravel_desk_type(Empname(ff.getString("travel_desk_type")));
			t.setTravelmode(ff.getString("travelmode"));
			t.setPassportno(ff.getString("passport_no"));
			t.setPassportplace(ff.getString("place_of_issue_of_passport"));
			t.setPassportexpirydate(ff.getString("date_of_expiry_of_passport"));
			t.setPassportissuedate(ff.getString("date_of_issue_of_passp"));
			t.setP_cont(ff.getString("p_cont"));
			t.setP_name(ff.getString("p_name"));
			t.setP_dept(ff.getString("p_dept"));
			t.setUserPersonalmailId(ff.getString("email_address"));
			t.setGender(ff.getString("sex"));
			t.setTraveltype(ff.getString("Mode_of_travel"));
			t.setService_class(ff.getString("service_class"));
			t.setTravelFor(ff.getString("travel_For"));
			t.setPurposetype(ff.getString("purposetype"));
			t.setPurposetext(ff.getString("purposetext"));
			t.setTravel_Adult(ff.getString("travel_Adult"));
			t.setTravel_Child(ff.getString("travel_Child"));
			t.setTravel_Infant(ff.getString("travel_Infant"));
			t.setOrigin(ff.getString("from_place"));
			t.setDepartOn(ff.getString("departOn"));
			t.setDeparture(ff.getString("to_place"));
			t.setReturnfrom(ff.getString("to_place"));
			t.setReturnOn(ff.getString("returnOn"));
			t.setTravel_Days(ff.getString("travel_Days"));
			t.setBud_code(ff.getString("bud_code"));
			t.setEst_trip_cose(ff.getString("est_trip_cose"));
			t.setTrip_Amt(ff.getString("trip_Amt"));
			t.setTravelRequestFor(ff.getString("travel_request_for"));
			t.setReqDate(ff.getString("Created_date1"));
			t.setSpon_div(ff.getString("spon_div"));
			t.setTravelFor(ff.getString("travel_For"));
			Travel_Request_for=ff.getString("Travel_Request_for");
			TravelFor = ff.getString("travel_For");
			  if((TravelFor.equalsIgnoreCase("Self") ||TravelFor.equalsIgnoreCase("Multiple")))
              	
              {
              	  t.setAccom_type(ff.getString("accom_type"));
                    t.setAccom_name(ff.getString("accom_name"));
                    t.setHotel_Res(ff.getString("hotel_Res"));
                    t.setHotel_City(ff.getString("hotel_City"));
                    t.setHotel_Name(ff.getString("hotel_Name"));
                   
                    t.setRent_Car(ff.getString("rent_Car"));
                    t.setPickup_Details(ff.getString("pickup_Details"));
                    t.setDrop_Details(ff.getString("drop_Details"));
                    
                    
              }
			
			
			
			
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		String locname="select loc.LAND1 from location as loc where loc.LOCATION_CODE='"+t.getLocationId()+"'";
		ResultSet rs1 = ad.selectQuery(locname);
		String locationName="";
		while(rs1.next())
		{
			locationName=rs1.getString("LAND1");
			
		}
       
       
       HeaderFooterPageEventTravelDeskReport event = new HeaderFooterPageEventTravelDeskReport(user.getEmployeeNo(), user.getFullName(),t.getLocationId(),t.getReqDate(),t.getRequestNumber(),locationName,t.getTraveltype());
        writer.setPageEvent(event);
    
       
        document.open();         
        
    	   PdfPTable table1 = new PdfPTable(4); // 3 columns.
           table1.setWidthPercentage(100); //Width 100%
           table1.setSpacingBefore(10f); //Space before table
           table1.setSpacingAfter(10f); //Space after table
           //Set Column widths
           float[] columnWidths = {6f,1f,3f,3f};;
		  table1.setWidths(columnWidths);
		  
		  
			document.add(table1);
			
			
			request.setAttribute("data", data);
		  
		  // Requester Details start
		 PdfPTable tablereq = new PdfPTable(6); // No. of columns
		  tablereq.setWidthPercentage(100); //Width 100%
          tablereq.setSpacingBefore(10f); //Space before table
          tablereq.setSpacingAfter(10f);  // Space after table
          float[] columnWidthreqs = {2.5f,2.5f,2.5f,3f,2.5f,3f};; //Set Column widths
          tablereq.setWidths(columnWidthreqs);
		  
          PdfPCell pere = new PdfPCell(new Paragraph("Requester Details",columnheader));			  
          pere.setColspan(6);		  
		  tablereq.addCell(pere);

		  PdfPCell perpernr1 = new PdfPCell(new Paragraph("Emp.No:",columnheader));			  
		  tablereq.addCell(perpernr1);
		  PdfPCell perpernrv = new PdfPCell(new Paragraph(t.getEmployeeno(),smallfont));			  
		  tablereq.addCell(perpernrv);
		  PdfPCell perpernr = new PdfPCell(new Paragraph("Dept.:",columnheader));			  
		  tablereq.addCell(perpernr);		  
		  perpernrv = new PdfPCell(new Paragraph(t.getDepartment(),smallfont));			  
		  tablereq.addCell(perpernrv);
		  PdfPCell perdep = new PdfPCell(new Paragraph("Gender:",columnheader));			  
		  tablereq.addCell(perdep);
		  perpernrv = new PdfPCell(new Paragraph(t.getGender(),smallfont));			  
		  tablereq.addCell(perpernrv);
		  
		  
		   perpernr1 = new PdfPCell(new Paragraph("Name:",columnheader));			  
		  tablereq.addCell(perpernr1);
		   perpernrv = new PdfPCell(new Paragraph(t.getEmployeeName(),smallfont));			  
		  tablereq.addCell(perpernrv);
		   perpernr = new PdfPCell(new Paragraph("Desg:",columnheader));			  
		  tablereq.addCell(perpernr);		  
		  perpernrv = new PdfPCell(new Paragraph(t.getDesignation(),smallfont));			  
		  tablereq.addCell(perpernrv);
		   perdep = new PdfPCell(new Paragraph("DOB:",columnheader));			  
		  tablereq.addCell(perdep);
		  perpernrv = new PdfPCell(new Paragraph(t.getGuest_DOB(),smallfont));			  
		  tablereq.addCell(perpernrv);
		  		  
		  

		   perpernr1 = new PdfPCell(new Paragraph("Phone:",columnheader));			  
		  tablereq.addCell(perpernr1);
		   perpernrv = new PdfPCell(new Paragraph(t.getP_cont(),smallfont));			  
		  tablereq.addCell(perpernrv);
		   perpernr = new PdfPCell(new Paragraph("Email(Off):",columnheader));			  
		  tablereq.addCell(perpernr);		  
		  perpernrv = new PdfPCell(new Paragraph(t.getP_email(),smallfont));			  
		  tablereq.addCell(perpernrv);
		   perdep = new PdfPCell(new Paragraph("Email(Personal):",columnheader));			  
		  tablereq.addCell(perdep);
		  perpernrv = new PdfPCell(new Paragraph(t.getUserPersonalmailId(),smallfont));			  
		  tablereq.addCell(perpernrv);
		  // Requester Details start
		  

		   perpernr1 = new PdfPCell(new Paragraph("Travel Desk:",columnheader));			  
		  tablereq.addCell(perpernr1);
		   perpernrv = new PdfPCell(new Paragraph(t.getTravel_desk_type(),smallfont));			  
		  tablereq.addCell(perpernrv);
		   perpernr = new PdfPCell(new Paragraph("Mode:",columnheader));			  
		  tablereq.addCell(perpernr);		  
		  perpernrv = new PdfPCell(new Paragraph(t.getTravelmode(),smallfont));			  
		  tablereq.addCell(perpernrv);
		   perdep = new PdfPCell(new Paragraph("Type:",columnheader));			  
		  tablereq.addCell(perdep);
		  perpernrv = new PdfPCell(new Paragraph(t.getTraveltype(),smallfont));			  
		  tablereq.addCell(perpernrv);
		  
		  if(ff.getString("travel_For").equalsIgnoreCase("Self") || ff.getString("travel_For").equalsIgnoreCase("Multiple"))
		  {
			  
             /* tra.add(t);
              request.setAttribute("tra", tra);*/
              
              perpernr1 = new PdfPCell(new Paragraph("Accom_type:",columnheader));			  
    		  tablereq.addCell(perpernr1);
    		   perpernrv = new PdfPCell(new Paragraph(t.getAccom_type(),smallfont));			  
    		  tablereq.addCell(perpernrv);
    		   perpernr = new PdfPCell(new Paragraph("Accom_Name:",columnheader));			  
    		  tablereq.addCell(perpernr);		  
    		  perpernrv = new PdfPCell(new Paragraph(t.getAccom_name(),smallfont));			  
    		  tablereq.addCell(perpernrv);
    		   perdep = new PdfPCell(new Paragraph("Rent Car:",columnheader));			  
    		  tablereq.addCell(perdep);
    		  perpernrv = new PdfPCell(new Paragraph(t.getRent_Car(),smallfont));			  
    		  tablereq.addCell(perpernrv);
    		  
    		  perpernr1 = new PdfPCell(new Paragraph("hotel_Residence:",columnheader));			  
    		  tablereq.addCell(perpernr1);
    		   perpernrv = new PdfPCell(new Paragraph(t.getHotel_Res(),smallfont));			  
    		  tablereq.addCell(perpernrv);
    		   perpernr = new PdfPCell(new Paragraph("Hotel_City:",columnheader));			  
    		  tablereq.addCell(perpernr);		  
    		  perpernrv = new PdfPCell(new Paragraph(t.getHotel_City(),smallfont));			  
    		  tablereq.addCell(perpernrv);
    		   perdep = new PdfPCell(new Paragraph("Hotel_Name:",columnheader));			  
    		  tablereq.addCell(perdep);
    		  perpernrv = new PdfPCell(new Paragraph(t.getHotel_Name(),smallfont));			  
    		  tablereq.addCell(perpernrv);
    		  
    		  perpernr1 = new PdfPCell(new Paragraph("pickup_Details:",columnheader));			  
    		  tablereq.addCell(perpernr1);
    		   perpernrv = new PdfPCell(new Paragraph(t.getPickup_Details(),smallfont));			  
    		  tablereq.addCell(perpernrv);
    		   perpernr = new PdfPCell(new Paragraph("drop_Details:",columnheader));			  
    		  tablereq.addCell(perpernr);		  
    		  perpernrv = new PdfPCell(new Paragraph(t.getDrop_Details(),smallfont));			  
    		  tablereq.addCell(perpernrv);
    		 
		  }
		  
		  document.add(tablereq);
		  
		 /* if(!t.getTravelFor().equalsIgnoreCase("Self"))*/
		  if(true)
		  {
		  
		  // Travel Details start
		  PdfPTable tablereq2 = new PdfPTable(6); // No. of columns
		  tablereq2.setWidthPercentage(100); //Width 100%
          tablereq2.setSpacingBefore(10f); //Space before table
          tablereq2.setSpacingAfter(10f);  // Space after table
          float[] columnWidthreqs2 = {2.5f,2.5f,2.5f,2.5f,2.5f,2.5f}; //Set Column widths
          tablereq2.setWidths(columnWidthreqs2);
		  
          PdfPCell pere1 = new PdfPCell(new Paragraph("Contact Details ",columnheader));			  
          pere1.setColspan(6);		  
		  tablereq2.addCell(pere1);
		   
		  PdfPCell perpernr3 = new PdfPCell(new Paragraph("Contact Name:",columnheader));			  
		  tablereq2.addCell(perpernr3);
		  PdfPCell perpernr4 = new PdfPCell(new Paragraph(t.getP_name(),smallfont));
		  tablereq2.addCell(perpernr4);
		  PdfPCell perpernr5 = new PdfPCell(new Paragraph("Phone:",columnheader));			  
		  tablereq2.addCell(perpernr5);
		  PdfPCell perpernr6 = new PdfPCell(new Paragraph(t.getP_cont(),smallfont));			  
		  tablereq2.addCell(perpernr6);
		  
		  PdfPCell perpernr7 = new PdfPCell(new Paragraph("official Id:",columnheader));			  
		  tablereq2.addCell(perpernr7);
		  PdfPCell perpernr8 = new PdfPCell(new Paragraph(t.getP_email(),smallfont));			  
		  tablereq2.addCell(perpernr8);
		  
		  
		  document.add(tablereq2);
		  
		  }
		   
		  
		  if(t.getTraveltype().equalsIgnoreCase("International"))
		  {
			  
		  
		  // Travel Details start
		  PdfPTable tablereq2 = new PdfPTable(4); // No. of columns
		  tablereq2.setWidthPercentage(100); //Width 100%
          tablereq2.setSpacingBefore(10f); //Space before table
          tablereq2.setSpacingAfter(10f);  // Space after table
          float[] columnWidthreqs2 = {2.5f,2.5f,2.5f,3f}; //Set Column widths
          tablereq2.setWidths(columnWidthreqs2);
		  
          PdfPCell pere1 = new PdfPCell(new Paragraph("Passport Details ",columnheader));			  
          pere1.setColspan(4);		  
		  tablereq2.addCell(pere1);
		   
		  PdfPCell perpernr3 = new PdfPCell(new Paragraph("Passport No:",columnheader));			  
		  tablereq2.addCell(perpernr3);
		  PdfPCell perpernr4 = new PdfPCell(new Paragraph(t.getPassportno(),smallfont));
		  tablereq2.addCell(perpernr4);
		  PdfPCell perpernr5 = new PdfPCell(new Paragraph("Place of Issue:",columnheader));			  
		  tablereq2.addCell(perpernr5);
		  PdfPCell perpernr6 = new PdfPCell(new Paragraph(t.getPassportplace(),smallfont));			  
		  tablereq2.addCell(perpernr6);
		  
		  PdfPCell perpernr7 = new PdfPCell(new Paragraph("Issue Date:",columnheader));			  
		  tablereq2.addCell(perpernr7);
		  PdfPCell perpernr8 = new PdfPCell(new Paragraph(t.getPassportissuedate(),smallfont));			  
		  tablereq2.addCell(perpernr8);
		  PdfPCell perpernr9 = new PdfPCell(new Paragraph("Expiry Date:",columnheader));			  
		  tablereq2.addCell(perpernr9);
		  PdfPCell perpernr10 = new PdfPCell(new Paragraph(t.getPassportexpirydate(),smallfont));			  
		  tablereq2.addCell(perpernr10);
		  
		  
		  
		  document.add(tablereq2);
		  
		  }
		  
	  
		  
		  // Travel Details start
		  PdfPTable tablereq3 = new PdfPTable(4); // No. of columns
		  tablereq3.setWidthPercentage(100); //Width 100%
          tablereq3.setSpacingBefore(10f); //Space before table
          tablereq3.setSpacingAfter(10f);  // Space after table
          float[] columnWidthreqs3 = {2.5f,2.5f,2.5f,3f}; //Set Column widths
          tablereq3.setWidths(columnWidthreqs3);
		  
           PdfPCell pere1 = new PdfPCell(new Paragraph("Trip Details ",columnheader));			  
          pere1.setColspan(4);		  
		  tablereq3.addCell(pere1);
		   
		  PdfPCell perpernr3 = new PdfPCell(new Paragraph("Service Class:",columnheader));			  
		  tablereq3.addCell(perpernr3);
		  PdfPCell perpernr4 = new PdfPCell(new Paragraph(t.getService_class(),smallfont));
		  tablereq3.addCell(perpernr4);
		  PdfPCell perpernr5 = new PdfPCell(new Paragraph("Req For:",columnheader));			  
		  tablereq3.addCell(perpernr5);
		  PdfPCell perpernr6 = new PdfPCell(new Paragraph(t.getTravelRequestFor(),smallfont));			  
		  tablereq3.addCell(perpernr6);
		  
		  PdfPCell perpernr7 = new PdfPCell(new Paragraph("Purpose:",columnheader));			  
		  tablereq3.addCell(perpernr7);
		  PdfPCell perpernr8 = new PdfPCell(new Paragraph(t.getPurposetype(),smallfont));			  
		  tablereq3.addCell(perpernr8);
		  PdfPCell perpernr9 = new PdfPCell(new Paragraph("Location:",columnheader));			  
		  tablereq3.addCell(perpernr9);
		  PdfPCell perpernr10 = new PdfPCell(new Paragraph(t.getLocid(),smallfont));			  
		  tablereq3.addCell(perpernr10);
		  
		  
		  

		  perpernr7 = new PdfPCell(new Paragraph("Details:",columnheader));	
		  tablereq3.addCell(perpernr7);
		  perpernr8 = new PdfPCell(new Paragraph(t.getPurposetext(),smallfont));
		  perpernr8.setColspan(3);
		  tablereq3.addCell(perpernr8);
		  
		  
		  

		  perpernr7 = new PdfPCell(new Paragraph("Travel For:",columnheader));			  
		  tablereq3.addCell(perpernr7);
		  perpernr8 = new PdfPCell(new Paragraph(t.getTravelFor(),smallfont));			  
		  tablereq3.addCell(perpernr8);
		  perpernr9 = new PdfPCell(new Paragraph("No. of Travellers:",columnheader));			  
		  tablereq3.addCell(perpernr9);
		  if(t.getTravel_Adult().equalsIgnoreCase("0"))
			  t.setTravel_Adult("NA");
		  if(t.getTravel_Child().equalsIgnoreCase("0"))
			  t.setTravel_Child("NA");
		  if(t.getTravel_Infant().equalsIgnoreCase("0"))
			  t.setTravel_Infant("NA");
		  
		  perpernr10 = new PdfPCell(new Paragraph("Adult- "+ t.getTravel_Adult() +" Children-"+ t.getTravel_Child()+" Infant- "+ t.getTravel_Infant() ,smallfont));			  
		  tablereq3.addCell(perpernr10);
		  
		  
		  perpernr7 = new PdfPCell(new Paragraph("Origin:",columnheader));			  
		  tablereq3.addCell(perpernr7);
		  perpernr8 = new PdfPCell(new Paragraph(t.getOrigin(),smallfont));			  
		  tablereq3.addCell(perpernr8);
		  perpernr9 = new PdfPCell(new Paragraph("Destination:",columnheader));			  
		  tablereq3.addCell(perpernr9);
		  perpernr10 = new PdfPCell(new Paragraph(t.getReturnfrom(),smallfont));			  
		  tablereq3.addCell(perpernr10);
		  
		  
		  

		  perpernr7 = new PdfPCell(new Paragraph("Depart Date:",columnheader));			  
		  tablereq3.addCell(perpernr7);
		  perpernr8 = new PdfPCell(new Paragraph(t.getDepartOn(),smallfont));			  
		  tablereq3.addCell(perpernr8);
		  perpernr9 = new PdfPCell(new Paragraph("Return Date:",columnheader));			  
		  tablereq3.addCell(perpernr9);
		  perpernr10 = new PdfPCell(new Paragraph(t.getReturnOn(),smallfont));			  
		  tablereq3.addCell(perpernr10);
		  
		  
		  

		  perpernr7 = new PdfPCell(new Paragraph("No Of Days:",columnheader));			  
		  tablereq3.addCell(perpernr7);
		  perpernr8 = new PdfPCell(new Paragraph(t.getTravel_Days(),smallfont));			  
		  tablereq3.addCell(perpernr8);
		  perpernr9 = new PdfPCell(new Paragraph("Expense Billed to: ",columnheader));			  
		  tablereq3.addCell(perpernr9);
		  perpernr10 = new PdfPCell(new Paragraph(t.getSpon_div(),smallfont));			  
		  tablereq3.addCell(perpernr10);
		  
		  

		  perpernr7 = new PdfPCell(new Paragraph("Budget Code:",columnheader));			  
		  tablereq3.addCell(perpernr7);
		  perpernr8 = new PdfPCell(new Paragraph(t.getBud_code(),smallfont));			  
		  tablereq3.addCell(perpernr8);
		  perpernr9 = new PdfPCell(new Paragraph("Esti. Trip Cost:",columnheader));			  
		  tablereq3.addCell(perpernr9);
		  perpernr10 = new PdfPCell(new Paragraph(t.getEst_trip_cose(),smallfont));			  
		  tablereq3.addCell(perpernr10);
		  
		  
		  perpernr9 = new PdfPCell(new Paragraph("Trip. Adv. Amount:",columnheader));			  
		  tablereq3.addCell(perpernr9);
		  perpernr10 = new PdfPCell(new Paragraph(t.getTrip_Amt(),smallfont));
		  perpernr10.setColspan(3);
		  tablereq3.addCell(perpernr10);
		  
		  
		  document.add(tablereq3);
		  
		  
		  
		//traveller details
		  PdfPTable tabletrav = new PdfPTable(10); // 3 columns.
		  tabletrav.setWidthPercentage(100); //Width 100%
		  
		  tabletrav.setSpacingBefore(10f); //Space before table
		  tabletrav.setSpacingAfter(10f);  
		  
         
          //Set Column widths
          float[] columnWidttrav = {2f,2.5f,2f,2f,2f,2f,2f,2f,2f,2f};
          tabletrav.setWidths(columnWidttrav);
          
          
          String query1="select * from Travel_Desk_Travellers where req_id='"+t.getId()+"' ";
          ResultSet rs = ad.selectQuery(query1);
          try {
			if(rs.next())
			  {
				  
			  PdfPCell pertrav = new PdfPCell(new Paragraph("Travellers Details",columnheader));			  
			  pertrav.setColspan(10);		  
			  tabletrav.addCell(pertrav);
  
			  
			  PdfPCell pertravempno = new PdfPCell(new Paragraph("Type",columnheader));			  
			  tabletrav.addCell(pertravempno);
			  PdfPCell pertravempnname = new PdfPCell(new Paragraph("Name",columnheader));			  
			  tabletrav.addCell(pertravempnname);
			  PdfPCell pertravempdep = new PdfPCell(new Paragraph("M/F",columnheader));			  
			  tabletrav.addCell(pertravempdep);
			  PdfPCell pertravempdes = new PdfPCell(new Paragraph("Age",columnheader));			  
			  tabletrav.addCell(pertravempdes);
			  PdfPCell pertravemploc = new PdfPCell(new Paragraph("Contact No.",columnheader));			  
			  tabletrav.addCell(pertravemploc);
			  PdfPCell pertravempfgeb = new PdfPCell(new Paragraph("email",columnheader));			  
			  tabletrav.addCell(pertravempfgeb);
			  PdfPCell pertravempads = new PdfPCell(new Paragraph("Origin",columnheader));			  
			  tabletrav.addCell(pertravempads);
			  PdfPCell pertravempcoo = new PdfPCell(new Paragraph("Destin",columnheader));			  
			  tabletrav.addCell(pertravempcoo);
			  PdfPCell pertravempemi = new PdfPCell(new Paragraph("Departure Dt",columnheader));			  
			  tabletrav.addCell(pertravempemi);
			  PdfPCell pertravempas = new PdfPCell(new Paragraph("Return Dt.",columnheader));			  
			  tabletrav.addCell(pertravempas);
			  rs.beforeFirst();
			  
			  }
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    
          
          try {
			while(rs.next())
			  {
				  
			  PdfPCell pertravempnov = new PdfPCell(new Paragraph(rs.getString("req_type"),smallfont));			  
			  tabletrav.addCell(pertravempnov);
			  PdfPCell pertravempnnamev = new PdfPCell(new Paragraph(rs.getString("name_of_guest"),smallfont));			  
			  tabletrav.addCell(pertravempnnamev);
			  PdfPCell pertravempdepv = new PdfPCell(new Paragraph(rs.getString("Gender_guest"),smallfont));			  
			  tabletrav.addCell(pertravempdepv);
			  PdfPCell pertravempdesv = new PdfPCell(new Paragraph(rs.getString("Guest_DOB"),smallfont));			  
			  tabletrav.addCell(pertravempdesv);
			  PdfPCell pertravemplocv = new PdfPCell(new Paragraph(rs.getString("contact_guest"),smallfont));			  
			  tabletrav.addCell(pertravemplocv);
			  PdfPCell pertravempfgebv = new PdfPCell(new Paragraph(rs.getString("email_guest"),smallfont));			  
			  tabletrav.addCell(pertravempfgebv);
			  PdfPCell pertravempadsv = new PdfPCell(new Paragraph(rs.getString("fromplace"),smallfont));			  
			  tabletrav.addCell(pertravempadsv);
			  PdfPCell pertravempcoov = new PdfPCell(new Paragraph(rs.getString("toplace"),smallfont));			  
			  tabletrav.addCell(pertravempcoov);
			  PdfPCell pertravempemiv = new PdfPCell(new Paragraph("",smallfont));			  
			  tabletrav.addCell(pertravempemiv);
			  PdfPCell pertravempasv = new PdfPCell(new Paragraph(rs.getString("returnon"),smallfont));			  
			  tabletrav.addCell(pertravempasv);
			  
			  
			  
			  }
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
          
          document.add(tabletrav);
         PdfPTable tableguest = new PdfPTable(7); // 3 columns.
		  tableguest.setWidthPercentage(100); //Width 100%
       
        //Set Column widths
        float[] columnWidttgues = {2f,2f,2f,2f,2f,2f,2f};
        tableguest.setWidths(columnWidttgues);
       
          
          String query1a="select * from Travel_Multiple_City where req_id='"+t.getId()+"' ";
          ResultSet rsa = ad.selectQuery(query1a);
          
			try {
				if(rsa.next())
				  {
        
      //treraveller detals
		   
        PdfPCell pertravgues= new PdfPCell(new Paragraph("Multi - City Details",columnheader));			  
        pertravgues.setColspan(7);		  
        tableguest.addCell(pertravgues);
        
        PdfPCell perguest = new PdfPCell(new Paragraph("Travel List Name",columnheader));			  
        tableguest.addCell(perguest);
        PdfPCell perguestc = new PdfPCell(new Paragraph("Location",columnheader));			  
        tableguest.addCell(perguestc);
        PdfPCell perguestg = new PdfPCell(new Paragraph("Preference",columnheader));			  
        tableguest.addCell(perguestg);
        PdfPCell perguestca = new PdfPCell(new Paragraph("Origin",columnheader));			  
        tableguest.addCell(perguestca);      
        PdfPCell perguestcaem = new PdfPCell(new Paragraph("Destin",columnheader));			  
        tableguest.addCell(perguestcaem);
        PdfPCell perguestcaempas = new PdfPCell(new Paragraph("Arrival. Dt.",columnheader));			  
        tableguest.addCell(perguestcaempas);
        PdfPCell perguestcaempasis = new PdfPCell(new Paragraph("Depart. Dt",columnheader));			  
        tableguest.addCell(perguestcaempasis);
        rsa.beforeFirst();
        
        
        
				  }
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
          try {
			while(rsa.next())
			  {
			  PdfPCell perguestv = new PdfPCell(new Paragraph("",smallfont));			  
			  tableguest.addCell(perguestv);
			  PdfPCell perguestcv = new PdfPCell(new Paragraph(rsa.getString("location"),smallfont));			  
			  tableguest.addCell(perguestcv);
			  PdfPCell perguestgv = new PdfPCell(new Paragraph(rsa.getString("air_preference"),smallfont));			  
			  tableguest.addCell(perguestgv);
			  PdfPCell perguestcav = new PdfPCell(new Paragraph(rsa.getString("morigin"),smallfont));			  
			  tableguest.addCell(perguestcav);      
			  PdfPCell perguestcaemv = new PdfPCell(new Paragraph(rsa.getString("mdeparture"),smallfont));			  
			  tableguest.addCell(perguestcaemv);
			  PdfPCell perguestcaempasv = new PdfPCell(new Paragraph(rsa.getString("arrival_date"),smallfont));			  
			  tableguest.addCell(perguestcaempasv);
			  PdfPCell perguestcaempasisv = new PdfPCell(new Paragraph(rsa.getString("departure_date"),smallfont));			  
			  tableguest.addCell(perguestcaempasisv);
			  }
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
          
          document.add(tableguest);
          PdfPTable tablereq8 = new PdfPTable(6); // No. of columns
		  tablereq8.setWidthPercentage(100); //Width 100%
  
        float[] columnWidthreqss = {2f,2f,2f,2f,2f,2f};//Set Column widths
        tablereq8.setWidths(columnWidthreqss);
         if(Travel_Request_for!=null)
         {
        	 if(Travel_Request_for.equalsIgnoreCase("Multi-City1"))
        	 {
        		  
        	        PdfPCell pertravgues1= new PdfPCell(new Paragraph("Monthly Tour Plan",columnheader));		
        	        pertravgues1.setBackgroundColor(new BaseColor(219, 214, 214));
        	        pertravgues1.setColspan(6);		  
        	        tablereq8.addCell(pertravgues1);
        	        
        	        PdfPCell perguest1 = new PdfPCell(new Paragraph("Date",columnheader));		
        	        perguest1.setBackgroundColor(new BaseColor(219, 214, 214));
        	        tablereq8.addCell(perguest1);
        	        PdfPCell perguestc1 = new PdfPCell(new Paragraph("Origin",columnheader));			  
        	        perguestc1.setBackgroundColor(new BaseColor(219, 214, 214));
        	        tablereq8.addCell(perguestc1);
        	        PdfPCell perguestg1 = new PdfPCell(new Paragraph("Destination",columnheader));			  
        	        perguestg1.setBackgroundColor(new BaseColor(219, 214, 214));
        	        tablereq8.addCell(perguestg1);
        	        PdfPCell perguestca1 = new PdfPCell(new Paragraph("Travel Mode",columnheader));			  
        	        perguestca1.setBackgroundColor(new BaseColor(219, 214, 214));
        	        tablereq8.addCell(perguestca1);  
        	        
        	        PdfPCell perguestcaem1 = new PdfPCell(new Paragraph("Travel Type",columnheader));			  
        	        perguestcaem1.setBackgroundColor(new BaseColor(219, 214, 214));
        	        tablereq8.addCell(perguestcaem1);
        	        PdfPCell perguestcaempas1 = new PdfPCell(new Paragraph("Remarks",columnheader));			  
        	        perguestcaempas1.setBackgroundColor(new BaseColor(219, 214, 214));
        	        tablereq8.addCell(perguestcaempas1); 
        	 }
         }
       
   
        String monthplan="select tm.plan_date,tm.morigin,tm.mdestination,tm.mtravelmode,tm.mtraveltype,tm.mremarks from Travel_MTP as tm,Travel_Desk as td where td.reqNo='"+ reqno+"' and td.id=tm.req_id order by plan_date";
		List appList1 = new LinkedList();
		ResultSet rsAppr1 = ad.selectQuery(monthplan);
/*try {
	while (rsAppr1.next()) {
		TravelRequestForm appr=new TravelRequestForm();
		
		String d[]=rsAppr1.getString("plan_date").split("-");
		String dateString = d[2]+"/"+d[1]+"/"+d[0];;
		
		appr.setFromdate(dateString);
		
		
		//appr.setFromdate(rsAppr1.getString("plan_date"));
		appr.setOrigin(rsAppr1.getString("morigin"));
		appr.setDeparture(rsAppr1.getString("mdestination"));
		appr.setTravelmode(rsAppr1.getString("mtravelmode"));
		appr.setTraveltype(rsAppr1.getString("mtraveltype"));
		appr.setRemarks(rsAppr1.getString("mremarks"));
		appList1.add(appr);
		
		
		 PdfPCell pertravgues1= new PdfPCell(new Paragraph("Monthly Tour Plan",columnheader));		
	        pertravgues1.setBackgroundColor(new BaseColor(219, 214, 214));
	        pertravgues1.setColspan(6);		  
	        tablereq8.addCell(pertravgues1);
	        
	        PdfPCell perguest1 = new PdfPCell(new Paragraph("Date",columnheader));		
	        perguest1.setBackgroundColor(new BaseColor(219, 214, 214));
	        tablereq8.addCell(perguest1);
	        PdfPCell perguestc1 = new PdfPCell(new Paragraph("Origin",columnheader));			  
	        perguestc1.setBackgroundColor(new BaseColor(219, 214, 214));
	        tablereq8.addCell(perguestc1);
	        PdfPCell perguestg1 = new PdfPCell(new Paragraph("Destination",columnheader));			  
	        perguestg1.setBackgroundColor(new BaseColor(219, 214, 214));
	        tablereq8.addCell(perguestg1);
	        PdfPCell perguestca1 = new PdfPCell(new Paragraph("Travel Mode",columnheader));			  
	        perguestca1.setBackgroundColor(new BaseColor(219, 214, 214));
	        tablereq8.addCell(perguestca1);  
	        
	        PdfPCell perguestcaem1 = new PdfPCell(new Paragraph("Travel Type",columnheader));			  
	        perguestcaem1.setBackgroundColor(new BaseColor(219, 214, 214));
	        tablereq8.addCell(perguestcaem1);
	        PdfPCell perguestcaempas1 = new PdfPCell(new Paragraph("Remarks",columnheader));			  
	        perguestcaempas1.setBackgroundColor(new BaseColor(219, 214, 214));
	        tablereq8.addCell(perguestcaempas1);
	        
	     
	}

	   rsAppr1.beforeFirst();
} catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}*/

try {
	while (rsAppr1.next()) {
		/*TravelRequestForm appr=new TravelRequestForm();
		
		String d[]=rsAppr1.getString("plan_date").split("-");
		String dateString = d[2]+"/"+d[1]+"/"+d[0];;
		
		appr.setFromdate(dateString);
		
		
		//appr.setFromdate(rsAppr1.getString("plan_date"));
		appr.setOrigin(rsAppr1.getString("morigin"));
		appr.setDeparture(rsAppr1.getString("mdestination"));
		appr.setTravelmode(rsAppr1.getString("mtravelmode"));
		appr.setTraveltype(rsAppr1.getString("mtraveltype"));
		appr.setRemarks(rsAppr1.getString("mremarks"));
		appList1.add(appr);*/
		String d[]=rsAppr1.getString("plan_date").split("-");
		String dateString = d[2]+"/"+d[1]+"/"+d[0];
		
		
		 PdfPCell perguestv = new PdfPCell(new Paragraph(dateString,smallfont));			  
		 tablereq8.addCell(perguestv);
		  PdfPCell perguestcv = new PdfPCell(new Paragraph(rsAppr1.getString("morigin"),smallfont));			  
		  tablereq8.addCell(perguestcv);
		  PdfPCell perguestgv = new PdfPCell(new Paragraph(rsAppr1.getString("mdestination"),smallfont));			  
		  tablereq8.addCell(perguestgv);
		  PdfPCell perguestcav = new PdfPCell(new Paragraph(rsAppr1.getString("mtravelmode"),smallfont));			  
		  tablereq8.addCell(perguestcav);      
		  PdfPCell perguestcaemv = new PdfPCell(new Paragraph(rsAppr1.getString("mtraveltype"),smallfont));			  
		  tablereq8.addCell(perguestcaemv);
		  PdfPCell perguestcaempasv = new PdfPCell(new Paragraph(rsAppr1.getString("mremarks"),smallfont));			  
		  tablereq8.addCell(perguestcaempasv);
		  
		 	  
	       
	}
}
	 catch (SQLException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}
         document.add(tablereq8);
          
			 document.close();
		      writer.close();
			
		} catch (FileNotFoundException | DocumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		requestForm.setFileFullPath("/EMicro Files/ESS/Travel Request/PDF/TR_"+reqno+".pdf");
		
		requestForm.setReqStatus("pdf");
		return mapping.findForward("mytravellist");
		}
	
	
	
	
	public ActionForward compSelectedRequestToApprove(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		ApprovalsForm pendAppForm = (ApprovalsForm) form;
		String reqId = request.getParameter("reqId");
		pendAppForm.setRequestNo(reqId);
		String reqType = pendAppForm.getReqRequstType();
		pendAppForm.setRequestType(reqType);
		HttpSession session = request.getSession();
		UserInfo user = (UserInfo) session.getAttribute("user");
		if (user == null) {
			request.setAttribute("message",
					"Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		String scount = Integer.toString(pendAppForm.getStartRecord());

		int totalRecords = pendAppForm.getTotalRecords();// 21
		int startRecord = pendAppForm.getStartRecord();// 11
		int endRecord = pendAppForm.getEndRecord();
		String filterBy = pendAppForm.getSelectedFilter();
		EssDao ad = new EssDao();
		pendAppForm.setTotalRecords(totalRecords);
		pendAppForm.setStartRecord(startRecord);
		pendAppForm.setEndRecord(endRecord);
		pendAppForm.setSelectedFilter(filterBy);
		if (reqId == null && reqType == null) {
			reqId = pendAppForm.getRequestNo();
			reqType = pendAppForm.getRequestType();
		}
		int j = 1;
		int reqby = 0;
		LinkedList comp = new LinkedList();
		int requesterNo = Integer.parseInt(request.getParameter("reqId"));
		String getcomoff = "select datename(weekday,FromDate) as weekday,c.*,e.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT,COMP_OT_TYPE.Reason as compreason from COMP_OT c left outer join COMP_OT_TYPE on COMP_OT_TYPE.id=c.Comp_type,emp_official_info e,DEPARTMENT dept,DESIGNATION desg where Req_no='"
				+ requesterNo
				+ "' and e.PERNR=c.Pernr and dept.DPTID=e.DPTID and desg.DSGID=e.DSGID";
		ResultSet a = ad.selectQuery(getcomoff);
	
		try {
			while (a.next()) {

				LeaveForm l = new LeaveForm();
				pendAppForm.setStartDate(EMicroUtils.display(a
						.getDate("FromDate"))+", "+a.getString("weekday"));
				pendAppForm
						.setEndDate(EMicroUtils.display(a.getDate("ToDate")));
				pendAppForm.setReason(a.getString("Reason"));
				reqby = a.getInt("RequestedBy");
				l.setSlmindur(j);
				l.setEmployeeNumber(Integer.toString(a.getInt("Pernr")));
				l.setEmployeeName(a.getString("EMP_FULLNAME"));
				l.setDepartment(a.getString("DPTSTXT"));
				l.setDesignation(a.getString("DSGSTXT"));
				l.setNofhrs(a.getString("NoHRS"));
				String app = a.getString("Applicabale");
				if (app.equalsIgnoreCase("BS"))
					app = "Before Shift Start Time";
				if (app.equalsIgnoreCase("AS"))
					app = "After Shift End Time";
				pendAppForm.setReasonType(a.getString("compreason"));
				
				String re[]=empDet(Integer.toString(reqby));
				pendAppForm.setEmployeeno(Integer.toString(reqby));
				pendAppForm.setEmployeeName(re[0]);
			    pendAppForm.setLocationId(re[1]);
				pendAppForm.setDepartment(re[2]);
				pendAppForm.setDesignation(re[3]); 
				pendAppForm.setDateofBirth(re[4]);
				
				l.setShift(app);
				++j;
				comp.add(l);

			}
		} catch (SQLException e) {

			e.printStackTrace();
		}
		request.setAttribute("comp", comp);

		if (filterBy.equalsIgnoreCase("Pending")) {

			request.setAttribute("approveButton", "approveButton");
			request.setAttribute("rejectButton", "rejectButton");
		}

		// approver
		
	
		// plant
		String app = "";
		// PLANT HEAD
		

		
		if (filterBy.equalsIgnoreCase("Pending")) {
			app = "select a.*,e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from All_Request a,emp_official_info e,DEPARTMENT dep,DESIGNATION desg where Req_Type='Comp-Off/OT' and a.Req_Id='"
					+ requesterNo
					+ "' and e.PERNR=a.Pending_Approver and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID "
					+ "union "
					 +"select a.*,e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from All_Request a,emp_official_info e,DEPARTMENT dep,DESIGNATION desg where Req_Type='Comp-Off/OT' and a.Req_Id='"
						+ requesterNo
						+ "' and e.PERNR=a.Actual_Approver and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID ";

		} else {
			app = "select a.*,e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from All_Request a,emp_official_info e,DEPARTMENT dep,DESIGNATION desg where  Req_Type='Comp-Off/OT' and a.Req_Id='"
					+ requesterNo
					+ "' and e.PERNR=a.Actual_Approver and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID ";
				

		}
		List appList = new LinkedList();
		ResultSet rsAppr = ad.selectQuery(app);
		String duplicate="";
		try {
			while (rsAppr.next()) {
				ApprovalsForm appr = new ApprovalsForm();
				appr.setApprover(rsAppr.getString("EMP_FULLNAME"));
				appr.setDesignation(rsAppr.getString("DSGSTXT"));
				appr.setApproveStatus(rsAppr.getString("Req_Status"));
				String approvaStatus = rsAppr.getString("Req_Status");
				if (approvaStatus.equals("Pending")) {
					appr.setApproveDate("");
					appr.setComments("");
				}
				if (approvaStatus.equals("Approved")
						|| approvaStatus.equals("Completed")) {
					appr.setApproveDate(rsAppr.getString("approved_date"));
					appr.setComments(rsAppr.getString("Comments"));
				}
				if (approvaStatus.equals("Rejected")
						|| approvaStatus.equals("Cancelled")) {
					appr.setApproveDate(rsAppr.getString("rejected_date"));
					appr.setComments(rsAppr.getString("Comments"));
				}
				if(duplicate!=null)
				if(!duplicate.equalsIgnoreCase(rsAppr.getString("approved_date")))
					appList.add(appr);
					duplicate=rsAppr.getString("approved_date");
			}
			request.setAttribute("appList", appList);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return mapping.findForward("Compoff");
	}
	
	
	
	public ActionForward statusChangeTravelRequest(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		

		
		
		ApprovalsForm statusForm = (ApprovalsForm) form;
		String rqDate = statusForm.getRequestDate();
		String rqName = statusForm.getRequestername();
		String reqId = statusForm.getRequestNo();
		String reqType = statusForm.getReqRequstType();
		statusForm.setRequestType(reqType);
		HttpSession session = request.getSession();
		UserInfo user = (UserInfo) session.getAttribute("user");
		EssDao ad = new EssDao();
		statusForm.setRequestType(reqType);
		String reqStatus = request.getParameter("status");
		String filterBy = statusForm.getSelectedFilter();
		Date dNow = new Date();
		SimpleDateFormat ft = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
		String dateNow = ft.format(dNow);
		if (user == null) {
			request.setAttribute("message",
					"Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		statusForm.setRequestType(reqType);
		String locId = "";
		String floor = "";
		String room = "";
		String requesterID = "";
		String reqNo = statusForm.getRequestNo();
		String submit_date="";
		//
		if (reqStatus.equalsIgnoreCase("Approve")) {
			
			String updateStatus = "update All_Request set Req_Status='Approved',Comments='"
					+ statusForm.getComments()
					+ "',Last_Approver=Pending_Approver,"
					+ "Pending_Approver='',Approved_Persons=Pending_Approver,approved_date='"
					+ dateNow
					+ "',Actual_Approver='"
					+ user.getEmployeeNo()
					+ "' where Req_Id='"
					+ reqId
					+ "' and Req_Type='Travel' and Req_Status='Pending'";
			int saveStatus = 0;
			saveStatus = ad.SqlExecuteUpdate(updateStatus);
			
			String tempinsert="insert into Travel_Request_History (Req_Id, Req_Type,Req_date, Requester_Name, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,Actual_Approver,approved_date,Role) values (";
			tempinsert = tempinsert + "'"+reqId+"','Travel','"+rqDate+"','"+rqName+"','Approved','','','','"+rqName+"','"+statusForm.getComments()+"','"+user.getEmployeeNo()+"','"+dateNow+"','Approver')";
			 int i11=ad.SqlExecuteUpdate(tempinsert);
			 
			 String depart ="";
			 String returnon="";
			String purpose="";
			String reqDate="";
			String requesterName="";
			String Travel_for="";
			
			 String TR = "SELECT * from travel_desk where reqNo ='"+reqId+"'";
			 ResultSet rr  =ad.selectQuery(TR);
			 try {
				while(rr.next())
				 {
					 depart=rr.getString("Depart_On");
					 returnon=rr.getString("Return_On");
					 purpose= rr.getString("purposetext");
					 reqDate=rr.getString("Req_date");
					 requesterName=rr.getString("PERNR");
					 Travel_for=rr.getString("Travel_for");
					 
					 
				 }
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			 
			
			if (saveStatus > 0) {
				statusForm.setMessage(" Travel Request Approved Successfully");
			
				String uu="update Travel_Desk set Req_status='Approved',Approved_date=getdate(),Pending_Approver='No',Last_Approver='"+user.getFirstName()+"' where reqNo='"+reqId+"'";
				int rewer = ad.SqlExecuteUpdate(uu);
				
				if(Travel_for.equalsIgnoreCase("Self"))
				{
				if(returnon!="")
				{
					String saveOnDuty1="insert into OnDuty_details(request_no,user_id,onDuty_Type,start_date,end_date,OnDuty_status," +
							"record_status,documents,submit_date,reason,firstname,Approver_id,Approver_Status,Forwarded_emp_id,Last_approver,Pending_approver,location,startTime,endTime,InTime,OutTime,travel_no) " +
							"values((select max(request_no)+1 from onduty_details) ,'"+requesterName+"','Tour','"+depart+"','"+returnon+"','0'," +
									"'Submited','.','"+reqDate+"','"+purpose+"','"+requesterName+"','','In Process','','No','','','09:00AM','06:00PM','','','"+reqId+"')";
							int i1=0;
							i1=ad.SqlExecuteUpdate(saveOnDuty1);
				}
				else
				{
					String saveOnDuty1="insert into OnDuty_details(request_no,user_id,onDuty_Type,start_date,end_date,OnDuty_status," +
							"record_status,documents,submit_date,reason,firstname,Approver_id,Approver_Status,Forwarded_emp_id,Last_approver,Pending_approver,location,startTime,endTime,InTime,OutTime,travel_no) " +
							"values((select max(request_no)+1 from onduty_details) ,'"+requesterName+"','Tour','"+depart+"','"+depart+"','0'," +
									"'Submited','.','"+reqDate+"','"+purpose+"','"+requesterName+"','','In Process','','No','','','09:00AM','06:00PM','','','"+reqId+"')";
							int i1=0;
							i1=ad.SqlExecuteUpdate(saveOnDuty1);
				}
				
				String updateSql= "update OnDuty_details set Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',OnDuty_status='1',Approver_Status='Approved',approved_date='"+dateNow+"',rejected_date='',comments='"+statusForm.getRemark()+"' where travel_no='"+reqId+"'";
				int recordChange=ad.SqlExecuteUpdate(updateSql);	
				}
				
				EMailer email=new EMailer();
				
				///hgdikshgdskgdshgds
				
				String ty="select * from travel_desk, travel_desk_rep "
						+ "where travel_desk.travel_desk_type= travel_desk_rep.name and travel_desk.reqno='"+reqId+"'  ";
				ResultSet n=ad.selectQuery(ty);
				try {
					while(n.next())
					{
					 /*int j = email.sendMailToApprover(request, n.getString("approver"),reqId,"Travel Desk");*/
					 int k = email.sendMailToAccepter(request, n.getString("rep"),reqId,"Travel Desk");
					}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				///submit to travel desk approvers
			}
			
		}
		else if(reqStatus.equalsIgnoreCase("Reject"))
		{
			String updateStatus = "update All_Request set Req_Status='Rejected',Comments='"
					+ statusForm.getComments()
					+ "',Last_Approver=Pending_Approver,"
					+ "Pending_Approver='',Approved_Persons=Pending_Approver,rejected_date='"
					+ dateNow
					+ "',Actual_Approver='"
					+ user.getEmployeeNo()
					+ "' where Req_Id='"
					+ reqId
					+ "' and Req_Type='Travel' and Req_Status='Pending'";
			int saveStatus = 0;
			saveStatus = ad.SqlExecuteUpdate(updateStatus);
			
			String tempinsert="insert into Travel_Request_History (Req_Id, Req_Type,Req_date, Requester_Name, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,Actual_Approver,rejected_date,Role) values (";
			tempinsert = tempinsert + "'"+reqId+"','Travel','"+rqDate+"','"+rqName+"','Rejected','','','','"+rqName+"','"+statusForm.getComments()+"','"+user.getEmployeeNo()+"','"+dateNow+"','Approver')";
			 int i11=ad.SqlExecuteUpdate(tempinsert);
			 
			 
			if (saveStatus > 0) {statusForm.setMessage(" Travel Request Rejected Successfully");
			String uu="update Travel_Desk set Req_status='Rejected',Approved_date=getdate(),Pending_Approver='No',Last_Approver='"+user.getFirstName()+"' where reqNo='"+reqId+"'";
			
			int rewer = ad.SqlExecuteUpdate(uu);
			
			/*String updateSql= "update OnDuty_details set Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',OnDuty_status='2',Approver_Status='Rejected',approved_date='',rejected_date='"+dateNow+"',comments='"+statusForm.getRemark()+"' where travel_no='"+reqId+"'";
			int recordChange=ad.SqlExecuteUpdate(updateSql);*/
			
			}
		}
		else
		{

			
			String updateStatus = "update All_Request set Req_Status='Reverted',Comments='"
					+ statusForm.getComments()
					+ "',Last_Approver='',"
					+ "Pending_Approver='',reverted_by=Pending_Approver,reverted_on='"
					+ dateNow
					+ "',Actual_Approver='"
					+ user.getEmployeeNo()
					+ "' where Req_Id='"
					+ reqId
					+ "' and Req_Type='Travel' and Req_Status='Pending'";
			int saveStatus = 0;
			saveStatus = ad.SqlExecuteUpdate(updateStatus);
			
			String tempinsert="insert into Travel_Request_History (Req_Id, Req_Type,Req_date, Requester_Name, Req_Status, Last_Approver, Pending_Approver,reverted_by,Requester_Id,Comments,Actual_Approver,reverted_on,Role) values (";
			tempinsert = tempinsert + "'"+reqId+"','Travel','"+rqDate+"','"+rqName+"','Reverted','','','','"+rqName+"','"+statusForm.getComments()+"','"+user.getEmployeeNo()+"','"+dateNow+"','Approver')";
			 int i11=ad.SqlExecuteUpdate(tempinsert);
			 
			 
			if (saveStatus > 0) {
				statusForm.setMessage(" Travel Request Reverted Successfully");
			
				String uu="update Travel_Desk set Req_status='Reverted',reverted_on=getdate(),Pending_Approver='No',Last_Approver='',reverted_by='"+user.getEmployeeNo()+"' where reqNo='"+reqId+"'";
				int rewer = ad.SqlExecuteUpdate(uu);
				
				/*
				String updateSql= "update OnDuty_details set Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',OnDuty_status='1',Approver_Status='Approved',approved_date='"+dateNow+"',rejected_date='',comments='"+statusForm.getRemark()+"' where travel_no='"+reqId+"'";
				int recordChange=ad.SqlExecuteUpdate(updateSql);	*/
				
				
				EMailer email=new EMailer();
				
				///hgdikshgdskgdshgds
				
				/*String ty="select * from travel_desk, travel_desk_rep "
						+ "where travel_desk.travel_desk_type= travel_desk_rep.name and travel_desk.reqno='"+reqId+"'  ";
				ResultSet n=ad.selectQuery(ty);
				try {
					while(n.next())
					{
					 int j = email.sendMailToApprover(request, n.getString("approver"),reqId,"Travel Desk");
					 int k = email.sendMailToAccepter(request, n.getString("rep"),reqId,"Travel Desk");
					}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}*/
				///submit to travel desk approvers
			}
			
		
		}
		ArrayList travel=new ArrayList();
		ArrayList emplist=new ArrayList();
		ArrayList city=new ArrayList();

		String lis="select CONVERT(varchar(10),Req_date,103)+' '+ CONVERT(varchar(5),Req_date,108) as Created_date1,"
				+ "CONVERT(varchar(10),Depart_On,103)  as departon,"
				+ "CONVERT(varchar(10),Return_On,103)  as returnon,* from Travel_Desk where reqNo='"+reqId+"' ";
		ResultSet ff=ad.selectQuery(lis);
		try {
			if(ff.next())
			{
				TravelRequestForm t=new TravelRequestForm();
				
				String re[]=empDet(Integer.toString(ff.getInt("pernr")));
				
				
				t.setEmployeeno(user.getEmployeeNo());
				t.setEmployeeName(re[0]);
				t.setLocationId(re[1]);
				t.setDepartment(re[2]);
				t.setDesignation(re[3]); 
				t.setUserAge(re[5]);
				t.setUsermailId(re[6]);
				t.setUserGender(re[7]);
				
				
			
			
				
				String pe[]=empPERDet(Integer.toString(ff.getInt("pernr")));

				t.setUsermobno(pe[0]);
				t.setUserpassportno(pe[1]);
				t.setUserpassportplace(pe[2]);
				t.setUserPersonalmailId(pe[5]);
				
				if(!pe[3].contains("1900"))
					t.setUserpassportissuedate(pe[3]); 
					else
				    t.setUserpassportissuedate(""); 
					
					if(!pe[4].contains("1900"))
					t.setUserpassportexpirydate(pe[4]); 
					else
				    t.setUserpassportexpirydate(""); 
					
			
				t.setRequestNumber(ff.getInt("reqNo"));
				t.setReqType(ff.getString("Req_type"));
				t.setTypeOfTravel(ff.getString("Type_of_travel"));
				t.setTravelFor(ff.getString("Travel_for"));
				t.setTravelRequestFor(ff.getString("Travel_Request_for"));
				t.setModeOfTravel(ff.getString("Mode_of_travel"));
				t.setFromPlace(ff.getString("From_place"));
				t.setDepartOn(ff.getString("departon"));
				t.setDepartTime(ff.getString("Preferred_depart_time"));
				t.setReturnTime(ff.getString("Preferred_return_time"));	
				t.setDepartRemarks(ff.getString("Depart_Time_remarks"));
				t.setReturnRemarks(ff.getString("Return_Time_remarks"));
				t.setToPlace(ff.getString("To_place"));
                t.setVia(ff.getString("via"));
                t.setRemarks(ff.getString("Remarks"));
                t.setPurposeOfVisit(ff.getString("Purpose"));
                t.setReturnOn(ff.getString("returnon"));
                t.setTravel_Adult(ff.getString("Travel_Adult"));
                t.setTravel_Child(ff.getString("Travel_Child"));
                t.setTravel_Infant(ff.getString("travel_Infant"));
                t.setPurposetext(ff.getString("purposetext"));
                t.setTravel_Days(ff.getString("travel_Days"));
                t.setAirline_Pref(ff.getString("airline_Pref"));
                t.setAirline_Just(ff.getString("airline_Just"));
                t.setSpon_div(ff.getString("spon_div"));
                t.setBud_code(ff.getString("bud_code"));
                t.setEst_trip_cose(ff.getString("est_trip_cose"));
                t.setHotel_Res(ff.getString("hotel_Res"));
                t.setOnduty_Req(ff.getString("onduty_Req"));
                t.setRent_Car(ff.getString("rent_Car"));
                t.setPickup_Details(ff.getString("pickup_Details"));
                t.setDrop_Details(ff.getString("drop_Details"));
                t.setTrip_Advance(ff.getString("trip_Advance"));
                t.setTrip_Amt(ff.getString("trip_Amt"));
                t.setTrip_Currency(ff.getString("trip_Currency"));
                t.setTrip_From_Date(ff.getString("trip_From_Date"));
                t.setTrip_To_Date(ff.getString("trip_To_Date"));
                t.setTrip_From_Time(ff.getString("trip_From_Time"));
                t.setTrip_To_time(ff.getString("trip_To_time"));
                t.setTrip_Priority(ff.getString("trip_Priority"));
                t.setPurposetype(ff.getString("purposetype"));
                t.setTravelmode(ff.getString("travelmode"));
                t.setTraveltype(ff.getString("Type_of_travel"));
                t.setService_class(ff.getString("service_class"));
                t.setReqDate(ff.getString("Created_date1"));
                t.setFileFullPath(ff.getString("path"));
                t.setTravel_desk_type(Empname(ff.getString("travel_desk_type")));
                
                t.setId(ff.getInt("id"));
                
                
                
                String his="select CONVERT(varchar(10),Date_of_issue,103)  as Date_of_issue1,CONVERT(varchar(10),Date_of_expiry,103)  as Date_of_expiry1,CONVERT(varchar(10),departon,103)  as departon,"
				+ "CONVERT(varchar(10),returnon,103)  as returnon,* from"
                		+ " Travel_Desk_Travellers where req_id='"+t.getId()+"' order by id" ;
                ResultSet b=ad.selectQuery(his);
             
        		try {
        			while(b.next())
        			{
        					TravelRequestForm emp=new TravelRequestForm();
        					String ere[]=empDet(Integer.toString(b.getInt("PERNR")));
        					emp.setGuest_pernr(Integer.toString(b.getInt("PERNR")));
        					emp.setEmployeeName(ere[0]);
        					emp.setLocationId(ere[1]);
        					emp.setDepartment(ere[2]);
        					emp.setDesignation(ere[3]); 
        					emp.setUserAge(ere[5]);
        					emp.setUserGender(ere[7]);       
        					
        					

        								
        					
        					emp.setGuest_Type(b.getString("Req_type"));
        					emp.setPassportno(b.getString("Passport_no"));
        					emp.setPassportplace(b.getString("Place_issue"));
        					emp.setPassportexpirydate(b.getString("Date_of_expiry"));
        					emp.setGuestName(b.getString("Name_of_guest"));
        					emp.setGuestContactNo(b.getString("Contact_guest"));
        					emp.setGuest_Company(b.getString("guest_Company"));
        					emp.setGuestAge(b.getString("Age_guest"));
        					emp.setGender(b.getString("Gender_guest"));
        					emp.setEmail_Guest(b.getString("Email_guest"));
        					emp.setFileName(b.getString("file_name"));
        					emp.setFileFullPath(b.getString("path"));
        					emp.setGuest_Title(b.getString("guest_Title"));
        					emp.setGuest_Visano(b.getString("guest_Visano"));
        					emp.setGuest_DOB(b.getString("guest_DOB"));
        					emp.setGuest_Meal(b.getString("guest_Meal"));
        				    emp.setFromPlace(b.getString("fromPlace"));
        					emp.setToPlace(b.getString("toPlace"));
        					emp.setDepartOn(b.getString("departOn"));
    						emp.setReturnOn(b.getString("returnOn"));
        					emp.setId(b.getInt("id"));
        					if(!b.getString("Date_of_expiry1").contains("1900"))
        					emp.setUserpassportexpirydate(b.getString("Date_of_expiry1")); 
        					else
        			    	emp.setUserpassportexpirydate("");
        					emplist.add(emp);
        				
        			}
        		} catch (SQLException e1) {
        			// TODO Auto-generated catch block
        			e1.printStackTrace();
        		}
        		
        		
        		String his1="select * from"
                		+ " Travel_Multiple_City where req_id='"+t.getId()+"'" ;
                ResultSet b1=ad.selectQuery(his1);
             
        		try {
        			while(b1.next())
        			{
        					TravelRequestForm emp=new TravelRequestForm();
        					emp.setLocationId(b1.getString("location"));
        					emp.setAirline_Pref(b1.getString("air_Preference"));
        					emp.setTrip_From_Date(b1.getString("Arrival_date"));
        					emp.setTrip_To_time(b1.getString("Arrival_Time"));
        					emp.setTrip_To_Date(b1.getString("Departure_date"));
        					emp.setTrip_To_time(b1.getString("Departure_time"));
        					city.add(emp);
        				
        			}
        		} catch (SQLException e1) {
        			// TODO Auto-generated catch block
        			e1.printStackTrace();
        		}
                
        		
        		if(city.size()>0)
                	request.setAttribute("city", city);
        		
        		if(emplist.size()>0)
                	request.setAttribute("emplist", emplist);
               
        		travel.add(t);
			
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	

		request.setAttribute("travel", travel);
		String app = "";
		// PLANT HEAD
		/*if (filterBy.equalsIgnoreCase("Pending")) {
			app = "select a.*,e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from all_request a,emp_official_info e,DEPARTMENT dep,DESIGNATION desg where Req_Type='Travel' and a.Req_Id='"
					+ reqId
					+ "' and e.PERNR=a.Pending_Approver and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID "
					+ "union "
					 +"select a.*,e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from all_request a,emp_official_info e,DEPARTMENT dep,DESIGNATION desg where Req_Type='Travel' and a.Req_Id='"
						+ reqId
						+ "' and e.PERNR=a.Actual_Approver and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID ";

		} else {
			app = "select a.*,e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from all_request a,emp_official_info e,DEPARTMENT dep,DESIGNATION desg where  Req_Type='Travel' and a.Req_Id='"
					+ reqId
					+ "' and e.PERNR=a.Actual_Approver and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID ";
				

		}
		List appList = new LinkedList();
		ResultSet rsAppr = ad.selectQuery(app);
		String duplicate="";
		try {
			while (rsAppr.next()) {
				ApprovalsForm appr = new ApprovalsForm();
				appr.setApprover(rsAppr.getString("EMP_FULLNAME"));
				appr.setDesignation(rsAppr.getString("DSGSTXT"));
				appr.setApproveStatus(rsAppr.getString("Req_Status"));
				String approvaStatus = rsAppr.getString("Req_Status");
				if (approvaStatus.equals("Pending")) {
					appr.setApproveDate("");
					appr.setComments("");
				}
				if (approvaStatus.equals("Approved")
						|| approvaStatus.equals("Completed")) {
					appr.setApproveDate(rsAppr.getString("approved_date"));
					appr.setComments(rsAppr.getString("Comments"));
				}
				
				if (approvaStatus.equals("Reverted")
						|| approvaStatus.equals("Completed")) {
					appr.setApproveDate(rsAppr.getString("Reverted_on"));
					appr.setComments(rsAppr.getString("Comments"));
				}
				if (approvaStatus.equals("Rejected")
						|| approvaStatus.equals("Cancelled")) {
					appr.setApproveDate(rsAppr.getString("rejected_date"));
					appr.setComments(rsAppr.getString("Comments"));
				}
				if(duplicate!=null)
				if(!duplicate.equalsIgnoreCase(rsAppr.getString("approved_date")))
					appList.add(appr);
					duplicate=rsAppr.getString("approved_date");
			}
			request.setAttribute("appList", appList);
		} catch (SQLException e) {

			e.printStackTrace();
		}*/
		String getdet="select CONVERT(varchar(10),submitted_date,103)+' '+ CONVERT(varchar(5),submitted_date,108) as submitted_date,CONVERT(varchar(10),approved_date,103)+' '+ CONVERT(varchar(5),approved_date,108) as approved_date,CONVERT(varchar(10),Reverted_on,103)+' '+ CONVERT(varchar(5),Reverted_on,108) as Reverted_on,CONVERT(varchar(10),rejected_date,103)+' '+ CONVERT(varchar(5),rejected_date,108) as rejected_date,* from travel_request_history where req_id='"+reqId+"'";
	/*	String getdet="select * from travel_request_history where req_id='"+reqId+"'";*/
		LinkedList appList = new LinkedList();
		ResultSet rsAppr = ad.selectQuery(getdet);
		String duplicate="";
		try {
			while (rsAppr.next()) {
				ApprovalsForm appr = new ApprovalsForm();
			/*	appr.setApprover(rsAppr.getString("EMP_FULLNAME"));
				appr.setDesignation(rsAppr.getString("DSGSTXT"));*/
				appr.setRole(rsAppr.getString("Role"));
				
				String approvaStatus = rsAppr.getString("Req_Status");
				if (approvaStatus.equals("Pending")) {
					
					int emp =Integer.parseInt(rsAppr.getString("Requester_Name"));
					appr.setApproveDate("");
					appr.setComments("");
					appr.setApproveStatus("Submitted");
					
					String empx="select e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from emp_official_info e,DEPARTMENT dep,DESIGNATION desg where e.PERNR='"+emp+"' and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID";
					ResultSet rr  =ad.selectQuery(empx);
					while(rr.next())
					{
						appr.setApprover(rr.getString("EMP_FULLNAME"));
						appr.setDesignation(rr.getString("DSGSTXT"));
						appr.setApproveDate(rsAppr.getString("submitted_date"));
					}
					
					
				}
				if (approvaStatus.equals("Approved")||approvaStatus.equalsIgnoreCase("Booking Accepted")||approvaStatus.equalsIgnoreCase("Bills Updated")||approvaStatus.equalsIgnoreCase("Travel Review")
						||approvaStatus.equalsIgnoreCase("Submitted To Finance")|| approvaStatus.equalsIgnoreCase("Received By finance")|| approvaStatus.equalsIgnoreCase("Verified By finance")||approvaStatus.equals("Completed")) {
					appr.setApproveStatus(rsAppr.getString("Req_Status"));
					
					int emp =Integer.parseInt(rsAppr.getString("Actual_Approver"));
					appr.setApproveDate(rsAppr.getString("approved_date"));
					appr.setComments(rsAppr.getString("Comments"));
					String empx="select e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from emp_official_info e,DEPARTMENT dep,DESIGNATION desg where e.PERNR='"+emp+"' and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID";
					ResultSet rr  =ad.selectQuery(empx);
					while(rr.next())
					{
						appr.setApprover(rr.getString("EMP_FULLNAME"));
						appr.setDesignation(rr.getString("DSGSTXT"));
						
					}
				}
				
				if (approvaStatus.equals("Reverted")
						|| approvaStatus.equals("Completed")) {
					appr.setApproveStatus(rsAppr.getString("Req_Status"));
					int emp =Integer.parseInt(rsAppr.getString("Actual_Approver"));
					appr.setApproveDate(rsAppr.getString("Reverted_on"));
					appr.setComments(rsAppr.getString("Comments"));
					
					String empx="select e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from emp_official_info e,DEPARTMENT dep,DESIGNATION desg where e.PERNR='"+emp+"' and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID";
					ResultSet rr  =ad.selectQuery(empx);
					while(rr.next())
					{
						appr.setApprover(rr.getString("EMP_FULLNAME"));
						appr.setDesignation(rr.getString("DSGSTXT"));
						
					}
				}
				if (approvaStatus.equals("Rejected")
						|| approvaStatus.equals("Cancelled")) {
					appr.setApproveStatus(rsAppr.getString("Req_Status"));
					int emp =Integer.parseInt(rsAppr.getString("Actual_Approver"));
					appr.setApproveDate(rsAppr.getString("rejected_date"));
					appr.setComments(rsAppr.getString("Comments"));
					String empx="select e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from emp_official_info e,DEPARTMENT dep,DESIGNATION desg where e.PERNR='"+emp+"'";
					ResultSet rr  =ad.selectQuery(empx);
					while(rr.next())
					{
						appr.setApprover(rr.getString("EMP_FULLNAME"));
						appr.setDesignation(rr.getString("DSGSTXT"));
						
					}
				}
				/*if(duplicate!=null)
				if(!duplicate.equalsIgnoreCase(rsAppr.getString("approved_date")))*/
					appList.add(appr);
					duplicate=rsAppr.getString("approved_date");
			}
			request.setAttribute("appList", appList);
		} catch (SQLException e) {

			e.printStackTrace();
		}
		return mapping.findForward("travelRequest");
	}
	
	
	
	public ActionForward statusChangeOT(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

		ApprovalsForm statusForm = (ApprovalsForm) form;
		String reqId = statusForm.getRequestNo();
		String reqType = statusForm.getReqRequstType();
		statusForm.setRequestType(reqType);
		HttpSession session = request.getSession();
		UserInfo user = (UserInfo) session.getAttribute("user");
		EssDao ad = new EssDao();
		statusForm.setRequestType(reqType);
		String reqStatus = request.getParameter("status");
		String filterBy = statusForm.getSelectedFilter();
		Date dNow = new Date();
		SimpleDateFormat ft = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
		String dateNow = ft.format(dNow);
		if (user == null) {
			request.setAttribute("message",
					"Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		statusForm.setRequestType(reqType);
		String locId = "";
		String floor = "";
		String room = "";
		String requesterID = "";
		String reqNo = statusForm.getRequestNo();
		String submit_date="";
		//
		if (reqStatus.equalsIgnoreCase("Approve")) {
		
			String updateStatus = "update All_Request set Req_Status='Approved',Comments='"
					+ statusForm.getRemark()
					+ "',Last_Approver=Pending_Approver,"
					+ "Pending_Approver='',Approved_Persons=Pending_Approver,approved_date='"
					+ dateNow
					+ "',Actual_Approver='"
					+ user.getEmployeeNo()
					+ "' where Req_Id='"
					+ reqId
					+ "' and Req_Type='OverTime' and Req_Status='Pending'";
			int saveStatus = 0;
			saveStatus = ad.SqlExecuteUpdate(updateStatus);
			if (saveStatus > 0) {statusForm.setMessage("Request Approved Successfully");
			String plant="";
			
			int reqby = 0;
			LinkedList comp = new LinkedList();
			int requesterNo = Integer.parseInt(request.getParameter("reqId"));
			String getcomoff = "select c.*,e.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT from OVER_TIME_DETAILS c,emp_official_info e,DEPARTMENT dept,DESIGNATION desg where Req_no='"
					+ reqId
					+ "' and e.PERNR=c.Pernr and dept.DPTID=e.DPTID and desg.DSGID=e.DSGID";
			ResultSet a = ad.selectQuery(getcomoff);
			try {
				while (a.next()) {

				
					reqby = a.getInt("RequestedBy");
					submit_date=a.getString("RequestedDate").substring(0, 10);					
			
				

				}
			} catch (SQLException e) {

				e.printStackTrace();
			}
			

			// approver
			
		
			String userloc="";
			String planthead="";
			
			String loc="Select locid from emp_official_info where pernr='"+reqby+"'";
			ResultSet as=ad.selectQuery(loc);
			try {
				if(as.next())
				{
					userloc=as.getString("locid");
				}
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
			if(!userloc.equalsIgnoreCase("ML01"))
			{
			 plant = "select p.*,e.EMP_FULLNAME,ds.DSGSTXT,de.DPTSTXT from PLANT_HEAD_COMP_OT p,emp_official_info e,DESIGNATION ds,DEPARTMENT de where Plant='"+userloc+"'"
			 		+ " and e.PERNR=p.PERNR and e.DSGID=ds.DSGID and e.DPTID=de.DPTID";
			
			}
			else
			{
				
				 plant = "select p.*,e.EMP_FULLNAME,ds.DSGSTXT,de.DPTSTXT from PLANT_HEAD_COMP_OT p,emp_official_info e,DESIGNATION ds,DEPARTMENT de where Plant='"+userloc+"'"
				 		+ " and e.PERNR=p.PERNR and e.DSGID=ds.DSGID and e.DPTID=de.DPTID  and Pay_grp=(select PAY_GROUP from emp_official_info where pernr='"+reqby+"')";
			}
			ResultSet rsit = ad.selectQuery(plant);
			
			
			
			try {
				if (rsit.next()) {
		
					planthead=rsit.getString("PERNR");
				 
				}
				else{
					
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			if(planthead.equalsIgnoreCase(user.getEmployeeNo()))
			{
			String updatemain = "update OVER_TIME_DETAILS set ApprvrStatus='Approved',ApprvdDate='"
					+ dateNow + "',Pending_approver='No',Last_approver='"+Empname(user.getEmployeeNo())+"' where Req_no='" + reqId + "'";
			int upStatus = 0;
			upStatus = ad.SqlExecuteUpdate(updatemain);
			
			
	
			}
			else
			{
				String insert = "insert into All_Request(Req_Id,Req_Type,Requester_Name,Req_Date,Req_Status,Last_Approver,Pending_Approver,Approved_Persons,Requester_Id) values('"
						+ reqId
						+ "','OverTime','"
						+ reqby
						+ "','"
						+ submit_date
						+ "','Pending','','"
						+ planthead
						+ "','','"
						+ reqby + "')";
				int j = ad.SqlExecuteUpdate(insert);
				
				String update="update OVER_TIME_DETAILS set Pending_approver='"+Empname(planthead)+"',Last_approver='"+Empname(user.getEmployeeNo())+"' where Req_no='"+reqId+"'";
				int h = ad.SqlExecuteUpdate(update);
			}}
		}
		if (reqStatus.equalsIgnoreCase("Reject")) {
		
			
			String updateStatus = "update All_Request set Req_Status='Rejected',Comments='"
					+ statusForm.getRemark()
					+ "',Last_Approver=Pending_Approver,"
					+ "Pending_Approver='',Approved_Persons=Pending_Approver,rejected_date='"
					+ dateNow
					+ "',Actual_Approver='"
					+ user.getEmployeeNo()
					+ "' where Req_Id='"
					+ reqId
					+ "' and Req_Type='OverTime' and Req_Status='Pending'";
			int saveStatus = 0;
			saveStatus = ad.SqlExecuteUpdate(updateStatus);
			if (saveStatus > 0) {
				statusForm.setMessage("Request Rejected Successfully");
				String updatemain = "update OVER_TIME_DETAILS set ApprvrStatus='Rejected',ApprvdDate='"
						+ dateNow + "' where Req_no='" + reqId + "'";
				int upStatus = 0;
				upStatus = ad.SqlExecuteUpdate(updatemain);
			}
		}

		// set Request Details
		String reqFromDate = "";
		String reqToDate = "";
		int j = 1;
		int reqby = 0;
		LinkedList OT = new LinkedList();
		int requesterNo = Integer.parseInt(reqId);
		String getcomoff = "select datename(weekday,FromDate) as weekday,c.*,e.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT from OVER_TIME_DETAILS c,emp_official_info e,DEPARTMENT dept,DESIGNATION desg where Req_no='"
				+ requesterNo
				+ "' and e.PERNR=c.Pernr and dept.DPTID=e.DPTID and desg.DSGID=e.DSGID";
		ResultSet a = ad.selectQuery(getcomoff);
		try {
			while (a.next()) {

				LeaveForm l = new LeaveForm();
				statusForm.setStartDate(EMicroUtils.display(a
						.getDate("FromDate"))+", "+a.getString("weekday"));
				statusForm
						.setEndDate(EMicroUtils.display(a.getDate("ToDate")));
				statusForm.setReason(a.getString("Reason"));
				reqby = a.getInt("RequestedBy");
				l.setSlmindur(j);
				l.setEmployeeNumber(Integer.toString(a.getInt("Pernr")));
				l.setEmployeeName(a.getString("EMP_FULLNAME"));
				l.setDepartment(a.getString("DPTSTXT"));
				l.setDesignation(a.getString("DSGSTXT"));
				l.setNofhrs(a.getString("NoHRS"));
				
				String re[]=empDet(Integer.toString(reqby));
				statusForm.setEmployeeno(Integer.toString(reqby));
				statusForm.setEmployeeName(re[0]);
			    statusForm.setLocationId(re[1]);
				statusForm.setDepartment(re[2]);
				statusForm.setDesignation(re[3]); 
				statusForm.setDateofBirth(re[4]);
				
				++j;
				OT.add(l);

			}
		} catch (SQLException e) {

			e.printStackTrace();
		}
		request.setAttribute("OT", OT);
		
		
		
		String app = "";
		// PLANT HEAD
		if (filterBy.equalsIgnoreCase("Pending")) {
			app = "select a.*,e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from All_Request a,emp_official_info e,DEPARTMENT dep,DESIGNATION desg where Req_Type='OverTime' and a.Req_Id='"
					+ requesterNo
					+ "' and e.PERNR=a.Pending_Approver and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID "
					+ "union "
					 +"select a.*,e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from All_Request a,emp_official_info e,DEPARTMENT dep,DESIGNATION desg where Req_Type='OverTime' and a.Req_Id='"
						+ requesterNo
						+ "' and e.PERNR=a.Actual_Approver and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID ";

		} else {
			app = "select a.*,e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from All_Request a,emp_official_info e,DEPARTMENT dep,DESIGNATION desg where  Req_Type='OverTime' and a.Req_Id='"
					+ requesterNo
					+ "' and e.PERNR=a.Actual_Approver and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID ";
				

		}
		List appList = new LinkedList();
		ResultSet rsAppr = ad.selectQuery(app);
		String duplicate="";
		try {
			while (rsAppr.next()) {
				ApprovalsForm appr = new ApprovalsForm();
				appr.setApprover(rsAppr.getString("EMP_FULLNAME"));
				appr.setDesignation(rsAppr.getString("DSGSTXT"));
				appr.setApproveStatus(rsAppr.getString("Req_Status"));
				String approvaStatus = rsAppr.getString("Req_Status");
				if (approvaStatus.equals("Pending")) {
					appr.setApproveDate("");
					appr.setComments("");
				}
				if (approvaStatus.equals("Approved")
						|| approvaStatus.equals("Completed")) {
					appr.setApproveDate(rsAppr.getString("approved_date"));
					appr.setComments(rsAppr.getString("Comments"));
				}
				if (approvaStatus.equals("Rejected")
						|| approvaStatus.equals("Cancelled")) {
					appr.setApproveDate(rsAppr.getString("rejected_date"));
					appr.setComments(rsAppr.getString("Comments"));
				}
				if(duplicate!=null)
				if(!duplicate.equalsIgnoreCase(rsAppr.getString("approved_date")))
					appList.add(appr);
					duplicate=rsAppr.getString("approved_date");
			}
			request.setAttribute("appList", appList);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return mapping.findForward("OT");
	}
	
	
	
	
	public ActionForward statusChangeCompOff(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

		ApprovalsForm statusForm = (ApprovalsForm) form;
		String reqId = statusForm.getRequestNo();
		String reqType = statusForm.getReqRequstType();
		statusForm.setRequestType(reqType);
		HttpSession session = request.getSession();
		UserInfo user = (UserInfo) session.getAttribute("user");
		EssDao ad = new EssDao();
		statusForm.setRequestType(reqType);
		String reqStatus = request.getParameter("status");
		String filterBy = statusForm.getSelectedFilter();
		Date dNow = new Date();
		SimpleDateFormat ft = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
		String dateNow = ft.format(dNow);
		if (user == null) {
			request.setAttribute("message",
					"Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		statusForm.setRequestType(reqType);
		String locId = "";
		String floor = "";
		String room = "";
		String requesterID = "";
		String submit_date="";
		String reqNo = statusForm.getRequestNo();

		//
		if (reqStatus.equalsIgnoreCase("Approve")) {
			String updateStatus = "update All_Request set Req_Status='Approved',Comments='"
					+ statusForm.getRemark()
					+ "',Last_Approver=Pending_Approver,"
					+ "Pending_Approver='',Approved_Persons=Pending_Approver,approved_date='"
					+ dateNow
					+ "',Actual_Approver='"
					+ user.getEmployeeNo()
					+ "' where Req_Id='"
					+ reqId
					+ "' and Req_Type='Comp-Off/OT' and Req_Status='Pending'";
			int saveStatus = 0;
			saveStatus = ad.SqlExecuteUpdate(updateStatus);
			if (saveStatus > 0) {
				statusForm.setMessage("Request Approved Successfully");
				String plant="";
				
				int reqby = 0;
				LinkedList comp = new LinkedList();
				int requesterNo = Integer.parseInt(request.getParameter("reqId"));
				String getcomoff = "select c.*,e.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT from COMP_OT c,emp_official_info e,DEPARTMENT dept,DESIGNATION desg where Req_no='"
						+ reqId
						+ "' and e.PERNR=c.Pernr and dept.DPTID=e.DPTID and desg.DSGID=e.DSGID";
				ResultSet a = ad.selectQuery(getcomoff);
				try {
					while (a.next()) {

					
						reqby = a.getInt("RequestedBy");
						submit_date=a.getString("RequestedDate").substring(0, 10);					
				
					

					}
				} catch (SQLException e) {

					e.printStackTrace();
				}
				

				// approver
				
			
				String userloc="";
				String planthead="";
				
				String loc="Select locid from emp_official_info where pernr='"+reqby+"'";
				ResultSet as=ad.selectQuery(loc);
				try {
					if(as.next())
					{
						userloc=as.getString("locid");
					}
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				
				if(!userloc.equalsIgnoreCase("ML01"))
				{
				 plant = "select p.*,e.EMP_FULLNAME,ds.DSGSTXT,de.DPTSTXT from PLANT_HEAD_COMP_OT p,emp_official_info e,DESIGNATION ds,DEPARTMENT de where Plant='"+userloc+"'"
				 		+ " and e.PERNR=p.PERNR and e.DSGID=ds.DSGID and e.DPTID=de.DPTID";
				
				}
				else
				{
					
					 plant = "select p.*,e.EMP_FULLNAME,ds.DSGSTXT,de.DPTSTXT from PLANT_HEAD_COMP_OT p,emp_official_info e,DESIGNATION ds,DEPARTMENT de where Plant='"+userloc+"'"
					 		+ " and e.PERNR=p.PERNR and e.DSGID=ds.DSGID and e.DPTID=de.DPTID  and Pay_grp=(select PAY_GROUP from emp_official_info where pernr='"+reqby+"')";
				}
				ResultSet rsit = ad.selectQuery(plant);
				
				
				
				try {
					if (rsit.next()) {
			
						planthead=rsit.getString("PERNR");
					 
					}
					else{
						
					}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				if(planthead.equalsIgnoreCase(user.getEmployeeNo()))
				{
				String updatemain = "update COMP_OT set ApprvrStatus='Approved',ApprvdDate='"
						+ dateNow + "',Pending_approver='No',Last_approver='"+Empname(user.getEmployeeNo())+"' where Req_no='" + reqId + "'";
				int upStatus = 0;
				upStatus = ad.SqlExecuteUpdate(updatemain);
				
				
		
				}
				else
				{
					String insert = "insert into All_Request(Req_Id,Req_Type,Requester_Name,Req_Date,Req_Status,Last_Approver,Pending_Approver,Approved_Persons,Requester_Id) values('"
							+ reqId
							+ "','Comp-Off/OT','"
							+ reqby
							+ "','"
							+ submit_date
							+ "','Pending','No','"
							+ planthead
							+ "','No','"
							+ reqby + "')";
					int j = ad.SqlExecuteUpdate(insert);
					
					String update="update COMP_OT set Pending_approver='"+Empname(planthead)+"',Last_approver='"+Empname(user.getEmployeeNo())+"' where Req_no='"+reqId+"'";
					int h = ad.SqlExecuteUpdate(update);
				}
				
				
		/*		
				//check comp-off timinigs
				LinkedList comp=new LinkedList();
				boolean allow=false;
				String com="Select left(DATENAME (month,FromDate),3)  as monthname,day(FromDate) as day,month(FromDate) as mon,year(FromDate) as year,* from COMP_OT,emp_official_info  where Req_no='"+reqId+"' and COMP_OT.Pernr=emp_official_info.PERNR";
				ResultSet a1 = ad.selectQuery(com);
				String shifttime[]=new String[0];
				try {
					while (a1.next()) {

						LeaveForm l = new LeaveForm();
						l.setEmployeeNumber(Integer.toString(a1.getInt("Pernr")));
						l.setStartDate(a1.getString("FromDate"));
						l.setEndDate(a1.getString("ToDate"));
						l.setNofhrs(a1.getString("NoHRS"));
						l.setShift(a1.getString("Applicabale"));
						l.setLocationId(a1.getString("LOCID"));
						shifttime=getshifttimings(Integer.parseInt(a1.getString("day")), a1.getString("Pernr"), a1.getString("mon"),  a1.getString("year"));
						   String shftstart="";
						     String shftend="";
						     
						     if(shifttime.length!=0)
						     {
					          shftstart=shifttime[0].substring(0, 5);
						      shftend=shifttime[1].substring(0, 5);
						 
						     }
						     String punchtime="";
						     String intime="";
						     String outime="";
                       String flat="select left(max(a),5) as intime,left(max(b),5) as outime from (select case when In_Out='I' then day1  end  as a,case when In_Out='O' then day1  end as b from EMP_IN_OUT where Pernr='"+a1.getInt("Pernr")+"' and Month='"+a1.getString("mon")+"' and Year='"+a1.getString("year")+"' )t";
                       ResultSet rssempoffr=ad.selectQuery(flat);
                       while(rssempoffr.next())
       			    {
                    	  	   intime=rssempoffr.getString("intime");
                    	      outime=rssempoffr.getString("outime");
                  }
                       
                       String value="";
                       String table="select "+a1.getString("monthname")+" as m from "+getTableName(a1.getString("LOCID"))+" where DAY='"+a1.getString("day")+"'";
     				  ResultSet rstable=ad.selectQuery(table);
     				  while(rstable.next())
     					  
     					{
     					  
     					  value=rstable.getString("m");
     					}
     				  
                       
                       String nohrs="";
                       
                       if(value.equalsIgnoreCase("W"))
                       {
                       if(a1.getString("Applicabale").equals("BS"))
                	   {
                		    nohrs=timediff(intime, shftstart);
                		   System.out.println(nohrs);
                	   }
                       
                       if(a1.getString("Applicabale").equals("AS"))
                	   {
                		    nohrs=timediff(shftend, outime);
                		   System.out.println(nohrs);
                	   }
                       }
                       else
                       {
                    	   nohrs=timediff(intime, outime);
                		   System.out.println(nohrs);
                       }
                       
                       
                       if(a1.getString("NoHRS").equalsIgnoreCase("4"))
                       {
                        if(Integer.parseInt(nohrs)>=240)
                        {
                        	allow=true;
                        	l.setNoOfDays("0.5");
                        }
                       }
                       if(a1.getString("NoHRS").equalsIgnoreCase("8"))
                       {
                    	   if(Integer.parseInt(nohrs)>=480)
                           {
                           	allow=true;
                           	l.setNoOfDays("1");
                           }
                       }
						     
                       if(allow==true)
                       {
                    	  
       					
       					String strt=l.getStartDate();
       					String end=l.getEndDate();
       					String compaviled="";
       					
       					String insetrt="insert into COMP_OT_SAP(Calendar_Year,Employee_Number,Start_Date,End_Date,Number_of_Days,Actual_Time,From_Time,End_Time,Comp_Off_Availed_Date,Comp_Off_Balance,LapsBydate) "
       							+ "values('"+a1.getString("year")+"','"+a1.getString("Pernr")+"','"+strt+"','"+end+"','"+l.getNoOfDays()+"','"+nohrs+"','"+intime+"','"+outime+"',"
       									+ "'"+compaviled+"','"+l.getNoOfDays()+"',getdate()+30)";
       			    	 int j=ad.SqlExecuteUpdatePrmaryKeys(insetrt);
       			    	 
       			       	float comOpBal=0;
       		        	float comAvaiBal=0;
       		        	float comCloBal=0;
       		  
       		        	if(j>0)
       		        	{
       		        	///Get balance from comptable
       		        	String bal="select sum(Number_of_Days) as openbal,sum(Comp_Off_Availed_Days) as avbal,sum(Comp_Off_Balance) as clobal from COMP_OT_SAP where Employee_Number='"+a1.getString("Pernr")+"' and LapsBydate>=getdate() and Comp_Off_Balance>0";
       		       	    ResultSet ba=ad.selectQuery(bal);
       		       	 try {
       					while (ba.next ()) 
       						{
       						        comOpBal=ba.getFloat("openbal");
       								comAvaiBal=ba.getFloat("avbal");
       								comCloBal=ba.getFloat("clobal");
       						}
       				} catch (SQLException e1) {
       					// TODO Auto-generated catch block
       					e1.printStackTrace();
       				}
       		        	
       		           	 //Check comp balance availabe
       		        	

       		           	 int balpresent=0;
       		           	 String coun="select count(*) from lv_type_d where lv_empcode='"+a1.getString("Pernr")+"' and lv_typeid='6' and lv_calyear='"+a1.getString("year")+"'";
       		           	 ResultSet as=ad.selectQuery(coun);
       		           	 try {
       						while (as.next ()) 
       						{
       							
       							balpresent=as.getInt(1);
       							
       						}
       					} catch (SQLException e) {				
       						e.printStackTrace();
       					}
       		        	
       		        	 if(balpresent==0)
       		           	 {
       		       	 //insert into lv_type
       		       	 String insertinto="insert into lv_type_d(lv_typeid,lv_calyear,lv_empcode,lv_opbal,lv_availed,lv_clbal,lv_awtBal) values(6,'"+a1.getString("year")+"','"+a1.getString("Pernr")+"','"+comOpBal+"','"+comAvaiBal+"','"+comCloBal+"',0)";
       		       	  j=ad.SqlExecuteUpdatePrmaryKeys(insertinto);
       		           	 }
       		           	 
       		           	 else
       		           	 {
       		          String update="update lv_type_d set lv_opbal="+comOpBal+",lv_clbal="+comCloBal+" where lv_empcode='"+a1.getString("Pernr")+"' and lv_calyear='"+a1.getString("year")+"' and lv_typeid='6'";
       		           j=ad.SqlExecuteUpdatePrmaryKeys(update);
       		           	 }
       		        	}
       			    	 
       			    	 
                       }
                       
					
					}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}*/
				
				
				
				
				
			}
		}
		if (reqStatus.equalsIgnoreCase("Reject")) {
			String updateStatus = "update All_Request set Req_Status='Rejected',Comments='"
					+ statusForm.getRemark()
					+ "',Last_Approver=Pending_Approver,"
					+ "Pending_Approver='',Approved_Persons=Pending_Approver,rejected_date='"
					+ dateNow
					+ "',Actual_Approver='"
					+ user.getEmployeeNo()
					+ "' where Req_Id='"
					+ reqId
					+ "' and Req_Type='Comp-Off/OT' and Req_Status='Pending'";
			int saveStatus = 0;
			saveStatus = ad.SqlExecuteUpdate(updateStatus);
			if (saveStatus > 0) {
				statusForm.setMessage("Request Rejected Successfully");
				String updatemain = "update COMP_OT set ApprvrStatus='Rejected',ApprvdDate='"
						+ dateNow + "' where Req_no='" + reqId + "'";
				int upStatus = 0;
				upStatus = ad.SqlExecuteUpdate(updatemain);
			}
		}

		// set Request Details
		String reqFromDate = "";
		String reqToDate = "";
		int j = 1;
		int reqby = 0;
		LinkedList comp = new LinkedList();
		int requesterNo = Integer.parseInt(reqId);
		String getcomoff = "select datename(weekday,FromDate) as weekday,c.*,e.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT,COMP_OT_TYPE.Reason as compreason from COMP_OT c left outer join COMP_OT_TYPE on COMP_OT_TYPE.id=c.Comp_type,emp_official_info e,DEPARTMENT dept,DESIGNATION desg where Req_no='"
				+ requesterNo
				+ "' and e.PERNR=c.Pernr and dept.DPTID=e.DPTID and desg.DSGID=e.DSGID";
		ResultSet a = ad.selectQuery(getcomoff);
		try {
			while (a.next()) {

				LeaveForm l = new LeaveForm();
				statusForm.setStartDate(EMicroUtils.display(a
						.getDate("FromDate"))+", "+a.getString("weekday"));
				statusForm.setEndDate(EMicroUtils.display(a.getDate("ToDate")));
				statusForm.setReason(a.getString("Reason"));
				reqby = a.getInt("RequestedBy");
				l.setSlmindur(j);
				l.setEmployeeNumber(Integer.toString(a.getInt("Pernr")));
				l.setEmployeeName(a.getString("EMP_FULLNAME"));
				l.setDepartment(a.getString("DPTSTXT"));
				l.setDesignation(a.getString("DSGSTXT"));
				l.setNofhrs(a.getString("NoHRS"));
				String app = a.getString("Applicabale");
				if (app.equalsIgnoreCase("BS"))
					app = "Before Shift Start Time";
				if (app.equalsIgnoreCase("AS"))
					app = "After Shift End Time";

				statusForm.setReasonType(a.getString("compreason"));
				
				String re[]=empDet(Integer.toString(reqby));
				statusForm.setEmployeeno(Integer.toString(reqby));
				statusForm.setEmployeeName(re[0]);
				statusForm.setLocationId(re[1]);
				statusForm.setDepartment(re[2]);
				statusForm.setDesignation(re[3]); 
				statusForm.setDateofBirth(re[4]);

				l.setShift(app);
				++j;
				comp.add(l);

			}
		} catch (SQLException e) {

			e.printStackTrace();
		}
		request.setAttribute("comp", comp);

		String app = "";
		// PLANT HEAD
		

		
		if (filterBy.equalsIgnoreCase("Pending")) {
			app = "select a.*,e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from All_Request a,emp_official_info e,DEPARTMENT dep,DESIGNATION desg where Req_Type='Comp-Off/OT' and a.Req_Id='"
					+ requesterNo
					+ "' and e.PERNR=a.Pending_Approver and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID "
					+ "union "
					 +"select a.*,e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from All_Request a,emp_official_info e,DEPARTMENT dep,DESIGNATION desg where Req_Type='Comp-Off/OT' and a.Req_Id='"
						+ requesterNo
						+ "' and e.PERNR=a.Actual_Approver and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID ";

		} else {
			app = "select a.*,e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from All_Request a,emp_official_info e,DEPARTMENT dep,DESIGNATION desg where  Req_Type='Comp-Off/OT' and a.Req_Id='"
					+ requesterNo
					+ "' and e.PERNR=a.Actual_Approver and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID ";
				

		}
		
		List appList = new LinkedList();
		ResultSet rsAppr = ad.selectQuery(app);
		String duplicate="";
		try {
			while (rsAppr.next()) {
				ApprovalsForm appr = new ApprovalsForm();
				appr.setApprover(rsAppr.getString("EMP_FULLNAME"));
				appr.setDesignation(rsAppr.getString("DSGSTXT"));
				appr.setApproveStatus(rsAppr.getString("Req_Status"));
				String approvaStatus = rsAppr.getString("Req_Status");
				if (approvaStatus.equals("Pending")) {
					appr.setApproveDate("");
					appr.setComments("");
				}
				if (approvaStatus.equals("Approved")
						|| approvaStatus.equals("Completed")) {
					appr.setApproveDate(rsAppr.getString("approved_date"));
					appr.setComments(rsAppr.getString("Comments"));
				}
				if (approvaStatus.equals("Rejected")
						|| approvaStatus.equals("Cancelled")) {
					appr.setApproveDate(rsAppr.getString("rejected_date"));
					appr.setComments(rsAppr.getString("Comments"));
				}
				if(duplicate!=null)
				if(!duplicate.equalsIgnoreCase(rsAppr.getString("approved_date")))
					appList.add(appr);
					duplicate=rsAppr.getString("approved_date");
			}
			request.setAttribute("appList", appList);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return mapping.findForward("Compoff");
	}
	
	
	public ActionForward SapITSelectedRequestToApprove(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
	{
		String ITstatus="";
		String chkdate="";
		String chkdate1="";
		String 	forwardType="";
		String filepath2="";
		String cate="";
		LinkedList apprList=new LinkedList();
		ApprovalsForm pendAppForm=(ApprovalsForm) form;
		String reqId = request.getParameter("reqId");
		pendAppForm.setRequestNumber(reqId);
		pendAppForm.setReqRequstType("IT Sap Request");
		String reqType = pendAppForm.getReqRequstType();
		pendAppForm.setRequestType(reqType);
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		if(user==null){
			request.setAttribute("message","Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		String scount = Integer.toString(pendAppForm.getStartRecord());
		
		int totalRecords=pendAppForm.getTotalRecords();//21
		int startRecord=pendAppForm.getStartRecord();//11
		int endRecord=pendAppForm.getEndRecord();	
		String filterBy=pendAppForm.getSelectedFilter();
		
		pendAppForm.setTotalRecords(totalRecords);
		pendAppForm.setStartRecord(startRecord);
		pendAppForm.setEndRecord(endRecord);
	    pendAppForm.setSelectedFilter(filterBy);
		if(reqId==null && reqType==null){
			reqId=pendAppForm.getRequestNo();
			reqType=pendAppForm.getRequestType();
		}
		int startCount = 0;
		int endCount = 0;
		if(scount == null){
			request.setAttribute("noRecords","noRecords");
			pendAppForm.setAppMessage("Request Approved Successfully!");
		}
		if(scount != null){
			startCount=Integer.parseInt(scount);
			endCount=endRecord;
			pendAppForm.setStartRecord(startCount);
			pendAppForm.setEndRecord(endCount);
		}
		setAllCount(pendAppForm, pendAppForm.getTotalAppCount(), startCount, endCount);
		request.setAttribute("header", reqType+"For Approve");
		String tName="leave";
		setFilterType(reqType, pendAppForm);
		String uName = user.getUserName();
		UserDao adMPM=new UserDao();
		EssDao ad=new EssDao();
		String empID="";
		if(reqType.equalsIgnoreCase("IT Sap Request"))
		{
			  
			
         	String ITType="";
			String requesterdetails="Select * from IT_SAP_ISSUES where Req_No='"+reqId+"'";
			ResultSet rsLeave=ad.selectQuery(requesterdetails);
			
			String submit_date="";
			try{
			while(rsLeave.next())
			{
				String rol="";
				empID=rsLeave.getString("Emp_No");
				submit_date=rsLeave.getString("Req_date");
				String a[]=submit_date.split("-");
				submit_date=a[2]+"/"+a[1]+"/"+a[0];
				ITType=rsLeave.getString("Req_type");
				pendAppForm.setRequestName(rsLeave.getString("sap_request_type"));
				if(rsLeave.getString("sap_request_type")!=null)
				{
					if(!rsLeave.getString("sap_request_type").equalsIgnoreCase("Document Cancellation"))
					{
						 rol="select rol.role as role_manage from IT_SAP_ISSUES as sap,Role_SAP as rol where sap.ROLE=rol.id and sap.location=rol.location_id and sap.role='"+rsLeave.getString("ROLE")+"' and  sap.Req_No='"+reqId+"'";
							
						 ResultSet role1=ad.selectQuery(rol);
							while(role1.next())
							{
								pendAppForm.setRoleId(role1.getString("role_manage"));
							}
					}
					
				}
				
				if(rsLeave.getString("Sub_Category")!=null)
				{
					if(rsLeave.getString("Sub_Category").equalsIgnoreCase("Rename ID"))	
					{
						request.setAttribute("renameId", "renameId");
						pendAppForm.setOldId(rsLeave.getString("old_id"));
						pendAppForm.setNewId(rsLeave.getString("new_id"));
					}
					
				}
				if(rsLeave.getString("sap_request_type")!=null)
				{
				if(rsLeave.getString("sap_request_type").equalsIgnoreCase("SAP Roles Management"))	
				{
					cate="'ROLES'";
					request.setAttribute("role", "role");
				//	pendAppForm.setOldId(rsLeave.getString("old_id"));
				//	pendAppForm.setNewId(rsLeave.getString("new_id"));
				}
				if(rsLeave.getString("sap_request_type").equalsIgnoreCase("SAP Authorization Management"))	
				{
					 cate="'AUTH'";
					request.setAttribute("role", "role");
				//	pendAppForm.setOldId(rsLeave.getString("old_id"));
				//	pendAppForm.setNewId(rsLeave.getString("new_id"));
				}
				if(rsLeave.getString("sap_request_type").equalsIgnoreCase("SAP User Id Management"))	
				{
					 
					 cate="'PSAP','SSAP'";
					 request.setAttribute("role", "role");
				//	pendAppForm.setOldId(rsLeave.getString("old_id"));
				//	pendAppForm.setNewId(rsLeave.getString("new_id"));
				}
				if(rsLeave.getString("sap_request_type").equalsIgnoreCase("Document Cancellation"))	
				{
					 
					 cate="'DC'";
					// request.setAttribute("role", "role");
				//	pendAppForm.setOldId(rsLeave.getString("old_id"));
				//	pendAppForm.setNewId(rsLeave.getString("new_id"));
				}
				}
			/*	if(rsLeave.getString("sap_request_type").equalsIgnoreCase("Document Cancellation"))	
				{
					request.setAttribute("role", "role");
				//	pendAppForm.setOldId(rsLeave.getString("old_id"));
				//	pendAppForm.setNewId(rsLeave.getString("new_id"));
				}*/
				
			}
			
			int approverPriority=0;
			
			String getApprPriority="select Priority from Material_Approvers where Material_Type='"+ITType+"' and   ( Approver_Id ='"+user.getEmployeeNo()+"' "
			+ " and  LOCATION=(select LOCID from emp_official_info where PERNR='"+empID+"')) ";
			ResultSet rsApprPriority=ad.selectQuery(getApprPriority);
			while(rsApprPriority.next())
			{
				approverPriority=rsApprPriority.getInt("Priority");
			}
			
			//check ITHOD status
			
			String ithodstus="select Req_Status from All_request where Req_Id='"+reqId+"' and Req_type = 'IT Sap Request' and Pending_Approver = '"+user.getEmployeeNo()+"'";
			ResultSet result=ad.selectQuery(ithodstus);
			while(result.next())
			{
				ITstatus=result.getString("Req_Status");
			}
			
			
					
				LinkedList Adusercreation=new LinkedList();
				String empno=user.getEmployeeNo();
				
				String data="select Emp.EMP_FULLNAME ,Emp.PERNR,dep.DPTSTXT,des.DSGSTXT,emp.IP_PHONE,emp.TEL_EXTENS,emp.IP_PHONE,IT.Req_No,"
				            +" It.read_Status,It.Req_Priority,It.mode,It.Req_type,It.Sub_Category,It.AssignTo,loc.LOCATION_CODE,It.IPAddress,"
						    +" IT.Req_Status,It.Subject,It.Reason"
				            +" from IT_SAP_ISSUES It,emp_official_info emp ,DEPARTMENT as dep ,Location as loc ,"
				          +"DESIGNATION as des"
				           +" where IT.Emp_No =emp.PERNR and dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID and"
				          +" IT.Req_No = '"+reqId+"'";
				         
				         	
				ResultSet rs= ad.selectQuery(data);
				try {
					while(rs.next())
					{
						
						pendAppForm.setEmpno(rs.getString("PERNR"));
						pendAppForm.setRequestername(rs.getString("EMP_FULLNAME"));
						pendAppForm.setRequesterdepartment(rs.getString("DPTSTXT"));
						pendAppForm.setRequesterdesignation(rs.getString("DSGSTXT"));
						pendAppForm.setExtno(rs.getString("TEL_EXTENS"));
						pendAppForm.setIpPhoneno(rs.getString("IP_PHONE"));
						pendAppForm.setLocation(rs.getString("LOCATION_CODE"));
						pendAppForm.setIPNumber(rs.getString("IPAddress"));
						pendAppForm.setRequestNo(reqId);
						pendAppForm.setRequestStatus(rs.getString("req_status"));
						pendAppForm.setPriority(rs.getString("Req_Priority"));
						pendAppForm.setMode(rs.getString("mode"));
						pendAppForm.setCategory(rs.getString("Req_type"));
						pendAppForm.setCategory1(rs.getString("Req_type"));						
						pendAppForm.setSubcategory(rs.getString("Sub_Category"));
						pendAppForm.setSubcategory1(rs.getString("Sub_Category"));
						pendAppForm.setTechniciansID(rs.getString("AssignTo"));
						pendAppForm.setReason(rs.getString("reason"));
						pendAppForm.setSubject(rs.getString("subject"));
						
						
					
						
					}
				} catch (SQLException e) {
				  e.printStackTrace();
				}
		
		
		
			} catch (SQLException e) {
				  e.printStackTrace();
				}
		}
		
	//////
			String getReqestNumber="select MAX(Priority) as priority"
     		    	+" from Material_Approvers app,"
  				+"emp_official_info as emp"
				+" where Material_Type='"+pendAppForm.getCategory()+"' and " 
    			+"Material_Sub_Category='"+pendAppForm.getSubcategory()+"' and "    
    			+"LOCATION='"+pendAppForm.getLocation()+"'";
		int maxPriority=0;
		ResultSet rsReqestNumber=ad.selectQuery(getReqestNumber);
		try {
			if(rsReqestNumber.next())
			{
				maxPriority=rsReqestNumber.getInt(1);
			}
		} catch (SQLException e) {
		
			e.printStackTrace();
		}
		//maxPriority+=1;
		
		int hodreq =0;

		String chkreq=" select c_hod_req from CAT_SUBCAT_MASTER where c_prefix = 'SAP' and c_cat_name = '"+pendAppForm.getCategory()+"' and c_sub_cat_name ='"+pendAppForm.getSubcategory()+"'";
		 ResultSet chk= ad.selectQuery(chkreq);
		 try {
			while(chk.next())
			 {
				 hodreq=chk.getInt(1);
			 }
		} catch (SQLException e1) {
			
			e1.printStackTrace();
		}
		 String Sqlstring ="";
		
		
		if(hodreq ==1)
		{
			
		
		 Sqlstring ="select 0 as priority ,"  
				  +"isnull(All_Request.Actual_Approver,PERNR ) as employeeCode,"
				 +"isnull((select EMP_FULLNAME from emp_official_info e where e.PERNR = All_Request.Actual_Approver) , EMP_FULLNAME) as employeeName ,"
                  +"DEPARTMENT.DPTLTXT as department,"
		         +"DESIGNATION.DSGLTXT as designation,"
		         +"All_Request.Req_Status ,"
		         +"All_Request.Comments ,"
		         +"ISNULL(All_Request.approved_date,All_Request.rejected_date) as date "
		         +" from  DEPARTMENT,DESIGNATION ,ESS_Approvers ,emp_official_info "
				  +"left outer join All_Request on Req_type ='IT Sap Request' and "
	             +"Req_Id = '"+reqId+"' and "
	             +"emp_official_info.PERNR = All_Request.Last_Approver"
		         +" where emp_official_info.DPTID  = DEPARTMENT.DPTID and "
		         +"emp_official_info.DSGID  = DESIGNATION.DSGID and "
		         +"emp_official_info.PERNR =  ESS_Approvers.ApproverId and "
		        +"ESS_Approvers.employeeNumber = '"+pendAppForm.getEmpno()+"'"
		        +" union " 
              +"select app.priority as priority,"
              +"isnull(All_Request.Actual_Approver ,PERNR ) as employeeCode,"
				 +"isnull((select EMP_FULLNAME from emp_official_info e where e.PERNR = All_Request.Actual_Approver) , EMP_FULLNAME) as employeeName ,"
              +"DEPARTMENT.DPTLTXT as department,"
   			+"DESIGNATION.DSGLTXT as designation ,"
   			+"All_Request.Req_Status ,"
		         +"All_Request.Comments ,"
		         +"ISNULL(All_Request.approved_date,All_Request.rejected_date) as date "
				+" from Material_Approvers app,"
				+" DEPARTMENT,DESIGNATION ,emp_official_info as emp  left outer join All_Request on Req_type ='IT Sap Request' and "
				 +"Req_Id = '"+reqId+"' and "
               +"emp.PERNR = All_Request.Last_Approver "
					+" where Material_Type='"+pendAppForm.getCategory()+"' and " 
  			+"Material_Sub_Category='"+pendAppForm.getSubcategory()+"' and "  
  			+"emp.PERNR=app.Approver_Id and " 
				+"LOCATION='"+pendAppForm.getLocation()+"' and role ='USER' and "
				+"emp.DPTID  = DEPARTMENT.DPTID and "
  			+"emp.DSGID  = DESIGNATION.DSGID" 
				+" Union "
				+"select '"+maxPriority+"' as priority ," 
				  +"isnull(All_Request.Actual_Approver ,PERNR ) as employeeCode,"
					 +"isnull((select EMP_FULLNAME from emp_official_info e where e.PERNR = All_Request.Actual_Approver) , EMP_FULLNAME) as employeeName ,"
	                     +"DEPARTMENT.DPTLTXT as department,"
		         +"DESIGNATION.DSGLTXT as designation ,"
		         +"All_Request.Req_Status ,"
		         +"All_Request.Comments ,"
		         +"ISNULL(All_Request.approved_date,All_Request.rejected_date) as date "
		         +" from DEPARTMENT,DESIGNATION ,emp_official_info "
				 +"Left Outer Join  All_Request on Req_type ='IT Sap Request' and" 
                         +" Req_Id = '"+reqId+"' and" 
                         +" convert(varchar(10),emp_official_info.PERNR) = All_Request.Last_Approver "   
 
		        +" where emp_official_info.DPTID  = DEPARTMENT.DPTID and "
		        +"emp_official_info.DSGID  = DESIGNATION.DSGID and "
		        +"emp_official_info.PERNR = '"+pendAppForm.getTechniciansID()+"'" 
  			+" Order by 1";
		
		}
		else
		{
			Sqlstring ="select app.priority as priority,"
	              +"isnull(All_Request.Actual_Approver ,PERNR ) as employeeCode,"
					 +"isnull((select EMP_FULLNAME from emp_official_info e where e.PERNR = All_Request.Actual_Approver) , EMP_FULLNAME) as employeeName ,"
	              +"DEPARTMENT.DPTLTXT as department,"
	   			+"DESIGNATION.DSGLTXT as designation ,"
	   			+"All_Request.Req_Status ,"
			         +"All_Request.Comments ,"
			         +"ISNULL(All_Request.approved_date,All_Request.rejected_date) as date "
					+" from Material_Approvers app,"
					+" DEPARTMENT,DESIGNATION ,emp_official_info as emp  left outer join All_Request on Req_type ='IT Sap Request' and "
					 +"Req_Id = '"+reqId+"' and "
	               +"emp.PERNR = All_Request.Last_Approver "
						+" where Material_Type='"+pendAppForm.getCategory()+"' and " 
	  			+"Material_Sub_Category='"+pendAppForm.getSubcategory()+"' and "  
	  			+"emp.PERNR=app.Approver_Id and " 
					+"LOCATION='"+pendAppForm.getLocation()+"' and role ='USER' and "
					+"emp.DPTID  = DEPARTMENT.DPTID and "
	  			+"emp.DSGID  = DESIGNATION.DSGID" 
					+" Union "
					+"select '"+maxPriority+"' as priority ," 
					  +"isnull(All_Request.Actual_Approver ,PERNR ) as employeeCode,"
						 +"isnull((select EMP_FULLNAME from emp_official_info e where e.PERNR = All_Request.Actual_Approver) , EMP_FULLNAME) as employeeName ,"
		                     +"DEPARTMENT.DPTLTXT as department,"
			         +"DESIGNATION.DSGLTXT as designation ,"
			         +"All_Request.Req_Status ,"
			         +"All_Request.Comments ,"
			         +"ISNULL(All_Request.approved_date,All_Request.rejected_date) as date "
			         +" from DEPARTMENT,DESIGNATION ,emp_official_info "
					 +"Left Outer Join  All_Request on Req_type ='IT Sap Request' and" 
	                         +" Req_Id = '"+reqId+"' and" 
	                         +" convert(varchar(10),emp_official_info.PERNR) = All_Request.Last_Approver "   
	 
			        +" where emp_official_info.DPTID  = DEPARTMENT.DPTID and "
			        +"emp_official_info.DSGID  = DESIGNATION.DSGID and "
			        +"emp_official_info.PERNR = '"+pendAppForm.getTechniciansID()+"'" 
	  			+" Order by 1";
		}
		
                  
        ResultSet rs=ad.selectQuery(Sqlstring);
        int i =0;
       
		
		try{
			while(rs.next()){
				//IssuesForm form1=new IssuesForm();
				ApprovalsForm form1 = new ApprovalsForm();
				i = i+1;
				//form1.setPriority(rs.getInt("priority"));
				form1.setPriority(Integer.toString(i));
				//pendAppForm.setEmployeeCode(rs.getString("employeeCode"));
				form1.setPriority(Integer.toString(i));
				//pendAppForm.setEmployeeCode(rs.getString("employeeCode"));
				
				form1.setEmployeeCode(rs.getString("employeeCode"));
				
				form1.setEmployeeName(rs.getString("employeeName"));
				
				//form1.setEmployeename(rs.getString("employeeName"));
				//pendAppForm.setDepartment(rs.getString("department"));
				form1.setDepartment(rs.getString("department"));
				//form1.setDesignation(rs.getString("designation"));
				form1.setDesignation(rs.getString("designation"));
				form1.setStatus(rs.getString("req_status"));
				form1.setComments(rs.getString("Comments"));
				form1.setDate(rs.getString("date"));
			  	
		
			apprList.add(form1);
	
		
			}
			
			
				
				request.setAttribute("apprList", apprList);
				
		
		//file Upload path 
		 InputStream in =ConnectionFactory.class.getClassLoader().getResourceAsStream("db.properties");
	 	 Properties props = new Properties();
	 	 try {
			props.load(in);
		
		 in.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	 	 String uploadFilePath=props.getProperty("file.uploadFilePath");
	 	  System.out.println("required filepath="+uploadFilePath+"/EMicro Files/IT/Help Desk/SapIssues/UploadFiles/"+cate+"");
	 	String filePath=uploadFilePath+"/EMicro Files/IT/Help Desk/SapIssues/UploadFiles/"+cate+"";
		 filepath2="/EMicro Files/IT/Help Desk/SapIssues/UploadFiles/"+cate+"";
		String sql1="select * from Issues_document where request_no='"+reqId+"' and user_id='"+empID+"'";
		ResultSet rs1=ad.selectQuery(sql1);
		IssuesForm leaveForm1=null;
			ArrayList a1=new ArrayList();
			try {
				while(rs1.next()) {
					leaveForm1=new IssuesForm();
					String start = rs1.getString("file_name").substring(rs1.getString("file_name").indexOf("_")+1, rs1.getString("file_name").length()-1);
					leaveForm1.setFileName(start);
					//leaveForm1.setFileName(rs1.getString("file_name"));
					leaveForm1.setId(rs1.getString("id"));
					leaveForm1.setFileFullPath(filepath2+"/"+rs1.getString("file_name"));
					a1.add(leaveForm1);
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			request.setAttribute("requesterDetails", a1);
		
			
		//----
		
	///		
			
				
			//if(filterBy.equalsIgnoreCase("Pending")){
				
				if(ITstatus.equalsIgnoreCase("Pending"))
					
				{
					
					if(pendAppForm.getTechniciansID().equalsIgnoreCase(user.getEmployeeNo()))
							{
						     request.setAttribute("Complete", "Complete");
						     request.setAttribute("rejectButton", "Reject");
							}
					else
					{
						request.setAttribute("approveButton", "Accept");	
						request.setAttribute("rejectButton", "Reject");
					}
				
				}
				/*else
				{
					request.setAttribute("rejectButton", "Reject");
				}
				*/
				//request.setAttribute("rejectButton", "rejectButton");
				//}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		
		
		return mapping.findForward("sapitissueuserview");
		}
	
	public ActionForward statusChangeHRQuery(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
		
		ApprovalsForm statusForm = (ApprovalsForm) form;
		String reqId = statusForm.getRequestNo();
		String reqType = statusForm.getReqRequstType();
		statusForm.setRequestType(reqType);
		HttpSession session = request.getSession();
		UserInfo user = (UserInfo) session.getAttribute("user");
		EssDao ad = new EssDao();
		statusForm.setRequestType(reqType);
		String reqStatus = request.getParameter("status");
		String filterBy = statusForm.getSelectedFilter();
		Date dNow = new Date();
		SimpleDateFormat ft = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
		String dateNow = ft.format(dNow);
		if (user == null) {
			request.setAttribute("message",
					"Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		statusForm.setRequestType(reqType);
		String locId = "";
		String floor = "";
		String room = "";
		String requesterID = "";
		String reqNo = statusForm.getRequestNo();
		String submit_date="";
		//
		if (reqStatus.equalsIgnoreCase("Approve")) {
			
			String updateStatus = "update All_Request set Req_Status='Approved',Comments='"
					+ statusForm.getComments()
					+ "',Last_Approver=Pending_Approver,"
					+ "Pending_Approver='',Approved_Persons=Pending_Approver,approved_date='"
					+ dateNow
					+ "',Actual_Approver='"
					+ user.getEmployeeNo()
					+ "' where Req_Id='"
					+ reqId
					+ "' and Req_Type='User Request' and Req_Status='Pending'";
			int saveStatus = 0;
			saveStatus = ad.SqlExecuteUpdate(updateStatus);
			if (saveStatus > 0) {
				statusForm.setMessage("Request Approved Successfully");
			
				String uu="update Hr_queries set Status='Approved',Approved_date=getdate(),Pending_Approver='No',Last_Approver='"+user.getFirstName()+"' where id='"+reqId+"'";
				
				int rewer = ad.SqlExecuteUpdate(uu);
			}
			
		}
		else
		{
			String updateStatus = "update All_Request set Req_Status='Rejected',Comments='"
					+ statusForm.getComments()
					+ "',Last_Approver=Pending_Approver,"
					+ "Pending_Approver='',Approved_Persons=Pending_Approver,rejected_date='"
					+ dateNow
					+ "',Actual_Approver='"
					+ user.getEmployeeNo()
					+ "' where Req_Id='"
					+ reqId
					+ "' and Req_Type='User Request' and Req_Status='Pending'";
			int saveStatus = 0;
			saveStatus = ad.SqlExecuteUpdate(updateStatus);
			if (saveStatus > 0) {statusForm.setMessage("Request Rejected Successfully");
			String uu="update Hr_queries set Status='Rejected',Approved_date=getdate(),Pending_Approver='No',Last_Approver='"+user.getFirstName()+"' where id='"+reqId+"'";
			
			int rewer = ad.SqlExecuteUpdate(uu);
			}
		}
		ArrayList query=new ArrayList();
		String getcomoff = "select * from HR_QUERIES where id='"+reqId+"'";
		ResultSet ff = ad.selectQuery(getcomoff);
		try {
			while (ff.next()) {
					

				
				
				statusForm.setSubject(ff.getString("subject"));
				statusForm.setReason(ff.getString("description"));
				
				String re[]=empDet(Integer.toString(ff.getInt("req_by")));
				statusForm.setEmployeeno(Integer.toString(ff.getInt("req_by")));
				statusForm.setEmployeeName(re[0]);
				statusForm.setLocationId(re[1]);
				statusForm.setDepartment(re[2]);
				statusForm.setDesignation(re[3]); 
				statusForm.setDateofBirth(re[4]);
		
			}
		} catch (SQLException e) {

			e.printStackTrace();
		}
		request.setAttribute("query", query);
		
		String app = "";
		// PLANT HEAD
		if (filterBy.equalsIgnoreCase("Pending")) {
			app = "select a.*,e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from All_Request a,emp_official_info e,DEPARTMENT dep,DESIGNATION desg where Req_Type='User Request' and a.Req_Id='"
					+ reqId
					+ "' and e.PERNR=a.Pending_Approver and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID "
					+ "union "
					 +"select a.*,e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from All_Request a,emp_official_info e,DEPARTMENT dep,DESIGNATION desg where Req_Type='User Request' and a.Req_Id='"
						+ reqId
						+ "' and e.PERNR=a.Actual_Approver and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID ";

		} else {
			app = "select a.*,e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from All_Request a,emp_official_info e,DEPARTMENT dep,DESIGNATION desg where  Req_Type='User Request' and a.Req_Id='"
					+ reqId
					+ "' and e.PERNR=a.Actual_Approver and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID ";
				

		}
		List appList = new LinkedList();
		ResultSet rsAppr = ad.selectQuery(app);
		String duplicate="";
		try {
			while (rsAppr.next()) {
				ApprovalsForm appr = new ApprovalsForm();
				appr.setApprover(rsAppr.getString("EMP_FULLNAME"));
				appr.setDesignation(rsAppr.getString("DSGSTXT"));
				appr.setApproveStatus(rsAppr.getString("Req_Status"));
				String approvaStatus = rsAppr.getString("Req_Status");
				if (approvaStatus.equals("Pending")) {
					appr.setApproveDate("");
					appr.setComments("");
				}
				if (approvaStatus.equals("Approved")
						|| approvaStatus.equals("Completed")) {
					appr.setApproveDate(rsAppr.getString("approved_date"));
					appr.setComments(rsAppr.getString("Comments"));
				}
				if (approvaStatus.equals("Rejected")
						|| approvaStatus.equals("Cancelled")) {
					appr.setApproveDate(rsAppr.getString("rejected_date"));
					appr.setComments(rsAppr.getString("Comments"));
				}
				if(duplicate!=null)
				if(!duplicate.equalsIgnoreCase(rsAppr.getString("approved_date")))
					appList.add(appr);
					duplicate=rsAppr.getString("approved_date");
			}
			request.setAttribute("appList", appList);
		} catch (SQLException e) {

			e.printStackTrace();
		}
		return mapping.findForward("Hrquery");
	}
	
	
	public ActionForward statusChangeForsapITRequest(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
	{
		String trans="";
		String ITstatus="";
		String chkdate="";
		String chkdate1="";String filepath2="";
		String cate="";
		EssDao ad=new EssDao();
		LinkedList list = new LinkedList();
		LinkedList apprList=new LinkedList();
        String forwardType="";
		ApprovalsForm help=(ApprovalsForm) form;
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		if(user==null){
			request.setAttribute("message","Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		String reqId = request.getParameter("reqId");
		
		MainDao exeQry = new MainDao();
		String status = request.getParameter("status");
		String reqType = request.getParameter("reqType");
		String reqsubcategory = request.getParameter("reqsubcategory");
//		String filterBy=help.getSelectedFilter();
		
	
		
		//User Informtion
		String lcode = user.getPlantId();
		int user_Id = user.getId();
		String uName = user.getUserName();
		String appName = uName;
		int rowCount= 0;
		//System.out.println(reqType);
		
		int presentPriorityCreator =0;
		String Creator ="Creator";
		String Approver_Id ="";
		String Parllel_Approver_1 ="";
		String Parllel_Approver_2 ="";
		String role ="";
		String Approver_Id_New ="";
		String Parllel_Approver_1_New ="";
		String Parllel_Approver_2_New ="";
		String role_New ="";
		//updateStatus("Approved", reqType,reqId);
		//get the total Approvers
		rowCount = getCount("Approvers_Details", reqType);
		//check and get next approver
		
		ITMail email = new ITMail();
		
		/*
		String getdet ="select top 1 Req_type , Sub_Category ,Location.LOCATION_CODE from IT_SAP_ISSUES ,Location"
		+"where Location.LOCID=IT_SAP_ISSUES.Location and Req_No ='"+reqId+"'";
		ResultSet rs1=ad.selectQuery(getdet);
		
		try{
		if (rs1.next()){
			help.setLocation(rs1.getString("LOCATION_CODE"));
			help.setCategory(rs1.getString("Req_type"));
			help.setSubcategory(rs1.getString("Sub_Category"));
			
		}
		}catch (SQLException e) {
			
			e.printStackTrace(); }*/
		
		Date dNow = new Date( );
		SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS");
		String dateNow = ft.format(dNow);
		
		 Date dNow1 = new Date( );
		 SimpleDateFormat ft1 = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS");
	    String currendate = ft1.format(dNow1);	
	    
	    SimpleDateFormat ft2 = new SimpleDateFormat ("dd/MM/yyyy");
		String Requestername ="" ;
		String pendingApprovers ="";
		String Requesterdate ="";
		String Techassign ="";
		
		
		if(status.equalsIgnoreCase("Approve"))
		{
				int maxapprovel = 0;
				String getpriotiy ="select Isnull(MAX(Priority),0) as count from Material_Approvers"
									+" where Location =	(select LOCATION_CODE FROM Location WHERE LOCID ='"+user.getPlantId()+"')"
		                            +"and Material_sub_category = '"+reqsubcategory+"'"
		                            +"and Material_Type= '"+reqType+"'" 
		                            +" and ( Approver_Id ='"+user.getEmployeeNo()+"' or Parllel_Approver_1 ='"+user.getEmployeeNo()+"' or Parllel_Approver_1 ='"+user.getEmployeeNo()+"')";
				ResultSet rs1=ad.selectQuery(getpriotiy);
				
				
				try{
				if (rs1.next()){
					maxapprovel = rs1.getInt("count");
				}
				}catch (SQLException e) {
					
					e.printStackTrace(); }
				
				String getrequestName = "select Raisedby , CONVERT(VARCHAR(11),req_date,103) as date1 , AssignTo  from IT_SAP_ISSUES where Req_No ='"+reqId+"' ";
				ResultSet reqname=ad.selectQuery(getrequestName);
				try{
					if (reqname.next()){
						Requestername =  reqname.getString("Raisedby");
							
						Requesterdate = reqname.getString("date1");
						
						Techassign = reqname.getString("AssignTo");
						
					}
					}catch (SQLException e) {
						
						e.printStackTrace(); }
				
				//Checking any approvals der in hod level
				
				if (maxapprovel == 0)
				{
					
					String getUpdatehod = "Update  All_Request set Req_Status ='Approved' ," 
		                                +"Last_Approver =   Pending_Approver,"
		                                +"Approved_Persons= Pending_Approver,"
		                                +"approved_date = '"+currendate+"' ," 
		                                
		                                +" Comments = '"+help.getComments()+"' ,"
		                                +" Actual_Approver= '"+user.getEmployeeNo()+"'"
		                                +"where req_id = '"+reqId+"'"
		                                +" and req_type = 'IT Sap Request'"
		                                +" and Pending_approver ='"+user.getEmployeeNo()+"'";
					int ii=ad.SqlExecuteUpdate(getUpdatehod);
					
					String getpendapp ="select emp.EMP_FULLNAME as pendapp from Material_Approvers , emp_official_info as emp "
							+" where Location =	(select LOCATION_CODE FROM Location WHERE LOCID ='"+user.getPlantId()+"') and Role <>'Creator' "
                            +" and Material_sub_category = '"+reqsubcategory+"' and  Emp.PERNR=Material_Approvers.Approver_ID "
                            +" and Material_Type= '"+reqType+"' and Priority > '"+maxapprovel+"' "
					        +" Union "
					        +"select emp.EMP_FULLNAME as pendapp from IT_SAP_ISSUES , emp_official_info as emp "  
					        +" where Emp.PERNR=IT_SAP_ISSUES.AssignTo and IT_SAP_ISSUES.req_no ='"+reqId+"'";
					ResultSet rspend=ad.selectQuery(getpendapp);
					
					try{
						while (rspend.next()){
							
							if(pendingApprovers.equalsIgnoreCase("")){
								pendingApprovers = rspend.getString("pendapp")+",";
								}
								else{
									pendingApprovers = pendingApprovers +rspend.getString("pendapp")+",";
								}
						}
						}catch (SQLException e) {
							
							e.printStackTrace(); }
                            
		             
					pendingApprovers = pendingApprovers.substring(0, pendingApprovers.length()-1);
					
					
					String getUpdate12 = "Update  IT_SAP_ISSUES set Req_Status ='In Process', Last_approver='"+user.getFullName()+"' , Pending_approver = '"+pendingApprovers+"' , approved_date = '"+currendate+"' " 
			                +" where Req_No = '"+reqId+"'";
						int ii12=ad.SqlExecuteUpdate(getUpdate12);
						
							
						
						
						 presentPriorityCreator = maxapprovel+1;
						 
						 String getpriotiy7 ="select Priority , Approver_Id, Parllel_Approver_1,Parllel_Approver_2 , Role from Material_Approvers"
				        		   +" where Location = (select LOCATION_CODE FROM Location WHERE LOCID ='"+user.getPlantId()+"')"
				        		   +" and Material_sub_category = '"+reqsubcategory+"'"
				        		   //+" and role = 'Creator'"
				        		   +" and Material_Type= '"+reqType+"'" 
				        		   +" and Priority = '"+presentPriorityCreator+"' ";
				    	   
				    	   ResultSet rs7=ad.selectQuery(getpriotiy7);
				    	   
				    	   try{
					           	
				    			if (rs7.next()){
				    				presentPriorityCreator = rs7.getInt("Priority");
				    				Approver_Id_New = rs7.getString("Approver_Id");
				    				role_New = rs7.getString("role");
				    				Parllel_Approver_1_New = rs7.getString("Parllel_Approver_1");
				    				Parllel_Approver_2_New = rs7.getString("Parllel_Approver_2");
				    				
				    			}
				    			}catch (SQLException e) {
				    			
				    			e.printStackTrace(); }
				    	   if (!role_New.equalsIgnoreCase("Creator")){
				    	   
				    	  if(!Approver_Id_New.equalsIgnoreCase("")) {	   
				    	   
				    	   String sendReq1="insert into All_Request(Req_Id,Req_Type,Requester_Name,Req_Date,Req_Status,Last_Approver," +
									"Pending_Approver,Approved_Persons,Requester_Id,type) values('"+reqId+"','IT Sap Request','"+Requestername+"'," +
									"'"+Requesterdate+"','Pending','','"+Approver_Id_New+"','','"+Requestername+"','IT Sap Request')";
				    	   int ii8=ad.SqlExecuteUpdate(sendReq1);
				    	   
				    	  
				    	  int j = email.sendMailToSapApprover(request, Integer.parseInt(reqId), "IT Sap Request", Approver_Id_New);
						  // int j=email.sendMailToSapApprover(request, reqId, "IT Sap Request",Approver_Id_New);
							 
				    	   }
				    	   
				    	   if(!Parllel_Approver_1_New.equalsIgnoreCase("")) {
				    	   
				    	   String sendReq2="insert into All_Request(Req_Id,Req_Type,Requester_Name,Req_Date,Req_Status,Last_Approver," +
									"Pending_Approver,Approved_Persons,Requester_Id,type) values('"+reqId+"','IT Sap Request','"+Requestername+"'," +
									"'"+Requesterdate+"','Pending','','"+Parllel_Approver_1_New+"','','"+Requestername+"','IT Sap Request')";
				   	   int ii9=ad.SqlExecuteUpdate(sendReq2);
				   	   
				   	   int j = email.sendMailToSapApprover(request, Integer.parseInt(reqId), "IT Sap Request", Parllel_Approver_1_New);
				    	   }
				    	   
				   	    if(!Parllel_Approver_2_New.equalsIgnoreCase("")) {
			        	   String sendReq12="insert into All_Request(Req_Id,Req_Type,Requester_Name,Req_Date,Req_Status,Last_Approver," +
			    					"Pending_Approver,Approved_Persons,Requester_Id,type) values('"+reqId+"','IT Sap Request','"+Requestername+"'," +
			    					"'"+Requesterdate+"','Pending','','"+Parllel_Approver_2_New+"','','"+Requestername+"','IT Sap Request')";
			       	   int ii10=ad.SqlExecuteUpdate(sendReq12);
			       	   
			       	   int j = email.sendMailToSapApprover(request, Integer.parseInt(reqId), "IT Sap Request", Parllel_Approver_2_New);
				    	  }
				    	 }
				  if (role_New.equalsIgnoreCase("Creator")){
				    		   
				    		   if(!Techassign.equalsIgnoreCase("")) {
						    	   
						    	   String sendReq16="insert into All_Request(Req_Id,Req_Type,Requester_Name,Req_Date,Req_Status,Last_Approver," +
											"Pending_Approver,Approved_Persons,Requester_Id,type) values('"+reqId+"','IT Sap Request','"+Requestername+"'," +
											"'"+Requesterdate+"','Pending','','"+Techassign+"','','"+Requestername+"','IT Sap Request')";
						    	   int ii16=ad.SqlExecuteUpdate(sendReq16);
						    	   
						    	   
						    	   
						    	   int j = email.sendMailToSapApprover(request, Integer.parseInt(reqId), "IT Sap Request", Techassign);
					
						           
				    		   
				    	      }
				    }   	   
				}
		   
				
				if (maxapprovel > 0)
		                           
				{
				
				
				String getpriotiy3 ="select Priority , Approver_Id, Parllel_Approver_1,Parllel_Approver_2 , Role from Material_Approvers"
		                		   +" where Location = (select LOCATION_CODE FROM Location WHERE LOCID ='"+user.getPlantId()+"')"
		                		   +" and Material_sub_category = '"+reqsubcategory+"'"
		                		   //+" and role = 'Creator' "
		                		   +" and Material_Type= '"+reqType+"'" 
		                		   + " and (Approver_Id = '"+user.getEmployeeNo()+"' or Parllel_Approver_1 ='"+user.getEmployeeNo()+"' or Parllel_Approver_2='"+user.getEmployeeNo()+"')";
				
				
				ResultSet rs2=ad.selectQuery(getpriotiy3);
		
		        try{
		        	
				if (rs2.next()){
					presentPriorityCreator = rs2.getInt("Priority");
					Approver_Id = rs2.getString("Approver_Id");
					role = rs2.getString("role");
					Parllel_Approver_1 = rs2.getString("Parllel_Approver_1");
					Parllel_Approver_2 = rs2.getString("Parllel_Approver_2");
					
				}
				}catch (SQLException e) {
				
				e.printStackTrace(); }
		        
		        //if it's Prority level is creator finalising the process
				
		       if (role.equalsIgnoreCase("Creator")){
		    	   
				
				String getUpdatehod5 = "Update  All_Request set Req_Status ='Completed' ," 
		                +" Last_Approver =   Pending_Approver,"
		                +" Approved_Persons= Pending_Approver,"
		                +" approved_date = '"+currendate+"' ,"
		                
		                +" Actual_Approver= '"+user.getEmployeeNo()+"' ,"
		                +" Comments = '"+help.getComments()+"'"
		                +" where req_id = '"+reqId+"'"
		                +" and req_type = 'IT Sap Request'" 
		                +" and Pending_approver ='"+Techassign+"'" ;
				int ii6=ad.SqlExecuteUpdate(getUpdatehod5);
				
				
				String getUpdate19 = "Update  IT_SAP_ISSUES set Req_Status ='Completed' , Last_approver='"+user.getFullName()+"' , approved_date = '"+currendate+"' ,Pending_approver = '' " 
		                +" where req_No = '"+reqId+"'";
					int ii7=ad.SqlExecuteUpdate(getUpdate19);
				
				
				int j = email.sendMailToSapApprover(request, Integer.parseInt(reqId), "IT Sap Request", Requestername);
				
				
				
		       }
		       
		      
		       //if present level not a creator den checking fo r next level 
			
		       if(!role.equalsIgnoreCase("Creator")){
		    	   if(!Approver_Id.equalsIgnoreCase(""))
		    	   {
		    	   String getUpdatehod2 = "Update  All_Request set Req_Status ='Approved' ," 
		                   +" Last_Approver =   Pending_Approver,"
		                   +" Approved_Persons= Pending_Approver,"
		                   +" approved_date = '"+currendate+"' ,"
		                   
		                   +" Actual_Approver= '"+user.getEmployeeNo()+"' ,"
		                   +" Comments = '"+help.getComments()+"'"
		                   +" where req_id = '"+reqId+"'"
		                   +" and req_type = 'IT Sap Request'" 
		                   +" and Pending_approver ='"+Approver_Id+"'" ;
		   		  int ii3=ad.SqlExecuteUpdate(getUpdatehod2);
		    	   }
		    	   
		    	   if(!Parllel_Approver_1.equalsIgnoreCase(""))
		    	   {	   
		   		 String getUpdatehod3 = "Update  All_Request set Req_Status ='Approved' ," 
		                   +" Last_Approver =   Pending_Approver,"
		                   +" Approved_Persons= Pending_Approver,"
		                   +" approved_date = '"+currendate+"' ,"
		                   
		                   +" Actual_Approver= '"+user.getEmployeeNo()+"' ,"
		                   +" Comments = '"+help.getComments()+"'"
		                   +" where req_id = '"+reqId+"'"
		                   +" and req_type = 'IT Sap Request'" 
		                   +" and Pending_approver ='"+Parllel_Approver_1+"'" ;
		   		 int ii4=ad.SqlExecuteUpdate(getUpdatehod3);
		    	   }	
		   	 
		    	   if(!Parllel_Approver_2.equalsIgnoreCase(""))
		    	   {	   
		   		String getUpdatehod5 = "Update  All_Request set Req_Status ='Approved' ," 
		                   +" Last_Approver =   Pending_Approver,"
		                   +" Approved_Persons= Pending_Approver,"
		                   +" approved_date = '"+currendate+"' ,"
		                   
		                   +" Actual_Approver= '"+user.getEmployeeNo()+"' ,"
		                   +" Comments = '"+help.getComments()+"'"
		                   +" where req_id = '"+reqId+"'"
		                   +" and req_type = 'IT Sap Request'" 
		                   +" and Pending_approver ='"+Parllel_Approver_2+"'" ;
		   		 int ii6=ad.SqlExecuteUpdate(getUpdatehod5);
		    	   }
		   		 
		   		 
		   		String getpendapp ="select emp.EMP_FULLNAME as pendapp from Material_Approvers , emp_official_info as emp "
						+" where Location =	(select LOCATION_CODE FROM Location WHERE LOCID ='"+user.getPlantId()+"') and Role <>'Creator' "
                        +" and Material_sub_category = '"+reqsubcategory+"' and  Emp.PERNR=Material_Approvers.Approver_ID "
                        +" and Material_Type= '"+reqType+"' and Priority > '"+maxapprovel+"' "
                        +" Union "
					    +"select emp.EMP_FULLNAME as pendapp from IT_SAP_ISSUES , emp_official_info as emp "  
					    +"where Emp.PERNR=IT_SAP_ISSUES.AssignTo and IT_SAP_ISSUES.req_no ='"+reqId+"'";   
				ResultSet rspend=ad.selectQuery(getpendapp);
				
				try{
					while (rspend.next()){
						
						if(pendingApprovers.equalsIgnoreCase("")){
							pendingApprovers = rspend.getString("pendapp")+",";
							}
							else{
								pendingApprovers = pendingApprovers +rspend.getString("pendapp")+",";
							}
					}
					}catch (SQLException e) {
						
						e.printStackTrace(); }
                        
	            
				pendingApprovers = pendingApprovers.substring(0, pendingApprovers.length()-1);
				
				
				String getUpdate12 = "Update  IT_SAP_ISSUES set  Last_approver='"+user.getFullName()+"' , Pending_approver = '"+pendingApprovers+"'" 
		                +" where Req_No = '"+reqId+"'";
				   int ii19=ad.SqlExecuteUpdate(getUpdate12);
			
		    	   
		       
		    	   presentPriorityCreator = presentPriorityCreator+1;
		    	   String getpriotiy17 ="select Priority , Approver_Id, Parllel_Approver_1,Parllel_Approver_2 , Role from Material_Approvers"
		        		   +" where Location = (select LOCATION_CODE FROM Location WHERE LOCID ='"+user.getPlantId()+"')"
		        		   +" and Material_sub_category = '"+reqsubcategory+"'"
		        		   +" and Material_Type= '"+reqType+"'" 
		        		   +" and Priority = '"+presentPriorityCreator+"' ";
		    	   
		    	   ResultSet rs17=ad.selectQuery(getpriotiy17);
		    	   
		    	   try{
		           	
		    			if (rs17.next()){
		    				presentPriorityCreator = rs17.getInt("Priority");
		    				Approver_Id_New = rs17.getString("Approver_Id");
		    				role_New = rs17.getString("role");
		    				Parllel_Approver_1_New = rs17.getString("Parllel_Approver_1");
		    				Parllel_Approver_2_New = rs17.getString("Parllel_Approver_2");
		    				
		    			}
		    			}catch (SQLException e) {
		    			
		    			e.printStackTrace(); }
		    	   //checking fo rnext level he is creator or not
		    	   
		    	   //Next Level Checking whether Creator or other 
		    	   
		    	   if (!role_New.equalsIgnoreCase("Creator")){
		    		   
		    		 
		    		   
		    		   
		    	   if(!Approver_Id_New.equalsIgnoreCase("")) {
		    	   
		    	   String sendReq16="insert into All_Request(Req_Id,Req_Type,Requester_Name,Req_Date,Req_Status,Last_Approver," +
							"Pending_Approver,Approved_Persons,Requester_Id,type) values('"+reqId+"','IT Sap Request','"+Requestername+"'," +
							"'"+Requesterdate+"','Pending','','"+Approver_Id_New+"','','"+Requestername+"','IT Sap Request')";
		    	   int ii16=ad.SqlExecuteUpdate(sendReq16);
		    	   
		    	   int j = email.sendMailToSapApprover(request, Integer.parseInt(reqId), "IT Sap Request", Approver_Id_New);
		    	   }
		    	   
		    	   if(!Parllel_Approver_1_New.equalsIgnoreCase("")) {
		    	   String sendReq15="insert into All_Request(Req_Id,Req_Type,Requester_Name,Req_Date,Req_Status,Last_Approver," +
							"Pending_Approver,Approved_Persons,Requester_Id,type) values('"+reqId+"','IT Sap Request','"+Requestername+"'," +
							"'"+Requesterdate+"','Pending','','"+Parllel_Approver_1_New+"','','"+Requestername+"','IT Sap Request')";
		   	       int ii15=ad.SqlExecuteUpdate(sendReq15);
		   	       
		   	       int j = email.sendMailToSapApprover(request, Integer.parseInt(reqId), "IT Sap Request", Parllel_Approver_1_New);
		    	   }
		    	   
		    	 
		    	   
		    	   if(!Parllel_Approver_2_New.equalsIgnoreCase("")) {
		        	   String sendReq14="insert into All_Request(Req_Id,Req_Type,Requester_Name,Req_Date,Req_Status,Last_Approver," +
		    					"Pending_Approver,Approved_Persons,Requester_Id,type) values('"+reqId+"','IT Sap Request','"+Requestername+"'," +
		    					"'"+Requesterdate+"','Pending','','"+Parllel_Approver_2_New+"','','"+Requestername+"','IT Sap Request')";
		       	   int ii10=ad.SqlExecuteUpdate(sendReq14);
		       	   
		       	   int j = email.sendMailToSapApprover(request, Integer.parseInt(reqId), "IT Sap Request", Parllel_Approver_2_New);
		           
		       	
		        	   }
		    	   
		    	   }
		    	   
		    	   //next level is creator den sending mail to oly technician 
		    	   if (role_New.equalsIgnoreCase("Creator")){
		    		   
		    		   if(!Techassign.equalsIgnoreCase("")) {
				    	   
				    	   String sendReq16="insert into All_Request(Req_Id,Req_Type,Requester_Name,Req_Date,Req_Status,Last_Approver," +
									"Pending_Approver,Approved_Persons,Requester_Id,type) values('"+reqId+"','IT Sap Request','"+Requestername+"'," +
									"'"+Requesterdate+"','Pending','','"+Techassign+"','','"+Requestername+"','IT Sap Request')";
				    	   int ii16=ad.SqlExecuteUpdate(sendReq16);
				    	   
				    	   
				    	   
				    	   int j = email.sendMailToSapApprover(request, Integer.parseInt(reqId), "IT Sap Request", Techassign);
			
				           
		    		   
		    	   }
		    	   }   
		    	   //Updating present level
		    	   
		    	   
				}			
					
				}
				help.setMessage("Request  '"+reqId+"' has been Approved");
	    }	
		
		if(status.equalsIgnoreCase("Reject"))
			{
			
			String getrequestName = "select Raisedby , CONVERT(VARCHAR(11),req_date,103) as date1 , AssignTo  from IT_SAP_ISSUES where Req_No ='"+reqId+"' ";
			ResultSet reqname=ad.selectQuery(getrequestName);
			try{
				if (reqname.next()){
					Requestername =  reqname.getString("Raisedby");
						
					Requesterdate = reqname.getString("date1");
					
					Techassign = reqname.getString("AssignTo");
					
				}
				}catch (SQLException e) {
					
					e.printStackTrace(); }
			
			int maxapprovel = 0;
			
			String getpriotiy ="select Isnull(MAX(Priority),0) as count from Material_Approvers"
					+" where Location =	(select LOCATION_CODE FROM Location WHERE LOCID ='"+user.getPlantId()+"')"
                    +"and Material_sub_category = '"+reqsubcategory+"'"
                    +"and Material_Type= '"+reqType+"'" 
                    +" and ( Approver_Id ='"+user.getEmployeeNo()+"' or Parllel_Approver_1 ='"+user.getEmployeeNo()+"' or Parllel_Approver_1 ='"+user.getEmployeeNo()+"')";

			ResultSet rs1=ad.selectQuery(getpriotiy);
			
			
			try{
			if (rs1.next()){
				maxapprovel = rs1.getInt("count");
			}
			}catch (SQLException e) {
				
				e.printStackTrace(); }
			
			//Checking any approvals der except hod if not
			
			if (maxapprovel == 0)
			{
				
				String getUpdatehod = "Update  All_Request set Req_Status ='Rejected' ," 
	                                +"Last_Approver =   Pending_Approver,"
	                                +"Approved_Persons= Pending_Approver,"
	                                +"rejected_date = '"+currendate+"' ,"
	                                +" Actual_Approver= '"+user.getEmployeeNo()+"' ,"
	                                
	                                +" Comments = '"+help.getComments()+"',"
	                                +" Pending_Approver = '' "
	                                +"where req_id = '"+reqId+"'"
	                                +" and req_type = 'IT Sap Request' "
	                                +" and Pending_approver ='"+user.getEmployeeNo()+"'";
				int ii=ad.SqlExecuteUpdate(getUpdatehod);
				
				
				
				String getUpdate12 = "Update  IT_SAP_ISSUES set Req_Status ='Rejected', Last_approver='"+user.getFullName()+"'" 
		                +" where req_No = '"+reqId+"'";
					int ii12=ad.SqlExecuteUpdate(getUpdate12);
					int j = email.sendMailToSapApprover(request, Integer.parseInt(reqId), "IT Sap Request", Requestername);		
			}
			
			if (maxapprovel > 0)
                
			{
			
			
			String getpriotiy3 ="select Priority , Approver_Id, Parllel_Approver_1,Parllel_Approver_2 , Role from Material_Approvers"
	                		   +" where Location = (select LOCATION_CODE FROM Location WHERE LOCID ='"+user.getPlantId()+"')"
	                		   +" and Material_sub_category = '"+reqsubcategory+"'"
	                		   +" and Material_Type= '"+reqType+"'"
	                		   + " and (Approver_Id = '"+user.getEmployeeNo()+"' or Parllel_Approver_1 ='"+user.getEmployeeNo()+"' or Parllel_Approver_2='"+user.getEmployeeNo()+"')";
			
			
			
			ResultSet rs2=ad.selectQuery(getpriotiy3);
	
	        try{
	        	
			if (rs2.next()){
				presentPriorityCreator = rs2.getInt("Priority");
				Approver_Id = rs2.getString("Approver_Id");
				role = rs2.getString("role");
				Parllel_Approver_1 = rs2.getString("Parllel_Approver_1");
				Parllel_Approver_2 = rs2.getString("Parllel_Approver_2");
				
			}
			}catch (SQLException e) {
			
			e.printStackTrace(); }
	        
	        //if it's Prority level is creator finalising the process
			
	        if(!Approver_Id.equalsIgnoreCase(""))
	        {	
			String getUpdatehod2 = "Update  All_Request set Req_Status ='Rejected' ," 
	                +" Last_Approver =   Pending_Approver,"
	                +" Approved_Persons= Pending_Approver,"
	                +" rejected_date = '"+currendate+"' ,"
	                
	                +" Actual_Approver= '"+user.getEmployeeNo()+"' ,"
	                +" Comments = '"+help.getComments()+"',"
                    +" Pending_Approver = '' "
	                +" where req_id = '"+reqId+"'"
	                +" and req_type = 'IT Sap Request'" 
	                +" and Pending_approver ='"+Approver_Id+"'" ;
			int ii3=ad.SqlExecuteUpdate(getUpdatehod2);
	        }
	        
	        if(!Parllel_Approver_1.equalsIgnoreCase(""))
	        {	
			String getUpdatehod3 = "Update  All_Request set Req_Status ='Rejected' ," 
	                +" Last_Approver =   Pending_Approver,"
	                +" Approved_Persons= Pending_Approver,"
	                +" rejected_date = '"+currendate+"' ,"
	                
	                +" Actual_Approver= '"+user.getEmployeeNo()+"' ,"
	                +" Comments = '"+help.getComments()+"',"
                    +" Pending_Approver = '' "
	                +" where req_id = '"+reqId+"'"
	                +" and req_type = 'IT Sap Request'" 
	                +" and Pending_approver ='"+Parllel_Approver_1+"'" ;
			int ii4=ad.SqlExecuteUpdate(getUpdatehod3);
			
	        }
			
	        if(!Parllel_Approver_2.equalsIgnoreCase(""))
	        {	
			String getUpdatehod5 = "Update  All_Request set Req_Status ='Rejected' ," 
	                +" Last_Approver =   Pending_Approver,"
	                +" Approved_Persons= Pending_Approver,"
	                +" rejected_date = '"+currendate+"' ,"
	                
	                +" Actual_Approver= '"+user.getEmployeeNo()+"' ,"
	                +" Comments = '"+help.getComments()+"',"
                    +" Pending_Approver = '' "
	                +" where req_id = '"+reqId+"'"
	                +" and req_type = 'IT Sap Request'"
	                +" and Pending_approver ='"+Parllel_Approver_2+"'" ;
			int ii6=ad.SqlExecuteUpdate(getUpdatehod5);
	        }
	        
			String getUpdate19 = "Update  IT_SAP_ISSUES set Req_Status ='Rejected' ,Last_approver='"+user.getFullName()+"',Pending_Approver=''  " 
	                +" where req_No = '"+reqId+"'";
				int ii7=ad.SqlExecuteUpdate(getUpdate19);
				
				int j = email.sendMailToSapApprover(request, Integer.parseInt(reqId), "IT Sap Request", Requestername);	
			
			}
			help.setMessage("Request  '"+reqId+"' has been Rejected");
	
		}
		
//----
		String data="select Emp.EMP_FULLNAME ,Emp.PERNR,dep.DPTSTXT,des.DSGSTXT,emp.IP_PHONE,emp.TEL_EXTENS,emp.IP_PHONE,IT.Req_No,"
	            +" It.read_Status,It.Req_Priority,It.mode,It.Req_type,It.Sub_Category,It.AssignTo,loc.LOCATION_CODE,It.IPAddress,"
			    +" IT.Req_Status,It.Subject,It.Reason,It.sap_request_type"
	            +" from IT_SAP_ISSUES It,emp_official_info emp ,DEPARTMENT as dep ,Location as loc ,"
	          +"DESIGNATION as des"
	           +" where IT.Emp_No =emp.PERNR and dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID and"
	          +" IT.Req_No = '"+reqId+"'";
	         
	         	
	ResultSet rs1= ad.selectQuery(data);
	try {
		while(rs1.next())
		{
			
			help.setEmpno(rs1.getString("PERNR"));
			help.setRequestername(rs1.getString("EMP_FULLNAME"));
			help.setRequesterdepartment(rs1.getString("DPTSTXT"));
			help.setRequesterdesignation(rs1.getString("DSGSTXT"));
			help.setExtno(rs1.getString("TEL_EXTENS"));
			help.setIpPhoneno(rs1.getString("IP_PHONE"));
			help.setLocation(rs1.getString("LOCATION_CODE"));
			help.setIPNumber(rs1.getString("IPAddress"));
			help.setRequestNo(reqId);
			help.setRequestStatus(rs1.getString("req_status"));
			help.setPriority(rs1.getString("Req_Priority"));
			help.setMode(rs1.getString("mode"));
			help.setCategory(rs1.getString("Req_type"));
			help.setCategory1(rs1.getString("Req_type"));	
			help.setSubcategory(rs1.getString("Sub_Category"));
			help.setSubcategory1(rs1.getString("Sub_Category"));
			help.setTechniciansID(rs1.getString("AssignTo"));
			help.setReason(rs1.getString("reason"));
			help.setSubject(rs1.getString("subject"));
			help.setRequestName(rs1.getString("sap_request_type"));
			if(rs1.getString("sap_request_type")!=null)
			{
				if(rs1.getString("sap_request_type").equalsIgnoreCase("SAP Roles Management"))	
				{
					cate="'ROLES'";
					request.setAttribute("role", "role");
				//	pendAppForm.setOldId(rsLeave.getString("old_id"));
				//	pendAppForm.setNewId(rsLeave.getString("new_id"));
				}
				if(rs1.getString("sap_request_type").equalsIgnoreCase("SAP Authorization Management"))	
				{
					 cate="'AUTH'";
					request.setAttribute("role", "role");
				//	pendAppForm.setOldId(rsLeave.getString("old_id"));
				//	pendAppForm.setNewId(rsLeave.getString("new_id"));
				}
				if(rs1.getString("sap_request_type").equalsIgnoreCase("SAP User Id Management"))	
				{
					 
					 cate="'PSAP','SSAP'";
					 request.setAttribute("role", "role");
				//	pendAppForm.setOldId(rsLeave.getString("old_id"));
				//	pendAppForm.setNewId(rsLeave.getString("new_id"));
				}
				if(rs1.getString("sap_request_type").equalsIgnoreCase("Document Cancellation"))	
				{
					 
					 cate="'DC'";
					// request.setAttribute("role", "role");
				//	pendAppForm.setOldId(rsLeave.getString("old_id"));
				//	pendAppForm.setNewId(rsLeave.getString("new_id"));
				}
				}
			
		
			
		}
	} catch (SQLException e) {
	  e.printStackTrace();
	}
	
	
	//-----
	
	String getUpdate19 = "Update  All_request set Pending_approver =''" 
            +" where req_id = '"+reqId+"' and Actual_Approver is not null and req_type = 'IT Sap Request'";
     int ii7=ad.SqlExecuteUpdate(getUpdate19);

	
	
	String getReqestNumber="select MAX(Priority) as priority"
		    	+" from Material_Approvers app,"
			+"emp_official_info as emp"
		+" where Material_Type='"+help.getCategory()+"' and " 
		+"Material_Sub_Category='"+help.getSubcategory()+"' and "    
		+"LOCATION='"+help.getLocation()+"'";
int maxPriority=0;
ResultSet rsReqestNumber=ad.selectQuery(getReqestNumber);
try {
	if(rsReqestNumber.next())
	{
		maxPriority=rsReqestNumber.getInt(1);
	}
} catch (SQLException e) {

	e.printStackTrace();
}

int hodreq =0;

String chkreq=" select c_hod_req from CAT_SUBCAT_MASTER where c_prefix = 'SAP' and c_cat_name = '"+help.getCategory()+"' and c_sub_cat_name ='"+help.getSubcategory()+"'";
 ResultSet chk= ad.selectQuery(chkreq);
 try {
	while(chk.next())
	 {
		 hodreq=chk.getInt(1);
	 }
} catch (SQLException e1) {
	
	e1.printStackTrace();
}
 String Sqlstring ="";
 
if (hodreq ==1)
{	
 Sqlstring ="select 0 as priority ,"  
			+"isnull(All_Request.Actual_Approver ,PERNR ) as employeeCode,"
			+"isnull((select EMP_FULLNAME from emp_official_info e where e.PERNR = All_Request.Actual_Approver) , EMP_FULLNAME) as employeeName ,"
			+"DEPARTMENT.DPTLTXT as department,"
        +"DESIGNATION.DSGLTXT as designation,"
        +"All_Request.Req_Status ,"
        +"All_Request.Comments ,"
        +"ISNULL(All_Request.approved_date,All_Request.rejected_date) as date "
        +" from  DEPARTMENT,DESIGNATION ,ESS_Approvers ,emp_official_info "
		  +"left outer join All_Request on Req_type ='IT Sap Request' and "
        +"Req_Id = '"+reqId+"' and "
        +"emp_official_info.PERNR = All_Request.Last_Approver"
        +" where emp_official_info.DPTID  = DEPARTMENT.DPTID and "
        +"emp_official_info.DSGID  = DESIGNATION.DSGID and "
        +"emp_official_info.PERNR =  ESS_Approvers.ApproverId and "
       +"ESS_Approvers.employeeNumber = '"+help.getEmpno()+"'"
       +" union " 
      +"select app.priority as priority,"
      +"isnull(All_Request.Actual_Approver ,PERNR ) as employeeCode,"
		+"isnull((select EMP_FULLNAME from emp_official_info e where e.PERNR = All_Request.Actual_Approver) , EMP_FULLNAME) as employeeName ,"
        +"DEPARTMENT.DPTLTXT as department,"
		+"DESIGNATION.DSGLTXT as designation ,"
		+"All_Request.Req_Status ,"
        +"All_Request.Comments ,"
        +"ISNULL(All_Request.approved_date,All_Request.rejected_date) as date "
		+" from Material_Approvers app,"
		+" DEPARTMENT,DESIGNATION ,emp_official_info as emp  left outer join All_Request on Req_type ='IT Sap Request' and "
		 +"Req_Id = '"+reqId+"' and "
       +"emp.PERNR = All_Request.Last_Approver "
			+" where Material_Type='"+help.getCategory()+"' and " 
		+"Material_Sub_Category='"+help.getSubcategory()+"' and "  
		+"emp.PERNR=app.Approver_Id and " 
		+"LOCATION='"+help.getLocation()+"' and role ='USER' and "
		+"emp.DPTID  = DEPARTMENT.DPTID and "
		+"emp.DSGID  = DESIGNATION.DSGID" 
		+" Union "
		+"select '"+maxPriority+"' as priority ," 
		  +"isnull(All_Request.Actual_Approver ,PERNR ) as employeeCode,"
			 +"isnull((select EMP_FULLNAME from emp_official_info e where e.PERNR = All_Request.Actual_Approver) , EMP_FULLNAME) as employeeName ,"
		  +"DEPARTMENT.DPTLTXT as department,"
        +"DESIGNATION.DSGLTXT as designation ,"
        +"All_Request.Req_Status ,"
        +"All_Request.Comments ,"
        +"ISNULL(All_Request.approved_date,All_Request.rejected_date) as date "
        +" from DEPARTMENT,DESIGNATION ,emp_official_info "
		 +"Left Outer Join  All_Request on Req_type ='IT Sap Request' and" 
                 +" Req_Id = '"+reqId+"' and" 
                 +" convert(varchar(10),emp_official_info.PERNR) = All_Request.Last_Approver "  

       +" where emp_official_info.DPTID  = DEPARTMENT.DPTID and "
       +"emp_official_info.DSGID  = DESIGNATION.DSGID and "
       +"emp_official_info.PERNR = '"+help.getTechniciansID()+"'" 
		+" Order by 1";
}
else
{
	Sqlstring ="select app.priority as priority,"
      +"isnull(All_Request.Actual_Approver ,PERNR ) as employeeCode,"
		+"isnull((select EMP_FULLNAME from emp_official_info e where e.PERNR = All_Request.Actual_Approver) , EMP_FULLNAME) as employeeName ,"
        +"DEPARTMENT.DPTLTXT as department,"
		+"DESIGNATION.DSGLTXT as designation ,"
		+"All_Request.Req_Status ,"
        +"All_Request.Comments ,"
        +"ISNULL(All_Request.approved_date,All_Request.rejected_date) as date "
		+" from Material_Approvers app,"
		+" DEPARTMENT,DESIGNATION ,emp_official_info as emp  left outer join All_Request on Req_type ='IT Sap Request' and "
		 +"Req_Id = '"+reqId+"' and "
       +"emp.PERNR = All_Request.Last_Approver "
			+" where Material_Type='"+help.getCategory()+"' and " 
		+"Material_Sub_Category='"+help.getSubcategory()+"' and "  
		+"emp.PERNR=app.Approver_Id and " 
		+"LOCATION='"+help.getLocation()+"' and role ='USER' and "
		+"emp.DPTID  = DEPARTMENT.DPTID and "
		+"emp.DSGID  = DESIGNATION.DSGID" 
		+" Union "
		+"select '"+maxPriority+"' as priority ," 
		  +"isnull(All_Request.Actual_Approver ,PERNR ) as employeeCode,"
			 +"isnull((select EMP_FULLNAME from emp_official_info e where e.PERNR = All_Request.Actual_Approver) , EMP_FULLNAME) as employeeName ,"
		  +"DEPARTMENT.DPTLTXT as department,"
        +"DESIGNATION.DSGLTXT as designation ,"
        +"All_Request.Req_Status ,"
        +"All_Request.Comments ,"
        +"ISNULL(All_Request.approved_date,All_Request.rejected_date) as date "
        +" from DEPARTMENT,DESIGNATION ,emp_official_info "
		 +"Left Outer Join  All_Request on Req_type ='IT Sap Request' and" 
                 +" Req_Id = '"+reqId+"' and" 
                 +" convert(varchar(10),emp_official_info.PERNR) = All_Request.Last_Approver "  

       +" where emp_official_info.DPTID  = DEPARTMENT.DPTID and "
       +"emp_official_info.DSGID  = DESIGNATION.DSGID and "
       +"emp_official_info.PERNR = '"+help.getTechniciansID()+"'" 
		+" Order by 1";

}
             
   ResultSet rs=ad.selectQuery(Sqlstring);
   int i =0;
   String presentApp= "";
   String actualapp ="";
	
	try{
		while(rs.next()){
			//IssuesForm form1=new IssuesForm();
			ApprovalsForm form1 = new ApprovalsForm();
			i = i+1;
			
			presentApp = rs.getString("employeeCode");
			
					
					
						form1.setPriority(Integer.toString(i));
						//pendAppForm.setEmployeeCode(rs.getString("employeeCode"));
						
						form1.setEmployeeCode(rs.getString("employeeCode"));
						
						form1.setEmployeeName(rs.getString("employeeName"));
						
						//form1.setEmployeename(rs.getString("employeeName"));
						//pendAppForm.setDepartment(rs.getString("department"));
						form1.setDepartment(rs.getString("department"));
						//form1.setDesignation(rs.getString("designation"));
						form1.setDesignation(rs.getString("designation"));
						form1.setStatus(rs.getString("req_status"));
						form1.setComments(rs.getString("Comments"));
						form1.setDate(rs.getString("date"));
						
					
				
			
			//form1.setPriority(rs.getInt("priority"));
			
			
			apprList.add(form1);	
		}
		
		//file Upload path 
		 InputStream in =ConnectionFactory.class.getClassLoader().getResourceAsStream("db.properties");
	 	 Properties props = new Properties();
	 	 try {
			props.load(in);
		
		 in.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	 	 String uploadFilePath=props.getProperty("file.uploadFilePath");
	 	  System.out.println("required filepath="+uploadFilePath+"/EMicro Files/IT/Help Desk/SapIssues/UploadFiles/"+cate+"");
	 	String filePath=uploadFilePath+"/EMicro Files/IT/Help Desk/SapIssues/UploadFiles/"+cate+"";
		 filepath2="/EMicro Files/IT/Help Desk/SapIssues/UploadFiles/"+cate+"";
		String sql1="select * from Issues_document where request_no='"+reqId+"' and user_id='"+help.getEmpno()+"'";
		ResultSet rs11=ad.selectQuery(sql1);
		IssuesForm leaveForm1=null;
			ArrayList a1=new ArrayList();
			try {
				while(rs11.next()) {
					leaveForm1=new IssuesForm();
					String start = rs11.getString("file_name").substring(rs11.getString("file_name").indexOf("_")+1, rs11.getString("file_name").length()-1);
					leaveForm1.setFileName(start);
					//leaveForm1.setFileName(rs1.getString("file_name"));
					leaveForm1.setId(rs11.getString("id"));
					leaveForm1.setFileFullPath(filepath2+"/"+rs11.getString("file_name"));
					a1.add(leaveForm1);
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			request.setAttribute("requesterDetails", a1);
		
		String rol="select rol.role as role_manage,sap.sap_request_type,* from IT_SAP_ISSUES as sap,Role_SAP as rol where sap.ROLE=rol.id and sap.location=rol.location_id and  sap.Req_No='"+reqId+"'";
		ResultSet role1=ad.selectQuery(rol);
		while(role1.next())
		{
			help.setRoleId(role1.getString("role_manage"));
			help.setRequestName(role1.getString("sap_request_type"));
		
		if(role1.getString("Sub_Category")!=null)
		{
			if(role1.getString("Sub_Category").equalsIgnoreCase("Rename ID"))	
			{
				request.setAttribute("renameId", "renameId");
				help.setOldId(role1.getString("old_id"));
				help.setNewId(role1.getString("new_id"));
			}
		}
		}
	}catch(Exception e){
		e.printStackTrace();
	}
	request.setAttribute("apprList", apprList);
//--------
	
		forwardType = "sapitissueuserview";
		return mapping.findForward(forwardType);
		}
	
	public ActionForward getSelectedMatRequestToApprove(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws SQLException{

		
		
		ApprovalsForm pendAppForm=(ApprovalsForm) form;
		String reqId = request.getParameter("reqId");
		String reqType = pendAppForm.getReqRequstType();
		pendAppForm.setRequestType(reqType);
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		if(user==null){
			request.setAttribute("message","Session Expried! Try to Login again!");
	   		return mapping.findForward("displayiFrameSession");
		}
		String scount = Integer.toString(pendAppForm.getStartRecord());
		
		int totalRecords=pendAppForm.getTotalRecords();//21
		int startRecord=pendAppForm.getStartRecord();//11
		int endRecord=pendAppForm.getEndRecord();	
		String filterBy=pendAppForm.getSelectedFilter();
		
		pendAppForm.setTotalRecords(totalRecords);
		pendAppForm.setStartRecord(startRecord);
		pendAppForm.setEndRecord(endRecord);
	pendAppForm.setSelectedFilter(filterBy);
		if(reqId==null && reqType==null){
			reqId=pendAppForm.getRequestNo();
			reqType=pendAppForm.getRequestType();
		}
		int startCount = 0;
		int endCount = 0;
		if(scount == null){
			request.setAttribute("noRecords","noRecords");
			pendAppForm.setAppMessage("Request Approved Successfully!");
		}
		if(scount != null){
			startCount=Integer.parseInt(scount);
			endCount=endRecord;
			pendAppForm.setStartRecord(startCount);
			pendAppForm.setEndRecord(endCount);
		}
		setAllCount(pendAppForm, pendAppForm.getTotalAppCount(), startCount, endCount);
		request.setAttribute("header", reqType+"For Approve");
		String tName="leave";
		setFilterType(reqType, pendAppForm);
		String uName = user.getUserName();
		UserDao adMPM=new UserDao();
		EssDao ad=new EssDao();
		
		try{
			if(reqType.equalsIgnoreCase("Material Master"))
			{

				String matType="";
				
				String location="";
				String matGroup="";
				String matDetails="select loc.LOCATION_CODE,mat.MATERIAL_GROUP_ID,mat.type from material_code_request as mat,Location as loc  where mat.REQUEST_NO='"+reqId+"' and mat.LOCATION_ID=loc.LOCID";
				ResultSet rsDetails=ad.selectQuery(matDetails);
				try {
					if(rsDetails.next())
					{
						location=rsDetails.getString("LOCATION_CODE");
						matGroup=rsDetails.getString("MATERIAL_GROUP_ID");
						matType=rsDetails.getString("type");
					}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				if(matType.equals("FG")||matType.equals("HAWA")){
					 matDetails="select loc.LOCATION_CODE,mat.Type,mat.CREATED_BY,mat.DOMESTIC_OR_EXPORTS from material_code_request as mat,Location as loc  where mat.REQUEST_NO='"+reqId+"' and mat.LOCATION_ID=loc.LOCID";
					 rsDetails=ad.selectQuery(matDetails);
					try {
						while(rsDetails.next())
						{
							
							matGroup=rsDetails.getString("DOMESTIC_OR_EXPORTS");
							if(matGroup.equals("D"))
								matGroup="Domestic";
							if(matGroup.equals("E"))
								matGroup="Export";
							if(matGroup.equals("V"))
								matGroup="V";
						}
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				String userRole="";
				int checkStatus=0;
				String getUserRole="select Priority,Role from  Material_Approvers where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' AND (Approver_Id='"+user.getEmployeeNo()+"' OR Parllel_Approver_1='"+user.getEmployeeNo()+"' OR Parllel_Approver_2='"+user.getEmployeeNo()+"') ";
				ResultSet rsUserRole=ad.selectQuery(getUserRole);
				try {
					while(rsUserRole.next())
					{
						checkStatus=1;
						userRole=rsUserRole.getString("Role");
					}
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				if(checkStatus==0)
				{
					getUserRole="select Priority,Role from  Material_Approvers where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' AND (Approver_Id='"+user.getEmployeeNo()+"' OR Parllel_Approver_1='"+user.getEmployeeNo()+"' OR Parllel_Approver_2='"+user.getEmployeeNo()+"') ";
					rsUserRole=ad.selectQuery(getUserRole);
					try {
						while(rsUserRole.next())
						{
							userRole=rsUserRole.getString("Role");
						}
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				pendAppForm.setUserRole(userRole);
				
				//rejected Status 
				String getRejectedStatus="select rejected_flag from material_code_request where REQUEST_NO='"+reqId+"'";
				ResultSet rsRejected=ad.selectQuery(getRejectedStatus);
				try {
					while(rsRejected.next())
					{
						String rejected_flag=rsRejected.getString("rejected_flag");
						if(rejected_flag!=null)
						{
							if(rejected_flag.equalsIgnoreCase("y"))
								request.setAttribute("rejectedFLag", "rejectedFLag");
						}
					}
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				
			
				if(matType.equalsIgnoreCase("ZCIV")||matType.equalsIgnoreCase("ZCON")||matType.equalsIgnoreCase("ZITC")||matType.equalsIgnoreCase("LC")
						||matType.equalsIgnoreCase("ZPFL")||matType.equalsIgnoreCase("ZSCR"))
			     {
					
					if(userRole.equalsIgnoreCase("User"))
					{
						String getFinishedProduct="select mat.HSN_Code,mat.REQUEST_NO,mat.MATERIAL_GROUP_ID,mat.REQUEST_DATE,loc.LOCNAME,loc.LOCATION_CODE,stLoc.STORAGE_LOCATION_NAME,stLoc.MAT_TYPE," +
						"mat.MATERIAL_SHORT_NAME, mat.MATERIAL_LONG_NAME,matGroup.STXT,uom.LTXT,pur.PURCHASE_GROUP_DESC,mat.is_asset,dep.DPTSTXT" +
						",mat.APPROXIMATE_VALUE, val.VALUATION_DESC,mat.DETAILED_JUSTIFICATION,	mat.DETAILED_SPECIFICATION,mat.rejected_flag from " +
						"material_code_request as mat,Location as loc,STORAGE_LOCATION as stLoc,MATERIAL_GROUP as matGroup , " +
						"UNIT_MESUREMENT AS uom ,PURCHASE_GROUP as pur ,VALUATION_CLASS as val ,DEPARTMENT as dep where REQUEST_NO='"+reqId+"' and	" +
						"loc.LOCID=mat.LOCATION_ID and stLoc.STORAGE_LOCATION_ID=mat.STORAGE_LOCATION_ID and matGroup.MATERIAL_GROUP_ID=mat.MATERIAL_GROUP_ID " +
						"and uom.UNIT_OF_MEAS_ID=mat.UNIT_OF_MEAS_ID and pur.PURCHASE_GROUP_ID=mat.PURCHASE_GROUP_ID and TYPE='"+matType+"' and val.VALUATION_ID=mat.VALUATION_CLASS" +
						" and dep.DPTID=mat.UTILIZING_DEPT";
				
				ResultSet rs=ad.selectQuery(getFinishedProduct);
				try {
					if(rs.next())
					{

						pendAppForm.setRequestNo(reqId);
						pendAppForm.setRequestNumber(reqId);
						pendAppForm.setReqMaterialGroup(rs.getString("MATERIAL_GROUP_ID"));
						pendAppForm.setLocationId(rs.getString("LOCATION_CODE")+"-"+rs.getString("LOCNAME"));
						pendAppForm.setRequestNumber(reqId);
						String reqDate=rs.getString("REQUEST_DATE");
						String a[]=reqDate.split(" ");
						reqDate=a[0];
						String b[]=reqDate.split("-");
						reqDate=b[2]+"/"+b[1]+"/"+b[0];
						pendAppForm.setRequestDate(reqDate);
						
						pendAppForm.setHsnCode(rs.getString("HSN_Code"));
						pendAppForm.setStorageLocationId(rs.getString("MAT_TYPE")+"-"+rs.getString("STORAGE_LOCATION_NAME"));
						pendAppForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME"));
						pendAppForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME"));
						pendAppForm.setMaterialGroupId(rs.getString("STXT"));
						pendAppForm.setPuchaseGroupId(rs.getString("PURCHASE_GROUP_DESC"));
						pendAppForm.setUnitOfMeasId(rs.getString("LTXT"));
						pendAppForm.setApproximateValue(rs.getString("APPROXIMATE_VALUE"));
						pendAppForm.setValuationClass(rs.getString("VALUATION_DESC"));
						pendAppForm.setUtilizingDept(rs.getString("DPTSTXT"));
						String isAsset=rs.getString("is_asset");
						
						if(isAsset.equalsIgnoreCase("1"))
						{
							pendAppForm.setIsAsset("YES");
						}
						if(isAsset.equalsIgnoreCase("0"))
							pendAppForm.setIsAsset("NO");
						pendAppForm.setDetailedJustification(rs.getString("DETAILED_JUSTIFICATION"));
						pendAppForm.setDetailedSpecification(rs.getString("DETAILED_SPECIFICATION"));
						
						String rejected_flag=rs.getString("rejected_flag");
						if(rejected_flag!=null)
						{
							if(rejected_flag.equalsIgnoreCase("y"))
								request.setAttribute("rejectedFLag", "rejectedFLag");
						}

					
					}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
					}else{
						
						
						
						String getCountryDetails="select * from Country";
						LinkedList countryID=new LinkedList();
						LinkedList countryName=new LinkedList();
						ResultSet rsCountryDetails=ad.selectQuery(getCountryDetails);
						try {
							while(rsCountryDetails.next()){
								countryID.add(rsCountryDetails.getString("LAND1"));
								countryName.add(rsCountryDetails.getString("LANDX"));
							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						pendAppForm.setCounID(countryID);
						pendAppForm.setCountryName(countryName);
						String materialType="";
						String valuationType="";
						String getvaluationType="select MATERIAL_TYPE_ID,VALUATION_CLASS from material_code_request where REQUEST_NO='"+reqId+"'";
						ResultSet rsValuationType=ad.selectQuery(getvaluationType);
						try {
							while(rsValuationType.next()){
								materialType=rsValuationType.getString("MATERIAL_TYPE_ID");
								valuationType=rsValuationType.getString("VALUATION_CLASS");
							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						
						LinkedList storageID=new LinkedList();
						LinkedList storageName=new LinkedList();
						String getStorageDetails="select * from STORAGE_LOCATION where  MAT_TYPE='"+matType+"'";
						ResultSet rsStrogeLocation=ad.selectQuery(getStorageDetails);
						try {
							while(rsStrogeLocation.next()){
								storageID.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID"));
								storageName.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID")+" - "+rsStrogeLocation.getString("STORAGE_LOCATION_NAME"));
							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						pendAppForm.setStorageID(storageID);
						pendAppForm.setStorageIDName(storageName);
						
						ResultSet rs11 = ad.selectQuery("select LOCID," +
						"LOCNAME,location_code from location");
						ArrayList locationList=new ArrayList();
						ArrayList locationLabelList=new ArrayList();
						
						try {
							while(rs11.next()) {
								locationList.add(rs11.getString("LOCID"));
								locationLabelList.add(rs11.getString("LOCATION_CODE")+" - "+rs11.getString("LOCNAME"));
							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						pendAppForm.setLocationIdList(locationList);
						pendAppForm.setLocationLabelList(locationLabelList);
						
						LinkedList materTypeIDList=new LinkedList();
						LinkedList materialTypeIdValueList=new LinkedList();
						String getMaterials="select * from MATERIAL_TYPE";
						ResultSet rsMaterial=ad.selectQuery(getMaterials);
						try {
							while(rsMaterial.next())
							{
								materTypeIDList.add(rsMaterial.getString("id"));
								materialTypeIdValueList.add(rsMaterial.getString("MATERIAL_GROUP_ID")+" - "+rsMaterial.getString("M_DESC"));
							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						pendAppForm.setMaterTypeIDList(materTypeIDList);
						pendAppForm.setMaterialTypeIdValueList(materialTypeIdValueList);
						
						LinkedList materGroupIDList=new LinkedList();
						LinkedList materialGroupIdValueList=new LinkedList();
						String getMaterialGroup="select * from MATERIAL_GROUP where MATERIAL_TYPE like '%"+matType+"%' order by STXT";
						ResultSet rsMaterialGroup=ad.selectQuery(getMaterialGroup);
						try {
							while(rsMaterialGroup.next())
							{
								materGroupIDList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID"));
								materialGroupIdValueList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID")+" - "+rsMaterialGroup.getString("STXT"));
							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						pendAppForm.setMaterGroupIDList(materGroupIDList);
						pendAppForm.setMaterialGroupIdValueList(materialGroupIdValueList);
						
						
						LinkedList unitOfMeasIdList=new LinkedList();
						LinkedList unitOfMeasIdValues=new LinkedList();
						
						LinkedList deptID=new LinkedList();
						LinkedList deptName=new LinkedList();
						String getdepartment="select * from department";
						ResultSet rsdepartment=ad.selectQuery(getdepartment);
						while(rsdepartment.next()){
							deptID.add(rsdepartment.getInt("DPTID"));
							deptName.add(rsdepartment.getString("DPTSTXT"));
						}
						
						pendAppForm.setDeptId(deptID);
						pendAppForm.setDeptName(deptName);
						String getunitMesurement="select * from UNIT_MESUREMENT order by UNIT_OF_MEAS_ID";
						ResultSet rsUnit=ad.selectQuery(getunitMesurement);
						while(rsUnit.next())
						{
							unitOfMeasIdList.add(rsUnit.getString("UNIT_OF_MEAS_ID"));
							unitOfMeasIdValues.add(rsUnit.getString("UNIT_OF_MEAS_ID")+" - "+rsUnit.getString("LTXT"));
						}
						pendAppForm.setUnitOfMeasIdList(unitOfMeasIdList);
						pendAppForm.setUnitOfMeasIdValues(unitOfMeasIdValues);
						
						
						LinkedList valuationClassID=new LinkedList();
						LinkedList valuationClassName=new LinkedList();
						String getValuation="select * from VALUATION_CLASS where MAT_TYPE='"+matType+"'";
						ResultSet rsValuation=ad.selectQuery(getValuation);
						while(rsValuation.next())
						{
							valuationClassID.add(rsValuation.getString("VALUATION_ID"));
							valuationClassName.add(rsValuation.getString("VALUATION_ID")+" - "+rsValuation.getString("VALUATION_DESC"));
						}
						pendAppForm.setValuationClassID(valuationClassID);
						pendAppForm.setValuationClassName(valuationClassName);
						
						LinkedList puchaseGroupIdList=new LinkedList();
						LinkedList puchaseGroupIdValues=new LinkedList();
						
						String getPurchaseGroup="select * from PURCHASE_GROUP";
						ResultSet rsPurchaseGroup=ad.selectQuery(getPurchaseGroup);
						while(rsPurchaseGroup.next())
						{
							puchaseGroupIdList.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID"));
							puchaseGroupIdValues.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID")+" - "+rsPurchaseGroup.getString("PURCHASE_GROUP_DESC"));
						}
						pendAppForm.setPuchaseGroupIdList(puchaseGroupIdList);
						pendAppForm.setPuchaseGroupIdValues(puchaseGroupIdValues);
						
						String getFinishedProduct="select * from material_code_request where REQUEST_NO='"+reqId+"'";
						ResultSet rs=ad.selectQuery(getFinishedProduct);
						while(rs.next())
						{

							pendAppForm.setRequestNo(reqId);
							pendAppForm.setRequestNumber(reqId);
							pendAppForm.setReqMaterialGroup(rs.getString("MATERIAL_GROUP_ID").toUpperCase());
							
							String reqDate=rs.getString("REQUEST_DATE");
							String a[]=reqDate.split(" ");
							reqDate=a[0];
							String b[]=reqDate.split("-");
							reqDate=b[2]+"/"+b[1]+"/"+b[0];
							pendAppForm.setRequestDate(reqDate.toUpperCase());
							pendAppForm.setHsnCode(rs.getString("HSN_Code"));
							pendAppForm.setLocationId(rs.getString("LOCATION_ID").toUpperCase());
							pendAppForm.setMaterialTypeId(rs.getString("MATERIAL_TYPE_ID").toUpperCase());
							pendAppForm.setStorageLocationId(rs.getString("STORAGE_LOCATION_ID").toUpperCase());
							pendAppForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME").toUpperCase());
							pendAppForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME").toUpperCase());
							pendAppForm.setMaterialGroupId(rs.getString("MATERIAL_GROUP_ID").toUpperCase());
							pendAppForm.setPuchaseGroupId(rs.getString("PURCHASE_GROUP_ID").toUpperCase());
							pendAppForm.setUnitOfMeasId(rs.getString("UNIT_OF_MEAS_ID"));
							pendAppForm.setApproximateValue(rs.getString("APPROXIMATE_VALUE").toUpperCase());
							pendAppForm.setValuationClass(rs.getString("VALUATION_CLASS").toUpperCase());
					/*		masterForm.setMaterialUsedIn(rs.getString("MATERIAL_USED_IN"));
							String isEquipment=rs.getString("IS_EQUIPMENT");
							if(isEquipment.equalsIgnoreCase("1"))
							{
								masterForm.setIsEquipment("True");
							}
							if(isEquipment.equalsIgnoreCase("0"))
								masterForm.setIsEquipment("False");
							
							String isSpare=rs.getString("IS_SPARE");
							if(isSpare.equalsIgnoreCase("1"))
							{
								masterForm.setIsSpare("True");
							}
							if(isSpare.equalsIgnoreCase("0"))
								masterForm.setIsSpare("False");
							
							String isNew=rs.getString("IS_NEW");
							if(isNew.equalsIgnoreCase("1"))
							{
								masterForm.setIsNew("True");
							}
							if(isNew.equalsIgnoreCase("0"))
								masterForm.setIsNew("False");
							
							
							masterForm.setEquipmentName(rs.getString("EQUIPMENT_NAME"));
							masterForm.setPrNumber(rs.getString("PR_NUMBER"));
							masterForm.setPoNumber(rs.getString("PO_NUMBER"));*/
							pendAppForm.setUtilizingDept(rs.getString("UTILIZING_DEPT").toUpperCase());
							String isAsset=rs.getString("is_asset");
							if(isAsset.equalsIgnoreCase("1"))
							{
								pendAppForm.setIsAsset("1");
							}
							if(isAsset.equalsIgnoreCase("0"))
								pendAppForm.setIsAsset("0");
							pendAppForm.setDetailedJustification(rs.getString("DETAILED_JUSTIFICATION").toUpperCase());
							pendAppForm.setDetailedSpecification(rs.getString("DETAILED_SPECIFICATION").toUpperCase());
							pendAppForm.setPurposeID(rs.getString("PURPOSE_ID"));
							
							String sapCodeno=rs.getString("SAP_CODE_NO");
							if(sapCodeno!=null){
						pendAppForm.setSapCodeNo(sapCodeno);		
						String sapCodeExist=rs.getString("SAP_CODE_EXISTS");
						if(sapCodeExist.equalsIgnoreCase("1"))
						{
							pendAppForm.setSapCodeExists("On");
						}
						if(sapCodeExist.equalsIgnoreCase("0"))
							pendAppForm.setSapCodeExistsNo("On");
						String sapCreationDate=rs.getString("SAP_CREATION_DATE");
						String sapDate[]=sapCreationDate.split(" ");
						sapCreationDate=sapDate[0];
						String sapCode[]=sapCreationDate.split("-");
						sapCreationDate=sapCode[2]+"/"+sapCode[1]+"/"+sapCode[0];
						pendAppForm.setSapCreationDate(sapCreationDate);
						pendAppForm.setSapCreatedBy(rs.getString("SAP_CREATED_BY"));
						pendAppForm.setRequestedBy(rs.getString("REQUESTED_BY"));
						pendAppForm.setHsnCode(rs.getString("HSN_Code"));
							}
							
					 		

						
						}
						
					}
					
					if(filterBy.equalsIgnoreCase("Pending")){
    					request.setAttribute("approveButton", "approveButton");
    					request.setAttribute("rejectButton", "rejectButton");
    				}
    				
    				
    				
    				
    				
    				//set ApproverDetails 
    				checkStatus=0;int appStatus=0;
    				LinkedList listApprers=new LinkedList();
    				String getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
    				"where mast.Location='"+location+"' AND  mast.Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mast.Approver_Id=emp.PERNR order by Priority";
    				ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
    				while(rsApprDetails.next())
    				{
    					checkStatus=1;
    					ApprovalsForm apprvers=new ApprovalsForm();
    					apprvers.setPriority(rsApprDetails.getString("Priority"));
    					apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
    					String empCode=rsApprDetails.getString("Approver_Id");
    					String approveStatus="";
    					String actualapprover="";
    					boolean data=false;
    					String recordStatus="select mast.Priority,mast.Approver_Id,mast.Parllel_Approver_1,mast.Parllel_Approver_2,all_r.Actual_Approver,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
    					"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
    					"mast.Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
    					"or mast.Role='Creator') and mast.Approver_Id=emp.PERNR and all_r.req_type='Material Master' group by mast.Priority,mast.Priority,mast.Approver_Id,mast.Parllel_Approver_1,mast.Parllel_Approver_2,all_r.Actual_Approver,emp.EMP_FULLNAME,all_r.Req_Status," +
    					"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
    					ResultSet rsAppInfo=ad.selectQuery(recordStatus);
    					while(rsAppInfo.next())
    					{
    						actualapprover=rsAppInfo.getString("Actual_Approver");
							if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Approver_Id")))
							{
								apprvers.setEmployeeCode(rsAppInfo.getString("Approver_Id"));
								data=true;
							}
							if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Parllel_Approver_1")))
							{
								apprvers.setEmployeeCode(rsAppInfo.getString("Parllel_Approver_1"));
								data=true;
							}
							if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Parllel_Approver_2")))
							{
								apprvers.setEmployeeCode(rsAppInfo.getString("Parllel_Approver_2"));
								data=true;
							}
    						apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
    						approveStatus=rsAppInfo.getString("Req_Status");
    						if(approveStatus.equalsIgnoreCase(""))
    						{
    							apprvers.setApproveStatus("In Process");
    						}
    						if(approveStatus.equalsIgnoreCase("Approved")|| approveStatus.equalsIgnoreCase("Completed"))
    						{
    						apprvers.setDate(rsAppInfo.getString("approved_date"));
    						}else{
    							apprvers.setDate(rsAppInfo.getString("rejected_date"));
    							appStatus=1;
    						}
    						String comments=rsAppInfo.getString("Comments");
    						if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
    						{
    							apprvers.setComments("");
    						}else{
    							apprvers.setComments(rsAppInfo.getString("Comments"));
    						}
    						
    						
    					}
    					if(approveStatus.equalsIgnoreCase("") && appStatus==0)
    					{
    						apprvers.setApproveStatus("In Process");
    					}
    					String pernr="";

    					if(data==true)
    					{
    						pernr=actualapprover;
    					}
    					else
    					{
    						pernr=rsApprDetails.getString("Approver_Id");
    					}						
    				
    						
    						
    					String name="select EMP_FULLNAME from emp_official_info where PERNR='"+pernr+"'";
    					ResultSet rsname=ad.selectQuery(name);
    					if(rsname.next())
    					{
    						apprvers.setEmployeeName(rsname.getString("EMP_FULLNAME"));
    					}
    					listApprers.add(apprvers);
    				}
    				if(checkStatus==0)
    				{
    					getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
    					"where mast.Location='"+location+"' AND  mast.Material_Type='"+matType+"' AND Material_Group='' and mast.Approver_Id=emp.PERNR order by Priority";
    					rsApprDetails=ad.selectQuery(getApprDetails);
    					while(rsApprDetails.next())
    					{
    						checkStatus=1;
    						ApprovalsForm apprvers=new ApprovalsForm();
    						apprvers.setPriority(rsApprDetails.getString("Priority"));
    						apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
    						String empCode=rsApprDetails.getString("Approver_Id");
    						String approveStatus="";
    						String actualapprover="";
    						boolean data=false;
    						String recordStatus="select mast.Priority,mast.Approver_Id,mast.Parllel_Approver_1,mast.Parllel_Approver_2,all_r.Actual_Approver,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
    						"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
    						"mast.Material_Type='"+matType+"' AND Material_Group='' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
    						"or mast.Role='Creator') and mast.Approver_Id=emp.PERNR  and all_r.req_type='Material Master' group by mast.Priority,mast.Priority,mast.Approver_Id,mast.Parllel_Approver_1,mast.Parllel_Approver_2,all_r.Actual_Approver,emp.EMP_FULLNAME,all_r.Req_Status," +
    						"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
    						ResultSet rsAppInfo=ad.selectQuery(recordStatus);
    						while(rsAppInfo.next())
    						{
    							
    							actualapprover=rsAppInfo.getString("Actual_Approver");
    							if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Approver_Id")))
    							{
    								apprvers.setEmployeeCode(rsAppInfo.getString("Approver_Id"));
    								data=true;
    							}
    							if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Parllel_Approver_1")))
    							{
    								apprvers.setEmployeeCode(rsAppInfo.getString("Parllel_Approver_1"));
    								data=true;
    							}
    							if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Parllel_Approver_2")))
    							{
    								apprvers.setEmployeeCode(rsAppInfo.getString("Parllel_Approver_2"));
    								data=true;
    							}
    							apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
    							approveStatus=rsAppInfo.getString("Req_Status");
    							
    							if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
    							{
    							String approveDate=	rsAppInfo.getString("approved_date");
    							
    							String a[]=approveDate.split(" ");
    							approveDate=a[0];
    							String b[]=approveDate.split("-");
    							approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
    							
    							apprvers.setDate(approveDate);
    							}else{
    								String rejectDate=	rsAppInfo.getString("rejected_date");
    								appStatus=1;
    								String a[]=rejectDate.split(" ");
    								rejectDate=a[0];
    								String b[]=rejectDate.split("-");
    								rejectDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
    								apprvers.setDate(rejectDate);
    							}
    							String comments=rsAppInfo.getString("Comments");
    							if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
    							{
    								apprvers.setComments("");
    							}else{
    								apprvers.setComments(rsAppInfo.getString("Comments"));
    							}
    						}
    						if(approveStatus.equalsIgnoreCase("") && appStatus==0)
    						{
    							apprvers.setApproveStatus("In Process");
    						}
    						String pernr="";

    						if(data==true)
        					{
        						pernr=actualapprover;
        					}
        					else
        					{
        						pernr=rsApprDetails.getString("Approver_Id");
        					}						
    							
    							
    						String name="select EMP_FULLNAME from emp_official_info where PERNR='"+pernr+"'";
    						ResultSet rsname=ad.selectQuery(name);
    						if(rsname.next())
    						{
    							apprvers.setEmployeeName(rsname.getString("EMP_FULLNAME"));
    						}
    						listApprers.add(apprvers);
    				}
    				}
    				request.setAttribute("approverDetails", listApprers);
    				
    				if(userRole.equalsIgnoreCase("User"))
    				{
    				return mapping.findForward("GeneralMaterial");
    				}
    				if(userRole.equalsIgnoreCase("Accounts"))
    				{
    				return mapping.findForward("GeneralMaterial_Account");
    				}
    				if(userRole.equalsIgnoreCase("Creator"))
    				{
    					Date dNow = new Date( );
    					 SimpleDateFormat ft = new SimpleDateFormat ("dd/MM/yyyy");
    						String dateNow = ft.format(dNow);
    						pendAppForm.setSapCreationDate(dateNow);
    					pendAppForm.setSapCreatedBy(user.getEmployeeNo()+"-"+user.getFullName());
    					
    				return mapping.findForward("GeneralMaterial_Creator");
    				}
					
					
					
			     }
				
				if(matType.equalsIgnoreCase("PPC"))
				{
					if(userRole.equalsIgnoreCase("User"))
					{

	  	  			 		
 		   			 		
	   			 		String getFinishedProduct="select mat.HSN_Code,mat.BRAND_ID,mat.REQUEST_NO,mat.REQUEST_DATE,loc.LOCNAME,loc.LOCATION_CODE,stLoc.MAT_TYPE,stLoc.STORAGE_LOCATION_NAME," +
	   			 		"mat.MATERIAL_SHORT_NAME, mat.MATERIAL_LONG_NAME,matGroup.STXT,uom.LTXT,pur.PURCHASE_GROUP_DESC, div.DIV_DESC," +
	   			 		"mat.is_asset,mat.PURPOSE_ID,mat.IS_SAS_FORM_AVAILABLE,mat.APPROXIMATE_VALUE, val.VALUATION_DESC,mat.DETAILED_JUSTIFICATION," +
	   			 		"mat.DETAILED_SPECIFICATION from material_code_request as mat,Location as loc,STORAGE_LOCATION as stLoc,MATERIAL_GROUP as " +
	   			 		"matGroup , UNIT_MESUREMENT AS uom ,PURCHASE_GROUP as pur,DIVISION as div,VALUATION_CLASS as val where REQUEST_NO='"+reqId+"' and " +
	   			 		"loc.LOCID=mat.LOCATION_ID and stLoc.STORAGE_LOCATION_ID=mat.STORAGE_LOCATION_ID and matGroup.MATERIAL_GROUP_ID=mat.MATERIAL_GROUP_ID " +
	   			 		"and uom.UNIT_OF_MEAS_ID=mat.UNIT_OF_MEAS_ID and pur.PURCHASE_GROUP_ID=mat.PURCHASE_GROUP_ID and div.DIV_CODE=mat.DIVISION_ID  " +
	   			 		"and val.VALUATION_ID=mat.VALUATION_CLASS and Type='PPC'"; 
	   			 				
	   			 		ResultSet rs=ad.selectQuery(getFinishedProduct);
	   			 		
	   			 	
	   			 			while(rs.next())
	   					{
	   			 				String  str=rs.getString("STORAGE_LOCATION_NAME");
	   			 		 		if(str.equalsIgnoreCase("Printed Material")||str.equalsIgnoreCase("General Material")||str.equalsIgnoreCase("Complement store"))
	   			 		 		{	
	   			 		 			pendAppForm.setRequestNo(reqId);
	   								pendAppForm.setRequestNumber(reqId);
	   						String reqDate=rs.getString("REQUEST_DATE");
	   						String a[]=reqDate.split(" ");
	   						reqDate=a[0];
	   						String b[]=reqDate.split("-");
	   						reqDate=b[2]+"/"+b[1]+"/"+b[0];
	   						pendAppForm.setRequestDate(reqDate);
	   						pendAppForm.setLocationId(rs.getString("LOCATION_CODE")+"-"+rs.getString("LOCNAME"));
	   						pendAppForm.setBrandID(rs.getString("BRAND_ID"));
	   						pendAppForm.setStorageLocationId(rs.getString("MAT_TYPE")+"-"+rs.getString("STORAGE_LOCATION_NAME"));
	   						pendAppForm.setHsnCode(rs.getString("HSN_Code"));
	   						pendAppForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME"));
	   						pendAppForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME"));
	   						pendAppForm.setMaterialGroupId(rs.getString("STXT"));
	   						pendAppForm.setUnitOfMeasId(rs.getString("LTXT"));
	   						pendAppForm.setPuchaseGroupId(rs.getString("PURCHASE_GROUP_DESC"));
	   						pendAppForm.setDivisionId(rs.getString("DIV_DESC"));
	   						String isAsset=rs.getString("is_asset");
	   						if(isAsset.equalsIgnoreCase("1"))
	   						{
	   							pendAppForm.setIsAsset("YES");
	   						}
	   						if(isAsset.equalsIgnoreCase("0")){
	   							pendAppForm.setIsAsset("NO");
	   						}
	   						pendAppForm.setApproximateValue(rs.getString("APPROXIMATE_VALUE"));
	   						pendAppForm.setValuationClass(rs.getString("VALUATION_DESC"));
	   						pendAppForm.setDetailedJustification(rs.getString("DETAILED_JUSTIFICATION"));
	   						pendAppForm.setDetailedSpecification(rs.getString("DETAILED_SPECIFICATION"));
	   						
	   						String purposeId=rs.getString("PURPOSE_ID");
	   					    if(purposeId.equalsIgnoreCase("1"))
	   					    {
	   					    	pendAppForm.setPurposeID("Gift & Compliments");
	   					    	
	   					    }
	   					    if(purposeId.equalsIgnoreCase("2"))
	   					    {
	   					    	pendAppForm.setPurposeID("Propaganda & Promotional (KUDLU DEPOT)");
	   					    	
	   					    }
	   					    if(purposeId.equalsIgnoreCase("3"))
	   					    {
	   					    	pendAppForm.setPurposeID("Product Launch Exp");
	   					    	
	   					    }
	   					    if(purposeId.equalsIgnoreCase("4"))
	   					    {
	   					    	pendAppForm.setPurposeID("Sales Promotional (SAS)");
	   					    	
	   					    }
	   					    if(purposeId.equalsIgnoreCase("5"))
	   					    {
	   					    	pendAppForm.setPurposeID("Visual Ads,Literature");
	   					    	
	   					    }
	   						
	   					    if(purposeId.equalsIgnoreCase("6"))
	   					    {
	   					    	pendAppForm.setPurposeID("Conference,National & Regional");
	   					    	
	   					    }
	   					    if(purposeId.equalsIgnoreCase("7"))
	   					    {
	   					    	pendAppForm.setPurposeID("Incentive to Field Staff");
	   					    	
	   					    }
	   					    if(purposeId.equalsIgnoreCase("8"))
	   					    {
	   					    	pendAppForm.setPurposeID("Incentive to Stockist/Chemist");
	   					    	
	   					    }
	   					    if(purposeId.equalsIgnoreCase("9"))
	   					    {
	   					    	pendAppForm.setPurposeID("Travelling Lodging & Boarding Exp");
	   					    	
	   					    }
	   						
	   					   
	   						String isSAS=rs.getString("IS_SAS_FORM_AVAILABLE");
	   						
	   						if(isSAS.equalsIgnoreCase("1"))
	   						{
	   							pendAppForm.setIsSASFormAvailable("YES");
	   						}
	   						if(isSAS.equalsIgnoreCase("0")){
	   							pendAppForm.setIsSASFormAvailable("NO");
	   			 		
	   					}
	   						
	   			    
	   			 		
	   			     }
	   			 		 		}
	   			 		
					}else{
	
						LinkedList brandIDList=new LinkedList();
						LinkedList brandNameList=new LinkedList();
						String getBrand="select * from BRAND order by BRAND_DESC";
						ResultSet rsBrand=ad.selectQuery(getBrand);
						while(rsBrand.next())
						{
							brandIDList.add(rsBrand.getString("BRAND_CODE"));
							brandNameList.add(rsBrand.getString("BRAND_DESC"));
						}
						pendAppForm.setBrandIDList(brandIDList);
						pendAppForm.setBrandNameList(brandNameList);
						
						String getCountryDetails="select * from Country";
						LinkedList countryID=new LinkedList();
						LinkedList countryName=new LinkedList();
						ResultSet rsCountryDetails=ad.selectQuery(getCountryDetails);
						while(rsCountryDetails.next()){
							countryID.add(rsCountryDetails.getString("LAND1"));
							countryName.add(rsCountryDetails.getString("LANDX"));
						}
						pendAppForm.setCounID(countryID);
						pendAppForm.setCountryName(countryName);
					
						
						ResultSet rs11 = ad.selectQuery("select * from location");
						ArrayList locationList=new ArrayList();
						ArrayList locationLabelList=new ArrayList();
						
						while(rs11.next()) {
							locationList.add(rs11.getString("LOCID"));
							locationLabelList.add(rs11.getString("LOCATION_CODE")+"-"+rs11.getString("LOCNAME"));
							
						}
						pendAppForm.setLocationIdList(locationList);
						pendAppForm.setLocationLabelList(locationLabelList);
						
						LinkedList divisonID=new LinkedList();
						LinkedList divisonName=new LinkedList();
						String getDivison="select * from DIVISION";
						ResultSet rsDivison=ad.selectQuery(getDivison);
						while(rsDivison.next())
						{
							divisonID.add(rsDivison.getString("DIV_CODE"));
							divisonName.add(rsDivison.getString("DIV_DESC"));
						}
						pendAppForm.setDivisonID(divisonID);
						pendAppForm.setDivisonName(divisonName);
						LinkedList materTypeIDList=new LinkedList();
						LinkedList materialTypeIdValueList=new LinkedList();
						String getMaterials="select * from MATERIAL_TYPE";
						ResultSet rsMaterial=ad.selectQuery(getMaterials);
						while(rsMaterial.next())
						{
							materTypeIDList.add(rsMaterial.getString("id"));
							materialTypeIdValueList.add(rsMaterial.getString("MATERIAL_GROUP_ID")+"-"+rsMaterial.getString("M_DESC"));
						}
						pendAppForm.setMaterTypeIDList(materTypeIDList);
						pendAppForm.setMaterialTypeIdValueList(materialTypeIdValueList);
						
						LinkedList materGroupIDList=new LinkedList();
						LinkedList materialGroupIdValueList=new LinkedList();
						String getMaterialGroup="select * from MATERIAL_GROUP where MATERIAL_TYPE like '%"+matType+"%' order by STXT";
						ResultSet rsMaterialGroup=ad.selectQuery(getMaterialGroup);
						while(rsMaterialGroup.next())
						{
							materGroupIDList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID"));
							materialGroupIdValueList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID")+"-"+rsMaterialGroup.getString("STXT"));
						}
						pendAppForm.setMaterGroupIDList(materGroupIDList);
						pendAppForm.setMaterialGroupIdValueList(materialGroupIdValueList);
						
						
						LinkedList unitOfMeasIdList=new LinkedList();
						LinkedList unitOfMeasIdValues=new LinkedList();
						
						String getunitMesurement="select * from UNIT_MESUREMENT";
						ResultSet rsUnit=ad.selectQuery(getunitMesurement);
						while(rsUnit.next())
						{
							unitOfMeasIdList.add(rsUnit.getString("UNIT_OF_MEAS_ID"));
							unitOfMeasIdValues.add(rsUnit.getString("UNIT_OF_MEAS_ID")+"-"+rsUnit.getString("LTXT"));
						}
						pendAppForm.setUnitOfMeasIdList(unitOfMeasIdList);
						pendAppForm.setUnitOfMeasIdValues(unitOfMeasIdValues);
						LinkedList storageID=new LinkedList();
						LinkedList storageName=new LinkedList();
						String getStorageDetails="select * from STORAGE_LOCATION where MAT_TYPE='PPC'";
						ResultSet rsStrogeLocation=ad.selectQuery(getStorageDetails);
						while(rsStrogeLocation.next()){
							storageID.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID"));
							storageName.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID")+"-"+rsStrogeLocation.getString("STORAGE_LOCATION_NAME"));
						}
						pendAppForm.setStorageID(storageID);
						pendAppForm.setStorageIDName(storageName);
						
						LinkedList puchaseGroupIdList=new LinkedList();
						LinkedList puchaseGroupIdValues=new LinkedList();
						
						String getPurchaseGroup="select * from PURCHASE_GROUP";
						ResultSet rsPurchaseGroup=ad.selectQuery(getPurchaseGroup);
						while(rsPurchaseGroup.next())
						{
							puchaseGroupIdList.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID"));
							puchaseGroupIdValues.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID")+"-"+rsPurchaseGroup.getString("PURCHASE_GROUP_DESC"));
						}
						pendAppForm.setPuchaseGroupIdList(puchaseGroupIdList);
						pendAppForm.setPuchaseGroupIdValues(puchaseGroupIdValues);
						
						LinkedList valuationClassID=new LinkedList();
						LinkedList valuationClassName=new LinkedList();
						
						String getValuation="select * from VALUATION_CLASS ";
						ResultSet rsValuation=ad.selectQuery(getValuation);
						while(rsValuation.next())
						{
							valuationClassID.add(rsValuation.getString("VALUATION_ID"));
							valuationClassName.add(rsValuation.getString("VALUATION_ID")+"-"+rsValuation.getString("VALUATION_DESC"));
						}
						pendAppForm.setValuationClassID(valuationClassID);
						pendAppForm.setValuationClassName(valuationClassName);
						
			// get material records
				
						String getFinishedProduct="select * from material_code_request where REQUEST_NO='"+reqId+"'";
						ResultSet rs=ad.selectQuery(getFinishedProduct);
						while(rs.next())
						{
							pendAppForm.setBrandID(rs.getString("BRAND_ID").toUpperCase());
							pendAppForm.setRequestNo(reqId);
							pendAppForm.setRequestNumber(reqId);
							String reqDate=rs.getString("REQUEST_DATE");
							String a[]=reqDate.split(" ");
							reqDate=a[0];
							String b[]=reqDate.split("-");
							reqDate=b[2]+"/"+b[1]+"/"+b[0];
							pendAppForm.setRequestDate(reqDate.toUpperCase());
							pendAppForm.setLocationId(rs.getString("LOCATION_ID").toUpperCase());
							pendAppForm.setHsnCode(rs.getString("HSN_Code"));
							pendAppForm.setMaterialTypeId(rs.getString("MATERIAL_TYPE_ID").toUpperCase());
							pendAppForm.setStorageLocationId(rs.getString("STORAGE_LOCATION_ID").toUpperCase());
							pendAppForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME").toUpperCase());
							pendAppForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME").toUpperCase());
							pendAppForm.setMaterialGroupId(rs.getString("MATERIAL_GROUP_ID").toUpperCase());
							pendAppForm.setUnitOfMeasId(rs.getString("UNIT_OF_MEAS_ID"));
							pendAppForm.setPuchaseGroupId(rs.getString("PURCHASE_GROUP_ID").toUpperCase());
							pendAppForm.setDivisionId(rs.getString("DIVISION_ID").toUpperCase());
							String isAsset=rs.getString("is_asset");
							if(isAsset.equalsIgnoreCase("1"))
							{
								pendAppForm.setIsAsset("1");
							}
							if(isAsset.equalsIgnoreCase("0"))
								pendAppForm.setIsAsset("0");
							
							pendAppForm.setApproximateValue(rs.getString("APPROXIMATE_VALUE").toUpperCase());
							pendAppForm.setValuationClass(rs.getString("VALUATION_CLASS").toUpperCase());
							pendAppForm.setDetailedJustification(rs.getString("DETAILED_JUSTIFICATION").toUpperCase());
							pendAppForm.setDetailedSpecification(rs.getString("DETAILED_SPECIFICATION").toUpperCase());
							
							String purposeId=rs.getString("PURPOSE_ID");
							purposeId=purposeId.replace(" ","");
							pendAppForm.setPurposeID(purposeId);
							String isSAS=rs.getString("IS_SAS_FORM_AVAILABLE");
							
							if(isSAS.equalsIgnoreCase("1"))
							{
								pendAppForm.setIsSASFormAvailable("1");
							}
							if(isSAS.equalsIgnoreCase("0")){
								pendAppForm.setIsSASFormAvailable("0");}
							
							String sapCodeno=rs.getString("SAP_CODE_NO");
							if(sapCodeno!=null){
						pendAppForm.setSapCodeNo(sapCodeno);		
						String sapCodeExist=rs.getString("SAP_CODE_EXISTS");
						if(sapCodeExist.equalsIgnoreCase("1"))
						{
							pendAppForm.setSapCodeExists("On");
						}
						if(sapCodeExist.equalsIgnoreCase("0"))
							pendAppForm.setSapCodeExistsNo("On");
						String sapCreationDate=rs.getString("SAP_CREATION_DATE");
						String sapDate[]=sapCreationDate.split(" ");
						sapCreationDate=sapDate[0];
						String sapCode[]=sapCreationDate.split("-");
						sapCreationDate=sapCode[2]+"/"+sapCode[1]+"/"+sapCode[0];
						pendAppForm.setSapCreationDate(sapCreationDate);
						pendAppForm.setSapCreatedBy(rs.getString("SAP_CREATED_BY"));
						pendAppForm.setRequestedBy(rs.getString("REQUESTED_BY"));
							}
							
						}
						
						

					}
					
					if(filterBy.equalsIgnoreCase("Pending")){
    					request.setAttribute("approveButton", "approveButton");
    					request.setAttribute("rejectButton", "rejectButton");
    				}
    				
    				
    				
    				
    				
    				//set ApproverDetails 
    				checkStatus=0;int appStatus=0;
    				LinkedList listApprers=new LinkedList();
    				String getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
    				"where mast.Location='"+location+"' AND  mast.Material_Type='PPC' AND Material_Group='"+matGroup+"' and mast.Approver_Id=emp.PERNR order by Priority";
    				ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
    				while(rsApprDetails.next())
    				{
    					checkStatus=1;
    					ApprovalsForm apprvers=new ApprovalsForm();
    					apprvers.setPriority(rsApprDetails.getString("Priority"));
    					apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
    					String empCode=rsApprDetails.getString("Approver_Id");
    					String approveStatus="";
    					String actualapprover="";
    					boolean data=false;
    					String recordStatus="select mast.Priority,mast.Approver_Id,mast.Parllel_Approver_1,mast.Parllel_Approver_2,all_r.Actual_Approver,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
    					"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
    					"mast.Material_Type='PPC' AND Material_Group='"+matGroup+"' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
    					"or mast.Role='Creator') and mast.Approver_Id=emp.PERNR and all_r.req_type='Material Master'  group by mast.Priority,mast.Approver_Id,mast.Parllel_Approver_1,mast.Parllel_Approver_2,all_r.Actual_Approver,emp.EMP_FULLNAME,all_r.Req_Status," +
    					"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
    					ResultSet rsAppInfo=ad.selectQuery(recordStatus);
    					while(rsAppInfo.next())
    					{
    						actualapprover=rsAppInfo.getString("Actual_Approver");
							if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Approver_Id")))
							{
								apprvers.setEmployeeCode(rsAppInfo.getString("Approver_Id"));
								data=true;
							}
							if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Parllel_Approver_1")))
							{
								apprvers.setEmployeeCode(rsAppInfo.getString("Parllel_Approver_1"));
								data=true;
							}
							if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Parllel_Approver_2")))
							{
								apprvers.setEmployeeCode(rsAppInfo.getString("Parllel_Approver_2"));
								data=true;
							}
    						
    						apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
    						approveStatus=rsAppInfo.getString("Req_Status");
    						if(approveStatus.equalsIgnoreCase(""))
    						{
    							apprvers.setApproveStatus("In Process");
    						}
    						if(approveStatus.equalsIgnoreCase("Approved")|| approveStatus.equalsIgnoreCase("Completed"))
    						{
    						apprvers.setDate(rsAppInfo.getString("approved_date"));
    						}else{
    							apprvers.setDate(rsAppInfo.getString("rejected_date"));
    							appStatus=1;
    						}
    						String comments=rsAppInfo.getString("Comments");
    						if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
    						{
    							apprvers.setComments("");
    						}else{
    							apprvers.setComments(rsAppInfo.getString("Comments"));
    						}
    						
    						
    					}
    					if(approveStatus.equalsIgnoreCase("") && appStatus==0)
    					{
    						apprvers.setApproveStatus("In Process");
    					}
    					String pernr="";

    					if(data==true)
    					{
    						pernr=actualapprover;
    					}
    					else
    					{
    						pernr=rsApprDetails.getString("Approver_Id");
    					}						
    						
    						
    					String name="select EMP_FULLNAME from emp_official_info where PERNR='"+pernr+"'";
    					ResultSet rsname=ad.selectQuery(name);
    					if(rsname.next())
    					{
    						apprvers.setEmployeeName(rsname.getString("EMP_FULLNAME"));
    					}
    					listApprers.add(apprvers);
    				}
    				if(checkStatus==0)
    				{
    					getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
    					"where mast.Location='"+location+"' AND  mast.Material_Type='PPC' AND Material_Group='' and mast.Approver_Id=emp.PERNR order by Priority";
    					rsApprDetails=ad.selectQuery(getApprDetails);
    					while(rsApprDetails.next())
    					{
    						checkStatus=1;
    						ApprovalsForm apprvers=new ApprovalsForm();
    						apprvers.setPriority(rsApprDetails.getString("Priority"));
    						apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
    						String empCode=rsApprDetails.getString("Approver_Id");
    						String approveStatus="";
    						String actualapprover="";
    						boolean data=false;
    						String recordStatus="select mast.Priority,mast.Approver_Id,mast.Parllel_Approver_1,mast.Parllel_Approver_2,all_r.Actual_Approver,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
    						"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
    						"mast.Material_Type='PPC' AND Material_Group='' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
    						"or mast.Role='Creator') and mast.Approver_Id=emp.PERNR and all_r.req_type='Material Master' group by mast.Priority,mast.Priority,mast.Approver_Id,mast.Parllel_Approver_1,mast.Parllel_Approver_2,all_r.Actual_Approver,emp.EMP_FULLNAME,all_r.Req_Status," +
    						"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
    						ResultSet rsAppInfo=ad.selectQuery(recordStatus);
    						while(rsAppInfo.next())
    						{
    							
    							actualapprover=rsAppInfo.getString("Actual_Approver");
    							if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Approver_Id")))
    							{
    								apprvers.setEmployeeCode(rsAppInfo.getString("Approver_Id"));
    								data=true;
    							}
    							if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Parllel_Approver_1")))
    							{
    								apprvers.setEmployeeCode(rsAppInfo.getString("Parllel_Approver_1"));
    								data=true;
    							}
    							if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Parllel_Approver_2")))
    							{
    								apprvers.setEmployeeCode(rsAppInfo.getString("Parllel_Approver_2"));
    								data=true;
    							}
    							apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
    							approveStatus=rsAppInfo.getString("Req_Status");
    							
    							if(approveStatus.equalsIgnoreCase("Approved")|| approveStatus.equalsIgnoreCase("Completed"))
    							{
    							String approveDate=	rsAppInfo.getString("approved_date");
    							
    							String a[]=approveDate.split(" ");
    							approveDate=a[0];
    							String b[]=approveDate.split("-");
    							approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
    							
    							apprvers.setDate(approveDate);
    							}else{
    								String rejectDate=	rsAppInfo.getString("rejected_date");
    								appStatus=1;
    								String a[]=rejectDate.split(" ");
    								rejectDate=a[0];
    								String b[]=rejectDate.split("-");
    								rejectDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
    								apprvers.setDate(rejectDate);
    							}
    							String comments=rsAppInfo.getString("Comments");
    							if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
    							{
    								apprvers.setComments("");
    							}else{
    								apprvers.setComments(rsAppInfo.getString("Comments"));
    							}
    						}
    						if(approveStatus.equalsIgnoreCase("") && appStatus==0)
    						{
    							apprvers.setApproveStatus("In Process");
    						}
    						String pernr="";

    						if(data==true)
        					{
        						pernr=actualapprover;
        					}
        					else
        					{
        						pernr=rsApprDetails.getString("Approver_Id");
        					}						
    							
    							
    						String name="select EMP_FULLNAME from emp_official_info where PERNR='"+pernr+"'";
    						ResultSet rsname=ad.selectQuery(name);
    						if(rsname.next())
    						{
    							apprvers.setEmployeeName(rsname.getString("EMP_FULLNAME"));
    						}
    						listApprers.add(apprvers);
    				}
    				}
    				request.setAttribute("approverDetails", listApprers);
    				
    				if(userRole.equalsIgnoreCase("User"))
    				{
    				return mapping.findForward("ZPPCDetails");
    				}
    				if(userRole.equalsIgnoreCase("Accounts"))
    				{
    				return mapping.findForward("ZPPC_Account");
    				}
    				if(userRole.equalsIgnoreCase("Creator"))
    				{
    					Date dNow = new Date( );
    					 SimpleDateFormat ft = new SimpleDateFormat ("dd/MM/yyyy");
    						String dateNow = ft.format(dNow);
    						pendAppForm.setSapCreationDate(dateNow);
    					pendAppForm.setSapCreatedBy(user.getEmployeeNo()+"-"+user.getFullName());
    					
    				return mapping.findForward("ZPPC_Creator");
    				}
					
					
				}
				
				if(matType.equalsIgnoreCase("OSE"))
				{

					if(userRole.equalsIgnoreCase("User"))
					{
				 		
				 		
				 		String getFinishedProduct="select mat.HSN_Code,mat.REQUEST_NO,mat.REQUEST_DATE,mat.MATERIAL_GROUP_ID,loc.LOCNAME,loc.LOCATION_CODE,stLoc.MAT_TYPE,stLoc.STORAGE_LOCATION_NAME,mat.MATERIAL_SHORT_NAME," +
				 		" mat.MATERIAL_LONG_NAME,matGroup.STXT,uom.LTXT,pur.PURCHASE_GROUP_DESC,mat.IS_EQUIPMENT,mat.EQUIPMENT_NAME,mat.EQUIPMENT_MAKE," +
				 		"mat.Component_MAKE,mat.IS_SPARE,mat.OEM_PartNo,mat.IS_NEW_Equipment,mat.IS_NEW_Furniture,mat.IS_NEW_Facility,	mat.IS_Spare_required," +
				 		"mat.PO_NUMBER,mat.PR_NUMBER,dep.DPTSTXT,mat.APPROXIMATE_VALUE, val.VALUATION_DESC,mat.DETAILED_JUSTIFICATION,	mat.DETAILED_SPECIFICATION,mat.moc,mat.rating,mat.range,mat.DIMENSION,mat.PACK_SIZE,mat.equip_Intended" +
				 		" from material_code_request as mat,Location as loc,STORAGE_LOCATION as stLoc,MATERIAL_GROUP as matGroup , UNIT_MESUREMENT AS uom " +
				 		",PURCHASE_GROUP as pur ,VALUATION_CLASS as val ,DEPARTMENT as dep where REQUEST_NO='"+reqId+"' and	loc.LOCID=mat.LOCATION_ID and " +
				 		"stLoc.STORAGE_LOCATION_ID=mat.STORAGE_LOCATION_ID and matGroup.MATERIAL_GROUP_ID=mat.MATERIAL_GROUP_ID and uom.UNIT_OF_MEAS_ID=mat.UNIT_OF_MEAS_ID " +
				 		"and pur.PURCHASE_GROUP_ID=mat.PURCHASE_GROUP_ID and TYPE='OSE' and val.VALUATION_ID=mat.VALUATION_CLASS and dep.DPTID=mat.UTILIZING_DEPT";
						
				 		
				 		
				 		ResultSet rs=ad.selectQuery(getFinishedProduct);
						if(rs.next())
						{
							pendAppForm.setRequestNo(reqId);
							pendAppForm.setRequestNumber(reqId);
						
							pendAppForm.setReqMaterialGroup(rs.getString("MATERIAL_GROUP_ID"));
							pendAppForm.setLocationId(rs.getString("LOCATION_CODE")+"-"+rs.getString("LOCNAME"));
						
							String reqDate=rs.getString("REQUEST_DATE");
							String a[]=reqDate.split(" ");
							reqDate=a[0];
							String b[]=reqDate.split("-");
							reqDate=b[2]+"/"+b[1]+"/"+b[0];
							pendAppForm.setRequestDate(reqDate);
							pendAppForm.setLocationId(rs.getString("MAT_TYPE")+"-"+rs.getString("STORAGE_LOCATION_NAME"));
						
							pendAppForm.setHsnCode(rs.getString("HSN_Code"));
							pendAppForm.setStorageLocationId(rs.getString("STORAGE_LOCATION_NAME"));
							pendAppForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME"));
							pendAppForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME"));
							pendAppForm.setMaterialGroupId(rs.getString("STXT"));
							pendAppForm.setPuchaseGroupId(rs.getString("PURCHASE_GROUP_DESC"));
							pendAppForm.setUnitOfMeasId(rs.getString("LTXT"));
							pendAppForm.setApproximateValue(rs.getString("APPROXIMATE_VALUE"));
							pendAppForm.setValuationClass(rs.getString("VALUATION_DESC"));
						
							String isEquipment=rs.getString("IS_EQUIPMENT");
							if(isEquipment.equalsIgnoreCase("1"))
							{
								pendAppForm.setIsEquipment("Yes");
								
							}
							pendAppForm.setEquipmentName(rs.getString("EQUIPMENT_NAME"));
							pendAppForm.setEquipmentMake(rs.getString("EQUIPMENT_MAKE"));
							if(isEquipment.equalsIgnoreCase("0")){
								pendAppForm.setIsEquipment("No");
							
							}
							String isSpare=rs.getString("IS_SPARE");
							if(isSpare.equalsIgnoreCase("1"))
							{
								pendAppForm.setIsSpare("Yes");
							
							}
							pendAppForm.setComponentMake(rs.getString("Component_MAKE"));
							pendAppForm.setOemPartNo(rs.getString("OEM_PartNo"));
							if(isSpare.equalsIgnoreCase("0")){
								pendAppForm.setIsSpare("No");
							
								
							}
							pendAppForm.setMoc(rs.getString("moc")); 
							pendAppForm.setRating(rs.getString("rating"));
							pendAppForm.setRange(rs.getString("range"));
							String isNewEquipment=rs.getString("IS_NEW_Equipment");
							if(isNewEquipment.equalsIgnoreCase("1"))
							{
								pendAppForm.setIsNewEquipment("Yes");
								
							}
							if(isNewEquipment.equalsIgnoreCase("0"))
							{
								pendAppForm.setIsNewEquipment("No");
								
							}
							if(isNewEquipment.equalsIgnoreCase("2"))
							{
								pendAppForm.setIsNewEquipment("N/A");
								
							}
							String isNewfurniturt=rs.getString("IS_NEW_Furniture");
							if(isNewfurniturt.equalsIgnoreCase("1"))
							{
								pendAppForm.setIsItNewFurniture("Yes");
								
							}
							if(isNewfurniturt.equalsIgnoreCase("0"))
							{
								pendAppForm.setIsItNewFurniture("No");
								
							}
							if(isNewfurniturt.equalsIgnoreCase("2"))
							{
								pendAppForm.setIsItNewFurniture("N/A");
								
							}
							String isNewfacility=rs.getString("IS_NEW_Facility");
							if(isNewfacility.equalsIgnoreCase("1"))
							{
								pendAppForm.setIsItFacility("Yes");
								
							}
							if(isNewfacility.equalsIgnoreCase("0"))
							{
								pendAppForm.setIsItFacility("No");
								
							}
							if(isNewfacility.equalsIgnoreCase("2"))
							{
								pendAppForm.setIsItFacility("N/A");
								
							}
								
							String issparey=rs.getString("IS_Spare_required");
							if(issparey.equalsIgnoreCase("1"))
							{
								pendAppForm.setIsSpareNewEquipment("Yes");
								
							}
							if(issparey.equalsIgnoreCase("0"))
							{
								pendAppForm.setIsSpareNewEquipment("No");
								
							}					
							if(issparey.equalsIgnoreCase("2"))
							{
								pendAppForm.setIsSpareNewEquipment("N/A");
								
							}
						
							pendAppForm.setPrNumber(rs.getString("PR_NUMBER"));
							pendAppForm.setPoNumber(rs.getString("PO_NUMBER"));
							pendAppForm.setUtilizingDept(rs.getString("DPTSTXT"));
							pendAppForm.setDetailedJustification(rs.getString("DETAILED_JUSTIFICATION"));
							pendAppForm.setDetailedSpecification(rs.getString("DETAILED_SPECIFICATION"));
							pendAppForm.setDimension(rs.getString("DIMENSION"));
							pendAppForm.setPackSize(rs.getString("PACK_SIZE"));
							pendAppForm.setEquipIntendedFor(rs.getString("equip_Intended"));
						}
						}else{
							
							String getCountryDetails="select * from Country";
							LinkedList countryID=new LinkedList();
							LinkedList countryName=new LinkedList();
							ResultSet rsCountryDetails=ad.selectQuery(getCountryDetails);
							while(rsCountryDetails.next()){
								countryID.add(rsCountryDetails.getString("LAND1"));
								countryName.add(rsCountryDetails.getString("LANDX"));
							}
							pendAppForm.setCounID(countryID);
							pendAppForm.setCountryName(countryName);
							
							LinkedList deptID=new LinkedList();
							LinkedList deptName=new LinkedList();
							String getdepartment="select * from department";
							ResultSet rsdepartment=ad.selectQuery(getdepartment);
							while(rsdepartment.next()){
								deptID.add(rsdepartment.getInt("DPTID"));
								deptName.add(rsdepartment.getString("DPTSTXT"));
							}
							
							pendAppForm.setDeptId(deptID);
							pendAppForm.setDeptName(deptName);
							
							String materialType="";
							String valuationType="";
							String getvaluationType="select MATERIAL_TYPE_ID,VALUATION_CLASS from material_code_request where REQUEST_NO='"+reqId+"'";
							ResultSet rsValuationType=ad.selectQuery(getvaluationType);
							while(rsValuationType.next()){
								materialType=rsValuationType.getString("MATERIAL_TYPE_ID");
								valuationType=rsValuationType.getString("VALUATION_CLASS");
							}
							ResultSet rs11 = ad.selectQuery("select LOCID," +
							"LOCNAME,location_code from location");
							ArrayList locationList=new ArrayList();
							ArrayList locationLabelList=new ArrayList();
							
							while(rs11.next()) {
								locationList.add(rs11.getString("LOCID"));
								locationLabelList.add(rs11.getString("LOCATION_CODE")+"-"+rs11.getString("LOCNAME"));
							}
							pendAppForm.setLocationIdList(locationList);
							pendAppForm.setLocationLabelList(locationLabelList);
							
							LinkedList materTypeIDList=new LinkedList();
							LinkedList materialTypeIdValueList=new LinkedList();
							String getMaterials="select * from MATERIAL_TYPE where MATERIAL_GROUP_ID like '%"+matType+"%' order by MATERIAL_GROUP_ID";
							ResultSet rsMaterial=ad.selectQuery(getMaterials);
							while(rsMaterial.next())
							{
								materTypeIDList.add(rsMaterial.getString("id"));
								materialTypeIdValueList.add(rsMaterial.getString("MATERIAL_GROUP_ID")+"-"+rsMaterial.getString("M_DESC"));
							}
							pendAppForm.setMaterTypeIDList(materTypeIDList);
							pendAppForm.setMaterialTypeIdValueList(materialTypeIdValueList);
							
							LinkedList materGroupIDList=new LinkedList();
							LinkedList materialGroupIdValueList=new LinkedList();
							String getMaterialGroup="select * from MATERIAL_GROUP";
							ResultSet rsMaterialGroup=ad.selectQuery(getMaterialGroup);
							while(rsMaterialGroup.next())
							{
								materGroupIDList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID"));
								materialGroupIdValueList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID")+"-"+rsMaterialGroup.getString("STXT"));
							}
							pendAppForm.setMaterGroupIDList(materGroupIDList);
							pendAppForm.setMaterialGroupIdValueList(materialGroupIdValueList);
							
							
							LinkedList unitOfMeasIdList=new LinkedList();
							LinkedList unitOfMeasIdValues=new LinkedList();
							
							String getunitMesurement="select * from UNIT_MESUREMENT";
							ResultSet rsUnit=ad.selectQuery(getunitMesurement);
							while(rsUnit.next())
							{
								unitOfMeasIdList.add(rsUnit.getString("UNIT_OF_MEAS_ID"));
								unitOfMeasIdValues.add(rsUnit.getString("UNIT_OF_MEAS_ID")+" - "+rsUnit.getString("LTXT"));
							}
							pendAppForm.setUnitOfMeasIdList(unitOfMeasIdList);
							pendAppForm.setUnitOfMeasIdValues(unitOfMeasIdValues);
							LinkedList storageID=new LinkedList();
							LinkedList storageName=new LinkedList();
							String getStorageDetails="select * from STORAGE_LOCATION where MAT_TYPE='OSE'";
							ResultSet rsStrogeLocation=ad.selectQuery(getStorageDetails);
							while(rsStrogeLocation.next()){
								storageID.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID"));
								storageName.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID")+"-"+rsStrogeLocation.getString("STORAGE_LOCATION_NAME"));
							}
							pendAppForm.setStorageID(storageID);
							pendAppForm.setStorageIDName(storageName);
							
							LinkedList valuationClassID=new LinkedList();
							LinkedList valuationClassName=new LinkedList();
							String getValuation="select * from VALUATION_CLASS where MAT_TYPE='OSE'";
							ResultSet rsValuation=ad.selectQuery(getValuation);
							while(rsValuation.next())
							{
								valuationClassID.add(rsValuation.getString("VALUATION_ID"));
								valuationClassName.add(rsValuation.getString("VALUATION_ID")+"-"+rsValuation.getString("VALUATION_DESC"));
							}
							pendAppForm.setValuationClassID(valuationClassID);
							pendAppForm.setValuationClassName(valuationClassName);
							
							LinkedList puchaseGroupIdList=new LinkedList();
							LinkedList puchaseGroupIdValues=new LinkedList();
							
							String getPurchaseGroup="select * from PURCHASE_GROUP";
							ResultSet rsPurchaseGroup=ad.selectQuery(getPurchaseGroup);
							while(rsPurchaseGroup.next())
							{
								puchaseGroupIdList.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID"));
								puchaseGroupIdValues.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID")+"-"+rsPurchaseGroup.getString("PURCHASE_GROUP_DESC"));
							}
							pendAppForm.setPuchaseGroupIdList(puchaseGroupIdList);
							pendAppForm.setPuchaseGroupIdValues(puchaseGroupIdValues);
							
							String getFinishedProduct="select * from material_code_request where REQUEST_NO='"+reqId+"'";
							ResultSet rs=ad.selectQuery(getFinishedProduct);
							while(rs.next())
							{

								pendAppForm.setHsnCode(rs.getString("HSN_Code"));
								pendAppForm.setRequestNo(reqId);
								pendAppForm.setRequestNumber(reqId);
								pendAppForm.setReqMaterialGroup(rs.getString("MATERIAL_GROUP_ID").toUpperCase());
								String reqDate=rs.getString("REQUEST_DATE");
								String a[]=reqDate.split(" ");
								reqDate=a[0];
								String b[]=reqDate.split("-");
								reqDate=b[2]+"/"+b[1]+"/"+b[0];
								pendAppForm.setRequestDate(reqDate.toUpperCase());
								pendAppForm.setLocationId(rs.getString("LOCATION_ID").toUpperCase());
								pendAppForm.setMaterialTypeId(rs.getString("MATERIAL_TYPE_ID").toUpperCase());
								pendAppForm.setStorageLocationId(rs.getString("STORAGE_LOCATION_ID").toUpperCase());
								pendAppForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME").toUpperCase());
								pendAppForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME").toUpperCase());
								pendAppForm.setMaterialGroupId(rs.getString("MATERIAL_GROUP_ID").toUpperCase());
								pendAppForm.setPuchaseGroupId(rs.getString("PURCHASE_GROUP_ID").toUpperCase());
								pendAppForm.setUnitOfMeasId(rs.getString("UNIT_OF_MEAS_ID"));
								pendAppForm.setApproximateValue(rs.getString("APPROXIMATE_VALUE").toUpperCase());
								pendAppForm.setValuationClass(rs.getString("VALUATION_CLASS").toUpperCase());
								pendAppForm.setMaterialUsedIn(rs.getString("MATERIAL_USED_IN").toUpperCase());
								String isEquipment=rs.getString("IS_EQUIPMENT");
								if(isEquipment.equalsIgnoreCase("1"))
								{
									pendAppForm.setIsEquipment("1");
									
								}
								pendAppForm.setEquipmentName(rs.getString("EQUIPMENT_NAME").toUpperCase());
								pendAppForm.setEquipmentMake(rs.getString("EQUIPMENT_MAKE").toUpperCase());
								if(isEquipment.equalsIgnoreCase("0")){
									pendAppForm.setIsEquipment("0");
								
								}
								String isSpare=rs.getString("IS_SPARE");
								if(isSpare.equalsIgnoreCase("1"))
								{
									pendAppForm.setIsSpare("1");
								
								}
								pendAppForm.setComponentMake(rs.getString("Component_MAKE").toUpperCase());
								pendAppForm.setOemPartNo(rs.getString("OEM_PartNo").toUpperCase());
								if(isSpare.equalsIgnoreCase("0")){
									pendAppForm.setIsSpare("0");
								
									
								}
								pendAppForm.setMoc(rs.getString("moc").toUpperCase()); 
								pendAppForm.setRating(rs.getString("rating").toUpperCase());
								pendAppForm.setRange(rs.getString("range").toUpperCase());
								
								pendAppForm.setIsNewEquipment(rs.getString("IS_Equipment").toUpperCase());
								pendAppForm.setIsItNewFurniture(rs.getString("IS_NEW_Furniture").toUpperCase());
								pendAppForm.setIsItFacility(rs.getString("IS_NEW_Facility").toUpperCase());
								pendAppForm.setIsSpareNewEquipment(rs.getString("IS_Spare_required").toUpperCase());
								
								
								
								pendAppForm.setPrNumber(rs.getString("PR_NUMBER").toUpperCase());
								pendAppForm.setPoNumber(rs.getString("PO_NUMBER").toUpperCase());
								pendAppForm.setUtilizingDept(rs.getString("UTILIZING_DEPT").toUpperCase());
								pendAppForm.setDetailedJustification(rs.getString("DETAILED_JUSTIFICATION").toUpperCase());
								pendAppForm.setDetailedSpecification(rs.getString("DETAILED_SPECIFICATION").toUpperCase());
								pendAppForm.setDimension(rs.getString("DIMENSION").toUpperCase());
								pendAppForm.setPackSize(rs.getString("PACK_SIZE").toUpperCase());
								pendAppForm.setEquipIntendedFor(rs.getString("equip_Intended").toUpperCase());
								pendAppForm.setPurposeID(rs.getString("PURPOSE_ID").toUpperCase());
								pendAppForm.setSapCodeNo(rs.getString("SAP_CODE_NO"));
								String sapCodeno=rs.getString("SAP_CODE_NO");
									if(sapCodeno!=null){
								String sapCodeExist=rs.getString("SAP_CODE_EXISTS");
								pendAppForm.setSapCodeNo(sapCodeno);
								if(sapCodeExist.equalsIgnoreCase("1"))
								{
									pendAppForm.setSapCodeExists("On");
								}
								if(sapCodeExist.equalsIgnoreCase("0"))
									pendAppForm.setSapCodeExistsNo("On");
								String sapCreationDate=rs.getString("SAP_CREATION_DATE");
								String sapDate[]=sapCreationDate.split(" ");
								sapCreationDate=sapDate[0];
								String sapCode[]=sapCreationDate.split("-");
								sapCreationDate=sapCode[2]+"/"+sapCode[1]+"/"+sapCode[0];
								pendAppForm.setSapCreationDate(sapCreationDate);
								pendAppForm.setSapCreatedBy(rs.getString("SAP_CREATED_BY"));
								pendAppForm.setRequestedBy(rs.getString("REQUESTED_BY"));
									}
									
								

							
							}
							
						
					}
					
					if(filterBy.equalsIgnoreCase("Pending")){
						request.setAttribute("approveButton", "approveButton");
						request.setAttribute("rejectButton", "rejectButton");
					}
					
					
					
					
					
					//set ApproverDetails 
					checkStatus=0;int appStatus=0;
					LinkedList listApprers=new LinkedList();
					String getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
					"where mast.Location='"+location+"' AND  mast.Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mast.Approver_Id=emp.PERNR order by Priority";
					ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
					while(rsApprDetails.next())
					{
						checkStatus=1;
						ApprovalsForm apprvers=new ApprovalsForm();
						apprvers.setPriority(rsApprDetails.getString("Priority"));
						apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
						String empCode=rsApprDetails.getString("Approver_Id");
						String approveStatus="";
						String actualapprover="";
						boolean data=false;
						String recordStatus="select mast.Priority,mast.Approver_Id,mast.Parllel_Approver_1,mast.Parllel_Approver_2,all_r.Actual_Approver,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
						"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
						"mast.Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
						"or mast.Role='Creator') and mast.Approver_Id=emp.PERNR and all_r.req_type='Material Master'  group by mast.Priority,mast.Priority,mast.Approver_Id,mast.Parllel_Approver_1,mast.Parllel_Approver_2,all_r.Actual_Approver,emp.EMP_FULLNAME,all_r.Req_Status," +
						"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
						ResultSet rsAppInfo=ad.selectQuery(recordStatus);
						while(rsAppInfo.next())
						{
							actualapprover=rsAppInfo.getString("Actual_Approver");
							if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Approver_Id")))
							{
								apprvers.setEmployeeCode(rsAppInfo.getString("Approver_Id"));
								data=true;
							}
							if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Parllel_Approver_1")))
							{
								apprvers.setEmployeeCode(rsAppInfo.getString("Parllel_Approver_1"));
								data=true;
							}
							if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Parllel_Approver_2")))
							{
								apprvers.setEmployeeCode(rsAppInfo.getString("Parllel_Approver_2"));
								data=true;
							}
							
							apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
							approveStatus=rsAppInfo.getString("Req_Status");
							if(approveStatus.equalsIgnoreCase(""))
							{
								apprvers.setApproveStatus("In Process");
							}
							if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
							{
							apprvers.setDate(rsAppInfo.getString("approved_date"));
							}else{
								apprvers.setDate(rsAppInfo.getString("rejected_date"));
								appStatus=1;
							}
							String comments=rsAppInfo.getString("Comments");
							if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
							{
								apprvers.setComments("");
							}else{
								apprvers.setComments(rsAppInfo.getString("Comments"));
							}
							
							
						}
						if(approveStatus.equalsIgnoreCase("") && appStatus==0)
						{
							apprvers.setApproveStatus("In Process");
						}
						String pernr="";

						if(data==true)
						{
							pernr=actualapprover;
						}
						else
						{
							pernr=rsApprDetails.getString("Approver_Id");
						}						
							
							
						String name="select EMP_FULLNAME from emp_official_info where PERNR='"+pernr+"'";
						ResultSet rsname=ad.selectQuery(name);
						if(rsname.next())
						{
							apprvers.setEmployeeName(rsname.getString("EMP_FULLNAME"));
						}
						listApprers.add(apprvers);
					}
					if(checkStatus==0)
					{
						getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
						"where mast.Location='"+location+"' AND  mast.Material_Type='"+matType+"' AND Material_Group='' and mast.Approver_Id=emp.PERNR order by Priority";
						rsApprDetails=ad.selectQuery(getApprDetails);
						while(rsApprDetails.next())
						{
							checkStatus=1;
							ApprovalsForm apprvers=new ApprovalsForm();
							apprvers.setPriority(rsApprDetails.getString("Priority"));
							apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
							String empCode=rsApprDetails.getString("Approver_Id");
							String approveStatus="";
							String actualapprover="";
							boolean data=false;
							String recordStatus="select mast.Priority,mast.Approver_Id,mast.Parllel_Approver_1,mast.Parllel_Approver_2,all_r.Actual_Approver,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
							"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
							"mast.Material_Type='"+matType+"' AND Material_Group='' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
							"or mast.Role='Creator') and mast.Approver_Id=emp.PERNR and all_r.req_type='Material Master' group by mast.Priority,mast.Priority,mast.Approver_Id,mast.Parllel_Approver_1,mast.Parllel_Approver_2,all_r.Actual_Approver,emp.EMP_FULLNAME,all_r.Req_Status," +
							"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
							ResultSet rsAppInfo=ad.selectQuery(recordStatus);
							while(rsAppInfo.next())
							{
								
								actualapprover=rsAppInfo.getString("Actual_Approver");
								if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Approver_Id")))
								{
									apprvers.setEmployeeCode(rsAppInfo.getString("Approver_Id"));
									data=true;
								}
								if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Parllel_Approver_1")))
								{
									apprvers.setEmployeeCode(rsAppInfo.getString("Parllel_Approver_1"));
									data=true;
								}
								if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Parllel_Approver_2")))
								{
									apprvers.setEmployeeCode(rsAppInfo.getString("Parllel_Approver_2"));
									data=true;
								}
								apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
								approveStatus=rsAppInfo.getString("Req_Status");
								
								if(approveStatus.equalsIgnoreCase("Approved")|| approveStatus.equalsIgnoreCase("Completed"))
								{
								String approveDate=	rsAppInfo.getString("approved_date");
								
								String a[]=approveDate.split(" ");
								approveDate=a[0];
								String b[]=approveDate.split("-");
								approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
								
								apprvers.setDate(approveDate);
								}else{
									String rejectDate=	rsAppInfo.getString("rejected_date");
									appStatus=1;
									String a[]=rejectDate.split(" ");
									rejectDate=a[0];
									String b[]=rejectDate.split("-");
									rejectDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
									apprvers.setDate(rejectDate);
								}
								String comments=rsAppInfo.getString("Comments");
								if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
								{
									apprvers.setComments("");
								}else{
									apprvers.setComments(rsAppInfo.getString("Comments"));
								}
							}
							if(approveStatus.equalsIgnoreCase("") && appStatus==0)
							{
								apprvers.setApproveStatus("In Process");
							}
							String pernr="";

							if(data==true)
							{
								pernr=actualapprover;
							}
							else
							{
								pernr=rsApprDetails.getString("Approver_Id");
							}				
								
							String name="select EMP_FULLNAME from emp_official_info where PERNR='"+pernr+"'";
							ResultSet rsname=ad.selectQuery(name);
							if(rsname.next())
							{
								apprvers.setEmployeeName(rsname.getString("EMP_FULLNAME"));
							}
							listApprers.add(apprvers);
					}
					}
					request.setAttribute("approverDetails", listApprers);
					if(matType.equalsIgnoreCase("OSE"))
					{
						if(userRole.equalsIgnoreCase("User"))
						{
						return mapping.findForward("ZPSRDetails");
						}
						if(userRole.equalsIgnoreCase("Accounts"))
						{
						return mapping.findForward("ZPSR_Account");
						}
						if(userRole.equalsIgnoreCase("Creator"))
						{
							Date dNow = new Date( );
							 SimpleDateFormat ft = new SimpleDateFormat ("dd/MM/yyyy");
								String dateNow = ft.format(dNow);
								pendAppForm.setSapCreationDate(dateNow);
							pendAppForm.setSapCreatedBy(user.getEmployeeNo()+"-"+user.getFullName());
							
						return mapping.findForward("ZPSR_Creator");
						}
					}
				}
				if(matType.equalsIgnoreCase("PM"))
				{

					if(userRole.equalsIgnoreCase("User"))
					{
						String getMaterial="select mat.HSN_Code,mat.REQUEST_NO,mat.Storage,mat.Type,mat.MATERIAL_GROUP_ID,loc.LOCATION_CODE,loc.LOCATION_CODE,stLoc.MAT_TYPE,mat.MATERIAL_GROUP_ID,mat.REQUEST_DATE,loc.LOCNAME,stLoc.STORAGE_LOCATION_NAME,mat.MATERIAL_SHORT_NAME," +
						"mat.MATERIAL_LONG_NAME,matGroup.STXT,uom.LTXT,pur.PURCHASE_GROUP_DESC,mat.DUTY_ELEMENT,pacgrp.PACKING_MATERIAL_GROUP_NAME," +
						"mat.Type_Of_Material,mat.ARTWORK_NO,mat.IS_ARTWORK_REVISION,mat.EXISTING_SAP_ITEM_CODE,mat.IS_DMF_MATERIAL,dmf.DMF_GRADE_DESC," +
						"mat.COS_GRADE_AND_NO,mat.ADDITIONAL_TEST,mat.IS_VENDOR_SPECIFIC_MATERIAL,mat.MFGR_NAME,mat.SITE_OF_MANUFACTURE,cou.LANDX," +
						"mat.CUSTOMER_NAME,mat.TO_BE_USED_IN_PRODUCTS,mat.RETEST_DAYS,mat.RETEST_DAYS_TYPE,val.VALUATION_DESC," +
						"mat.APPROXIMATE_VALUE,mat.Attachements,SAP_CODE_NO,SAP_CODE_EXISTS,SAP_CREATION_DATE,SAP_CREATED_BY from material_code_request as mat,Location as loc,STORAGE_LOCATION as stLoc," +
						"MATERIAL_GROUP as matGroup ,UNIT_MESUREMENT AS uom,PURCHASE_GROUP as pur,PACKAGE_MATERIAL_GROUP as pacgrp,DMF_GRADE as dmf," +
						"Country as cou,VALUATION_CLASS as val where REQUEST_NO='"+reqId+"' " +
						"and loc.LOCID=mat.LOCATION_ID and stLoc.STORAGE_LOCATION_ID=mat.STORAGE_LOCATION_ID and matGroup.MATERIAL_GROUP_ID=mat.MATERIAL_GROUP_ID" +
						" and uom.UNIT_OF_MEAS_ID=mat.UNIT_OF_MEAS_ID and pur.PURCHASE_GROUP_ID=mat.PURCHASE_GROUP_ID  and pacgrp.PACKING_MATERIAL_GROUP_ID=mat.PACKING_MATERIAL_GROUP " +
						" and dmf.DMF_GRADE_ID=mat.DMF_GRADE_ID and cou.LAND1=mat.COUNTRY_ID  " +
						" and val.VALUATION_ID=mat.VALUATION_CLASS";
						
						ResultSet rs=ad.selectQuery(getMaterial);
						while(rs.next())
						{
							pendAppForm.setRequestNo(reqId);
							pendAppForm.setRequestNumber(reqId);
							pendAppForm.setReqMaterialGroup(rs.getString("MATERIAL_GROUP_ID"));
							matType=rs.getString("Type");
							matGroup=rs.getString("MATERIAL_GROUP_ID");
							location=rs.getString("LOCATION_CODE");
							String reqDate=rs.getString("REQUEST_DATE");
							String a[]=reqDate.split(" ");
							reqDate=a[0];
							String b[]=reqDate.split("-");
							reqDate=b[2]+"/"+b[1]+"/"+b[0];
							pendAppForm.setRequestDate(reqDate);
							pendAppForm.setLocationId(rs.getString("LOCATION_CODE")+"-"+rs.getString("LOCNAME"));
							pendAppForm.setStorageLocationId(rs.getString("MAT_TYPE")+"-"+rs.getString("STORAGE_LOCATION_NAME"));
							pendAppForm.setHsnCode(rs.getString("HSN_Code"));
							pendAppForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME"));
							pendAppForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME"));
							pendAppForm.setStorage(rs
									.getString("STORAGE"));
							pendAppForm.setMaterialGroupId(rs.getString("STXT"));
							String isDMFMaterial=rs.getString("IS_DMF_MATERIAL");
							if(isDMFMaterial.equalsIgnoreCase("1"))
							{
								pendAppForm.setIsDMFMaterial("YES");
								request.setAttribute("dmfMandatory", "dmfMandatory");
								pendAppForm.setDmfGradeId(rs.getString("DMF_GRADE_DESC"));
								pendAppForm.setCosGradeNo(rs.getString("COS_GRADE_AND_NO"));
							}
							if(isDMFMaterial.equalsIgnoreCase("0")){
								pendAppForm.setIsDMFMaterial("NO");
								request.setAttribute("dmfNotMandatory", "dmfNotMandatory");
								pendAppForm.setDmfGradeId(rs.getString("DMF_GRADE_DESC"));
								pendAppForm.setCosGradeNo(rs.getString("COS_GRADE_AND_NO"));
							}
							pendAppForm.setAdditionalTest(rs.getString("ADDITIONAL_TEST"));
							
							pendAppForm.setCountryId(rs.getString("LANDX"));
							pendAppForm.setCustomerName(rs.getString("CUSTOMER_NAME"));
							pendAppForm.setToBeUsedInProducts(rs.getString("TO_BE_USED_IN_PRODUCTS"));
							String isVendorStatus=rs.getString("IS_VENDOR_SPECIFIC_MATERIAL");
							if(isVendorStatus.equalsIgnoreCase("1"))
							{
								pendAppForm.setIsVendorSpecificMaterial("YES");
								request.setAttribute("vedorMandatory", "vedorMandatory");
								pendAppForm.setMfgrName(rs.getString("MFGR_NAME"));
								pendAppForm.setSiteOfManufacture(rs.getString("SITE_OF_MANUFACTURE"));
							}
							if(isVendorStatus.equalsIgnoreCase("0"))
							{
								pendAppForm.setIsVendorSpecificMaterial("NO");
								request.setAttribute("vedorNotMandatory", "vedorNotMandatory");
							}
								pendAppForm.setMfgrName(rs.getString("MFGR_NAME"));
							pendAppForm.setSiteOfManufacture(rs.getString("SITE_OF_MANUFACTURE"));
							
							pendAppForm.setRetestDays(rs.getString("RETEST_DAYS"));
							pendAppForm.setRetestType(rs.getString("RETEST_DAYS_TYPE"));
							String dutyElement=rs.getString("DUTY_ELEMENT");
							if(dutyElement.equalsIgnoreCase("0"))
							{
								pendAppForm.setDutyElement("0-Indigenous Material with or without Cenvat");
							}
							if(dutyElement.equalsIgnoreCase("1"))
								pendAppForm.setDutyElement("1-Duty Exempted Packing Materials for Finished product");
							pendAppForm.setPackageMaterialGroup(rs.getString("PACKING_MATERIAL_GROUP_NAME"));
							pendAppForm.setTypeOfMaterial(rs.getString("Type_Of_Material"));
							String typeOfMaterial=rs.getString("Type_Of_Material");
							
							if(typeOfMaterial.equalsIgnoreCase("Printed Material"))
							{
								request.setAttribute("materialTypeMandatory", "materialTypeMandatory");
								pendAppForm.setArtworkNo(rs.getString("ARTWORK_NO"));
								String isARTWORKRevisionStatus=rs.getString("IS_ARTWORK_REVISION");
								if(isARTWORKRevisionStatus.equalsIgnoreCase("1"))
								{
									pendAppForm.setIsArtworkRevision("YES");
								}
								if(isARTWORKRevisionStatus.equalsIgnoreCase("0"))
									pendAppForm.setIsArtworkRevision("NO");
								
							}
							else
								request.setAttribute("materialTypeNotMandatory", "materialTypeNotMandatory");
							
							pendAppForm.setExistingSAPItemCode(rs.getString("EXISTING_SAP_ITEM_CODE"));
							pendAppForm.setApproximateValue(rs.getString("APPROXIMATE_VALUE"));
						
							
							ArrayList fileList = new ArrayList();
							String uploadedFiles=rs.getString("Attachements");
							pendAppForm.setUnitOfMeasId(rs.getString("LTXT"));
							pendAppForm.setValuationClass(rs.getString("VALUATION_DESC"));
							pendAppForm.setPuchaseGroupId(rs.getString("PURCHASE_GROUP_DESC"));
							if(uploadedFiles.equalsIgnoreCase(""))
							{
							}else{
							String v[] = uploadedFiles.split(",");
							int l = v.length;
							for (int i = 0; i < l; i++) 
							{
								PackageMaterialMasterForm pendAppForm2=new PackageMaterialMasterForm();
							int x=v[i].lastIndexOf("/");
							uploadedFiles=v[i].substring(x+1);		
							pendAppForm2.setFileList(uploadedFiles);
							pendAppForm2.setFilepath("jsp/EMicro Files/ESS/sapMasterRequest/PackageMaterial Files/UploadFiles/"+uploadedFiles+"");
							fileList.add(pendAppForm2);
							}
							request.setAttribute("listName", fileList);
							}
							String sapCodeno=rs.getString("SAP_CODE_NO");
							if(sapCodeno!=null)
							{
								pendAppForm.setSapCodeNo(rs.getString("SAP_CODE_NO"));
								String sapCodeExist=rs.getString("SAP_CODE_EXISTS");
								if(sapCodeExist.equalsIgnoreCase("1"))
								{
									pendAppForm.setSapCodeExists("Yes");
								}
								if(sapCodeExist.equalsIgnoreCase("0"))
									pendAppForm.setSapCodeExists("No");
								String createDate=rs.getString("SAP_CREATION_DATE");
								String a1[]=createDate.split(" ");
								createDate=a1[0];
								String b1[]=createDate.split("-");
								createDate=b1[2]+"/"+b1[1]+"/"+b1[0];
								pendAppForm.setSapCreationDate(createDate);
								pendAppForm.setSapCreatedBy(rs.getString("SAP_CREATED_BY"));
							}
						}
						
						//temp cond
						
						String getMaterial1="select tem.TEMP_CON_DESC from material_code_request as mat,TEMP_CONDITION as tem " +
								" where REQUEST_NO='"+reqId+"' and tem.TEMP_CON_ID=mat.TEMP_CONDITION ";
						
						ResultSet rs1=ad.selectQuery(getMaterial1);
						while(rs1.next())
						{
							pendAppForm.setTempCondition(rs1.getString("TEMP_CON_DESC"));
						}
						
						//STORAGE_CONDITION
						
						String getMaterial2="select stcon.LTXT from material_code_request as mat,STORAGE_CONDITION as stcon" +
								" where REQUEST_NO='"+reqId+"'  and stcon.STO_COND_CODE=mat.STORAGE_CONDITION";	
						
						ResultSet rs2=ad.selectQuery(getMaterial2);
						while(rs2.next())
						{
							pendAppForm.setStorageCondition(rs2.getString("LTXT"));
						}
						
				}
					else{	
				String getCountryDetails="select * from Country";
				LinkedList countryID=new LinkedList();
				LinkedList countryName=new LinkedList();
				ResultSet rsCountryDetails=ad.selectQuery(getCountryDetails);
				while(rsCountryDetails.next()){
					countryID.add(rsCountryDetails.getString("LAND1"));
					countryName.add(rsCountryDetails.getString("LAND1")+" - "+rsCountryDetails.getString("LANDX"));
				}
				pendAppForm.setCounID(countryID);
				pendAppForm.setCountryName(countryName);
				
				ResultSet rs11 = ad.selectQuery("select * from location");
				ArrayList locationList=new ArrayList();
				ArrayList locationLabelList=new ArrayList();
				
				while(rs11.next()) {
					locationList.add(rs11.getString("LOCID"));
					locationLabelList.add(rs11.getString("LOCATION_CODE")+" - "+rs11.getString("LOCNAME"));
				}
				pendAppForm.setLocationIdList(locationList);
				pendAppForm.setLocationLabelList(locationLabelList);
				
				
				LinkedList storageID=new LinkedList();
				LinkedList storageName=new LinkedList();
				String getStorageDetails="select * from STORAGE_LOCATION where MAT_TYPE='PM'";
				ResultSet rsStrogeLocation=ad.selectQuery(getStorageDetails);
				while(rsStrogeLocation.next()){
					storageID.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID"));
					storageName.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID")+" - "+rsStrogeLocation.getString("STORAGE_LOCATION_NAME"));
				}
				pendAppForm.setStorageID(storageID);
				pendAppForm.setStorageIDName(storageName);
				
				LinkedList materTypeIDList=new LinkedList();
				LinkedList materialTypeIdValueList=new LinkedList();
				String getMaterials="select * from MATERIAL_TYPE";
				ResultSet rsMaterial=ad.selectQuery(getMaterials);
				while(rsMaterial.next())
				{
					materTypeIDList.add(rsMaterial.getString("id"));
					materialTypeIdValueList.add(rsMaterial.getString("MATERIAL_GROUP_ID")+" - "+rsMaterial.getString("M_DESC"));
				}
				pendAppForm.setMaterTypeIDList(materTypeIDList);
				pendAppForm.setMaterialTypeIdValueList(materialTypeIdValueList);
				
				LinkedList materGroupIDList=new LinkedList();
				LinkedList materialGroupIdValueList=new LinkedList();
				
				String getMaterialGroup="select * from MATERIAL_GROUP where MATERIAL_TYPE like '%"+matType+"%' order by STXT";
				ResultSet rsMaterialGroup=ad.selectQuery(getMaterialGroup);
				while(rsMaterialGroup.next())
				{
					materGroupIDList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID"));
					materialGroupIdValueList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID")+" - "+rsMaterialGroup.getString("STXT"));
				}
				pendAppForm.setMaterGroupIDList(materGroupIDList);
				pendAppForm.setMaterialGroupIdValueList(materialGroupIdValueList);
				
				LinkedList unitOfMeasIdList=new LinkedList();
				LinkedList unitOfMeasIdValues=new LinkedList();
				
				String getunitMesurement="select * from UNIT_MESUREMENT";
				ResultSet rsUnit=ad.selectQuery(getunitMesurement);
				while(rsUnit.next())
				{
					unitOfMeasIdList.add(rsUnit.getString("UNIT_OF_MEAS_ID"));
					unitOfMeasIdValues.add(rsUnit.getString("UNIT_OF_MEAS_ID")+" - "+rsUnit.getString("LTXT"));
				}
				pendAppForm.setUnitOfMeasIdList(unitOfMeasIdList);
				pendAppForm.setUnitOfMeasIdValues(unitOfMeasIdValues);
				
				LinkedList puchaseGroupIdList=new LinkedList();
				LinkedList puchaseGroupIdValues=new LinkedList();
				
				String getPurchaseGroup="select * from PURCHASE_GROUP";
				ResultSet rsPurchaseGroup=ad.selectQuery(getPurchaseGroup);
				while(rsPurchaseGroup.next())
				{
					puchaseGroupIdList.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID"));
					puchaseGroupIdValues.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID")+" - "+rsPurchaseGroup.getString("PURCHASE_GROUP_DESC"));
				}
				pendAppForm.setPuchaseGroupIdList(puchaseGroupIdList);
				pendAppForm.setPuchaseGroupIdValues(puchaseGroupIdValues);
				
				LinkedList dmfGradeIDList=new LinkedList();
				LinkedList dmfGradeIDValueList=new LinkedList();
				
				String getDMFValues="select * from DMF_GRADE";
				ResultSet rsDMFValues=ad.selectQuery(getDMFValues);
				while(rsDMFValues.next())
				{
					dmfGradeIDList.add(rsDMFValues.getString("DMF_GRADE_ID"));
					dmfGradeIDValueList.add(rsDMFValues.getString("DMF_GRADE_ID")+" - "+rsDMFValues.getString("DMF_GRADE_DESC"));
				}
				pendAppForm.setDmfGradeIDList(dmfGradeIDList);
				pendAppForm.setDmfGradeIDValueList(dmfGradeIDValueList);
				
				LinkedList packageGroupID=new LinkedList();
				LinkedList packageGroupIDValue=new LinkedList();
				
				String getPackageGroup="select * from PACKAGE_MATERIAL_GROUP";
				ResultSet rsPackageGroup=ad.selectQuery(getPackageGroup);
				
				try {
					while(rsPackageGroup.next())
					{
						packageGroupID.add(rsPackageGroup.getString("PACKING_MATERIAL_GROUP_ID"));
						packageGroupIDValue.add(rsPackageGroup.getString("PACKING_MATERIAL_GROUP_ID")+" - "+rsPackageGroup.getString("PACKING_MATERIAL_GROUP_NAME"));
					}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				pendAppForm.setPackageGroupID(packageGroupID);
				pendAppForm.setPackageGroupIDValue(packageGroupIDValue);
				
				LinkedList valuationClassID=new LinkedList();
				LinkedList valuationClassName=new LinkedList();
				
				String getValuation="select * from VALUATION_CLASS where MAT_TYPE='PM'";
				ResultSet rsValuation=ad.selectQuery(getValuation);
				try {
					while(rsValuation.next())
					{
						valuationClassID.add(rsValuation.getString("VALUATION_ID"));
						valuationClassName.add(rsValuation.getString("VALUATION_ID")+" - "+rsValuation.getString("VALUATION_DESC"));
					}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				pendAppForm.setValuationClassID(valuationClassID);
				pendAppForm.setValuationClassName(valuationClassName);
				
				LinkedList tempIDList=new LinkedList();
				LinkedList temValueList=new LinkedList();
				String getTemp="select * from TEMP_CONDITION order by TEMP_CON_DESC";
				ResultSet rsTemp=ad.selectQuery(getTemp);
				while(rsTemp.next())
				{
					tempIDList.add(rsTemp.getString("TEMP_CON_ID"));
					temValueList.add(rsTemp.getString("TEMP_CON_ID")+" - "+rsTemp.getString("TEMP_CON_DESC"));
				}
				pendAppForm.setTempIDList(tempIDList);
				pendAppForm.setTemValueList(temValueList);
				
				LinkedList storageIDList=new LinkedList();
				LinkedList storageLocList=new LinkedList();
				String getStorageLoc="select * from STORAGE_CONDITION";
				ResultSet rsStorageLoc=ad.selectQuery(getStorageLoc);
				while(rsStorageLoc.next())
				{
					storageIDList.add(rsStorageLoc.getString("STO_COND_CODE"));
					storageLocList.add(rsStorageLoc.getString("STO_COND_CODE")+" - "+rsStorageLoc.getString("LTXT"));
				}
				pendAppForm.setStorageIDList(storageIDList);
				pendAppForm.setStorageLocList(storageLocList);
			// get material records
				
				String getMaterial="select * from material_code_request where REQUEST_NO='"+reqId+"'";
				ResultSet rs=ad.selectQuery(getMaterial);
				while(rs.next())
				{
					pendAppForm.setRequestNo(reqId);
					pendAppForm.setRequestNumber(reqId);
					String reqDate=rs.getString("REQUEST_DATE");
					String a[]=reqDate.split(" ");
					reqDate=a[0];
					String b[]=reqDate.split("-");
					reqDate=b[2]+"/"+b[1]+"/"+b[0];
					pendAppForm.setRequestDate(reqDate);
					pendAppForm.setLocationId(rs.getString("LOCATION_ID").toUpperCase());
					pendAppForm.setStorageLocationId(rs.getString("STORAGE_LOCATION_ID").toUpperCase());
					pendAppForm.setStorage(rs
							.getString("STORAGE"));
					pendAppForm.setHsnCode(rs.getString("HSN_Code"));
					pendAppForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME").toUpperCase());
					pendAppForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME").toUpperCase());
					pendAppForm.setMaterialGroupId(rs.getString("MATERIAL_GROUP_ID").toUpperCase());
					String isDMFMaterial=rs.getString("IS_DMF_MATERIAL");
					if(isDMFMaterial.equalsIgnoreCase("1"))
					{
						pendAppForm.setIsDMFMaterial("1");
						request.setAttribute("dmfMandatory", "dmfMandatory");
						pendAppForm.setDmfGradeId(rs.getString("DMF_GRADE_ID").toUpperCase());
						pendAppForm.setCosGradeNo(rs.getString("COS_GRADE_AND_NO").toUpperCase());
					}
					if(isDMFMaterial.equalsIgnoreCase("0")){
						pendAppForm.setIsDMFMaterial("0");
						pendAppForm.setDmfGradeId(rs.getString("DMF_GRADE_ID").toUpperCase());
						pendAppForm.setCosGradeNo(rs.getString("COS_GRADE_AND_NO").toUpperCase());
						request.setAttribute("dmfNotMandatory", "dmfNotMandatory");
					}
					pendAppForm.setAdditionalTest(rs.getString("ADDITIONAL_TEST"));
					
					pendAppForm.setCountryId(rs.getString("COUNTRY_ID").toUpperCase());
					pendAppForm.setCustomerName(rs.getString("CUSTOMER_NAME").toUpperCase());
					pendAppForm.setToBeUsedInProducts(rs.getString("TO_BE_USED_IN_PRODUCTS").toUpperCase());
					String isVendorStatus=rs.getString("IS_VENDOR_SPECIFIC_MATERIAL");
					if(isVendorStatus.equalsIgnoreCase("1"))
					{
						pendAppForm.setIsVendorSpecificMaterial("1");
						request.setAttribute("vedorMandatory", "vedorMandatory");
						pendAppForm.setMfgrName(rs.getString("MFGR_NAME").toUpperCase());
						pendAppForm.setSiteOfManufacture(rs.getString("SITE_OF_MANUFACTURE").toUpperCase());
					}
					if(isVendorStatus.equalsIgnoreCase("0"))
					{
						pendAppForm.setIsVendorSpecificMaterial("0");
						request.setAttribute("vedorNotMandatory", "vedorNotMandatory");
					}
					pendAppForm.setMfgrName(rs.getString("MFGR_NAME").toUpperCase());
					pendAppForm.setSiteOfManufacture(rs.getString("SITE_OF_MANUFACTURE").toUpperCase());
					pendAppForm.setTempCondition(rs.getString("TEMP_CONDITION").toUpperCase());
					pendAppForm.setStorageCondition(rs.getString("STORAGE_CONDITION").toUpperCase());
					pendAppForm.setRetestDays(rs.getString("RETEST_DAYS"));
					pendAppForm.setRetestType(rs.getString("RETEST_DAYS_TYPE"));
	               pendAppForm.setDutyElement(rs.getString("DUTY_ELEMENT").toUpperCase());
					
					pendAppForm.setPackageMaterialGroup(rs.getString("PACKING_MATERIAL_GROUP").toUpperCase());
					pendAppForm.setTypeOfMaterial(rs.getString("Type_Of_Material"));
					String typeOfMaterial=rs.getString("Type_Of_Material");
					
					if(typeOfMaterial.equalsIgnoreCase("Printed Material"))
					{
						request.setAttribute("materialTypeMandatory", "materialTypeMandatory");
						pendAppForm.setArtworkNo(rs.getString("ARTWORK_NO").toUpperCase());
						String isARTWORKRevisionStatus=rs.getString("IS_ARTWORK_REVISION");
						if(isARTWORKRevisionStatus.equalsIgnoreCase("1"))
						{
							pendAppForm.setIsArtworkRevision("1");
						}
						if(isARTWORKRevisionStatus.equalsIgnoreCase("0"))
							pendAppForm.setIsArtworkRevision("0");
						
					}
					else
						request.setAttribute("materialTypeNotMandatory", "materialTypeNotMandatory");
					
					pendAppForm.setExistingSAPItemCode(rs.getString("EXISTING_SAP_ITEM_CODE").toUpperCase());
					pendAppForm.setApproximateValue(rs.getString("APPROXIMATE_VALUE").toUpperCase());
				
				
					ArrayList fileList = new ArrayList();
					String uploadedFiles=rs.getString("Attachements");
					pendAppForm.setUnitOfMeasId(rs.getString("UNIT_OF_MEAS_ID"));
					pendAppForm.setValuationClass(rs.getString("VALUATION_CLASS").toUpperCase());
					pendAppForm.setPuchaseGroupId(rs.getString("PURCHASE_GROUP_ID").toUpperCase());
					if(uploadedFiles.equalsIgnoreCase(""))
					{
					}else{
					String v[] = uploadedFiles.split(",");
					int l = v.length;
					for (int i = 0; i < l; i++) 
					{
						PackageMaterialMasterForm pendAppForm2=new PackageMaterialMasterForm();
					int x=v[i].lastIndexOf("/");
					uploadedFiles=v[i].substring(x+1);		
					pendAppForm2.setFileList(uploadedFiles);
					pendAppForm2.setFilepath("jsp/EMicro Files/ESS/sapMasterRequest/PackageMaterial Files/UploadFiles/"+uploadedFiles+"");
					fileList.add(pendAppForm2);
					}
					
					
					request.setAttribute("listName", fileList);
					}
					
					String sapCodeno=rs.getString("SAP_CODE_NO");
					if(sapCodeno!=null)
					{
						pendAppForm.setSapCodeNo(rs.getString("SAP_CODE_NO"));
						String sapCodeExist=rs.getString("SAP_CODE_EXISTS");
						pendAppForm.setSapCodeNo(sapCodeno);
						if(sapCodeExist.equalsIgnoreCase("1"))
						{
							pendAppForm.setSapCodeExists("On");
						}
						if(sapCodeExist.equalsIgnoreCase("0"))
							pendAppForm.setSapCodeExistsNo("On");
						
						String createDate=rs.getString("SAP_CREATION_DATE");
						String a1[]=createDate.split(" ");
						createDate=a1[0];
						String b1[]=createDate.split("-");
						createDate=b1[2]+"/"+b1[1]+"/"+b1[0];
						pendAppForm.setSapCreationDate(createDate);
						pendAppForm.setSapCreatedBy(rs.getString("SAP_CREATED_BY"));
					}
				
					
					
				
				}
					}
				if(filterBy.equalsIgnoreCase("Pending")){
					request.setAttribute("approveButton", "approveButton");
					request.setAttribute("rejectButton", "rejectButton");
				}
				
				
				
				
				
				//set ApproverDetails 
				checkStatus=0;int appStatus=0;
				LinkedList listApprers=new LinkedList();
				String getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
				"where mast.Location='"+location+"' AND  mast.Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mast.Approver_Id=emp.PERNR order by Priority";
				ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
				while(rsApprDetails.next())
				{
					checkStatus=1;
					ApprovalsForm apprvers=new ApprovalsForm();
					apprvers.setPriority(rsApprDetails.getString("Priority"));
					apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
					String empCode=rsApprDetails.getString("Approver_Id");
					String approveStatus="";
					String actualapprover="";
					boolean data=false;
					String recordStatus="select mast.Priority,mast.Approver_Id,mast.Parllel_Approver_1,mast.Parllel_Approver_2,all_r.Actual_Approver,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
					"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
					"mast.Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
					"or mast.Role='Creator') and mast.Approver_Id=emp.PERNR  and all_r.req_type='Material Master' group by mast.Priority,mast.Priority,mast.Approver_Id,mast.Parllel_Approver_1,mast.Parllel_Approver_2,all_r.Actual_Approver,emp.EMP_FULLNAME,all_r.Req_Status," +
					"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
					ResultSet rsAppInfo=ad.selectQuery(recordStatus);
					while(rsAppInfo.next())
					{
						
						actualapprover=rsAppInfo.getString("Actual_Approver");
						if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Approver_Id")))
						{
							apprvers.setEmployeeCode(rsAppInfo.getString("Approver_Id"));
							data=true;
						}
						if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Parllel_Approver_1")))
						{
							apprvers.setEmployeeCode(rsAppInfo.getString("Parllel_Approver_1"));
							data=true;
						}
						if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Parllel_Approver_2")))
						{
							apprvers.setEmployeeCode(rsAppInfo.getString("Parllel_Approver_2"));
							data=true;
						}
						
						apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
						approveStatus=rsAppInfo.getString("Req_Status");
						if(approveStatus.equalsIgnoreCase(""))
						{
							apprvers.setApproveStatus("In Process");
						}
						if(approveStatus.equalsIgnoreCase("Approved")|| approveStatus.equalsIgnoreCase("Completed"))
						{
						apprvers.setDate(rsAppInfo.getString("approved_date"));
						}else{
							apprvers.setDate(rsAppInfo.getString("rejected_date"));
							appStatus=1;
						}
						String comments=rsAppInfo.getString("Comments");
						if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
						{
							apprvers.setComments("");
						}else{
							apprvers.setComments(rsAppInfo.getString("Comments"));
						}
						
						
					}
					if(approveStatus.equalsIgnoreCase("") && appStatus==0)
					{
						apprvers.setApproveStatus("In Process");
					}
					String pernr="";

					if(data==true)
					{
						pernr=actualapprover;
					}
					else
					{
						pernr=rsApprDetails.getString("Approver_Id");
					}							
						
						
					String name="select EMP_FULLNAME from emp_official_info where PERNR='"+pernr+"'";
					ResultSet rsname=ad.selectQuery(name);
					if(rsname.next())
					{
						apprvers.setEmployeeName(rsname.getString("EMP_FULLNAME"));
					}
					listApprers.add(apprvers);
				}
				if(checkStatus==0)
				{
					getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
					"where mast.Location='"+location+"' AND  mast.Material_Type='"+matType+"' AND Material_Group='' and mast.Approver_Id=emp.PERNR order by Priority";
					rsApprDetails=ad.selectQuery(getApprDetails);
					while(rsApprDetails.next())
					{
						checkStatus=1;
						ApprovalsForm apprvers=new ApprovalsForm();
						apprvers.setPriority(rsApprDetails.getString("Priority"));
						apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
						String empCode=rsApprDetails.getString("Approver_Id");
						String approveStatus="";
						String actualapprover="";
						boolean data=false;
						String recordStatus="select mast.Priority,mast.Approver_Id,mast.Parllel_Approver_1,mast.Parllel_Approver_2,all_r.Actual_Approver,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
						"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
						"mast.Material_Type='"+matType+"' AND Material_Group='' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
						"or mast.Role='Creator') and mast.Approver_Id=emp.PERNR and all_r.req_type='Material Master'  group by mast.Priority,mast.Priority,mast.Approver_Id,mast.Parllel_Approver_1,mast.Parllel_Approver_2,all_r.Actual_Approver,emp.EMP_FULLNAME,all_r.Req_Status," +
						"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
						ResultSet rsAppInfo=ad.selectQuery(recordStatus);
						while(rsAppInfo.next())
						{
							
							actualapprover=rsAppInfo.getString("Actual_Approver");
							if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Approver_Id")))
							{
								apprvers.setEmployeeCode(rsAppInfo.getString("Approver_Id"));
								data=true;
							}
							if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Parllel_Approver_1")))
							{
								apprvers.setEmployeeCode(rsAppInfo.getString("Parllel_Approver_1"));
								data=true;
							}
							if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Parllel_Approver_2")))
							{
								apprvers.setEmployeeCode(rsAppInfo.getString("Parllel_Approver_2"));
								data=true;
							}
							apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
							approveStatus=rsAppInfo.getString("Req_Status");
							
							if(approveStatus.equalsIgnoreCase("Approved")|| approveStatus.equalsIgnoreCase("Completed"))
							{
							String approveDate=	rsAppInfo.getString("approved_date");
							
							String a[]=approveDate.split(" ");
							approveDate=a[0];
							String b[]=approveDate.split("-");
							approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
							
							apprvers.setDate(approveDate);
							}else{
								String rejectDate=	rsAppInfo.getString("rejected_date");
								appStatus=1;
								String a[]=rejectDate.split(" ");
								rejectDate=a[0];
								String b[]=rejectDate.split("-");
								rejectDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
								apprvers.setDate(rejectDate);
							}
							String comments=rsAppInfo.getString("Comments");
							if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
							{
								apprvers.setComments("");
							}else{
								apprvers.setComments(rsAppInfo.getString("Comments"));
							}
						}
						if(approveStatus.equalsIgnoreCase("") && appStatus==0)
						{
							apprvers.setApproveStatus("In Process");
						}
						String pernr="";

						if(data==true)
						{
							pernr=actualapprover;
						}
						else
						{
							pernr=rsApprDetails.getString("Approver_Id");
						}				
							
						String name="select EMP_FULLNAME from emp_official_info where PERNR='"+pernr+"'";
						ResultSet rsname=ad.selectQuery(name);
						if(rsname.next())
						{
							apprvers.setEmployeeName(rsname.getString("EMP_FULLNAME"));
						}
						listApprers.add(apprvers);
				}
				}
				request.setAttribute("approverDetails", listApprers);
				
				if(userRole.equalsIgnoreCase("User"))
				{
				return mapping.findForward("VERPDetails");
				}
				if(userRole.equalsIgnoreCase("Accounts"))
				{
				return mapping.findForward("VERP_Account");
				}
				if(userRole.equalsIgnoreCase("Creator"))
				{
					Date dNow = new Date( );
					 SimpleDateFormat ft = new SimpleDateFormat ("dd/MM/yyyy");
						String dateNow = ft.format(dNow);
						pendAppForm.setSapCreationDate(dateNow);
					pendAppForm.setSapCreatedBy(user.getEmployeeNo()+"-"+user.getFullName());
					
				return mapping.findForward("VERP_Creator");
				}
				
					
				}
				
				if(matType.equalsIgnoreCase("BULK")){
					if(filterBy.equalsIgnoreCase("Pending")){
						request.setAttribute("approveButton", "approveButton");
						request.setAttribute("rejectButton", "rejectButton");
					}
					if(userRole.equalsIgnoreCase("User"))
					{
						
						String getSemiFinished="select mat.REQUEST_NO,mat.Type,loc.LOCATION_CODE,loc.LOCATION_CODE,stLoc.MAT_TYPE,mat.MATERIAL_GROUP_ID,mat.REQUEST_DATE,loc.LOCNAME,stLoc.STORAGE_LOCATION_NAME,mat.MATERIAL_SHORT_NAME," +
		 				"mat.MATERIAL_LONG_NAME,matGroup.STXT,uom.LTXT,pac.PACK_SIZE_DESC,mat.CUSTOMER_NAME,mat.SHELF_LIFE," +
		 				"mat.SHELF_LIFE_TYPE,mat.RETEST_DAYS,mat.RETEST_DAYS_TYPE,mat.STANDARD_BATCH_SIZE,mat.BATCH_CODE ,mat.TARGET_WEIGHT," +
		 				"wei.W_UOM_DESC,val.VALUATION_DESC,SAP_CODE_NO,SAP_CODE_EXISTS,SAP_CREATION_DATE,SAP_CREATED_BY from material_code_request as mat,Location as loc,STORAGE_LOCATION as " +
		 				"stLoc,MATERIAL_GROUP as matGroup ,UNIT_MESUREMENT AS uom,PACK_SIZE as pac,WEIGHT_UOM as wei,VALUATION_CLASS" +
		 				" as val where REQUEST_NO='"+reqId+"' and loc.LOCID=mat.LOCATION_ID and stLoc.STORAGE_LOCATION_ID=mat.STORAGE_LOCATION_ID " +
		 				"and matGroup.MATERIAL_GROUP_ID=mat.MATERIAL_GROUP_ID and uom.UNIT_OF_MEAS_ID=mat.UNIT_OF_MEAS_ID	" +
		 				"and pac.PACK_SIZE_CODE=mat.PACK_SIZE and wei.W_UOM_CODE=mat.WEIGHT_UOM " +
		 				"and val.VALUATION_ID=mat.VALUATION_CLASS";
						ResultSet rs=ad.selectQuery(getSemiFinished);
						if(rs.next())
						{

							pendAppForm.setRequestNo(reqId);
							pendAppForm.setRequestNumber(reqId);
							pendAppForm.setReqMaterialGroup(rs.getString("MATERIAL_GROUP_ID"));
							String reqDate=rs.getString("REQUEST_DATE");
							String a[]=reqDate.split(" ");
							reqDate=a[0];
							String b[]=reqDate.split("-");
							reqDate=b[2]+"/"+b[1]+"/"+b[0];
							pendAppForm.setRequestDate(reqDate);
							pendAppForm.setLocationId(rs.getString("LOCATION_CODE")+"-"+rs.getString("LOCNAME"));
							pendAppForm.setStorageLocationId(rs.getString("MAT_TYPE")+"-"+rs.getString("STORAGE_LOCATION_NAME"));
							pendAppForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME"));
							pendAppForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME"));
							pendAppForm.setMaterialGroupId(rs.getString("STXT"));
							
							pendAppForm.setUnitOfMeasId(rs.getString("LTXT"));
							pendAppForm.setPackSize(rs.getString("PACK_SIZE_DESC"));
							pendAppForm.setCustomerName(rs.getString("CUSTOMER_NAME"));
							pendAppForm.setShelfLife(rs.getString("SHELF_LIFE"));
							pendAppForm.setShelfType(rs.getString("SHELF_LIFE_TYPE"));
							pendAppForm.setStandardBatchSize(rs.getString("STANDARD_BATCH_SIZE"));
							pendAppForm.setBatchCode(rs.getString("BATCH_CODE"));
					 		pendAppForm.setTargetWeight(rs.getString("TARGET_WEIGHT"));
					 		
					 		
					 		pendAppForm.setWeightUOM(rs.getString("W_UOM_DESC"));
					 		pendAppForm.setRetestDays(rs.getString("RETEST_DAYS"));
					 		pendAppForm.setRetestType(rs.getString("RETEST_DAYS_TYPE"));
					 		pendAppForm.setValuationClass(rs.getString("VALUATION_DESC"));
					 		
					 		
					 		request.setAttribute("semidetails", pendAppForm);
						}
						//country
						String editRecord1="select cou.LANDX from material_code_request as m ,Country as cou " +
								"where REQUEST_NO='"+reqId+"'and cou.LAND1=m.COUNTRY_ID ";
			 		
			 		
					ResultSet rs1=ad.selectQuery(editRecord1);
					if(rs1.next())
					{
						pendAppForm.setCountryId(rs1.getString("LANDX"));
						
					}
					}else{
						//creator semifinished
						
						String getCountryDetails="select * from Country";
						LinkedList countryID=new LinkedList();
						LinkedList countryName=new LinkedList();
						ResultSet rsCountryDetails=ad.selectQuery(getCountryDetails);
						while(rsCountryDetails.next()){
							countryID.add(rsCountryDetails.getString("LAND1"));
							countryName.add(rsCountryDetails.getString("LAND1")+" - "+rsCountryDetails.getString("LANDX"));
						}
						pendAppForm.setCounID(countryID);
						pendAppForm.setCountryName(countryName);
						
						LinkedList weightUOMID=new LinkedList();
						LinkedList weightUOMName=new LinkedList();
						String getweightUOM="select * from WEIGHT_UOM";
						ResultSet rsweightUOM=ad.selectQuery(getweightUOM);
						while(rsweightUOM.next())
						{
							weightUOMID.add(rsweightUOM.getString("W_UOM_CODE"));
							weightUOMName.add(rsweightUOM.getString("W_UOM_CODE")+" - "+rsweightUOM.getString("W_UOM_DESC"));
						}
						pendAppForm.setWeightUOMID(weightUOMID);
						pendAppForm.setWeightUOMName(weightUOMName);
						
						LinkedList packSizeID=new LinkedList();
						LinkedList packSizeName=new LinkedList();
						String getPackSize="select * from PACK_SIZE";
						ResultSet rsPackSize=ad.selectQuery(getPackSize);
						while(rsPackSize.next())
						{
							packSizeID.add(rsPackSize.getString("PACK_SIZE_CODE"));
							packSizeName.add(rsPackSize.getString("PACK_SIZE_DESC"));
						}
						pendAppForm.setPackSizeID(packSizeID);
						pendAppForm.setPackSizeName(packSizeName);
					
						LinkedList materTypeIDList=new LinkedList();
						LinkedList materialTypeIdValueList=new LinkedList();
						
						
						String getMaterials="select * from MATERIAL_TYPE ";
						ResultSet rsMaterial=ad.selectQuery(getMaterials);
						while(rsMaterial.next())
						{
							materTypeIDList.add(rsMaterial.getString("id"));
							materialTypeIdValueList.add(rsMaterial.getString("MATERIAL_GROUP_ID")+" - "+rsMaterial.getString("M_DESC"));
						}
						pendAppForm.setMaterTypeIDList(materTypeIDList);
						pendAppForm.setMaterialTypeIdValueList(materialTypeIdValueList);
						
						
						
						
						ResultSet rs11 = ad.selectQuery("select * from location");
						ArrayList locationList=new ArrayList();
						ArrayList locationLabelList=new ArrayList();
						
						while(rs11.next()) {
							locationList.add(rs11.getString("LOCID"));
							locationLabelList.add(rs11.getString("LOCATION_CODE")+" - "+rs11.getString("LOCNAME"));
						}
						pendAppForm.setLocationIdList(locationList);
						pendAppForm.setLocationLabelList(locationLabelList);
						LinkedList storageID=new LinkedList();
						LinkedList storageName=new LinkedList();
						String getStorageDetails="select * from STORAGE_LOCATION where  MAT_TYPE='BULK'";
						ResultSet rsStrogeLocation=ad.selectQuery(getStorageDetails);
						while(rsStrogeLocation.next()){
							storageID.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID"));
							storageName.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID")+" - "+rsStrogeLocation.getString("STORAGE_LOCATION_NAME"));
						}
						pendAppForm.setStorageID(storageID);
						pendAppForm.setStorageIDName(storageName);
						LinkedList materGroupIDList=new LinkedList();
						LinkedList materialGroupIdValueList=new LinkedList();
						
						String getMaterialGroup="select * from MATERIAL_GROUP where MATERIAL_TYPE like '%"+matType+"%' order by STXT";
						ResultSet rsMaterialGroup=ad.selectQuery(getMaterialGroup);
						while(rsMaterialGroup.next())
						{
							materGroupIDList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID"));
							materialGroupIdValueList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID")+" - "+rsMaterialGroup.getString("STXT"));
						}
						pendAppForm.setMaterGroupIDList(materGroupIDList);
						pendAppForm.setMaterialGroupIdValueList(materialGroupIdValueList);
						
						
						LinkedList unitOfMeasIdList=new LinkedList();
						LinkedList unitOfMeasIdValues=new LinkedList();
						
						String getunitMesurement="select * from UNIT_MESUREMENT";
						ResultSet rsUnit=ad.selectQuery(getunitMesurement);
						while(rsUnit.next())
						{
							unitOfMeasIdList.add(rsUnit.getString("UNIT_OF_MEAS_ID"));
							unitOfMeasIdValues.add(rsUnit.getString("UNIT_OF_MEAS_ID")+" - "+rsUnit.getString("LTXT"));
						}
						pendAppForm.setUnitOfMeasIdList(unitOfMeasIdList);
						pendAppForm.setUnitOfMeasIdValues(unitOfMeasIdValues);
						
						LinkedList valuationClassID=new LinkedList();
						LinkedList valuationClassName=new LinkedList();
						String getValuation="select * from VALUATION_CLASS where MAT_TYPE='BULK'";
						ResultSet rsValuation=ad.selectQuery(getValuation);
						while(rsValuation.next())
						{
							valuationClassID.add(rsValuation.getString("VALUATION_ID"));
							valuationClassName.add(rsValuation.getString("VALUATION_ID")+" - "+rsValuation.getString("VALUATION_DESC"));
						}
						pendAppForm.setValuationClassID(valuationClassID);
						pendAppForm.setValuationClassName(valuationClassName);
						String getSemiFinished="select * from material_code_request where REQUEST_NO='"+reqId+"'";
						ResultSet rs=ad.selectQuery(getSemiFinished);
						while(rs.next())
						{

							pendAppForm.setRequestNo(reqId);
							pendAppForm.setRequestNumber(reqId);
							String reqDate=rs.getString("REQUEST_DATE");
							String a[]=reqDate.split(" ");
							reqDate=a[0];
							String b[]=reqDate.split("-");
							reqDate=b[2]+"/"+b[1]+"/"+b[0];
							pendAppForm.setRequestDate(reqDate.toUpperCase());
							
							pendAppForm.setLocationId(rs.getString("LOCATION_ID").toUpperCase());
							pendAppForm.setMaterialTypeId(rs.getString("MATERIAL_TYPE_ID").toUpperCase());
							pendAppForm.setStorageLocationId(rs.getString("STORAGE_LOCATION_ID").toUpperCase());
							pendAppForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME").toUpperCase());
							pendAppForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME").toUpperCase());
							pendAppForm.setMaterialGroupId(rs.getString("MATERIAL_GROUP_ID").toUpperCase());
							
							pendAppForm.setUnitOfMeasId(rs.getString("UNIT_OF_MEAS_ID"));
					 		pendAppForm.setPackSize(rs.getString("PACK_SIZE").toUpperCase());
					 		pendAppForm.setCountryId(rs.getString("COUNTRY_ID").toUpperCase());
					 		pendAppForm.setCustomerName(rs.getString("CUSTOMER_NAME").toUpperCase());
					 		pendAppForm.setShelfLife(rs.getString("SHELF_LIFE"));
					 		pendAppForm.setShelfType(rs.getString("SHELF_LIFE_TYPE"));
					 		pendAppForm.setStandardBatchSize(rs.getString("STANDARD_BATCH_SIZE").toUpperCase());
					 		pendAppForm.setBatchCode(rs.getString("BATCH_CODE").toUpperCase());
					 		pendAppForm.setTargetWeight(rs.getString("TARGET_WEIGHT").toUpperCase());
					 		pendAppForm.setProdInspMemo(rs.getString("PROD_INSP_MEMO").toUpperCase());
					 		
					 		pendAppForm.setWeightUOM(rs.getString("WEIGHT_UOM").toUpperCase());
					 		pendAppForm.setRetestDays(rs.getString("RETEST_DAYS").toUpperCase());
					 		pendAppForm.setValuationClass(rs.getString("VALUATION_CLASS").toUpperCase());
					 		
					 		String sapCodeno=rs.getString("SAP_CODE_NO");
							if(sapCodeno!=null)
							{
								pendAppForm.setSapCodeNo(rs.getString("SAP_CODE_NO"));
								String sapCodeExist=rs.getString("SAP_CODE_EXISTS");
								if(sapCodeExist.equalsIgnoreCase("1"))
								{
									pendAppForm.setSapCodeExists("On");
								}
								if(sapCodeExist.equalsIgnoreCase("0"))
									pendAppForm.setSapCodeExistsNo("On");
							
								String createDate=rs.getString("SAP_CREATION_DATE");
								String a1[]=createDate.split(" ");
								createDate=a1[0];
								String b1[]=createDate.split("-");
								createDate=b1[2]+"/"+b1[1]+"/"+b1[0];
								pendAppForm.setSapCreationDate(createDate);
								pendAppForm.setSapCreatedBy(rs.getString("SAP_CREATED_BY"));
							}
						
						}
						
					}
				
					if(filterBy.equalsIgnoreCase("Pending")){
						request.setAttribute("approveButton", "approveButton");
						request.setAttribute("rejectButton", "rejectButton");
					}
					
					//set ApproverDetails 
					checkStatus=0;int appStatus=0;
					LinkedList listApprers=new LinkedList();
					String getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
					"where mast.Location='"+location+"' AND  mast.Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mast.Approver_Id=emp.PERNR order by Priority";
					ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
					while(rsApprDetails.next())
					{
						checkStatus=1;
						ApprovalsForm apprvers=new ApprovalsForm();
						apprvers.setPriority(rsApprDetails.getString("Priority"));
						apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
						String empCode=rsApprDetails.getString("Approver_Id");
						String approveStatus="";
						String actualapprover="";
						boolean data=false;
						String recordStatus="select mast.Priority,mast.Approver_Id,mast.Parllel_Approver_1,mast.Parllel_Approver_2,all_r.Actual_Approver,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
						"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
						"mast.Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
						"or mast.Role='Creator') and mast.Approver_Id=emp.PERNR  and all_r.req_type='Material Master' group by mast.Priority,mast.Priority,mast.Approver_Id,mast.Parllel_Approver_1,mast.Parllel_Approver_2,all_r.Actual_Approver,emp.EMP_FULLNAME,all_r.Req_Status," +
						"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
						ResultSet rsAppInfo=ad.selectQuery(recordStatus);
						while(rsAppInfo.next())
						{
							actualapprover=rsAppInfo.getString("Actual_Approver");
							if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Approver_Id")))
							{
								apprvers.setEmployeeCode(rsAppInfo.getString("Approver_Id"));
								data=true;
							}
							if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Parllel_Approver_1")))
							{
								apprvers.setEmployeeCode(rsAppInfo.getString("Parllel_Approver_1"));
								data=true;
							}
							if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Parllel_Approver_2")))
							{
								apprvers.setEmployeeCode(rsAppInfo.getString("Parllel_Approver_2"));
								data=true;
							}
							apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
							approveStatus=rsAppInfo.getString("Req_Status");
							if(approveStatus.equalsIgnoreCase(""))
							{
								apprvers.setApproveStatus("In Process");
							}
							if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
							{
							apprvers.setDate(rsAppInfo.getString("approved_date"));
							}else{
								apprvers.setDate(rsAppInfo.getString("rejected_date"));
								appStatus=1;
							}
							String comments=rsAppInfo.getString("Comments");
							if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
							{
								apprvers.setComments("");
							}else{
								apprvers.setComments(rsAppInfo.getString("Comments"));
							}
							
							
						}
						if(approveStatus.equalsIgnoreCase("") && appStatus==0)
						{
							apprvers.setApproveStatus("In Process");
						}
						String pernr="";

						if(data==true)
						{
							pernr=actualapprover;
						}
						else
						{
							pernr=rsApprDetails.getString("Approver_Id");
						}			
							
						String name="select EMP_FULLNAME from emp_official_info where PERNR='"+pernr+"'";
						ResultSet rsname=ad.selectQuery(name);
						if(rsname.next())
						{
							apprvers.setEmployeeName(rsname.getString("EMP_FULLNAME"));
						}
						listApprers.add(apprvers);
					}
					if(checkStatus==0)
					{
						getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
						"where mast.Location='"+location+"' AND  mast.Material_Type='"+matType+"' AND Material_Group='' and mast.Approver_Id=emp.PERNR order by Priority";
						rsApprDetails=ad.selectQuery(getApprDetails);
						while(rsApprDetails.next())
						{
							checkStatus=1;
							ApprovalsForm apprvers=new ApprovalsForm();
							apprvers.setPriority(rsApprDetails.getString("Priority"));
							apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
							String empCode=rsApprDetails.getString("Approver_Id");
							String approveStatus="";
							String actualapprover="";
							boolean data=false;
							String recordStatus="select mast.Priority,mast.Approver_Id,mast.Parllel_Approver_1,mast.Parllel_Approver_2,all_r.Actual_Approver,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
							"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
							"mast.Material_Type='"+matType+"' AND Material_Group='' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
							"or mast.Role='Creator') and mast.Approver_Id=emp.PERNR and all_r.req_type='Material Master'  group by mast.Priority,mast.Priority,mast.Approver_Id,mast.Parllel_Approver_1,mast.Parllel_Approver_2,all_r.Actual_Approver,emp.EMP_FULLNAME,all_r.Req_Status," +
							"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
							ResultSet rsAppInfo=ad.selectQuery(recordStatus);
							while(rsAppInfo.next())
							{
								
								actualapprover=rsAppInfo.getString("Actual_Approver");
								if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Approver_Id")))
								{
									apprvers.setEmployeeCode(rsAppInfo.getString("Approver_Id"));
									data=true;
								}
								if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Parllel_Approver_1")))
								{
									apprvers.setEmployeeCode(rsAppInfo.getString("Parllel_Approver_1"));
									data=true;
								}
								if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Parllel_Approver_2")))
								{
									apprvers.setEmployeeCode(rsAppInfo.getString("Parllel_Approver_2"));
									data=true;
								}
								apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
								approveStatus=rsAppInfo.getString("Req_Status");
								
								if(approveStatus.equalsIgnoreCase("Approved")|| approveStatus.equalsIgnoreCase("Completed"))
								{
								String approveDate=	rsAppInfo.getString("approved_date");
								
								String a[]=approveDate.split(" ");
								approveDate=a[0];
								String b[]=approveDate.split("-");
								approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
								
								apprvers.setDate(approveDate);
								}else{
									String rejectDate=	rsAppInfo.getString("rejected_date");
									appStatus=1;
									String a[]=rejectDate.split(" ");
									rejectDate=a[0];
									String b[]=rejectDate.split("-");
									rejectDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
									apprvers.setDate(rejectDate);
								}
								String comments=rsAppInfo.getString("Comments");
								if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
								{
									apprvers.setComments("");
								}else{
									apprvers.setComments(rsAppInfo.getString("Comments"));
								}
							}
							if(approveStatus.equalsIgnoreCase("") && appStatus==0)
							{
								apprvers.setApproveStatus("In Process");
							}
							String pernr="";

							if(data==true)
							{
								pernr=actualapprover;
							}
							else
							{
								pernr=rsApprDetails.getString("Approver_Id");
							}			 					
								
								
							String name="select EMP_FULLNAME from emp_official_info where PERNR='"+pernr+"'";
							ResultSet rsname=ad.selectQuery(name);
							if(rsname.next())
							{
								apprvers.setEmployeeName(rsname.getString("EMP_FULLNAME"));
							}
							listApprers.add(apprvers);
					}
					}
					request.setAttribute("approverDetails", listApprers);
					if(userRole.equalsIgnoreCase("User"))
					{
					return mapping.findForward("HALBDetails");
					}
					if(userRole.equalsIgnoreCase("Accounts"))
					{
					return mapping.findForward("HALB_Account");
					}
					if(userRole.equalsIgnoreCase("Creator"))
					{
						Date dNow = new Date( );
						 SimpleDateFormat ft = new SimpleDateFormat ("dd/MM/yyyy");
							String dateNow = ft.format(dNow);
							pendAppForm.setSapCreationDate(dateNow);
						pendAppForm.setSapCreatedBy(user.getEmployeeNo()+"-"+user.getFullName());
						
					return mapping.findForward("HALB_Creator");
					}
				}
				if(matType.equalsIgnoreCase("FG") || matType.equalsIgnoreCase("HAWA") ){

					LinkedList finDetails=new LinkedList();
					if(userRole.equalsIgnoreCase("User"))
					{
						String getFinishedProduct="select mat.HSN_Code, mat.REQUEST_NO,mat.Storage,mat.Type,loc.LOCATION_CODE,mat.MATERIAL_GROUP_ID,mat.REQUEST_DATE,loc.LOCNAME,mat.MANUFACTURED_AT," +
				 	  "mat.MATERIAL_SHORT_NAME, mat.MATERIAL_LONG_NAME,matGroup.STXT,uom.LTXT,mat.DOMESTIC_OR_EXPORTS,cou.LANDX,mat.CUSTOMER_NAME," +
				 	  "mat.SALEABLE_OR_SAMPLE,mat.SALES_PACK_ID,pac.P_TYPE_DESC,sal.S_UOM_DESC,div.DIV_DESC,the.THER_SEG_DESC,bran.BRAND_DESC, " +
				 	  "st.STRENGTH_DESC,gen.GEN_NAME_DESC,mat.GROSS_WEIGHT,mat.NET_WEIGHT,mat.DIMENSION," +
				 	  "mat.Material_Pricing,mat.SHELF_LIFE,mat.SHELF_LIFE_TYPE,mat.STANDARD_BATCH_SIZE,mat.BATCH_CODE ," +
				 	  "SAP_CODE_NO,SAP_CODE_EXISTS,SAP_CREATION_DATE,SAP_CREATED_BY from material_code_request as mat,Location as loc,MATERIAL_GROUP as matGroup ," +
				 	  "UNIT_MESUREMENT AS uom,Country as cou,PACK_TYPE as pac,SALES_UOM as sal,DIVISION as div,THERAPEUTIC_SEGMENT as the,BRAND as bran," +
				 	  "STRENGTH as st,GENERIC_NAME as gen " +
				 	  "where REQUEST_NO='"+reqId+"' and loc.LOCID=mat.LOCATION_ID  and " +
				 	  "cou.LAND1=mat.COUNTRY_ID and pac.P_TYPE_CODE=mat.PACK_TYPE_ID and sal.S_UOM_CODE=mat.SALES_UNIT_OF_MEAS_ID and " +
				 	  "uom.UNIT_OF_MEAS_ID=mat.UNIT_OF_MEAS_ID and matGroup.MATERIAL_GROUP_ID=mat.MATERIAL_GROUP_ID and div.DIV_CODE=mat.DIVISION_ID " +
				 	  "and the.THER_SEG_CODE=mat.THERAPEUTIC_SEGMENT_ID and bran.BRAND_CODE=mat.BRAND_ID and st.STRENGTH_CODE=mat.STRENGTH_ID" +
				 	  " and gen.GEN_NAME_CODE=mat.GENERIC_NAME    ";
						ResultSet rs=ad.selectQuery(getFinishedProduct);
						if(rs.next())
						{
							pendAppForm.setRequestNo(reqId);
							pendAppForm.setRequestNumber(reqId);
							pendAppForm.setReqMaterialGroup(rs.getString("MATERIAL_GROUP_ID"));
							matType=rs.getString("Type");
							matGroup=rs.getString("MATERIAL_GROUP_ID");
							location=rs.getString("LOCATION_CODE");
							String reqDate=rs.getString("REQUEST_DATE");
							String a[]=reqDate.split(" ");
							reqDate=a[0];
							String b[]=reqDate.split("-");
							reqDate=b[2]+"/"+b[1]+"/"+b[0];
							pendAppForm.setRequestDate(reqDate);
							pendAppForm.setLocationId(rs.getString("LOCATION_CODE")+"-"+rs.getString("LOCNAME"));
							pendAppForm.setStorage(rs
									.getString("STORAGE"));
							
							String manufacturedAt=rs.getString("MANUFACTURED_AT");

							pendAppForm.setHsnCode(rs.getString("HSN_Code"));
							
							if(manufacturedAt.equalsIgnoreCase("Third Party"))
							{
								request.setAttribute("standardBathcNotMandatory", "standardBathcNotMandatory");
								request.setAttribute("manufactureMandatory", "manufactureMandatory");
							}
							else{
								request.setAttribute("standardBathcMandatory", "standardBathcMandatory");
								request.setAttribute("manufactureNotMandatory", "manufactureNotMandatory");
							}
							
							pendAppForm.setManufacturedAt(manufacturedAt);
						
							pendAppForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME"));
							pendAppForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME"));
							pendAppForm.setMaterialGroupId(rs.getString("STXT"));
							
							pendAppForm.setCountryId(rs.getString("LANDX"));
							pendAppForm.setCustomerName(rs.getString("CUSTOMER_NAME"));
							pendAppForm.setShelfLife(rs.getString("SHELF_LIFE"));
							pendAppForm.setShelfType(rs.getString("SHELF_LIFE_TYPE"));
							pendAppForm.setStandardBatchSize(rs.getString("STANDARD_BATCH_SIZE"));
							pendAppForm.setBatchCode(rs.getString("BATCH_CODE"));
							String salorsam=rs.getString("SALEABLE_OR_SAMPLE");
							if(salorsam.equalsIgnoreCase("1")){
								pendAppForm.setSaleableOrSample("Saleable");
								}
								if(salorsam.equalsIgnoreCase("2")){
									pendAppForm.setSaleableOrSample("Sample");
									}
								if(salorsam.equalsIgnoreCase("3")){
									pendAppForm.setSaleableOrSample("Converted Sample");
									}
							String domorexp=rs.getString("DOMESTIC_OR_EXPORTS");
							if(domorexp.equalsIgnoreCase("D")){
							pendAppForm.setDomesticOrExports("DOMESTIC");
							}
							if(domorexp.equalsIgnoreCase("E")){
								pendAppForm.setDomesticOrExports("EXPORTS");
								}
							if(domorexp.equalsIgnoreCase("V")){
								pendAppForm.setDomesticOrExports("Validation");
								}
							String salesPackId=rs.getString("SALES_PACK_ID");
							pendAppForm.setSalesPackId(rs.getString("SALES_PACK_ID"));
							pendAppForm.setPackTypeId(rs.getString("P_TYPE_DESC"));
							pendAppForm.setSalesUnitOfMeaseurement(rs.getString("S_UOM_DESC"));
							pendAppForm.setDivisionId(rs.getString("DIV_DESC"));
							pendAppForm.setTherapeuticSegmentID(rs.getString("THER_SEG_DESC"));
							pendAppForm.setBrandID(rs.getString("BRAND_DESC"));
							pendAppForm.setSrengthId(rs.getString("STRENGTH_DESC"));
							pendAppForm.setGenericName(rs.getString("GEN_NAME_DESC"));
							
							
							String matpri=rs.getString("Material_Pricing");
							if(matpri.equalsIgnoreCase("1")){
								pendAppForm.setMaterialPricing("Normal");
								}
							if(matpri.equalsIgnoreCase("2")){
								pendAppForm.setMaterialPricing("Spare parts");
								}
							if(matpri.equalsIgnoreCase("11")){
								pendAppForm.setMaterialPricing("Scheduled(Controled)");
								}
							if(matpri.equalsIgnoreCase("12")){
								pendAppForm.setMaterialPricing("Un-Scheduled(De-Con)");
								}
							if(matpri.equalsIgnoreCase("13")){
								pendAppForm.setMaterialPricing("PS / Promo (Micro)");
								}
							if(matpri.equalsIgnoreCase("14")){
								pendAppForm.setMaterialPricing("No MRP ED Extra(Mic)");
								}
							if(matpri.equalsIgnoreCase("15")){
								pendAppForm.setMaterialPricing("No MRP ED Incl (Mic)");
								}
							if(matpri.equalsIgnoreCase("16")){
								pendAppForm.setMaterialPricing("Scrap IT Extra (Mic)");
								}
							if(matpri.equalsIgnoreCase("17")){
								pendAppForm.setMaterialPricing("MRP(Con)-ED Exe(Mic)");
								}
							if(matpri.equalsIgnoreCase("18")){
								pendAppForm.setMaterialPricing("MRP(DeC)-ED Exe(Mic)");
								}
							if(matpri.equalsIgnoreCase("19")){
								pendAppForm.setMaterialPricing("No MRP-ED Exe(Mic)");
								}
							if(matpri.equalsIgnoreCase("20")){
								pendAppForm.setMaterialPricing("Food Prod(MRP)-Micro)");
								}
							if(matpri.equalsIgnoreCase("21")){
								pendAppForm.setMaterialPricing("Vet Prod (MRP)-Micr");
								}
							if(matpri.equalsIgnoreCase("22")){
								pendAppForm.setMaterialPricing("Generic Price Grp-Mi");
								}
							if(matpri.equalsIgnoreCase("23")){
								pendAppForm.setMaterialPricing("MRP(Vet)-ED Exe(Mic)");
								}
							if(matpri.equalsIgnoreCase("24")){
								pendAppForm.setMaterialPricing("P-to-P ED Extra(Mic)");
								}
							if(matpri.equalsIgnoreCase("25")){
								pendAppForm.setMaterialPricing("Cosm Prod(MRP)-Micro");
								}
							if(matpri.equalsIgnoreCase("26")){
								pendAppForm.setMaterialPricing("Scrap - ED Exe(Mic))");
								}
							if(matpri.equalsIgnoreCase("27")){
								pendAppForm.setMaterialPricing("Import Items PG");
								}
						
							pendAppForm.setGrossWeight(rs.getString("GROSS_WEIGHT"));
							pendAppForm.setNetWeight(rs.getString("NET_WEIGHT"));
							
							pendAppForm.setDimension(rs.getString("DIMENSION"));
							pendAppForm.setUnitOfMeasId(rs.getString("LTXT"));
						
							String sapCodeno=rs.getString("SAP_CODE_NO");
							if(sapCodeno!=null)
							{
								pendAppForm.setSapCodeNo(rs.getString("SAP_CODE_NO"));
								String sapCodeExist=rs.getString("SAP_CODE_EXISTS");
								if(sapCodeExist.equalsIgnoreCase("1"))
								{
									pendAppForm.setSapCodeExists("Yes");
								}
								if(sapCodeExist.equalsIgnoreCase("0"))
									pendAppForm.setSapCodeExists("No");
								String createDate=rs.getString("SAP_CREATION_DATE");
								String a1[]=createDate.split(" ");
								createDate=a1[0];
								String b1[]=createDate.split("-");
								createDate=b1[2]+"/"+b1[1]+"/"+b1[0];
								pendAppForm.setSapCreationDate(createDate);
								pendAppForm.setSapCreatedBy(rs.getString("SAP_CREATED_BY"));
							}
							}
						
						pendAppForm.setStorageLocationId("");
						pendAppForm.setWeightUOM("");
						pendAppForm.setValuationClass("");
							
				//storage location	
				String getStorageLoc="select s.STORAGE_LOCATION_ID,s.STORAGE_LOCATION_NAME from material_code_request m,STORAGE_LOCATION s where "
						+ "REQUEST_NO='"+reqId+"' and m.STORAGE_LOCATION_ID=s.STORAGE_LOCATION_ID";
				ResultSet rsStLoc=ad.selectQuery(getStorageLoc);
				if(rsStLoc.next()){
					pendAppForm.setStorageLocationId(rsStLoc.getString("STORAGE_LOCATION_ID")+"-"+rsStLoc.getString("STORAGE_LOCATION_NAME"));
				}
				//weight wom
				String getweight="select w.W_UOM_CODE,w.W_UOM_DESC from material_code_request m,WEIGHT_UOM w where REQUEST_NO='"+reqId+"' "
						+ "and m.WEIGHT_UOM=w.W_UOM_CODE";
				ResultSet rsWt=ad.selectQuery(getweight);
				if(rsWt.next()){
					pendAppForm.setWeightUOM(rsWt.getString("W_UOM_CODE")+"-"+rsWt.getString("W_UOM_DESC"));
				}
				String getValuation="select v.VALUATION_DESC from material_code_request m,VALUATION_CLASS v where REQUEST_NO='"+reqId+"' "
						+ "and m.VALUATION_CLASS=v.VALUATION_ID";
				ResultSet rsValu=ad.selectQuery(getValuation);
				if(rsValu.next()){
					pendAppForm.setValuationClass(rsValu.getString("VALUATION_DESC"));
				}
							//purchasegrp
				String getFinishedProduct1="select pur.PURCHASE_GROUP_DESC from material_code_request as mat,PURCHASE_GROUP as pur" +
				" where REQUEST_NO='"+reqId+"' and pur.PURCHASE_GROUP_ID=mat.PURCHASE_GROUP_ID";
				ResultSet rs1=ad.selectQuery(getFinishedProduct1);
				if(rs1.next())
				{
					pendAppForm.setPuchaseGroupId(rs1.getString("PURCHASE_GROUP_DESC"));
				}
					//tax type
					String editRecord11="select tax.T_CLASS_NAME from material_code_request as m,TAX_CLASS as tax" +
							" where REQUEST_NO='"+reqId+"'and  tax.T_CLASS_ID=m.Tax_Classification";
		 		
		 		
		 		ResultSet rsEditRecord11=ad.selectQuery(editRecord11);
				if(rsEditRecord11.next())
				{
					pendAppForm.setTaxClassification(rsEditRecord11.getString("T_CLASS_NAME"));
					
				}
				
						
				}
					else{
						
						pendAppForm.setMatType(matType);
						LinkedList packTypeID=new LinkedList();
						LinkedList packTypeName=new LinkedList();
						
						String getPackType="select * from PACK_TYPE";
						ResultSet rsPackType=ad.selectQuery(getPackType);
						while(rsPackType.next())
						{
							packTypeID.add(rsPackType.getString("P_TYPE_CODE"));
							packTypeName.add(rsPackType.getString("P_TYPE_CODE")+" - "+rsPackType.getString("P_TYPE_DESC"));
						}
						pendAppForm.setPackTypeID(packTypeID);
						pendAppForm.setPackTypeName(packTypeName);
					
						LinkedList packSizeID=new LinkedList();
						LinkedList packSizeName=new LinkedList();
						String getPackSize="select * from PACK_SIZE";
						ResultSet rsPackSize=ad.selectQuery(getPackSize);
						while(rsPackSize.next())
						{
							packSizeID.add(rsPackSize.getString("PACK_SIZE_CODE"));
							packSizeName.add(rsPackSize.getString("PACK_SIZE_CODE") );
						}
						pendAppForm.setPackSizeID(packSizeID);
						pendAppForm.setPackSizeName(packSizeName);
						
						LinkedList valuationClassID=new LinkedList();
						LinkedList valuationClassName=new LinkedList();
						String getValuation="select * from VALUATION_CLASS where MAT_TYPE='"+matType+"'";
						ResultSet rsValuation=ad.selectQuery(getValuation);
						while(rsValuation.next())
						{
							valuationClassID.add(rsValuation.getString("VALUATION_ID"));
							valuationClassName.add(rsValuation.getString("VALUATION_ID")+" - "+rsValuation.getString("VALUATION_DESC"));
						}
						pendAppForm.setValuationClassID(valuationClassID);
						pendAppForm.setValuationClassName(valuationClassName);
						
						LinkedList salesUOMID=new LinkedList();
						LinkedList salesUOMName=new LinkedList();
						String getSalesUOM="select * from SALES_UOM order by S_UOM_DESC";
						ResultSet rsSalesUOM=ad.selectQuery(getSalesUOM);
						while(rsSalesUOM.next())
						{
							salesUOMID.add(rsSalesUOM.getString("S_UOM_CODE"));
							packSizeName.add(rsSalesUOM.getString("S_UOM_CODE")+" - "+rsSalesUOM.getString("S_UOM_DESC"));
						}
						pendAppForm.setSalesUOMID(salesUOMID);
						pendAppForm.setSalesUOMName(salesUOMName);

						LinkedList divisonID=new LinkedList();
						LinkedList divisonName=new LinkedList();
						String getDivison="select * from DIVISION";
						ResultSet rsDivison=ad.selectQuery(getDivison);
						while(rsDivison.next())
						{
							divisonID.add(rsDivison.getString("DIV_CODE"));
							divisonName.add(rsDivison.getString("DIV_DESC"));
						}
						pendAppForm.setDivisonID(divisonID);
						pendAppForm.setDivisonName(divisonName);
						
						LinkedList therapeuticID=new LinkedList();
						LinkedList therapeuticName=new LinkedList();
						String getrstherapeutic="select * from THERAPEUTIC_SEGMENT";
						ResultSet rstherapeutic=ad.selectQuery(getrstherapeutic);
						while(rstherapeutic.next())
						{
							therapeuticID.add(rstherapeutic.getString("THER_SEG_CODE"));
							therapeuticName.add(rstherapeutic.getString("THER_SEG_DESC"));
						}
						pendAppForm.setTherapeuticID(therapeuticID);
						pendAppForm.setTherapeuticName(therapeuticName);
						
						LinkedList brandIDList=new LinkedList();
						LinkedList brandNameList=new LinkedList();
						String getBrand="select * from BRAND order by BRAND_DESC";
						ResultSet rsBrand=ad.selectQuery(getBrand);
						while(rsBrand.next())
						{
							brandIDList.add(rsBrand.getString("BRAND_CODE"));
							brandNameList.add(rsBrand.getString("BRAND_DESC"));
						}
						pendAppForm.setBrandIDList(brandIDList);
						pendAppForm.setBrandNameList(brandNameList);
						
						LinkedList strengthIDList=new LinkedList();
						LinkedList strengthNameList=new LinkedList();
						String getStrength="select * from STRENGTH";
						ResultSet rsStrength=ad.selectQuery(getStrength);
						while(rsStrength.next())
						{
							strengthIDList.add(rsStrength.getString("STRENGTH_CODE"));
							strengthNameList.add(rsStrength.getString("STRENGTH_DESC"));
						}
						pendAppForm.setStrengthIDList(strengthIDList);
						pendAppForm.setStrengthNameList(strengthNameList);
						
						LinkedList genericIDList=new LinkedList();
						LinkedList genericNameList=new LinkedList();
						String getGeneric="select * from GENERIC_NAME";
						ResultSet rsGeneric=ad.selectQuery(getGeneric);
						while(rsGeneric.next())
						{
							genericIDList.add(rsGeneric.getString("GEN_NAME_CODE"));
							genericNameList.add(rsGeneric.getString("GEN_NAME_DESC"));
						}
						pendAppForm.setGenericIDList(genericIDList);
						pendAppForm.setGenericNameList(genericNameList);
						
						LinkedList weightUOMID=new LinkedList();
						LinkedList weightUOMName=new LinkedList();
						String getweightUOM="select * from WEIGHT_UOM";
						ResultSet rsweightUOM=ad.selectQuery(getweightUOM);
						while(rsweightUOM.next())
						{
							weightUOMID.add(rsweightUOM.getString("W_UOM_CODE"));
							weightUOMName.add(rsweightUOM.getString("W_UOM_CODE")+" - "+rsweightUOM.getString("W_UOM_DESC"));
						}
						pendAppForm.setWeightUOMID(weightUOMID);
						pendAppForm.setWeightUOMName(weightUOMName);
						
						LinkedList puchaseGroupIdList=new LinkedList();
						LinkedList puchaseGroupIdValues=new LinkedList();
						
						String getPurchaseGroup="select * from PURCHASE_GROUP";
						ResultSet rsPurchaseGroup=ad.selectQuery(getPurchaseGroup);
						while(rsPurchaseGroup.next())
						{
							puchaseGroupIdList.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID"));
							puchaseGroupIdValues.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID")+" - "+rsPurchaseGroup.getString("PURCHASE_GROUP_DESC"));
						}
						pendAppForm.setPuchaseGroupIdList(puchaseGroupIdList);
						pendAppForm.setPuchaseGroupIdValues(puchaseGroupIdValues);
						
						
						
						LinkedList materTypeIDList=new LinkedList();
						LinkedList materialTypeIdValueList=new LinkedList();
						String materialTypeId=request.getParameter("materialType");

						String getMaterials="select * from MATERIAL_TYPE";
						ResultSet rsMaterial=ad.selectQuery(getMaterials);
						while(rsMaterial.next())
						{
							
							materTypeIDList.add(rsMaterial.getString("id"));
							materialTypeIdValueList.add(rsMaterial.getString("MATERIAL_GROUP_ID")+" - "+rsMaterial.getString("M_DESC"));
						}
						pendAppForm.setMaterTypeIDList(materTypeIDList);
						pendAppForm.setMaterialTypeIdValueList(materialTypeIdValueList);
						
						LinkedList storageID=new LinkedList();
						LinkedList storageName=new LinkedList();
						String getStorageDetails="select * from STORAGE_LOCATION where  MAT_TYPE='"+matType+"'";
						ResultSet rsStrogeLocation=ad.selectQuery(getStorageDetails);
						while(rsStrogeLocation.next()){
							storageID.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID"));
							storageName.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID")+" - "+rsStrogeLocation.getString("STORAGE_LOCATION_NAME"));
						}
						pendAppForm.setStorageID(storageID);
						pendAppForm.setStorageIDName(storageName);
						String getCountryDetails="select * from Country";
						LinkedList countryID=new LinkedList();
						LinkedList countryName=new LinkedList();
						ResultSet rsCountryDetails=ad.selectQuery(getCountryDetails);
						while(rsCountryDetails.next()){
							countryID.add(rsCountryDetails.getString("LAND1"));
							countryName.add(rsCountryDetails.getString("LAND1")+" - "+rsCountryDetails.getString("LANDX"));
						}
						pendAppForm.setCounID(countryID);
						pendAppForm.setCountryName(countryName);
						
						ResultSet rs11 = ad.selectQuery("select * from location");
						ArrayList locationList=new ArrayList();
						ArrayList locationLabelList=new ArrayList();
						
						while(rs11.next()) {
							locationList.add(rs11.getString("LOCID"));
							locationLabelList.add(rs11.getString("LOCATION_CODE")+" - "+rs11.getString("LOCNAME"));
						}
						pendAppForm.setLocationIdList(locationList);
						pendAppForm.setLocationLabelList(locationLabelList);
						
						LinkedList materGroupIDList=new LinkedList();
						LinkedList materialGroupIdValueList=new LinkedList();
						
						String getMaterialGroup="select * from MATERIAL_GROUP where MATERIAL_TYPE like '%"+matType+"%' order by STXT";
						ResultSet rsMaterialGroup=ad.selectQuery(getMaterialGroup);
						while(rsMaterialGroup.next())
						{
							materGroupIDList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID"));
							materialGroupIdValueList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID")+" - "+rsMaterialGroup.getString("STXT"));
						}
						pendAppForm.setMaterGroupIDList(materGroupIDList);
						pendAppForm.setMaterialGroupIdValueList(materialGroupIdValueList);
						
						
						
						LinkedList unitOfMeasIdList=new LinkedList();
						LinkedList unitOfMeasIdValues=new LinkedList();
						
						String getunitMesurement="select * from UNIT_MESUREMENT";
						ResultSet rsUnit=ad.selectQuery(getunitMesurement);
						while(rsUnit.next())
						{
							unitOfMeasIdList.add(rsUnit.getString("UNIT_OF_MEAS_ID"));
							unitOfMeasIdValues.add(rsUnit.getString("UNIT_OF_MEAS_ID")+" - "+rsUnit.getString("LTXT"));
						}
						pendAppForm.setUnitOfMeasIdList(unitOfMeasIdList);
						pendAppForm.setUnitOfMeasIdValues(unitOfMeasIdValues);
						
			// get material records
				
				String getFinishedProduct="select * from material_code_request where REQUEST_NO='"+reqId+"'";
				ResultSet rs=ad.selectQuery(getFinishedProduct);
				if(rs.next())
				{
					pendAppForm.setRequestNo(reqId);
					String reqDate=rs.getString("REQUEST_DATE");
					String a[]=reqDate.split(" ");
					reqDate=a[0];
					String b[]=reqDate.split("-");
					reqDate=b[2]+"/"+b[1]+"/"+b[0];
					pendAppForm.setRequestDate(reqDate);
					pendAppForm.setLocationId(rs.getString("LOCATION_ID").toUpperCase());
					pendAppForm.setMaterialTypeId(rs.getString("MATERIAL_TYPE_ID").toUpperCase());
					pendAppForm.setStorage(rs
							.getString("STORAGE"));
					String manufacturedAt=rs.getString("MANUFACTURED_AT");
					pendAppForm.setHsnCode(rs.getString("HSN_Code"));
					
					if(manufacturedAt.equalsIgnoreCase("Third Party"))
					{
						request.setAttribute("standardBathcNotMandatory", "standardBathcNotMandatory");
						request.setAttribute("manufactureMandatory", "manufactureMandatory");
					}
					else{
						request.setAttribute("standardBathcMandatory", "standardBathcMandatory");
						request.setAttribute("manufactureNotMandatory", "manufactureNotMandatory");
					}
					pendAppForm.setHsnCode(rs.getString("HSN_Code"));
					pendAppForm.setManufacturedAt(manufacturedAt);
					pendAppForm.setStorageLocationId(rs.getString("STORAGE_LOCATION_ID").toUpperCase());
					pendAppForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME").toUpperCase());
					pendAppForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME").toUpperCase());
					pendAppForm.setMaterialGroupId(rs.getString("MATERIAL_GROUP_ID").toUpperCase());
					pendAppForm.setValuationClass(rs.getString("VALUATION_CLASS").toUpperCase());
					pendAppForm.setCountryId(rs.getString("COUNTRY_ID").toUpperCase());
					pendAppForm.setCustomerName(rs.getString("CUSTOMER_NAME").toUpperCase());
					pendAppForm.setShelfLife(rs.getString("SHELF_LIFE"));
					pendAppForm.setShelfType(rs.getString("SHELF_LIFE_TYPE"));
					pendAppForm.setStandardBatchSize(rs.getString("STANDARD_BATCH_SIZE").toUpperCase());
					pendAppForm.setBatchCode(rs.getString("BATCH_CODE").toUpperCase());
					pendAppForm.setSaleableOrSample(rs.getString("SALEABLE_OR_SAMPLE").toUpperCase());
					pendAppForm.setDomesticOrExports(rs.getString("DOMESTIC_OR_EXPORTS").toUpperCase());
					String salesPackId=rs.getString("SALES_PACK_ID");
					pendAppForm.setSalesPackId(rs.getString("SALES_PACK_ID").toUpperCase());
					pendAppForm.setPackTypeId(rs.getString("PACK_TYPE_ID"));
					pendAppForm.setSalesUnitOfMeaseurement(rs.getString("SALES_UNIT_OF_MEAS_ID").toUpperCase());
					pendAppForm.setDivisionId(rs.getString("DIVISION_ID").toUpperCase());
					pendAppForm.setTherapeuticSegmentID(rs.getString("THERAPEUTIC_SEGMENT_ID").toUpperCase());
					pendAppForm.setBrandID(rs.getString("BRAND_ID").toUpperCase());
					pendAppForm.setSrengthId(rs.getString("STRENGTH_ID").toUpperCase());
					pendAppForm.setGenericName(rs.getString("GENERIC_NAME").toUpperCase());
					pendAppForm.setProdInspMemo(rs.getString("PROD_INSP_MEMO").toUpperCase());
					pendAppForm.setTaxClassification(rs.getString("Tax_Classification").toUpperCase());
					pendAppForm.setMaterialPricing(rs.getString("Material_Pricing").toUpperCase());
					pendAppForm.setGrossWeight(rs.getString("GROSS_WEIGHT").toUpperCase());
					pendAppForm.setNetWeight(rs.getString("NET_WEIGHT").toUpperCase());
					pendAppForm.setWeightUOM(rs.getString("WEIGHT_UOM").toUpperCase());
					pendAppForm.setDimension(rs.getString("DIMENSION").toUpperCase());
					pendAppForm.setUnitOfMeasId(rs.getString("UNIT_OF_MEAS_ID"));
					pendAppForm.setPuchaseGroupId(rs.getString("PURCHASE_GROUP_ID").toUpperCase());
				
					String sapCodeno=rs.getString("SAP_CODE_NO");
					if(sapCodeno!=null)
					{
						pendAppForm.setSapCodeNo(rs.getString("SAP_CODE_NO"));
						String sapCodeExist=rs.getString("SAP_CODE_EXISTS");
						if(sapCodeExist.equalsIgnoreCase("1"))
						{
							pendAppForm.setSapCodeExists("On");
						}
						if(sapCodeExist.equalsIgnoreCase("0"))
							pendAppForm.setSapCodeExistsNo("On");
					
						String createDate=rs.getString("SAP_CREATION_DATE");
						String a1[]=createDate.split(" ");
						createDate=a1[0];
						String b1[]=createDate.split("-");
						createDate=b1[2]+"/"+b1[1]+"/"+b1[0];
						pendAppForm.setSapCreationDate(createDate);
						pendAppForm.setSapCreatedBy(rs.getString("SAP_CREATED_BY"));
					}
					
					
				}
					}
				if(filterBy.equalsIgnoreCase("Pending")){
					request.setAttribute("approveButton", "approveButton");
					request.setAttribute("rejectButton", "rejectButton");
				}
				
				
				 matDetails="select loc.LOCATION_CODE,mat.Type,mat.CREATED_BY,mat.DOMESTIC_OR_EXPORTS from material_code_request as mat,Location as loc  where mat.REQUEST_NO='"+reqId+"' and mat.LOCATION_ID=loc.LOCID";
				 rsDetails=ad.selectQuery(matDetails);
				while(rsDetails.next())
				{
					
					matGroup=rsDetails.getString("DOMESTIC_OR_EXPORTS");
					if(matGroup.equals("D"))
			 			matGroup="Domestic";
			 		else
			 			matGroup="Export";
				}
		 		
				//set ApproverDetails 
				checkStatus=0;int appStatus=0;
				LinkedList listApprers=new LinkedList();
				String getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
				"where mast.Location='"+location+"' AND  mast.Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mast.Approver_Id=emp.PERNR order by Priority";
				ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
				while(rsApprDetails.next())
				{
					checkStatus=1;
					ApprovalsForm apprvers=new ApprovalsForm();
					apprvers.setPriority(rsApprDetails.getString("Priority"));
					apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
					String empCode=rsApprDetails.getString("Approver_Id");
					String approveStatus="";
					String actualapprover="";
					boolean data=false;
					String recordStatus="select mast.Priority,mast.Approver_Id,mast.Parllel_Approver_1,mast.Parllel_Approver_2,all_r.Actual_Approver,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
					"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
					"mast.Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
					"or mast.Role='Creator') and mast.Approver_Id=emp.PERNR and all_r.req_type='Material Master'  group by mast.Priority,mast.Priority,mast.Approver_Id,mast.Parllel_Approver_1,mast.Parllel_Approver_2,all_r.Actual_Approver,emp.EMP_FULLNAME,all_r.Req_Status," +
					"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
					ResultSet rsAppInfo=ad.selectQuery(recordStatus);
					while(rsAppInfo.next())
					{
						actualapprover=rsAppInfo.getString("Actual_Approver");
						if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Approver_Id")))
						{
							apprvers.setEmployeeCode(rsAppInfo.getString("Approver_Id"));
							data=true;
						}
						if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Parllel_Approver_1")))
						{
							apprvers.setEmployeeCode(rsAppInfo.getString("Parllel_Approver_1"));
							data=true;
						}
						if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Parllel_Approver_2")))
						{
							apprvers.setEmployeeCode(rsAppInfo.getString("Parllel_Approver_2"));
							data=true;
						}
						apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
						approveStatus=rsAppInfo.getString("Req_Status");
						if(approveStatus.equalsIgnoreCase(""))
						{
							apprvers.setApproveStatus("In Process");
						}
						if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
						{
						apprvers.setDate(rsAppInfo.getString("approved_date"));
						}else{
							apprvers.setDate(rsAppInfo.getString("rejected_date"));
							appStatus=1;
						}
						String comments=rsAppInfo.getString("Comments");
						if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
						{
							apprvers.setComments("");
						}else{
							apprvers.setComments(rsAppInfo.getString("Comments"));
						}
						
						
					}
					if(approveStatus.equalsIgnoreCase("") && appStatus==0)
					{
						apprvers.setApproveStatus("In Process");
					}
					String pernr="";

					if(data==true)
					{
						pernr=actualapprover;
					}
					else
					{
						pernr=rsApprDetails.getString("Approver_Id");
					}						
						
						
					String name="select EMP_FULLNAME from emp_official_info where PERNR='"+pernr+"'";
					ResultSet rsname=ad.selectQuery(name);
					if(rsname.next())
					{
						apprvers.setEmployeeName(rsname.getString("EMP_FULLNAME"));
					}
					listApprers.add(apprvers);
				}
				if(checkStatus==0)
				{
					getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
					"where mast.Location='"+location+"' AND  mast.Material_Type='"+matType+"' AND Material_Group='' and mast.Approver_Id=emp.PERNR order by Priority";
					rsApprDetails=ad.selectQuery(getApprDetails);
					while(rsApprDetails.next())
					{
						checkStatus=1;
						ApprovalsForm apprvers=new ApprovalsForm();
						apprvers.setPriority(rsApprDetails.getString("Priority"));
						apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
						String empCode=rsApprDetails.getString("Approver_Id");
						String approveStatus="";
						String actualapprover="";
						boolean data=false;
						String recordStatus="select mast.Priority,mast.Approver_Id,mast.Parllel_Approver_1,mast.Parllel_Approver_2,all_r.Actual_Approver,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
						"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
						"mast.Material_Type='"+matType+"' AND Material_Group='' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
						"or mast.Role='Creator') and mast.Approver_Id=emp.PERNR and all_r.req_type='Material Master' group by mast.Priority,mast.Priority,mast.Approver_Id,mast.Parllel_Approver_1,mast.Parllel_Approver_2,all_r.Actual_Approver,emp.EMP_FULLNAME,all_r.Req_Status," +
						"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
						ResultSet rsAppInfo=ad.selectQuery(recordStatus);
						while(rsAppInfo.next())
						{
							
							actualapprover=rsAppInfo.getString("Actual_Approver");
							if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Approver_Id")))
							{
								apprvers.setEmployeeCode(rsAppInfo.getString("Approver_Id"));
								data=true;
							}
							if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Parllel_Approver_1")))
							{
								apprvers.setEmployeeCode(rsAppInfo.getString("Parllel_Approver_1"));
								data=true;
							}
							if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Parllel_Approver_2")))
							{
								apprvers.setEmployeeCode(rsAppInfo.getString("Parllel_Approver_2"));
								data=true;
							}
							apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
							approveStatus=rsAppInfo.getString("Req_Status");
							
							if(approveStatus.equalsIgnoreCase("Approved")|| approveStatus.equalsIgnoreCase("Completed"))
							{
							String approveDate=	rsAppInfo.getString("approved_date");
							
							String a[]=approveDate.split(" ");
							approveDate=a[0];
							String b[]=approveDate.split("-");
							approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
							
							apprvers.setDate(approveDate);
							}else{
								String rejectDate=	rsAppInfo.getString("rejected_date");
								appStatus=1;
								String a[]=rejectDate.split(" ");
								rejectDate=a[0];
								String b[]=rejectDate.split("-");
								rejectDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
								apprvers.setDate(rejectDate);
							}
							String comments=rsAppInfo.getString("Comments");
							if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
							{
								apprvers.setComments("");
							}else{
								apprvers.setComments(rsAppInfo.getString("Comments"));
							}
						}
						if(approveStatus.equalsIgnoreCase("") && appStatus==0)
						{
							apprvers.setApproveStatus("In Process");
						}
						String pernr="";

						if(data==true)
						{
							pernr=actualapprover;
						}
						else
						{
							pernr=rsApprDetails.getString("Approver_Id");
						}			
							
						String name="select EMP_FULLNAME from emp_official_info where PERNR='"+pernr+"'";
						ResultSet rsname=ad.selectQuery(name);
						if(rsname.next())
						{
							apprvers.setEmployeeName(rsname.getString("EMP_FULLNAME"));
						}
						listApprers.add(apprvers);
				}
				}
				request.setAttribute("approverDetails", listApprers);
				
				if(userRole.equalsIgnoreCase("User"))
				{
				return mapping.findForward("finishedProduct");
				}
				if(userRole.equalsIgnoreCase("Accounts"))
				{
				return mapping.findForward("finishedProduct_Account");
				}
				if(userRole.equalsIgnoreCase("Creator"))
				{
					Date dNow = new Date( );
					 SimpleDateFormat ft = new SimpleDateFormat ("dd/MM/yyyy");
						String dateNow = ft.format(dNow);
						pendAppForm.setSapCreationDate(dateNow);
					pendAppForm.setSapCreatedBy(user.getEmployeeNo()+"-"+user.getFullName());
					
				return mapping.findForward("finishedProduct_Creator");
				}
				
				}
				if(matType.equalsIgnoreCase("RM"))
				{
				
					if(userRole.equalsIgnoreCase("User"))
					{
						
						
						String getMaterial="select  mat.HSN_Code,mat.REQUEST_NO,mat.Storage,mat.REQUEST_DATE,loc.LOCNAME,loc.LOCATION_CODE,mat.MATERIAL_GROUP_ID,stLoc.STORAGE_LOCATION_NAME,stLoc.MAT_TYPE," +
						" mat.MATERIAL_SHORT_NAME,mat.MATERIAL_LONG_NAME,matGroup.STXT,uom.LTXT,pur.PURCHASE_GROUP_DESC, mat.PHARMACOP_NAME," +
						"mat.PHARMACOP_GRADE,mat.GENERIC_NAME,mat.SYNONYM,mat.PHARMACOP_SPECIFICATION,mat.DUTY_ELEMENT, mat.IS_DMF_MATERIAL," +
						"dmf.DMF_GRADE_DESC,mat.MATERIAL_GRADE,mat.COS_GRADE_AND_NO,mat.ADDITIONAL_TEST, mat.IS_VENDOR_SPECIFIC_MATERIAL," +
						"mat.MFGR_NAME,mat.SITE_OF_MANUFACTURE,cou.LANDX,mat.CUSTOMER_NAME, mat.TO_BE_USED_IN_PRODUCTS,mat.SHELF_LIFE,mat.SHELF_LIFE_TYPE," +
						"mat.RETEST_DAYS ,mat.RETEST_DAYS_TYPE,val.VALUATION_DESC,mat.APPROXIMATE_VALUE,mat.Attachements,SAP_CODE_NO,SAP_CODE_EXISTS, " +
						"SAP_CREATION_DATE,SAP_CREATED_BY,rejected_flag from material_code_request as mat,Location as loc,STORAGE_LOCATION as stLoc,MATERIAL_GROUP " +
						"as matGroup ,UNIT_MESUREMENT AS uom,PURCHASE_GROUP as pur,DMF_GRADE as dmf,Country as cou, VALUATION_CLASS as val " +
						" where REQUEST_NO='"+reqId+"' and loc.LOCID=mat.LOCATION_ID and stLoc.STORAGE_LOCATION_ID=mat.STORAGE_LOCATION_ID and " +
						"matGroup.MATERIAL_GROUP_ID=mat.MATERIAL_GROUP_ID and uom.UNIT_OF_MEAS_ID=mat.UNIT_OF_MEAS_ID and pur.PURCHASE_GROUP_ID=mat.PURCHASE_GROUP_ID " +
						"and dmf.DMF_GRADE_ID=mat.DMF_GRADE_ID and cou.LAND1=mat.COUNTRY_ID and val.VALUATION_ID=mat.VALUATION_CLASS";	
						ResultSet rs=ad.selectQuery(getMaterial);
						while(rs.next())
						{
							pendAppForm.setRequestNo(reqId);
							pendAppForm.setRequestNumber(reqId);
							pendAppForm.setReqMaterialGroup(rs.getString("MATERIAL_GROUP_ID"));
						String reqDate=rs.getString("REQUEST_DATE");
						String a[]=reqDate.split(" ");
						reqDate=a[0];
						String b[]=reqDate.split("-");
						reqDate=b[2]+"/"+b[1]+"/"+b[0];
						pendAppForm.setRequestDate(reqDate);
						pendAppForm.setLocationId(rs.getString("LOCATION_CODE")+"-"+rs.getString("LOCNAME"));
						pendAppForm.setStorageLocationId(rs.getString("MAT_TYPE")+"-"+rs.getString("STORAGE_LOCATION_NAME"));
						
						pendAppForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME")); 
						pendAppForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME"));
						pendAppForm.setMaterialGroupId(rs.getString("STXT"));
						pendAppForm.setPharmacopName(rs.getString("PHARMACOP_NAME"));
					    String pharmacopGrade=rs.getString("PHARMACOP_GRADE");
					    pendAppForm.setHsnCode(rs.getString("HSN_Code"));
						pendAppForm.setPharmacopGrade(pharmacopGrade);
						pendAppForm.setStorage(rs
								.getString("STORAGE"));
						
						pendAppForm.setGenericName(rs.getString("GENERIC_NAME"));
						pendAppForm.setSynonym(rs.getString("SYNONYM"));
						pendAppForm.setPharmacopSpecification(rs.getString("PHARMACOP_SPECIFICATION"));
						String isDMfMaterial=rs.getString("IS_DMF_MATERIAL");
						if(isDMfMaterial.equalsIgnoreCase("1"))
						{
							pendAppForm.setIsDMFMaterial("YES");
						
							pendAppForm.setDmfGradeId(rs.getString("DMF_GRADE_DESC"));
							pendAppForm.setMaterialGrade(rs.getString("MATERIAL_GRADE"));
							pendAppForm.setCosGradeNo(rs.getString("COS_GRADE_AND_NO"));
							
						}
						pendAppForm.setAdditionalTest(rs.getString("ADDITIONAL_TEST"));
						if(isDMfMaterial.equalsIgnoreCase("0"))
						{
							pendAppForm.setIsDMFMaterial("NO");
							pendAppForm.setDmfGradeId(rs.getString("DMF_GRADE_DESC"));
							pendAppForm.setMaterialGrade(rs.getString("MATERIAL_GRADE"));
							pendAppForm.setCosGradeNo(rs.getString("COS_GRADE_AND_NO"));
							
							
						}
						
						pendAppForm.setCountryId(rs.getString("LANDX"));
						pendAppForm.setCustomerName(rs.getString("CUSTOMER_NAME"));
						pendAppForm.setToBeUsedInProducts(rs.getString("TO_BE_USED_IN_PRODUCTS"));
						
						String isVendorStatus=rs.getString("IS_VENDOR_SPECIFIC_MATERIAL");
						if(isVendorStatus.equalsIgnoreCase("1"))
						{
							pendAppForm.setIsVendorSpecificMaterial("YES");
							pendAppForm.setMfgrName(rs.getString("MFGR_NAME"));
							pendAppForm.setSiteOfManufacture(rs.getString("SITE_OF_MANUFACTURE"));
						}
						if(isVendorStatus.equalsIgnoreCase("0"))
						{
							pendAppForm.setIsVendorSpecificMaterial("NO");
						}
						
						
						pendAppForm.setShelfLife(rs.getString("SHELF_LIFE"));
						String dutyElement=rs.getString("DUTY_ELEMENT");
						if(dutyElement.equalsIgnoreCase("0"))
						{
							pendAppForm.setDutyElement("0-Duty Exempted Raw Materials for Finished product");
						}
						if(dutyElement.equalsIgnoreCase("2")){
							pendAppForm.setDutyElement("2-Indigenous Material with or without Cenvat");
						}
						if(dutyElement.equalsIgnoreCase("3")){
							pendAppForm.setDutyElement("N/A");
						}
						pendAppForm.setShelfLifeType(rs.getString("SHELF_LIFE_TYPE"));
						pendAppForm.setRetestDays(rs.getString("RETEST_DAYS"));
						pendAppForm.setRetestType(rs.getString("RETEST_DAYS_TYPE"));
						pendAppForm.setValuationClass(rs.getString("VALUATION_DESC"));
						pendAppForm.setApproximateValue(rs.getString("APPROXIMATE_VALUE"));
						pendAppForm.setUnitOfMeasId(rs.getString("LTXT"));
						pendAppForm.setPuchaseGroupId(rs.getString("PURCHASE_GROUP_DESC"));
					
					
						
						ArrayList fileList = new ArrayList();
						String uploadedFiles=rs.getString("Attachements");
						if(uploadedFiles.equalsIgnoreCase(""))
						{
							
						}else{
						String v[] = uploadedFiles.split(",");
						int l = v.length;
						for (int i = 0; i < l; i++) 
						{
							RawMaterialForm materialForm2=new RawMaterialForm();
							//String url=v[i];
							//materialForm2.setUrl(url);
						System.out.println(v[i]);
							materialForm2.setUploadFilePath(v[i]);
						int x=v[i].lastIndexOf("/");
						uploadedFiles=v[i].substring(x+1);		
						materialForm2.setFileList(uploadedFiles);
						
						fileList.add(materialForm2);
						}
						request.setAttribute("listName", fileList);
						
						String sapCodeno=rs.getString("SAP_CODE_NO");
						if(sapCodeno!=null)
						{
							pendAppForm.setSapCodeNo(rs.getString("SAP_CODE_NO"));
							String sapCodeExist=rs.getString("SAP_CODE_EXISTS");
							if(sapCodeExist.equalsIgnoreCase("1"))
							{
								pendAppForm.setSapCodeExists("Yes");
							}
							if(sapCodeExist.equalsIgnoreCase("0"))
								pendAppForm.setSapCodeExists("No");
							String createDate=rs.getString("SAP_CREATION_DATE");
							String a1[]=createDate.split(" ");
							createDate=a1[0];
							String b1[]=createDate.split("-");
							createDate=b1[2]+"/"+b1[1]+"/"+b1[0];
							pendAppForm.setSapCreationDate(createDate);
							pendAppForm.setSapCreatedBy(rs.getString("SAP_CREATED_BY"));
						}
						
						
					}
						String rejected_flag=rs.getString("rejected_flag");
						if(rejected_flag!=null)
						{
							if(rejected_flag.equalsIgnoreCase("y"))
								request.setAttribute("rejectedFLag", "rejectedFLag");
						}
					
					}
						String getMaterial1="select tem.TEMP_CON_DESC from material_code_request as mat,TEMP_CONDITION as tem " +
						" where REQUEST_NO='"+reqId+"' and tem.TEMP_CON_ID=mat.TEMP_CONDITION ";
				
				ResultSet rs1=ad.selectQuery(getMaterial1);
				while(rs1.next())
				{
					pendAppForm.setTempCondition(rs1.getString("TEMP_CON_DESC"));
				}
				
				//STORAGE_CONDITION
				
				String getMaterial2="select stcon.LTXT from material_code_request as mat,STORAGE_CONDITION as stcon" +
						" where REQUEST_NO='"+reqId+"'  and stcon.STO_COND_CODE=mat.STORAGE_CONDITION";	
				
				ResultSet rs2=ad.selectQuery(getMaterial2);
				while(rs2.next())
				{
					pendAppForm.setStorageCondition(rs2.getString("LTXT"));
				}
						
				}
					else{	
				String getCountryDetails="select * from Country";
				LinkedList countryID=new LinkedList();
				LinkedList countryName=new LinkedList();
				ResultSet rsCountryDetails=ad.selectQuery(getCountryDetails);
				while(rsCountryDetails.next()){
					countryID.add(rsCountryDetails.getString("LAND1"));
					countryName.add(rsCountryDetails.getString("LAND1")+" - "+rsCountryDetails.getString("LANDX"));
				}
				pendAppForm.setCounID(countryID);
				pendAppForm.setCountryName(countryName);
				
				ResultSet rs11 = ad.selectQuery("select * from location");
				ArrayList locationList=new ArrayList();
				ArrayList locationLabelList=new ArrayList();
				
				while(rs11.next()) {
					locationList.add(rs11.getString("LOCID"));
					locationLabelList.add(rs11.getString("LOCATION_CODE")+" - "+rs11.getString("LOCNAME"));
				}
				pendAppForm.setLocationIdList(locationList);
				pendAppForm.setLocationLabelList(locationLabelList);
				
				
				LinkedList storageID=new LinkedList();
				LinkedList storageName=new LinkedList();
				String getStorageDetails="select * from STORAGE_LOCATION where MAT_TYPE='RM'";
				ResultSet rsStrogeLocation=ad.selectQuery(getStorageDetails);
				while(rsStrogeLocation.next()){
					storageID.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID"));
					storageName.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID")+" - "+rsStrogeLocation.getString("STORAGE_LOCATION_NAME"));
				}
				pendAppForm.setStorageID(storageID);
				pendAppForm.setStorageIDName(storageName);
				
				LinkedList materTypeIDList=new LinkedList();
				LinkedList materialTypeIdValueList=new LinkedList();
				String getMaterials="select * from MATERIAL_TYPE";
				ResultSet rsMaterial=ad.selectQuery(getMaterials);
				while(rsMaterial.next())
				{
					materTypeIDList.add(rsMaterial.getString("id"));
					materialTypeIdValueList.add(rsMaterial.getString("MATERIAL_GROUP_ID")+" - "+rsMaterial.getString("M_DESC"));
				}
				pendAppForm.setMaterTypeIDList(materTypeIDList);
				pendAppForm.setMaterialTypeIdValueList(materialTypeIdValueList);
				
				LinkedList materGroupIDList=new LinkedList();
				LinkedList materialGroupIdValueList=new LinkedList();
				
				String getMaterialGroup="select * from MATERIAL_GROUP where MATERIAL_TYPE like '%"+matType+"%' order by STXT";
				ResultSet rsMaterialGroup=ad.selectQuery(getMaterialGroup);
				while(rsMaterialGroup.next())
				{
					materGroupIDList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID"));
					materialGroupIdValueList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID")+" - "+rsMaterialGroup.getString("STXT"));
				}
				pendAppForm.setMaterGroupIDList(materGroupIDList);
				pendAppForm.setMaterialGroupIdValueList(materialGroupIdValueList);
				
				LinkedList unitOfMeasIdList=new LinkedList();
				LinkedList unitOfMeasIdValues=new LinkedList();
				
				String getunitMesurement="select * from UNIT_MESUREMENT";
				ResultSet rsUnit=ad.selectQuery(getunitMesurement);
				while(rsUnit.next())
				{
					unitOfMeasIdList.add(rsUnit.getString("UNIT_OF_MEAS_ID"));
					unitOfMeasIdValues.add(rsUnit.getString("UNIT_OF_MEAS_ID")+" - "+rsUnit.getString("LTXT"));
				}
				pendAppForm.setUnitOfMeasIdList(unitOfMeasIdList);
				pendAppForm.setUnitOfMeasIdValues(unitOfMeasIdValues);
				
				LinkedList puchaseGroupIdList=new LinkedList();
				LinkedList puchaseGroupIdValues=new LinkedList();
				
				String getPurchaseGroup="select * from PURCHASE_GROUP";
				ResultSet rsPurchaseGroup=ad.selectQuery(getPurchaseGroup);
				while(rsPurchaseGroup.next())
				{
					puchaseGroupIdList.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID"));
					puchaseGroupIdValues.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID")+" - "+rsPurchaseGroup.getString("PURCHASE_GROUP_DESC"));
				}
				pendAppForm.setPuchaseGroupIdList(puchaseGroupIdList);
				pendAppForm.setPuchaseGroupIdValues(puchaseGroupIdValues);
				
				LinkedList dmfGradeIDList=new LinkedList();
				LinkedList dmfGradeIDValueList=new LinkedList();
				
				String getDMFValues="select * from DMF_GRADE";
				ResultSet rsDMFValues=ad.selectQuery(getDMFValues);
				while(rsDMFValues.next())
				{
					dmfGradeIDList.add(rsDMFValues.getString("DMF_GRADE_ID"));
					dmfGradeIDValueList.add(rsDMFValues.getString("DMF_GRADE_ID")+" - "+rsDMFValues.getString("DMF_GRADE_DESC"));
				}
				pendAppForm.setDmfGradeIDList(dmfGradeIDList);
				pendAppForm.setDmfGradeIDValueList(dmfGradeIDValueList);
				
				
				LinkedList valuationClassID=new LinkedList();
				LinkedList valuationClassName=new LinkedList();
				
				String getValuation="select * from VALUATION_CLASS where MAT_TYPE='RM'";
				ResultSet rsValuation=ad.selectQuery(getValuation);
				while(rsValuation.next())
				{
					valuationClassID.add(rsValuation.getString("VALUATION_ID"));
					valuationClassName.add(rsValuation.getString("VALUATION_ID")+" - "+rsValuation.getString("VALUATION_DESC"));
				}
				pendAppForm.setValuationClassID(valuationClassID);
				pendAppForm.setValuationClassName(valuationClassName);
				
				LinkedList tempIDList=new LinkedList();
				LinkedList temValueList=new LinkedList();
				String getTemp="select * from TEMP_CONDITION order by TEMP_CON_DESC";
				ResultSet rsTemp=ad.selectQuery(getTemp);
				while(rsTemp.next())
				{
					tempIDList.add(rsTemp.getString("TEMP_CON_ID"));
					temValueList.add(rsTemp.getString("TEMP_CON_ID")+" - "+rsTemp.getString("TEMP_CON_DESC"));
				}
				pendAppForm.setTempIDList(tempIDList);
				pendAppForm.setTemValueList(temValueList);
				
				LinkedList storageIDList=new LinkedList();
				LinkedList storageLocList=new LinkedList();
				String getStorageLoc="select * from STORAGE_CONDITION";
				ResultSet rsStorageLoc=ad.selectQuery(getStorageLoc);
				while(rsStorageLoc.next())
				{
					storageIDList.add(rsStorageLoc.getString("STO_COND_CODE"));
					storageLocList.add(rsStorageLoc.getString("STO_COND_CODE")+" - "+rsStorageLoc.getString("LTXT"));
				}
				pendAppForm.setStorageIDList(storageIDList);
				pendAppForm.setStorageLocList(storageLocList);
			// get material records
				
				String getMaterial="select * from material_code_request where REQUEST_NO='"+reqId+"'";
				ResultSet rs=ad.selectQuery(getMaterial);
				while(rs.next())
				{
					pendAppForm.setRequestNumber(reqId);
					String reqDate=rs.getString("REQUEST_DATE");
					String a[]=reqDate.split(" ");
					reqDate=a[0];
					String b[]=reqDate.split("-");
					reqDate=b[2]+"/"+b[1]+"/"+b[0];
					pendAppForm.setRequestDate(reqDate);
					pendAppForm.setLocationId(rs.getString("LOCATION_ID").toUpperCase());
					pendAppForm.setStorageLocationId(rs.getString("STORAGE_LOCATION_ID").toUpperCase());
					pendAppForm.setMaterialTypeId(rs.getString("MATERIAL_TYPE_ID").toUpperCase());
					pendAppForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME").toUpperCase()); 
					pendAppForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME").toUpperCase());
					pendAppForm.setMaterialGroupId(rs.getString("MATERIAL_GROUP_ID").toUpperCase());
					pendAppForm.setPharmacopName(rs.getString("PHARMACOP_NAME").toUpperCase());
				String pharmacopGrade=rs.getString("PHARMACOP_GRADE");
				 pendAppForm.setHsnCode(rs.getString("HSN_Code"));
				pendAppForm.setPharmacopGrade(pharmacopGrade);
				pendAppForm.setStorage(rs
						.getString("STORAGE"));
				pendAppForm.setGenericName(rs.getString("GENERIC_NAME").toUpperCase());
				pendAppForm.setSynonym(rs.getString("SYNONYM"));
				pendAppForm.setPharmacopSpecification(rs.getString("PHARMACOP_SPECIFICATION").toUpperCase());
					String isDMfMaterial=rs.getString("IS_DMF_MATERIAL");
					if(isDMfMaterial.equalsIgnoreCase("1"))
					{
						pendAppForm.setIsDMFMaterial("1");
						pendAppForm.setDmfGradeId(rs.getString("DMF_GRADE_ID").toUpperCase());
						pendAppForm.setMaterialGrade(rs.getString("MATERIAL_GRADE").toUpperCase());
						pendAppForm.setCosGradeNo(rs.getString("COS_GRADE_AND_NO").toUpperCase());
						
					}
					pendAppForm.setAdditionalTest(rs.getString("ADDITIONAL_TEST").toUpperCase());
					if(isDMfMaterial.equalsIgnoreCase("0"))
					{
						pendAppForm.setIsDMFMaterial("0");
						pendAppForm.setDmfGradeId(rs.getString("DMF_GRADE_ID").toUpperCase());
						pendAppForm.setMaterialGrade(rs.getString("MATERIAL_GRADE").toUpperCase());
						pendAppForm.setCosGradeNo(rs.getString("COS_GRADE_AND_NO").toUpperCase());
						
					}
					
					pendAppForm.setCountryId(rs.getString("COUNTRY_ID").toUpperCase());
					pendAppForm.setCustomerName(rs.getString("CUSTOMER_NAME").toUpperCase());
					pendAppForm.setToBeUsedInProducts(rs.getString("TO_BE_USED_IN_PRODUCTS").toUpperCase());
					
					String isVendorStatus=rs.getString("IS_VENDOR_SPECIFIC_MATERIAL");
					if(isVendorStatus.equalsIgnoreCase("1"))
					{
						pendAppForm.setIsVendorSpecificMaterial("1");
						pendAppForm.setMfgrName(rs.getString("MFGR_NAME").toUpperCase());
						pendAppForm.setSiteOfManufacture(rs.getString("SITE_OF_MANUFACTURE").toUpperCase());
					}
					if(isVendorStatus.equalsIgnoreCase("0"))
					{
						pendAppForm.setIsVendorSpecificMaterial("0");
					}
					
					pendAppForm.setTempCondition(rs.getString("TEMP_CONDITION").toUpperCase());
					pendAppForm.setStorageCondition(rs.getString("STORAGE_CONDITION").toUpperCase());
					pendAppForm.setShelfLife(rs.getString("SHELF_LIFE"));
					String dutyElement=rs.getString("DUTY_ELEMENT");
					if(dutyElement.equalsIgnoreCase("0"))
					{
						pendAppForm.setDutyElement("0");
					}
					if(dutyElement.equalsIgnoreCase("2"))
						pendAppForm.setDutyElement("2");
					if(dutyElement.equalsIgnoreCase("3"))
						pendAppForm.setDutyElement("3");
					pendAppForm.setShelfLifeType(rs.getString("SHELF_LIFE_TYPE"));
					pendAppForm.setRetestDays(rs.getString("RETEST_DAYS").toUpperCase());
					pendAppForm.setRetestType(rs.getString("RETEST_DAYS_TYPE"));
					pendAppForm.setValuationClass(rs.getString("VALUATION_CLASS"));
					pendAppForm.setApproximateValue(rs.getString("APPROXIMATE_VALUE").toUpperCase());
					pendAppForm.setUnitOfMeasId(rs.getString("UNIT_OF_MEAS_ID"));
					pendAppForm.setPuchaseGroupId(rs.getString("PURCHASE_GROUP_ID").toUpperCase());
					pendAppForm.setRequestedBy(rs.getString("REQUESTED_BY"));
					
					ArrayList fileList = new ArrayList();
					String uploadedFiles=rs.getString("Attachements");
					if(uploadedFiles.equalsIgnoreCase(""))
					{
						
					}else{
					String v[] = uploadedFiles.split(",");
					int l = v.length;
					for (int i = 0; i < l; i++) 
					{
						RawMaterialForm pendAppForm2=new RawMaterialForm();
						//String url=v[i];
						//pendAppForm2.setUrl(url);
					System.out.println(v[i]);
						pendAppForm2.setUploadFilePath(v[i]);
					int x=v[i].lastIndexOf("/");
					uploadedFiles=v[i].substring(x+1);		
					pendAppForm2.setFileList(uploadedFiles);
					fileList.add(pendAppForm2);
					}
					request.setAttribute("listName", fileList);
					}
					
					String sapCodeno=rs.getString("SAP_CODE_NO");
					if(sapCodeno!=null)
					{
						pendAppForm.setSapCodeNo(rs.getString("SAP_CODE_NO"));
						String sapCodeExist=rs.getString("SAP_CODE_EXISTS");
						if(sapCodeExist.equalsIgnoreCase("1"))
						{
							pendAppForm.setSapCodeExists("On");
						}
						if(sapCodeExist.equalsIgnoreCase("0"))
							pendAppForm.setSapCodeExistsNo("On");
						
						String createDate=rs.getString("SAP_CREATION_DATE");
						String a1[]=createDate.split(" ");
						createDate=a1[0];
						String b1[]=createDate.split("-");
						createDate=b1[2]+"/"+b1[1]+"/"+b1[0];
						pendAppForm.setSapCreationDate(createDate);
						pendAppForm.setSapCreatedBy(rs.getString("SAP_CREATED_BY"));
					}
				
				}
					}
				if(filterBy.equalsIgnoreCase("Pending")){
					request.setAttribute("approveButton", "approveButton");
					request.setAttribute("rejectButton", "rejectButton");
				}
				
				
				
				
				
				//set ApproverDetails 
				checkStatus=0;int appStatus=0;
				LinkedList listApprers=new LinkedList();
				String getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
				"where mast.Location='"+location+"' AND  mast.Material_Type='RM' AND Material_Group='"+matGroup+"' and mast.Approver_Id=emp.PERNR order by Priority";
				ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
				while(rsApprDetails.next())
				{
					checkStatus=1;
					ApprovalsForm apprvers=new ApprovalsForm();
					apprvers.setPriority(rsApprDetails.getString("Priority"));
					apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
					String empCode=rsApprDetails.getString("Approver_Id");
					String approveStatus="";
					String actualapprover="";
					boolean data=false;
					String recordStatus="select mast.Priority,mast.Approver_Id,mast.Parllel_Approver_1,mast.Parllel_Approver_2,all_r.Actual_Approver,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
					"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
					"mast.Material_Type='RM' AND Material_Group='"+matGroup+"' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
					"or mast.Role='Creator') and mast.Approver_Id=emp.PERNR and all_r.req_type='Material Master'  group by mast.Priority,mast.Priority,mast.Approver_Id,mast.Parllel_Approver_1,mast.Parllel_Approver_2,all_r.Actual_Approver,emp.EMP_FULLNAME,all_r.Req_Status," +
					"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
					ResultSet rsAppInfo=ad.selectQuery(recordStatus);
					while(rsAppInfo.next())
					{
						actualapprover=rsAppInfo.getString("Actual_Approver");
						if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Approver_Id")))
						{
							apprvers.setEmployeeCode(rsAppInfo.getString("Approver_Id"));
							data=true;
						}
						if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Parllel_Approver_1")))
						{
							apprvers.setEmployeeCode(rsAppInfo.getString("Parllel_Approver_1"));
							data=true;
							
						}
						if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Parllel_Approver_2")))
						{
							apprvers.setEmployeeCode(rsAppInfo.getString("Parllel_Approver_2"));
							data=true;
						}
						
						apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
						approveStatus=rsAppInfo.getString("Req_Status");
						if(approveStatus.equalsIgnoreCase(""))
						{
							apprvers.setApproveStatus("In Process");
						}
						if(approveStatus.equalsIgnoreCase("Approved")|| approveStatus.equalsIgnoreCase("Completed"))
						{
						apprvers.setDate(rsAppInfo.getString("approved_date"));
						}else{
							apprvers.setDate(rsAppInfo.getString("rejected_date"));
							appStatus=1;
						}
						String comments=rsAppInfo.getString("Comments");
						if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
						{
							apprvers.setComments("");
						}else{
							apprvers.setComments(rsAppInfo.getString("Comments"));
						}
						
						
					}
					if(approveStatus.equalsIgnoreCase("") && appStatus==0)
					{
						apprvers.setApproveStatus("In Process");
					}
					String pernr="";

					if(data==true)
					{
						pernr=actualapprover;
					}
					else
					{
						pernr=rsApprDetails.getString("Approver_Id");
					}									
						
						
					String name="select EMP_FULLNAME from emp_official_info where PERNR='"+pernr+"'";
					ResultSet rsname=ad.selectQuery(name);
					if(rsname.next())
					{
						apprvers.setEmployeeName(rsname.getString("EMP_FULLNAME"));
					}
					listApprers.add(apprvers);
				}
				if(checkStatus==0)
				{
					getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
					"where mast.Location='"+location+"' AND  mast.Material_Type='RM' AND Material_Group='' and mast.Approver_Id=emp.PERNR order by Priority";
					rsApprDetails=ad.selectQuery(getApprDetails);
					while(rsApprDetails.next())
					{
						checkStatus=1;
						ApprovalsForm apprvers=new ApprovalsForm();
						apprvers.setPriority(rsApprDetails.getString("Priority"));
						apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
						String empCode=rsApprDetails.getString("Approver_Id");
						String approveStatus="";
						String actualapprover="";
						boolean data=false;
						String recordStatus="select mast.Priority,mast.Approver_Id,mast.Parllel_Approver_1,mast.Parllel_Approver_2,all_r.Actual_Approver,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
						"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
						"mast.Material_Type='RM' AND Material_Group='' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
						"or mast.Role='Creator') and mast.Approver_Id=emp.PERNR and all_r.req_type='Material Master' group by mast.Priority,mast.Priority,mast.Approver_Id,mast.Parllel_Approver_1,mast.Parllel_Approver_2,all_r.Actual_Approver,emp.EMP_FULLNAME,all_r.Req_Status," +
						"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
						ResultSet rsAppInfo=ad.selectQuery(recordStatus);
						while(rsAppInfo.next())
						{
							
							actualapprover=rsAppInfo.getString("Actual_Approver");
							if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Approver_Id")))
							{
								apprvers.setEmployeeCode(rsAppInfo.getString("Approver_Id"));
								data=true;
							}
							if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Parllel_Approver_1")))
							{
								apprvers.setEmployeeCode(rsAppInfo.getString("Parllel_Approver_1"));
								data=true;
							}
							if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Parllel_Approver_2")))
							{
								apprvers.setEmployeeCode(rsAppInfo.getString("Parllel_Approver_2"));
								data=true;
							}
							apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
							approveStatus=rsAppInfo.getString("Req_Status");
							
							if(approveStatus.equalsIgnoreCase("Approved")|| approveStatus.equalsIgnoreCase("Completed"))
							{
							String approveDate=	rsAppInfo.getString("approved_date");
							
							String a[]=approveDate.split(" ");
							approveDate=a[0];
							String b[]=approveDate.split("-");
							approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
							
							apprvers.setDate(approveDate);
							}else{
								String rejectDate=	rsAppInfo.getString("rejected_date");
								
								String a[]=rejectDate.split(" ");
								rejectDate=a[0];
								String b[]=rejectDate.split("-");
								rejectDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
								apprvers.setDate(rejectDate);
							}
							String comments=rsAppInfo.getString("Comments");
							if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
							{
								apprvers.setComments("");
							}else{
								apprvers.setComments(rsAppInfo.getString("Comments"));
							}
						}
						if(approveStatus.equalsIgnoreCase("") && appStatus==0)
						{
							apprvers.setApproveStatus("In Process");
						}
						String pernr="";

						if(data==true)
						{
							pernr=actualapprover;
						}
						else
						{
							pernr=rsApprDetails.getString("Approver_Id");
						}								
							
							
						String name="select EMP_FULLNAME from emp_official_info where PERNR='"+pernr+"'";
						ResultSet rsname=ad.selectQuery(name);
						if(rsname.next())
						{
							apprvers.setEmployeeName(rsname.getString("EMP_FULLNAME"));
						}
						listApprers.add(apprvers);
				}
				}
				request.setAttribute("approverDetails", listApprers);
				
				if(userRole.equalsIgnoreCase("User"))
				{
				return mapping.findForward("ROHDetails");
				}
				if(userRole.equalsIgnoreCase("Accounts"))
				{
				return mapping.findForward("ROH_Account");
				}
				if(userRole.equalsIgnoreCase("Creator"))
				{
					Date dNow = new Date( );
					 SimpleDateFormat ft = new SimpleDateFormat ("dd/MM/yyyy");
						String dateNow = ft.format(dNow);
						pendAppForm.setSapCreationDate(dateNow);
					pendAppForm.setSapCreatedBy(user.getEmployeeNo()+"-"+user.getFullName());
					
				return mapping.findForward("ROH_Creator");
				}
			}
			
				
				
			}
		}
		catch (NullPointerException ne){
			System.out.println("exception @ upload request");
			ne.printStackTrace();
		}
		
		request.setAttribute("openRequest", "open");
		String openTab = request.getParameter("searchTxt");
		if(!openTab.equalsIgnoreCase("")){
			pendAppForm.setHeading("Search Results");
			pendAppForm.setSearchText(openTab);
		}
		
		return mapping.findForward("displayRequest");
	
	}
	
	
	
	public ActionForward viewPersonalInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
	{/*
		
		ApprovalsForm approvalsForm=(ApprovalsForm)form;
		JoiningFormalityForm joiningForm1 = new JoiningFormalityForm();
		NewsandMediaDao ad=new NewsandMediaDao();
		
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		String reqId=request.getParameter("reqno");
		String empID=request.getParameter("empId");
		String type=request.getParameter("param");
		String status=approvalsForm.getSelectedFilter();
		
		if(status.equalsIgnoreCase("Pending"))
		{
			request.setAttribute("approveButton", "approveButton");
			request.setAttribute("rejectButton", "rejectButton");
		}
		approvalsForm.setSelectedFilter(status);
		approvalsForm.setRequestNumber(reqId) ;
		approvalsForm.setEmployeeNumber(empID);
		
		if(type==null || type.equalsIgnoreCase("personalDetails") ){
	
		String getEmpPhoto="select * from Employee_Photos where  employeeNo='"+empID+"' ";
		ResultSet rsEmpPhoto = ad.selectQuery(getEmpPhoto);
		try {
			while (rsEmpPhoto.next())
			{
				joiningForm1.setPhotoImage(rsEmpPhoto.getString("file_name"));
			request.setAttribute("employeePhoto", "employeePhoto");	
			}
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		
		JoiningFormalityForm	joiningFormApp = new JoiningFormalityForm();
		String frst="select EMP_FULLNAME,SEX,DOB from emp_official_info where PERNR='"+empID+"'";
		try {
		ResultSet rs = ad.selectQuery(frst);
		while(rs.next())
		{
			joiningFormApp.setDateofBirth((EMicroUtils.display(rs.getDate("DOB"))));
			joiningFormApp.setFirstName(rs.getString("EMP_FULLNAME"));
			String gender= rs.getString("SEX");
			if(gender.equalsIgnoreCase("M"))
			{
				joiningFormApp.setGender("Male");
				
			}
			else{
				joiningFormApp.setGender("Female");
			}
		}
		String sql3="select * from emp_personal_info where user_id='"+empID+"'";
		
		LinkedList list=new LinkedList();
		ResultSet rs12 = ad.selectQuery(sql3);
			String pass="";
			if (rs12.next()) {
				joiningFormApp.setTitle(rs12.getString("title"));
				
				joiningFormApp.setMiddleName(rs12.getString("middle_name"));
				joiningFormApp.setLastName(rs12.getString("last_name"));
				joiningFormApp.setInitials(rs12.getString("initials"));
				joiningFormApp.setNickName(rs12.getString("nick_name"));
			
				joiningFormApp.setMaritalStatus(rs12.getString("marital_status"));
		
				joiningFormApp.setBirthplace(rs12.getString("birth_place"));
				String cou="select LANDX from Country where LAND1='"+rs12.getString("country_of_birth")+"'";
				ResultSet rs22 = ad.selectQuery(cou);
				while (rs22.next()) {
					joiningFormApp.setCountryofBirth(rs22.getString("LANDX"));
				}
			
				joiningFormApp.setCaste(rs12.getString("caste"));
				joiningFormApp.setReligiousDenomination(rs12.getString("religous_denomination"));
				joiningFormApp.setNationality(rs12.getString("nationality"));
				joiningFormApp.setTelephoneNumber(rs12.getString("telephone_no"));
				joiningFormApp.setMobileNumber(rs12.getString("mobile_no"));
				joiningFormApp.setFaxNumber(rs12.getString("fax_no"));
				joiningFormApp.setEmailAddress(rs12.getString("email_address"));
				joiningFormApp.setBloodGroup(rs12.getString("blood_group"));
				joiningFormApp.setPermanentAccountNumber(rs12.getString("permanent_acno"));
				
				pass=rs12.getString("passport_no");
				
				if(!pass.equalsIgnoreCase("")){
				
					joiningFormApp.setPassportNumber(rs12.getString("passport_no"));
					joiningFormApp.setPlaceofIssueofPassport(rs12.getString("place_of_issue_of_passport"));
				joiningFormApp.setDateofissueofPassport(rs12.getString("date_of_issue_of_passp"));
				joiningFormApp.setDateofexpiryofPassport(rs12.getString("date_of_expiry_of_passport"));
				
				request.setAttribute("pass", "pass");
				}
				joiningFormApp.setPersonalIdentificationMarks(rs12.getString("personal_identification_mark"));
				joiningFormApp.setPhysicallyChallenged(rs12.getString("physiaclly_challenged"));
				joiningFormApp.setPhysicallyChallengeddetails(rs12.getString("physically_challenged_details"));
				joiningFormApp.setEmergencyContactPersonName(rs12.getString("emergency_contact_person_name"));
				joiningFormApp.setEmergencyContactAddressLine1(rs12.getString("emegency_contact_addressline1"));
				joiningFormApp.setEmergencyContactAddressLine2(rs12.getString("emegency_contact_addressline2"));
				joiningFormApp.setEmergencyMobileNumber(rs12.getString("emegency_mobile_number"));
				joiningFormApp.setEmergencyTelephoneNumber(rs12.getString("emegency_telephone_number"));
				
				joiningFormApp.setEmergencyContactPersonName1(rs12.getString("emergency_contact_person_name1"));
				joiningFormApp.setEmergencyContactAddressLine3(rs12.getString("emegency_contact_addressline3"));
				joiningFormApp.setEmergencyContactAddressLine4(rs12.getString("emegency_contact_addressline4"));
				joiningFormApp.setEmergencyMobileNumber1(rs12.getString("emegency_mobile_number1"));
				joiningFormApp.setEmergencyTelephoneNumber1(rs12.getString("emegency_telephone_number1"));
				
				joiningFormApp.setNoOfChildrens(rs12.getString("number_of_childrens"));
				joiningFormApp.setWebsite(rs12.getString("website"));
				list.add(joiningFormApp);
				request.setAttribute("personalInfo", list);
			}else{

				 joiningFormApp = new JoiningFormalityForm();

				
				joiningFormApp.setMiddleName("");
				joiningFormApp.setLastName("");
				joiningFormApp.setMobileNumber("");
				joiningFormApp.setEmailAddress("");
				joiningFormApp.setTitle("");
				joiningFormApp.setFirstName("");
				joiningFormApp.setMiddleName("");
				joiningFormApp.setLastName("");
				joiningFormApp.setInitials("");
				joiningFormApp.setNickName("");
				joiningFormApp.setMaritalStatus("");
				joiningFormApp.setBirthplace("");
				joiningFormApp.setCountryofBirth("");
				joiningFormApp.setCaste("");
				joiningFormApp.setReligiousDenomination("");
				joiningFormApp.setNationality("");
				joiningFormApp.setTelephoneNumber("");
				joiningFormApp.setMobileNumber("");
				joiningFormApp.setFaxNumber("");
				joiningFormApp.setEmailAddress("");
				
				joiningFormApp.setBloodGroup("");
				joiningFormApp.setPermanentAccountNumber("");
				joiningFormApp.setPassportNumber("");
				
				joiningFormApp.setDateofissueofPassport("");
					
				joiningFormApp.setDateofexpiryofPassport("");
				joiningFormApp.setPlaceofIssueofPassport("");
				joiningFormApp.setDateofissueofPassport("");
				joiningFormApp.setDateofexpiryofPassport("");	
			
			
				joiningFormApp.setPersonalIdentificationMarks("");
				joiningFormApp.setPhysicallyChallenged("");
				joiningFormApp.setPhysicallyChallengeddetails("");
				joiningFormApp.setEmergencyContactPersonName("");
				joiningFormApp.setEmergencyContactAddressLine1("");
				joiningFormApp.setEmergencyContactAddressLine2("");
				joiningFormApp.setEmergencyMobileNumber("");
				joiningFormApp.setEmergencyTelephoneNumber("");
				
				joiningFormApp.setEmergencyContactPersonName1("");
				joiningFormApp.setEmergencyContactAddressLine3("");
				joiningFormApp.setEmergencyContactAddressLine4("");
				joiningFormApp.setEmergencyMobileNumber1("");
				joiningFormApp.setEmergencyTelephoneNumber1("");
				
				joiningFormApp.setNoOfChildrens("");
				joiningFormApp.setWebsite("");
				list.add(joiningFormApp);
				request.setAttribute("personalInfo", list);
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	
      String sql="select * from emp_personal_info_history where user_id='"+empID+"'";
		
		LinkedList list1=new LinkedList();
		ResultSet rs1 = ad.selectQuery(sql);
		try {
			String pass="";
			JoiningFormalityForm	joiningForm = new JoiningFormalityForm();
			while (rs1.next()) {
					if(!(joiningFormApp.getTitle().equalsIgnoreCase(rs1.getString("title"))))
					{
					joiningForm.setTitle(rs1.getString("title"));
					}
					if(!(joiningFormApp.getMiddleName().equalsIgnoreCase(rs1.getString("middle_name"))))
					{
						joiningForm.setMiddleName(rs1.getString("middle_name"));
					}
					if(!(joiningFormApp.getLastName().equalsIgnoreCase(rs1.getString("last_name"))))
					{
						joiningForm.setLastName(rs1.getString("last_name"));

					}
					if(!(joiningFormApp.getInitials().equalsIgnoreCase(rs1.getString("initials"))))
					{
						joiningForm.setInitials(rs1.getString("initials"));

					}
					if(!(joiningFormApp.getNickName().equalsIgnoreCase(rs1.getString("nick_name"))))
					{
						joiningForm.setNickName(rs1.getString("nick_name"));
					}
					if(!(joiningFormApp.getMaritalStatus().equalsIgnoreCase(rs1.getString("marital_status"))))
					{
						joiningForm.setMaritalStatus(rs1.getString("marital_status"));
					}
					if(!(joiningFormApp.getBirthplace().equalsIgnoreCase(rs1.getString("birth_place"))))
					{
						joiningForm.setBirthplace(rs1.getString("birth_place"));

					}
			
				
				String cou="select LANDX from Country where LAND1='"+rs1.getString("country_of_birth")+"'";
				ResultSet rs22 = ad.selectQuery(cou);
				while (rs22.next()) {
					if(!(joiningFormApp.getCountryofBirth().equalsIgnoreCase(rs22.getString("LANDX"))))
					{
						joiningForm.setCountryofBirth(rs22.getString("LANDX"));

					}
				
				}
				if(!(joiningFormApp.getCaste().equalsIgnoreCase(rs1.getString("caste"))))
				{
					joiningForm.setCaste(rs1.getString("caste"));

				}
				if(!(joiningFormApp.getReligiousDenomination().equalsIgnoreCase(rs1.getString("religous_denomination"))))
				{
					joiningForm.setReligiousDenomination(rs1.getString("religous_denomination"));

				}
				if(!(joiningFormApp.getNationality().equalsIgnoreCase(rs1.getString("nationality"))))
				{
					joiningForm.setNationality(rs1.getString("nationality"));

				}
				if(!(joiningFormApp.getTelephoneNumber().equalsIgnoreCase(rs1.getString("telephone_no"))))
				{
					joiningForm.setTelephoneNumber(rs1.getString("telephone_no"));

				}
				if(!(joiningFormApp.getMobileNumber().equalsIgnoreCase(rs1.getString("mobile_no"))))
				{
					joiningForm.setMobileNumber(rs1.getString("mobile_no"));

				}
				if(!(joiningFormApp.getFaxNumber().equalsIgnoreCase(rs1.getString("fax_no"))))
				{
					joiningForm.setFaxNumber(rs1.getString("fax_no"));

				}
				if(!(joiningFormApp.getEmailAddress().equalsIgnoreCase(rs1.getString("email_address"))))
				{
					joiningForm.setEmailAddress(rs1.getString("email_address"));

				}
				if(!(joiningFormApp.getBloodGroup().equalsIgnoreCase(rs1.getString("blood_group"))))
				{
					joiningForm.setBloodGroup(rs1.getString("blood_group"));

				}
				if(!(joiningFormApp.getBloodGroup().equalsIgnoreCase(rs1.getString("blood_group"))))
				{
					joiningForm.setBloodGroup(rs1.getString("blood_group"));

				}
				if(!(joiningFormApp.getPermanentAccountNumber().equalsIgnoreCase(rs1.getString("permanent_acno"))))
				{
					joiningForm.setPermanentAccountNumber(rs1.getString("permanent_acno"));

				}
							
				
					
				pass=rs1.getString("passport_no");
				
				if(!pass.equalsIgnoreCase("")){
					if(!(joiningFormApp.getPassportNumber().equalsIgnoreCase(rs1.getString("passport_no"))))
					{
						joiningForm.setPassportNumber(rs1.getString("passport_no"));

					}
					if(!(joiningFormApp.getPlaceofIssueofPassport().equalsIgnoreCase(rs1.getString("place_of_issue_of_passport"))))
					{
						joiningForm.setPlaceofIssueofPassport(rs1.getString("place_of_issue_of_passport"));
						joiningForm.setPlaceofIssueofPassport("");
					}
					if(!(joiningFormApp.getDateofissueofPassport().equalsIgnoreCase(rs1.getString("date_of_issue_of_passp"))))
					{
						joiningForm.setDateofissueofPassport(rs1.getString("date_of_issue_of_passp"));
						
					}
					if(!(joiningFormApp.getDateofexpiryofPassport().equalsIgnoreCase(rs1.getString("date_of_expiry_of_passport"))))
					{
						joiningForm.setDateofexpiryofPassport(rs1.getString("date_of_expiry_of_passport"));
					
					}
					
				
				request.setAttribute("pass", "pass");
				}
				if(!(joiningFormApp.getPersonalIdentificationMarks().equalsIgnoreCase(rs1.getString("personal_identification_mark"))))
				{

					joiningForm.setPersonalIdentificationMarks(rs1.getString("personal_identification_mark"));

				}
				if(!(joiningFormApp.getPhysicallyChallenged().equalsIgnoreCase(rs1.getString("physiaclly_challenged"))))
				{

					joiningForm.setPhysicallyChallenged(rs1.getString("physiaclly_challenged"));

				}
				if(!(joiningFormApp.getPhysicallyChallengeddetails().equalsIgnoreCase(rs1.getString("physically_challenged_details"))))
				{

					joiningForm.setPhysicallyChallengeddetails(rs1.getString("physically_challenged_details"));

				}
				if(!(joiningFormApp.getEmergencyContactPersonName().equalsIgnoreCase(rs1.getString("emergency_contact_person_name"))))
				{

					joiningForm.setEmergencyContactPersonName(rs1.getString("emergency_contact_person_name"));

				}
				if(!(joiningFormApp.getEmergencyContactAddressLine1().equalsIgnoreCase(rs1.getString("emegency_contact_addressline1"))))
				{

					joiningForm.setEmergencyContactAddressLine1(rs1.getString("emegency_contact_addressline1"));

				}
				if(!(joiningFormApp.getEmergencyContactAddressLine2().equalsIgnoreCase(rs1.getString("emegency_contact_addressline2"))))
				{

					joiningForm.setEmergencyContactAddressLine2(rs1.getString("emegency_contact_addressline2"));

				}
				if(!(joiningFormApp.getEmergencyMobileNumber().equalsIgnoreCase(rs1.getString("emegency_mobile_number"))))
				{
					joiningForm.setEmergencyMobileNumber(rs1.getString("emegency_mobile_number"));

				}
				if(!(joiningFormApp.getEmergencyTelephoneNumber().equalsIgnoreCase(rs1.getString("emegency_telephone_number"))))
				{
					joiningForm.setEmergencyTelephoneNumber(rs1.getString("emegency_telephone_number"));

				}
				if(!(joiningFormApp.getEmergencyContactPersonName1().equalsIgnoreCase(rs1.getString("emergency_contact_person_name1"))))
				{
					joiningForm.setEmergencyContactPersonName1(rs1.getString("emergency_contact_person_name1"));

				}
				if(!(joiningFormApp.getEmergencyContactAddressLine3().equalsIgnoreCase(rs1.getString("emegency_contact_addressline3"))))
				{
					joiningForm.setEmergencyContactAddressLine3(rs1.getString("emegency_contact_addressline3"));

				}
				if(!(joiningFormApp.getEmergencyContactAddressLine4().equalsIgnoreCase(rs1.getString("emegency_contact_addressline4"))))
				{
					joiningForm.setEmergencyContactAddressLine4(rs1.getString("emegency_contact_addressline4"));

				}
				if(!(joiningFormApp.getEmergencyMobileNumber1().equalsIgnoreCase(rs1.getString("emegency_mobile_number1"))))
				{
					joiningForm.setEmergencyMobileNumber1(rs1.getString("emegency_mobile_number1"));

				}
				if(!(joiningFormApp.getEmergencyTelephoneNumber1().equalsIgnoreCase(rs1.getString("emegency_telephone_number1"))))
				{
					joiningForm.setEmergencyTelephoneNumber1(rs1.getString("emegency_telephone_number1"));

				}
				if(!(joiningFormApp.getNoOfChildrens().equalsIgnoreCase(rs1.getString("number_of_childrens"))))
				{
					joiningForm.setNoOfChildrens(rs1.getString("number_of_childrens"));

				}
				if(!(joiningFormApp.getWebsite().equalsIgnoreCase(rs1.getString("website"))))
				{
					joiningForm.setWebsite(rs1.getString("website"));
				}
			
				list1.add(joiningForm);
				
			}
			
			request.setAttribute("personalInfoHistory", list1);
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		System.out.println(list1.size());
		
		if(list1.size()==0)
		{
			JoiningFormalityForm joiningForm = new JoiningFormalityForm();

			
			joiningForm.setMiddleName("");
			joiningForm.setLastName("");
			joiningForm.setMobileNumber("");
			joiningForm.setEmailAddress("");
			joiningForm.setTitle("");
			joiningForm.setFirstName("");
			joiningForm.setMiddleName("");
			joiningForm.setLastName("");
			joiningForm.setInitials("");
			joiningForm.setNickName("");
		
			joiningForm.setMaritalStatus("");
			
			joiningForm.setBirthplace("");
			joiningForm.setCountryofBirth("");
			joiningForm.setCaste("");
			joiningForm.setReligiousDenomination("");
			joiningForm.setNationality("");
			joiningForm.setTelephoneNumber("");
			joiningForm.setMobileNumber("");
			joiningForm.setFaxNumber("");
			joiningForm.setEmailAddress("");
			
			joiningForm.setBloodGroup("");
			joiningForm.setPermanentAccountNumber("");
			joiningForm.setPassportNumber("");
			
			joiningForm.setDateofissueofPassport("");
				
		joiningForm.setDateofexpiryofPassport("");
				
		
		
			joiningForm.setPersonalIdentificationMarks("");
			joiningForm.setPhysicallyChallenged("");
			joiningForm.setPhysicallyChallengeddetails("");
			joiningForm.setEmergencyContactPersonName("");
			joiningForm.setEmergencyContactAddressLine1("");
			joiningForm.setEmergencyContactAddressLine2("");
			joiningForm.setEmergencyMobileNumber("");
			joiningForm.setEmergencyTelephoneNumber("");
			
			joiningForm.setEmergencyContactPersonName1("");
			joiningForm.setEmergencyContactAddressLine3("");
			joiningForm.setEmergencyContactAddressLine4("");
			joiningForm.setEmergencyMobileNumber1("");
			joiningForm.setEmergencyTelephoneNumber1("");
			
			joiningForm.setNoOfChildrens("");
			joiningForm.setWebsite("");
			
			
		
			
		
			
			list1.add(joiningForm);
			request.setAttribute("personalInfoHistory", list1);
		}
		
		
		return mapping.findForward("personalinfo");
	}
		
		if(type.equalsIgnoreCase("addressDetails"))
		{
			JoiningFormalityForm	joiningFormApp = new JoiningFormalityForm();
			
			 reqId=request.getParameter("reqno");
			 empID=request.getParameter("empId");
				int countEmpAddress=0;
				String checkemp_address="select count(user_id) from emp_address where user_id='"+empID+"' ";
				ResultSet rs1=ad.selectQuery(checkemp_address);
				try {
					while(rs1.next()){
						countEmpAddress=rs1.getInt(1);			
					}
				} catch (SQLException e) {
					
					e.printStackTrace();
				}
				LinkedList addrlist = new LinkedList();
				LinkedList list1=new LinkedList();
				if(countEmpAddress>0)
				{
		
		String sql3="select * from emp_address where user_id='"+empID+"'";
		ResultSet rs11 = ad.selectQuery(sql3);
		try {
			while (rs11.next()) {
				joiningFormApp = new JoiningFormalityForm();
				joiningFormApp.setId(rs11.getString("id"));
				joiningFormApp.setAddressType(rs11.getString("address_type"));
				
				
				joiningFormApp.setCareofcontactname(rs11.getString("care_of_contact_name"));
				joiningFormApp.setHouseNumber(rs11.getString("house_no"));
				joiningFormApp.setAddressLine1(rs11.getString("address_line1"));
				joiningFormApp.setAddressLine2(rs11.getString("address_line2"));
				joiningFormApp.setAddressLine3(rs11.getString("address_line3"));
				joiningFormApp.setPostalCode(rs11.getString("postal_code"));
				joiningFormApp.setCity(rs11.getString("a_city"));
			
					String cou="select cou.LANDX,st.BEZEI from State as st,Country as cou where st.BLAND='"+rs11.getString("a_state")+"' " +
							"and st.LAND1='"+rs11.getString("a_country")+"' and cou.LAND1='"+rs11.getString("a_country")+"'";
					ResultSet rs22 = ad.selectQuery(cou);
					while (rs22.next()) {
						joiningFormApp.setCountry(rs22.getString("LANDX"));
						joiningFormApp.setState(rs22.getString("BEZEI"));
					}
					
					joiningFormApp.setOwnAccomodation(rs11.getString("own_accomodation"));
					joiningFormApp.setCompanyHousing(rs11.getString("company_housing"));
					joiningFormApp.setAddStartDate((EMicroUtils.display(rs11.getDate("start_date"))));
					joiningFormApp.setAddEndDate((EMicroUtils.display(rs11.getDate("end_date"))));
					
					String sql="select * from emp_address_history where user_id='"+empID+"' and id='"+rs11.getString("id")+"'";
					 rs1 = ad.selectQuery(sql);
							String pass="";
							JoiningFormalityForm	joiningForm = new JoiningFormalityForm();
							if (rs1.next()) {
								
								joiningForm.setId(rs1.getString("id"));
									if(!(joiningFormApp.getAddressType().equalsIgnoreCase(rs1.getString("address_type"))))
									{
									joiningForm.setAddressType(rs1.getString("address_type"));
									}
									
									
									if(!(joiningFormApp.getCareofcontactname().equalsIgnoreCase(rs1.getString("care_of_contact_name"))))
									{
										joiningForm.setCareofcontactname(rs1.getString("care_of_contact_name"));
									}
									
									if(!(joiningFormApp.getHouseNumber().equalsIgnoreCase(rs1.getString("house_no"))))
									{
										joiningForm.setHouseNumber(rs1.getString("house_no"));

									}
									if(!(joiningFormApp.getAddressLine1().equalsIgnoreCase(rs1.getString("address_line1"))))
									{
										joiningForm.setAddressLine1(rs1.getString("address_line1"));

									}
									if(!(joiningFormApp.getAddressLine2().equalsIgnoreCase(rs1.getString("address_line2"))))
									{
										joiningForm.setAddressLine2(rs1.getString("address_line2"));

									}
									
									if(!(joiningFormApp.getAddressLine3().equalsIgnoreCase(rs1.getString("address_line3"))))
									{
										joiningForm.setAddressLine3(rs1.getString("address_line3"));

									}
									
									if(!(joiningFormApp.getPostalCode().equalsIgnoreCase(rs1.getString("postal_code"))))
									{
										joiningForm.setPostalCode(rs1.getString("postal_code"));

									}
									if(!(joiningFormApp.getCity().equalsIgnoreCase(rs1.getString("a_city"))))
									{
										joiningForm.setCity(rs1.getString("a_city"));

									}
							
									 cou="select cou.LANDX,st.BEZEI from State as st,Country as cou where st.BLAND='"+rs1.getString("a_state")+"' " +
									"and st.LAND1='"+rs1.getString("a_country")+"' and cou.LAND1='"+rs1.getString("a_country")+"'";
							 rs22 = ad.selectQuery(cou);
							while (rs22.next()) {
								
								if(!(joiningFormApp.getCountry().equalsIgnoreCase(rs22.getString("LANDX"))))
								{
									joiningForm.setCountry(rs22.getString("LANDX"));

								}
								
								if(!(joiningFormApp.getState().equalsIgnoreCase(rs22.getString("BEZEI"))))
								{
									joiningForm.setState(rs22.getString("BEZEI"));

								}
							
								
							}
							
								if(!(joiningFormApp.getOwnAccomodation().equalsIgnoreCase(rs1.getString("own_accomodation"))))
								{
									joiningForm.setOwnAccomodation(rs1.getString("own_accomodation"));

								}
								if(!(joiningFormApp.getCompanyHousing().equalsIgnoreCase(rs1.getString("company_housing"))))
								{
									joiningForm.setCompanyHousing(rs1.getString("company_housing"));

								}
								
							list1.add(joiningForm);
							request.setAttribute("addrHistory", list1);
						}else{
								joiningForm = new JoiningFormalityForm();
							joiningForm.setId(rs11.getString("id"));
							joiningForm.setAddressType("");
							joiningForm.setCareofcontactname("");
							joiningForm.setHouseNumber("");
							joiningForm.setAddressLine1("");
							joiningForm.setAddressLine2("");
							joiningForm.setAddressLine3("");
							joiningForm.setPostalCode("");
							joiningForm.setCity("");
							joiningForm.setState("");
							joiningForm.setCountry("");
							joiningForm.setOwnAccomodation("");
							joiningForm.setCompanyHousing("");
							joiningForm.setAddStartDate("");
							joiningForm.setAddEndDate("");
							list1.add(joiningForm);
							request.setAttribute("addrHistory", list1);
						}
						
					
					addrlist.add(joiningFormApp);
					
					
			}
			
			
			
			
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		request.setAttribute("addrlist", addrlist);
		
		
			}
				
				
				if(list1.size()==0)
				{
					JoiningFormalityForm joiningForm = new JoiningFormalityForm();

					joiningForm.setAddressType("");
					joiningForm.setCareofcontactname("");
					joiningForm.setHouseNumber("");
					joiningForm.setAddressLine1("");
					joiningForm.setAddressLine2("");
					joiningForm.setAddressLine3("");
					joiningForm.setPostalCode("");
					joiningForm.setCity("");
					joiningForm.setState("");
					joiningForm.setCountry("");
					joiningForm.setOwnAccomodation("");
					joiningForm.setCompanyHousing("");
					joiningForm.setAddStartDate("");
					joiningForm.setAddEndDate("");
				
					
				
					
					list1.add(joiningForm);
					request.setAttribute("addrHistory", list1);
				}
		
		
			
			System.out.println(addrlist.size());
			System.out.println(list1.size());
			
			if(false){
				ApprovalsDao apprDao=new ApprovalsDao();
				apprDao.getExtraEmpAddressHistoryRecord(mapping, form, request, response,empID);
			}
			
			
			return mapping.findForward("addressinfo");
		}
		if(type.equalsIgnoreCase("familyDetails"))
		{
			 reqId=request.getParameter("reqno");
			 empID=request.getParameter("empId");
				ArrayList famlist = new ArrayList();
				LinkedList familyTempList = new LinkedList();
				LinkedList familyHistList=new LinkedList();
				String sql3="select * from emp_family_details where user_id='"+empID+"'";
				ResultSet rs11 = ad.selectQuery(sql3);
				try {
					while (rs11.next()) {
						JoiningFormalityForm joiningFormTemp = new JoiningFormalityForm();
						joiningFormTemp.setId(rs11.getString("id"));
						    	 String cou=" select Relationship from RELATIONSHIP where Id='"+rs11.getString("family_dependent_type_id")+"'";
								ResultSet rs22 = ad.selectQuery(cou);
								while (rs22.next()) {
									joiningFormTemp.setFamilyDependentTypeID(rs22.getString("Relationship"));
								}
						   
								joiningFormTemp.setFtitle(rs11.getString("f_title"));
								joiningFormTemp.setFfirstName(rs11.getString("f_first_name"));
								joiningFormTemp.setFmiddleName(rs11.getString("f_middle_name"));
								joiningFormTemp.setFlastName(rs11.getString("f_last_name"));
								joiningFormTemp.setFinitials(rs11.getString("f_initials"));
								joiningFormTemp.setFgender(rs11.getString("f_gender"));
							  
								joiningFormTemp.setFdateofBirth((EMicroUtils.display(rs11.getDate("f_date_of_birth"))));
								joiningFormTemp.setFbirthplace(rs11.getString("f_birth_place"));
								joiningFormTemp.setFtelephoneNumber(rs11.getString("f_telephone_no"));
								joiningFormTemp.setFmobileNumber(rs11.getString("f_mobile_no"));
								joiningFormTemp.setFemailAddress(rs11.getString("f_email"));
								joiningFormTemp.setFbloodGroup(rs11.getString("f_blood_group"));
								joiningFormTemp.setFdependent(rs11.getString("dependent"));
								joiningFormTemp.setFemployeeofCompany(rs11.getString("employee_of_company"));
								joiningFormTemp.setFemployeeNumber(rs11.getString("employee_no_family"));
							 
							 String getfamilyHistoryDet="select * from emp_family_details_history where user_id='"+empID+"' and id='"+rs11.getInt("id")+"'";
							 ResultSet rsHistoryDet = ad.selectQuery(getfamilyHistoryDet);
							 if(rsHistoryDet.next()) {
								 JoiningFormalityForm  joiningForm = new JoiningFormalityForm();
									joiningForm.setId(rs11.getString("id"));
										 rs22 = ad.selectQuery(cou);
										while (rs22.next()) {
											if(!(joiningForm.getFamilyDependentTypeID().equalsIgnoreCase(rs11.getString("Relationship"))))
											{
											  joiningForm.setFamilyDependentTypeID(rs22.getString("Relationship"));
											}
										}
										if(!(joiningForm.getFtitle().equalsIgnoreCase(rs11.getString("f_title"))))
										{
								     joiningForm.setFtitle(rsHistoryDet.getString("f_title"));
										}
										if(!(joiningForm.getFfirstName().equalsIgnoreCase(rs11.getString("f_first_name"))))
										{
									 joiningForm.setFfirstName(rsHistoryDet.getString("f_first_name"));
										}
										if(!(joiningForm.getFmiddleName().equalsIgnoreCase(rs11.getString("f_middle_name"))))
										{
								     joiningForm.setFmiddleName(rsHistoryDet.getString("f_middle_name"));
										}
										if(!(joiningForm.getFlastName().equalsIgnoreCase(rs11.getString("f_last_name"))))
										{
									 joiningForm.setFlastName(rsHistoryDet.getString("f_last_name"));
										}
										if(!(joiningForm.getFinitials().equalsIgnoreCase(rs11.getString("f_initials"))))
										{
									 joiningForm.setFinitials(rsHistoryDet.getString("f_initials"));
										}
										if(!(joiningForm.getFgender().equalsIgnoreCase(rs11.getString("f_gender"))))
										{
									 joiningForm.setFgender(rsHistoryDet.getString("f_gender"));
										}
										if(!(joiningForm.getFdateofBirth().equalsIgnoreCase(EMicroUtils.display(rs11.getDate("f_date_of_birth")))))
										{
									 joiningForm.setFdateofBirth((EMicroUtils.display(rsHistoryDet.getDate("f_date_of_birth"))));
										}
										if(!(joiningForm.getFbirthplace().equalsIgnoreCase(rs11.getString("f_gender"))))
										{
								 	 joiningForm.setFbirthplace(rsHistoryDet.getString("f_birth_place"));
										}
										if(!(joiningForm.getFtelephoneNumber().equalsIgnoreCase(rs11.getString("f_telephone_no"))))
										{
									 joiningForm.setFtelephoneNumber(rsHistoryDet.getString("f_telephone_no"));
										}
										if(!(joiningForm.getFmobileNumber().equalsIgnoreCase(rs11.getString("f_mobile_no"))))
										{
									 joiningForm.setFmobileNumber(rsHistoryDet.getString("f_mobile_no"));
										}
										if(!(joiningForm.getFemailAddress().equalsIgnoreCase(rs11.getString("f_email"))))
										{
									 joiningForm.setFemailAddress(rsHistoryDet.getString("f_email"));
										}
										if(!(joiningForm.getFbloodGroup().equalsIgnoreCase(rs11.getString("f_blood_group"))))
										{
									 joiningForm.setFbloodGroup(rsHistoryDet.getString("f_blood_group"));
										}
										if(!(joiningForm.getFdependent().equalsIgnoreCase(rs11.getString("dependent"))))
										{
									 joiningForm.setFdependent(rsHistoryDet.getString("dependent"));
										}
										if(!(joiningForm.getFemployeeofCompany().equalsIgnoreCase(rs11.getString("employee_of_company"))))
										{
									 joiningForm.setFemployeeofCompany(rsHistoryDet.getString("employee_of_company"));
										}
										if(!(joiningForm.getFemployeeNumber().equalsIgnoreCase(rs11.getString("employee_no_family"))))
										{
									 joiningForm.setFemployeeNumber(rsHistoryDet.getString("employee_no_family"));
										}
										 familyHistList.add(joiningForm);
										 request.setAttribute("familyHistList", familyHistList);
							 }else{
								 JoiningFormalityForm	 joiningForm = new JoiningFormalityForm();
								 joiningForm.setId(rs11.getString("id"));
								 joiningForm.setFamilyDependentTypeID("");
								   joiningForm.setFtitle("");
									 joiningForm.setFfirstName("");
								     joiningForm.setFmiddleName("");
									 joiningForm.setFlastName("");
									 joiningForm.setFinitials("");
									 joiningForm.setFgender("");
									  
									 joiningForm.setFdateofBirth("");
								 	 joiningForm.setFbirthplace("");
									 joiningForm.setFtelephoneNumber("");
									 joiningForm.setFmobileNumber("");
									 joiningForm.setFemailAddress("");
									 joiningForm.setFbloodGroup("");
									 joiningForm.setFdependent("");
									 joiningForm.setFemployeeofCompany("");
									 joiningForm.setFemployeeNumber("");
									 familyHistList.add(joiningForm);
									 request.setAttribute("familyHistList", familyHistList);
							 }
							 
							 familyTempList.add(joiningFormTemp);
							 request.setAttribute("familyTempList", familyTempList);
					}
				} catch (SQLException e) {
					
					e.printStackTrace();
				}
				
				System.out.println("familyHistory id="+familyHistList.size());
				System.out.println("familyTemp id="+familyTempList.size());
				
			return mapping.findForward("familyinfo");
		}
		if(type.equalsIgnoreCase("educationDetails"))
		{
			 reqId=request.getParameter("reqno");
			 empID=request.getParameter("empId");
			 LinkedList eduTempList = new LinkedList();
				LinkedList eduHistList=new LinkedList();
				String sql3="select *  from emp_education_details " +
						" where user_id='"+empID+"' ";
				ResultSet rs11 = ad.selectQuery(sql3);
				try {
					while (rs11.next()) {
						JoiningFormalityForm joiningForm = new JoiningFormalityForm();
						joiningForm.setId(rs11.getString("id"));
						joiningForm.setEducationalLevel(rs11.getString("education_level"));
						joiningForm.setQualification(rs11.getString("qualification"));
					String dat="select edu.Education_Level,qua.Qualification from EDUCATIONAL_LEVEL as edu,QUALIFICATION as qua " +
									"where edu.Id='"+rs11.getString("education_level")+"' and qua.Id='"+rs11.getString("qualification")+"'";
					ResultSet rs23 = ad.selectQuery(dat);
					while (rs23.next()) {
						joiningForm.setEducationalLevel(rs23.getString("Education_Level"));
						joiningForm.setQualification(rs23.getString("Qualification"));
					}
						joiningForm.setSpecialization(rs11.getString("specialization"));
						joiningForm.setUniversityName(rs11.getString("univarsity_name"));
						joiningForm.setUniverysityLocation(rs11.getString("university_location"));
						
						String cou="select cou.LANDX,st.BEZEI from State as st,Country as cou where st.BLAND='"+rs11.getString("e_state")+"' " +
						"and st.LAND1='"+rs11.getString("e_country")+"' and cou.LAND1='"+rs11.getString("e_country")+"'";
						ResultSet rs22 = ad.selectQuery(cou);
						while (rs22.next()) {
						joiningForm.setEdcountry(rs22.getString("LANDX"));
						joiningForm.setEdstate(rs22.getString("BEZEI"));
						}
						joiningForm.setDurationofCourse(rs11.getString("duration_of_course"));
						joiningForm.setTimes(rs11.getString("time"));
						joiningForm.setFromDate((EMicroUtils.display(rs11.getDate("from_date"))));
						joiningForm.setToDate((EMicroUtils.display(rs11.getDate("to_date"))));
						joiningForm.setFullTimePartTime(rs11.getString("fulltime_parttime"));
						joiningForm.setPercentage(rs11.getString("percentage"));
						String fileName="";
						String doc="select * from emp_education_documents where emp_no='"+empID+"' and education='"+rs11.getString("qualification")+"'";
						ResultSet rs12 = ad.selectQuery(doc);
						while(rs12.next()){
							fileName=rs12.getString("file_name");
						joiningForm.setEmpEduDoc(rs12.getString("file_name"));
					
						request.setAttribute("edudoc", "edudoc");
						}
						if(fileName.equalsIgnoreCase(""))
						{
							joiningForm.setEmpEduDoc("");
						}
						String getHistoryEdu="select *  from emp_education_details_history " +
						" where user_id='"+empID+"' and id='"+rs11.getString("id")+"'";
						ResultSet rsHistoryEdu = ad.selectQuery(getHistoryEdu);
						if (rsHistoryEdu.next()) {
							JoiningFormalityForm joiningFormHistoryEdu = new JoiningFormalityForm();
							joiningFormHistoryEdu.setId(rs11.getString("id"));
							joiningFormHistoryEdu.setEducationalLevel(rs11.getString("education_level"));
							joiningFormHistoryEdu.setQualification(rs11.getString("qualification"));
						 dat="select edu.Education_Level,qua.Qualification from EDUCATIONAL_LEVEL as edu,QUALIFICATION as qua " +
										"where edu.Id='"+rs11.getString("education_level")+"' and qua.Id='"+rs11.getString("qualification")+"'";
						 rs23 = ad.selectQuery(dat);
						while (rs23.next()) {
							joiningFormHistoryEdu.setEducationalLevel(rs23.getString("Education_Level"));
							joiningFormHistoryEdu.setQualification(rs23.getString("Qualification"));
						}
						joiningFormHistoryEdu.setSpecialization(rs11.getString("specialization"));
						joiningFormHistoryEdu.setUniversityName(rs11.getString("univarsity_name"));
						joiningFormHistoryEdu.setUniverysityLocation(rs11.getString("university_location"));
							
							 cou="select cou.LANDX,st.BEZEI from State as st,Country as cou where st.BLAND='"+rs11.getString("e_state")+"' " +
							"and st.LAND1='"+rs11.getString("e_country")+"' and cou.LAND1='"+rs11.getString("e_country")+"'";
							 rs22 = ad.selectQuery(cou);
							while (rs22.next()) {
								joiningFormHistoryEdu.setEdcountry(rs22.getString("LANDX"));
								joiningFormHistoryEdu.setEdstate(rs22.getString("BEZEI"));
							}
							joiningFormHistoryEdu.setDurationofCourse(rs11.getString("duration_of_course"));
							joiningFormHistoryEdu.setTimes(rs11.getString("time"));
							joiningFormHistoryEdu.setFromDate((EMicroUtils.display(rs11.getDate("from_date"))));
							joiningFormHistoryEdu.setToDate((EMicroUtils.display(rs11.getDate("to_date"))));
							joiningFormHistoryEdu.setFullTimePartTime(rs11.getString("fulltime_parttime"));
							joiningFormHistoryEdu.setPercentage(rs11.getString("percentage"));
							 fileName="";
							 doc="select * from emp_education_documents where emp_no='"+empID+"' and education='"+rs11.getString("qualification")+"'";
							 rs12 = ad.selectQuery(doc);
							while(rs12.next()){
								fileName=rs12.getString("file_name");
								joiningFormHistoryEdu.setEmpEduDoc(rs12.getString("file_name"));
						
							request.setAttribute("edudoc", "edudoc");
							}
							if(fileName.equalsIgnoreCase(""))
							{
								joiningFormHistoryEdu.setEmpEduDoc("");
							}
							 getHistoryEdu="select *  from emp_education_details_history " +
							" where user_id='"+empID+"' and id='"+rs11.getString("id")+"'";
							 rsHistoryEdu = ad.selectQuery(getHistoryEdu);
							while (rs11.next()) {
								
							}
							eduHistList.add(joiningFormHistoryEdu);
						
							
						}else{

							JoiningFormalityForm joiningFormHistoryEdu = new JoiningFormalityForm();
							joiningFormHistoryEdu.setId(rs11.getString("id"));
							joiningFormHistoryEdu.setEducationalLevel("");
							joiningFormHistoryEdu.setQualification("");
							joiningFormHistoryEdu.setEducationalLevel("");
							joiningFormHistoryEdu.setQualification("");
						joiningFormHistoryEdu.setSpecialization("");
						joiningFormHistoryEdu.setUniversityName("");
						joiningFormHistoryEdu.setUniverysityLocation("");
								joiningFormHistoryEdu.setEdcountry("");
								joiningFormHistoryEdu.setEdstate("");
							joiningFormHistoryEdu.setDurationofCourse("");
							joiningFormHistoryEdu.setTimes("");
							joiningFormHistoryEdu.setFromDate("");
							joiningFormHistoryEdu.setToDate("");
							joiningFormHistoryEdu.setFullTimePartTime("");
							joiningFormHistoryEdu.setPercentage("");
								joiningFormHistoryEdu.setEmpEduDoc("");
								joiningFormHistoryEdu.setEmpEduDoc("");
							eduHistList.add(joiningFormHistoryEdu);
							request.setAttribute("eduHistList", eduHistList);
						}
						eduTempList.add(joiningForm);
						request.setAttribute("eduHistList", eduHistList);
					}
				} catch (SQLException e) {
					
					e.printStackTrace();
				}
				request.setAttribute("eduTempList", eduTempList);
			
			
			return mapping.findForward("eduinfo");
		}
		if(type.equalsIgnoreCase("experienceDetails"))
		{
			 reqId=request.getParameter("reqno");
			 empID=request.getParameter("empId");
			 LinkedList expTempList = new LinkedList();
				LinkedList expHistList=new LinkedList();
				String sql3="select * from emp_experience_details where user_id='"+empID+"'";
				ResultSet rs11 = ad.selectQuery(sql3);
				try {
					while (rs11.next()) {					
						
						JoiningFormalityForm	joiningFormTemp = new JoiningFormalityForm();
						joiningFormTemp.setId(rs11.getString("id"));
						joiningFormTemp.setNameOfEmployer(rs11.getString("name_of_employer"));
						joiningFormTemp.setIndustry(rs11.getString("industry"));
						joiningFormTemp.setExCity(rs11.getString("ex_city"));
						String cou="select LANDX from Country where LAND1='"+rs11.getString("ex_country")+"'";
						ResultSet rs22 = ad.selectQuery(cou);
						while (rs22.next()) {
							joiningFormTemp.setExcountry(rs22.getString("LANDX"));
						}
						joiningFormTemp.setPositionHeld(rs11.getString("position_held"));
						joiningFormTemp.setJobRole(rs11.getString("job_role"));
						joiningFormTemp.setStartDate((EMicroUtils.display(rs11.getDate("start_date"))));
						joiningFormTemp.setEndDate((EMicroUtils.display(rs11.getDate("end_date"))));
						
						String getHistoryDetails="select * from emp_experience_details_history where user_id='"+empID+"' and id='"+rs11.getString("id")+"'";
						ResultSet rsHistoryDetails = ad.selectQuery(getHistoryDetails);
						if(rsHistoryDetails.next()){
						
							JoiningFormalityForm	joiningFormHist = new JoiningFormalityForm();
							joiningFormHist.setId(rs11.getString("id"));
							
							if(!(joiningFormHist.getIndustry().equalsIgnoreCase(rs11.getString("industry"))))
							{
							joiningFormHist.setIndustry(rsHistoryDetails.getString("industry"));
							}
							if(!(joiningFormHist.getExCity().equalsIgnoreCase(rs11.getString("ex_city"))))
							{
							joiningFormHist.setExCity(rsHistoryDetails.getString("ex_city"));
							}
							 cou="select LANDX from Country where LAND1='"+rsHistoryDetails.getString("ex_country")+"'";
							 rs22 = ad.selectQuery(cou);
							while (rs22.next()) {
								if(!(joiningFormHist.getExcountry().equalsIgnoreCase(rs11.getString("LANDX"))))
								{
								joiningFormTemp.setExcountry(rs22.getString("LANDX"));
								}
							}
							if(!(joiningFormHist.getPositionHeld().equalsIgnoreCase(rs11.getString("position_held"))))
							{
							joiningFormHist.setPositionHeld(rsHistoryDetails.getString("position_held"));
							}
							if(!(joiningFormHist.getJobRole().equalsIgnoreCase(rs11.getString("job_role"))))
							{
							joiningFormHist.setJobRole(rsHistoryDetails.getString("job_role"));
							}
							if(!(joiningFormHist.getStartDate().equalsIgnoreCase(rs11.getString("start_date"))))
							{
							joiningFormHist.setStartDate((EMicroUtils.display(rsHistoryDetails.getDate("start_date"))));
							}
							if(!(joiningFormHist.getEndDate().equalsIgnoreCase(rs11.getString("end_date"))))
							{
							joiningFormHist.setEndDate((EMicroUtils.display(rsHistoryDetails.getDate("end_date"))));
							}
							expHistList.add(joiningFormHist);
							request.setAttribute("expHistList", expHistList);
						}else{
							JoiningFormalityForm	joiningFormHist = new JoiningFormalityForm();
							joiningFormHist.setId(rs11.getString("id"));
							joiningFormHist.setNameOfEmployer("");
							joiningFormHist.setIndustry("");
							joiningFormHist.setExCity("");
							joiningFormHist.setExcountry("");
							joiningFormHist.setPositionHeld("");
							joiningFormHist.setJobRole("");
							joiningFormHist.setStartDate("");
							joiningFormHist.setEndDate("");
							expHistList.add(joiningFormHist);
							request.setAttribute("expHistList", expHistList);
						}
						
						expTempList.add(joiningFormTemp);
					}
				} catch (SQLException e) {
					
					e.printStackTrace();
				}
				request.setAttribute("expTempList", expTempList);
			
			
			
			return mapping.findForward("experinfo");
		}
		if(type.equalsIgnoreCase("languageDetails"))
		{
			 reqId=request.getParameter("reqno");
			 empID=request.getParameter("empId");
			 LinkedList langTempList = new LinkedList();
				LinkedList langHistList=new LinkedList();

			
				
				
			String sql3="select * from emp_language_details where user_id='"+empID+"'";
			ResultSet rs11 = ad.selectQuery(sql3);
			try {
				while (rs11.next()) {
					JoiningFormalityForm joiningForm = new JoiningFormalityForm();
					 joiningForm.setId(rs11.getString("id"));
							String cou="select Language from LANGUAGE where Id='"+rs11.getString("language")+"'";
						ResultSet rs22 = ad.selectQuery(cou);
						while (rs22.next()) {
							joiningForm.setLanguage(rs22.getString("Language"));
						}
					joiningForm.setMotherTongue(rs11.getString("mother_tongue"));	
				    joiningForm.setLangSpeaking(rs11.getString("spoken"));
				    joiningForm.setLangRead(rs11.getString("reading"));
					joiningForm.setLangWrite(rs11.getString("writing"));
					joiningForm.setLangstartDate((EMicroUtils.display(rs11.getDate("l_start_date"))));
					joiningForm.setLangendDate((EMicroUtils.display(rs11.getDate("l_end_date"))));
					String getHistory="select * from emp_language_details_history where user_id='"+empID+"' and id='"+rs11.getInt("id")+"'";
					ResultSet rsLangHistory = ad.selectQuery(getHistory);
					if(rsLangHistory.next()) {
						JoiningFormalityForm joiningFormHist = new JoiningFormalityForm();
						joiningFormHist.setId(rs11.getString("id"));
							 cou="select Language from LANGUAGE where Id='"+rs11.getString("language")+"'";
						 rs22 = ad.selectQuery(cou);
						while (rs22.next()) {
							if(!(joiningForm.getLanguage().equalsIgnoreCase(rs11.getString("Language"))))
							{	
							joiningFormHist.setLanguage(rs22.getString("Language"));
							}
						}
						if(!(joiningForm.getMotherTongue().equalsIgnoreCase(rs11.getString("mother_tongue"))))
						{
						joiningFormHist.setMotherTongue(rsLangHistory.getString("mother_tongue"));	
						}
						if(!(joiningForm.getLangSpeaking().equalsIgnoreCase(rs11.getString("spoken"))))
						{
						joiningFormHist.setLangSpeaking(rsLangHistory.getString("spoken"));
						}
						if(!(joiningForm.getLangRead().equalsIgnoreCase(rs11.getString("reading"))))
						{
						joiningFormHist.setLangRead(rsLangHistory.getString("reading"));
						}
						if(!(joiningForm.getLangWrite().equalsIgnoreCase(rs11.getString("writing"))))
						{
						joiningFormHist.setLangWrite(rsLangHistory.getString("writing"));
						}
						if(!(joiningForm.getLangstartDate().equalsIgnoreCase(rs11.getString("l_start_date"))))
						{
						joiningFormHist.setLangstartDate((EMicroUtils.display(rsLangHistory.getDate("l_start_date"))));
						}
						if(!(joiningForm.getLangendDate().equalsIgnoreCase(rs11.getString("l_end_date"))))
						{
						joiningFormHist.setLangendDate((EMicroUtils.display(rsLangHistory.getDate("l_end_date"))));
						}
						langHistList.add(joiningFormHist);
						request.setAttribute("langHistList", langHistList);
					}else{
						JoiningFormalityForm joiningFormHist = new JoiningFormalityForm();
						joiningFormHist.setId(rs11.getString("id"));
						joiningFormHist.setLanguage("");
						joiningFormHist.setMotherTongue("");
						joiningFormHist.setLangSpeaking("");
						joiningFormHist.setLangRead("");
						joiningFormHist.setLangWrite("");
						joiningFormHist.setLangstartDate("");
						joiningFormHist.setLangendDate("");
						langHistList.add(joiningFormHist);
						request.setAttribute("langHistList", langHistList);
					}
					langTempList.add(joiningForm);
				}
			} catch (SQLException e) {
			
				e.printStackTrace();
			}
			request.setAttribute("langTempList", langTempList);
			
			
				
			
			
			return mapping.findForward("langinfo");
		}
	
	
		
	*/
		return mapping.findForward("personalinfo");
		}
	
	
	public ActionForward getOndutyReport(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		ApprovalsForm approvalsForm=(ApprovalsForm)form;
		NewsandMediaDao ad=new NewsandMediaDao();
		
		
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		if(user == null)
		{
			approvalsForm.setAppMessage("Session Expried! Try to Login again!");
			return mapping.findForward("approvePage");
		}
		int totalCount=0;
		String getTotalCount="select count(*) from All_Request where Pending_approver='"+user.getEmployeeNo()+"' and Req_Status='Pending' and Req_Type='On Duty'";
		try{
		ResultSet rs=ad.selectQuery(getTotalCount);
		while(rs.next())
		{
			totalCount=rs.getInt(1);
		}
		LinkedList ondutyList=new LinkedList();
		String getLeaveRecords="";
		
		getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Requester_Id) AS   RowNum,all_R.Req_Id,ond.onDuty_Type,emp.PERNR,emp.EMP_FULLNAME,"
				+ "dept.DPTSTXT,desg.DSGSTXT,all_R.Req_Date,ond.location,ond.start_date,ond.startTime,ond.end_date,ond.endTime,ond.reason  from  All_Request as all_R,emp_official_info as emp,"
				+ "OnDuty_details as ond,DEPARTMENT as dept,DESIGNATION as desg where all_R.Pending_Approver='"+user.getEmployeeNo()+"' and Req_Status='Pending' "
				+ "and all_R.Req_Type='On Duty'  and all_R.Requester_Name=emp.PERNR and ond.request_no=all_R.Req_Id and emp.DPTID=dept.DPTID and emp.DSGID=desg.DSGID)"
				+ " as  sub Where   sub.RowNum between 1 and '"+totalCount+"' order by RowNum desc";
				ResultSet rsDetails=ad.selectQuery(getLeaveRecords);
				while(rsDetails.next()){
					OnDutyForm pendAppForm=new OnDutyForm();			
					pendAppForm.setEmployeeNumber(rsDetails.getString("PERNR"));
					pendAppForm.setEmployeeName(rsDetails.getString("EMP_FULLNAME"));
					pendAppForm.setDepartment(rsDetails.getString("DPTSTXT"));
					pendAppForm.setDesignation(rsDetails.getString("DSGSTXT"));
					pendAppForm.setOnDutyType(rsDetails.getString("onDuty_Type"));
					pendAppForm.setLocationId(rsDetails.getString("location"));
					pendAppForm.setSubmitDate(rsDetails.getString("Req_Date"));
					pendAppForm.setStartDate(EMicroUtils.display(rsDetails.getDate("start_date")));
					pendAppForm.setStartTime(rsDetails.getString("startTime"));
					pendAppForm.setEndDate(EMicroUtils.display(rsDetails.getDate("end_date")));
					pendAppForm.setEndTime(rsDetails.getString("endTime"));					
					pendAppForm.setReason(rsDetails.getString("reason"));
					pendAppForm.setApprover("                        ");
					ondutyList.add(pendAppForm);
				}
				
				request.setAttribute("ondutyList", ondutyList);
				
				Date dNow = new Date( );
				 SimpleDateFormat ft = new SimpleDateFormat ("dd/MM/yyyy");
			String dateNow = ft.format(dNow);
			 approvalsForm.setDate(dateNow);
		
		}catch (Exception e) {
			e.printStackTrace();
		}
		return mapping.findForward("pendingonduty");
	}
	
	
	public ActionForward getLeaveReport(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ApprovalsForm approvalsForm=(ApprovalsForm)form;
		NewsandMediaDao ad=new NewsandMediaDao();
		
		
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		if(user == null)
		{
			approvalsForm.setAppMessage("Session Expried! Try to Login again!");
			return mapping.findForward("approvePage");
		}
		int year = Calendar.getInstance().get(Calendar.YEAR);
		int totalCount=0;
		String getTotalCount="select count(*) from All_Request where Pending_approver='"+user.getEmployeeNo()+"' and Req_Status='Pending' and Req_Type='Leave'";
		try{
		ResultSet rs=ad.selectQuery(getTotalCount);
		while(rs.next())
		{
			totalCount=rs.getInt(1);
		}
		LinkedList leaveList=new LinkedList();
		String getLeaveRecords="";
	
		getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Requester_Id) AS   RowNum,all_R.Req_Id,leave.leave_type,emp.PERNR,emp.EMP_FULLNAME," +
		"dept.DPTSTXT,desg.DSGSTXT,all_R.Req_Date,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days,leave.reasonType" +
		"  from  All_Request as all_R,emp_official_info as emp," +
		"leave_details as leave,DEPARTMENT as dept,DESIGNATION as desg where all_R.Pending_Approver='"+user.getEmployeeNo()+"' and Req_Status='Pending' and all_R.Req_Type='Leave'  " +
		"and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id and emp.DPTID=dept.DPTID and emp.DSGID=desg.DSGID) as  sub Where   sub.RowNum " +
		"between 1 and '"+totalCount+"' order by RowNum desc";
		ResultSet rsLeave=ad.selectQuery(getLeaveRecords);
		while(rsLeave.next()){
		LeaveForm leave=new LeaveForm();
		leave.setRequestNumber(rsLeave.getInt("Req_Id"));
		leave.setEmployeeNumber(rsLeave.getString("PERNR"));
		leave.setDepartment(rsLeave.getString("DPTSTXT"));
		leave.setDesignation(rsLeave.getString("DSGSTXT"));
	String	leaveType=rsLeave.getString("leave_type");
		if(leaveType.equalsIgnoreCase("1")){
			leaveType="CL";
		}
		if(leaveType.equalsIgnoreCase("2")){
			leaveType="SL";
		}
		if(leaveType.equalsIgnoreCase("3")){
			leaveType="PL";
		}
		if(leaveType.equalsIgnoreCase("4")){
			leaveType="Loss Of Pay";
		}
		if(leaveType.equalsIgnoreCase("5")){
			leaveType="Maternity";
		}
		if(leaveType.equalsIgnoreCase("6")){
			leaveType="Comp-Off";
		}
		leave.setLeaveType(leaveType);
		leave.setEmployeeName(rsLeave.getString("EMP_FULLNAME"));
		leave.setSubmitDate(rsLeave.getString("Req_Date"));
		leave.setStartDate(EMicroUtils.display(rsLeave.getDate("start_date")));
		String stDur=rsLeave.getString("start_duration");
		
		if(stDur.equalsIgnoreCase("FD")){
			stDur="Full Day";
		}
		if(stDur.equalsIgnoreCase("FH")){
			stDur="First Half";
		}
		if(stDur.equalsIgnoreCase("SH")){
			stDur="Second Half";
		}
		leave.setStartDurationType(stDur);
		
		leave.setEndDate(EMicroUtils.display(rsLeave.getDate("end_date")));
		
		String endDur=rsLeave.getString("end_duration");
		
		if(endDur.equalsIgnoreCase("FD")){
			endDur="Full Day";
		}
		if(endDur.equalsIgnoreCase("FH")){
			endDur="First Half";
		}
		if(endDur.equalsIgnoreCase("SH")){
			endDur="Second Half";
		}
		leave.setEndDurationType(endDur);
		leave.setNoOfDays(rsLeave.getString("no_of_days"));
		String reason=rsLeave.getString("reasonType");
		if(reason.equalsIgnoreCase("Personal"))
			reason="Personal-Activities to be taken care by self only";
		if(reason.equalsIgnoreCase("Bereavement"))
			reason="Bereavement-Death in the employees immediate family";
		if(reason.equalsIgnoreCase("Funeral"))
			reason="Funeral-Death in the employee relation";
		if(reason.equalsIgnoreCase("Compassionate"))
			reason="Compassionate-Provide care for family person illness";
		if(reason.equalsIgnoreCase("Medical"))
			reason="Medical-Personal health";
		if(reason.equalsIgnoreCase("Others"))
			reason="Others-Misc reasons";
		
		leave.setReason(reason);
		leave.setApproveStatus("          ");
		String getLeaveBal="select * from lv_type_d where lv_empcode='"+rsLeave.getInt("PERNR")+"' and lv_calyear='"+year+"'";
		ResultSet rsbal=ad.selectQuery(getLeaveBal);
		while(rsbal.next())
		{
			if(rsbal.getInt("lv_typeid")==1)
			{
				leave.setCl(rsbal.getDouble("lv_clbal"));
			}
			if(rsbal.getInt("lv_typeid")==2)
			{
	    leave.setSl(rsbal.getString("lv_clbal"));
			}
			if(rsbal.getInt("lv_typeid")==3)
			{
	    leave.setPl(rsbal.getString("lv_clbal"));
			}
		}
		leaveList.add(leave);
		}
		request.setAttribute("leaveList", leaveList);
		
		Date dNow = new Date( );
		 SimpleDateFormat ft = new SimpleDateFormat ("dd/MM/yyyy");
	String dateNow = ft.format(dNow);
	 approvalsForm.setDate(dateNow);
	 
		}catch (Exception e) {
			e.printStackTrace();
		}
		return mapping.findForward("pendingLeaves");
	}
	
	public ActionForward cancelRequest(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ApprovalsForm approvalsForm=(ApprovalsForm)form;
		NewsandMediaDao ad=new NewsandMediaDao();
		
		int requestNo=Integer.parseInt(request.getParameter("ReqNo"));
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		if(user == null)
		{
			approvalsForm.setAppMessage("Session Expried! Try to Login again!");
			return mapping.findForward("approvePage");
		}
		String reqType=approvalsForm.getReqRequstType();
		approvalsForm.setReqRequstType(reqType);
		String status=approvalsForm.getSelectedFilter();
		String reqestType=request.getParameter("ReqType");
		try{
			Date dNow = new Date( );
			 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS");
		String dateNow = ft.format(dNow);
		if(reqestType.equalsIgnoreCase("Permission"))
		{
			String modifyRequest="update  All_Request set Last_Approver='"+user.getEmployeeNo()+"',Approved_Persons='"+user.getEmployeeNo()+"',Req_Status='Cancelled',Pending_Approver='',approved_date='',rejected_date='"+dateNow+"' where Req_Type='Permission' and Req_Id='"+requestNo+"' and Approved_Persons='"+user.getEmployeeNo()+"'";	
			int statsChange=ad.SqlExecuteUpdate(modifyRequest);
			if(statsChange>0){
				approvalsForm.setMessage2("Request has been cancelled successfully");
				String updateOnduty="update Permission_details set Approver_Status='3',Last_Approver='"+user.getEmployeeNo()+"',Pending_Approver='',approved_date='',rejected_date='"+dateNow+"' where request_no='"+requestNo+"'";
				int ii=ad.SqlExecuteUpdate(updateOnduty);
			}
		}
		if(reqestType.equalsIgnoreCase("Onduty"))
		{
			String modifyRequest="update  All_Request set Last_Approver='"+user.getEmployeeNo()+"',Approved_Persons='"+user.getEmployeeNo()+"',Req_Status='cancelled',Pending_Approver='',approved_date='',rejected_date='"+dateNow+"' where Req_Type='On Duty' and Req_Id='"+requestNo+"' and Approved_Persons='"+user.getEmployeeNo()+"'";	
			int statsChange=ad.SqlExecuteUpdate(modifyRequest);
			if(statsChange>0){
				approvalsForm.setMessage2("Request has been cancelled successfully");
				String updateOnduty="update OnDuty_details set Approver_Status='Cancelled',OnDuty_status='3',Last_Approver='"+user.getEmployeeNo()+"',Pending_Approver='',approved_date='',rejected_date='"+dateNow+"' where request_no='"+requestNo+"'";
				int ii=ad.SqlExecuteUpdate(updateOnduty);
			}
		}
		if(reqestType.equalsIgnoreCase("Leave"))
		{
			int year = Calendar.getInstance().get(Calendar.YEAR);
			boolean existStatus=false;
			String empID="";
			int priorityCout=0;
			int totalApproverCount=0;
			float noOfDays=0;
			String leaveType="";
			String getLeaveDetails="select * from leave_details where Req_Id='"+requestNo+"'"; 
			ResultSet rsLeave=ad.selectQuery(getLeaveDetails);
			while(rsLeave.next())
			{
				noOfDays=rsLeave.getFloat("no_of_days");
				leaveType=rsLeave.getString("leave_type");
				empID=rsLeave.getString("firstname");
				
			}
			String dataFlowType=""; 
			String checkESSApproverList="select count(*) from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave'";
			ResultSet rsCheckInEss=ad.selectQuery(checkESSApproverList);
			while(rsCheckInEss.next())
			{
				int number=rsCheckInEss.getInt(1);
				totalApproverCount=rsCheckInEss.getInt(1);
				if(number==0)
				{
					existStatus=false;
				}else{
					existStatus=true;
				}
			}
			if(existStatus==true){
				String getDataFlowType="select * from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave' ";
				ResultSet rsDataFlowType=ad.selectQuery(getDataFlowType);
				while(rsDataFlowType.next())
				{
					dataFlowType=rsDataFlowType.getString("reqType");
				}
				if(dataFlowType.equalsIgnoreCase("sequential"))
				{
					
				//pending requst is available
				int pendingCount=0;	
				String checkPendingRecords="select COUNT(*) from All_Request where Req_Id='"+requestNo+"' and Req_Type='Leave' and Req_Status='Pending'";	
				ResultSet rsPendingCount=ad.selectQuery(checkPendingRecords);
				while(rsPendingCount.next())
				{
					pendingCount=rsPendingCount.getInt(1);
				}
				if(pendingCount>0)
				{
					existStatus=false;
				}
				//check main approve status
				String mainLeaveStatus="";
				String getmaniCount="select Approvel_Status from leave_details where Req_Id='"+requestNo+"' ";
				ResultSet rsMainCount=ad.selectQuery(getmaniCount);
				while(rsMainCount.next()){
					
					//mainCount=rsMainCount.getInt(1);
					mainLeaveStatus=rsMainCount.getString("Approvel_Status");
					if(mainLeaveStatus.equalsIgnoreCase("Approved"))
					{
						existStatus=false;
					}
					if(mainLeaveStatus.equalsIgnoreCase("Pending")){
						String modifyRequest="update  All_Request set Last_Approver='"+user.getEmployeeNo()+"',Approved_Persons='"+user.getEmployeeNo()+"',Req_Status='Cancelled',Pending_Approver='',approved_date='',rejected_date='"+dateNow+"' where Req_Type='Leave' and Req_Id='"+requestNo+"' and Approved_Persons='"+user.getEmployeeNo()+"'";	
						int statsChange=ad.SqlExecuteUpdate(modifyRequest);
						approvalsForm.setMessage2("Request has been cancelled successfully");
						existStatus=true;
						float lvBal=0;
						float avlBal=0;
						float waitingBal=0;
						float closingBal=0;
							String leaveBal="select * from lv_type_d where lv_empcode='"+empID+"' and lv_typeid='"+leaveType+"' and lv_calyear='"+year+"'";
							ResultSet rsLeaveBal=ad.selectQuery(leaveBal);
							while(rsLeaveBal.next()){
								avlBal=rsLeaveBal.getFloat("lv_availed");
								closingBal=rsLeaveBal.getFloat("lv_clbal");
								waitingBal=rsLeaveBal.getFloat("lv_awtBal");
							}
							waitingBal=waitingBal-noOfDays;
							
							  String updateLeaveDetails="update lv_type_d set lv_awtBal='"+waitingBal+"' where lv_typeid='"+leaveType+"' and lv_empcode='"+empID+"' and lv_calyear='"+year+"'";
							  int checkResult=ad.SqlExecuteUpdate(updateLeaveDetails);
								String updateSql= "update leave_details set Approvel_Status='Cancelled',Last_Approver='"+user.getEmployeeNo()+"',Pending_Approver='',approved_date='',rejected_date='"+dateNow+"'  where Req_Id='"+requestNo+"'";
								int ii=ad.SqlExecuteUpdate(updateSql);
					}
					
				}
				}
				if(dataFlowType.equalsIgnoreCase("parallel"))
				{
					String modifyRequest="update  All_Request set Last_Approver='"+user.getEmployeeNo()+"',Approved_Persons='"+user.getEmployeeNo()+"',Req_Status='Cancelled',Pending_Approver='',approved_date='',rejected_date='"+dateNow+"' where Req_Type='Leave' and Req_Id='"+requestNo+"' and Approved_Persons='"+user.getEmployeeNo()+"'";	
					int statsChange=ad.SqlExecuteUpdate(modifyRequest);
					
					//check Approve Status in approve table
					int count=0;
					String getCancelCount="select * from All_Request where Req_Id='"+requestNo+"' and Requester_Name='"+empID+"' and Req_Type='Leave'";
					ResultSet rsCount=ad.selectQuery(getCancelCount);
					while(rsCount.next())
					{
					 String recordstatus=rsCount.getString("Req_Status");	
					
					  if(recordstatus.equalsIgnoreCase("Cancelled"))
					  {
					       ++count;
					  }
					  if(recordstatus.equalsIgnoreCase("Rejected"))
					  {
					       ++count;
					  }
					}
					System.out.println("count="+count);	
					if(count==1)
					{
						existStatus=false;
						
						String mainLeaveStatus="";
						String getmaniCount="select Approvel_Status from leave_details where Req_Id='"+requestNo+"' ";
						 ResultSet	 rsMainCount=ad.selectQuery(getmaniCount);
						while(rsMainCount.next()){
							mainLeaveStatus=rsMainCount.getString("Approvel_Status");
						}
											
											if(mainLeaveStatus.equalsIgnoreCase("Approved"))
											{
												float lvBal=0;
												float avlBal=0;
												float waitingBal=0;
												float closingBal=0;
												
													String leaveBal="select * from lv_type_d where lv_empcode='"+empID+"' and lv_typeid='"+leaveType+"' and lv_calyear='"+year+"'";
													ResultSet rsLeaveBal=ad.selectQuery(leaveBal);
													while(rsLeaveBal.next()){
														avlBal=rsLeaveBal.getFloat("lv_availed");
														closingBal=rsLeaveBal.getFloat("lv_clbal");
														waitingBal=rsLeaveBal.getFloat("lv_awtBal");
													}
													avlBal=avlBal-noOfDays;
													if(avlBal<0)
													{
														avlBal=0;
													}
													if(waitingBal<0)
													{
														waitingBal=0;
													}
													closingBal=closingBal+noOfDays;
													waitingBal=waitingBal+noOfDays;
												//  String updateLeaveDetails="update lv_type_d set lv_awtBal='"+waitingBal+"',lv_clbal='"+closingBal+"',lv_availed='"+avlBal+"' where lv_typeid='"+leaveType+"' and lv_empcode='"+empID+"'";
												//  int checkResult=ad.SqlExecuteUpdate(updateLeaveDetails);
												 // String updateSql= "update leave_details set Approvel_Status='Pending',Last_Approver='"+user.getEmployeeNo()+"',Pending_Approver='',approved_date='',rejected_date='"+dateNow+"'  where Req_Id='"+requestNo+"'";
												//	int ii=ad.SqlExecuteUpdate(updateSql);
													
													 
											}
									 
								
								
							
							 
						 
						
					
						
					}
					if(count==2){
						existStatus=false;
						
						String mainLeaveStatus="";
						String getmaniCount="select Approvel_Status from leave_details where Req_Id='"+requestNo+"' ";
						 ResultSet	 rsMainCount=ad.selectQuery(getmaniCount);
						while(rsMainCount.next()){
							mainLeaveStatus=rsMainCount.getString("Approvel_Status");
						}
						if(mainLeaveStatus.equalsIgnoreCase("Pending"))
						{
							existStatus=true;
						
						
						//change leave Balence
						float lvBal=0;
						float avlBal=0;
						float waitingBal=0;
						float closingBal=0;
						
							String leaveBal="select * from lv_type_d where lv_empcode='"+empID+"' and lv_typeid='"+leaveType+"' and lv_calyear='"+year+"'";
							ResultSet rsLeaveBal=ad.selectQuery(leaveBal);
							while(rsLeaveBal.next()){
								avlBal=rsLeaveBal.getFloat("lv_availed");
								closingBal=rsLeaveBal.getFloat("lv_clbal");
								waitingBal=rsLeaveBal.getFloat("lv_awtBal");
							}
							
							if(avlBal<0)
							{
								avlBal=0;
							}
							if(waitingBal<0)
							{
								waitingBal=0;
							}
							waitingBal=waitingBal-noOfDays;
						  String updateLeaveDetails="update lv_type_d set lv_awtBal='"+waitingBal+"',lv_clbal='"+closingBal+"',lv_availed='"+avlBal+"' where lv_typeid='"+leaveType+"' and lv_empcode='"+empID+"' and lv_calyear='"+year+"'";
						  int checkResult=ad.SqlExecuteUpdate(updateLeaveDetails);
						  String updateSql= "update leave_details set Approvel_Status='Cancelled',Last_Approver='"+user.getEmployeeNo()+"',Pending_Approver='',approved_date='',rejected_date='"+dateNow+"'  where Req_Id='"+requestNo+"'";
							int ii=ad.SqlExecuteUpdate(updateSql);
						}
						
					}
					
					
					
				
				
			}
			}
		if(existStatus==false)
		{
		String modifyRequest="update  All_Request set Last_Approver='"+user.getEmployeeNo()+"',Approved_Persons='"+user.getEmployeeNo()+"',Req_Status='Cancelled',Pending_Approver='',approved_date='',rejected_date='"+dateNow+"' where Req_Type='Leave' and Req_Id='"+requestNo+"' and Approved_Persons='"+user.getEmployeeNo()+"'";	
		int statsChange=ad.SqlExecuteUpdate(modifyRequest);	
		if(statsChange>0){
			approvalsForm.setMessage2("Request has been cancelled successfully");
			String updateSql= "update leave_details set Approvel_Status='Cancelled',Last_Approver='"+user.getEmployeeNo()+"',Pending_Approver='',approved_date='',rejected_date='"+dateNow+"'  where Req_Id='"+requestNo+"'";
			int ii=ad.SqlExecuteUpdate(updateSql);
			//change leave Balence
			float lvBal=0;
			float avlBal=0;
			float waitingBal=0;
			float closingBal=0;
				try{
				String leaveBal="select * from lv_type_d where lv_empcode='"+empID+"' and lv_typeid='"+leaveType+"' and lv_calyear='"+year+"'";
				ResultSet rsLeaveBal=ad.selectQuery(leaveBal);
				while(rsLeaveBal.next()){
					avlBal=rsLeaveBal.getFloat("lv_availed");
					closingBal=rsLeaveBal.getFloat("lv_clbal");
					waitingBal=rsLeaveBal.getFloat("lv_awtBal");
				}
				avlBal=avlBal-noOfDays;
				if(avlBal<0)
				{
					avlBal=0;
				}
				if(waitingBal<0)
				{
					waitingBal=0;
				}
				closingBal=closingBal+noOfDays;
			  String updateLeaveDetails="update lv_type_d set lv_awtBal='"+waitingBal+"',lv_clbal='"+closingBal+"',lv_availed='"+avlBal+"' where lv_typeid='"+leaveType+"' and lv_empcode='"+empID+"' and lv_calyear='"+year+"'";
			  int checkResult=ad.SqlExecuteUpdate(updateLeaveDetails);
				
				}catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
		}
		
		pendingRecords(mapping, form, request, response);
		}catch (Exception e) {
			e.printStackTrace();
		}
		
		return mapping.findForward("approvePage");
	}
	
	public ActionForward curentRecord(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) { 
		
		ApprovalsForm approvalsForm=(ApprovalsForm)form;
		NewsandMediaDao ad=new NewsandMediaDao();
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		int userID=user.getId();
		ArrayList listOFGroup=new ArrayList();
	try{
		int totalRecords=approvalsForm.getTotalRecords();//21
		int startRecord=approvalsForm.getStartRecord();//11
		int endRecord=approvalsForm.getEndRecord();	
		
		
		approvalsForm.setTotalRecords(totalRecords);
		approvalsForm.setStartRecord(startRecord);
		approvalsForm.setEndRecord(endRecord);
		 
		 
		 
		String reqType=approvalsForm.getReqRequstType();
		String type=approvalsForm.getSelectedFilter();
			
		approvalsForm.setReqRequstType(reqType);
		approvalsForm.setSelectedFilter(type);
		
		
		if (reqType.equalsIgnoreCase("User Request")) {
			LinkedList Usrreq = new LinkedList();
			String getITRecords = "";

			if (type.equalsIgnoreCase("Pending")) {
				getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.subject,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type"
						+ " from  All_Request as all_R,emp_official_info as  emp, HR_QUERIES as it where all_R.Pending_Approver='"
						+ user.getEmployeeNo()
						+ "' and all_R.Req_Status='Pending' and all_R.Req_Id=it.id and  all_R.Requester_Name=emp.PERNR "
						+ "and all_R.Req_Type='"+reqType+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.subject,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";

			}

			if (type.equalsIgnoreCase("Approved")) {
				getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.subject,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type"
						+ " from  All_Request as all_R,emp_official_info as  emp, HR_QUERIES as it where all_R.Last_Approver='"
						+ user.getEmployeeNo()
						+ "' and all_R.Req_Status='Approved' and all_R.Req_Id=it.id and  all_R.Requester_Name=emp.PERNR "
						+ "and all_R.Req_Type='"+reqType+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.subject,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";

			}
			if (type.equalsIgnoreCase("Rejected")) {
				getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.subject,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type"
						+ " from  All_Request as all_R,emp_official_info as  emp, HR_QUERIES as it where all_R.Last_Approver='"
						+ user.getEmployeeNo()
						+ "' and all_R.Req_Status='Rejected' and all_R.Req_Id=it.id and  all_R.Requester_Name=emp.PERNR "
						+ "and all_R.Req_Type='"+reqType+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.subject,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
			}

			if (type.equalsIgnoreCase("All")) {

				getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.subject,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type"
						+ " from  All_Request as all_R,emp_official_info as  emp, HR_QUERIES as it where (all_R.Last_Approver='"
						+ user.getEmployeeNo()
						+ "' or all_R.Pending_Approver='"
						+ user.getEmployeeNo()
						+ "')  and all_R.Req_Id=it.id and  all_R.Requester_Name=emp.PERNR "
						+ "and all_R.Req_Type='"+reqType+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.subject,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";

			}
			ResultSet rsit = ad.selectQuery(getITRecords);
			try {
				while (rsit.next()) {
					LeaveForm leave = new LeaveForm();
					leave.setRequestNumber(rsit.getInt("Req_Id"));
					leave.setEmployeeName(rsit.getString("EMP_FULLNAME"));
					leave.setSubmitDate(EMicroUtils.display(rsit
							.getDate("Req_Date")));
					leave.setStatus(rsit.getString("Req_Status"));
					
					leave.setReason(rsit.getString("subject"));
					leave.setLapprover(rsit.getString("Last_approver"));
					leave.setPapprover(rsit.getString("Pending_approver"));
					Usrreq.add(leave);

				}
				if (Usrreq.size() > 0) {
					if (type.equalsIgnoreCase("Pending")) {
						// request.setAttribute("displayButton",
						// "displayButton");
					}
				}
				request.setAttribute("Usrreq", Usrreq);
				if(Usrreq.size()>0){
					if(type.equalsIgnoreCase("Pending")){
						request.setAttribute("displayButton", "displayButton");
						}
					}
					
					if(Usrreq.size()==0){
						request.setAttribute("no Permission records", "no Permission records");
						approvalsForm.setMessage3("No Records Found..");
					}
					
				
				
					}catch (Exception e) {
						e.printStackTrace();
					}
		}
	
		
		if(reqType.equalsIgnoreCase("Permission"))
		 {
			 LinkedList permList=new LinkedList();
				String getPermissionRecords="";
				String getPermissionDetails="select * from Permission_details where user_id='"+user.getEmployeeNo()+"' ";
				
				
				if(type.equalsIgnoreCase("Pending")){
					getPermissionRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS RowNum,all_R.Req_Id," +
				"all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type from  All_Request as all_R," +
			"emp_official_info as emp, Permission_details as perm where all_R.Pending_Approver='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' " +
			"and all_R.Req_Id=perm.request_no and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Permission' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type ) as  sub Where  " +
			"sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";					
					
				}
				
				if(type.equalsIgnoreCase("Approved")){
					
					getPermissionRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS RowNum,all_R.Req_Id," +
				"all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type from  All_Request as all_R," +
			"emp_official_info as emp, Permission_details as perm where  all_R.Last_Approver='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' " +
			"and all_R.Req_Id=perm.request_no and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Permission' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type ) as  sub Where  " +
			"sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
				}
				if(type.equalsIgnoreCase("Rejected")){
					
					getPermissionRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS RowNum,all_R.Req_Id," +
				"all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type from  All_Request as all_R," +
			"emp_official_info as emp, Permission_details as perm where  all_R.Approved_Persons='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' " +
			"and all_R.Req_Id=perm.request_no and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Permission' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type ) as  sub Where  " +
			"sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
				}
				if(type.equalsIgnoreCase("Cancelled")){
					
					getPermissionRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS RowNum,all_R.Req_Id," +
				"all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type from  All_Request as all_R," +
			"emp_official_info as emp, Permission_details as perm where  all_R.Approved_Persons='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' " +
			"and all_R.Req_Id=perm.request_no and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Permission' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type ) as  sub Where  " +
			"sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
				}
				if(type.equalsIgnoreCase("All")){
					
					getPermissionRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS RowNum,all_R.Req_Id," +
				"all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type from  All_Request as all_R," +
			"emp_official_info as emp, Permission_details as perm where  (all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"') " +
			"and all_R.Req_Id=perm.request_no and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Permission' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type ) as  sub Where  " +
			"sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
				}	
				
				ResultSet rsPermission=ad.selectQuery(getPermissionRecords);
				try{
				while(rsPermission.next())
				{
					MyRequestForm permission=new MyRequestForm();
					permission.setRequestNumber(rsPermission.getString("Req_Id"));
		            permission.setStartTime(rsPermission.getString("startTime"));
			          permission.setEndTime(rsPermission.getString("endTime"))		;
			      	permission.setRequestType(rsPermission.getString("type"));
					String requestDate=rsPermission.getString("Req_Date");
					int isthere = (requestDate.indexOf("/"));
					if(isthere <= 0){
						String req[]=requestDate.split(" ");
						requestDate=req[0];
						String a[]=requestDate.split("-");
						requestDate=a[2]+"/"+a[1]+"/"+a[0];
					}
					permission.setCreateDate(requestDate);
					permission.setEmployeeName(rsPermission.getString("EMP_FULLNAME"));
					permission.setApprover(rsPermission.getString("Req_Status"));
					permission.setEmployeeNumber(rsPermission.getString("Requester_Name"));
					String url="";
					
					permission.setUrl(url);
					//leaveMaster.setLastApprover(rsLeaveDetails.getString("Last_approver"));
					//leaveMaster.setPendingApprover(rsLeaveDetails.getString("Pending_approver"));
					permList.add(permission);
						
				}
				request.setAttribute("Permissionlist", permList);
			
				if(permList.size()>0){
					if(type.equalsIgnoreCase("Pending")){
						request.setAttribute("displayButton", "displayButton");
						}
					}
					
					if(permList.size()==0){
						request.setAttribute("no Permission records", "no Permission records");
						approvalsForm.setMessage3("No Records Found..");
					}
					
				
				
					}catch (Exception e) {
						e.printStackTrace();
					}
			 
		 }
		
		if (reqType.equalsIgnoreCase("OverTime")) {
			LinkedList OT = new LinkedList();
			String getITRecords = "";

			if (type.equalsIgnoreCase("Pending")) {
				getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
						+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, OVER_TIME_DETAILS as it where all_R.Pending_Approver='"
						+ user.getEmployeeNo()
						+ "' and all_R.Req_Status='Pending' and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
						+ "and all_R.Req_Type='"+reqType+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";

			}

			if (type.equalsIgnoreCase("Approved")) {
				getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
						+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, OVER_TIME_DETAILS as it where all_R.Last_Approver='"
						+ user.getEmployeeNo()
						+ "' and all_R.Req_Status='Approved' and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
						+ "and all_R.Req_Type='"+reqType+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";

			}
			if (type.equalsIgnoreCase("Rejected")) {
				getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
						+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, OVER_TIME_DETAILS as it where all_R.Last_Approver='"
						+ user.getEmployeeNo()
						+ "' and all_R.Req_Status='Rejected' and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
						+ "and all_R.Req_Type='"+reqType+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
			}

			if (type.equalsIgnoreCase("All")) {

				getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
						+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, OVER_TIME_DETAILS as it where (all_R.Last_Approver='"
						+ user.getEmployeeNo()
						+ "' or all_R.Pending_Approver='"
						+ user.getEmployeeNo()
						+ "')  and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
						+ "and all_R.Req_Type='"+reqType+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";

			}

			ResultSet rsit = ad.selectQuery(getITRecords);
			try {
				while (rsit.next()) {
					LeaveForm leave = new LeaveForm();
					leave.setRequestNumber(rsit.getInt("Req_Id"));
					leave.setEmployeeName(rsit.getString("EMP_FULLNAME"));
					leave.setSubmitDate(EMicroUtils.display(rsit
							.getDate("Req_Date")));
					leave.setStatus(rsit.getString("Req_Status"));
					leave.setStartDate(EMicroUtils.display(rsit
							.getDate("FromDate")));
					leave.setEndDate(EMicroUtils.display(rsit
							.getDate("ToDate")));
					
					leave.setPapprover(rsit.getString("Pending_approver"));
					
					leave.setLapprover(rsit.getString("Last_approver"));

					OT.add(leave);

				}
				if (OT.size() > 0) {
					if (type.equalsIgnoreCase("Pending")) {
						// request.setAttribute("displayButton",
						// "displayButton");
					}
				}
				request.setAttribute("OT", OT);
				if (OT.size() == 0) {
					request.setAttribute("no OT records",
							"no OT records");
					approvalsForm.setMessage3("No Records Found..");
					
				
				}
			} catch (SQLException e) {

				e.printStackTrace();
			}

		}
		
		
		
		if (reqType.equalsIgnoreCase("Comp-Off/OT")) {
			LinkedList comp = new LinkedList();
			String getITRecords = "";

			if (type.equalsIgnoreCase("Pending")) {
				getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
						+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, COMP_OT as it where all_R.Pending_Approver='"
						+ user.getEmployeeNo()
						+ "' and all_R.Req_Status='Pending' and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
						+ "and all_R.Req_Type='Comp-Off/OT' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"
						+ startRecord
						+ "' and '"
						+ endRecord
						+ "' order by Req_Id desc";

			}

			if (type.equalsIgnoreCase("Approved")) {
				getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
						+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, COMP_OT as it where all_R.Last_Approver='"
						+ user.getEmployeeNo()
						+ "' and all_R.Req_Status='Approved' and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
						+ "and all_R.Req_Type='Comp-Off/OT' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"
						+ startRecord
						+ "' and '"
						+ endRecord
						+ "' order by Req_Id desc";

			}
			if (type.equalsIgnoreCase("Rejected")) {
				getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
						+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, COMP_OT as it where all_R.Last_Approver='"
						+ user.getEmployeeNo()
						+ "' and all_R.Req_Status='Rejected' and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
						+ "and all_R.Req_Type='Comp-Off/OT' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"
						+ startRecord
						+ "' and '"
						+ endRecord
						+ "' order by Req_Id desc";
			}

			if (type.equalsIgnoreCase("All")) {

				getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
						+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, COMP_OT as it where (all_R.Last_Approver='"
						+ user.getEmployeeNo()
						+ "' or all_R.Pending_Approver='"
						+ user.getEmployeeNo()
						+ "')  and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
						+ "and all_R.Req_Type='Comp-Off/OT' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"
						+ startRecord
						+ "' and '"
						+ endRecord
						+ "' order by Req_Id desc";

			}


			ResultSet rsit = ad.selectQuery(getITRecords);
			try {
				while (rsit.next()) {
					LeaveForm leave = new LeaveForm();
					leave.setRequestNumber(rsit.getInt("Req_Id"));
					leave.setEmployeeName(rsit.getString("EMP_FULLNAME"));
					leave.setSubmitDate(EMicroUtils.display(rsit
							.getDate("Req_Date")));
					leave.setStatus(rsit.getString("Req_Status"));
					leave.setStartDate(EMicroUtils.display(rsit
							.getDate("FromDate")));
					leave.setEndDate(EMicroUtils.display(rsit
							.getDate("ToDate")));
					leave.setPapprover(rsit.getString("Pending_approver"));
					
					leave.setLapprover(rsit.getString("Last_approver"));
					comp.add(leave);

				}
				if (comp.size() > 0) {
					if (type.equalsIgnoreCase("Pending")) {
						// request.setAttribute("displayButton",
						// "displayButton");
					}
				}
				request.setAttribute("comp", comp);
				if (comp.size() == 0) {
					request.setAttribute("no it records", "no it records");
					approvalsForm.setMessage3("No Records Found..");
				}
			} catch (SQLException e) {

				e.printStackTrace();
			}

		}

		
		 if(reqType.equalsIgnoreCase("VC Booking"))
		 {
			 ApprovalsList apprList=new ApprovalsList();
			 approvalsForm.setStartRecord(startRecord);
			 approvalsForm.setEndRecord(endRecord);
			 LinkedList vcList=apprList.getApprovalsList(reqType,type,request,form);
			 if(vcList.size()>0){
					if(type.equalsIgnoreCase("Pending")){
					//	request.setAttribute("displayButton", "displayButton");
						}
					}
				request.setAttribute("vcList", vcList);
					if(vcList.size()==0){
						request.setAttribute("no VC records", "no VC records");
						approvalsForm.setMessage3("No Records Found..");
					}
		 }
		if(reqType.equalsIgnoreCase("Conference"))
		 {
			 ApprovalsList apprList=new ApprovalsList();
			 approvalsForm.setStartRecord(startRecord);
			 approvalsForm.setEndRecord(endRecord);
			 LinkedList confList=apprList.getApprovalsList(reqType,type,request,form);
			 if(confList.size()>0){
					if(type.equalsIgnoreCase("Pending")){
					//	request.setAttribute("displayButton", "displayButton");
						}
					}
				request.setAttribute("confList", confList);
					if(confList.size()==0){
						request.setAttribute("no Conference records", "no Conference records");
						approvalsForm.setMessage3("No Records Found..");
					}
		 }
		
		if(reqType.equalsIgnoreCase("IT Request"))
		{
			 LinkedList it=new LinkedList();
				String getITRecords="";
				
				if(type.equalsIgnoreCase("Pending")){
					getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
					"emp.EMP_FULLNAME,all_R.Req_Status,CONVERT(varchar(10),it.Req_date,103)+' '+ CONVERT(varchar(5),it.Req_date,108) as Req_date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_HELPDESK as it " +
					"where all_R.Pending_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Pending' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
					"all_R.Req_Type='IT Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";			
					
				}
				
				if(type.equalsIgnoreCase("Approved")){
					getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
					"emp.EMP_FULLNAME,all_R.Req_Status,CONVERT(varchar(10),it.Req_date,103)+' '+ CONVERT(varchar(5),it.Req_date,108) as Req_date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_HELPDESK as it " +
					"where all_R.Last_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Approved' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
					"all_R.Req_Type='IT Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
					
				}
				if(type.equalsIgnoreCase("Rejected")){
					
					getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
					"emp.EMP_FULLNAME,all_R.Req_Status,CONVERT(varchar(10),it.Req_date,103)+' '+ CONVERT(varchar(5),it.Req_date,108) as Req_date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_HELPDESK as it " +
					"where all_R.Last_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Rejected' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
					"all_R.Req_Type='IT Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
				}
                if(type.equalsIgnoreCase("Completed")){
					
					getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
					"emp.EMP_FULLNAME,all_R.Req_Status,CONVERT(varchar(10),it.Req_date,103)+' '+ CONVERT(varchar(5),it.Req_date,108) as Req_date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_HELPDESK as it " +
					"where all_R.Last_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Completed' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
					"all_R.Req_Type='IT Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
				}
				if(type.equalsIgnoreCase("All")){
					
					getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
					"emp.EMP_FULLNAME,all_R.Req_Status,CONVERT(varchar(10),it.Req_date,103)+' '+ CONVERT(varchar(5),it.Req_date,108) as Req_date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_HELPDESK as it " +
					"where (all_R.Last_Approver='"+user.getEmployeeNo()+"' or all_R.Pending_Approver='"+user.getEmployeeNo()+"')  and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
					"all_R.Req_Type='IT Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
					
				}	
				
				ResultSet rsit=ad.selectQuery(getITRecords);
				try {
					while(rsit.next())
					{
						HelpDeskForm help=new HelpDeskForm();
						help.setRequestNumber(rsit.getString("Req_Id"));
						help.setRequestType(rsit.getString("type"));
						approvalsForm.setItType(rsit.getString("type"));
						help.setRequestername(rsit.getString("EMP_FULLNAME"));
						help.setRequestDate(rsit.getString("Req_Date"));
						help.setRequestStatus(rsit.getString("Req_Status"));
						help.setLastApprover(rsit.getString("Last_Approver"));
						help.setPendingApprover(rsit.getString("Pending_Approver"));
						help.setReqPriority(rsit.getString("Req_Priority"));
						help.setItEngStatus(rsit.getString("ITEng_Status"));
						it.add(help);
						
						
					}
					if(it.size()>0){
						if(type.equalsIgnoreCase("Pending")){
						//	request.setAttribute("displayButton", "displayButton");
							}
						}
						request.setAttribute("it", it);
						if(it.size()==0){
							request.setAttribute("no it records", "no it records");
							approvalsForm.setMessage3("No Records Found..");
						}
				} catch (SQLException e) {
				
					e.printStackTrace();
				}
				
				
		 }
		
		
		if(reqType.equalsIgnoreCase("IT Sap Request"))
		{
			 LinkedList it=new LinkedList();
				String getITRecords="";
				
				if(type.equalsIgnoreCase("Pending")){
					getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
					"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_SAP_ISSUES as it " +
					"where all_R.Pending_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Pending' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
					"all_R.Req_Type='IT Sap Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";			
					
				}
				
				if(type.equalsIgnoreCase("Approved")){
					getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
					"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_SAP_ISSUES as it " +
					"where all_R.Last_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Approved' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
					"all_R.Req_Type='IT Sap Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
					
				}
				if(type.equalsIgnoreCase("Rejected")){
					
					getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
					"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_SAP_ISSUES as it " +
					"where all_R.Last_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Rejected' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
					"all_R.Req_Type='IT Sap Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
				}
                if(type.equalsIgnoreCase("Completed")){
					
					getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
					"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_SAP_ISSUES as it " +
					"where all_R.Last_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Completed' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
					"all_R.Req_Type='IT Sap Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
				}
				if(type.equalsIgnoreCase("All")){
					
					getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
					"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_SAP_ISSUES as it " +
					"where (all_R.Last_Approver='"+user.getEmployeeNo()+"' or all_R.Pending_Approver='"+user.getEmployeeNo()+"')  and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
					"all_R.Req_Type='IT Sap Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
					
				}	
				
				ResultSet rsit=ad.selectQuery(getITRecords);
				try {
					while(rsit.next())
					{
						HelpDeskForm help=new HelpDeskForm();
						help.setRequestNumber(rsit.getString("Req_Id"));
						help.setRequestType(rsit.getString("type"));
						approvalsForm.setItType(rsit.getString("type"));
						help.setRequestername(rsit.getString("EMP_FULLNAME"));
						help.setRequestDate(rsit.getString("Req_Date"));
						help.setRequestStatus(rsit.getString("Req_Status"));
						help.setLastApprover(rsit.getString("Last_Approver"));
						help.setPendingApprover(rsit.getString("Pending_Approver"));
						help.setReqPriority(rsit.getString("Req_Priority"));
						help.setItEngStatus(rsit.getString("ITEng_Status"));
						it.add(help);
						
						
					}
					if(it.size()>0){
						if(type.equalsIgnoreCase("Pending")){
							request.setAttribute("displayButton", "");
							}
						}
						request.setAttribute("sapit", it);
						if(it.size()==0){
							request.setAttribute("no it records", "no it records");
							approvalsForm.setMessage3("No Records Found..");
						}
				} catch (SQLException e) {
				
					e.printStackTrace();
				}
				
				
		 }
		
		
		
		
		if(reqType.equalsIgnoreCase("On Duty")){

			LinkedList ondutyList=new LinkedList();
			String getOndutyRecords="";
			if(type.equalsIgnoreCase("Pending")){
				getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime," +
				"emp.EMP_FULLNAME,all_R.Req_Status,onduty.submit_date as Req_Date,onduty.start_date,onduty.end_date " +
				"from  All_Request as all_R,emp_official_info as emp,OnDuty_details as onduty where all_R.Pending_Approver='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' and all_R.Req_Id=onduty.request_no " +
				"and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='On Duty') as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
			}
			if(type.equalsIgnoreCase("Approved")){
				
				getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime," +
				"emp.EMP_FULLNAME,all_R.Req_Status,onduty.submit_date as Req_Date,onduty.start_date,onduty.end_date " +
				"from  All_Request as all_R,emp_official_info as emp,OnDuty_details as onduty where all_R.Last_Approver='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' and all_R.Req_Id=onduty.request_no " +
				"and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='On Duty') as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
			}
			if(type.equalsIgnoreCase("Cancelled")){
				
				getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime," +
				"emp.EMP_FULLNAME,all_R.Req_Status,onduty.submit_date as Req_Date,onduty.start_date,onduty.end_date " +
				"from  All_Request as all_R,emp_official_info as emp,OnDuty_details as onduty where all_R.Approved_Persons='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' " +
				"  and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='On Duty' and all_R.Req_Id=onduty.request_no) as  sub Where  sub.RowNum between 1 and 10 order by Req_Id desc";
			}
			if(type.equalsIgnoreCase("Rejected")){
				
				getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime," +
				"emp.EMP_FULLNAME,all_R.Req_Status,onduty.submit_date as Req_Date,onduty.start_date,onduty.end_date " +
				"from  All_Request as all_R,emp_official_info as emp,OnDuty_details as onduty where all_R.Approved_Persons='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' and all_R.Req_Id=onduty.request_no " +
				"and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='On Duty') as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
			}
			if(type.equalsIgnoreCase("All")){
				
				getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime," +
				"emp.EMP_FULLNAME,all_R.Req_Status,onduty.submit_date as Req_Date,onduty.start_date,onduty.end_date " +
				"from  All_Request as all_R,emp_official_info as emp,OnDuty_details as onduty where (all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"')" +
				"  and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='On Duty' and all_R.Req_Id=onduty.request_no) as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
			}
			ResultSet rsOnduty=ad.selectQuery(getOndutyRecords);
			try{
			while(rsOnduty.next()){
			OnDutyForm onduty=new OnDutyForm();
			onduty.setRequestNumber(rsOnduty.getInt("Req_Id"));
			onduty.setEmployeeNumber(rsOnduty.getString("Requester_Name"));
		
			onduty.setOnDutyType(rsOnduty.getString("onDuty_Type"));
			onduty.setLocationId(rsOnduty.getString("location"));
			onduty.setEmployeeName(rsOnduty.getString("EMP_FULLNAME"));
			onduty.setSubmitDate(rsOnduty.getString("Req_Date"));
			onduty.setStartDate(EMicroUtils.display(rsOnduty.getDate("start_date")));
			onduty.setLocationId(rsOnduty.getString("location"));
			onduty.setStartTime(rsOnduty.getString("startTime"));
			onduty.setEndDate(EMicroUtils.display(rsOnduty.getDate("end_date")));
			onduty.setEndTime(rsOnduty.getString("endTime"));
			onduty.setApprover(rsOnduty.getString("Req_Status"));
			ondutyList.add(onduty);
			}
			if(ondutyList.size()>0){
				request.setAttribute("ondutyList", ondutyList);
			if(type.equalsIgnoreCase("Pending")){
				request.setAttribute("displayButton", "displayButton");
				}
			}
		
			if(ondutyList.size()==0){
				request.setAttribute("no OnDuty records", "no OnDuty records");
				approvalsForm.setMessage3("No Records Found..");
			}
			}catch (Exception e) {
				e.printStackTrace();
			}
	 }
		
		if(reqType.equalsIgnoreCase("Customer Master"))
		{
		 

		 String getcustMasterList="";
		 ResultSet rsVendor;
		 ArrayList listOfcustList=new ArrayList();
		 try{
			 if(type.equalsIgnoreCase("Pending")){
				 
				 getcustMasterList=" Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id," +
	"all_r.Req_Date,all_r.type,s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status," +
	"acc.ACCOUNT_GROUP_NAME	from  All_Request as all_r,emp_official_info as emp,CUSTOMER_MASTER_M as s,ACCOUNT_GROUP_M as acc  " +
	"where all_r.Req_Type='Customer Master'  and all_r.Pending_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and  " +
	"s.REQUEST_NO=all_r.Req_Id  and all_r.Req_Status='Pending' and acc.MATERIAL_TYPE_ID=s.ACCOUNT_GROUP_ID )as   sub Where  " +
	"sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc ";
		 }
			 if(type.equalsIgnoreCase("Approved")){
				 
				 getcustMasterList=" Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id," +
	"all_r.Req_Date,all_r.type,s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status," +
	"acc.ACCOUNT_GROUP_NAME	from  All_Request as all_r,emp_official_info as emp,CUSTOMER_MASTER_M as s,ACCOUNT_GROUP_M as acc  " +
	"where all_r.Req_Type='Customer Master'  and all_r.Last_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and  " +
	"s.REQUEST_NO=all_r.Req_Id  and all_r.Req_Status='Approved' and acc.MATERIAL_TYPE_ID=s.ACCOUNT_GROUP_ID )as   sub Where  " +
	"sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc ";
		 }	
	 if(type.equalsIgnoreCase("Completed")){
				 
				 getcustMasterList=" Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id," +
	"all_r.Req_Date,all_r.type,s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status," +
	"acc.ACCOUNT_GROUP_NAME	from  All_Request as all_r,emp_official_info as emp,CUSTOMER_MASTER_M as s,ACCOUNT_GROUP_M as acc  " +
	"where all_r.Req_Type='Customer Master'  and all_r.Last_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and  " +
	"s.REQUEST_NO=all_r.Req_Id  and all_r.Req_Status='Completed' and acc.MATERIAL_TYPE_ID=s.ACCOUNT_GROUP_ID )as   sub Where  " +
	"sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc ";
		 }
if(type.equalsIgnoreCase("Rejected")){
				 
				 getcustMasterList=" Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id," +
	"all_r.Req_Date,all_r.type,s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status," +
	"acc.ACCOUNT_GROUP_NAME	from  All_Request as all_r,emp_official_info as emp,CUSTOMER_MASTER_M as s,ACCOUNT_GROUP_M as acc  " +
	"where all_r.Req_Type='Customer Master'  and all_r.Approved_Persons='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and  " +
	"s.REQUEST_NO=all_r.Req_Id  and all_r.Req_Status='Rejected' and acc.MATERIAL_TYPE_ID=s.ACCOUNT_GROUP_ID )as   sub Where  " +
	"sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc ";
		 }	
 if(type.equalsIgnoreCase("All")){
	 
	 getcustMasterList=" Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id," +
"all_r.Req_Date,all_r.type,s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status," +
"acc.ACCOUNT_GROUP_NAME	from  All_Request as all_r,emp_official_info as emp,CUSTOMER_MASTER_M as s,ACCOUNT_GROUP_M as acc  " +
"where all_r.Req_Type='Customer Master'  and (all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"') and emp.PERNR=all_r.Requester_Name and  " +
"s.REQUEST_NO=all_r.Req_Id   and acc.MATERIAL_TYPE_ID=s.ACCOUNT_GROUP_ID )as   sub Where  " +
"sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc ";
}
		
			 
			 rsVendor=ad.selectQuery(getcustMasterList);
				while(rsVendor.next()){
				MyRequestForm customer=new MyRequestForm();
				customer.setRequestNumber(rsVendor.getString("Req_Id"));
				
				customer.setRequestType("Customer Master");
				customer.setName(rsVendor.getString("name"));
				customer.setLocationName(rsVendor.getString("CITY"));
				customer.setVendorType(rsVendor.getString("ACCOUNT_GROUP_NAME"));
				String requestDate=rsVendor.getString("Req_Date");
				
			
				customer.setCreateDate(requestDate);
				customer.setApprovalStatus(rsVendor.getString("Req_Status"));
				
				customer.setLastApprover(rsVendor.getString("last_approver"));
				customer.setPendingApprover(rsVendor.getString("pending_approver"));

				listOfcustList.add(customer);
					
				}	 
					
			
				if(listOfcustList.size()>0){
					request.setAttribute("customer  list", "customer  list");	
					request.setAttribute("myRequest", listOfcustList);
					if(type.equalsIgnoreCase("Pending")){
						request.setAttribute("displayButton", "displayButton");
						}
					}
				if(listOfcustList.size()==0){
					
					approvalsForm.setMessage3("No Records Found..");
					request.setAttribute("no Material Master records", "no Material Master records");
				}
		 }
		 catch (Exception e) {
			e.printStackTrace();
		}
		
		 
		 
		 
		 
		}
		
		 if(reqType.equalsIgnoreCase("Vendor Master"))
			{

			 String getVendorMasterList="";
			 ResultSet rsVendor;
			 ArrayList listOfVedorList=new ArrayList();
			 try{
				 if(type.equalsIgnoreCase("Pending")){
			getVendorMasterList=" Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,all_r.type," +
					"s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,acc.ACCOUNT_GROUP_NAME	" +
					"from  All_Request as all_r,emp_official_info as emp,vendor_master_m as s,ACCOUNT_GROUP_M as acc  where all_r.Req_Type='Vendor Master'  " +
					"and all_r.Pending_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id  " +
					"and all_r.Req_Status='Pending' and acc.ACCOUNT_GROUP_ID=s.ACCOUNT_GROUP_ID)as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
			 }
				 if(type.equalsIgnoreCase("Approved")){
						getVendorMasterList=" Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,all_r.type," +
								"s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,acc.ACCOUNT_GROUP_NAME	" +
								"from  All_Request as all_r,emp_official_info as emp,vendor_master_m as s,ACCOUNT_GROUP_M as acc  where all_r.Req_Type='Vendor Master'  " +
								"and  all_r.Last_Approver='"+user.getEmployeeNo()+"' and  all_r.Req_Status='Approved' and emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id  " +
								" and acc.ACCOUNT_GROUP_ID=s.ACCOUNT_GROUP_ID)as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
						 }
				 if(type.equalsIgnoreCase("Completed")){
						getVendorMasterList=" Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,all_r.type," +
								"s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,acc.ACCOUNT_GROUP_NAME	" +
								"from  All_Request as all_r,emp_official_info as emp,vendor_master_m as s,ACCOUNT_GROUP_M as acc  where all_r.Req_Type='Vendor Master'  " +
								"and  all_r.Last_Approver='"+user.getEmployeeNo()+"' and  all_r.Req_Status='Completed' and emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id  " +
								" and acc.ACCOUNT_GROUP_ID=s.ACCOUNT_GROUP_ID)as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
						 }
				 if(type.equalsIgnoreCase("Rejected")){
						getVendorMasterList=" Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,all_r.type," +
								"s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,acc.ACCOUNT_GROUP_NAME	" +
								"from  All_Request as all_r,emp_official_info as emp,vendor_master_m as s,ACCOUNT_GROUP_M as acc  where all_r.Req_Type='Vendor Master'  " +
								"and all_r.Approved_Persons='"+user.getEmployeeNo()+"' and  all_r.Req_Status='Rejected' and emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id  " +
								" and acc.ACCOUNT_GROUP_ID=s.ACCOUNT_GROUP_ID)as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
						 }
				 if(type.equalsIgnoreCase("All")){
						getVendorMasterList=" Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,all_r.type," +
								"s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,acc.ACCOUNT_GROUP_NAME	" +
								"from  All_Request as all_r,emp_official_info as emp,vendor_master_m as s,ACCOUNT_GROUP_M as acc  where all_r.Req_Type='Vendor Master'  " +
								"and (all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"') and emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id  " +
								" and acc.ACCOUNT_GROUP_ID=s.ACCOUNT_GROUP_ID)as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
						 }
			
				 
				 rsVendor=ad.selectQuery(getVendorMasterList);
					while(rsVendor.next()){
					MyRequestForm vendor=new MyRequestForm();
					vendor.setRequestNumber(rsVendor.getString("Req_Id"));
					
					vendor.setRequestType("Vendor Master");
					vendor.setName(rsVendor.getString("name"));
					vendor.setLocationName(rsVendor.getString("CITY"));
					vendor.setVendorType(rsVendor.getString("ACCOUNT_GROUP_NAME"));
					String requestDate=rsVendor.getString("Req_Date");
					
					
					
					vendor.setCreateDate(requestDate);
					vendor.setApprovalStatus(rsVendor.getString("Req_Status"));
					
					vendor.setLastApprover(rsVendor.getString("last_approver"));
					vendor.setPendingApprover(rsVendor.getString("pending_approver"));

					listOfVedorList.add(vendor);
						
					}	 
				
					System.out.println(listOfVedorList.size());
					if(listOfVedorList.size()>0){
						request.setAttribute("myRequestList", listOfVedorList);	
					if(type.equalsIgnoreCase("Pending")){
						request.setAttribute("displayButton", "displayButton");
						}
					}
					if(listOfVedorList.size()==0){
					
						approvalsForm.setMessage3("No Records Found..");
						request.setAttribute("no Material Master records", "no Material Master records");
					}
					request.setAttribute("vendor  list", "vendor  list");	
			 }catch (Exception e) {
				e.printStackTrace();
			}
			
			}
		if(reqType.equalsIgnoreCase("Code Extention")){
			ArrayList listOfMyRequest=new ArrayList();
		String getCodeExtention="";
		if(type.equalsIgnoreCase("Pending")){
			getCodeExtention="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE," +
					"all_r.type,s.TYPE as matType,s.REQUEST_NO,s.CREATED_DATE,s.APPROVE_TYPE,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,s.MATERIAL_SHORT_NAME,MATERIAL_CODE_1,MATERIAL_CODE_2 from Location as loc,All_Request as all_r," +
					"emp_official_info as emp,code_extenstion_request as s where all_r.Req_Type='Code Extention' and all_r.Pending_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name " +
					"and s.REQUEST_NO=all_r.Req_Id and (s.PLANT_1=loc.LOCATION_CODE or s.PLANT_2=loc.LOCATION_CODE)  and all_r.Req_Status='"+type+"')as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
						}
						if(type.equalsIgnoreCase("Approved")||type.equalsIgnoreCase("Completed")){
							getCodeExtention="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE," +
							"all_r.type,s.TYPE as matType,s.REQUEST_NO,s.CREATED_DATE,s.APPROVE_TYPE,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,s.MATERIAL_SHORT_NAME,MATERIAL_CODE_1,MATERIAL_CODE_2 from Location as loc,All_Request as all_r," +
							"emp_official_info as emp,code_extenstion_request as s where all_r.Req_Type='Code Extention' and all_r.Last_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name " +
							"and s.REQUEST_NO=all_r.Req_Id and (s.PLANT_1=loc.LOCATION_CODE or s.PLANT_2=loc.LOCATION_CODE)  and all_r.Req_Status='"+type+"')as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
								}
						if(type.equalsIgnoreCase("Rejected")){
							getCodeExtention="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE," +
							"all_r.type,s.TYPE as matType,s.REQUEST_NO,s.CREATED_DATE,s.APPROVE_TYPE,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,s.MATERIAL_SHORT_NAME,MATERIAL_CODE_1,MATERIAL_CODE_2 from Location as loc,All_Request as all_r," +
							"emp_official_info as emp,code_extenstion_request as s where all_r.Req_Type='Code Extention' and all_r.Approved_Persons='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name " +
							"and s.REQUEST_NO=all_r.Req_Id and (s.PLANT_1=loc.LOCATION_CODE or s.PLANT_2=loc.LOCATION_CODE)  and all_r.Req_Status='"+type+"')as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
								}
						if(type.equalsIgnoreCase("All")){
							getCodeExtention="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE," +
							"all_r.type,s.TYPE as matType,s.REQUEST_NO,s.CREATED_DATE,s.APPROVE_TYPE,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,s.MATERIAL_SHORT_NAME,MATERIAL_CODE_1,MATERIAL_CODE_2 from Location as loc,All_Request as all_r," +
							"emp_official_info as emp,code_extenstion_request as s where all_r.Req_Type='Code Extention' and (all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"') and emp.PERNR=all_r.Requester_Name " +
							"and s.REQUEST_NO=all_r.Req_Id and (s.PLANT_1=loc.LOCATION_CODE or s.PLANT_2=loc.LOCATION_CODE)  )as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
								}
				
				ResultSet rsCodeExtention=ad.selectQuery(getCodeExtention);
				while(rsCodeExtention.next()){
				MyRequestForm codeExtentionRec=new MyRequestForm();
				codeExtentionRec.setRequestNumber(rsCodeExtention.getString("REQUEST_NO"));
				codeExtentionRec.setLocationName(rsCodeExtention.getString("location_code"));
				codeExtentionRec.setRequestType("Code Extention");
				codeExtentionRec.setPlantType(rsCodeExtention.getString("matType"));
				String sapNo="";
				if(rsCodeExtention.getString("matType").equals("Plant"))
					sapNo=rsCodeExtention.getString("MATERIAL_CODE_1");
				else
					sapNo=rsCodeExtention.getString("MATERIAL_CODE_2");
				codeExtentionRec.setSapNo(sapNo);
				codeExtentionRec.setDescription(rsCodeExtention.getString("MATERIAL_SHORT_NAME"));
				String requestDate=rsCodeExtention.getString("CREATED_DATE");
				String req[]=requestDate.split(" ");
				requestDate=req[0];
				String a[]=requestDate.split("-");
				requestDate=a[2]+"/"+a[1]+"/"+a[0];
				codeExtentionRec.setCreateDate(requestDate);
				codeExtentionRec.setApprovalStatus(rsCodeExtention.getString("Req_Status"));
				String url="materialCodeExtenstion.do?method=editCodeExtension";
				codeExtentionRec.setUrl(url);
				codeExtentionRec.setLastApprover(rsCodeExtention.getString("last_approver"));
				codeExtentionRec.setPendingApprover(rsCodeExtention.getString("pending_approver"));

		listOfMyRequest.add(codeExtentionRec);
			
		}
		if(listOfMyRequest.size()>0)
		request.setAttribute("Code Extention list", listOfMyRequest);	
		if(listOfMyRequest.size()==0){
			
			approvalsForm.setMessage3("No Records Found..");
		}
		}
		
			
		
	
		if(reqType.equalsIgnoreCase("Service Master")){


			 String getMaterialRecords="";
				if(type.equalsIgnoreCase("Pending")){
			getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date," +
			"loc.LOCATION_CODE,all_r.type,s.service_description,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status	from Location as loc," +
			" All_Request as all_r,emp_official_info as emp,SERVICE_MASTER as s where all_r.Req_Type='Service Master' and all_r.Pending_Approver='"+user.getEmployeeNo()+"' and " +
			"emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id and s.plant_code=loc.LOCID and all_r.Req_Status='"+type+"')as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
				}
				if(type.equalsIgnoreCase("Approved")){
					getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date," +
					"loc.LOCATION_CODE,all_r.type,s.service_description,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status	from Location as loc," +
					" All_Request as all_r,emp_official_info as emp,SERVICE_MASTER as s where all_r.Req_Type='Service Master' and all_r.Last_Approver='"+user.getEmployeeNo()+"' and " +
					"emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id and s.plant_code=loc.LOCID and all_r.Req_Status='"+type+"')as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
				
				}
				if(type.equalsIgnoreCase("Completed")){
					getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date," +
					"loc.LOCATION_CODE,all_r.type,s.service_description,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status	from Location as loc," +
					" All_Request as all_r,emp_official_info as emp,SERVICE_MASTER as s where all_r.Req_Type='Service Master' and all_r.Last_Approver='"+user.getEmployeeNo()+"' and " +
					"emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id and s.plant_code=loc.LOCID and all_r.Req_Status='"+type+"')as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
				
				}
				if(type.equalsIgnoreCase("Rejected")){
					getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date," +
					"loc.LOCATION_CODE,all_r.type,s.service_description,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status	from Location as loc," +
					" All_Request as all_r,emp_official_info as emp,SERVICE_MASTER as s where all_r.Req_Type='Service Master' and all_r.Approved_Persons='"+user.getEmployeeNo()+"' and " +
					"emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id and s.plant_code=loc.LOCID and all_r.Req_Status='"+type+"')as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
				
				}
				if(type.equalsIgnoreCase("All")){
					getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS RowNum,all_r.Req_Id,all_r.Req_Date," +
					"loc.LOCATION_CODE,all_r.type,s.service_description,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status	" +
					"from Location as  loc, All_Request as all_r,emp_official_info as emp,SERVICE_MASTER as s where all_r.Req_Type='Service Master' and " +
					"(all_R.Last_Approver ='85457' or all_R.Pending_Approver = '85457') and emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id and  " +
					"s.plant_code=loc.LOCID )as  sub Where  sub.RowNum   between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
				
				}
				
				ResultSet rsMat=ad.selectQuery(getMaterialRecords);	 
				try{
					LinkedList materialList=new LinkedList();
					while(rsMat.next()){
					MaterialCodeRequestForm masterForm=new MaterialCodeRequestForm();
					masterForm.setRequestNumber(rsMat.getString("Req_Id"));
					masterForm.setRequestDate(rsMat.getString("Req_Date"));
					masterForm.setLocationCode(rsMat.getString("LOCATION_CODE"));
					masterForm.setMaterailType(rsMat.getString("type"));
					masterForm.setEmployeeName(rsMat.getString("EMP_FULLNAME"));
					masterForm.setServiceDescription(rsMat.getString("service_description"));
					masterForm.setLastApprover(rsMat.getString("last_approver"));
					masterForm.setPendingApprover(rsMat.getString("pending_approver"));
					masterForm.setApproveStatus(rsMat.getString("Req_Status"));
					
					materialList.add(masterForm);
					
					}
					if(materialList.size()>0)
					request.setAttribute("serviceMaster", materialList);
					request.setAttribute("Service Master List", "Service Master List");
					if(materialList.size()==0){
						request.setAttribute("no Material Master records", "no Material Master records");
						approvalsForm.setMessage3("No Records Found..");
					}
				}catch (Exception e) {
					e.printStackTrace();
				}
		 
	  
		  }
		
		 if(reqType.equalsIgnoreCase("Material Master")){
				
				String getMaterialRecords="";
				if(type.equalsIgnoreCase("Pending")){
					getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE,all_r.type,matType.M_DESC,mat.MATERIAL_SHORT_NAME,emp.EMP_FULLNAME,mat.last_approver,mat.pending_approver," +
					"all_r.Req_Status,mat.MATERIAL_GROUP_ID from Location as loc, All_Request as all_r,emp_official_info as emp,material_code_request as mat,MATERIAL_TYPE as matType " +
					"where all_r.Req_Type='Material Master' and all_r.Pending_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and mat.REQUEST_NO=all_r.Req_Id " +
					"and mat.LOCATION_ID=loc.LOCID and all_r.Req_Status='"+type+"' and matType.MATERIAL_GROUP_ID=mat.Type)as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";	
						}
					if(type.equalsIgnoreCase("Approved")){
						getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE,all_r.type,matType.M_DESC,mat.MATERIAL_SHORT_NAME,emp.EMP_FULLNAME,mat.last_approver,mat.pending_approver," +
						"all_r.Req_Status,mat.MATERIAL_GROUP_ID from Location as loc, All_Request as all_r,emp_official_info as emp,material_code_request as mat,MATERIAL_TYPE as matType  " +
						"where all_r.Req_Type='Material Master' and all_r.Last_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and mat.REQUEST_NO=all_r.Req_Id " +
						"and mat.LOCATION_ID=loc.LOCID and all_r.Req_Status='"+type+"' and matType.MATERIAL_GROUP_ID=mat.Type)as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";	
							}
					
					if(type.equalsIgnoreCase("Completed")){
						getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE,all_r.type,matType.M_DESC,mat.MATERIAL_SHORT_NAME,emp.EMP_FULLNAME,mat.last_approver,mat.pending_approver," +
						"all_r.Req_Status,mat.MATERIAL_GROUP_ID from Location as loc, All_Request as all_r,emp_official_info as emp,material_code_request as mat,MATERIAL_TYPE as matType  " +
						"where all_r.Req_Type='Material Master' and all_r.Last_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and mat.REQUEST_NO=all_r.Req_Id " +
						"and mat.LOCATION_ID=loc.LOCID and all_r.Req_Status='"+type+"' and matType.MATERIAL_GROUP_ID=mat.Type)as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";	
							}
					
					if(type.equalsIgnoreCase("Rejected")){
						getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE,all_r.type,matType.M_DESC,mat.MATERIAL_SHORT_NAME,emp.EMP_FULLNAME,mat.last_approver,mat.pending_approver," +
						"all_r.Req_Status,mat.MATERIAL_GROUP_ID from Location as loc, All_Request as all_r,emp_official_info as emp,material_code_request as mat,MATERIAL_TYPE as matType " +
						"where all_r.Req_Type='Material Master' and all_r.Approved_Persons='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and mat.REQUEST_NO=all_r.Req_Id " +
						"and mat.LOCATION_ID=loc.LOCID and all_r.Req_Status='"+type+"' and matType.MATERIAL_GROUP_ID=mat.Type)as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";	
						
								}
					if(type.equalsIgnoreCase("All")){
						getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE,all_r.type,matType.M_DESC,mat.MATERIAL_SHORT_NAME,emp.EMP_FULLNAME,mat.last_approver,mat.pending_approver," +
						"all_r.Req_Status,mat.MATERIAL_GROUP_ID from Location as loc, All_Request as all_r,emp_official_info as emp,material_code_request as mat,MATERIAL_TYPE as matType " +
						"where all_r.Req_Type='Material Master' and (all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"') and emp.PERNR=all_r.Requester_Name and mat.REQUEST_NO=all_r.Req_Id " +
						"and mat.LOCATION_ID=loc.LOCID and matType.MATERIAL_GROUP_ID=mat.Type )as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";	
						
							}
	ResultSet rsMat=ad.selectQuery(getMaterialRecords);	 
	try{
		LinkedList materialList=new LinkedList();
		while(rsMat.next()){
		MaterialCodeRequestForm masterForm=new MaterialCodeRequestForm();
		masterForm.setRequestNumber(rsMat.getString("Req_Id"));
		masterForm.setRequestDate(rsMat.getString("Req_Date"));
		masterForm.setLocationCode(rsMat.getString("LOCATION_CODE"));
		masterForm.setMaterialDesc(rsMat.getString("type"));
		masterForm.setEmployeeName(rsMat.getString("EMP_FULLNAME"));
		masterForm.setMaterialName(rsMat.getString("MATERIAL_SHORT_NAME"));
		masterForm.setLastApprover(rsMat.getString("last_approver"));
		masterForm.setPendingApprover(rsMat.getString("pending_approver"));
		masterForm.setApproveStatus(rsMat.getString("Req_Status"));
		masterForm.setMaterialGroup(rsMat.getString("MATERIAL_GROUP_ID"));
		materialList.add(masterForm);
		
		}
		if(materialList.size()>0)
		{
		request.setAttribute("materialList", materialList);
		request.setAttribute("Material List", "Material List");
		}
		
		if(materialList.size()==0){
			request.setAttribute("no Material Master records", "no Material Master records");
			approvalsForm.setMessage3("No Records Found..");
		}
		
	}catch (Exception e) {
		e.printStackTrace();
	}
			
	if(type.equalsIgnoreCase("Pending")){
		request.setAttribute("displayButton", "displayButton");
		}
		 
	if(totalRecords>10){
 	   
	       
		 
		 if(startRecord==1)
		 {
			 request.setAttribute("disablePreviousButton", "disablePreviousButton"); 
		 }
		 if(endRecord>10)
		 {
			 request.setAttribute("previousButton", "previousButton"); 
		 }
		 
		 if(endRecord==totalRecords)
		 {
			request.setAttribute("nextButton", "");
			request.setAttribute("disableNextButton", "disableNextButton");
		 }
		 if(endRecord<totalRecords)
		 {
			 request.setAttribute("nextButton", "nextButton");
		 }
		 request.setAttribute("displayRecordNo", "displayRecordNo");
      }
		 approvalsForm.setTotalRecords(totalRecords);
		 approvalsForm.setStartRecord(startRecord);
		 approvalsForm.setEndRecord(endRecord);
		  
		  }
		
		
		if(reqType.equalsIgnoreCase("Leave")){
			LinkedList leaveList=new LinkedList();
			String getLeaveRecords="";
		
			if(type.equalsIgnoreCase("Pending")){
				getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,leave.leave_type," +
					"emp.EMP_FULLNAME,all_R.Req_Status,leave.submit_date as Req_Date,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days from  All_Request as all_R," +
					"emp_official_info as emp,leave_details as leave where all_R.Pending_Approver='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' and all_R.Req_Type='Leave' and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id) " +
					"as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
					}
					if(type.equalsIgnoreCase("Approved")){
						getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,leave.leave_type," +
						"emp.EMP_FULLNAME,leave.submit_date as Req_Date,all_R.Req_Status,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days from  All_Request as all_R," +
						"emp_official_info as emp,leave_details as leave where all_R.Last_Approver='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' and   (Actual_Approver_status is null or Actual_Approver_status='') and all_R.Req_Type='Leave' and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id) " +
						"as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
					}
					if(type.equalsIgnoreCase("Rejected")){
						getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,leave.leave_type," +
						"emp.EMP_FULLNAME,leave.submit_date as Req_Date,all_R.Req_Status,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days from  All_Request as all_R," +
						"emp_official_info as emp,leave_details as leave where all_R.Approved_Persons='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' and all_R.Req_Type='Leave' and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id) " +
						"as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
					}
					if(type.equalsIgnoreCase("Cancelled")){
						getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,leave.leave_type," +
						"emp.EMP_FULLNAME,leave.submit_date as Req_Date,all_R.Req_Status,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days from  All_Request as all_R," +
						"emp_official_info as emp,leave_details as leave where all_R.Approved_Persons='"+user.getEmployeeNo()+"' and (Req_Status='"+type+"' OR Actual_Approver_status='"+type+"') and all_R.Req_Type='Leave' and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id) " +
						"as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
					}
					if(type.equalsIgnoreCase("All")){
						getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,leave.leave_type," +
						"emp.EMP_FULLNAME,leave.submit_date as Req_Date,all_R.Req_Status,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days from  All_Request as all_R," +
						"emp_official_info as emp,leave_details as leave where (all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"') and all_R.Req_Type='Leave'  and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id) " +
						"as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
					}
			
			ResultSet rsLeave=ad.selectQuery(getLeaveRecords);
			try{
			while(rsLeave.next()){
			LeaveForm leave=new LeaveForm();
			leave.setRequestNumber(rsLeave.getInt("Req_Id"));
			
		String	leaveType=rsLeave.getString("leave_type");
			if(leaveType.equalsIgnoreCase("1")){
				leaveType="Casual";
			}
			if(leaveType.equalsIgnoreCase("2")){
				leaveType="Sick";
			}
			if(leaveType.equalsIgnoreCase("3")){
				leaveType="privilege";
			}
			if(leaveType.equalsIgnoreCase("4")){
				leaveType="Loss Of Pay";
			}
			if(leaveType.equalsIgnoreCase("5")){
				leaveType="Maternity";
			}
			if(leaveType.equalsIgnoreCase("6")){
				leaveType="Comp-Off";
			}
			leave.setLeaveType(leaveType);
			leave.setEmployeeName(rsLeave.getString("EMP_FULLNAME"));
			leave.setSubmitDate(rsLeave.getString("Req_Date"));
			leave.setStartDate(EMicroUtils.display(rsLeave.getDate("start_date")));
			String stDur=rsLeave.getString("start_duration");
			
			if(stDur.equalsIgnoreCase("FD")){
				stDur="Full Day";
			}
			if(stDur.equalsIgnoreCase("FH")){
				stDur="First Half";
			}
			if(stDur.equalsIgnoreCase("SH")){
				stDur="Second Half";
			}
			leave.setStartDurationType(stDur);
			
			leave.setEndDate(EMicroUtils.display(rsLeave.getDate("end_date")));
			
			String endDur=rsLeave.getString("end_duration");
			
			if(endDur.equalsIgnoreCase("FD")){
				endDur="Full Day";
			}
			if(endDur.equalsIgnoreCase("FH")){
				endDur="First Half";
			}
			if(endDur.equalsIgnoreCase("SH")){
				endDur="Second Half";
			}
			leave.setEndDurationType(endDur);
			leave.setNoOfDays(rsLeave.getString("no_of_days"));
			if(type.equalsIgnoreCase("Cancelled"))
				leave.setApproveStatus("Cancelled");
				else
				leave.setApproveStatus(rsLeave.getString("Req_Status"));	
			
			//disable cancle button
			int year = Calendar.getInstance().get(Calendar.YEAR);
			int mon=Calendar.getInstance().get(Calendar.MONTH);
			int day=Calendar.getInstance().get(Calendar.DAY_OF_MONTH);
			mon=mon+1;
			String month="";
			if(mon<10)
			{
				month="0"+Integer.toString(mon);
			}
			else
			{
				month=Integer.toString(mon);
			}
	
	   		if(day>=21)
	   		{
	   			
	   			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	        	Date date1 = rsLeave.getDate("start_date");
	        	Date date2 = sdf.parse(""+year+"-"+month+"-21");
	 
	        	
	   	
	   			
			int value=date1.compareTo(date2);
			if(value<1)
			{
				leave.setApptype("DisableCancel");
			}
	   		}
			leaveList.add(leave);
			}
			if(leaveList.size()>0)
			request.setAttribute("leaveList", leaveList);
			if(leaveList.size()==0){
				request.setAttribute("no Leave records", "no Leave records");
				approvalsForm.setMessage3("No Records Found..");
			}
			}catch (Exception e) {
				e.printStackTrace();
			}
			
		}
		if(type.equalsIgnoreCase("Pending")){
			if(!reqType.equals("IT Request"))
		request.setAttribute("displayButton", "displayButton");
		}

	 	
       if(totalRecords>10){
    	   
       
		 
		 if(startRecord==1)
		 {
			 request.setAttribute("disablePreviousButton", "disablePreviousButton"); 
		 }
		 if(endRecord>10)
		 {
			 request.setAttribute("previousButton", "previousButton"); 
		 }
		 
		 if(endRecord==totalRecords)
		 {
			request.setAttribute("nextButton", "");
			request.setAttribute("disableNextButton", "disableNextButton");
		 }
		 if(endRecord<totalRecords)
		 {
			 request.setAttribute("nextButton", "nextButton");
		 }
		 request.setAttribute("displayRecordNo", "displayRecordNo");
       }
		 approvalsForm.setTotalRecords(totalRecords);
		 approvalsForm.setStartRecord(startRecord);
		 approvalsForm.setEndRecord(endRecord);
		 
	}catch (Exception e) {
	e.printStackTrace();
	}
	return mapping.findForward("approvePage");
	}
	public ActionForward HRqueryRequestToApprove(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		ApprovalsForm pendAppForm = (ApprovalsForm) form;
		String reqId = request.getParameter("reqId");
		pendAppForm.setRequestNo(reqId);
		String reqType = pendAppForm.getReqRequstType();
		pendAppForm.setRequestType(reqType);
		HttpSession session = request.getSession();
		UserInfo user = (UserInfo) session.getAttribute("user");
		if (user == null) {
			request.setAttribute("message",
					"Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		String scount = Integer.toString(pendAppForm.getStartRecord());

		int totalRecords = pendAppForm.getTotalRecords();// 21
		int startRecord = pendAppForm.getStartRecord();// 11
		int endRecord = pendAppForm.getEndRecord();
		String filterBy = pendAppForm.getSelectedFilter();
		EssDao ad = new EssDao();
		pendAppForm.setTotalRecords(totalRecords);
		pendAppForm.setStartRecord(startRecord);
		pendAppForm.setEndRecord(endRecord);
		pendAppForm.setSelectedFilter(filterBy);
		if (reqId == null && reqType == null) {
			reqId = pendAppForm.getRequestNo();
			reqType = pendAppForm.getRequestType();
		}
		int j = 1;
		int reqby = 0;
		LinkedList OT = new LinkedList();
		int requesterNo = Integer.parseInt(request.getParameter("reqId"));
		ArrayList query=new ArrayList();
		String getcomoff = "select * from HR_QUERIES where id='"+requesterNo+"'";
		ResultSet ff = ad.selectQuery(getcomoff);
		try {
			while (ff.next()) {
					

				
				
				pendAppForm.setSubject(ff.getString("subject"));
				pendAppForm.setReason(ff.getString("description"));
				
				String re[]=empDet(Integer.toString(ff.getInt("req_by")));
				pendAppForm.setEmployeeno(Integer.toString(ff.getInt("req_by")));
				pendAppForm.setEmployeeName(re[0]);
			    pendAppForm.setLocationId(re[1]);
				pendAppForm.setDepartment(re[2]);
				pendAppForm.setDesignation(re[3]); 
				pendAppForm.setDateofBirth(re[4]);
		
			}
		} catch (SQLException e) {

			e.printStackTrace();
		}
		request.setAttribute("query", query);

		if (filterBy.equalsIgnoreCase("Pending")) {

			request.setAttribute("approveButton", "approveButton");
			request.setAttribute("rejectButton", "rejectButton");
		}

		String app = "";
		// PLANT HEAD
		if (filterBy.equalsIgnoreCase("Pending")) {
			app = "select a.*,e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from All_Request a,emp_official_info e,DEPARTMENT dep,DESIGNATION desg where Req_Type='User Request' and a.Req_Id='"
					+ requesterNo
					+ "' and e.PERNR=a.Pending_Approver and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID "
					+ "union "
					 +"select a.*,e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from All_Request a,emp_official_info e,DEPARTMENT dep,DESIGNATION desg where Req_Type='User Request' and a.Req_Id='"
						+ requesterNo
						+ "' and e.PERNR=a.Actual_Approver and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID ";

		} else {
			app = "select a.*,e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from All_Request a,emp_official_info e,DEPARTMENT dep,DESIGNATION desg where  Req_Type='User Request' and a.Req_Id='"
					+ requesterNo
					+ "' and e.PERNR=a.Actual_Approver and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID ";
				

		}
		List appList = new LinkedList();
		ResultSet rsAppr = ad.selectQuery(app);
		String duplicate="";
		try {
			while (rsAppr.next()) {
				ApprovalsForm appr = new ApprovalsForm();
				appr.setApprover(rsAppr.getString("EMP_FULLNAME"));
				appr.setDesignation(rsAppr.getString("DSGSTXT"));
				appr.setApproveStatus(rsAppr.getString("Req_Status"));
				String approvaStatus = rsAppr.getString("Req_Status");
				if (approvaStatus.equals("Pending")) {
					appr.setApproveDate("");
					appr.setComments("");
				}
				if (approvaStatus.equals("Approved")
						|| approvaStatus.equals("Completed")) {
					appr.setApproveDate(rsAppr.getString("approved_date"));
					appr.setComments(rsAppr.getString("Comments"));
				}
				if (approvaStatus.equals("Rejected")
						|| approvaStatus.equals("Cancelled")) {
					appr.setApproveDate(rsAppr.getString("rejected_date"));
					appr.setComments(rsAppr.getString("Comments"));
				}
				if(duplicate!=null)
				if(!duplicate.equalsIgnoreCase(rsAppr.getString("approved_date")))
					appList.add(appr);
					duplicate=rsAppr.getString("approved_date");
			}
			request.setAttribute("appList", appList);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		

		return mapping.findForward("Hrquery");
	}
	
	public ActionForward OTSelectedRequestToApprove(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		ApprovalsForm pendAppForm = (ApprovalsForm) form;
		String reqId = request.getParameter("reqId");
		pendAppForm.setRequestNo(reqId);
		String reqType = pendAppForm.getReqRequstType();
		pendAppForm.setRequestType(reqType);
		HttpSession session = request.getSession();
		UserInfo user = (UserInfo) session.getAttribute("user");
		if (user == null) {
			request.setAttribute("message",
					"Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		String scount = Integer.toString(pendAppForm.getStartRecord());

		int totalRecords = pendAppForm.getTotalRecords();// 21
		int startRecord = pendAppForm.getStartRecord();// 11
		int endRecord = pendAppForm.getEndRecord();
		String filterBy = pendAppForm.getSelectedFilter();
		EssDao ad = new EssDao();
		pendAppForm.setTotalRecords(totalRecords);
		pendAppForm.setStartRecord(startRecord);
		pendAppForm.setEndRecord(endRecord);
		pendAppForm.setSelectedFilter(filterBy);
		if (reqId == null && reqType == null) {
			reqId = pendAppForm.getRequestNo();
			reqType = pendAppForm.getRequestType();
		}
		int j = 1;
		int reqby = 0;
		LinkedList OT = new LinkedList();
		int requesterNo = Integer.parseInt(request.getParameter("reqId"));
		String getcomoff = "select datename(weekday,FromDate) as weekday,c.*,e.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT from OVER_TIME_DETAILS c,emp_official_info e,DEPARTMENT dept,DESIGNATION desg where Req_no='"
				+ requesterNo
				+ "' and e.PERNR=c.Pernr and dept.DPTID=e.DPTID and desg.DSGID=e.DSGID";
		ResultSet a = ad.selectQuery(getcomoff);
		try {
			while (a.next()) {

				LeaveForm l = new LeaveForm();
				pendAppForm.setStartDate(EMicroUtils.display(a
						.getDate("FromDate"))+", "+a.getString("weekday"));
				pendAppForm
						.setEndDate(EMicroUtils.display(a.getDate("ToDate")));
				pendAppForm.setReason(a.getString("Reason"));
				reqby = a.getInt("RequestedBy");
				l.setSlmindur(j);
				l.setEmployeeNumber(Integer.toString(a.getInt("Pernr")));
				l.setEmployeeName(a.getString("EMP_FULLNAME"));
				l.setDepartment(a.getString("DPTSTXT"));
				l.setDesignation(a.getString("DSGSTXT"));
				l.setNofhrs(a.getString("NoHRS"));
				
				String re[]=empDet(Integer.toString(reqby));
				pendAppForm.setEmployeeno(Integer.toString(reqby));
				pendAppForm.setEmployeeName(re[0]);
			    pendAppForm.setLocationId(re[1]);
				pendAppForm.setDepartment(re[2]);
				pendAppForm.setDesignation(re[3]); 
				pendAppForm.setDateofBirth(re[4]);
		
				++j;
				OT.add(l);

			}
		} catch (SQLException e) {

			e.printStackTrace();
		}
		request.setAttribute("OT", OT);

		if (filterBy.equalsIgnoreCase("Pending")) {

			request.setAttribute("approveButton", "approveButton");
			request.setAttribute("rejectButton", "rejectButton");
		}


		// plant
		String app = "";
		// PLANT HEAD
		

		
		if (filterBy.equalsIgnoreCase("Pending")) {
			app = "select a.*,e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from All_Request a,emp_official_info e,DEPARTMENT dep,DESIGNATION desg where Req_Type='OverTime' and a.Req_Id='"
					+ requesterNo
					+ "' and e.PERNR=a.Pending_Approver and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID "
					+ "union "
					 +"select a.*,e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from All_Request a,emp_official_info e,DEPARTMENT dep,DESIGNATION desg where Req_Type='OverTime' and a.Req_Id='"
						+ requesterNo
						+ "' and e.PERNR=a.Actual_Approver and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID ";

		} else {
			app = "select a.*,e.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from All_Request a,emp_official_info e,DEPARTMENT dep,DESIGNATION desg where  Req_Type='OverTime' and a.Req_Id='"
					+ requesterNo
					+ "' and e.PERNR=a.Actual_Approver and e.DPTID=dep.DPTID and e.DSGID=desg.DSGID ";
				

		}
		List appList = new LinkedList();
		ResultSet rsAppr = ad.selectQuery(app);
		String duplicate="";
		try {
			while (rsAppr.next()) {
				ApprovalsForm appr = new ApprovalsForm();
				appr.setApprover(rsAppr.getString("EMP_FULLNAME"));
				appr.setDesignation(rsAppr.getString("DSGSTXT"));
				appr.setApproveStatus(rsAppr.getString("Req_Status"));
				String approvaStatus = rsAppr.getString("Req_Status");
				if (approvaStatus.equals("Pending")) {
					appr.setApproveDate("");
					appr.setComments("");
				}
				if (approvaStatus.equals("Approved")
						|| approvaStatus.equals("Completed")) {
					appr.setApproveDate(rsAppr.getString("approved_date"));
					appr.setComments(rsAppr.getString("Comments"));
				}
				if (approvaStatus.equals("Rejected")
						|| approvaStatus.equals("Cancelled")) {
					appr.setApproveDate(rsAppr.getString("rejected_date"));
					appr.setComments(rsAppr.getString("Comments"));
				}
				if(duplicate!=null)
				if(!duplicate.equalsIgnoreCase(rsAppr.getString("approved_date")))
					appList.add(appr);
					duplicate=rsAppr.getString("approved_date");
			}
			request.setAttribute("appList", appList);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return mapping.findForward("OT");
	}
	
	public ActionForward lastRecord(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) { 
		
		ApprovalsForm approvalsForm=(ApprovalsForm)form;
		NewsandMediaDao ad=new NewsandMediaDao();
		LinkedList leaveList=new LinkedList();
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		int userID=user.getId();
		String type=approvalsForm.getSelectedFilter();
		String status=approvalsForm.getReqRequstType();
		if(type.equalsIgnoreCase("Pending")){
			if(!status.equalsIgnoreCase("IT Request"))
			request.setAttribute("displayButton", "displayButton");
			}
		try{
			int totalRecords=approvalsForm.getTotalRecords();//21
			int startRecord=approvalsForm.getStartRecord();//11
			int endRecord=approvalsForm.getEndRecord();	
			
			
			 startRecord=totalRecords-9;
			 endRecord=totalRecords;
			 approvalsForm.setTotalRecords(totalRecords);
			 approvalsForm.setStartRecord(startRecord);
			 approvalsForm.setEndRecord(totalRecords);
			 
			 
			 if (status.equalsIgnoreCase("User Request")) {
					LinkedList Usrreq = new LinkedList();
					String getITRecords = "";

					if (type.equalsIgnoreCase("Pending")) {
						getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.subject,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type"
								+ " from  All_Request as all_R,emp_official_info as  emp, HR_QUERIES as it where all_R.Pending_Approver='"
								+ user.getEmployeeNo()
								+ "' and all_R.Req_Status='Pending' and all_R.Req_Id=it.id and  all_R.Requester_Name=emp.PERNR "
								+ "and all_R.Req_Type='"+status+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.subject,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";

					}

					if (type.equalsIgnoreCase("Approved")) {
						getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.subject,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type"
								+ " from  All_Request as all_R,emp_official_info as  emp, HR_QUERIES as it where all_R.Last_Approver='"
								+ user.getEmployeeNo()
								+ "' and all_R.Req_Status='Approved' and all_R.Req_Id=it.id and  all_R.Requester_Name=emp.PERNR "
								+ "and all_R.Req_Type='"+status+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.subject,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";

					}
					if (type.equalsIgnoreCase("Rejected")) {
						getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.subject,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type"
								+ " from  All_Request as all_R,emp_official_info as  emp, HR_QUERIES as it where all_R.Last_Approver='"
								+ user.getEmployeeNo()
								+ "' and all_R.Req_Status='Rejected' and all_R.Req_Id=it.id and  all_R.Requester_Name=emp.PERNR "
								+ "and all_R.Req_Type='"+status+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.subject,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
					}

					if (type.equalsIgnoreCase("All")) {

						getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.subject,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type"
								+ " from  All_Request as all_R,emp_official_info as  emp, HR_QUERIES as it where (all_R.Last_Approver='"
								+ user.getEmployeeNo()
								+ "' or all_R.Pending_Approver='"
								+ user.getEmployeeNo()
								+ "')  and all_R.Req_Id=it.id and  all_R.Requester_Name=emp.PERNR "
								+ "and all_R.Req_Type='"+status+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.subject,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";

					}
					ResultSet rsit = ad.selectQuery(getITRecords);
					try {
						while (rsit.next()) {
							LeaveForm leave = new LeaveForm();
							leave.setRequestNumber(rsit.getInt("Req_Id"));
							leave.setEmployeeName(rsit.getString("EMP_FULLNAME"));
							leave.setSubmitDate(EMicroUtils.display(rsit
									.getDate("Req_Date")));
							leave.setStatus(rsit.getString("Req_Status"));
							
							leave.setReason(rsit.getString("subject"));
							leave.setLapprover(rsit.getString("Last_approver"));
							leave.setPapprover(rsit.getString("Pending_approver"));
							Usrreq.add(leave);

						}
						if (Usrreq.size() > 0) {
							if (type.equalsIgnoreCase("Pending")) {
								// request.setAttribute("displayButton",
								// "displayButton");
							}
						}
						request.setAttribute("Usrreq", Usrreq);
						if(Usrreq.size()==0){
							request.setAttribute("no records", "no  records");
							approvalsForm.setMessage3("No Records Found..");
						}
						
					request.setAttribute("disableNextButton",
							"disableNextButton");
					request.setAttribute("previousButton", "previousButton");
					if (Usrreq.size() < 10) {

						request.setAttribute("previousButton", "previousButton");
						request.setAttribute("disablePreviousButton",
								"disablePreviousButton");
					}
					request.setAttribute("displayRecordNo", "displayRecordNo");
					} catch (SQLException e) {

						e.printStackTrace();
					}
				}
			 
			 
			 if (status.equalsIgnoreCase("OverTime")) {
					LinkedList OT = new LinkedList();
					String getITRecords = "";

					if (type.equalsIgnoreCase("Pending")) {
						getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
								+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, OVER_TIME_DETAILS as it where all_R.Pending_Approver='"
								+ user.getEmployeeNo()
								+ "' and all_R.Req_Status='Pending' and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
								+ "and all_R.Req_Type='"+status+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";

					}

					if (type.equalsIgnoreCase("Approved")) {
						getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
								+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, OVER_TIME_DETAILS as it where all_R.Last_Approver='"
								+ user.getEmployeeNo()
								+ "' and all_R.Req_Status='Approved' and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
								+ "and all_R.Req_Type='"+status+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";

					}
					if (type.equalsIgnoreCase("Rejected")) {
						getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
								+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, OVER_TIME_DETAILS as it where all_R.Last_Approver='"
								+ user.getEmployeeNo()
								+ "' and all_R.Req_Status='Rejected' and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
								+ "and all_R.Req_Type='"+status+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
					}

					if (type.equalsIgnoreCase("All")) {

						getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
								+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, OVER_TIME_DETAILS as it where (all_R.Last_Approver='"
								+ user.getEmployeeNo()
								+ "' or all_R.Pending_Approver='"
								+ user.getEmployeeNo()
								+ "')  and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
								+ "and all_R.Req_Type='"+status+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";

					}
					ResultSet rsit = ad.selectQuery(getITRecords);
					try {
						while (rsit.next()) {
							LeaveForm leave = new LeaveForm();
							leave.setRequestNumber(rsit.getInt("Req_Id"));
							leave.setEmployeeName(rsit.getString("EMP_FULLNAME"));
							leave.setSubmitDate(EMicroUtils.display(rsit
									.getDate("Req_Date")));
							leave.setStatus(rsit.getString("Req_Status"));
							leave.setStartDate(EMicroUtils.display(rsit
									.getDate("FromDate")));
							leave.setEndDate(EMicroUtils.display(rsit
									.getDate("ToDate")));
							leave.setPapprover(rsit.getString("Pending_approver"));
							
							leave.setLapprover(rsit.getString("Last_approver"));
							OT.add(leave);

						}
						if (OT.size() > 0) {
							if (type.equalsIgnoreCase("Pending")) {
								// request.setAttribute("displayButton",
								// "displayButton");
							}
						}
						request.setAttribute("OT", OT);
						if (OT.size() == 0) {
							request.setAttribute("no OT records",
									"no OT records");
							approvalsForm.setMessage3("No Records Found..");
						}
						
						request.setAttribute("disableNextButton",
								"disableNextButton");
						request.setAttribute("previousButton", "previousButton");
						if (OT.size() < 10) {

							request.setAttribute("previousButton", "previousButton");
							request.setAttribute("disablePreviousButton",
									"disablePreviousButton");
						}
						request.setAttribute("displayRecordNo", "displayRecordNo");
					} catch (SQLException e) {

						e.printStackTrace();
					}

				}
			 
			 
			 if (status.equalsIgnoreCase("Comp-Off/OT")) {
					LinkedList comp = new LinkedList();
					String getITRecords = "";

					if (type.equalsIgnoreCase("Pending")) {
						getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
								+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, COMP_OT as it where all_R.Pending_Approver='"
								+ user.getEmployeeNo()
								+ "' and all_R.Req_Status='Pending' and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
								+ "and all_R.Req_Type='Comp-Off/OT' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"
								+ startRecord
								+ "' and '"
								+ endRecord
								+ "' order by Req_Id desc";

					}

					if (type.equalsIgnoreCase("Approved")) {
						getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
								+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, COMP_OT as it where all_R.Last_Approver='"
								+ user.getEmployeeNo()
								+ "' and all_R.Req_Status='Approved' and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
								+ "and all_R.Req_Type='Comp-Off/OT' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"
								+ startRecord
								+ "' and '"
								+ endRecord
								+ "' order by Req_Id desc";

					}
					if (type.equalsIgnoreCase("Rejected")) {
						getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
								+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, COMP_OT as it where all_R.Last_Approver='"
								+ user.getEmployeeNo()
								+ "' and all_R.Req_Status='Rejected' and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
								+ "and all_R.Req_Type='Comp-Off/OT' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"
								+ startRecord
								+ "' and '"
								+ endRecord
								+ "' order by Req_Id desc";
					}

					if (type.equalsIgnoreCase("All")) {

						getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
								+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, COMP_OT as it where (all_R.Last_Approver='"
								+ user.getEmployeeNo()
								+ "' or all_R.Pending_Approver='"
								+ user.getEmployeeNo()
								+ "')  and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
								+ "and all_R.Req_Type='Comp-Off/OT' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"
								+ startRecord
								+ "' and '"
								+ endRecord
								+ "' order by Req_Id desc";

					}

					ResultSet rsit = ad.selectQuery(getITRecords);
					try {
						while (rsit.next()) {
							LeaveForm leave = new LeaveForm();
							leave.setRequestNumber(rsit.getInt("Req_Id"));
							leave.setEmployeeName(rsit.getString("EMP_FULLNAME"));
							leave.setSubmitDate(EMicroUtils.display(rsit
									.getDate("Req_Date")));
							leave.setStatus(rsit.getString("Req_Status"));
							leave.setStartDate(EMicroUtils.display(rsit
									.getDate("FromDate")));
							leave.setEndDate(EMicroUtils.display(rsit
									.getDate("ToDate")));
							leave.setPapprover(rsit.getString("Pending_approver"));
							
							leave.setLapprover(rsit.getString("Last_approver"));
							comp.add(leave);

						}
						if (comp.size() > 0) {
							if (type.equalsIgnoreCase("Pending")) {
								// request.setAttribute("displayButton",
								// "displayButton");
							}
						}
						request.setAttribute("comp", comp);
						if (comp.size() == 0) {
							request.setAttribute("no it records", "no it records");
							approvalsForm.setMessage3("No Records Found..");
						}
						request.setAttribute("disableNextButton",
								"disableNextButton");
						request.setAttribute("previousButton", "previousButton");
						if (comp.size() < 10) {

							request.setAttribute("previousButton", "previousButton");
							request.setAttribute("disablePreviousButton",
									"disablePreviousButton");
						}
						request.setAttribute("displayRecordNo", "displayRecordNo");

					} catch (SQLException e) {

						e.printStackTrace();
					}

				}

			 
			 if(status.equalsIgnoreCase("VC Booking"))
			 {
				 ApprovalsList apprList=new ApprovalsList();
				 approvalsForm.setStartRecord(startRecord);
				 approvalsForm.setEndRecord(endRecord);
				 LinkedList vcList=apprList.getApprovalsList(status,type,request,form);
				 if(vcList.size()>0){
						if(type.equalsIgnoreCase("Pending")){
							//request.setAttribute("displayButton", "displayButton");
							}
						}
				request.setAttribute("vcList", vcList);
				if(vcList.size()==0){
					request.setAttribute("no VC records", "no VC records");
					approvalsForm.setMessage3("No Records Found..");
				}
				request.setAttribute("disableNextButton", "disableNextButton");
				request.setAttribute("previousButton", "previousButton");
				if(vcList.size()<10)
				{
					
					request.setAttribute("previousButton", "previousButton");
					request.setAttribute("disablePreviousButton", "disablePreviousButton");
				}
				request.setAttribute("displayRecordNo", "displayRecordNo");
				
				 
			 }
			if(status.equalsIgnoreCase("Conference"))
			 {
				 ApprovalsList apprList=new ApprovalsList();
				 approvalsForm.setStartRecord(startRecord);
				 approvalsForm.setEndRecord(endRecord);
				 LinkedList confList=apprList.getApprovalsList(status,type,request,form);
				 if(confList.size()>0){
						if(type.equalsIgnoreCase("Pending")){
							//request.setAttribute("displayButton", "displayButton");
							}
						}
						request.setAttribute("confList", confList);
						if(confList.size()==0){
							request.setAttribute("no Conference records", "no Conference records");
							approvalsForm.setMessage3("No Records Found..");
						}
						request.setAttribute("disableNextButton", "disableNextButton");
						request.setAttribute("previousButton", "previousButton");
						if(confList.size()<10)
						{
							
							request.setAttribute("previousButton", "previousButton");
							request.setAttribute("disablePreviousButton", "disablePreviousButton");
						}
						request.setAttribute("displayRecordNo", "displayRecordNo"); 
				
				 
			 }
			 if(status.equalsIgnoreCase("IT Request"))
			 {
				 LinkedList it=new LinkedList();
					String getITRecords="";
					
					if(type.equalsIgnoreCase("Pending")){
						getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
						"emp.EMP_FULLNAME,all_R.Req_Status,CONVERT(varchar(10),it.Req_date,103)+' '+ CONVERT(varchar(5),it.Req_date,108) as Req_date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_HELPDESK as it " +
						"where all_R.Pending_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Pending' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
						"all_R.Req_Type='IT Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";			
						
					}
					
					if(type.equalsIgnoreCase("Approved")){
						getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
						"emp.EMP_FULLNAME,all_R.Req_Status,CONVERT(varchar(10),it.Req_date,103)+' '+ CONVERT(varchar(5),it.Req_date,108) as Req_date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_HELPDESK as it " +
						"where all_R.Last_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Approved' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
						"all_R.Req_Type='IT Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
						
					}
					if(type.equalsIgnoreCase("Rejected")){
						
						getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
						"emp.EMP_FULLNAME,all_R.Req_Status,CONVERT(varchar(10),it.Req_date,103)+' '+ CONVERT(varchar(5),it.Req_date,108) as Req_date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_HELPDESK as it " +
						"where all_R.Last_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Rejected' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
						"all_R.Req_Type='IT Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
					}
					
                       if(type.equalsIgnoreCase("Completed")){
						
						getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
						"emp.EMP_FULLNAME,all_R.Req_Status,CONVERT(varchar(10),it.Req_date,103)+' '+ CONVERT(varchar(5),it.Req_date,108) as Req_date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_HELPDESK as it " +
						"where all_R.Last_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Completed' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
						"all_R.Req_Type='IT Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
					} 
					
					if(type.equalsIgnoreCase("All")){
						
						getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
						"emp.EMP_FULLNAME,all_R.Req_Status,CONVERT(varchar(10),it.Req_date,103)+' '+ CONVERT(varchar(5),it.Req_date,108) as Req_date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_HELPDESK as it " +
						"where (all_R.Last_Approver='"+user.getEmployeeNo()+"' or all_R.Pending_Approver='"+user.getEmployeeNo()+"')  and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
						"all_R.Req_Type='IT Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
						
					}	
					
					ResultSet rsit=ad.selectQuery(getITRecords);
					try {
						while(rsit.next())
						{
							HelpDeskForm help=new HelpDeskForm();
							help.setRequestNumber(rsit.getString("Req_Id"));
							help.setRequestType(rsit.getString("type"));
							approvalsForm.setItType(rsit.getString("type"));
							help.setRequestername(rsit.getString("EMP_FULLNAME"));
							help.setRequestDate(rsit.getString("Req_Date"));
							help.setRequestStatus(rsit.getString("Req_Status"));
							help.setLastApprover(rsit.getString("Last_Approver"));
							help.setPendingApprover(rsit.getString("Pending_Approver"));
							help.setReqPriority(rsit.getString("Req_Priority"));
							help.setItEngStatus(rsit.getString("ITEng_Status"));
							it.add(help);
							
							
						}
						if(it.size()>0){
							if(type.equalsIgnoreCase("Pending")){
								//request.setAttribute("displayButton", "displayButton");
								}
							}
							request.setAttribute("it", it);
							if(it.size()==0){
								request.setAttribute("no it records", "no it records");
								approvalsForm.setMessage3("No Records Found..");
							}
							request.setAttribute("disableNextButton", "disableNextButton");
							request.setAttribute("previousButton", "previousButton");
							if(it.size()<10)
							{
								
								request.setAttribute("previousButton", "previousButton");
								request.setAttribute("disablePreviousButton", "disablePreviousButton");
							}
							request.setAttribute("displayRecordNo", "displayRecordNo");
							
							
					} catch (SQLException e) {
					
						e.printStackTrace();
					}
					
					
			 }
			 
			 
			 if(status.equalsIgnoreCase("IT Sap Request"))
			 {
				 LinkedList it=new LinkedList();
					String getITRecords="";
					
					if(type.equalsIgnoreCase("Pending")){
						getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
						"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_SAP_ISSUES as it " +
						"where all_R.Pending_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Pending' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
						"all_R.Req_Type='IT Sap Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";			
						
					}
					
					if(type.equalsIgnoreCase("Approved")){
						getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
						"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_SAP_ISSUES as it " +
						"where all_R.Last_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Approved' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
						"all_R.Req_Type='IT Sap Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
						
					}
					if(type.equalsIgnoreCase("Rejected")){
						
						getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
						"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_SAP_ISSUES as it " +
						"where all_R.Last_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Rejected' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
						"all_R.Req_Type='IT Sap Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
					}
					
                      if(type.equalsIgnoreCase("Completed")){
						
						getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
						"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_SAP_ISSUES as it " +
						"where all_R.Last_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Completed' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
						"all_R.Req_Type='IT Sap Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
					} 
					
					if(type.equalsIgnoreCase("All")){
						
						getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
						"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_SAP_ISSUES as it " +
						"where (all_R.Last_Approver='"+user.getEmployeeNo()+"' or all_R.Pending_Approver='"+user.getEmployeeNo()+"')  and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
						"all_R.Req_Type='IT Sap Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
						
					}	
					
					ResultSet rsit=ad.selectQuery(getITRecords);
					try {
						while(rsit.next())
						{
							HelpDeskForm help=new HelpDeskForm();
							help.setRequestNumber(rsit.getString("Req_Id"));
							help.setRequestType(rsit.getString("type"));
							approvalsForm.setItType(rsit.getString("type"));
							help.setRequestername(rsit.getString("EMP_FULLNAME"));
							help.setRequestDate(rsit.getString("Req_Date"));
							help.setRequestStatus(rsit.getString("Req_Status"));
							help.setLastApprover(rsit.getString("Last_Approver"));
							help.setPendingApprover(rsit.getString("Pending_Approver"));
							help.setReqPriority(rsit.getString("Req_Priority"));
							help.setItEngStatus(rsit.getString("ITEng_Status"));
							it.add(help);
							
							
						}
						if(it.size()>0){
							if(type.equalsIgnoreCase("Pending")){
								//request.setAttribute("displayButton", "displayButton");
								}
							}
							request.setAttribute("sapit", it);
							if(it.size()==0){
								request.setAttribute("no it records", "no it records");
								approvalsForm.setMessage3("No Records Found..");
							}
							request.setAttribute("disableNextButton", "disableNextButton");
							request.setAttribute("previousButton", "previousButton");
							if(it.size()<10)
							{
								
								request.setAttribute("previousButton", "previousButton");
								request.setAttribute("disablePreviousButton", "disablePreviousButton");
							}
							request.setAttribute("displayRecordNo", "displayRecordNo");
							
							
					} catch (SQLException e) {
					
						e.printStackTrace();
					}
					
					
			 }
			 
			 
			 if(status.equalsIgnoreCase("Permission"))
			 {
				 LinkedList permList=new LinkedList();
					String getPermissionRecords="";
					String getPermissionDetails="select * from Permission_details where user_id='"+user.getEmployeeNo()+"' ";
					
					
					if(type.equalsIgnoreCase("Pending")){
						getPermissionRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS RowNum,all_R.Req_Id," +
					"all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type from  All_Request as all_R," +
				"emp_official_info as emp, Permission_details as perm where all_R.Pending_Approver='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' " +
				"and all_R.Req_Id=perm.request_no and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Permission' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type ) as  sub Where  " +
				"sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";					
						
					}
					
					if(type.equalsIgnoreCase("Approved")){
						
						getPermissionRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS RowNum,all_R.Req_Id," +
					"all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type from  All_Request as all_R," +
				"emp_official_info as emp, Permission_details as perm where  all_R.Last_Approver='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' " +
				"and all_R.Req_Id=perm.request_no and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Permission' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type ) as  sub Where  " +
				"sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
					}
					if(type.equalsIgnoreCase("Rejected")){
						
						getPermissionRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS RowNum,all_R.Req_Id," +
					"all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type from  All_Request as all_R," +
				"emp_official_info as emp, Permission_details as perm where  all_R.Approved_Persons='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' " +
				"and all_R.Req_Id=perm.request_no and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Permission' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type ) as  sub Where  " +
				"sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
					}
					if(type.equalsIgnoreCase("Cancelled")){
						
						getPermissionRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS RowNum,all_R.Req_Id," +
					"all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type from  All_Request as all_R," +
				"emp_official_info as emp, Permission_details as perm where  all_R.Approved_Persons='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' " +
				"and all_R.Req_Id=perm.request_no and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Permission' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type ) as  sub Where  " +
				"sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
					}
					if(type.equalsIgnoreCase("All")){
						
						getPermissionRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS RowNum,all_R.Req_Id," +
					"all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type from  All_Request as all_R," +
				"emp_official_info as emp, Permission_details as perm where  (all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"') " +
				"and all_R.Req_Id=perm.request_no and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Permission' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type ) as  sub Where  " +
				"sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
					}	
					
					ResultSet rsPermission=ad.selectQuery(getPermissionRecords);
					try{
					while(rsPermission.next())
					{
						MyRequestForm permission=new MyRequestForm();
						permission.setRequestNumber(rsPermission.getString("Req_Id"));
			            permission.setStartTime(rsPermission.getString("startTime"));
				          permission.setEndTime(rsPermission.getString("endTime"))		;
				      	permission.setRequestType(rsPermission.getString("type"));
						String requestDate=rsPermission.getString("Req_Date");
						int isthere = (requestDate.indexOf("/"));
						if(isthere <= 0){
							String req[]=requestDate.split(" ");
							requestDate=req[0];
							String a[]=requestDate.split("-");
							requestDate=a[2]+"/"+a[1]+"/"+a[0];
						}
						permission.setCreateDate(requestDate);
						permission.setEmployeeName(rsPermission.getString("EMP_FULLNAME"));
						permission.setApprover(rsPermission.getString("Req_Status"));
						permission.setEmployeeNumber(rsPermission.getString("Requester_Name"));
						String url="";
						
						permission.setUrl(url);
						//leaveMaster.setLastApprover(rsLeaveDetails.getString("Last_approver"));
						//leaveMaster.setPendingApprover(rsLeaveDetails.getString("Pending_approver"));
						permList.add(permission);
							
					}
					request.setAttribute("Permissionlist", permList);
				
					request.setAttribute("disableNextButton", "disableNextButton");
					request.setAttribute("previousButton", "previousButton");
					if(permList.size()<10)
					{
						
						request.setAttribute("previousButton", "previousButton");
						request.setAttribute("disablePreviousButton", "disablePreviousButton");
					}
					request.setAttribute("displayRecordNo", "displayRecordNo");
					
					
						}catch (Exception e) {
							e.printStackTrace();
						}
				 
			 }
			 
			 if(status.equalsIgnoreCase("On Duty")){

					LinkedList ondutyList=new LinkedList();
					String getOndutyRecords="";
					if(type.equalsIgnoreCase("Pending")){
						getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime," +
						"emp.EMP_FULLNAME,all_R.Req_Status,onduty.submit_date as Req_Date,onduty.start_date,onduty.end_date " +
						"from  All_Request as all_R,emp_official_info as emp,OnDuty_details as onduty where all_R.Pending_Approver='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' and all_R.Req_Id=onduty.request_no " +
						"and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='On Duty') as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
					}
					if(type.equalsIgnoreCase("Approved")){
						
						getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime," +
						"emp.EMP_FULLNAME,all_R.Req_Status,onduty.submit_date as Req_Date,onduty.start_date,onduty.end_date " +
					"from  All_Request as all_R,emp_official_info as emp,OnDuty_details as onduty where all_R.Last_Approver='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' and all_R.Req_Id=onduty.request_no " +
						"and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='On Duty') as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
					}
					if(type.equalsIgnoreCase("Rejected")){
						
						getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime," +
						"emp.EMP_FULLNAME,all_R.Req_Status,onduty.submit_date as Req_Date,onduty.start_date,onduty.end_date " +
					"from  All_Request as all_R,emp_official_info as emp,OnDuty_details as onduty where all_R.Approved_Persons='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' and all_R.Req_Id=onduty.request_no " +
						"and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='On Duty') as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
					}
					if(type.equalsIgnoreCase("Cancelled")){
						
						getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime," +
						"emp.EMP_FULLNAME,all_R.Req_Status,onduty.submit_date as Req_Date,onduty.start_date,onduty.end_date " +
						"from  All_Request as all_R,emp_official_info as emp,OnDuty_details as onduty where all_R.Approved_Persons='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' " +
						"  and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='On Duty' and all_R.Req_Id=onduty.request_no) as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
					}
					if(type.equalsIgnoreCase("All")){
						
						getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime," +
						"emp.EMP_FULLNAME,all_R.Req_Status,onduty.submit_date as Req_Date,onduty.start_date,onduty.end_date " +
						"from  All_Request as all_R,emp_official_info as emp,OnDuty_details as onduty where (all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"')" +
						"  and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='On Duty' and all_R.Req_Id=onduty.request_no) as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
					}
					ResultSet rsOnduty=ad.selectQuery(getOndutyRecords);
					try{
					while(rsOnduty.next()){
					OnDutyForm onduty=new OnDutyForm();
					onduty.setRequestNumber(rsOnduty.getInt("Req_Id"));
					onduty.setEmployeeNumber(rsOnduty.getString("Requester_Name"));
				
					onduty.setOnDutyType(rsOnduty.getString("onDuty_Type"));
					onduty.setLocationId(rsOnduty.getString("location"));
					onduty.setEmployeeName(rsOnduty.getString("EMP_FULLNAME"));
					onduty.setSubmitDate(rsOnduty.getString("Req_Date"));
					onduty.setStartDate(EMicroUtils.display(rsOnduty.getDate("start_date")));
					onduty.setLocationId(rsOnduty.getString("location"));
					onduty.setStartTime(rsOnduty.getString("startTime"));
					onduty.setEndDate(EMicroUtils.display(rsOnduty.getDate("end_date")));
					onduty.setEndTime(rsOnduty.getString("endTime"));
					onduty.setApprover(rsOnduty.getString("Req_Status"));
					ondutyList.add(onduty);
					}
					request.setAttribute("ondutyList", ondutyList);
					request.setAttribute("disableNextButton", "disableNextButton");
					request.setAttribute("previousButton", "previousButton");
					if(ondutyList.size()<10)
					{
						
						request.setAttribute("previousButton", "previousButton");
					}
					request.setAttribute("displayRecordNo", "displayRecordNo");
					
					
					
					}catch (Exception e) {
						e.printStackTrace();
					}
					
				
			 }
			 
			 if(status.equalsIgnoreCase("Customer Master"))
				{
				 

				 String getcustMasterList="";
				 ResultSet rsVendor;
				 ArrayList materialList=new ArrayList();
				 try{
					 if(type.equalsIgnoreCase("Pending")){
						 
						 getcustMasterList=" Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id," +
			"all_r.Req_Date,all_r.type,s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status," +
			"acc.ACCOUNT_GROUP_NAME	from  All_Request as all_r,emp_official_info as emp,CUSTOMER_MASTER_M as s,ACCOUNT_GROUP_M as acc  " +
			"where all_r.Req_Type='Customer Master'  and all_r.Pending_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and  " +
			"s.REQUEST_NO=all_r.Req_Id  and all_r.Req_Status='Pending' and acc.MATERIAL_TYPE_ID=s.ACCOUNT_GROUP_ID )as   sub Where  " +
			"sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc ";
				 }
					 if(type.equalsIgnoreCase("Approved")||type.equalsIgnoreCase("Completed")){
						 
						 getcustMasterList=" Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id," +
			"all_r.Req_Date,all_r.type,s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status," +
			"acc.ACCOUNT_GROUP_NAME	from  All_Request as all_r,emp_official_info as emp,CUSTOMER_MASTER_M as s,ACCOUNT_GROUP_M as acc  " +
			"where all_r.Req_Type='Customer Master'  and all_r.Last_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and  " +
			"s.REQUEST_NO=all_r.Req_Id  and all_r.Req_Status='Approved' and acc.MATERIAL_TYPE_ID=s.ACCOUNT_GROUP_ID )as   sub Where  " +
			"sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc ";
				 }	
	if(type.equalsIgnoreCase("Rejected")){
						 
						 getcustMasterList=" Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id," +
			"all_r.Req_Date,all_r.type,s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status," +
			"acc.ACCOUNT_GROUP_NAME	from  All_Request as all_r,emp_official_info as emp,CUSTOMER_MASTER_M as s,ACCOUNT_GROUP_M as acc  " +
			"where all_r.Req_Type='Customer Master'  and all_r.Approved_Persons='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and  " +
			"s.REQUEST_NO=all_r.Req_Id  and all_r.Req_Status='Rejected' and acc.MATERIAL_TYPE_ID=s.ACCOUNT_GROUP_ID )as   sub Where  " +
			"sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc ";
				 }	
		 if(type.equalsIgnoreCase("All")){
			 
			 getcustMasterList=" Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id," +
		"all_r.Req_Date,all_r.type,s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status," +
		"acc.ACCOUNT_GROUP_NAME	from  All_Request as all_r,emp_official_info as emp,CUSTOMER_MASTER_M as s,ACCOUNT_GROUP_M as acc  " +
		"where all_r.Req_Type='Customer Master'  and (all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"') and emp.PERNR=all_r.Requester_Name and  " +
		"s.REQUEST_NO=all_r.Req_Id   and acc.MATERIAL_TYPE_ID=s.ACCOUNT_GROUP_ID )as   sub Where  " +
		"sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc ";
		}
				
					 
					 rsVendor=ad.selectQuery(getcustMasterList);
						while(rsVendor.next()){
						MyRequestForm customer=new MyRequestForm();
						customer.setRequestNumber(rsVendor.getString("Req_Id"));
						
						customer.setRequestType(rsVendor.getString("EMP_FULLNAME"));
						customer.setName(rsVendor.getString("name"));
						customer.setLocationName(rsVendor.getString("CITY"));
						customer.setVendorType(rsVendor.getString("ACCOUNT_GROUP_NAME"));
						String requestDate=rsVendor.getString("Req_Date");
						
					
						customer.setCreateDate(requestDate);
						customer.setApprovalStatus(rsVendor.getString("Req_Status"));
						
						customer.setLastApprover(rsVendor.getString("last_approver"));
						customer.setPendingApprover(rsVendor.getString("pending_approver"));

						materialList.add(customer);
							
						}	 
						request.setAttribute("myRequest", materialList);	
						if(materialList.size()==0){
						
							approvalsForm.setMessage3("No Records Found..");
						}
						request.setAttribute("disableNextButton", "disableNextButton");
						request.setAttribute("previousButton", "previousButton");
						if(materialList.size()<10)
						{
							
							request.setAttribute("previousButton", "previousButton");
							request.setAttribute("disablePreviousButton", "disablePreviousButton");
						}
						request.setAttribute("displayRecordNo", "displayRecordNo");
				 }
				 catch (Exception e) {
					e.printStackTrace();
				}
				
				 
				 
				 
				 
				}
			  
			  if(status.equalsIgnoreCase("Vendor Master"))
				{
				 String getVendorMasterList="";
				 ResultSet rsVendor;
				 ArrayList materialList=new ArrayList();
				 try{
					 if(type.equalsIgnoreCase("Pending")){
				getVendorMasterList=" Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,all_r.type," +
						"s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,acc.ACCOUNT_GROUP_NAME	" +
						"from  All_Request as all_r,emp_official_info as emp,vendor_master_m as s,ACCOUNT_GROUP_M as acc  where all_r.Req_Type='Vendor Master'  " +
						"and all_r.Pending_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id  " +
						"and all_r.Req_Status='Pending' and acc.ACCOUNT_GROUP_ID=s.ACCOUNT_GROUP_ID)as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
				 }
					 if(type.equalsIgnoreCase("Approved")||type.equalsIgnoreCase("Completed")){
							getVendorMasterList=" Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,all_r.type," +
									"s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,acc.ACCOUNT_GROUP_NAME	" +
									"from  All_Request as all_r,emp_official_info as emp,vendor_master_m as s,ACCOUNT_GROUP_M as acc  where all_r.Req_Type='Vendor Master'  " +
									"and  all_r.Last_Approver='"+user.getEmployeeNo()+"' and  all_r.Req_Status='Approved' and emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id  " +
									" and acc.ACCOUNT_GROUP_ID=s.ACCOUNT_GROUP_ID)as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
							 }
					 if(type.equalsIgnoreCase("Rejected")){
							getVendorMasterList=" Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,all_r.type," +
									"s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,acc.ACCOUNT_GROUP_NAME	" +
									"from  All_Request as all_r,emp_official_info as emp,vendor_master_m as s,ACCOUNT_GROUP_M as acc  where all_r.Req_Type='Vendor Master'  " +
									"and all_r.Approved_Persons='"+user.getEmployeeNo()+"' and  all_r.Req_Status='Rejected' and emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id  " +
									" and acc.ACCOUNT_GROUP_ID=s.ACCOUNT_GROUP_ID)as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
							 }
					 if(type.equalsIgnoreCase("All")){
							getVendorMasterList=" Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,all_r.type," +
									"s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,acc.ACCOUNT_GROUP_NAME	" +
									"from  All_Request as all_r,emp_official_info as emp,vendor_master_m as s,ACCOUNT_GROUP_M as acc  where all_r.Req_Type='Vendor Master'  " +
									"and (all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"') and emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id  " +
									" and acc.ACCOUNT_GROUP_ID=s.ACCOUNT_GROUP_ID)as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
							 }
				
					 
					 rsVendor=ad.selectQuery(getVendorMasterList);
						while(rsVendor.next()){
						MyRequestForm vendor=new MyRequestForm();
						vendor.setRequestNumber(rsVendor.getString("Req_Id"));
						
						vendor.setRequestType(rsVendor.getString("EMP_FULLNAME"));
						vendor.setName(rsVendor.getString("name"));
						vendor.setLocationName(rsVendor.getString("CITY"));
						vendor.setVendorType(rsVendor.getString("ACCOUNT_GROUP_NAME"));
						vendor.setCreateDate(EMicroUtils.display(rsVendor.getDate("Req_Date")));
						vendor.setApprovalStatus(rsVendor.getString("Req_Status"));
						
						vendor.setLastApprover(rsVendor.getString("last_approver"));
						vendor.setPendingApprover(rsVendor.getString("pending_approver"));

						materialList.add(vendor);
							
						}	 
						request.setAttribute("myRequestList", materialList);	
						request.setAttribute("vendor  list", "vendor  list");
						 request.setAttribute("disableNextButton", "disableNextButton");
							request.setAttribute("previousButton", "previousButton");
						if(materialList.size()==0){
							request.setAttribute("no Material Master records", "no Material Master records");
							approvalsForm.setMessage3("No Records Found..");
						}
						if(materialList.size()<10)
						{
							
							request.setAttribute("previousButton", "");
							request.setAttribute("disablePreviousButton", "disablePreviousButton");
						}
						
					 request.setAttribute("displayRecordNo", "displayRecordNo");
						
						
				 }catch (Exception e) {
					e.printStackTrace();
				}
				}
			  
			  if(status.equalsIgnoreCase("Code Extention"))
				{
				 String getCodeExtention="";
				 ResultSet rsCodeExtention;
				 ArrayList materialList=new ArrayList();
				
				try{
				
				if(type.equalsIgnoreCase("Pending")){
					
					getCodeExtention="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE," +
							"all_r.type,s.TYPE as matType,s.REQUEST_NO,s.CREATED_DATE,s.APPROVE_TYPE,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,s.MATERIAL_SHORT_NAME,MATERIAL_CODE_1,MATERIAL_CODE_2 from Location as loc,All_Request as all_r," +
							"emp_official_info as emp,code_extenstion_request as s where all_r.Req_Type='Code Extention' and all_r.Pending_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name " +
							"and s.REQUEST_NO=all_r.Req_Id and (s.PLANT_1=loc.LOCATION_CODE or s.PLANT_2=loc.LOCATION_CODE)  and all_r.Req_Status='"+type+"')as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
								}
								if(type.equalsIgnoreCase("Approved")||type.equalsIgnoreCase("Completed")){
									getCodeExtention="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE," +
									"all_r.type,s.TYPE as matType,s.REQUEST_NO,s.CREATED_DATE,s.APPROVE_TYPE,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,s.MATERIAL_SHORT_NAME,MATERIAL_CODE_1,MATERIAL_CODE_2 from Location as loc,All_Request as all_r," +
									"emp_official_info as emp,code_extenstion_request as s where all_r.Req_Type='Code Extention' and all_r.Last_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name " +
									"and s.REQUEST_NO=all_r.Req_Id and (s.PLANT_1=loc.LOCATION_CODE or s.PLANT_2=loc.LOCATION_CODE)  and all_r.Req_Status='"+type+"')as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
										}
								if(type.equalsIgnoreCase("Rejected")){
									getCodeExtention="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE," +
									"all_r.type,s.TYPE as matType,s.REQUEST_NO,s.CREATED_DATE,s.APPROVE_TYPE,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,s.MATERIAL_SHORT_NAME,MATERIAL_CODE_1,MATERIAL_CODE_2 from Location as loc,All_Request as all_r," +
									"emp_official_info as emp,code_extenstion_request as s where all_r.Req_Type='Code Extention' and all_r.Approved_Persons='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name " +
									"and s.REQUEST_NO=all_r.Req_Id and (s.PLANT_1=loc.LOCATION_CODE or s.PLANT_2=loc.LOCATION_CODE)  and all_r.Req_Status='"+type+"')as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
										}
								if(type.equalsIgnoreCase("All")){
									getCodeExtention="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE," +
									"all_r.type,s.TYPE as matType,s.REQUEST_NO,s.CREATED_DATE,s.APPROVE_TYPE,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,s.MATERIAL_SHORT_NAME,MATERIAL_CODE_1,MATERIAL_CODE_2 from Location as loc,All_Request as all_r," +
									"emp_official_info as emp,code_extenstion_request as s where all_r.Req_Type='Code Extention' and (all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"') and emp.PERNR=all_r.Requester_Name " +
									"and s.REQUEST_NO=all_r.Req_Id and (s.PLANT_1=loc.LOCATION_CODE or s.PLANT_2=loc.LOCATION_CODE)  )as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
										}
						
						 rsCodeExtention=ad.selectQuery(getCodeExtention);
						while(rsCodeExtention.next()){
						MyRequestForm codeExtentionRec=new MyRequestForm();
						codeExtentionRec.setRequestNumber(rsCodeExtention.getString("REQUEST_NO"));
						codeExtentionRec.setLocationName(rsCodeExtention.getString("location_code"));
						codeExtentionRec.setRequestType("Code Extention");
						codeExtentionRec.setPlantType(rsCodeExtention.getString("matType"));
						String sapNo="";
						if(rsCodeExtention.getString("matType").equals("Plant"))
							sapNo=rsCodeExtention.getString("MATERIAL_CODE_1");
						else
							sapNo=rsCodeExtention.getString("MATERIAL_CODE_2");
						codeExtentionRec.setSapNo(sapNo);
						codeExtentionRec.setDescription(rsCodeExtention.getString("MATERIAL_SHORT_NAME"));
						String requestDate=rsCodeExtention.getString("CREATED_DATE");
						String req[]=requestDate.split(" ");
						requestDate=req[0];
						String a[]=requestDate.split("-");
						requestDate=a[2]+"/"+a[1]+"/"+a[0];
						codeExtentionRec.setCreateDate(requestDate);
						codeExtentionRec.setApprovalStatus(rsCodeExtention.getString("Req_Status"));
						String url="materialCodeExtenstion.do?method=editCodeExtension";
						codeExtentionRec.setUrl(url);
						codeExtentionRec.setLastApprover(rsCodeExtention.getString("last_approver"));
						codeExtentionRec.setPendingApprover(rsCodeExtention.getString("pending_approver"));

				materialList.add(codeExtentionRec);
					
				}
				request.setAttribute("Code Extention list", materialList);	
				if(materialList.size()==0){
					request.setAttribute("no Material Master records", "no Material Master records");
					approvalsForm.setMessage3("No Records Found..");
				}
				
			 request.setAttribute("displayRecordNo", "displayRecordNo");
				
				
				
				
				
				
				if(materialList.size()==0){
					request.setAttribute("no Service Master records", "no Service Master records");
					approvalsForm.setMessage3("No Records Found..");
				}
				}catch (Exception e) {
					e.printStackTrace();
				}
				}
			  
			 
			 if(status.equalsIgnoreCase("Service Master")){


				 String getMaterialRecords="";
					if(type.equalsIgnoreCase("Pending")){
				getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date," +
				"loc.LOCATION_CODE,all_r.type,s.service_description,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status	from Location as loc," +
				" All_Request as all_r,emp_official_info as emp,SERVICE_MASTER as s where all_r.Req_Type='Service Master' and all_r.Pending_Approver='"+user.getEmployeeNo()+"' and " +
				"emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id and s.plant_code=loc.LOCID and all_r.Req_Status='"+type+"')as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
					}
					if(type.equalsIgnoreCase("Approved")||type.equalsIgnoreCase("Completed")){
						getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date," +
						"loc.LOCATION_CODE,all_r.type,s.service_description,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status	from Location as loc," +
						" All_Request as all_r,emp_official_info as emp,SERVICE_MASTER as s where all_r.Req_Type='Service Master' and all_r.Last_Approver='"+user.getEmployeeNo()+"' and " +
						"emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id and s.plant_code=loc.LOCID and all_r.Req_Status='"+type+"')as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
					
					}
					if(type.equalsIgnoreCase("Rejected")){
						getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date," +
						"loc.LOCATION_CODE,all_r.type,s.service_description,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status	from Location as loc," +
						" All_Request as all_r,emp_official_info as emp,SERVICE_MASTER as s where all_r.Req_Type='Service Master' and all_r.Approved_Persons='"+user.getEmployeeNo()+"' and " +
						"emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id and s.plant_code=loc.LOCID and all_r.Req_Status='"+type+"')as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
					
					}
					if(type.equalsIgnoreCase("All")){
						getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS RowNum,all_r.Req_Id,all_r.Req_Date," +
						"loc.LOCATION_CODE,all_r.type,s.service_description,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status	" +
						"from Location as  loc, All_Request as all_r,emp_official_info as emp,SERVICE_MASTER as s where all_r.Req_Type='Service Master' and " +
						"(all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"') and emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id and  " +
						"s.plant_code=loc.LOCID )as  sub Where  sub.RowNum   between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
					
					}
					
					ResultSet rsMat=ad.selectQuery(getMaterialRecords);	 
					try{
						LinkedList materialList=new LinkedList();
						while(rsMat.next()){
						MaterialCodeRequestForm masterForm=new MaterialCodeRequestForm();
						masterForm.setRequestNumber(rsMat.getString("Req_Id"));
						masterForm.setRequestDate(rsMat.getString("Req_Date"));
						masterForm.setLocationCode(rsMat.getString("LOCATION_CODE"));
						masterForm.setMaterailType(rsMat.getString("type"));
						masterForm.setEmployeeName(rsMat.getString("EMP_FULLNAME"));
						masterForm.setServiceDescription(rsMat.getString("service_description"));
						masterForm.setLastApprover(rsMat.getString("last_approver"));
						masterForm.setPendingApprover(rsMat.getString("pending_approver"));
						masterForm.setApproveStatus(rsMat.getString("Req_Status"));
						
						materialList.add(masterForm);
						
						}
						request.setAttribute("serviceMaster", materialList);
						request.setAttribute("Service Master List", "Service Master List");
						if(materialList.size()==0){
							request.setAttribute("no Service Master records", "no Service Master records");
							approvalsForm.setMessage3("No Records Found..");
						}
						
					}catch (Exception e) {
						e.printStackTrace();
					}
			 
		  
			  }
			 
			  if(status.equalsIgnoreCase("Material Master")){
					
					String getMaterialRecords="";
					if(type.equalsIgnoreCase("Pending")){
						getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE,all_r.type,mat.MATERIAL_SHORT_NAME,emp.EMP_FULLNAME,mat.last_approver,mat.pending_approver," +
						"all_r.Req_Status,mat.MATERIAL_GROUP_ID from Location as loc, All_Request as all_r,emp_official_info as emp,material_code_request as mat " +
						"where all_r.Req_Type='Material Master' and all_r.Pending_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and mat.REQUEST_NO=all_r.Req_Id " +
						"and mat.LOCATION_ID=loc.LOCID and all_r.Req_Status='"+type+"' )as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";	
							}
						if(type.equalsIgnoreCase("Approved")){
							getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE,all_r.type,mat.MATERIAL_SHORT_NAME,emp.EMP_FULLNAME,mat.last_approver,mat.pending_approver," +
							"all_r.Req_Status,mat.MATERIAL_GROUP_ID from Location as loc, All_Request as all_r,emp_official_info as emp,material_code_request as mat  " +
							"where all_r.Req_Type='Material Master' and all_r.Last_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and mat.REQUEST_NO=all_r.Req_Id " +
							"and mat.LOCATION_ID=loc.LOCID and all_r.Req_Status='"+type+"' )as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";	
								}
						
						if(type.equalsIgnoreCase("Completed")){
							getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE,all_r.type,mat.MATERIAL_SHORT_NAME,emp.EMP_FULLNAME,mat.last_approver,mat.pending_approver," +
							"all_r.Req_Status,mat.MATERIAL_GROUP_ID from Location as loc, All_Request as all_r,emp_official_info as emp,material_code_request as mat " +
							"where all_r.Req_Type='Material Master' and all_r.Last_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and mat.REQUEST_NO=all_r.Req_Id " +
							"and mat.LOCATION_ID=loc.LOCID and all_r.Req_Status='"+type+"')as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";	
								}
						
						if(type.equalsIgnoreCase("Rejected")){
							getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE,all_r.type,mat.MATERIAL_SHORT_NAME,emp.EMP_FULLNAME,mat.last_approver,mat.pending_approver," +
							"all_r.Req_Status,mat.MATERIAL_GROUP_ID from Location as loc, All_Request as all_r,emp_official_info as emp,material_code_request as mat " +
							"where all_r.Req_Type='Material Master' and all_r.Approved_Persons='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and mat.REQUEST_NO=all_r.Req_Id " +
							"and mat.LOCATION_ID=loc.LOCID and all_r.Req_Status='"+type+"' )as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";	
							
									}
						if(type.equalsIgnoreCase("All")){
							getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE,all_r.type,mat.MATERIAL_SHORT_NAME,emp.EMP_FULLNAME,mat.last_approver,mat.pending_approver," +
							"all_r.Req_Status,mat.MATERIAL_GROUP_ID from Location as loc, All_Request as all_r,emp_official_info as emp,material_code_request as mat " +
							"where all_r.Req_Type='Material Master' and (all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"') and emp.PERNR=all_r.Requester_Name and mat.REQUEST_NO=all_r.Req_Id " +
							"and mat.LOCATION_ID=loc.LOCID  )as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";	
							
								}
		ResultSet rsMat=ad.selectQuery(getMaterialRecords);	 
		try{
			LinkedList materialList=new LinkedList();
			while(rsMat.next()){
			MaterialCodeRequestForm masterForm=new MaterialCodeRequestForm();
			masterForm.setRequestNumber(rsMat.getString("Req_Id"));
			masterForm.setRequestDate(rsMat.getString("Req_Date"));
			masterForm.setLocationCode(rsMat.getString("LOCATION_CODE"));
			masterForm.setMaterialDesc(rsMat.getString("type"));
			masterForm.setMaterailType(rsMat.getString("type"));
			masterForm.setEmployeeName(rsMat.getString("EMP_FULLNAME"));
			masterForm.setMaterialName(rsMat.getString("MATERIAL_SHORT_NAME"));
			masterForm.setLastApprover(rsMat.getString("last_approver"));
			masterForm.setPendingApprover(rsMat.getString("pending_approver"));
			masterForm.setApproveStatus(rsMat.getString("Req_Status"));
			masterForm.setMaterialGroup(rsMat.getString("MATERIAL_GROUP_ID"));
			materialList.add(masterForm);
			
			}
			request.setAttribute("materialList", materialList);
			request.setAttribute("Material List", "Material List");
			if(materialList.size()==0){
				request.setAttribute("no Material Master records", "no Material Master records");
				approvalsForm.setMessage3("No Records Found..");
			}
			
			 request.setAttribute("disableNextButton", "disableNextButton");
				request.setAttribute("previousButton", "previousButton");
				if(materialList.size()<10)
				{
					
					request.setAttribute("previousButton", "");
					request.setAttribute("disablePreviousButton", "disablePreviousButton");
				}
				request.setAttribute("displayRecordNo", "displayRecordNo");
			
		}catch (Exception e) {
			e.printStackTrace();
		}
				
		if(type.equalsIgnoreCase("Pending")){
			request.setAttribute("displayButton", "displayButton");
			}
			 
			  
			  }
			  if(status.equalsIgnoreCase("Leave"))
				{
				  String getLeaveRecords="";
					if(type.equalsIgnoreCase("Pending")){
				getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,leave.leave_type," +
					"emp.EMP_FULLNAME,all_R.Req_Status,leave.submit_date as Req_Date,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days from  All_Request as all_R," +
					"emp_official_info as emp,leave_details as leave where all_R.Pending_Approver='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' and all_R.Req_Type='Leave' and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id) " +
					"as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by RowNum desc";
					}
					if(type.equalsIgnoreCase("Approved")){
						getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,leave.leave_type," +
						"emp.EMP_FULLNAME,all_R.Req_Status,leave.submit_date as Req_Date,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days from  All_Request as all_R," +
						"emp_official_info as emp,leave_details as leave where all_R.Last_Approver='"+user.getEmployeeNo()+"' and Req_Status='"+type+"'  and all_R.Req_Type='Leave' and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id) " +
						"as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by RowNum desc";
					}
					if(type.equalsIgnoreCase("Rejected")){
						getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,leave.leave_type," +
						"emp.EMP_FULLNAME,all_R.Req_Status,leave.submit_date as Req_Date,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days from  All_Request as all_R," +
						"emp_official_info as emp,leave_details as leave where all_R.Last_Approver='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' and all_R.Req_Type='Leave' and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id) " +
						"as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by RowNum desc";
					}
					if(type.equalsIgnoreCase("Cancelled")){
						getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,leave.leave_type," +
						"emp.EMP_FULLNAME,all_R.Req_Status,leave.submit_date as Req_Date,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days from  All_Request as all_R," +
						"emp_official_info as emp,leave_details as leave where all_R.Last_Approver='"+user.getEmployeeNo()+"' and (Req_Status='"+type+"' OR Actual_Approver_status='"+type+"') and all_R.Req_Type='Leave' and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id) " +
						"as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by RowNum desc";
					}
					if(type.equalsIgnoreCase("All")){
						getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,leave.leave_type," +
						"emp.EMP_FULLNAME,all_R.Req_Status,leave.submit_date as Req_Date,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days from  All_Request as all_R," +
						"emp_official_info as emp,leave_details as leave where (all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"') and all_R.Req_Type='Leave' and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id) " +
						"as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by RowNum desc";
					}
				 ResultSet rsLeave=ad.selectQuery(getLeaveRecords);

				 while(rsLeave.next())
					{
						LeaveForm leave=new LeaveForm();
						leave.setRequestNumber(rsLeave.getInt("Req_Id"));
						
					String	leaveType=rsLeave.getString("leave_type");
						if(leaveType.equalsIgnoreCase("1")){
							leaveType="Casual";
						}
						if(leaveType.equalsIgnoreCase("2")){
							leaveType="Sick";
						}
						if(leaveType.equalsIgnoreCase("3")){
							leaveType="privilege";
						}
						if(leaveType.equalsIgnoreCase("4")){
							leaveType="Loss Of Pay";
						}
						if(leaveType.equalsIgnoreCase("5")){
							leaveType="Maternity";
						}
						if(leaveType.equalsIgnoreCase("6")){
							leaveType="Comp-Off";
						}
						leave.setLeaveType(leaveType);
						leave.setEmployeeName(rsLeave.getString("EMP_FULLNAME"));
						leave.setSubmitDate(rsLeave.getString("Req_Date"));
						leave.setStartDate(EMicroUtils.display(rsLeave.getDate("start_date")));
						String stDur=rsLeave.getString("start_duration");
						
						if(stDur.equalsIgnoreCase("FD")){
							stDur="Full Day";
						}
						if(stDur.equalsIgnoreCase("FH")){
							stDur="First Half";
						}
						if(stDur.equalsIgnoreCase("SH")){
							stDur="Second Half";
						}
						leave.setStartDurationType(stDur);
						
						leave.setEndDate(EMicroUtils.display(rsLeave.getDate("end_date")));
						
						String endDur=rsLeave.getString("end_duration");
						
						if(endDur.equalsIgnoreCase("FD")){
							endDur="Full Day";
						}
						if(endDur.equalsIgnoreCase("FH")){
							endDur="First Half";
						}
						if(endDur.equalsIgnoreCase("SH")){
							endDur="Second Half";
						}
						leave.setEndDurationType(endDur);
						leave.setNoOfDays(rsLeave.getString("no_of_days"));
						if(type.equalsIgnoreCase("Cancelled"))
							leave.setApproveStatus("Cancelled");
							else
							leave.setApproveStatus(rsLeave.getString("Req_Status"));	
						
						//disable cancle button
						int year = Calendar.getInstance().get(Calendar.YEAR);
						int mon=Calendar.getInstance().get(Calendar.MONTH);
						int day=Calendar.getInstance().get(Calendar.DAY_OF_MONTH);
						mon=mon+1;
						String month="";
						if(mon<10)
						{
							month="0"+Integer.toString(mon);
						}
						else
						{
							month=Integer.toString(mon);
						}
				
				   		if(day>=21)
				   		{
				   			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
				        	Date date1 = rsLeave.getDate("start_date");
				        	Date date2 = sdf.parse(""+year+"-"+month+"-21");
				 
				        	
				   	
				   			
						int value=date1.compareTo(date2);
						if(value<1)
						{
							leave.setApptype("DisableCancel");
						}
				   


					}
						
						
						leaveList.add(leave);
						}
						
						request.setAttribute("leaveList", leaveList);
						 request.setAttribute("disableNextButton", "disableNextButton");
							request.setAttribute("previousButton", "previousButton");
							if(leaveList.size()<10)
							{
								
								request.setAttribute("previousButton", "");
								request.setAttribute("disablePreviousButton", "disablePreviousButton");
							}
							request.setAttribute("displayRecordNo", "displayRecordNo");
				}
			
						
						}catch (Exception e) {
				e.printStackTrace();
			}
						
			return mapping.findForward("approvePage");
			}
	
	public ActionForward previousRecord(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) { 
		
		ApprovalsForm approvalsForm=(ApprovalsForm)form;
		NewsandMediaDao ad=new NewsandMediaDao();
		LinkedList leaveList=new LinkedList();
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		int userID=user.getId();
		String type=approvalsForm.getSelectedFilter();
		String status=approvalsForm.getReqRequstType();
		if(type.equalsIgnoreCase("Pending")){
			if(!status.equalsIgnoreCase("IT Request"))
			request.setAttribute("displayButton", "displayButton");
			}
	try{
		
		int totalRecords=approvalsForm.getTotalRecords();//21
		int endRecord=approvalsForm.getStartRecord()-1;//20
		int startRecord=approvalsForm.getStartRecord()-10;//11
		
		if(startRecord==1)
		{
			request.setAttribute("disablePreviousButton", "disablePreviousButton");
			endRecord=10;
		}
		
		
		approvalsForm.setTotalRecords(totalRecords);
		approvalsForm.setStartRecord(1);
		approvalsForm.setEndRecord(10);
		 if (status.equalsIgnoreCase("User Request")) {
				LinkedList Usrreq = new LinkedList();
				String getITRecords = "";

				if (type.equalsIgnoreCase("Pending")) {
					getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.subject,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type"
							+ " from  All_Request as all_R,emp_official_info as  emp, HR_QUERIES as it where all_R.Pending_Approver='"
							+ user.getEmployeeNo()
							+ "' and all_R.Req_Status='Pending' and all_R.Req_Id=it.id and  all_R.Requester_Name=emp.PERNR "
							+ "and all_R.Req_Type='"+status+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.subject,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";

				}

				if (type.equalsIgnoreCase("Approved")) {
					getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.subject,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type"
							+ " from  All_Request as all_R,emp_official_info as  emp, HR_QUERIES as it where all_R.Last_Approver='"
							+ user.getEmployeeNo()
							+ "' and all_R.Req_Status='Approved' and all_R.Req_Id=it.id and  all_R.Requester_Name=emp.PERNR "
							+ "and all_R.Req_Type='"+status+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.subject,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";

				}
				if (type.equalsIgnoreCase("Rejected")) {
					getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.subject,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type"
							+ " from  All_Request as all_R,emp_official_info as  emp, HR_QUERIES as it where all_R.Last_Approver='"
							+ user.getEmployeeNo()
							+ "' and all_R.Req_Status='Rejected' and all_R.Req_Id=it.id and  all_R.Requester_Name=emp.PERNR "
							+ "and all_R.Req_Type='"+status+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.subject,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
				}

				if (type.equalsIgnoreCase("All")) {

					getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.subject,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type"
							+ " from  All_Request as all_R,emp_official_info as  emp, HR_QUERIES as it where (all_R.Last_Approver='"
							+ user.getEmployeeNo()
							+ "' or all_R.Pending_Approver='"
							+ user.getEmployeeNo()
							+ "')  and all_R.Req_Id=it.id and  all_R.Requester_Name=emp.PERNR "
							+ "and all_R.Req_Type='"+status+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.subject,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";

				}
				ResultSet rsit = ad.selectQuery(getITRecords);
				try {
					while (rsit.next()) {
						LeaveForm leave = new LeaveForm();
						leave.setRequestNumber(rsit.getInt("Req_Id"));
						leave.setEmployeeName(rsit.getString("EMP_FULLNAME"));
						leave.setSubmitDate(EMicroUtils.display(rsit
								.getDate("Req_Date")));
						leave.setStatus(rsit.getString("Req_Status"));
						
						leave.setReason(rsit.getString("subject"));
						leave.setLapprover(rsit.getString("Last_approver"));
						leave.setPapprover(rsit.getString("Pending_approver"));
						Usrreq.add(leave);

					}
					if (Usrreq.size() > 0) {
						if (type.equalsIgnoreCase("Pending")) {
							// request.setAttribute("displayButton",
							// "displayButton");
						}
					}
					request.setAttribute("Usrreq", Usrreq);
					if(Usrreq.size()==0){
						request.setAttribute("no records", "no  records");
						approvalsForm.setMessage3("No Records Found..");
					}
					
				if (Usrreq.size() != 0) {
					approvalsForm.setTotalRecords(totalRecords);
					approvalsForm.setStartRecord(startRecord);
					approvalsForm.setEndRecord(endRecord);
					request.setAttribute("nextButton", "nextButton");
					request.setAttribute("previousButton",
							"previousButton");
				} else {
					int start = startRecord;
					int end = startRecord;

					approvalsForm.setTotalRecords(totalRecords);
					approvalsForm.setStartRecord(start);
					approvalsForm.setEndRecord(end);

				}
				if (Usrreq.size() < 10) {
					approvalsForm.setTotalRecords(totalRecords);
					approvalsForm.setStartRecord(startRecord);
					approvalsForm.setEndRecord(startRecord
							+ Usrreq.size() - 1);
					request.setAttribute("nextButton", "");
					request.setAttribute("disableNextButton",
							"disableNextButton");
					request.setAttribute("previousButton",
							"previousButton");

				}

				if (endRecord == totalRecords) {
					request.setAttribute("nextButton", "");
					request.setAttribute("disableNextButton",
							"disableNextButton");
				}
				request.setAttribute("displayRecordNo",
						"displayRecordNo");
				} catch (SQLException e) {

					e.printStackTrace();
				}

			}
		
		 if (status.equalsIgnoreCase("OverTime")) {
				LinkedList OT = new LinkedList();
				String getITRecords = "";

				if (type.equalsIgnoreCase("Pending")) {
					getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
							+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, OVER_TIME_DETAILS as it where all_R.Pending_Approver='"
							+ user.getEmployeeNo()
							+ "' and all_R.Req_Status='Pending' and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
							+ "and all_R.Req_Type='"+status+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";

				}

				if (type.equalsIgnoreCase("Approved")) {
					getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
							+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, OVER_TIME_DETAILS as it where all_R.Last_Approver='"
							+ user.getEmployeeNo()
							+ "' and all_R.Req_Status='Approved' and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
							+ "and all_R.Req_Type='"+status+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";

				}
				if (type.equalsIgnoreCase("Rejected")) {
					getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
							+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, OVER_TIME_DETAILS as it where all_R.Last_Approver='"
							+ user.getEmployeeNo()
							+ "' and all_R.Req_Status='Rejected' and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
							+ "and all_R.Req_Type='"+status+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
				}

				if (type.equalsIgnoreCase("All")) {

					getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
							+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, OVER_TIME_DETAILS as it where (all_R.Last_Approver='"
							+ user.getEmployeeNo()
							+ "' or all_R.Pending_Approver='"
							+ user.getEmployeeNo()
							+ "')  and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
							+ "and all_R.Req_Type='"+status+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";

				}
				ResultSet rsit = ad.selectQuery(getITRecords);
				try {
					while (rsit.next()) {
						LeaveForm leave = new LeaveForm();
						leave.setRequestNumber(rsit.getInt("Req_Id"));
						leave.setEmployeeName(rsit.getString("EMP_FULLNAME"));
						leave.setSubmitDate(EMicroUtils.display(rsit
								.getDate("Req_Date")));
						leave.setStatus(rsit.getString("Req_Status"));
						leave.setStartDate(EMicroUtils.display(rsit
								.getDate("FromDate")));
						leave.setEndDate(EMicroUtils.display(rsit
								.getDate("ToDate")));
						leave.setPapprover(rsit.getString("Pending_approver"));
						
						leave.setLapprover(rsit.getString("Last_approver"));
						OT.add(leave);

					}
					if (OT.size() > 0) {
						if (type.equalsIgnoreCase("Pending")) {
							// request.setAttribute("displayButton",
							// "displayButton");
						}
					}
					request.setAttribute("OT", OT);
					if (OT.size() == 0) {
						request.setAttribute("no OT records",
								"no OT records");
						approvalsForm.setMessage3("No Records Found..");
					}
					
					request.setAttribute("displayRecordNo", "displayRecordNo");

					approvalsForm.setTotalRecords(totalRecords);
					approvalsForm.setStartRecord(startRecord);
					approvalsForm.setEndRecord(endRecord);
					request.setAttribute("nextButton", "nextButton");
					if (startRecord != 1)
						request.setAttribute("previousButton", "previousButton");
					request.setAttribute("displayRecordNo", "displayRecordNo");
					if (OT.size() < 10) {
						approvalsForm.setStartRecord(1);
						request.setAttribute("previousButton", "");
						request.setAttribute("disablePreviousButton",
								"disablePreviousButton");
					}
				} catch (SQLException e) {

					e.printStackTrace();
				}

			}
		
		
		if (status.equalsIgnoreCase("Comp-Off/OT")) {
			LinkedList comp = new LinkedList();
			String getITRecords = "";

			if (type.equalsIgnoreCase("Pending")) {
				getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
						+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, COMP_OT as it where all_R.Pending_Approver='"
						+ user.getEmployeeNo()
						+ "' and all_R.Req_Status='Pending' and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
						+ "and all_R.Req_Type='Comp-Off/OT' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"
						+ startRecord
						+ "' and '"
						+ endRecord
						+ "' order by Req_Id desc";

			}

			if (type.equalsIgnoreCase("Approved")) {
				getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
						+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, COMP_OT as it where all_R.Last_Approver='"
						+ user.getEmployeeNo()
						+ "' and all_R.Req_Status='Approved' and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
						+ "and all_R.Req_Type='Comp-Off/OT' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"
						+ startRecord
						+ "' and '"
						+ endRecord
						+ "' order by Req_Id desc";

			}
			if (type.equalsIgnoreCase("Rejected")) {
				getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
						+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, COMP_OT as it where all_R.Last_Approver='"
						+ user.getEmployeeNo()
						+ "' and all_R.Req_Status='Rejected' and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
						+ "and all_R.Req_Type='Comp-Off/OT' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"
						+ startRecord
						+ "' and '"
						+ endRecord
						+ "' order by Req_Id desc";
			}

			if (type.equalsIgnoreCase("All")) {

				getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
						+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, COMP_OT as it where (all_R.Last_Approver='"
						+ user.getEmployeeNo()
						+ "' or all_R.Pending_Approver='"
						+ user.getEmployeeNo()
						+ "')  and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
						+ "and all_R.Req_Type='Comp-Off/OT' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"
						+ startRecord
						+ "' and '"
						+ endRecord
						+ "' order by Req_Id desc";

			}

			ResultSet rsit = ad.selectQuery(getITRecords);
			try {
				while (rsit.next()) {
					LeaveForm leave = new LeaveForm();
					leave.setRequestNumber(rsit.getInt("Req_Id"));
					leave.setEmployeeName(rsit.getString("EMP_FULLNAME"));
					leave.setSubmitDate(EMicroUtils.display(rsit
							.getDate("Req_Date")));
					leave.setStatus(rsit.getString("Req_Status"));
					leave.setStartDate(EMicroUtils.display(rsit
							.getDate("FromDate")));
					leave.setEndDate(EMicroUtils.display(rsit
							.getDate("ToDate")));
					leave.setPapprover(rsit.getString("Pending_approver"));
					
					leave.setLapprover(rsit.getString("Last_approver"));
					comp.add(leave);

				}
				if (comp.size() > 0) {
					if (type.equalsIgnoreCase("Pending")) {
						// request.setAttribute("displayButton",
						// "displayButton");
					}
				}
				request.setAttribute("comp", comp);
				if (comp.size() == 0) {
					request.setAttribute("no it records", "no it records");
					approvalsForm.setMessage3("No Records Found..");
				}
				request.setAttribute("displayRecordNo", "displayRecordNo");

				approvalsForm.setTotalRecords(totalRecords);
				approvalsForm.setStartRecord(startRecord);
				approvalsForm.setEndRecord(endRecord);
				request.setAttribute("nextButton", "nextButton");
				if (startRecord != 1)
					request.setAttribute("previousButton", "previousButton");
				request.setAttribute("displayRecordNo", "displayRecordNo");
				if (comp.size() < 10) {
					approvalsForm.setStartRecord(1);
					request.setAttribute("previousButton", "");
					request.setAttribute("disablePreviousButton",
							"disablePreviousButton");
				}

			} catch (SQLException e) {

				e.printStackTrace();
			}

		}
		
		
		if(status.equalsIgnoreCase("VC Booking"))
		 {
			 ApprovalsList apprList=new ApprovalsList();
			 approvalsForm.setStartRecord(startRecord);
			 approvalsForm.setEndRecord(endRecord);
			 LinkedList vcList=apprList.getApprovalsList(status,type,request,form);
			 
			 if(vcList.size()>0){
			if(type.equalsIgnoreCase("Pending")){
				//request.setAttribute("displayButton", "displayButton");
				}
			 }
			 request.setAttribute("vcList", vcList);
			if(vcList.size()==0){
				request.setAttribute("no VC records", "no VC records");
				approvalsForm.setMessage3("No Records Found..");
			}
			 request.setAttribute("displayRecordNo", "displayRecordNo");
			 approvalsForm.setTotalRecords(totalRecords);
			 approvalsForm.setStartRecord(startRecord);
			 approvalsForm.setEndRecord(endRecord);
			request.setAttribute("nextButton", "nextButton");
			if(startRecord!=1)
			request.setAttribute("previousButton", "previousButton");
			request.setAttribute("displayRecordNo", "displayRecordNo");
			if(vcList.size()<10)
			{
				approvalsForm.setStartRecord(1);
				request.setAttribute("previousButton", "");
				request.setAttribute("disablePreviousButton", "disablePreviousButton");
			}
			 
		 }
		if(status.equalsIgnoreCase("Conference"))
		 {
			 ApprovalsList apprList=new ApprovalsList();
			 approvalsForm.setStartRecord(startRecord);
			 approvalsForm.setEndRecord(endRecord);
			 LinkedList confList=apprList.getApprovalsList(status,type,request,form);
			 
			 if(confList.size()>0){
			if(type.equalsIgnoreCase("Pending")){
				//request.setAttribute("displayButton", "displayButton");
				}
			 }
			request.setAttribute("confList", confList);
			if(confList.size()==0){
				request.setAttribute("no Conference records", "no Conference records");
				approvalsForm.setMessage3("No Records Found..");
			}
			 request.setAttribute("displayRecordNo", "displayRecordNo");
			 approvalsForm.setTotalRecords(totalRecords);
			 approvalsForm.setStartRecord(startRecord);
			 approvalsForm.setEndRecord(endRecord);
			request.setAttribute("nextButton", "nextButton");
			if(startRecord!=1)
			request.setAttribute("previousButton", "previousButton");
			request.setAttribute("displayRecordNo", "displayRecordNo");
			if(confList.size()<10)
			{
				approvalsForm.setStartRecord(1);
				request.setAttribute("previousButton", "");
				request.setAttribute("disablePreviousButton", "disablePreviousButton");
			}
			 
		 }
		  if(status.equalsIgnoreCase("IT Request"))
			 {
				 LinkedList it=new LinkedList();
					String getITRecords="";
					
					if(type.equalsIgnoreCase("Pending")){
						getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
						"emp.EMP_FULLNAME,all_R.Req_Status,CONVERT(varchar(10),it.Req_date,103)+' '+ CONVERT(varchar(5),it.Req_date,108) as Req_date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_HELPDESK as it " +
						"where all_R.Pending_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Pending' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
						"all_R.Req_Type='IT Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";			
						
					}
					
					if(type.equalsIgnoreCase("Approved")){
						getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
						"emp.EMP_FULLNAME,all_R.Req_Status,CONVERT(varchar(10),it.Req_date,103)+' '+ CONVERT(varchar(5),it.Req_date,108) as Req_date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_HELPDESK as it " +
						"where all_R.Last_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Approved' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
						"all_R.Req_Type='IT Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
						
					}
					if(type.equalsIgnoreCase("Rejected")){
						
						getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
						"emp.EMP_FULLNAME,all_R.Req_Status,CONVERT(varchar(10),it.Req_date,103)+' '+ CONVERT(varchar(5),it.Req_date,108) as Req_date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_HELPDESK as it " +
						"where all_R.Last_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Rejected' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
						"all_R.Req_Type='IT Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
					}
				  	if(type.equalsIgnoreCase("Completed")){
						
						getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
						"emp.EMP_FULLNAME,all_R.Req_Status,CONVERT(varchar(10),it.Req_date,103)+' '+ CONVERT(varchar(5),it.Req_date,108) as Req_date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_HELPDESK as it " +
						"where all_R.Last_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Completed' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
						"all_R.Req_Type='IT Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
					}
					
					if(type.equalsIgnoreCase("All")){
						
						getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
						"emp.EMP_FULLNAME,all_R.Req_Status,CONVERT(varchar(10),it.Req_date,103)+' '+ CONVERT(varchar(5),it.Req_date,108) as Req_date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_HELPDESK as it " +
						"where (all_R.Last_Approver='"+user.getEmployeeNo()+"' or all_R.Pending_Approver='"+user.getEmployeeNo()+"')  and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
						"all_R.Req_Type='IT Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
						
					}	
					
					ResultSet rsit=ad.selectQuery(getITRecords);
					try {
						while(rsit.next())
						{
							HelpDeskForm help=new HelpDeskForm();
							help.setRequestNumber(rsit.getString("Req_Id"));
							help.setRequestType(rsit.getString("type"));
							approvalsForm.setItType(rsit.getString("type"));
							help.setRequestername(rsit.getString("EMP_FULLNAME"));
							help.setRequestDate(rsit.getString("Req_Date"));
							help.setRequestStatus(rsit.getString("Req_Status"));
							help.setLastApprover(rsit.getString("Last_Approver"));
							help.setPendingApprover(rsit.getString("Pending_Approver"));
							help.setReqPriority(rsit.getString("Req_Priority"));
							help.setItEngStatus(rsit.getString("ITEng_Status"));
							it.add(help);
							
							
						}
						if(it.size()>0){
							if(type.equalsIgnoreCase("Pending")){
								//request.setAttribute("displayButton", "displayButton");
								}
							}
							request.setAttribute("it", it);
							if(it.size()==0){
								request.setAttribute("no it records", "no it records");
								approvalsForm.setMessage3("No Records Found..");
							}
							 request.setAttribute("displayRecordNo", "displayRecordNo");
							 
							 
							 approvalsForm.setTotalRecords(totalRecords);
							  approvalsForm.setStartRecord(startRecord);
							  approvalsForm.setEndRecord(endRecord);
								request.setAttribute("nextButton", "nextButton");
								if(startRecord!=1)
								request.setAttribute("previousButton", "previousButton");
								request.setAttribute("displayRecordNo", "displayRecordNo");
								if(it.size()<10)
								{
									approvalsForm.setStartRecord(1);
									request.setAttribute("previousButton", "");
									request.setAttribute("disablePreviousButton", "disablePreviousButton");
								}
							
							
					} catch (SQLException e) {
					
						e.printStackTrace();
					}
					
					
			 }
		  
		  if(status.equalsIgnoreCase("IT Sap Request"))
			 {
				 LinkedList it=new LinkedList();
					String getITRecords="";
					
					if(type.equalsIgnoreCase("Pending")){
						getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
						"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_SAP_ISSUES as it " +
						"where all_R.Pending_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Pending' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
						"all_R.Req_Type='IT Sap Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";			
						
					}
					
					if(type.equalsIgnoreCase("Approved")){
						getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
						"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_SAP_ISSUES as it " +
						"where all_R.Last_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Approved' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
						"all_R.Req_Type='IT Sap Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
						
					}
					if(type.equalsIgnoreCase("Rejected")){
						
						getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
						"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_SAP_ISSUES as it " +
						"where all_R.Last_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Rejected' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
						"all_R.Req_Type='IT Sap Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
					}
				  	if(type.equalsIgnoreCase("Completed")){
						
						getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
						"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_SAP_ISSUES as it " +
						"where all_R.Last_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Completed' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
						"all_R.Req_Type='IT Sap Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
					}
					
					if(type.equalsIgnoreCase("All")){
						
						getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
						"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_SAP_ISSUES as it " +
						"where (all_R.Last_Approver='"+user.getEmployeeNo()+"' or all_R.Pending_Approver='"+user.getEmployeeNo()+"')  and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
						"all_R.Req_Type='IT Sap Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
						
					}	
					
					ResultSet rsit=ad.selectQuery(getITRecords);
					try {
						while(rsit.next())
						{
							HelpDeskForm help=new HelpDeskForm();
							help.setRequestNumber(rsit.getString("Req_Id"));
							help.setRequestType(rsit.getString("type"));
							approvalsForm.setItType(rsit.getString("type"));
							help.setRequestername(rsit.getString("EMP_FULLNAME"));
							help.setRequestDate(rsit.getString("Req_Date"));
							help.setRequestStatus(rsit.getString("Req_Status"));
							help.setLastApprover(rsit.getString("Last_Approver"));
							help.setPendingApprover(rsit.getString("Pending_Approver"));
							help.setReqPriority(rsit.getString("Req_Priority"));
							help.setItEngStatus(rsit.getString("ITEng_Status"));
							it.add(help);
							
							
						}
						if(it.size()>0){
							if(type.equalsIgnoreCase("Pending")){
								//request.setAttribute("displayButton", "displayButton");
								}
							}
							request.setAttribute("sapit", it);
							if(it.size()==0){
								request.setAttribute("no it records", "no it records");
								approvalsForm.setMessage3("No Records Found..");
							}
							 request.setAttribute("displayRecordNo", "displayRecordNo");
							 
							 
							 approvalsForm.setTotalRecords(totalRecords);
							  approvalsForm.setStartRecord(startRecord);
							  approvalsForm.setEndRecord(endRecord);
								request.setAttribute("nextButton", "nextButton");
								if(startRecord!=1)
								request.setAttribute("previousButton", "previousButton");
								request.setAttribute("displayRecordNo", "displayRecordNo");
								if(it.size()<10)
								{
									approvalsForm.setStartRecord(1);
									request.setAttribute("previousButton", "");
									request.setAttribute("disablePreviousButton", "disablePreviousButton");
								}
							
							
					} catch (SQLException e) {
					
						e.printStackTrace();
					}
					
					
			 }
			
		  
		  
		  if(status.equalsIgnoreCase("Permission"))
			 {
				 LinkedList permList=new LinkedList();
					String getPermissionRecords="";
					String getPermissionDetails="select * from Permission_details where user_id='"+user.getEmployeeNo()+"' ";
					
					
					if(type.equalsIgnoreCase("Pending")){
						getPermissionRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS RowNum,all_R.Req_Id," +
					"all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type from  All_Request as all_R," +
				"emp_official_info as emp, Permission_details as perm where all_R.Pending_Approver='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' " +
				"and all_R.Req_Id=perm.request_no and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Permission' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type ) as  sub Where  " +
				"sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";					
						
					}
					
					if(type.equalsIgnoreCase("Approved")){
						
						getPermissionRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS RowNum,all_R.Req_Id," +
					"all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type from  All_Request as all_R," +
				"emp_official_info as emp, Permission_details as perm where  all_R.Last_Approver='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' " +
				"and all_R.Req_Id=perm.request_no and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Permission' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type ) as  sub Where  " +
				"sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
					}
					if(type.equalsIgnoreCase("Rejected")){
						
						getPermissionRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS RowNum,all_R.Req_Id," +
					"all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type from  All_Request as all_R," +
				"emp_official_info as emp, Permission_details as perm where  all_R.Approved_Persons='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' " +
				"and all_R.Req_Id=perm.request_no and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Permission' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type ) as  sub Where  " +
				"sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
					}
					if(type.equalsIgnoreCase("Cancelled")){
						
						getPermissionRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS RowNum,all_R.Req_Id," +
					"all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type from  All_Request as all_R," +
				"emp_official_info as emp, Permission_details as perm where  all_R.Approved_Persons='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' " +
				"and all_R.Req_Id=perm.request_no and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Permission' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type ) as  sub Where  " +
				"sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
					}
					if(type.equalsIgnoreCase("All")){
						
						getPermissionRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS RowNum,all_R.Req_Id," +
					"all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type from  All_Request as all_R," +
				"emp_official_info as emp, Permission_details as perm where  (all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"') " +
				"and all_R.Req_Id=perm.request_no and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Permission' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type ) as  sub Where  " +
				"sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
					}	
					ResultSet rsPermission=ad.selectQuery(getPermissionRecords);
					try{
					while(rsPermission.next())
					{
						MyRequestForm permission=new MyRequestForm();
						permission.setRequestNumber(rsPermission.getString("Req_Id"));
			            permission.setStartTime(rsPermission.getString("startTime"));
				          permission.setEndTime(rsPermission.getString("endTime"))		;
				      	permission.setRequestType(rsPermission.getString("type"));
						String requestDate=rsPermission.getString("Req_Date");
						int isthere = (requestDate.indexOf("/"));
						if(isthere <= 0){
							String req[]=requestDate.split(" ");
							requestDate=req[0];
							String a[]=requestDate.split("-");
							requestDate=a[2]+"/"+a[1]+"/"+a[0];
						}
						permission.setCreateDate(requestDate);
						permission.setEmployeeName(rsPermission.getString("EMP_FULLNAME"));
						permission.setApprover(rsPermission.getString("Req_Status"));
						permission.setEmployeeNumber(rsPermission.getString("Requester_Name"));
						String url="";
						
						permission.setUrl(url);
						//leaveMaster.setLastApprover(rsLeaveDetails.getString("Last_approver"));
						//leaveMaster.setPendingApprover(rsLeaveDetails.getString("Pending_approver"));
						permList.add(permission);
							
					}
					request.setAttribute("Permissionlist", permList);
				
					if(permList.size()>0){
						if(type.equalsIgnoreCase("Pending")){
							request.setAttribute("displayButton", "displayButton");
							}
						}
						
						
						if(permList.size()==0){
							request.setAttribute("no Permission records", "no Permission records");
							approvalsForm.setMessage3("No Records Found..");
						}
					
					 request.setAttribute("displayRecordNo", "displayRecordNo");
					 
					 
					 approvalsForm.setTotalRecords(totalRecords);
					  approvalsForm.setStartRecord(startRecord);
					  approvalsForm.setEndRecord(endRecord);
						request.setAttribute("nextButton", "nextButton");
						if(startRecord!=1)
						request.setAttribute("previousButton", "previousButton");
						request.setAttribute("displayRecordNo", "displayRecordNo");
						if(permList.size()<10)
						{
							approvalsForm.setStartRecord(1);
							request.setAttribute("previousButton", "");
							request.setAttribute("disablePreviousButton", "disablePreviousButton");
						}
					
					
					
						}catch (Exception e) {
							e.printStackTrace();
						}
				 
			 }
		  
		  if(status.equalsIgnoreCase("On Duty")){

				LinkedList ondutyList=new LinkedList();
				String getOndutyRecords="";
				if(type.equalsIgnoreCase("Pending")){
					getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime," +
					"emp.EMP_FULLNAME,all_R.Req_Status,onduty.submit_date as Req_Date,onduty.start_date,onduty.end_date " +
					"from  All_Request as all_R,emp_official_info as emp,OnDuty_details as onduty where all_R.Pending_Approver='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' and all_R.Req_Id=onduty.request_no " +
					"and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='On Duty') as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
				}
				if(type.equalsIgnoreCase("Approved")){
					
					getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime," +
					"emp.EMP_FULLNAME,all_R.Req_Status,onduty.submit_date as Req_Date,onduty.start_date,onduty.end_date " +
					"from  All_Request as all_R,emp_official_info as emp,OnDuty_details as onduty where all_R.Last_Approver='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' and all_R.Req_Id=onduty.request_no " +
					"and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='On Duty') as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
				}
				if(type.equalsIgnoreCase("Rejected")){
					
					getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime," +
					"emp.EMP_FULLNAME,all_R.Req_Status,onduty.submit_date as Req_Date,onduty.start_date,onduty.end_date " +
				"from  All_Request as all_R,emp_official_info as emp,OnDuty_details as onduty where all_R.Approved_Persons='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' and all_R.Req_Id=onduty.request_no " +
					"and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='On Duty') as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
				}
				if(type.equalsIgnoreCase("Cancelled")){
					
					getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime," +
					"emp.EMP_FULLNAME,all_R.Req_Status,onduty.submit_date as Req_Date,onduty.start_date,onduty.end_date " +
					"from  All_Request as all_R,emp_official_info as emp,OnDuty_details as onduty where all_R.Approved_Persons='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' " +
					"  and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='On Duty' and all_R.Req_Id=onduty.request_no) as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
				}
				if(type.equalsIgnoreCase("All")){
					
					getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime," +
					"emp.EMP_FULLNAME,all_R.Req_Status,onduty.submit_date as Req_Date,onduty.start_date,onduty.end_date " +
				"from  All_Request as all_R,emp_official_info as emp,OnDuty_details as onduty where (all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"')" +
					"  and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='On Duty' and all_R.Req_Id=onduty.request_no) as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
				}
				ResultSet rsOnduty=ad.selectQuery(getOndutyRecords);
				try{
				while(rsOnduty.next()){
				OnDutyForm onduty=new OnDutyForm();
				onduty.setRequestNumber(rsOnduty.getInt("Req_Id"));
				onduty.setEmployeeNumber(rsOnduty.getString("Requester_Name"));
			
				onduty.setOnDutyType(rsOnduty.getString("onDuty_Type"));
				onduty.setLocationId(rsOnduty.getString("location"));
				onduty.setEmployeeName(rsOnduty.getString("EMP_FULLNAME"));
				onduty.setSubmitDate(rsOnduty.getString("Req_Date"));
				onduty.setStartDate(EMicroUtils.display(rsOnduty.getDate("start_date")));
				onduty.setLocationId(rsOnduty.getString("location"));
				onduty.setStartTime(rsOnduty.getString("startTime"));
				onduty.setEndDate(EMicroUtils.display(rsOnduty.getDate("end_date")));
				
				
				onduty.setEndTime(rsOnduty.getString("endTime"));
				onduty.setApprover(rsOnduty.getString("Req_Status"));
				ondutyList.add(onduty);
				}
				request.setAttribute("ondutyList", ondutyList);
				if(ondutyList.size()>0){
				if(type.equalsIgnoreCase("Pending")){
					request.setAttribute("displayButton", "displayButton");
					}
				}
				
				
				if(ondutyList.size()==0){
					request.setAttribute("no OnDuty records", "no OnDuty records");
					approvalsForm.setMessage3("No Records Found..");
				}
			
			 request.setAttribute("displayRecordNo", "displayRecordNo");
			 
			 
			 approvalsForm.setTotalRecords(totalRecords);
			  approvalsForm.setStartRecord(startRecord);
			  approvalsForm.setEndRecord(endRecord);
				request.setAttribute("nextButton", "nextButton");
				if(startRecord!=1)
				request.setAttribute("previousButton", "previousButton");
				request.setAttribute("displayRecordNo", "displayRecordNo");
				if(ondutyList.size()<10)
				{
					approvalsForm.setStartRecord(1);
					request.setAttribute("previousButton", "");
					request.setAttribute("disablePreviousButton", "disablePreviousButton");
				}
				
				
				
				}catch (Exception e) {
					e.printStackTrace();
				}
				
			
		 }		   
		  
		  
		  if(status.equalsIgnoreCase("Customer Master"))
			{
			 

			 String getcustMasterList="";
			 ResultSet rsVendor;
			 ArrayList materialList=new ArrayList();
			 try{
				 if(type.equalsIgnoreCase("Pending")){
					 
					 getcustMasterList=" Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id," +
		"all_r.Req_Date,all_r.type,s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status," +
		"acc.ACCOUNT_GROUP_NAME	from  All_Request as all_r,emp_official_info as emp,CUSTOMER_MASTER_M as s,ACCOUNT_GROUP_M as acc  " +
		"where all_r.Req_Type='Customer Master'  and all_r.Pending_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and  " +
		"s.REQUEST_NO=all_r.Req_Id  and all_r.Req_Status='Pending' and acc.MATERIAL_TYPE_ID=s.ACCOUNT_GROUP_ID )as   sub Where  " +
		"sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
			 }
				 if(type.equalsIgnoreCase("Approved")||type.equalsIgnoreCase("Completed")){
					 
					 getcustMasterList=" Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id," +
		"all_r.Req_Date,all_r.type,s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status," +
		"acc.ACCOUNT_GROUP_NAME	from  All_Request as all_r,emp_official_info as emp,CUSTOMER_MASTER_M as s,ACCOUNT_GROUP_M as acc  " +
		"where all_r.Req_Type='Customer Master'  and all_r.Last_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and  " +
		"s.REQUEST_NO=all_r.Req_Id  and all_r.Req_Status='Approved' and acc.MATERIAL_TYPE_ID=s.ACCOUNT_GROUP_ID )as   sub Where  " +
		"sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
			 }	
if(type.equalsIgnoreCase("Rejected")){
					 
					 getcustMasterList=" Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id," +
		"all_r.Req_Date,all_r.type,s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status," +
		"acc.ACCOUNT_GROUP_NAME	from  All_Request as all_r,emp_official_info as emp,CUSTOMER_MASTER_M as s,ACCOUNT_GROUP_M as acc  " +
		"where all_r.Req_Type='Customer Master'  and all_r.Approved_Persons='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and  " +
		"s.REQUEST_NO=all_r.Req_Id  and all_r.Req_Status='Rejected' and acc.MATERIAL_TYPE_ID=s.ACCOUNT_GROUP_ID )as   sub Where  " +
		"sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
			 }	
	 if(type.equalsIgnoreCase("All")){
		 
		 getcustMasterList=" Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id," +
	"all_r.Req_Date,all_r.type,s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status," +
	"acc.ACCOUNT_GROUP_NAME	from  All_Request as all_r,emp_official_info as emp,CUSTOMER_MASTER_M as s,ACCOUNT_GROUP_M as acc  " +
	"where all_r.Req_Type='Customer Master'  and (all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"') and emp.PERNR=all_r.Requester_Name and  " +
	"s.REQUEST_NO=all_r.Req_Id   and acc.MATERIAL_TYPE_ID=s.ACCOUNT_GROUP_ID )as   sub Where  " +
	"sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
	}
			
				 
				 rsVendor=ad.selectQuery(getcustMasterList);
					while(rsVendor.next()){
					MyRequestForm customer=new MyRequestForm();
					customer.setRequestNumber(rsVendor.getString("Req_Id"));
					
					customer.setRequestType(rsVendor.getString("EMP_FULLNAME"));
					customer.setName(rsVendor.getString("name"));
					customer.setLocationName(rsVendor.getString("CITY"));
					customer.setVendorType(rsVendor.getString("ACCOUNT_GROUP_NAME"));
					String requestDate=rsVendor.getString("Req_Date");
					
				
					customer.setCreateDate(requestDate);
					customer.setApprovalStatus(rsVendor.getString("Req_Status"));
					
					customer.setLastApprover(rsVendor.getString("last_approver"));
					customer.setPendingApprover(rsVendor.getString("pending_approver"));

					materialList.add(customer);
						
					}	 
					request.setAttribute("myRequest", materialList);	
					request.setAttribute("customer  list", "customer  list");	
					if(materialList.size()==0){
						request.setAttribute("no Material Master records", "no Material Master records");
						approvalsForm.setMessage3("No Records Found..");
					}
				
				 request.setAttribute("displayRecordNo", "displayRecordNo");
				 
				 
				 approvalsForm.setTotalRecords(totalRecords);
				  approvalsForm.setStartRecord(startRecord);
				  approvalsForm.setEndRecord(endRecord);
					request.setAttribute("nextButton", "nextButton");
					if(startRecord!=1)
					request.setAttribute("previousButton", "previousButton");
					request.setAttribute("displayRecordNo", "displayRecordNo");
					if(materialList.size()<10)
					{
						approvalsForm.setStartRecord(1);
						request.setAttribute("previousButton", "");
						request.setAttribute("disablePreviousButton", "disablePreviousButton");
					}
			 }
			 catch (Exception e) {
				e.printStackTrace();
			}
			
			 
			 
			 
			 
			}
		  
		  if(status.equalsIgnoreCase("Vendor Master"))
			{
			 String getVendorMasterList="";
			 ResultSet rsVendor;
			 ArrayList materialList=new ArrayList();
			 try{
				 if(type.equalsIgnoreCase("Pending")){
			getVendorMasterList=" Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,all_r.type," +
					"s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,acc.ACCOUNT_GROUP_NAME	" +
					"from  All_Request as all_r,emp_official_info as emp,vendor_master_m as s,ACCOUNT_GROUP_M as acc  where all_r.Req_Type='Vendor Master'  " +
					"and all_r.Pending_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id  " +
					"and all_r.Req_Status='Pending' and acc.ACCOUNT_GROUP_ID=s.ACCOUNT_GROUP_ID)as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
			 }
				 if(type.equalsIgnoreCase("Approved")||type.equalsIgnoreCase("Completed")){
						getVendorMasterList=" Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,all_r.type," +
								"s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,acc.ACCOUNT_GROUP_NAME	" +
								"from  All_Request as all_r,emp_official_info as emp,vendor_master_m as s,ACCOUNT_GROUP_M as acc  where all_r.Req_Type='Vendor Master'  " +
								"and  all_r.Last_Approver='"+user.getEmployeeNo()+"' and  all_r.Req_Status='Approved' and emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id  " +
								" and acc.ACCOUNT_GROUP_ID=s.ACCOUNT_GROUP_ID)as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
						 }
				 if(type.equalsIgnoreCase("Rejected")){
						getVendorMasterList=" Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,all_r.type," +
								"s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,acc.ACCOUNT_GROUP_NAME	" +
								"from  All_Request as all_r,emp_official_info as emp,vendor_master_m as s,ACCOUNT_GROUP_M as acc  where all_r.Req_Type='Vendor Master'  " +
								"and all_r.Approved_Persons='"+user.getEmployeeNo()+"' and  all_r.Req_Status='Rejected' and emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id  " +
								" and acc.ACCOUNT_GROUP_ID=s.ACCOUNT_GROUP_ID)as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
						 }
				 if(type.equalsIgnoreCase("All")){
						getVendorMasterList=" Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,all_r.type," +
								"s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,acc.ACCOUNT_GROUP_NAME	" +
								"from  All_Request as all_r,emp_official_info as emp,vendor_master_m as s,ACCOUNT_GROUP_M as acc  where all_r.Req_Type='Vendor Master'  " +
								"and (all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"') and emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id  " +
								" and acc.ACCOUNT_GROUP_ID=s.ACCOUNT_GROUP_ID)as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
						 }
			
				 
				 rsVendor=ad.selectQuery(getVendorMasterList);
					while(rsVendor.next()){
					MyRequestForm vendor=new MyRequestForm();
					vendor.setRequestNumber(rsVendor.getString("Req_Id"));
					
					vendor.setRequestType(rsVendor.getString("EMP_FULLNAME"));
					vendor.setName(rsVendor.getString("name"));
					vendor.setLocationName(rsVendor.getString("CITY"));
					vendor.setVendorType(rsVendor.getString("ACCOUNT_GROUP_NAME"));
					vendor.setCreateDate(EMicroUtils.display(rsVendor.getDate("Req_Date")));
					vendor.setApprovalStatus(rsVendor.getString("Req_Status"));
					
					vendor.setLastApprover(rsVendor.getString("last_approver"));
					vendor.setPendingApprover(rsVendor.getString("pending_approver"));

					materialList.add(vendor);
						
					}	 
					request.setAttribute("myRequestList", materialList);	
					request.setAttribute("vendor  list", "vendor  list");
					
					if(materialList.size()==0){
						request.setAttribute("no Material Master records", "no Material Master records");
						approvalsForm.setMessage3("No Records Found..");
					}
					
					approvalsForm.setTotalRecords(totalRecords);
					approvalsForm.setStartRecord(startRecord);
					approvalsForm.setEndRecord(endRecord);
							request.setAttribute("nextButton", "nextButton");
							if(startRecord!=1)
							request.setAttribute("previousButton", "previousButton");
							request.setAttribute("displayRecordNo", "displayRecordNo");
							if(materialList.size()<10)
							{
								approvalsForm.setStartRecord(1);
								request.setAttribute("previousButton", "");
								request.setAttribute("disablePreviousButton", "disablePreviousButton");
							}
					
				 request.setAttribute("displayRecordNo", "displayRecordNo");
				 
				 approvalsForm.setTotalRecords(totalRecords);
				  approvalsForm.setStartRecord(startRecord);
				  approvalsForm.setEndRecord(endRecord);
					request.setAttribute("nextButton", "nextButton");
					if(startRecord!=1)
					request.setAttribute("previousButton", "previousButton");
					request.setAttribute("displayRecordNo", "displayRecordNo");
					if(materialList.size()<10)
					{
						approvalsForm.setStartRecord(1);
						request.setAttribute("previousButton", "");
						request.setAttribute("disablePreviousButton", "disablePreviousButton");
					}
					
					
			 }catch (Exception e) {
				e.printStackTrace();
			}
			}
		  
		  if(status.equalsIgnoreCase("Code Extention"))
			{
			 String getCodeExtention="";
			 ResultSet rsCodeExtention;
			 ArrayList materialList=new ArrayList();
			
			try{
			
			if(type.equalsIgnoreCase("Pending")){
				
				getCodeExtention="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE," +
						"all_r.type,s.TYPE as matType,s.REQUEST_NO,s.CREATED_DATE,s.APPROVE_TYPE,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,s.MATERIAL_SHORT_NAME,MATERIAL_CODE_1,MATERIAL_CODE_2 from Location as loc,All_Request as all_r," +
						"emp_official_info as emp,code_extenstion_request as s where all_r.Req_Type='Code Extention' and all_r.Pending_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name " +
						"and s.REQUEST_NO=all_r.Req_Id and (s.PLANT_1=loc.LOCATION_CODE or s.PLANT_2=loc.LOCATION_CODE)  and all_r.Req_Status='"+type+"')as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
							}
							if(type.equalsIgnoreCase("Approved")||type.equalsIgnoreCase("Completed")){
								getCodeExtention="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE," +
								"all_r.type,s.TYPE as matType,s.REQUEST_NO,s.CREATED_DATE,s.APPROVE_TYPE,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,s.MATERIAL_SHORT_NAME,MATERIAL_CODE_1,MATERIAL_CODE_2 from Location as loc,All_Request as all_r," +
								"emp_official_info as emp,code_extenstion_request as s where all_r.Req_Type='Code Extention' and all_r.Last_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name " +
								"and s.REQUEST_NO=all_r.Req_Id and (s.PLANT_1=loc.LOCATION_CODE or s.PLANT_2=loc.LOCATION_CODE)  and all_r.Req_Status='"+type+"')as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
									}
							if(type.equalsIgnoreCase("Rejected")){
								getCodeExtention="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE," +
								"all_r.type,s.TYPE as matType,s.REQUEST_NO,s.CREATED_DATE,s.APPROVE_TYPE,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,s.MATERIAL_SHORT_NAME,MATERIAL_CODE_1,MATERIAL_CODE_2 from Location as loc,All_Request as all_r," +
								"emp_official_info as emp,code_extenstion_request as s where all_r.Req_Type='Code Extention' and all_r.Approved_Persons='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name " +
								"and s.REQUEST_NO=all_r.Req_Id and (s.PLANT_1=loc.LOCATION_CODE or s.PLANT_2=loc.LOCATION_CODE)  and all_r.Req_Status='"+type+"')as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
									}
							if(type.equalsIgnoreCase("All")){
								getCodeExtention="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE," +
								"all_r.type,s.TYPE as matType,s.REQUEST_NO,s.CREATED_DATE,s.APPROVE_TYPE,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,s.MATERIAL_SHORT_NAME,MATERIAL_CODE_1,MATERIAL_CODE_2 from Location as loc,All_Request as all_r," +
								"emp_official_info as emp,code_extenstion_request as s where all_r.Req_Type='Code Extention' and (all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"') and emp.PERNR=all_r.Requester_Name " +
								"and s.REQUEST_NO=all_r.Req_Id and (s.PLANT_1=loc.LOCATION_CODE or s.PLANT_2=loc.LOCATION_CODE)  )as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
									}
					
					 rsCodeExtention=ad.selectQuery(getCodeExtention);
					while(rsCodeExtention.next()){
					MyRequestForm codeExtentionRec=new MyRequestForm();
					codeExtentionRec.setRequestNumber(rsCodeExtention.getString("REQUEST_NO"));
					codeExtentionRec.setLocationName(rsCodeExtention.getString("location_code"));
					codeExtentionRec.setRequestType("Code Extention");
					codeExtentionRec.setPlantType(rsCodeExtention.getString("matType"));
					String sapNo="";
					if(rsCodeExtention.getString("matType").equals("Plant"))
						sapNo=rsCodeExtention.getString("MATERIAL_CODE_1");
					else
						sapNo=rsCodeExtention.getString("MATERIAL_CODE_2");
					codeExtentionRec.setSapNo(sapNo);
					codeExtentionRec.setDescription(rsCodeExtention.getString("MATERIAL_SHORT_NAME"));
					String requestDate=rsCodeExtention.getString("CREATED_DATE");
					String req[]=requestDate.split(" ");
					requestDate=req[0];
					String a[]=requestDate.split("-");
					requestDate=a[2]+"/"+a[1]+"/"+a[0];
					codeExtentionRec.setCreateDate(requestDate);
					codeExtentionRec.setApprovalStatus(rsCodeExtention.getString("Req_Status"));
					String url="materialCodeExtenstion.do?method=editCodeExtension";
					codeExtentionRec.setUrl(url);
					codeExtentionRec.setLastApprover(rsCodeExtention.getString("last_approver"));
					codeExtentionRec.setPendingApprover(rsCodeExtention.getString("pending_approver"));

			materialList.add(codeExtentionRec);
				
			}
			request.setAttribute("Code Extention list", materialList);	
			if(materialList.size()==0){
				request.setAttribute("no Material Master records", "no Material Master records");
				approvalsForm.setMessage3("No Records Found..");
			}
			
		 request.setAttribute("displayRecordNo", "displayRecordNo");
			
			
		 approvalsForm.setTotalRecords(totalRecords);
		  approvalsForm.setStartRecord(startRecord);
		  approvalsForm.setEndRecord(endRecord);
			request.setAttribute("nextButton", "nextButton");
			if(startRecord!=1)
			request.setAttribute("previousButton", "previousButton");
			request.setAttribute("displayRecordNo", "displayRecordNo");
			if(materialList.size()<10)
			{
				approvalsForm.setStartRecord(1);
				request.setAttribute("previousButton", "");
				request.setAttribute("disablePreviousButton", "disablePreviousButton");
			}
			
			
			
			if(materialList.size()==0){
				request.setAttribute("no Service Master records", "no Service Master records");
				approvalsForm.setMessage3("No Records Found..");
			}
			}catch (Exception e) {
				e.printStackTrace();
			}
			}
		  
		  if(status.equalsIgnoreCase("Service Master")){


				 String getMaterialRecords="";
					if(type.equalsIgnoreCase("Pending")){
				getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date," +
				"loc.LOCATION_CODE,all_r.type,s.service_description,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status	from Location as loc," +
				" All_Request as all_r,emp_official_info as emp,SERVICE_MASTER as s where all_r.Req_Type='Service Master' and all_r.Pending_Approver='"+user.getEmployeeNo()+"' and " +
				"emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id and s.plant_code=loc.LOCID and all_r.Req_Status='"+type+"')as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
					}
					if(type.equalsIgnoreCase("Approved")||type.equalsIgnoreCase("Completed")){
						getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date," +
						"loc.LOCATION_CODE,all_r.type,s.service_description,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status	from Location as loc," +
						" All_Request as all_r,emp_official_info as emp,SERVICE_MASTER as s where all_r.Req_Type='Service Master' and all_r.Last_Approver='"+user.getEmployeeNo()+"' and " +
						"emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id and s.plant_code=loc.LOCID and all_r.Req_Status='"+type+"')as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
					
					}
					if(type.equalsIgnoreCase("Rejected")){
						getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date," +
						"loc.LOCATION_CODE,all_r.type,s.service_description,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status	from Location as loc," +
						" All_Request as all_r,emp_official_info as emp,SERVICE_MASTER as s where all_r.Req_Type='Service Master' and all_r.Approved_Persons='"+user.getEmployeeNo()+"' and " +
						"emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id and s.plant_code=loc.LOCID and all_r.Req_Status='"+type+"')as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
					
					}
					if(type.equalsIgnoreCase("All")){
						getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS RowNum,all_r.Req_Id,all_r.Req_Date," +
						"loc.LOCATION_CODE,all_r.type,s.service_description,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status	" +
						"from Location as  loc, All_Request as all_r,emp_official_info as emp,SERVICE_MASTER as s where all_r.Req_Type='Service Master' and " +
						"(all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"') and emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id and  " +
						"s.plant_code=loc.LOCID )as  sub Where  sub.RowNum   between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
					
					}
					
					ResultSet rsMat=ad.selectQuery(getMaterialRecords);	 
					try{
						LinkedList materialList=new LinkedList();
						while(rsMat.next()){
						MaterialCodeRequestForm masterForm=new MaterialCodeRequestForm();
						masterForm.setRequestNumber(rsMat.getString("Req_Id"));
						masterForm.setRequestDate(rsMat.getString("Req_Date"));
						masterForm.setLocationCode(rsMat.getString("LOCATION_CODE"));
						masterForm.setMaterailType(rsMat.getString("type"));
						masterForm.setEmployeeName(rsMat.getString("EMP_FULLNAME"));
						masterForm.setServiceDescription(rsMat.getString("service_description"));
						masterForm.setLastApprover(rsMat.getString("last_approver"));
						masterForm.setPendingApprover(rsMat.getString("pending_approver"));
						masterForm.setApproveStatus(rsMat.getString("Req_Status"));
						
						materialList.add(masterForm);
						
						}
						request.setAttribute("serviceMaster", materialList);
						request.setAttribute("Service Master List", "Service Master List");
						if(materialList.size()==0){
							request.setAttribute("no Service Master records", "no Service Master records");
							approvalsForm.setMessage3("No Records Found..");
						}
						
						approvalsForm.setTotalRecords(totalRecords);
						  approvalsForm.setStartRecord(startRecord);
						  approvalsForm.setEndRecord(endRecord);
							request.setAttribute("nextButton", "nextButton");
							if(startRecord!=1)
							request.setAttribute("previousButton", "previousButton");
							request.setAttribute("displayRecordNo", "displayRecordNo");
							if(materialList.size()<10)
							{
								approvalsForm.setStartRecord(1);
								request.setAttribute("previousButton", "");
								request.setAttribute("disablePreviousButton", "disablePreviousButton");
							}
					}catch (Exception e) {
						e.printStackTrace();
					}
			 
		  
		  }
		  
		  if(status.equalsIgnoreCase("Material Master")){
				
				String getMaterialRecords="";
				if(type.equalsIgnoreCase("Pending")){
					getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE,all_r.type,mat.MATERIAL_SHORT_NAME,emp.EMP_FULLNAME,mat.last_approver,mat.pending_approver," +
					"all_r.Req_Status,mat.MATERIAL_GROUP_ID from Location as loc, All_Request as all_r,emp_official_info as emp,material_code_request as mat " +
					"where all_r.Req_Type='Material Master' and all_r.Pending_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and mat.REQUEST_NO=all_r.Req_Id " +
					"and mat.LOCATION_ID=loc.LOCID and all_r.Req_Status='"+type+"' )as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";	
						}
					if(type.equalsIgnoreCase("Approved")){
						getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE,all_r.type,mat.MATERIAL_SHORT_NAME,emp.EMP_FULLNAME,mat.last_approver,mat.pending_approver," +
						"all_r.Req_Status,mat.MATERIAL_GROUP_ID from Location as loc, All_Request as all_r,emp_official_info as emp,material_code_request as mat  " +
						"where all_r.Req_Type='Material Master' and all_r.Last_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and mat.REQUEST_NO=all_r.Req_Id " +
						"and mat.LOCATION_ID=loc.LOCID and all_r.Req_Status='"+type+"' )as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";	
							}
					
					if(type.equalsIgnoreCase("Completed")){
						getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE,all_r.type,mat.MATERIAL_SHORT_NAME,emp.EMP_FULLNAME,mat.last_approver,mat.pending_approver," +
						"all_r.Req_Status,mat.MATERIAL_GROUP_ID from Location as loc, All_Request as all_r,emp_official_info as emp,material_code_request as mat " +
						"where all_r.Req_Type='Material Master' and all_r.Last_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and mat.REQUEST_NO=all_r.Req_Id " +
						"and mat.LOCATION_ID=loc.LOCID and all_r.Req_Status='"+type+"')as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";	
							}
					
					if(type.equalsIgnoreCase("Rejected")){
						getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE,all_r.type,mat.MATERIAL_SHORT_NAME,emp.EMP_FULLNAME,mat.last_approver,mat.pending_approver," +
						"all_r.Req_Status,mat.MATERIAL_GROUP_ID from Location as loc, All_Request as all_r,emp_official_info as emp,material_code_request as mat " +
						"where all_r.Req_Type='Material Master' and all_r.Approved_Persons='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and mat.REQUEST_NO=all_r.Req_Id " +
						"and mat.LOCATION_ID=loc.LOCID and all_r.Req_Status='"+type+"' )as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";	
						
								}
					if(type.equalsIgnoreCase("All")){
						getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE,all_r.type,mat.MATERIAL_SHORT_NAME,emp.EMP_FULLNAME,mat.last_approver,mat.pending_approver," +
						"all_r.Req_Status,mat.MATERIAL_GROUP_ID from Location as loc, All_Request as all_r,emp_official_info as emp,material_code_request as mat " +
						"where all_r.Req_Type='Material Master' and (all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"') and emp.PERNR=all_r.Requester_Name and mat.REQUEST_NO=all_r.Req_Id " +
						"and mat.LOCATION_ID=loc.LOCID  )as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";	
						
							}
	ResultSet rsMat=ad.selectQuery(getMaterialRecords);	 
	try{
		LinkedList materialList=new LinkedList();
		while(rsMat.next()){
		MaterialCodeRequestForm masterForm=new MaterialCodeRequestForm();
		masterForm.setRequestNumber(rsMat.getString("Req_Id"));
		masterForm.setRequestDate(rsMat.getString("Req_Date"));
		masterForm.setLocationCode(rsMat.getString("LOCATION_CODE"));
		masterForm.setMaterialDesc(rsMat.getString("type"));
		masterForm.setMaterailType(rsMat.getString("type"));
		masterForm.setEmployeeName(rsMat.getString("EMP_FULLNAME"));
		masterForm.setMaterialName(rsMat.getString("MATERIAL_SHORT_NAME"));
		masterForm.setLastApprover(rsMat.getString("last_approver"));
		masterForm.setPendingApprover(rsMat.getString("pending_approver"));
		masterForm.setApproveStatus(rsMat.getString("Req_Status"));
		masterForm.setMaterialGroup(rsMat.getString("MATERIAL_GROUP_ID"));
		materialList.add(masterForm);
		
		}
		request.setAttribute("materialList", materialList);
		request.setAttribute("Material List", "Material List");
		if(materialList.size()==0){
			request.setAttribute("no Material Master records", "no Material Master records");
			approvalsForm.setMessage3("No Records Found..");
		}
		
		
		approvalsForm.setTotalRecords(totalRecords);
		  approvalsForm.setStartRecord(startRecord);
		  approvalsForm.setEndRecord(endRecord);
			request.setAttribute("nextButton", "nextButton");
			if(startRecord!=1)
			request.setAttribute("previousButton", "previousButton");
			request.setAttribute("displayRecordNo", "displayRecordNo");
			if(materialList.size()<10)
			{
				approvalsForm.setStartRecord(1);
				request.setAttribute("previousButton", "");
				request.setAttribute("disablePreviousButton", "disablePreviousButton");
			}
		
		
		
	}catch (Exception e) {
		e.printStackTrace();
	}
			
	if(type.equalsIgnoreCase("Pending")){
		request.setAttribute("displayButton", "displayButton");
		}
		 
		  
		  }
		  if(status.equalsIgnoreCase("Leave"))
			{
			  
			  String getLeaveRecords="";
				if(type.equalsIgnoreCase("Pending")){
			getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,leave.leave_type," +
				"emp.EMP_FULLNAME,all_R.Req_Status,leave.submit_date as Req_Date,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days from  All_Request as all_R," +
				"emp_official_info as emp,leave_details as leave where all_R.Pending_Approver='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' and all_R.Req_Type='Leave' and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id) " +
				"as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
				}
				if(type.equalsIgnoreCase("Approved")){
					getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,leave.leave_type," +
					"emp.EMP_FULLNAME,all_R.Req_Status,leave.submit_date as Req_Date,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days from  All_Request as all_R," +
					"emp_official_info as emp,leave_details as leave where all_R.Last_Approver='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' and all_R.Req_Type='Leave' and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id) " +
					"as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by RowNum desc";
				}
				if(type.equalsIgnoreCase("Rejected")){
					getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,leave.leave_type," +
					"emp.EMP_FULLNAME,all_R.Req_Status,leave.submit_date as Req_Date,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days from  All_Request as all_R," +
					"emp_official_info as emp,leave_details as leave where all_R.Last_Approver='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' and all_R.Req_Type='Leave' and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id) " +
					"as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
				}
				if(type.equalsIgnoreCase("Cancelled")){
					getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,leave.leave_type," +
					"emp.EMP_FULLNAME,all_R.Req_Status,leave.submit_date as Req_Date,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days from  All_Request as all_R," +
					"emp_official_info as emp,leave_details as leave where all_R.Last_Approver='"+user.getEmployeeNo()+"' and (Req_Status='"+type+"' OR Actual_Approver_status='"+type+"') and all_R.Req_Type='Leave' and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id) " +
					"as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by RowNum desc";
				}
				if(type.equalsIgnoreCase("All")){
					getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,leave.leave_type," +
					"emp.EMP_FULLNAME,all_R.Req_Status,leave.submit_date as Req_Date,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days from  All_Request as all_R," +
					"emp_official_info as emp,leave_details as leave where (all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"') and all_R.Req_Type='Leave' and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id) " +
					"as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
				}
			 ResultSet rsLeave=ad.selectQuery(getLeaveRecords);

				while(rsLeave.next())
				{
					LeaveForm leave=new LeaveForm();
					leave.setRequestNumber(rsLeave.getInt("Req_Id"));
					
				String	leaveType=rsLeave.getString("leave_type");
					if(leaveType.equalsIgnoreCase("1")){
						leaveType="Casual";
					}
					if(leaveType.equalsIgnoreCase("2")){
						leaveType="Sick";
					}
					if(leaveType.equalsIgnoreCase("3")){
						leaveType="privilege";
					}
					if(leaveType.equalsIgnoreCase("4")){
						leaveType="Loss Of Pay";
					}
					if(leaveType.equalsIgnoreCase("5")){
						leaveType="Maternity";
					}
					if(leaveType.equalsIgnoreCase("6")){
						leaveType="Comp-Off";
					}
					leave.setLeaveType(leaveType);
					leave.setEmployeeName(rsLeave.getString("EMP_FULLNAME"));
					leave.setSubmitDate(rsLeave.getString("Req_Date"));
					leave.setStartDate(EMicroUtils.display(rsLeave.getDate("start_date")));
					String stDur=rsLeave.getString("start_duration");
					
					if(stDur.equalsIgnoreCase("FD")){
						stDur="Full Day";
					}
					if(stDur.equalsIgnoreCase("FH")){
						stDur="First Half";
					}
					if(stDur.equalsIgnoreCase("SH")){
						stDur="Second Half";
					}
					leave.setStartDurationType(stDur);
					
					leave.setEndDate(EMicroUtils.display(rsLeave.getDate("end_date")));
					
					String endDur=rsLeave.getString("end_duration");
					
					if(endDur.equalsIgnoreCase("FD")){
						endDur="Full Day";
					}
					if(endDur.equalsIgnoreCase("FH")){
						endDur="First Half";
					}
					if(endDur.equalsIgnoreCase("SH")){
						endDur="Second Half";
					}
					leave.setEndDurationType(endDur);
					leave.setNoOfDays(rsLeave.getString("no_of_days"));
					if(type.equalsIgnoreCase("Cancelled"))
						leave.setApproveStatus("Cancelled");
						else
						leave.setApproveStatus(rsLeave.getString("Req_Status"));	
					//disable cancle button
					int year = Calendar.getInstance().get(Calendar.YEAR);
					int mon=Calendar.getInstance().get(Calendar.MONTH);
					int day=Calendar.getInstance().get(Calendar.DAY_OF_MONTH);
					mon=mon+1;
					String month="";
					if(mon<10)
					{
						month="0"+Integer.toString(mon);
					}
					else
					{
						month=Integer.toString(mon);
					}
			
			   		if(day>=21)
			   		{
			   			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			        	Date date1 = rsLeave.getDate("start_date");
			        	Date date2 = sdf.parse(""+year+"-"+month+"-21");
			 
			        	
			   	
			   			
					int value=date1.compareTo(date2);
					if(value<1)
					{
						leave.setApptype("DisableCancel");
					}
			   


				}
					leaveList.add(leave);
					}
					
					request.setAttribute("leaveList", leaveList);
					approvalsForm.setTotalRecords(totalRecords);
					  approvalsForm.setStartRecord(startRecord);
					  approvalsForm.setEndRecord(endRecord);
						request.setAttribute("nextButton", "nextButton");
						if(startRecord!=1)
						request.setAttribute("previousButton", "previousButton");
						request.setAttribute("displayRecordNo", "displayRecordNo");
						if(leaveList.size()<10)
						{
							approvalsForm.setStartRecord(1);
							request.setAttribute("previousButton", "");
							request.setAttribute("disablePreviousButton", "disablePreviousButton");
	}
		  
			}
		
		
	}catch (Exception e) {
		e.printStackTrace();
	}

	return mapping.findForward("approvePage");
	}
	
	public ActionForward nextRecord(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ApprovalsForm approvalsForm=(ApprovalsForm)form;
			NewsandMediaDao ad=new NewsandMediaDao();
			
			HttpSession session=request.getSession();
			UserInfo user=(UserInfo)session.getAttribute("user");
			int userID=user.getId();
			String type=approvalsForm.getSelectedFilter();
			String status=approvalsForm.getReqRequstType();
			if(type.equalsIgnoreCase("Pending")){
				if(!status.equalsIgnoreCase("IT Request"))
				request.setAttribute("displayButton", "displayButton");
				}
			try{
				int totalRecords=approvalsForm.getTotalRecords();//21
				int startRecord=approvalsForm.getStartRecord();//11
				int endRecord=approvalsForm.getEndRecord();	
				
				
				if(totalRecords>endRecord)
				{
					if(totalRecords==endRecord)
					{
						startRecord=startRecord;
						endRecord=totalRecords;
					}
					if(totalRecords>endRecord)
					{
					startRecord=endRecord+1;
					endRecord=endRecord+10;
					}
					
					if (status.equalsIgnoreCase("User Request")) {
						LinkedList Usrreq = new LinkedList();
						String getITRecords = "";

						if (type.equalsIgnoreCase("Pending")) {
							getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.subject,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type"
									+ " from  All_Request as all_R,emp_official_info as  emp, HR_QUERIES as it where all_R.Pending_Approver='"
									+ user.getEmployeeNo()
									+ "' and all_R.Req_Status='Pending' and all_R.Req_Id=it.id and  all_R.Requester_Name=emp.PERNR "
									+ "and all_R.Req_Type='"+status+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.subject,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";

						}

						if (type.equalsIgnoreCase("Approved")) {
							getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.subject,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type"
									+ " from  All_Request as all_R,emp_official_info as  emp, HR_QUERIES as it where all_R.Last_Approver='"
									+ user.getEmployeeNo()
									+ "' and all_R.Req_Status='Approved' and all_R.Req_Id=it.id and  all_R.Requester_Name=emp.PERNR "
									+ "and all_R.Req_Type='"+status+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.subject,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";

						}
						if (type.equalsIgnoreCase("Rejected")) {
							getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.subject,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type"
									+ " from  All_Request as all_R,emp_official_info as  emp, HR_QUERIES as it where all_R.Last_Approver='"
									+ user.getEmployeeNo()
									+ "' and all_R.Req_Status='Rejected' and all_R.Req_Id=it.id and  all_R.Requester_Name=emp.PERNR "
									+ "and all_R.Req_Type='"+status+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.subject,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
						}

						if (type.equalsIgnoreCase("All")) {

							getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.subject,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type"
									+ " from  All_Request as all_R,emp_official_info as  emp, HR_QUERIES as it where (all_R.Last_Approver='"
									+ user.getEmployeeNo()
									+ "' or all_R.Pending_Approver='"
									+ user.getEmployeeNo()
									+ "')  and all_R.Req_Id=it.id and  all_R.Requester_Name=emp.PERNR "
									+ "and all_R.Req_Type='"+status+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.subject,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";

						}
						ResultSet rsit = ad.selectQuery(getITRecords);
						try {
							while (rsit.next()) {
								LeaveForm leave = new LeaveForm();
								leave.setRequestNumber(rsit.getInt("Req_Id"));
								leave.setEmployeeName(rsit.getString("EMP_FULLNAME"));
								leave.setSubmitDate(EMicroUtils.display(rsit
										.getDate("Req_Date")));
								leave.setStatus(rsit.getString("Req_Status"));
								
								leave.setReason(rsit.getString("subject"));
								leave.setLapprover(rsit.getString("Last_approver"));
								leave.setPapprover(rsit.getString("Pending_approver"));
								Usrreq.add(leave);

							}
							if (Usrreq.size() > 0) {
								if (type.equalsIgnoreCase("Pending")) {
									// request.setAttribute("displayButton",
									// "displayButton");
								}
							}
							request.setAttribute("Usrreq", Usrreq);
							if(Usrreq.size()==0){
								request.setAttribute("no records", "no  records");
								approvalsForm.setMessage3("No Records Found..");
							}
							
						if (Usrreq.size() != 0) {
							approvalsForm.setTotalRecords(totalRecords);
							approvalsForm.setStartRecord(startRecord);
							approvalsForm.setEndRecord(endRecord);
							request.setAttribute("nextButton", "nextButton");
							request.setAttribute("previousButton",
									"previousButton");
						} else {
							int start = startRecord;
							int end = startRecord;

							approvalsForm.setTotalRecords(totalRecords);
							approvalsForm.setStartRecord(start);
							approvalsForm.setEndRecord(end);

						}
						if (Usrreq.size() < 10) {
							approvalsForm.setTotalRecords(totalRecords);
							approvalsForm.setStartRecord(startRecord);
							approvalsForm.setEndRecord(startRecord
									+ Usrreq.size() - 1);
							request.setAttribute("nextButton", "");
							request.setAttribute("disableNextButton",
									"disableNextButton");
							request.setAttribute("previousButton",
									"previousButton");

						}

						if (endRecord == totalRecords) {
							request.setAttribute("nextButton", "");
							request.setAttribute("disableNextButton",
									"disableNextButton");
						}
						request.setAttribute("displayRecordNo",
								"displayRecordNo");
						} catch (SQLException e) {

							e.printStackTrace();
						}

					}
					 if (status.equalsIgnoreCase("OverTime")) {
							LinkedList OT = new LinkedList();
							String getITRecords = "";

							if (type.equalsIgnoreCase("Pending")) {
								getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
										+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, OVER_TIME_DETAILS as it where all_R.Pending_Approver='"
										+ user.getEmployeeNo()
										+ "' and all_R.Req_Status='Pending' and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
										+ "and all_R.Req_Type='"+status+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";

							}

							if (type.equalsIgnoreCase("Approved")) {
								getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
										+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, OVER_TIME_DETAILS as it where all_R.Last_Approver='"
										+ user.getEmployeeNo()
										+ "' and all_R.Req_Status='Approved' and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
										+ "and all_R.Req_Type='"+status+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";

							}
							if (type.equalsIgnoreCase("Rejected")) {
								getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
										+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, OVER_TIME_DETAILS as it where all_R.Last_Approver='"
										+ user.getEmployeeNo()
										+ "' and all_R.Req_Status='Rejected' and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
										+ "and all_R.Req_Type='"+status+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
							}

							if (type.equalsIgnoreCase("All")) {

								getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
										+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, OVER_TIME_DETAILS as it where (all_R.Last_Approver='"
										+ user.getEmployeeNo()
										+ "' or all_R.Pending_Approver='"
										+ user.getEmployeeNo()
										+ "')  and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
										+ "and all_R.Req_Type='"+status+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";

							}

							ResultSet rsit = ad.selectQuery(getITRecords);
							try {
								while (rsit.next()) {
									LeaveForm leave = new LeaveForm();
									leave.setRequestNumber(rsit.getInt("Req_Id"));
									leave.setEmployeeName(rsit.getString("EMP_FULLNAME"));
									leave.setSubmitDate(EMicroUtils.display(rsit
											.getDate("Req_Date")));
									leave.setStatus(rsit.getString("Req_Status"));
									leave.setStartDate(EMicroUtils.display(rsit
											.getDate("FromDate")));
									leave.setEndDate(EMicroUtils.display(rsit
											.getDate("ToDate")));
									leave.setPapprover(rsit.getString("Pending_approver"));
									
									leave.setLapprover(rsit.getString("Last_approver"));
									OT.add(leave);

								}
								if (OT.size() > 0) {
									if (type.equalsIgnoreCase("Pending")) {
										// request.setAttribute("displayButton",
										// "displayButton");
									}
								}
								request.setAttribute("OT", OT);
								if (OT.size() == 0) {
									request.setAttribute("no OT records",
											"no OT records");
									approvalsForm.setMessage3("No Records Found..");
									
									if (OT.size() != 0) {
										approvalsForm.setTotalRecords(totalRecords);
										approvalsForm.setStartRecord(startRecord);
										approvalsForm.setEndRecord(endRecord);
										request.setAttribute("nextButton", "nextButton");
										request.setAttribute("previousButton",
												"previousButton");
									} else {
										int start = startRecord;
										int end = startRecord;

										approvalsForm.setTotalRecords(totalRecords);
										approvalsForm.setStartRecord(start);
										approvalsForm.setEndRecord(end);

									}
									if (OT.size() < 10) {
										approvalsForm.setTotalRecords(totalRecords);
										approvalsForm.setStartRecord(startRecord);
										approvalsForm.setEndRecord(startRecord
												+ OT.size() - 1);
										request.setAttribute("nextButton", "");
										request.setAttribute("disableNextButton",
												"disableNextButton");
										request.setAttribute("previousButton",
												"previousButton");

									}

									if (endRecord == totalRecords) {
										request.setAttribute("nextButton", "");
										request.setAttribute("disableNextButton",
												"disableNextButton");
									}
									request.setAttribute("displayRecordNo",
											"displayRecordNo");
								}
							} catch (SQLException e) {

								e.printStackTrace();
							}

						}
					
					
					if (status.equalsIgnoreCase("Comp-Off/OT")) {
						LinkedList comp = new LinkedList();
						String getITRecords = "";

						if (type.equalsIgnoreCase("Pending")) {
							getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
									+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, COMP_OT as it where all_R.Pending_Approver='"
									+ user.getEmployeeNo()
									+ "' and all_R.Req_Status='Pending' and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
									+ "and all_R.Req_Type='Comp-Off/OT' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"
									+ startRecord
									+ "' and '"
									+ endRecord
									+ "' order by Req_Id desc";

						}

						if (type.equalsIgnoreCase("Approved")) {
							getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
									+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, COMP_OT as it where all_R.Last_Approver='"
									+ user.getEmployeeNo()
									+ "' and all_R.Req_Status='Approved' and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
									+ "and all_R.Req_Type='Comp-Off/OT' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"
									+ startRecord
									+ "' and '"
									+ endRecord
									+ "' order by Req_Id desc";

						}
						if (type.equalsIgnoreCase("Rejected")) {
							getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
									+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, COMP_OT as it where all_R.Last_Approver='"
									+ user.getEmployeeNo()
									+ "' and all_R.Req_Status='Rejected' and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
									+ "and all_R.Req_Type='Comp-Off/OT' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"
									+ startRecord
									+ "' and '"
									+ endRecord
									+ "' order by Req_Id desc";
						}

						if (type.equalsIgnoreCase("All")) {

							getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
									+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, COMP_OT as it where (all_R.Last_Approver='"
									+ user.getEmployeeNo()
									+ "' or all_R.Pending_Approver='"
									+ user.getEmployeeNo()
									+ "')  and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
									+ "and all_R.Req_Type='Comp-Off/OT' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub Where   sub.RowNum between '"
									+ startRecord
									+ "' and '"
									+ endRecord
									+ "' order by Req_Id desc";

						}

						ResultSet rsit = ad.selectQuery(getITRecords);
						try {
							while (rsit.next()) {
								LeaveForm leave = new LeaveForm();
								leave.setRequestNumber(rsit.getInt("Req_Id"));
								leave.setEmployeeName(rsit
										.getString("EMP_FULLNAME"));
								leave.setSubmitDate(EMicroUtils.display(rsit
										.getDate("Req_Date")));
								leave.setStatus(rsit.getString("Req_Status"));
								leave.setStartDate(EMicroUtils.display(rsit
										.getDate("FromDate")));
								leave.setEndDate(EMicroUtils.display(rsit
										.getDate("ToDate")));
		leave.setPapprover(rsit.getString("Pending_approver"));
								
								leave.setLapprover(rsit.getString("Last_approver"));
								comp.add(leave);

							}
							if (comp.size() > 0) {
								if (type.equalsIgnoreCase("Pending")) {
									// request.setAttribute("displayButton",
									// "displayButton");
								}
							}
							request.setAttribute("comp", comp);
							if (comp.size() == 0) {
								request.setAttribute("no it records",
										"no it records");
								approvalsForm.setMessage3("No Records Found..");
							}
							if (comp.size() != 0) {
								approvalsForm.setTotalRecords(totalRecords);
								approvalsForm.setStartRecord(startRecord);
								approvalsForm.setEndRecord(endRecord);
								request.setAttribute("nextButton", "nextButton");
								request.setAttribute("previousButton",
										"previousButton");
							} else {
								int start = startRecord;
								int end = startRecord;

								approvalsForm.setTotalRecords(totalRecords);
								approvalsForm.setStartRecord(start);
								approvalsForm.setEndRecord(end);

							}
							if (comp.size() < 10) {
								approvalsForm.setTotalRecords(totalRecords);
								approvalsForm.setStartRecord(startRecord);
								approvalsForm.setEndRecord(startRecord
										+ comp.size() - 1);
								request.setAttribute("nextButton", "");
								request.setAttribute("disableNextButton",
										"disableNextButton");
								request.setAttribute("previousButton",
										"previousButton");

							}

							if (endRecord == totalRecords) {
								request.setAttribute("nextButton", "");
								request.setAttribute("disableNextButton",
										"disableNextButton");
							}
							request.setAttribute("displayRecordNo",
									"displayRecordNo");

						} catch (SQLException e) {

							e.printStackTrace();
						}

					}
					
		if(status.equalsIgnoreCase("VC Booking"))
		 {
			 ApprovalsList apprList=new ApprovalsList();
			 approvalsForm.setStartRecord(startRecord);
			 approvalsForm.setEndRecord(endRecord);
			 LinkedList vcList=apprList.getApprovalsList(status,type,request,form);
			 if(vcList.size()>0){
					if(type.equalsIgnoreCase("Pending")){
						//request.setAttribute("displayButton", "displayButton");
						}
					}
			 request.setAttribute("vcList", vcList);
					if(vcList.size()==0){
						request.setAttribute("no VC records", "no VC records");
						approvalsForm.setMessage3("No Records Found..");
					}
					if(vcList.size()!=0)
					{
						approvalsForm.setTotalRecords(totalRecords);
						approvalsForm.setStartRecord(startRecord);
						approvalsForm.setEndRecord(endRecord);
						request.setAttribute("nextButton", "nextButton");
						request.setAttribute("previousButton", "previousButton");
					}
					else
					{
						int start=startRecord;
						int end=startRecord;
						
						approvalsForm.setTotalRecords(totalRecords);
						approvalsForm.setStartRecord(start);
						approvalsForm.setEndRecord(end);
						
					}
				 if(vcList.size()<10)
				 {
					 approvalsForm.setTotalRecords(totalRecords);
					 approvalsForm.setStartRecord(startRecord);
					 approvalsForm.setEndRecord(startRecord+vcList.size()-1);
						request.setAttribute("nextButton", "");
						request.setAttribute("disableNextButton", "disableNextButton");
						request.setAttribute("previousButton", "previousButton"); 
					 
				 }
				 
				 if(endRecord==totalRecords)
				 {
					 request.setAttribute("nextButton", "");
						request.setAttribute("disableNextButton", "disableNextButton");
				 }
				 request.setAttribute("displayRecordNo", "displayRecordNo");
			 
		 }		

			if(status.equalsIgnoreCase("Conference"))
			 {
				 ApprovalsList apprList=new ApprovalsList();
				 approvalsForm.setStartRecord(startRecord);
				 approvalsForm.setEndRecord(endRecord);
				 LinkedList confList=apprList.getApprovalsList(status,type,request,form);
				 if(confList.size()>0){
						if(type.equalsIgnoreCase("Pending")){
							//request.setAttribute("displayButton", "displayButton");
							}
						}
						request.setAttribute("confList", confList);
						if(confList.size()==0){
							request.setAttribute("no Conference records", "no Conference records");
							approvalsForm.setMessage3("No Records Found..");
						}
						if(confList.size()!=0)
						{
							approvalsForm.setTotalRecords(totalRecords);
							approvalsForm.setStartRecord(startRecord);
							approvalsForm.setEndRecord(endRecord);
							request.setAttribute("nextButton", "nextButton");
							request.setAttribute("previousButton", "previousButton");
						}
						else
						{
							int start=startRecord;
							int end=startRecord;
							
							approvalsForm.setTotalRecords(totalRecords);
							approvalsForm.setStartRecord(start);
							approvalsForm.setEndRecord(end);
							
						}
					 if(confList.size()<10)
					 {
						 approvalsForm.setTotalRecords(totalRecords);
						 approvalsForm.setStartRecord(startRecord);
						 approvalsForm.setEndRecord(startRecord+confList.size()-1);
							request.setAttribute("nextButton", "");
							request.setAttribute("disableNextButton", "disableNextButton");
							request.setAttribute("previousButton", "previousButton"); 
						 
					 }
					 
					 if(endRecord==totalRecords)
					 {
						 request.setAttribute("nextButton", "");
							request.setAttribute("disableNextButton", "disableNextButton");
					 }
					 request.setAttribute("displayRecordNo", "displayRecordNo");
				 
			 }
				  
				  if(status.equalsIgnoreCase("IT Request"))
					 {
						 LinkedList it=new LinkedList();
							String getITRecords="";
							
							if(type.equalsIgnoreCase("Pending")){
								getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
								"emp.EMP_FULLNAME,all_R.Req_Status,CONVERT(varchar(10),it.Req_date,103)+' '+ CONVERT(varchar(5),it.Req_date,108) as Req_date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_HELPDESK as it " +
								"where all_R.Pending_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Pending' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
								"all_R.Req_Type='IT Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";			
								
							}
							
							if(type.equalsIgnoreCase("Approved")){
								getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
								"emp.EMP_FULLNAME,all_R.Req_Status,CONVERT(varchar(10),it.Req_date,103)+' '+ CONVERT(varchar(5),it.Req_date,108) as Req_date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_HELPDESK as it " +
								"where all_R.Last_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Approved' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
								"all_R.Req_Type='IT Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
								
							}
							if(type.equalsIgnoreCase("Rejected")){
								
								getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
								"emp.EMP_FULLNAME,all_R.Req_Status,CONVERT(varchar(10),it.Req_date,103)+' '+ CONVERT(varchar(5),it.Req_date,108) as Req_date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_HELPDESK as it " +
								"where all_R.Last_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Rejected' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
								"all_R.Req_Type='IT Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
							}
							   if(type.equalsIgnoreCase("Completed")){
									
									getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
									"emp.EMP_FULLNAME,all_R.Req_Status,CONVERT(varchar(10),it.Req_date,103)+' '+ CONVERT(varchar(5),it.Req_date,108) as Req_date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_HELPDESK as it " +
									"where all_R.Last_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Completed' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
									"all_R.Req_Type='IT Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
								}
							
							if(type.equalsIgnoreCase("All")){
								
								getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
								"emp.EMP_FULLNAME,all_R.Req_Status,CONVERT(varchar(10),it.Req_date,103)+' '+ CONVERT(varchar(5),it.Req_date,108) as Req_date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_HELPDESK as it " +
								"where (all_R.Last_Approver='"+user.getEmployeeNo()+"' or all_R.Pending_Approver='"+user.getEmployeeNo()+"')  and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
								"all_R.Req_Type='IT Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
								
							}	
							
							ResultSet rsit=ad.selectQuery(getITRecords);
							try {
								while(rsit.next())
								{
									HelpDeskForm help=new HelpDeskForm();
									help.setRequestNumber(rsit.getString("Req_Id"));
									help.setRequestType(rsit.getString("type"));
									approvalsForm.setItType(rsit.getString("type"));
									help.setRequestername(rsit.getString("EMP_FULLNAME"));
									help.setRequestDate(rsit.getString("Req_Date"));
									help.setRequestStatus(rsit.getString("Req_Status"));
									help.setLastApprover(rsit.getString("Last_Approver"));
									help.setPendingApprover(rsit.getString("Pending_Approver"));
									help.setReqPriority(rsit.getString("Req_Priority"));
									help.setItEngStatus(rsit.getString("ITEng_Status"));
								
									it.add(help);
									
									
								}
								if(it.size()>0){
									if(type.equalsIgnoreCase("Pending")){
										//request.setAttribute("displayButton", "displayButton");
										}
									}
									request.setAttribute("it", it);
									if(it.size()==0){
										request.setAttribute("no it records", "no it records");
										approvalsForm.setMessage3("No Records Found..");
									}
									if(it.size()!=0)
									{
										approvalsForm.setTotalRecords(totalRecords);
										approvalsForm.setStartRecord(startRecord);
										approvalsForm.setEndRecord(endRecord);
										request.setAttribute("nextButton", "nextButton");
										request.setAttribute("previousButton", "previousButton");
									}
									else
									{
										int start=startRecord;
										int end=startRecord;
										
										approvalsForm.setTotalRecords(totalRecords);
										approvalsForm.setStartRecord(start);
										approvalsForm.setEndRecord(end);
										
									}
								 if(it.size()<10)
								 {
									 approvalsForm.setTotalRecords(totalRecords);
									 approvalsForm.setStartRecord(startRecord);
									 approvalsForm.setEndRecord(startRecord+it.size()-1);
										request.setAttribute("nextButton", "");
										request.setAttribute("disableNextButton", "disableNextButton");
										request.setAttribute("previousButton", "previousButton"); 
									 
								 }
								 
								 if(endRecord==totalRecords)
								 {
									 request.setAttribute("nextButton", "");
										request.setAttribute("disableNextButton", "disableNextButton");
								 }
								 request.setAttribute("displayRecordNo", "displayRecordNo");
									
									
							} catch (SQLException e) {
							
								e.printStackTrace();
							}
							
							
					 }
				  
				  if(status.equalsIgnoreCase("IT Sap Request"))
					 {
						 LinkedList it=new LinkedList();
							String getITRecords="";
							
							if(type.equalsIgnoreCase("Pending")){
								getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
								"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_SAP_ISSUES as it " +
								"where all_R.Pending_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Pending' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
								"all_R.Req_Type='IT Sap Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";			
								
							}
							
							if(type.equalsIgnoreCase("Approved")){
								getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
								"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_SAP_ISSUES as it " +
								"where all_R.Last_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Approved' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
								"all_R.Req_Type='IT Sap Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
								
							}
							if(type.equalsIgnoreCase("Rejected")){
								
								getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
								"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_SAP_ISSUES as it " +
								"where all_R.Last_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Rejected' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
								"all_R.Req_Type='IT Sap Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
							}
							   if(type.equalsIgnoreCase("Completed")){
									
									getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
									"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_SAP_ISSUES as it " +
									"where all_R.Last_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Completed' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
									"all_R.Req_Type='IT Sap Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
								}
							
							if(type.equalsIgnoreCase("All")){
								
								getITRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
								"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_SAP_ISSUES as it " +
								"where (all_R.Last_Approver='"+user.getEmployeeNo()+"' or all_R.Pending_Approver='"+user.getEmployeeNo()+"')  and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
								"all_R.Req_Type='IT Sap Request') as  sub Where   sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
								
							}	
							
							ResultSet rsit=ad.selectQuery(getITRecords);
							try {
								while(rsit.next())
								{
									HelpDeskForm help=new HelpDeskForm();
									help.setRequestNumber(rsit.getString("Req_Id"));
									help.setRequestType(rsit.getString("type"));
									approvalsForm.setItType(rsit.getString("type"));
									help.setRequestername(rsit.getString("EMP_FULLNAME"));
									help.setRequestDate(rsit.getString("Req_Date"));
									help.setRequestStatus(rsit.getString("Req_Status"));
									help.setLastApprover(rsit.getString("Last_Approver"));
									help.setPendingApprover(rsit.getString("Pending_Approver"));
									help.setReqPriority(rsit.getString("Req_Priority"));
									help.setItEngStatus(rsit.getString("ITEng_Status"));
								
									it.add(help);
									
									
								}
								if(it.size()>0){
									if(type.equalsIgnoreCase("Pending")){
										//request.setAttribute("displayButton", "displayButton");
										}
									}
									request.setAttribute("sapit", it);
									if(it.size()==0){
										request.setAttribute("no it records", "no it records");
										approvalsForm.setMessage3("No Records Found..");
									}
									if(it.size()!=0)
									{
										approvalsForm.setTotalRecords(totalRecords);
										approvalsForm.setStartRecord(startRecord);
										approvalsForm.setEndRecord(endRecord);
										request.setAttribute("nextButton", "nextButton");
										request.setAttribute("previousButton", "previousButton");
									}
									else
									{
										int start=startRecord;
										int end=startRecord;
										
										approvalsForm.setTotalRecords(totalRecords);
										approvalsForm.setStartRecord(start);
										approvalsForm.setEndRecord(end);
										
									}
								 if(it.size()<10)
								 {
									 approvalsForm.setTotalRecords(totalRecords);
									 approvalsForm.setStartRecord(startRecord);
									 approvalsForm.setEndRecord(startRecord+it.size()-1);
										request.setAttribute("nextButton", "");
										request.setAttribute("disableNextButton", "disableNextButton");
										request.setAttribute("previousButton", "previousButton"); 
									 
								 }
								 
								 if(endRecord==totalRecords)
								 {
									 request.setAttribute("nextButton", "");
										request.setAttribute("disableNextButton", "disableNextButton");
								 }
								 request.setAttribute("displayRecordNo", "displayRecordNo");
									
									
							} catch (SQLException e) {
							
								e.printStackTrace();
							}
							
							
					 }
				  
				  
				  
				  if(status.equalsIgnoreCase("Permission"))
					 {
						 LinkedList permList=new LinkedList();
							String getPermissionRecords="";
							String getPermissionDetails="select * from Permission_details where user_id='"+user.getEmployeeNo()+"' ";
							
							
							if(type.equalsIgnoreCase("Pending")){
								getPermissionRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS RowNum,all_R.Req_Id," +
							"all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type from  All_Request as all_R," +
						"emp_official_info as emp, Permission_details as perm where all_R.Pending_Approver='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' " +
						"and all_R.Req_Id=perm.request_no and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Permission' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type ) as  sub Where  " +
						"sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";					
								
							}
							
							if(type.equalsIgnoreCase("Approved")){
								
								getPermissionRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS RowNum,all_R.Req_Id," +
							"all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type from  All_Request as all_R," +
						"emp_official_info as emp, Permission_details as perm where  all_R.Last_Approver='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' " +
						"and all_R.Req_Id=perm.request_no and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Permission' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type ) as  sub Where  " +
						"sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
							}
							if(type.equalsIgnoreCase("Rejected")){
								
								getPermissionRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS RowNum,all_R.Req_Id," +
							"all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type from  All_Request as all_R," +
						"emp_official_info as emp, Permission_details as perm where  all_R.Approved_Persons='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' " +
						"and all_R.Req_Id=perm.request_no and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Permission' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type ) as  sub Where  " +
						"sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
							}
							if(type.equalsIgnoreCase("Cancelled")){
								
								getPermissionRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS RowNum,all_R.Req_Id," +
							"all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type from  All_Request as all_R," +
						"emp_official_info as emp, Permission_details as perm where  all_R.Approved_Persons='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' " +
						"and all_R.Req_Id=perm.request_no and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Permission' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type ) as  sub Where  " +
						"sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
							}
							if(type.equalsIgnoreCase("All")){
								
								getPermissionRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS RowNum,all_R.Req_Id," +
							"all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type from  All_Request as all_R," +
						"emp_official_info as emp, Permission_details as perm where  (all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"') " +
						"and all_R.Req_Id=perm.request_no and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Permission' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type ) as  sub Where  " +
						"sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
							}	
							
							ResultSet rsPermission=ad.selectQuery(getPermissionRecords);
							try{
							while(rsPermission.next())
							{
								MyRequestForm permission=new MyRequestForm();
								permission.setRequestNumber(rsPermission.getString("Req_Id"));
					            permission.setStartTime(rsPermission.getString("startTime"));
						          permission.setEndTime(rsPermission.getString("endTime"))		;
						      	permission.setRequestType(rsPermission.getString("type"));
								String requestDate=rsPermission.getString("Req_Date");
								int isthere = (requestDate.indexOf("/"));
								if(isthere <= 0){
									String req[]=requestDate.split(" ");
									requestDate=req[0];
									String a[]=requestDate.split("-");
									requestDate=a[2]+"/"+a[1]+"/"+a[0];
								}
								permission.setCreateDate(requestDate);
								permission.setEmployeeName(rsPermission.getString("EMP_FULLNAME"));
								permission.setApprover(rsPermission.getString("Req_Status"));
								permission.setEmployeeNumber(rsPermission.getString("Requester_Name"));
								String url="";
								
								permission.setUrl(url);
								//leaveMaster.setLastApprover(rsLeaveDetails.getString("Last_approver"));
								//leaveMaster.setPendingApprover(rsLeaveDetails.getString("Pending_approver"));
								permList.add(permission);
									
							}
							request.setAttribute("Permissionlist", permList);
						
							if(permList.size()>0){
								if(type.equalsIgnoreCase("Pending")){
									request.setAttribute("displayButton", "displayButton");
									}
								}
								
								if(permList.size()==0){
									request.setAttribute("no Permission records", "no Permission records");
									approvalsForm.setMessage3("No Records Found..");
								}
								
								if(permList.size()!=0)
								{
									approvalsForm.setTotalRecords(totalRecords);
									approvalsForm.setStartRecord(startRecord);
									approvalsForm.setEndRecord(endRecord);
									request.setAttribute("nextButton", "nextButton");
									request.setAttribute("previousButton", "previousButton");
								}
								else
								{
									int start=startRecord;
									int end=startRecord;
									
									approvalsForm.setTotalRecords(totalRecords);
									approvalsForm.setStartRecord(start);
									approvalsForm.setEndRecord(end);
									
								}
							 if(permList.size()<10)
							 {
								 approvalsForm.setTotalRecords(totalRecords);
								 approvalsForm.setStartRecord(startRecord);
								 approvalsForm.setEndRecord(startRecord+permList.size()-1);
									request.setAttribute("nextButton", "");
									request.setAttribute("disableNextButton", "disableNextButton");
									request.setAttribute("previousButton", "previousButton"); 
								 
							 }
							 
							 if(endRecord==totalRecords)
							 {
								 request.setAttribute("nextButton", "");
									request.setAttribute("disableNextButton", "disableNextButton");
							 }
							 request.setAttribute("displayRecordNo", "displayRecordNo");
							
							
							
								}catch (Exception e) {
									e.printStackTrace();
								}
						 
					 }
				  
				  
				  if(status.equalsIgnoreCase("On Duty")){

						LinkedList ondutyList=new LinkedList();
						String getOndutyRecords="";
						if(type.equalsIgnoreCase("Pending")){
							getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime," +
							"emp.EMP_FULLNAME,all_R.Req_Status,onduty.submit_date as Req_Date,onduty.start_date,onduty.end_date " +
							"from  All_Request as all_R,emp_official_info as emp,OnDuty_details as onduty where all_R.Pending_Approver='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' and all_R.Req_Id=onduty.request_no " +
							"and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='On Duty') as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
						}
						if(type.equalsIgnoreCase("Approved")){
							
							getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime," +
							"emp.EMP_FULLNAME,all_R.Req_Status,onduty.submit_date as Req_Date,onduty.start_date,onduty.end_date " +
							"from  All_Request as all_R,emp_official_info as emp,OnDuty_details as onduty where all_R.Last_Approver='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' and all_R.Req_Id=onduty.request_no " +
							"and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='On Duty') as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
						}
						if(type.equalsIgnoreCase("Rejected")){
							
							getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime," +
							"emp.EMP_FULLNAME,all_R.Req_Status,onduty.submit_date as Req_Date,onduty.start_date,onduty.end_date " +
							"from  All_Request as all_R,emp_official_info as emp,OnDuty_details as onduty where all_R.Approved_Persons='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' and all_R.Req_Id=onduty.request_no " +
							"and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='On Duty') as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
						}
						if(type.equalsIgnoreCase("Cancelled")){
							
							getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime," +
							"emp.EMP_FULLNAME,all_R.Req_Status,onduty.submit_date as Req_Date,onduty.start_date,onduty.end_date " +
							"from  All_Request as all_R,emp_official_info as emp,OnDuty_details as onduty where all_R.Approved_Persons='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' " +
							"  and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='On Duty' and all_R.Req_Id=onduty.request_no) as  sub Where  sub.RowNum between 1 and 10 order by Req_Id desc";
						}
						if(type.equalsIgnoreCase("All")){
							
							getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime," +
							"emp.EMP_FULLNAME,all_R.Req_Status,onduty.submit_date as Req_Date,onduty.start_date,onduty.end_date " +
							"from  All_Request as all_R,emp_official_info as emp,OnDuty_details as onduty where (all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"')" +
							"  and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='On Duty' and all_R.Req_Id=onduty.request_no) as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
						}
						ResultSet rsOnduty=ad.selectQuery(getOndutyRecords);
						try{
						while(rsOnduty.next()){
						OnDutyForm onduty=new OnDutyForm();
						onduty.setRequestNumber(rsOnduty.getInt("Req_Id"));
						onduty.setEmployeeNumber(rsOnduty.getString("Requester_Name"));
					
						onduty.setOnDutyType(rsOnduty.getString("onDuty_Type"));
						onduty.setLocationId(rsOnduty.getString("location"));
						onduty.setEmployeeName(rsOnduty.getString("EMP_FULLNAME"));
						onduty.setSubmitDate(rsOnduty.getString("Req_Date"));
						onduty.setStartDate(EMicroUtils.display(rsOnduty.getDate("start_date")));
						onduty.setLocationId(rsOnduty.getString("location"));
						onduty.setStartTime(rsOnduty.getString("startTime"));
						onduty.setEndDate(EMicroUtils.display(rsOnduty.getDate("end_date")));
						
						
						onduty.setEndTime(rsOnduty.getString("endTime"));
						onduty.setApprover(rsOnduty.getString("Req_Status"));
						ondutyList.add(onduty);
						}
						request.setAttribute("ondutyList", ondutyList);
						if(ondutyList.size()>0){
						if(type.equalsIgnoreCase("Pending")){
							request.setAttribute("displayButton", "displayButton");
							}
						}
						
						if(ondutyList.size()==0){
							request.setAttribute("no OnDuty records", "no OnDuty records");
							approvalsForm.setMessage3("No Records Found..");
						}
						
						if(ondutyList.size()!=0)
						{
							approvalsForm.setTotalRecords(totalRecords);
							approvalsForm.setStartRecord(startRecord);
							approvalsForm.setEndRecord(endRecord);
							request.setAttribute("nextButton", "nextButton");
							request.setAttribute("previousButton", "previousButton");
						}
						else
						{
							int start=startRecord;
							int end=startRecord;
							
							approvalsForm.setTotalRecords(totalRecords);
							approvalsForm.setStartRecord(start);
							approvalsForm.setEndRecord(end);
							
						}
					 if(ondutyList.size()<10)
					 {
						 approvalsForm.setTotalRecords(totalRecords);
						 approvalsForm.setStartRecord(startRecord);
						 approvalsForm.setEndRecord(startRecord+ondutyList.size()-1);
							request.setAttribute("nextButton", "");
							request.setAttribute("disableNextButton", "disableNextButton");
							request.setAttribute("previousButton", "previousButton"); 
						 
					 }
					 
					 if(endRecord==totalRecords)
					 {
						 request.setAttribute("nextButton", "");
							request.setAttribute("disableNextButton", "disableNextButton");
					 }
					 request.setAttribute("displayRecordNo", "displayRecordNo");
						
						
						}catch (Exception e) {
							e.printStackTrace();
						}
						
					
				 }		  
				  
				  
				  
				  if(status.equalsIgnoreCase("Customer Master"))
					{
					 

					 String getcustMasterList="";
					 ResultSet rsVendor;
					 ArrayList materialList=new ArrayList();
					 try{
						 if(type.equalsIgnoreCase("Pending")){
							 
							 getcustMasterList=" Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id," +
				"all_r.Req_Date,all_r.type,s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status," +
				"acc.ACCOUNT_GROUP_NAME	from  All_Request as all_r,emp_official_info as emp,CUSTOMER_MASTER_M as s,ACCOUNT_GROUP_M as acc  " +
				"where all_r.Req_Type='Customer Master'  and all_r.Pending_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and  " +
				"s.REQUEST_NO=all_r.Req_Id  and all_r.Req_Status='Pending' and acc.MATERIAL_TYPE_ID=s.ACCOUNT_GROUP_ID )as   sub Where  " +
				"sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc ";
					 }
						 if(type.equalsIgnoreCase("Approved")||type.equalsIgnoreCase("Completed")){
							 
							 getcustMasterList=" Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id," +
				"all_r.Req_Date,all_r.type,s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status," +
				"acc.ACCOUNT_GROUP_NAME	from  All_Request as all_r,emp_official_info as emp,CUSTOMER_MASTER_M as s,ACCOUNT_GROUP_M as acc  " +
				"where all_r.Req_Type='Customer Master'  and all_r.Last_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and  " +
				"s.REQUEST_NO=all_r.Req_Id  and all_r.Req_Status='Approved' and acc.MATERIAL_TYPE_ID=s.ACCOUNT_GROUP_ID )as   sub Where  " +
				"sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc ";
					 }	
	 if(type.equalsIgnoreCase("Rejected")){
							 
							 getcustMasterList=" Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id," +
				"all_r.Req_Date,all_r.type,s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status," +
				"acc.ACCOUNT_GROUP_NAME	from  All_Request as all_r,emp_official_info as emp,CUSTOMER_MASTER_M as s,ACCOUNT_GROUP_M as acc  " +
				"where all_r.Req_Type='Customer Master'  and all_r.Approved_Persons='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and  " +
				"s.REQUEST_NO=all_r.Req_Id  and all_r.Req_Status='Rejected' and acc.MATERIAL_TYPE_ID=s.ACCOUNT_GROUP_ID )as   sub Where  " +
				"sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc ";
					 }	
			 if(type.equalsIgnoreCase("All")){
				 
				 getcustMasterList=" Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id," +
			"all_r.Req_Date,all_r.type,s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status," +
			"acc.ACCOUNT_GROUP_NAME	from  All_Request as all_r,emp_official_info as emp,CUSTOMER_MASTER_M as s,ACCOUNT_GROUP_M as acc  " +
			"where all_r.Req_Type='Customer Master'  and (all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"') and emp.PERNR=all_r.Requester_Name and  " +
			"s.REQUEST_NO=all_r.Req_Id   and acc.MATERIAL_TYPE_ID=s.ACCOUNT_GROUP_ID )as   sub Where  " +
			"sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc ";
			}
					
						 
						 rsVendor=ad.selectQuery(getcustMasterList);
							while(rsVendor.next()){
							MyRequestForm customer=new MyRequestForm();
							customer.setRequestNumber(rsVendor.getString("Req_Id"));
							
							customer.setRequestType(rsVendor.getString("EMP_FULLNAME"));
							customer.setName(rsVendor.getString("name"));
							customer.setLocationName(rsVendor.getString("CITY"));
							customer.setVendorType(rsVendor.getString("ACCOUNT_GROUP_NAME"));
							String requestDate=rsVendor.getString("Req_Date");
							
						
							customer.setCreateDate(requestDate);
							customer.setApprovalStatus(rsVendor.getString("Req_Status"));
							
							customer.setLastApprover(rsVendor.getString("last_approver"));
							customer.setPendingApprover(rsVendor.getString("pending_approver"));

							materialList.add(customer);
								
							}	 
							request.setAttribute("myRequest", materialList);	
							request.setAttribute("customer  list", "customer  list");	
							if(materialList.size()==0){
								request.setAttribute("no Material Master records", "no Material Master records");
								approvalsForm.setMessage3("No Records Found..");
							}
							if(materialList.size()!=0)
							{
								approvalsForm.setTotalRecords(totalRecords);
								approvalsForm.setStartRecord(startRecord);
								approvalsForm.setEndRecord(endRecord);
								request.setAttribute("nextButton", "nextButton");
								request.setAttribute("previousButton", "previousButton");
							}
							else
							{
								int start=startRecord;
								int end=startRecord;
								
								approvalsForm.setTotalRecords(totalRecords);
								approvalsForm.setStartRecord(start);
								approvalsForm.setEndRecord(end);
								
							}
						 if(materialList.size()<10)
						 {
							 approvalsForm.setTotalRecords(totalRecords);
							 approvalsForm.setStartRecord(startRecord);
							 approvalsForm.setEndRecord(startRecord+materialList.size()-1);
								request.setAttribute("nextButton", "");
								request.setAttribute("disableNextButton", "disableNextButton");
								request.setAttribute("previousButton", "previousButton"); 
							 
						 }
						 
						 if(endRecord==totalRecords)
						 {
							 request.setAttribute("nextButton", "");
								request.setAttribute("disableNextButton", "disableNextButton");
						 }
						 request.setAttribute("displayRecordNo", "displayRecordNo");
					 }
					 catch (Exception e) {
						e.printStackTrace();
					}
					
					 
					 
					 
					 
					}
				  
				  if(status.equalsIgnoreCase("Vendor Master"))
					{
					 String getVendorMasterList="";
					 ResultSet rsVendor;
					 ArrayList materialList=new ArrayList();
					 try{
						 if(type.equalsIgnoreCase("Pending")){
					getVendorMasterList=" Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,all_r.type," +
							"s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,acc.ACCOUNT_GROUP_NAME	" +
							"from  All_Request as all_r,emp_official_info as emp,vendor_master_m as s,ACCOUNT_GROUP_M as acc  where all_r.Req_Type='Vendor Master'  " +
							"and all_r.Pending_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id  " +
							"and all_r.Req_Status='Pending' and acc.ACCOUNT_GROUP_ID=s.ACCOUNT_GROUP_ID)as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
					 }
						 if(type.equalsIgnoreCase("Approved")||type.equalsIgnoreCase("Completed")){
								getVendorMasterList=" Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,all_r.type," +
										"s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,acc.ACCOUNT_GROUP_NAME	" +
										"from  All_Request as all_r,emp_official_info as emp,vendor_master_m as s,ACCOUNT_GROUP_M as acc  where all_r.Req_Type='Vendor Master'  " +
										"and  all_r.Last_Approver='"+user.getEmployeeNo()+"' and  all_r.Req_Status='Approved' and emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id  " +
										" and acc.ACCOUNT_GROUP_ID=s.ACCOUNT_GROUP_ID)as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
								 }
						 if(type.equalsIgnoreCase("Rejected")){
								getVendorMasterList=" Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,all_r.type," +
										"s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,acc.ACCOUNT_GROUP_NAME	" +
										"from  All_Request as all_r,emp_official_info as emp,vendor_master_m as s,ACCOUNT_GROUP_M as acc  where all_r.Req_Type='Vendor Master'  " +
										"and all_r.Approved_Persons='"+user.getEmployeeNo()+"' and  all_r.Req_Status='Rejected' and emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id  " +
										" and acc.ACCOUNT_GROUP_ID=s.ACCOUNT_GROUP_ID)as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
								 }
						 if(type.equalsIgnoreCase("All")){
								getVendorMasterList=" Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,all_r.type," +
										"s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,acc.ACCOUNT_GROUP_NAME	" +
										"from  All_Request as all_r,emp_official_info as emp,vendor_master_m as s,ACCOUNT_GROUP_M as acc  where all_r.Req_Type='Vendor Master'  " +
										"and (all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"') and emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id  " +
										" and acc.ACCOUNT_GROUP_ID=s.ACCOUNT_GROUP_ID)as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
								 }
					
						 
						 rsVendor=ad.selectQuery(getVendorMasterList);
							while(rsVendor.next()){
							MyRequestForm vendor=new MyRequestForm();
							vendor.setRequestNumber(rsVendor.getString("Req_Id"));
							
							vendor.setRequestType(rsVendor.getString("EMP_FULLNAME"));
							vendor.setName(rsVendor.getString("name"));
							vendor.setLocationName(rsVendor.getString("CITY"));
							vendor.setVendorType(rsVendor.getString("ACCOUNT_GROUP_NAME"));
							vendor.setCreateDate(EMicroUtils.display(rsVendor.getDate("Req_Date")));
							vendor.setApprovalStatus(rsVendor.getString("Req_Status"));
							
							vendor.setLastApprover(rsVendor.getString("last_approver"));
							vendor.setPendingApprover(rsVendor.getString("pending_approver"));

							materialList.add(vendor);
								
							}	 
							request.setAttribute("myRequestList", materialList);	
							request.setAttribute("vendor  list", "vendor  list");
							
							if(materialList.size()==0){
								request.setAttribute("no Material Master records", "no Material Master records");
								approvalsForm.setMessage3("No Records Found..");
							}
							if(materialList.size()!=0)
							{
								approvalsForm.setTotalRecords(totalRecords);
								approvalsForm.setStartRecord(startRecord);
								approvalsForm.setEndRecord(endRecord);
								request.setAttribute("nextButton", "nextButton");
								request.setAttribute("previousButton", "previousButton");
							}
							else
							{
								int start=startRecord;
								int end=startRecord;
								
								approvalsForm.setTotalRecords(totalRecords);
								approvalsForm.setStartRecord(start);
								approvalsForm.setEndRecord(end);
								
							}
						 if(materialList.size()<10)
						 {
							 approvalsForm.setTotalRecords(totalRecords);
							 approvalsForm.setStartRecord(startRecord);
							 approvalsForm.setEndRecord(startRecord+materialList.size()-1);
								request.setAttribute("nextButton", "");
								request.setAttribute("disableNextButton", "disableNextButton");
								request.setAttribute("previousButton", "previousButton"); 
							 
						 }
						 
						 if(endRecord==totalRecords)
						 {
							 request.setAttribute("nextButton", "");
								request.setAttribute("disableNextButton", "disableNextButton");
						 }
						 request.setAttribute("displayRecordNo", "displayRecordNo");
							
							
					 }catch (Exception e) {
						e.printStackTrace();
					}
					}
				  
				  if(status.equalsIgnoreCase("Code Extention"))
					{
					 String getCodeExtention="";
					 ResultSet rsCodeExtention;
					 ArrayList materialList=new ArrayList();
				
					try{
					
					if(type.equalsIgnoreCase("Pending")){
						
						getCodeExtention="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE," +
								"all_r.type,s.TYPE as matType,s.REQUEST_NO,s.CREATED_DATE,s.APPROVE_TYPE,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,s.MATERIAL_SHORT_NAME,MATERIAL_CODE_1,MATERIAL_CODE_2 from Location as loc,All_Request as all_r," +
								"emp_official_info as emp,code_extenstion_request as s where all_r.Req_Type='Code Extention' and all_r.Pending_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name " +
								"and s.REQUEST_NO=all_r.Req_Id and (s.PLANT_1=loc.LOCATION_CODE or s.PLANT_2=loc.LOCATION_CODE)  and all_r.Req_Status='"+type+"')as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
									}
									if(type.equalsIgnoreCase("Approved")||type.equalsIgnoreCase("Completed")){
										getCodeExtention="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE," +
										"all_r.type,s.TYPE as matType,s.REQUEST_NO,s.CREATED_DATE,s.APPROVE_TYPE,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,s.MATERIAL_SHORT_NAME,MATERIAL_CODE_1,MATERIAL_CODE_2 from Location as loc,All_Request as all_r," +
										"emp_official_info as emp,code_extenstion_request as s where all_r.Req_Type='Code Extention' and all_r.Last_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name " +
										"and s.REQUEST_NO=all_r.Req_Id and (s.PLANT_1=loc.LOCATION_CODE or s.PLANT_2=loc.LOCATION_CODE)  and all_r.Req_Status='"+type+"')as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
											}
									if(type.equalsIgnoreCase("Rejected")){
										getCodeExtention="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE," +
										"all_r.type,s.TYPE as matType,s.REQUEST_NO,s.CREATED_DATE,s.APPROVE_TYPE,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,s.MATERIAL_SHORT_NAME,MATERIAL_CODE_1,MATERIAL_CODE_2 from Location as loc,All_Request as all_r," +
										"emp_official_info as emp,code_extenstion_request as s where all_r.Req_Type='Code Extention' and all_r.Approved_Persons='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name " +
										"and s.REQUEST_NO=all_r.Req_Id and (s.PLANT_1=loc.LOCATION_CODE or s.PLANT_2=loc.LOCATION_CODE)  and all_r.Req_Status='"+type+"')as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
											}
									if(type.equalsIgnoreCase("All")){
										getCodeExtention="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE," +
										"all_r.type,s.TYPE as matType,s.REQUEST_NO,s.CREATED_DATE,s.APPROVE_TYPE,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,s.MATERIAL_SHORT_NAME,MATERIAL_CODE_1,MATERIAL_CODE_2 from Location as loc,All_Request as all_r," +
										"emp_official_info as emp,code_extenstion_request as s where all_r.Req_Type='Code Extention' and (all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"') and emp.PERNR=all_r.Requester_Name " +
										"and s.REQUEST_NO=all_r.Req_Id and (s.PLANT_1=loc.LOCATION_CODE or s.PLANT_2=loc.LOCATION_CODE)  )as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";
											}
							
							 rsCodeExtention=ad.selectQuery(getCodeExtention);
							while(rsCodeExtention.next()){
							MyRequestForm codeExtentionRec=new MyRequestForm();
							codeExtentionRec.setRequestNumber(rsCodeExtention.getString("REQUEST_NO"));
							codeExtentionRec.setLocationName(rsCodeExtention.getString("location_code"));
							codeExtentionRec.setRequestType("Code Extention");
							codeExtentionRec.setPlantType(rsCodeExtention.getString("matType"));
							String sapNo="";
							if(rsCodeExtention.getString("matType").equals("Plant"))
								sapNo=rsCodeExtention.getString("MATERIAL_CODE_1");
							else
								sapNo=rsCodeExtention.getString("MATERIAL_CODE_2");
							codeExtentionRec.setSapNo(sapNo);
							codeExtentionRec.setDescription(rsCodeExtention.getString("MATERIAL_SHORT_NAME"));
							String requestDate=rsCodeExtention.getString("CREATED_DATE");
							String req[]=requestDate.split(" ");
							requestDate=req[0];
							String a[]=requestDate.split("-");
							requestDate=a[2]+"/"+a[1]+"/"+a[0];
							codeExtentionRec.setCreateDate(requestDate);
							codeExtentionRec.setApprovalStatus(rsCodeExtention.getString("Req_Status"));
							String url="materialCodeExtenstion.do?method=editCodeExtension";
							codeExtentionRec.setUrl(url);
							codeExtentionRec.setLastApprover(rsCodeExtention.getString("last_approver"));
							codeExtentionRec.setPendingApprover(rsCodeExtention.getString("pending_approver"));

					materialList.add(codeExtentionRec);
						
					}
					request.setAttribute("Code Extention list", materialList);	
					if(materialList.size()==0){
						request.setAttribute("no Material Master records", "no Material Master records");
						approvalsForm.setMessage3("No Records Found..");
					}
					if(materialList.size()!=0)
					{
						approvalsForm.setTotalRecords(totalRecords);
						approvalsForm.setStartRecord(startRecord);
						approvalsForm.setEndRecord(endRecord);
						request.setAttribute("nextButton", "nextButton");
						request.setAttribute("previousButton", "previousButton");
					}
					else
					{
						int start=startRecord;
						int end=startRecord;
						
						approvalsForm.setTotalRecords(totalRecords);
						approvalsForm.setStartRecord(start);
						approvalsForm.setEndRecord(end);
						
					}
				 if(materialList.size()<10)
				 {
					 approvalsForm.setTotalRecords(totalRecords);
					 approvalsForm.setStartRecord(startRecord);
					 approvalsForm.setEndRecord(startRecord+materialList.size()-1);
						request.setAttribute("nextButton", "");
						request.setAttribute("disableNextButton", "disableNextButton");
						request.setAttribute("previousButton", "previousButton"); 
					 
				 }
				 
				 if(endRecord==totalRecords)
				 {
					 request.setAttribute("nextButton", "");
						request.setAttribute("disableNextButton", "disableNextButton");
				 }
				 request.setAttribute("displayRecordNo", "displayRecordNo");
					if(materialList.size()==0){
						request.setAttribute("no Service Master records", "no Service Master records");
						approvalsForm.setMessage3("No Records Found..");
					}
					}catch (Exception e) {
						e.printStackTrace();
					}
					}
				 
				  
				  if(status.equalsIgnoreCase("Service Master")){

						 String getMaterialRecords="";
							if(type.equalsIgnoreCase("Pending")){
						getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date," +
						"loc.LOCATION_CODE,all_r.type,s.service_description,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status	from Location as loc," +
						" All_Request as all_r,emp_official_info as emp,SERVICE_MASTER as s where all_r.Req_Type='Service Master' and all_r.Pending_Approver='"+user.getEmployeeNo()+"' and " +
						"emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id and s.plant_code=loc.LOCID and all_r.Req_Status='"+type+"')as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
							}
							if(type.equalsIgnoreCase("Approved")||type.equalsIgnoreCase("Completed")){
								getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date," +
								"loc.LOCATION_CODE,all_r.type,s.service_description,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status	from Location as loc," +
								" All_Request as all_r,emp_official_info as emp,SERVICE_MASTER as s where all_r.Req_Type='Service Master' and all_r.Last_Approver='"+user.getEmployeeNo()+"' and " +
								"emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id and s.plant_code=loc.LOCID and all_r.Req_Status='"+type+"')as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
							
							}
							if(type.equalsIgnoreCase("Rejected")){
								getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date," +
								"loc.LOCATION_CODE,all_r.type,s.service_description,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status	from Location as loc," +
								" All_Request as all_r,emp_official_info as emp,SERVICE_MASTER as s where all_r.Req_Type='Service Master' and all_r.Approved_Persons='"+user.getEmployeeNo()+"' and " +
								"emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id and s.plant_code=loc.LOCID and all_r.Req_Status='"+type+"')as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
							
							}
							if(type.equalsIgnoreCase("All")){
								getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS RowNum,all_r.Req_Id,all_r.Req_Date," +
								"loc.LOCATION_CODE,all_r.type,s.service_description,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status	" +
								"from Location as  loc, All_Request as all_r,emp_official_info as emp,SERVICE_MASTER as s where all_r.Req_Type='Service Master' and " +
								"(all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"') and emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id and  " +
								"s.plant_code=loc.LOCID )as  sub Where  sub.RowNum   between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
							
							}
							
							ResultSet rsMat=ad.selectQuery(getMaterialRecords);	 
							try{
								LinkedList materialList=new LinkedList();
								while(rsMat.next()){
								MaterialCodeRequestForm masterForm=new MaterialCodeRequestForm();
								masterForm.setRequestNumber(rsMat.getString("Req_Id"));
								masterForm.setRequestDate(rsMat.getString("Req_Date"));
								masterForm.setLocationCode(rsMat.getString("LOCATION_CODE"));
								masterForm.setMaterailType(rsMat.getString("type"));
								masterForm.setEmployeeName(rsMat.getString("EMP_FULLNAME"));
								masterForm.setServiceDescription(rsMat.getString("service_description"));
								masterForm.setLastApprover(rsMat.getString("last_approver"));
								masterForm.setPendingApprover(rsMat.getString("pending_approver"));
								masterForm.setApproveStatus(rsMat.getString("Req_Status"));
								
								materialList.add(masterForm);
								
								}
								request.setAttribute("serviceMaster", materialList);
								request.setAttribute("Service Master List", "Service Master List");
								
								if(materialList.size()==0){
									request.setAttribute("no Material Master records", "no Material Master records");
									approvalsForm.setMessage3("No Records Found..");
								}
								if(materialList.size()!=0)
								{
									approvalsForm.setTotalRecords(totalRecords);
									approvalsForm.setStartRecord(startRecord);
									approvalsForm.setEndRecord(endRecord);
									request.setAttribute("nextButton", "nextButton");
									request.setAttribute("previousButton", "previousButton");
								}
								else
								{
									int start=startRecord;
									int end=startRecord;
									
									approvalsForm.setTotalRecords(totalRecords);
									approvalsForm.setStartRecord(start);
									approvalsForm.setEndRecord(end);
									
								}
							 if(materialList.size()<10)
							 {
								 approvalsForm.setTotalRecords(totalRecords);
								 approvalsForm.setStartRecord(startRecord);
								 approvalsForm.setEndRecord(startRecord+materialList.size()-1);
									request.setAttribute("nextButton", "");
									request.setAttribute("disableNextButton", "disableNextButton");
									request.setAttribute("previousButton", "previousButton"); 
								 
							 }
							 
							 if(endRecord==totalRecords)
							 {
								 request.setAttribute("nextButton", "");
									request.setAttribute("disableNextButton", "disableNextButton");
							 }
							 request.setAttribute("displayRecordNo", "displayRecordNo");
								
								
								
								
								
								
								if(materialList.size()==0){
									request.setAttribute("no Service Master records", "no Service Master records");
									approvalsForm.setMessage3("No Records Found..");
								}
							}catch (Exception e) {
								e.printStackTrace();
							}
					 
				  }
				  
				  if(status.equalsIgnoreCase("Material Master")){
						
						String getMaterialRecords="";
						if(type.equalsIgnoreCase("Pending")){
							getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE,all_r.type,mat.MATERIAL_SHORT_NAME,emp.EMP_FULLNAME,mat.last_approver,mat.pending_approver," +
							"all_r.Req_Status,mat.MATERIAL_GROUP_ID from Location as loc, All_Request as all_r,emp_official_info as emp,material_code_request as mat " +
							"where all_r.Req_Type='Material Master' and all_r.Pending_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and mat.REQUEST_NO=all_r.Req_Id " +
							"and mat.LOCATION_ID=loc.LOCID and all_r.Req_Status='"+type+"' )as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";	
								}
							if(type.equalsIgnoreCase("Approved")){
								getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE,all_r.type,mat.MATERIAL_SHORT_NAME,emp.EMP_FULLNAME,mat.last_approver,mat.pending_approver," +
								"all_r.Req_Status,mat.MATERIAL_GROUP_ID from Location as loc, All_Request as all_r,emp_official_info as emp,material_code_request as mat  " +
								"where all_r.Req_Type='Material Master' and all_r.Last_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and mat.REQUEST_NO=all_r.Req_Id " +
								"and mat.LOCATION_ID=loc.LOCID and all_r.Req_Status='"+type+"' )as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";	
									}
							
							if(type.equalsIgnoreCase("Completed")){
								getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE,all_r.type,mat.MATERIAL_SHORT_NAME,emp.EMP_FULLNAME,mat.last_approver,mat.pending_approver," +
								"all_r.Req_Status,mat.MATERIAL_GROUP_ID from Location as loc, All_Request as all_r,emp_official_info as emp,material_code_request as mat " +
								"where all_r.Req_Type='Material Master' and all_r.Last_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and mat.REQUEST_NO=all_r.Req_Id " +
								"and mat.LOCATION_ID=loc.LOCID and all_r.Req_Status='"+type+"')as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";	
									}
							
							if(type.equalsIgnoreCase("Rejected")){
								getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE,all_r.type,mat.MATERIAL_SHORT_NAME,emp.EMP_FULLNAME,mat.last_approver,mat.pending_approver," +
								"all_r.Req_Status,mat.MATERIAL_GROUP_ID from Location as loc, All_Request as all_r,emp_official_info as emp,material_code_request as mat " +
								"where all_r.Req_Type='Material Master' and all_r.Approved_Persons='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and mat.REQUEST_NO=all_r.Req_Id " +
								"and mat.LOCATION_ID=loc.LOCID and all_r.Req_Status='"+type+"' )as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";	
								
										}
							if(type.equalsIgnoreCase("All")){
								getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE,all_r.type,mat.MATERIAL_SHORT_NAME,emp.EMP_FULLNAME,mat.last_approver,mat.pending_approver," +
								"all_r.Req_Status,mat.MATERIAL_GROUP_ID from Location as loc, All_Request as all_r,emp_official_info as emp,material_code_request as mat " +
								"where all_r.Req_Type='Material Master' and (all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"') and emp.PERNR=all_r.Requester_Name and mat.REQUEST_NO=all_r.Req_Id " +
								"and mat.LOCATION_ID=loc.LOCID  )as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";	
								
									}
			ResultSet rsMat=ad.selectQuery(getMaterialRecords);	 
			try{
				LinkedList materialList=new LinkedList();
				while(rsMat.next()){
				MaterialCodeRequestForm masterForm=new MaterialCodeRequestForm();
				masterForm.setRequestNumber(rsMat.getString("Req_Id"));
				masterForm.setRequestDate(rsMat.getString("Req_Date"));
				masterForm.setLocationCode(rsMat.getString("LOCATION_CODE"));
				masterForm.setMaterialDesc(rsMat.getString("type"));
				masterForm.setMaterailType(rsMat.getString("type"));
				masterForm.setEmployeeName(rsMat.getString("EMP_FULLNAME"));
				masterForm.setMaterialName(rsMat.getString("MATERIAL_SHORT_NAME"));
				masterForm.setLastApprover(rsMat.getString("last_approver"));
				masterForm.setPendingApprover(rsMat.getString("pending_approver"));
				masterForm.setApproveStatus(rsMat.getString("Req_Status"));
				masterForm.setMaterialGroup(rsMat.getString("MATERIAL_GROUP_ID"));
				materialList.add(masterForm);
				
				}
				request.setAttribute("materialList", materialList);
				request.setAttribute("Material List", "Material List");
				if(materialList.size()==0){
					request.setAttribute("no Material Master records", "no Material Master records");
					approvalsForm.setMessage3("No Records Found..");
				}
				if(materialList.size()!=0)
				{
					approvalsForm.setTotalRecords(totalRecords);
					approvalsForm.setStartRecord(startRecord);
					approvalsForm.setEndRecord(endRecord);
					request.setAttribute("nextButton", "nextButton");
					request.setAttribute("previousButton", "previousButton");
				}
				else
				{
					int start=startRecord;
					int end=startRecord;
					
					approvalsForm.setTotalRecords(totalRecords);
					approvalsForm.setStartRecord(start);
					approvalsForm.setEndRecord(end);
					
				}
			 if(materialList.size()<10)
			 {
				 approvalsForm.setTotalRecords(totalRecords);
				 approvalsForm.setStartRecord(startRecord);
				 approvalsForm.setEndRecord(startRecord+materialList.size()-1);
					request.setAttribute("nextButton", "");
					request.setAttribute("disableNextButton", "disableNextButton");
					request.setAttribute("previousButton", "previousButton"); 
				 
			 }
			 
			 if(endRecord==totalRecords)
			 {
				 request.setAttribute("nextButton", "");
					request.setAttribute("disableNextButton", "disableNextButton");
			 }
			 request.setAttribute("displayRecordNo", "displayRecordNo");
				
			}catch (Exception e) {
				e.printStackTrace();
			}
					
			if(type.equalsIgnoreCase("Pending")){
				request.setAttribute("displayButton", "displayButton");
				}
				 
			
				  }
				  
				  if(status.equalsIgnoreCase("Leave"))
					{
					  LinkedList leaveList=new LinkedList();
					  String getLeaveRecords="";
						if(type.equalsIgnoreCase("Pending")){
					getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,leave.leave_type," +
						"emp.EMP_FULLNAME,all_R.Req_Status,leave.submit_date as Req_Date,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days from  All_Request as all_R," +
						"emp_official_info as emp,leave_details as leave where all_R.Pending_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Type='Leave' and Req_Status='"+type+"' and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id) " +
						"as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
						}
						if(type.equalsIgnoreCase("Approved")){
							getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,leave.leave_type," +
									"emp.EMP_FULLNAME,all_R.Req_Status,leave.submit_date as Req_Date,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days from  All_Request as all_R," +
									"emp_official_info as emp,leave_details as leave where all_R.Last_Approver='"+user.getEmployeeNo()+"' and Req_Status='"+type+"'  and all_R.Req_Type='Leave' and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id) " +
									"as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by RowNum desc";
								}
						if(type.equalsIgnoreCase("Rejected")){
							getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,leave.leave_type," +
							"emp.EMP_FULLNAME,all_R.Req_Status,leave.submit_date as Req_Date,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days from  All_Request as all_R," +
							"emp_official_info as emp,leave_details as leave where all_R.Last_Approver='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' and all_R.Req_Type='Leave' and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id) " +
							"as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
						}
						if(type.equalsIgnoreCase("Cancelled")){
							getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,leave.leave_type," +
									"emp.EMP_FULLNAME,all_R.Req_Status,leave.submit_date as Req_Date,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days from  All_Request as all_R," +
									"emp_official_info as emp,leave_details as leave where all_R.Last_Approver='"+user.getEmployeeNo()+"' and (Req_Status='"+type+"' OR Actual_Approver_status='"+type+"') and all_R.Req_Type='Leave' and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id) " +
									"as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by RowNum desc";
								}
						if(type.equalsIgnoreCase("All")){
							getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,leave.leave_type," +
							"emp.EMP_FULLNAME,all_R.Req_Status,leave.submit_date as Req_Date,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days from  All_Request as all_R," +
							"emp_official_info as emp,leave_details as leave where (all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"') and all_R.Req_Type='Leave' and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id) " +
							"as  sub Where  sub.RowNum between '"+startRecord+"' and '"+endRecord+"' order by Req_Id desc";
						}
					 ResultSet rsLeave=ad.selectQuery(getLeaveRecords);

						while(rsLeave.next())
						{
							LeaveForm leave=new LeaveForm();
							leave.setRequestNumber(rsLeave.getInt("Req_Id"));
							
						String	leaveType=rsLeave.getString("leave_type");
							if(leaveType.equalsIgnoreCase("1")){
								leaveType="Casual";
							}
							if(leaveType.equalsIgnoreCase("2")){
								leaveType="Sick";
							}
							if(leaveType.equalsIgnoreCase("3")){
								leaveType="privilege";
							}
							if(leaveType.equalsIgnoreCase("4")){
								leaveType="Loss Of Pay";
							}
							if(leaveType.equalsIgnoreCase("5")){
								leaveType="Maternity";
							}
							if(leaveType.equalsIgnoreCase("6")){
								leaveType="Comp-Off";
							}
							leave.setLeaveType(leaveType);
							leave.setEmployeeName(rsLeave.getString("EMP_FULLNAME"));
							leave.setSubmitDate(rsLeave.getString("Req_Date"));
							leave.setStartDate(EMicroUtils.display(rsLeave.getDate("start_date")));
							String stDur=rsLeave.getString("start_duration");
							
							if(stDur.equalsIgnoreCase("FD")){
								stDur="Full Day";
							}
							if(stDur.equalsIgnoreCase("FH")){
								stDur="First Half";
							}
							if(stDur.equalsIgnoreCase("SH")){
								stDur="Second Half";
							}
							leave.setStartDurationType(stDur);
							
							leave.setEndDate(EMicroUtils.display(rsLeave.getDate("end_date")));
							
							String endDur=rsLeave.getString("end_duration");
							
							if(endDur.equalsIgnoreCase("FD")){
								endDur="Full Day";
							}
							if(endDur.equalsIgnoreCase("FH")){
								endDur="First Half";
							}
							if(endDur.equalsIgnoreCase("SH")){
								endDur="Second Half";
							}
							leave.setEndDurationType(endDur);
							leave.setNoOfDays(rsLeave.getString("no_of_days"));
							if(type.equalsIgnoreCase("Cancelled"))
								leave.setApproveStatus("Cancelled");
								else
								leave.setApproveStatus(rsLeave.getString("Req_Status"));	
							//disable cancle button
							int year = Calendar.getInstance().get(Calendar.YEAR);
							int mon=Calendar.getInstance().get(Calendar.MONTH);
							int day=Calendar.getInstance().get(Calendar.DAY_OF_MONTH);
							mon=mon+1;
							String month="";
							if(mon<10)
							{
								month="0"+Integer.toString(mon);
							}
							else
							{
								month=Integer.toString(mon);
							}
					
					   		if(day>=21)
					   		{
					   			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
					        	Date date1 = rsLeave.getDate("start_date");
					        	Date date2 = sdf.parse(""+year+"-"+month+"-21");
					 
					        	
					   	
					   			
							int value=date1.compareTo(date2);
							if(value<1)
							{
								leave.setApptype("DisableCancel");
							}
					   


						}
							leaveList.add(leave);
							}
							
						request.setAttribute("leaveList", leaveList);
						
						if(leaveList.size()!=0)
						{
							approvalsForm.setTotalRecords(totalRecords);
							approvalsForm.setStartRecord(startRecord);
							approvalsForm.setEndRecord(endRecord);
							request.setAttribute("nextButton", "nextButton");
							request.setAttribute("previousButton", "previousButton");
						}
						else
						{
							int start=startRecord;
							int end=startRecord;
							
							approvalsForm.setTotalRecords(totalRecords);
							approvalsForm.setStartRecord(start);
							approvalsForm.setEndRecord(end);
							
						}
					 if(leaveList.size()<10)
					 {
						 approvalsForm.setTotalRecords(totalRecords);
						 approvalsForm.setStartRecord(startRecord);
						 approvalsForm.setEndRecord(startRecord+leaveList.size()-1);
							request.setAttribute("nextButton", "");
							request.setAttribute("disableNextButton", "disableNextButton");
							request.setAttribute("previousButton", "previousButton"); 
						 
					 }
			
			}
				  }
				 
			
		
				
			 
			 if(endRecord==totalRecords)
			 {
				 request.setAttribute("nextButton", "");
					request.setAttribute("disableNextButton", "disableNextButton");
			 }
			 request.setAttribute("displayRecordNo", "displayRecordNo");
		

			
			}catch (Exception e) {
			e.printStackTrace();
		}
		return mapping.findForward("approvePage");
		} 
	
	public ActionForward rejectRequest(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		ApprovalsForm approvalsForm = (ApprovalsForm) form;
		NewsandMediaDao ad=new NewsandMediaDao();
		
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		if(user == null)
		{
			approvalsForm.setAppMessage("Session Expried! Try to Login again!");
			return mapping.findForward("approvePage");
		}
		String selectedReq[]=approvalsForm.getSelectedRequestNo();
		System.out.println("total="+selectedReq.length);
		String reqType=approvalsForm.getReqRequstType();
		approvalsForm.setReqRequstType(reqType);
		String status=approvalsForm.getSelectedFilter();
		
		
		approvalsForm.setSelectedFilter(status);
		if(reqType.equalsIgnoreCase("Permission"))
		{
			for(int i=0;i<selectedReq.length;i++){
				
				try{
				Date dNow = new Date( );
				 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS");
				String dateNow = ft.format(dNow);
				String reqId=selectedReq[i];
				String getLeaveDetails="select * from Permission_details where request_no='"+reqId+"'"; 
				ResultSet rsLeave=ad.selectQuery(getLeaveDetails);
				String empID="";
				String submit_date="";
				while(rsLeave.next())
				{
					empID=rsLeave.getString("user_id");
					submit_date=rsLeave.getString("date");
					String a[]=submit_date.split("-");
					submit_date=a[2]+"/"+a[1]+"/"+a[0];
					
				}
				boolean existStatus=false;
				boolean checkStatus=false;
				int priorityCout=0;
				int totalApproverCount=0;
				String dataFlowType=""; 
				String checkESSApproverList="select count(*) from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave'";
				ResultSet rsCheckInEss=ad.selectQuery(checkESSApproverList);
				while(rsCheckInEss.next())
				{
					int number=rsCheckInEss.getInt(1);
					totalApproverCount=rsCheckInEss.getInt(1);
					if(number==0)
					{
						existStatus=false;
					}else{
						existStatus=true;
					}
				}
				if(existStatus==true){
					String getDataFlowType="select * from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave' ";
					ResultSet rsDataFlowType=ad.selectQuery(getDataFlowType);
					while(rsDataFlowType.next())
					{
						dataFlowType=rsDataFlowType.getString("reqType");
					}
					if(dataFlowType.equalsIgnoreCase("sequential"))
					{
						int approverPriority=0;
						String getApprPriority="select Priority from ESS_Approvers where employeeNumber='"+empID+"' and ApproverId='"+user.getEmployeeNo()+"' and essType='Leave'";
						ResultSet rsApprPriority=ad.selectQuery(getApprPriority);
						while(rsApprPriority.next())
						{
							approverPriority=rsApprPriority.getInt("Priority");
						}
						if(totalApproverCount==approverPriority)
						{
							//last approver
							existStatus=false;
							//check cancelled Record
			                int cancelledCount=0;
			                String getCheckCancelled="select COUNT(*) from All_Request where Req_Id='"+reqId+"' and Req_Type='Permission' and Req_Status='Cancelled'";
			                ResultSet rsCheckCancel=ad.selectQuery(getCheckCancelled);
			                while(rsCheckCancel.next())
			                {
			                	cancelledCount=rsCheckCancel.getInt(1);
			                	if(cancelledCount>0)
			                	{
			                		existStatus=true;
			                		 String updateSql= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Comments=''," +
			                         "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected' where Req_Id='"+reqId+"'  and Req_Type='Permission'";
									 int upd=ad.SqlExecuteUpdate(updateSql);
			   							 if(upd>0)
			   							 {
			   								request.setAttribute("statusMessage2", "statusMessage2");
			   								//statusForm.setMessage2("Request No "+reqId+" already has been Cancelled");
			   							 }
			                	}
			                }
						}else{
						String nextApprover="";
						String getNextApprDetails="select ApproverId from ESS_Approvers where employeeNumber='"+empID+"' and Priority='"+(approverPriority+1)+"' and essType='Leave'";
			            ResultSet rsNextApprDetails=ad.selectQuery(getNextApprDetails);
			            while(rsNextApprDetails.next())
			            {
			            	nextApprover=rsNextApprDetails.getString("ApproverId");
			            }
			            
			            //check cancelled Record
			            int cancelledCount=0;
			            String getCheckCancelled="select COUNT(*) from All_Request where Req_Id='"+reqId+"' and Req_Type='Permission' and Req_Status='Cancelled'";
			            ResultSet rsCheckCancel=ad.selectQuery(getCheckCancelled);
			            while(rsCheckCancel.next())
			            {
			            	cancelledCount=rsCheckCancel.getInt(1);
			            	if(cancelledCount>0)
			            	{
			            		existStatus=true;
			            		 String updateSql= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Comments=''," +
			                     "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected' where Req_Id='"+reqId+"' and Req_Type='Permission'";
								 int upd=ad.SqlExecuteUpdate(updateSql);
									 if(upd>0)
									 {
										request.setAttribute("statusMessage2", "statusMessage2");
									//	statusForm.setMessage2("Request No "+reqId+" already has been Cancelled");
									 }
			            	}
			            }
			            if(cancelledCount==0){
			            String updateSql= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Comments=''," +
			            "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected' where Req_Id='"+reqId+"' and Req_Type='Permission'";
						 int upd=ad.SqlExecuteUpdate(updateSql);
						 request.setAttribute("statusMessage2", "statusMessage2");
						// statusForm.setMessage2("Request has been rejected");
						 
						 String updateSql1= "update Permission_details set Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Approver_Status='2',approved_date='',rejected_date='"+dateNow+"',comments='' where request_no='"+reqId+"'";
							int recordChange=ad.SqlExecuteUpdate(updateSql1);
							
					  }
						}
					}
					if(dataFlowType.equalsIgnoreCase("parallel"))
					{
						//check total Approve count
						int totalApproveCount=0;
						String getTotApprCount="select count(*) from All_Request where Req_Id='"+reqId+"' and Requester_Name='"+empID+"' and Req_Status='Approved' and Req_Type='Permission'";
						ResultSet rsTotApprCount=ad.selectQuery(getTotApprCount);
						while(rsTotApprCount.next())
						{
							totalApproveCount=rsTotApprCount.getInt(1);
						}
						if(totalApproveCount==0)
						{
							//check reject count 
							int totalRejectCount=0;
							String getTotRejectCount="select count(*) from All_Request where Req_Id='"+reqId+"' and Requester_Name='"+empID+"' and Req_Status='Rejected' and Req_Type='Permission'";
							ResultSet rsTotRejCount=ad.selectQuery(getTotRejectCount);
							while(rsTotRejCount.next())
							{
								totalRejectCount=rsTotRejCount.getInt(1);
							}
							getTotRejectCount="select count(*) from All_Request where Req_Id='"+reqId+"' and Requester_Name='"+empID+"' and Req_Status='Cancelled' and Req_Type='Permission'";
							 rsTotRejCount=ad.selectQuery(getTotRejectCount);
							while(rsTotRejCount.next())
							{
								totalRejectCount=totalRejectCount+rsTotRejCount.getInt(1);
							
							}
							if(totalRejectCount==0)
							{
							 String updateSql= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Comments=''," +
			                    "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected' where Req_Id='"+reqId+"'  and Req_Type='Permission'";
								 int upd=ad.SqlExecuteUpdate(updateSql);
									 if(upd>0)
									 {
										request.setAttribute("statusMessage2", "statusMessage2");
									//	statusForm.setMessage2("Request has been rejected");
									 }
							}
							if(totalRejectCount==2)
							{
								String updateSql= "update Permission_details set Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Approver_Status='2',approved_date='',rejected_date='"+dateNow+"',comments='' where request_no='"+reqId+"'";
								int recordChange=ad.SqlExecuteUpdate(updateSql);
								
								String updateSql1= "update All_Request set Req_Status='Rejected', Comments='',approved_date='',rejected_date='"+dateNow+"',Last_Approver='"+user.getEmployeeNo()+"',Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Pending_Approver='"+user.getEmployeeNo()+"'  and Req_Type='Permission'";;
								int upd2=ad.SqlExecuteUpdate(updateSql1);
								if(upd2>0){
									request.setAttribute("statusMessage", "statusMessage");
									//statusForm.setMessage("This request already has been rejected");
								}
							}
							if(totalRejectCount==1)
							{
								existStatus=false;
								
							}
							
						}if(totalApproveCount==1){
							//no one leave request is approved
							existStatus=false;
						}
						if(totalApproveCount==2)
						{
							//show message Approve
							String updateSql1= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Comments=''," +
			                "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected' where Req_Id='"+reqId+"'  and Req_Type='Permission'";
							 int upd=ad.SqlExecuteUpdate(updateSql1);
								 if(upd>0)
								 {
									request.setAttribute("statusMessage2", "statusMessage2");
									//statusForm.setMessage2("This  request already has been  approved");
								 }
						}
						if(totalApproveCount==3)
						{
							//show message Approve
							String updateSql1= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Comments=''," +
			                "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected' where Req_Id='"+reqId+"'  and Req_Type='Permission'";
							 int upd=ad.SqlExecuteUpdate(updateSql1);
								 if(upd>0)
								 {
									request.setAttribute("statusMessage2", "statusMessage2");
									//statusForm.setMessage2("This  request already has been  approved");
								 }
						}
					}
				}
				if(existStatus==false){
					String modifyRequest="update  All_Request set Last_Approver='"+user.getEmployeeNo()+"',Approved_Persons='"+user.getEmployeeNo()+"',Req_Status='Rejected',Pending_Approver='',approved_date='"+dateNow+"',rejected_date='' where Req_Type='Permission' and Req_Id='"+selectedReq[i]+"' ";	
					int statusChange=ad.SqlExecuteUpdate(modifyRequest);
					if(statusChange==1){
					String updateSql= "update Permission_details set Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Approver_Status='2',approved_date='',rejected_date='"+dateNow+"' where request_no='"+selectedReq[i]+"'";
					ad.SqlExecuteUpdate(updateSql);
				}
				
			}
				}catch (Exception e) {
					e.printStackTrace();
				}
		}
		}
		
		if(reqType.equalsIgnoreCase("On Duty")){
			for(int i=0;i<selectedReq.length;i++){
				try{
				Date dNow = new Date( );
				 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS");
				String dateNow = ft.format(dNow);
				boolean existStatus=false;
				boolean checkStatus=false;
				String submit_date="";
				String empID="";
				String getLeaveDetails="select * from OnDuty_details where request_no='"+selectedReq[i]+"'"; 
				ResultSet rsLeave=ad.selectQuery(getLeaveDetails);
				while(rsLeave.next())
				{
					empID=rsLeave.getString("user_id");
					submit_date=rsLeave.getString("submit_date");
					
				}
				int priorityCout=0;
				int totalApproverCount=0;
				String dataFlowType=""; 
				String checkESSApproverList="select count(*) from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave'";
				ResultSet rsCheckInEss=ad.selectQuery(checkESSApproverList);
				while(rsCheckInEss.next())
				{
					int number=rsCheckInEss.getInt(1);
					totalApproverCount=rsCheckInEss.getInt(1);
					if(number==0)
					{
						existStatus=false;
					}else{
						existStatus=true;
					}
				}
				if(existStatus==true){
					String getDataFlowType="select * from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave' ";
					ResultSet rsDataFlowType=ad.selectQuery(getDataFlowType);
					while(rsDataFlowType.next())
					{
						dataFlowType=rsDataFlowType.getString("reqType");
					}
					if(dataFlowType.equalsIgnoreCase("sequential"))
					{
						int approverPriority=0;
						String getApprPriority="select Priority from ESS_Approvers where employeeNumber='"+empID+"' and ApproverId='"+user.getEmployeeNo()+"' and essType='Leave'";
						ResultSet rsApprPriority=ad.selectQuery(getApprPriority);
						while(rsApprPriority.next())
						{
							approverPriority=rsApprPriority.getInt("Priority");
						}
						if(totalApproverCount==approverPriority)
						{
							//last approver
							existStatus=false;
							//check cancelled Record
		                    int cancelledCount=0;
		                    String getCheckCancelled="select COUNT(*) from All_Request where Req_Id='"+selectedReq[i]+"' and Req_Type='On Duty' and Req_Status='Cancelled'";
		                    ResultSet rsCheckCancel=ad.selectQuery(getCheckCancelled);
		                    while(rsCheckCancel.next())
		                    {
		                    	cancelledCount=rsCheckCancel.getInt(1);
		                    	if(cancelledCount>0)
		                    	{
		                    		existStatus=true;
		                    		 String updateSql= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Comments=''," +
		                             "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected' where Req_Id='"+selectedReq[i]+"' and Pending_approver='"+user.getEmployeeNo()+"' and Req_Type='On Duty'";
									 int upd=ad.SqlExecuteUpdate(updateSql);
			   							 if(upd>0)
			   							 {
			   								request.setAttribute("statusMessage2", "statusMessage2");
										approvalsForm.setMessage2("Request No "+selectedReq[i]+" already has been Cancelled");
			   							 }
		                    	}
		                    }
						}else{
						String nextApprover="";
						String getNextApprDetails="select ApproverId from ESS_Approvers where employeeNumber='"+empID+"' and Priority='"+(approverPriority+1)+"' and essType='Leave'";
		                ResultSet rsNextApprDetails=ad.selectQuery(getNextApprDetails);
		                while(rsNextApprDetails.next())
		                {
		                	nextApprover=rsNextApprDetails.getString("ApproverId");
		                }
		                
		                //check cancelled Record
		                int cancelledCount=0;
		                String getCheckCancelled="select COUNT(*) from All_Request where Req_Id='"+selectedReq[i]+"' and Req_Type='On Duty' and Req_Status='Cancelled'";
		                ResultSet rsCheckCancel=ad.selectQuery(getCheckCancelled);
		                while(rsCheckCancel.next())
		                {
		                	cancelledCount=rsCheckCancel.getInt(1);
		                	if(cancelledCount>0)
		                	{
		                		existStatus=true;
		                		 String updateSql= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Comments=''," +
		                         "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected' where Req_Id='"+selectedReq[i]+"' and Pending_approver='"+user.getEmployeeNo()+"' and Req_Type='On Duty'";
								 int upd=ad.SqlExecuteUpdate(updateSql);
									 if(upd>0)
									 {
										request.setAttribute("statusMessage2", "statusMessage2");
										 approvalsForm.setMessage2("Request No "+selectedReq[i]+" already has been Cancelled");
									 }
		                	}
		                }
		                if(cancelledCount==0){
		                String updateSql= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Comments=''," +
		                "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected' where Req_Id='"+selectedReq[i]+"' and Pending_approver='"+user.getEmployeeNo()+"' and Req_Type='On Duty'";
						 int upd=ad.SqlExecuteUpdate(updateSql);
						 request.setAttribute("statusMessage2", "statusMessage2");
						 approvalsForm.setMessage2("Request has been rejected");
							
					  }
						}
					}
					if(dataFlowType.equalsIgnoreCase("parallel"))
					{
						
						String frstapp="";
						String par1app="";
						String par2app="";
						
						//Approvers
						String getNextApprDetails="select * from ESS_Approvers where employeeNumber='"+empID+"'  and essType='Leave'";
			            ResultSet rsNextApprDetails=ad.selectQuery(getNextApprDetails);
			            while(rsNextApprDetails.next())
			            {
			            	frstapp=rsNextApprDetails.getString("ApproverId");
			            	par1app=rsNextApprDetails.getString("Parallel_Approver1");
			            	par2app=rsNextApprDetails.getString("Parallel_Approver2");
			            }
						
						//check total Approve count
						int totalApproveCount=0;
						String getTotApprCount="select count(*) from All_Request where Req_Id='"+selectedReq[i]+"' and Requester_Name='"+empID+"' and Req_Status='Approved' and Req_Type='On Duty'";
						ResultSet rsTotApprCount=ad.selectQuery(getTotApprCount);
						while(rsTotApprCount.next())
						{
							totalApproveCount=rsTotApprCount.getInt(1);
						}
						if(totalApproveCount==0)
						{
							//check reject count 
							int totalRejectCount=0;
							String getTotRejectCount="select count(*) from All_Request where Req_Id='"+selectedReq[i]+"' and Requester_Name='"+empID+"' and Req_Status='Rejected' and Req_Type='On Duty'";
							ResultSet rsTotRejCount=ad.selectQuery(getTotRejectCount);
							while(rsTotRejCount.next())
							{
								totalRejectCount=rsTotRejCount.getInt(1);
							}
							getTotRejectCount="select count(*) from All_Request where Req_Id='"+selectedReq[i]+"' and Requester_Name='"+empID+"' and Req_Status='Cancelled' and Req_Type='On Duty'";
							 rsTotRejCount=ad.selectQuery(getTotRejectCount);
							while(rsTotRejCount.next())
							{
								totalRejectCount=totalRejectCount+rsTotRejCount.getInt(1);
							
							}
							if(totalRejectCount==0)
							{
							 String updateSql= "update All_Request set Approved_Persons='"+frstapp+"', Last_approver='"+frstapp+"',Pending_approver='',Comments=''," +
		                        "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+selectedReq[i]+"' and Pending_approver='"+frstapp+"' and Req_Type='On Duty'";
								 int upd=ad.SqlExecuteUpdate(updateSql);
									 if(upd>0)
									 {
										request.setAttribute("statusMessage2", "statusMessage2");
										approvalsForm.setMessage2("Request has been rejected");
										if(par1app==null)
										{
											par1app="";
										}
										
										if(par2app==null)
										{
											par2app="";
										}
										
										if(!par1app.equalsIgnoreCase(""))
										{
											 String updateSql1= "update All_Request set Approved_Persons='"+par1app+"', Last_approver='"+par1app+"',Pending_approver='',Comments=''," +
									                    "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+selectedReq[i]+"' and Pending_approver='"+par1app+"' and Req_Type='On Duty'";
														 int upd1=ad.SqlExecuteUpdate(updateSql1);
										}
										
										if(!par2app.equalsIgnoreCase(""))
										{
											 String updateSql1= "update All_Request set Approved_Persons='"+par2app+"', Last_approver='"+par2app+"',Pending_approver='',Comments=''," +
									                    "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+selectedReq[i]+"' and Pending_approver='"+par2app+"' and Req_Type='On Duty'";
														 int upd1=ad.SqlExecuteUpdate(updateSql1);
										}
										
										existStatus=false;
										
										
										
									 }
							}
							if(totalRejectCount==2)
							{
								String updateSql= "update OnDuty_details set Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',OnDuty_status='2',Approver_Status='Rejected',approved_date='',rejected_date='"+dateNow+"',comments='' where request_no='"+selectedReq[i]+"'";
								int recordChange=ad.SqlExecuteUpdate(updateSql);
								
								String updateSql1= "update All_Request set Req_Status='Rejected', Comments='',approved_date='',rejected_date='"+dateNow+"',Last_Approver='"+user.getEmployeeNo()+"',Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"' where Req_Id='"+selectedReq[i]+"' and Pending_Approver='"+user.getEmployeeNo()+"'  and Req_Type='On Duty'";;
								int upd2=ad.SqlExecuteUpdate(updateSql1);
								if(upd2>0){
									request.setAttribute("statusMessage", "statusMessage");
									approvalsForm.setMessage("This request already has been rejected");
								}
							}
							if(totalRejectCount==1)
							{
								existStatus=false;
								
							}
							
						}if(totalApproveCount==1){
							//no one leave request is approved
							existStatus=false;
						}
						if(totalApproveCount==2)
						{
							//show message Approve
							String updateSql1= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Comments=''," +
		                    "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected' where Req_Id='"+selectedReq[i]+"' and Pending_approver='"+user.getEmployeeNo()+"' and Req_Type='On Duty'";
							 int upd=ad.SqlExecuteUpdate(updateSql1);
								 if(upd>0)
								 {
									request.setAttribute("statusMessage2", "statusMessage2");
									approvalsForm.setMessage2("This  request already has been  approved");
								 }
						}
					}
				}
				if(existStatus==false){
				String modifyRequest="update  All_Request set Last_Approver='"+user.getEmployeeNo()+"',Approved_Persons='"+user.getEmployeeNo()+"',Req_Status='Rejected',Pending_Approver='',approved_date='',rejected_date='"+dateNow+"' where Req_Type='On Duty' and Req_Id='"+selectedReq[i]+"' and  Pending_Approver='"+user.getEmployeeNo()+"'";	
				int statusChange=ad.SqlExecuteUpdate(modifyRequest);
				
				String updateSql= "update OnDuty_details set Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',OnDuty_status='2',Approver_Status='Rejected',approved_date='',rejected_date='"+dateNow+"' where request_no='"+selectedReq[i]+"'";
				ad.SqlExecuteUpdate(updateSql);
				
			}
		}catch (Exception e) {
			e.printStackTrace();
		}
			}
			
		}
		if(reqType.equalsIgnoreCase("Customer Master")){
			for(int i=0;i<selectedReq.length;i++){
				Date dNow = new Date( );
				 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS");
					String dateNow = ft.format(dNow);
				String location="";
				String matGroup="";
				String approver="";
				String parllelAppr1="";
				String parllelAppr2="";
				String reqDate="";
				String reqesterID="";
				String requestNo="";
				String reqId=selectedReq[i];
				int priorityCout=0;
				int checkStatus=0;
				String matType="Customer Master";
				try{

					


					String getMatGroup="select Customer_Type from CUSTOMER_MASTER_M where REQUEST_NO='"+reqId+"' ";
				 	ResultSet rsMatGrup=ad.selectQuery(getMatGroup);
				 	while(rsMatGrup.next()){
				 		matGroup=rsMatGrup.getString("Customer_Type");
				 		
				 	}
				 	if(matGroup.equalsIgnoreCase("Exports"))
				 	{
				 		matGroup="Export";
				 	}
					checkStatus=0;
					int apprverPriority=0;
					String getApproverDetails="select * from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and (Approver_Id='"+user.getEmployeeNo()+"' or Parllel_Approver_1='"+user.getEmployeeNo()+"' or Parllel_Approver_2='"+user.getEmployeeNo()+"') ";
					ResultSet rsAppDet=ad.selectQuery(getApproverDetails);
					while(rsAppDet.next())
					{
						checkStatus=1;
						apprverPriority=rsAppDet.getInt("Priority");
						approver=rsAppDet.getString("Approver_Id");
						parllelAppr1=rsAppDet.getString("Parllel_Approver_1");
						parllelAppr2=rsAppDet.getString("Parllel_Approver_2");
					}
					if(checkStatus==0)
					{
						getApproverDetails="select * from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' and (Approver_Id='"+user.getEmployeeNo()+"' or Parllel_Approver_1='"+user.getEmployeeNo()+"' or Parllel_Approver_2='"+user.getEmployeeNo()+"') ";
						rsAppDet=ad.selectQuery(getApproverDetails);
						while(rsAppDet.next())
						{
						
							apprverPriority=rsAppDet.getInt("Priority");
							approver=rsAppDet.getString("Approver_Id");
							parllelAppr1=rsAppDet.getString("Parllel_Approver_1");
							parllelAppr2=rsAppDet.getString("Parllel_Approver_2");
						}
					}
				
				String updateStatus="update All_Request set Req_Status='Rejected',Comments='',Last_Approver='"+user.getEmployeeNo()+"'," +
				"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',rejected_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Customer Master' and Pending_Approver='"+user.getEmployeeNo()+"'";
			    int saveStatus=0;
			    saveStatus=ad.SqlExecuteUpdate(updateStatus);
			    if(!(parllelAppr1.equalsIgnoreCase("")))
			    {
			    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Rejected',Comments='',Last_Approver='"+parllelAppr1+"'," +
						"Pending_Approver='',Approved_Persons='"+parllelAppr1+"',rejected_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Customer Master'  and Pending_Approver='"+parllelAppr1+"'";
			    	 saveStatus=ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
			    }
			    if(!(parllelAppr2.equalsIgnoreCase("")))
			    {
			    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Rejected',Comments='',Last_Approver='"+parllelAppr2+"'," +
						"Pending_Approver='',Approved_Persons='"+parllelAppr2+"',rejected_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Customer Master'  and Pending_Approver='"+parllelAppr2+"'";
			    	 saveStatus=ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
			    }
				if(saveStatus>0){
					approvalsForm.setMessage2("Request has been rejected successfully");
					
					String updateMaterial="update CUSTOMER_MASTER_M set Approve_Status='Rejected',last_approver='"+user.getFullName()+"',pending_approver='No',MODIFIED_BY='"+user.getEmployeeNo()+"',rejected_flag=''  where REQUEST_NO='"+reqId+"'";
					ad.SqlExecuteUpdate(updateMaterial);
				}
				
				
			
					
				
					
				
				}catch (Exception e) {
				e.printStackTrace();
				}
			}
		}
		if(reqType.equalsIgnoreCase("Vendor Master")){
			for(int i=0;i<selectedReq.length;i++){
				Date dNow = new Date( );
				 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS");
					String dateNow = ft.format(dNow);
				String location="";
				String matGroup="";
				String approver="";
				String parllelAppr1="";
				String parllelAppr2="";
				String reqDate="";
				String reqesterID="";
				String requestNo="";
				String reqId=selectedReq[i];
				int priorityCout=0;
				int checkStatus=0;
				String matType="Vendor Master";
				String requesterID="";
				try{
					


					String getMatGroup="select acc.ACCOUNT_GROUP_NAME,v.CREATED_BY from vendor_master_m as v,ACCOUNT_GROUP_M as acc where v.REQUEST_NO='"+reqId+"' and  v.ACCOUNT_GROUP_ID=acc.ACCOUNT_GROUP_ID ";
				 	ResultSet rsMatGrup=ad.selectQuery(getMatGroup);
				 	while(rsMatGrup.next()){
				 		matGroup=rsMatGrup.getString("ACCOUNT_GROUP_NAME");
				 		requesterID=rsMatGrup.getString("CREATED_BY");
				 	}
				 	if(matGroup.equalsIgnoreCase("Import"))
				 	{
				 		
				 	}else{
				 		matGroup="Local";
				 	}
					checkStatus=0;
					int apprverPriority=0;
					String getApproverDetails="select * from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and (Approver_Id='"+user.getEmployeeNo()+"' or Parllel_Approver_1='"+user.getEmployeeNo()+"' or Parllel_Approver_2='"+user.getEmployeeNo()+"') ";
					ResultSet rsAppDet=ad.selectQuery(getApproverDetails);
					while(rsAppDet.next())
					{
						checkStatus=1;
						apprverPriority=rsAppDet.getInt("Priority");
						approver=rsAppDet.getString("Approver_Id");
						parllelAppr1=rsAppDet.getString("Parllel_Approver_1");
						parllelAppr2=rsAppDet.getString("Parllel_Approver_2");
					}
					if(checkStatus==0)
					{
						getApproverDetails="select * from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' and (Approver_Id='"+user.getEmployeeNo()+"' or Parllel_Approver_1='"+user.getEmployeeNo()+"' or Parllel_Approver_2='"+user.getEmployeeNo()+"') ";
						rsAppDet=ad.selectQuery(getApproverDetails);
						while(rsAppDet.next())
						{
						
							apprverPriority=rsAppDet.getInt("Priority");
							approver=rsAppDet.getString("Approver_Id");
							parllelAppr1=rsAppDet.getString("Parllel_Approver_1");
							parllelAppr2=rsAppDet.getString("Parllel_Approver_2");
						}
					}
				
				String updateStatus="update All_Request set Req_Status='Rejected',Comments='',Last_Approver='"+user.getEmployeeNo()+"'," +
				"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',rejected_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Vendor Master' and Pending_Approver='"+user.getEmployeeNo()+"'";
			    int saveStatus=0;
			    saveStatus=ad.SqlExecuteUpdate(updateStatus);
			    if(!(parllelAppr1.equalsIgnoreCase("")))
			    {
			    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Rejected',Comments='',Last_Approver='"+parllelAppr1+"'," +
						"Pending_Approver='',Approved_Persons='"+parllelAppr1+"',rejected_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Vendor Master'  and Pending_Approver='"+parllelAppr1+"'";
			    	 saveStatus=ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
			    }
			    if(!(parllelAppr2.equalsIgnoreCase("")))
			    {
			    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Rejected',Comments='',Last_Approver='"+parllelAppr2+"'," +
						"Pending_Approver='',Approved_Persons='"+parllelAppr2+"',rejected_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Vendor Master'  and Pending_Approver='"+parllelAppr2+"'";
			    	 saveStatus=ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
			    }
				if(saveStatus>0){
					approvalsForm.setMessage2("Request has been rejected successfully");
					ad.connClose();
					EMailer email=new EMailer();
					String approvermail="";
					email.sendMailToMaterialCodeRequester(request, approvermail, reqId, "Vendor Master", user.getEmployeeNo(), requesterID, "Rejected");
			 
					String updateMaterial="update vendor_master_m set Approve_Status='Rejected',last_approver='"+user.getFullName()+"',pending_approver='No',MODIFIED_BY='"+user.getEmployeeNo()+"',rejected_flag=''  where REQUEST_NO='"+reqId+"'";
					ad.SqlExecuteUpdate(updateMaterial);
				}
				}catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
		if(reqType.equalsIgnoreCase("Code Extention")){

			for(int i=0;i<selectedReq.length;i++){
				Date dNow = new Date( );
				 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS");
					String dateNow = ft.format(dNow);
				String location="";
				String matGroup="";
				String approver="";
				String parllelAppr1="";
				String parllelAppr2="";
				String reqDate="";
				String reqesterID="";
				String requestNo="";
				String reqId=selectedReq[i];
				int priorityCout=0;
				int checkStatus=0;
				String matType="";
				
				try{

					String matDetails="select loc.LOCATION_CODE,mat.CREATED_BY from code_extenstion_request as mat,Location as loc  where mat.REQUEST_NO='"+reqId+"' and (mat.EXTENDED_TO_PLANT_1=loc.LOCATION_CODE or mat.PLANT_2=loc.LOCATION_CODE) ";
					ResultSet rsDetails=ad.selectQuery(matDetails);
					while(rsDetails.next())
					{
						location=rsDetails.getString("LOCATION_CODE");
						matType="Code Extention";
						reqesterID=rsDetails.getString("CREATED_BY");
					}
					checkStatus=0;
					int apprverPriority=0;
					String getApproverDetails="select * from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and (Approver_Id='"+user.getEmployeeNo()+"' or Parllel_Approver_1='"+user.getEmployeeNo()+"' or Parllel_Approver_2='"+user.getEmployeeNo()+"') ";
					ResultSet rsAppDet=ad.selectQuery(getApproverDetails);
					while(rsAppDet.next())
					{
						checkStatus=1;
						apprverPriority=rsAppDet.getInt("Priority");
						approver=rsAppDet.getString("Approver_Id");
						parllelAppr1=rsAppDet.getString("Parllel_Approver_1");
						parllelAppr2=rsAppDet.getString("Parllel_Approver_2");
					}
					if(checkStatus==0)
					{
						getApproverDetails="select * from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' and (Approver_Id='"+user.getEmployeeNo()+"' or Parllel_Approver_1='"+user.getEmployeeNo()+"' or Parllel_Approver_2='"+user.getEmployeeNo()+"') ";
						rsAppDet=ad.selectQuery(getApproverDetails);
						while(rsAppDet.next())
						{
						
							apprverPriority=rsAppDet.getInt("Priority");
							approver=rsAppDet.getString("Approver_Id");
							parllelAppr1=rsAppDet.getString("Parllel_Approver_1");
							parllelAppr2=rsAppDet.getString("Parllel_Approver_2");
						}
					}
				
				String updateStatus="update All_Request set Req_Status='Rejected',Comments='',Last_Approver='"+user.getEmployeeNo()+"'," +
				"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',rejected_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Code Extention' and Pending_Approver='"+user.getEmployeeNo()+"'";
			    int saveStatus=0;
			    saveStatus=ad.SqlExecuteUpdate(updateStatus);
			    if(!(parllelAppr1.equalsIgnoreCase("")))
			    {
			    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Rejected',Comments='',Last_Approver='"+parllelAppr1+"'," +
						"Pending_Approver='',Approved_Persons='"+parllelAppr1+"',rejected_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Code Extention'  and Pending_Approver='"+parllelAppr1+"'";
			    	 saveStatus=ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
			    }
			    if(!(parllelAppr2.equalsIgnoreCase("")))
			    {
			    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Rejected',Comments='',Last_Approver='"+parllelAppr2+"'," +
						"Pending_Approver='',Approved_Persons='"+parllelAppr2+"',rejected_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Code Extention'  and Pending_Approver='"+parllelAppr2+"'";
			    	 saveStatus=ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
			    }
				if(saveStatus>0){
					approvalsForm.setMessage2("Request has been rejected successfully");
					
					EMailer email=new EMailer();
					String approvermail="";
					email.sendMailToMaterialCodeRequester(request, approvermail, reqId, "Code Extension", user.getEmployeeNo(), reqesterID, "Rejected");
					
					String updateMaterial="update code_extenstion_request set APPROVE_TYPE='Rejected',last_approver='"+user.getFullName()+"',pending_approver='No',MODIFIED_BY='"+user.getEmployeeNo()+"',rejected_flag=''  where REQUEST_NO='"+reqId+"'";
					ad.SqlExecuteUpdate(updateMaterial);
				}
				
				
			
					
				}catch (Exception e) {
					e.printStackTrace();
				}
			}
		
			
			
		}
		if(reqType.equalsIgnoreCase("Service Master")){
			for(int i=0;i<selectedReq.length;i++){
				Date dNow = new Date( );
				 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS");
					String dateNow = ft.format(dNow);
				String location="";
				String matGroup="";
				String approver="";
				String parllelAppr1="";
				String parllelAppr2="";
				String reqDate="";
				String reqesterID="";
				String requestNo="";
				String reqId=selectedReq[i];
				int priorityCout=0;
				int checkStatus=0;
				String matType="";
				try{

					String matDetails="select loc.LOCATION_CODE from SERVICE_MASTER as mat,Location as loc  where mat.REQUEST_NO='"+reqId+"' and mat.plant_code=loc.LOCID";
					ResultSet rsDetails=ad.selectQuery(matDetails);
					while(rsDetails.next())
					{
						location=rsDetails.getString("LOCATION_CODE");
						matType="Service Master";
					}
					checkStatus=0;
					int apprverPriority=0;
					String getApproverDetails="select * from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and (Approver_Id='"+user.getEmployeeNo()+"' or Parllel_Approver_1='"+user.getEmployeeNo()+"' or Parllel_Approver_2='"+user.getEmployeeNo()+"') ";
					ResultSet rsAppDet=ad.selectQuery(getApproverDetails);
					while(rsAppDet.next())
					{
						checkStatus=1;
						apprverPriority=rsAppDet.getInt("Priority");
						approver=rsAppDet.getString("Approver_Id");
						parllelAppr1=rsAppDet.getString("Parllel_Approver_1");
						parllelAppr2=rsAppDet.getString("Parllel_Approver_2");
					}
					if(checkStatus==0)
					{
						getApproverDetails="select * from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' and (Approver_Id='"+user.getEmployeeNo()+"' or Parllel_Approver_1='"+user.getEmployeeNo()+"' or Parllel_Approver_2='"+user.getEmployeeNo()+"') ";
						rsAppDet=ad.selectQuery(getApproverDetails);
						while(rsAppDet.next())
						{
						
							apprverPriority=rsAppDet.getInt("Priority");
							approver=rsAppDet.getString("Approver_Id");
							parllelAppr1=rsAppDet.getString("Parllel_Approver_1");
							parllelAppr2=rsAppDet.getString("Parllel_Approver_2");
						}
					}
				
				String updateStatus="update All_Request set Req_Status='Rejected',Comments='',Last_Approver='"+user.getEmployeeNo()+"'," +
				"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',rejected_date='"+dateNow+"' where Req_Id='"+reqId+"'  and Req_Type='Service Master' and Pending_Approver='"+user.getEmployeeNo()+"'";
			    int saveStatus=0;
			    saveStatus=ad.SqlExecuteUpdate(updateStatus);
			    if(!(parllelAppr1.equalsIgnoreCase("")))
			    {
			    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Rejected',Comments='',Last_Approver='"+parllelAppr1+"'," +
						"Pending_Approver='',Approved_Persons='"+parllelAppr1+"',rejected_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Service Master' and Pending_Approver='"+parllelAppr1+"'";
			    	 saveStatus=ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
			    }
			    if(!(parllelAppr2.equalsIgnoreCase("")))
			    {
			    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Rejected',Comments='',Last_Approver='"+parllelAppr2+"'," +
						"Pending_Approver='',Approved_Persons='"+parllelAppr2+"',rejected_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Service Master' and Pending_Approver='"+parllelAppr2+"'";
			    	 saveStatus=ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
			    }
				if(saveStatus>0){
					approvalsForm.setMessage2("Request has been rejected successfully");
					
					String updateMaterial="update SERVICE_MASTER set app_satus='Rejected',last_approver='"+user.getFullName()+"',pending_approver='No',rejected_flag=''  where REQUEST_NO='"+reqId+"'";
					ad.SqlExecuteUpdate(updateMaterial);
					ad.connClose();
					EMailer email=new EMailer();
					String approvermail="";
					email.sendMailToMaterialCodeRequester(request, approvermail, reqId, "Service Master", user.getEmployeeNo(), reqId, "Rejected");
			 
				}
				
				
			
					
				}catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
		if(reqType.equalsIgnoreCase("Material Master")){
			
			for(int i=0;i<selectedReq.length;i++){
			Date dNow = new Date( );
			 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS");
				String dateNow = ft.format(dNow);
			String location="";
			String matGroup="";
			String approver="";
			String parllelAppr1="";
			String parllelAppr2="";
			String reqDate="";
			String reqesterID="";
			String requestNo="";
			String reqId=selectedReq[i];
			int priorityCout=0;
			int checkStatus=0;
			String matType="";
			String requesterID="";
			//
			try{
				String matDetails="select loc.LOCATION_CODE,mat.MATERIAL_GROUP_ID,mat.Type,mat.CREATED_BY from material_code_request as mat,Location as loc  where mat.REQUEST_NO='"+reqId+"' and mat.LOCATION_ID=loc.LOCID";
				ResultSet rsDetails=ad.selectQuery(matDetails);
				while(rsDetails.next())
				{
					location=rsDetails.getString("LOCATION_CODE");
					matGroup=rsDetails.getString("MATERIAL_GROUP_ID");
					matType=rsDetails.getString("Type");
					requesterID=rsDetails.getString("CREATED_BY");
				}
				if(matType.equals("FG")||matType.equals("HAWA")){
					 matDetails="select loc.LOCATION_CODE,mat.Type,mat.CREATED_BY,mat.DOMESTIC_OR_EXPORTS from material_code_request as mat,Location as loc  where mat.REQUEST_NO='"+reqId+"' and mat.LOCATION_ID=loc.LOCID";
					 rsDetails=ad.selectQuery(matDetails);
					while(rsDetails.next())
					{
						
						matGroup=rsDetails.getString("DOMESTIC_OR_EXPORTS");
					}
			 		if(matGroup.equals("D"))
			 			matGroup="Domestic";
			 		if(matGroup.equals("E"))
			 			matGroup="Export";
			 		if(matGroup.equals("V"))
			 			matGroup="V";
				}
				checkStatus=0;
				int apprverPriority=0;
				String getApproverDetails="select * from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and (Approver_Id='"+user.getEmployeeNo()+"' or Parllel_Approver_1='"+user.getEmployeeNo()+"' or Parllel_Approver_2='"+user.getEmployeeNo()+"') ";
				ResultSet rsAppDet=ad.selectQuery(getApproverDetails);
				while(rsAppDet.next())
				{
					checkStatus=1;
					apprverPriority=rsAppDet.getInt("Priority");
					approver=rsAppDet.getString("Approver_Id");
					parllelAppr1=rsAppDet.getString("Parllel_Approver_1");
					parllelAppr2=rsAppDet.getString("Parllel_Approver_2");
				}
				if(checkStatus==0)
				{
					getApproverDetails="select * from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' and (Approver_Id='"+user.getEmployeeNo()+"' or Parllel_Approver_1='"+user.getEmployeeNo()+"' or Parllel_Approver_2='"+user.getEmployeeNo()+"') ";
					rsAppDet=ad.selectQuery(getApproverDetails);
					while(rsAppDet.next())
					{
					
						apprverPriority=rsAppDet.getInt("Priority");
						approver=rsAppDet.getString("Approver_Id");
						parllelAppr1=rsAppDet.getString("Parllel_Approver_1");
						parllelAppr2=rsAppDet.getString("Parllel_Approver_2");
					}
				}
			
			String updateStatus="update All_Request set Req_Status='Rejected',Comments='',Last_Approver='"+user.getEmployeeNo()+"'," +
			"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',rejected_date='"+dateNow+"',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Req_Type='Material Master' and Pending_Approver='"+user.getEmployeeNo()+"'";
		    int saveStatus=0;
		    saveStatus=ad.SqlExecuteUpdate(updateStatus);
		    if(!(parllelAppr1.equalsIgnoreCase("")))
		    {
		    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Rejected',Comments='',Last_Approver='"+parllelAppr1+"'," +
					"Pending_Approver='',Approved_Persons='"+parllelAppr1+"',rejected_date='"+dateNow+"',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Req_Type='Material Master' and Pending_Approver='"+parllelAppr1+"'";
		    	 saveStatus=ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
		    }
		    if(!(parllelAppr2.equalsIgnoreCase("")))
		    {
		    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Rejected',Comments='',Last_Approver='"+parllelAppr2+"'," +
					"Pending_Approver='',Approved_Persons='"+parllelAppr2+"',rejected_date='"+dateNow+"',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Req_Type='Material Master' and Pending_Approver='"+parllelAppr2+"'";
		    	 saveStatus=ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
		    }
			if(saveStatus>0){
				approvalsForm.setMessage2("Request has been rejected successfully");
				
				String updateMaterial="update material_code_request set Approve_Type='Rejected',last_approver='"+user.getFullName()+"',pending_approver='No',MODIFIED_BY='"+user.getEmployeeNo()+"',rejected_flag=''  where REQUEST_NO='"+reqId+"'";
				ad.SqlExecuteUpdate(updateMaterial);
				ad.connClose();
				EMailer email=new EMailer();
				String approvermail="";
				email.sendMailToMaterialCodeRequester(request, approvermail, reqId, "Material Code Request", user.getEmployeeNo(), requesterID, "Rejected");
			}
			
			
		}catch (Exception e) {
			e.printStackTrace();
		}
			}
		}
		if(reqType.equalsIgnoreCase("Leave"))
		{
			int year = 0;
			for(int i=0;i<selectedReq.length;i++){
				Date dNow = new Date( );
				 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS");
			String dateNow = ft.format(dNow);
			float noOfDays=0;
			String leaveType="";
			String empID="";
			try{
			String getLeaveDetails="select *,year(start_date) as year from leave_details where Req_Id='"+selectedReq[i]+"'"; 
			ResultSet rsLeave=ad.selectQuery(getLeaveDetails);
			while(rsLeave.next())
			{
				noOfDays=rsLeave.getFloat("no_of_days");
				leaveType=rsLeave.getString("leave_type");
				empID=rsLeave.getString("firstname");
				year=Integer.parseInt(rsLeave.getString("year"));
			}
			boolean existStatus=false;
			String dataFlowType=""; 
			String checkESSApproverList="select count(*) from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave'";
			ResultSet rsCheckInEss=ad.selectQuery(checkESSApproverList);
			while(rsCheckInEss.next())
			{
				int number=rsCheckInEss.getInt(1);
				if(number==0)
				{
					existStatus=false;
				}else{
					existStatus=true;
				}
			}
			if(existStatus==true)
			{
				String getDataFlowType="select * from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave' ";
				ResultSet rsDataFlowType=ad.selectQuery(getDataFlowType);
				while(rsDataFlowType.next())
				{
					dataFlowType=rsDataFlowType.getString("reqType");
				}
				if(dataFlowType.equalsIgnoreCase("sequential")){
					existStatus=false;
				}
				if(dataFlowType.equalsIgnoreCase("parallel")){
					
					String frstapp="";
					String par1app="";
					String par2app="";
					
					//Approvers
					String getNextApprDetails="select * from ESS_Approvers where employeeNumber='"+empID+"'  and essType='Leave'";
		            ResultSet rsNextApprDetails=ad.selectQuery(getNextApprDetails);
		            while(rsNextApprDetails.next())
		            {
		            	frstapp=rsNextApprDetails.getString("ApproverId");
		            	par1app=rsNextApprDetails.getString("Parallel_Approver1");
		            	par2app=rsNextApprDetails.getString("Parallel_Approver2");
		            }
					
					
					
				//check reject count
					String comments="";
					int totalRejectCount=0;
					String getTotApprCount="select count(*) from All_Request where Req_Id='"+selectedReq[i]+"' and Requester_Name='"+empID+"' and Req_Status='Rejected' and Req_Type='Leave'";
					ResultSet rsTotApprCount=ad.selectQuery(getTotApprCount);
					while(rsTotApprCount.next())
					{
						totalRejectCount=rsTotApprCount.getInt(1);
					}
					if(totalRejectCount==0)
					{
						MainDao exeQry = new MainDao();
						LinkedList paramList =  new LinkedList();
						//check Approve Count
						int totalApproveCount=0;
						 getTotApprCount="select count(*) from All_Request where Req_Id='"+selectedReq[i]+"' and Requester_Name='"+empID+"' and Req_Status='Approved' and Req_Type='Leave'";
						 rsTotApprCount=ad.selectQuery(getTotApprCount);
						while(rsTotApprCount.next())
						{
							totalApproveCount=rsTotApprCount.getInt(1);
						}
						if(totalApproveCount==1)
						{
							String updateSql= "update All_Request set Req_Status='Rejected', Comments='"+comments+"',approved_date='',rejected_date='"+dateNow+"',Last_Approver='"+user.getEmployeeNo()+"',Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"' where Req_Id='"+selectedReq[i]+"' and Pending_Approver='"+user.getEmployeeNo()+"'  and Req_Type='Leave'";;
							int upd1=exeQry.SqlExecuteUpdate(updateSql, paramList);
						}
						if(totalApproveCount==2)
						{
							String updateSql= "update All_Request set Req_Status='Rejected', Comments='"+comments+"',approved_date='',rejected_date='"+dateNow+"',Last_Approver='"+user.getEmployeeNo()+"',Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"' where Req_Id='"+selectedReq[i]+"' and Pending_Approver='"+user.getEmployeeNo()+"'  and Req_Type='Leave'";;
							int upd1=exeQry.SqlExecuteUpdate(updateSql, paramList);
							
						}
						if(totalApproveCount==0)
						{
							String	updateSql= "update All_Request set Req_Status='Rejected', Comments='"+comments+"',approved_date='',rejected_date='"+dateNow+"',Last_Approver='"+user.getEmployeeNo()+"',Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',Actual_Approver='"+user.getEmployeeNo()+"',Actual_Approver_status='Rejected',Actual_Approved_Date='"+dateNow+"',Actual_Approved_Comments='"+comments+"' where Req_Id='"+selectedReq[i]+"' and Pending_Approver='"+user.getEmployeeNo()+"'  and Req_Type='Leave'";;
						int upd1=exeQry.SqlExecuteUpdate(updateSql, paramList);
						
						if(!frstapp.equalsIgnoreCase(""))
						{
							String updateSql1= "update All_Request set Approved_Persons='"+frstapp+"', Last_approver='"+frstapp+"',Pending_approver='',Comments='"+comments+"'," +
		                            "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected',Actual_Approver='"+user.getEmployeeNo()+"',Actual_Approver_status='Rejected',Actual_Approved_Date='"+dateNow+"',Actual_Approved_Comments='"+comments+"' where Req_Id='"+selectedReq[i]+"' and Pending_Approver='"+frstapp+"' and Req_Type='Leave'";
									 int upd11=ad.SqlExecuteUpdate(updateSql1);
						}
						if(par1app==null)
						{
							par1app="";
						}
						
						if(par2app==null)
						{
							par2app="";
						}


		             if(!par1app.equalsIgnoreCase(""))
								{
									String updateSql1= "update All_Request set Approved_Persons='"+par1app+"', Last_approver='"+par1app+"',Pending_approver='',Comments='"+comments+"'," +
			                                "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected',Actual_Approver='"+user.getEmployeeNo()+"',Actual_Approver_status='Rejected',Actual_Approved_Date='"+dateNow+"',Actual_Approved_Comments='"+comments+"' where Req_Id='"+selectedReq[i]+"' and Pending_Approver='"+par1app+"' and Req_Type='Leave'";
			   							 int upd11=ad.SqlExecuteUpdate(updateSql1);
								}
								
								if(!par2app.equalsIgnoreCase(""))
								{
									String updateSql1= "update All_Request set Approved_Persons='"+par2app+"', Last_approver='"+par2app+"',Pending_approver='',Comments='"+comments+"'," +
			                                "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected',Actual_Approver='"+user.getEmployeeNo()+"',Actual_Approver_status='Rejected',Actual_Approved_Date='"+dateNow+"',Actual_Approved_Comments='"+comments+"' where Req_Id='"+selectedReq[i]+"' and Pending_Approver='"+par2app+"' and Req_Type='Leave'";
			   							 int upd11=ad.SqlExecuteUpdate(updateSql1);
								}
				   		
							
						    
							String updateSql1= "update leave_details set Approvel_Status='Rejected',Last_Approver='"+user.getEmployeeNo()+"',Pending_Approver='',approved_date='',rejected_date='"+dateNow+"'  where Req_Id='"+selectedReq[i]+"'";
							int ii=ad.SqlExecuteUpdate(updateSql1);
							//change leave Balence
							 noOfDays=0;
							 leaveType="";
							float lvBal=0;
							float avlBal=0;
							float closingBal=0;
								try{
								 getLeaveDetails="select *,year(start_date) as year from leave_details where Req_Id='"+selectedReq[i]+"'"; 
								 rsLeave=ad.selectQuery(getLeaveDetails);
								while(rsLeave.next())
								{
									noOfDays=rsLeave.getFloat("no_of_days");
									leaveType=rsLeave.getString("leave_type");
									empID=rsLeave.getString("firstname");
									year=Integer.parseInt(rsLeave.getString("year"));
									
								}
								String leaveBal="select * from lv_type_d where lv_empcode='"+empID+"' and lv_typeid='"+leaveType+"' and lv_calyear='"+year+"'";
								ResultSet rsLeaveBal=ad.selectQuery(leaveBal);
								while(rsLeaveBal.next()){
									avlBal=rsLeaveBal.getFloat("lv_awtBal");
									closingBal=rsLeaveBal.getFloat("lv_clbal");
								}
								avlBal=avlBal-noOfDays;
								closingBal=closingBal-noOfDays;
							  String updateLeaveDetails="update lv_type_d set lv_awtBal='"+avlBal+"' where lv_typeid='"+leaveType+"' and lv_empcode='"+empID+"' and lv_calyear='"+year+"'";
							  int checkResult=ad.SqlExecuteUpdate(updateLeaveDetails);
								
								}catch (Exception e) {
									e.printStackTrace();
								}
							
					
						
					
						}
					}
					if(totalRejectCount==1)
					{
						existStatus=false;
					}
					if(totalRejectCount==2)
					{
						MainDao exeQry = new MainDao();
						LinkedList paramList =  new LinkedList();
						String	updateSql= "update All_Request set Req_Status='Rejected', Comments='"+comments+"',approved_date='',rejected_date='"+dateNow+"',Last_Approver='"+user.getEmployeeNo()+"',Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"' where Req_Id='"+selectedReq[i]+"' and Pending_Approver='"+user.getEmployeeNo()+"'  and Req_Type='Leave'";;
						int upd1=exeQry.SqlExecuteUpdate(updateSql, paramList);
						
					}
					
					
				}
			}
			if(existStatus==false)
			{
			String modifyRequest="update  All_Request set Last_Approver='"+user.getEmployeeNo()+"',Approved_Persons='"+user.getEmployeeNo()+"',Req_Status='Rejected',Pending_Approver='',approved_date='',rejected_date='"+dateNow+"' where Req_Type='Leave' and Pending_Approver='"+user.getEmployeeNo()+"' and Req_Id='"+selectedReq[i]+"'";	
			int statsChange=ad.SqlExecuteUpdate(modifyRequest);	
			if(statsChange>0){
				
				//change leave Balence
				
				float lvBal=0;
				float avlBal=0;
				float closingBal=0;
					try{
					
					String leaveBal="select * from lv_type_d where lv_empcode='"+empID+"' and lv_typeid='"+leaveType+"' and lv_calyear='"+year+"'";
					ResultSet rsLeaveBal=ad.selectQuery(leaveBal);
					while(rsLeaveBal.next()){
						avlBal=rsLeaveBal.getFloat("lv_awtBal");
						closingBal=rsLeaveBal.getFloat("lv_clbal");
					}
					avlBal=avlBal-noOfDays;
					closingBal=closingBal-noOfDays;
					
					String updateSql= "update leave_details set Approvel_Status='Rejected',Last_Approver='"+user.getEmployeeNo()+"',Pending_Approver='',approved_date='',rejected_date='"+dateNow+"',lv_balence='"+closingBal+"'  where Req_Id='"+selectedReq[i]+"'";
					int ii=ad.SqlExecuteUpdate(updateSql);
					
				  String updateLeaveDetails="update lv_type_d set lv_awtBal='"+avlBal+"' where lv_typeid='"+leaveType+"' and lv_empcode='"+empID+"' and lv_calyear='"+year+"'";
				  int checkResult=ad.SqlExecuteUpdate(updateLeaveDetails);
					
					}catch (Exception e) {
						e.printStackTrace();
					}
				}
			}
			}catch (Exception e) {
				e.printStackTrace();
			}
			}
			}
		pendingRecords(mapping, form, request, response);
		return mapping.findForward("approvePage");
	}
	
	public String Empname(String a)
	{
		EssDao ad = new EssDao();
		String b = "";
		if(a==null)
		{
		  return b;	
		}
		
		if(!a.equalsIgnoreCase(""))
		{	
			
		
		String emp = "select EMP_FULLNAME from emp_official_info where pernr = '"+a+"'";
		ResultSet rs = ad.selectQuery(emp);
		try {
			if(rs.next())
			{
				b=rs.getString("emp_fullname"); 
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			rs.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		}
		
		
		return b;
		
	}
	
	public ActionForward approveITMailRequest(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) { 
		String userID=request.getParameter("userID");
		String reqId=request.getParameter("reqId");
		String status=request.getParameter("status");
		EssDao ad=new EssDao();

		String trans="";
		String ITstatus="";
		String chkdate="";
		String chkdate1="";
	
		LinkedList list = new LinkedList();
        String forwardType="";
		ApprovalsForm help=(ApprovalsForm) form;
		HttpSession session=request.getSession();
	
		MainDao exeQry = new MainDao();
		String reqType = help.getReqRequstType();
		help.setRequestType(reqType);
	
		String filterBy=help.getSelectedFilter();
		help.setSelectedFilter(filterBy);
		help.setReqRequstType(reqType);
		int totalRecords=help.getTotalRecords();//21
		int startRecord=help.getStartRecord();//11
		int endRecord=help.getEndRecord();	
		
	
		help.setTotalRecords(totalRecords);
		help.setStartRecord(startRecord);
		help.setEndRecord(endRecord);
			String comments = help.getRemark();
		
		LinkedList reqDetails = new LinkedList();
		reqDetails.add(0, reqId);
		reqDetails.add(1, reqType);
		//User Informtion
			int rowCount= 0;
		System.out.println(reqType);
		//updateStatus("Approved", reqType,reqId);
		//get the total Approvers
		rowCount = getCount("Approvers_Details", reqType);
		//check and get next approver
		
		ITMail email = new ITMail();
		
		
		  boolean leaveStatus=true;
		   
			int year=0;
		   
		   String checkRecordStatus="select * from All_Request where Req_Type='IT Request' and Req_Id='"+reqId+"' and (Pending_Approver='"+userID+"' or Approved_Persons='"+userID+"')";
			ResultSet rsLvStatus=ad.selectQuery(checkRecordStatus);
			try{
			while(rsLvStatus.next())
			{
				String lvStatus=rsLvStatus.getString("Req_Status");
				if(lvStatus.equalsIgnoreCase("Approved"))
				{
					status="Approve";
					leaveStatus=false;
					help.setMessage2("");
					help.setMessage("This request has already been approved.");
				}
				if(lvStatus.equalsIgnoreCase("Rejected"))
				{
					status="Reject";
					leaveStatus=false;
					help.setMessage2("");
					help.setMessage("This request has already been rejected.");
				}
				if(lvStatus.equalsIgnoreCase("Self Cancelled"))
				{
					status="Self Cancelled";
					leaveStatus=false;
					help.setMessage2("");
					help.setMessage("This request has already been self cancelld.");
				}
				
				if(lvStatus.equalsIgnoreCase("Completed"))
				{
					status="Completed";
					leaveStatus=false;
					help.setMessage2("");
					help.setMessage("This request has already been Completed");
				}
			}
			}catch (Exception e) {
				e.printStackTrace();
			}
	
			

			int i=0;
			int hodpresent=0;
			int hodpresentinIt=0;
			String HODPresentId="";
			String HODPresentname="";
			String itengineerid="";
			String itengineername="";
			String HOD="";
			boolean presenthod=false;
			String getNextApprover="";
	    	int checkStatus=0;
	    	String pendingApprovers="";
	    	String nextApprovers="";
	    	
			Date dNow = new Date( );
			 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS");
			String dateNow = ft.format(dNow);
			
			
			
			String requesterdetails="Select * from IT_HELPDESK where Req_No='"+reqId+"'";
			ResultSet rsLeave=ad.selectQuery(requesterdetails);
			String empID="";
			String submit_date="";
			String ITType="";
			try{
			while(rsLeave.next())
			{
				empID=rsLeave.getString("Emp_No");
				submit_date=rsLeave.getString("Req_date");
				String b[] = submit_date.split(" ");
				String a[]=b[0].split("-");
				submit_date = a[2] + "/" + a[1] + "/" + a[0];
				ITType=rsLeave.getString("Req_type");
				
			}
			
			help.setRequestNo(reqId);
			help.setRequestDate(submit_date);
			help.setReqRequstType(ITType);
			help.setRequestStatus(status);
			
			
			request.setAttribute("itlist", "itlist");
			
if(leaveStatus==false){	
	return mapping.findForward("ITmaildetails");
			}
			
			
			if(status.equalsIgnoreCase("Approve")){
				int approverPriority=0;
				String getApprPriority="select Priority from IT_Approvers where Req_Type='"+ITType+"' and Approver_ID='"+userID+"' and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) ";
				ResultSet rsApprPriority=ad.selectQuery(getApprPriority);
				while(rsApprPriority.next())
				{
					approverPriority=rsApprPriority.getInt("Priority");
				}
				
				if(approverPriority==1)
				{
					
					if(ITType.equalsIgnoreCase("New IT Spares Request"))
					{
						String cat=help.getAssetcategory();
						String insertAduser="update IT_HELPDESK set Category='"+help.getAssetcategory()+"',reqbydate='"+help.getReqbydate()+"',"
								+ "suggmodel='"+help.getSuggestmodelname()+"',Apprxvalue='"+help.getApprxvalue()+"',purpose='"+help.getPurpose()+"'  where Req_No="+reqId+"";
										
								 i=ad.SqlExecuteUpdate(insertAduser);
					}
					if(ITType.equalsIgnoreCase("New IT Asset Request"))
					{
						
						String cat=help.getAssetcategory();
				 		String gxp="";
						String x=help.getGxpyes();
						String y=help.getGxpno();
						
						if(x==null)
						{
							gxp=help.getGxpno();
						}
						
						if(y==null)
						{
							gxp=help.getGxpyes();
						}
						
						
						String lan="";
						String a=help.getLanyes();
						String b=help.getLanno();
						
						if(a==null)
						{
							lan=help.getLanno();
						}
						
						if(b==null)
						{
							lan=help.getLanyes();
						}
						
						
						
						if(cat.equalsIgnoreCase("Desktop") ||cat.equalsIgnoreCase("Laptop"))
				 		{
						String insertAduser="update IT_HELPDESK set ADLoginName='"+help.getAdloginname()+"', Server_Address='"+help.getServer()+"' ,Category='"+help.getAssetcategory()+"',reqbydate='"+help.getReqbydate()+"',"
								+ "suggmodel='"+help.getSuggestmodelname()+"',gxp='"+gxp+"','Apprxvalue='"+help.getApprxvalue()+"',lan='"+lan+"',anysplreq='"+help.getAnysplreq()+"',purpose='"+help.getPurpose()+"'  where Req_No="+reqId+"";
										
								 i=ad.SqlExecuteUpdate(insertAduser);
				 		}
						
						if(cat.equalsIgnoreCase("Printer"))
				 		{
							String insertAduser="update IT_HELPDESK set ADLoginName='"+help.getAdloginname()+"', Server_Address='"+help.getServer()+"' ,Category='"+help.getAssetcategory()+"',reqbydate='"+help.getReqbydate()+"',"
							+ "suggmodel='"+help.getSuggestmodelname()+"',gxp='"+gxp+"',Apprxvalue='"+help.getApprxvalue() +"',lan='"+lan+"',anysplreq='"+help.getAnysplreq()+"',purpose='"+help.getPurpose()+"',typeofprinter='"+help.getTypeofprinter()+"',"
									+ "printvolpm='"+help.getPrintvolpermonth()+"',noofusers='"+help.getUsers()+"', suggmodelno='"+help.getSuggestmodelno() +"'  where Req_No="+reqId+"";
											
									 i=ad.SqlExecuteUpdate(insertAduser);
					 		}
							
					}
			if(ITType.equalsIgnoreCase("Active Directory User Creation")){
				String insertAduser="update IT_HELPDESK set Asset_Details='"+help.getAssetvalue()+"',ADLoginName='"+help.getAdloginname()+"', " +
				"Server_Address='"+help.getServer()+"' ,Req_Folder_access='"+help.getReqdfolderacces()+"',Reason='"+help.getReason()+"',Frst_Name='"+help.getFirstname()+"',Last_Name='"+help.getLastname()+"',Initials='"+help.getInitials()+"' where Req_No="+reqId+"";
						
				 i=ad.SqlExecuteUpdate(insertAduser);
				}
			
			if(ITType.equalsIgnoreCase("Active Directory User Deletion")){
				String insertAduser="update IT_HELPDESK set Asset_Details='"+help.getAssetvalue()+"',ADLoginName='"+help.getAdloginname()+"', " +
				"Server_Address='"+help.getServer()+"' ,Req_Folder_Deletion='"+help.getReqdfolderdeletion()+"',Delete_From='"+help.getDeletefrom()+"',Reason='"+help.getReason()+"' where Req_No="+reqId+"";
						
						 i=ad.SqlExecuteUpdate(insertAduser);
				}
			if(ITType.equalsIgnoreCase("Active Directory User Transfer")){
				String insertAduser="update IT_HELPDESK set Asset_Details='"+help.getAssetvalue()+"',ADLoginName='"+help.getAdloginname()+"', " +
				"From_Loc='"+help.getFromlocationId()+"',To_Loc='"+help.getTolocationId()+"',From_Dep='"+help.getFromdepartment()+"',To_Dep='"+help.getTodepartment()+"',Reason='"+help.getReason()+"' where Req_No="+reqId+"";
						
				 i=ad.SqlExecuteUpdate(insertAduser);
				}
		
			
			
			if(ITType.equalsIgnoreCase("Email ID Create Request"))
			{
				String outside="";
				String x=help.getOutsidecomyes();
				String y=help.getOutsidecomno();
				
				if(x==null)
				{
					outside=help.getOutsidecomno();
				}
				
				if(y==null)
				{
					outside=help.getOutsidecomyes();
				}
				
				String insertAduser="update IT_HELPDESK set  department ='"+help.getDepartment()+"' , designation ='"+help.getDesignation()+"' , ADLoginName='"+help.getAdloginname()+"',SuggestedEmailId='"+help.getSuggestedEmailId()+"', " +
			"comm_outside='"+outside+"',Is_He_Hod='"+help.getIsHeHod()+"',Enable_Web_access='"+help.getEnablewebAccess()+"'," +
			" Is_This_common_ID='"+help.getIsthisCommonId()+"',Reason='"+help.getReason()+"',TotalEmailIdInDepartment='"+help.getTotalmailIdDept()+"',TotalEmailIdInLocation='"+help.getTotalmailIdloc()+"',Frst_Name='"+help.getFirstname()+"',Last_Name='"+help.getLastname()+"',Middle_Name='"+help.getMiddname()+"' where Req_No="+reqId+" ";
	
				
				 i=ad.SqlExecuteUpdate(insertAduser);
			}
			if(ITType.equalsIgnoreCase("Email ID Change Request"))
			{
				String outside="";
				String x=help.getOutsidecomyes();
				String y=help.getOutsidecomno();
				
				if(x==null)
				{
					outside=help.getOutsidecomno();
				}
				
				if(y==null)
				{
					outside=help.getOutsidecomyes();
				}
				
				String insertAduser="update IT_HELPDESK set ADLoginName='"+help.getAdloginname()+"',From_EmailID='"+help.getFromemailId()+"',SuggestedEmailId='"+help.getSuggestedEmailId()+"', " +
				"comm_outside='"+outside+"',Transfer_Old_Emails='"+help.getTransferoldmail()+"',delete_old_email='"+help.getDeleteoldmails()+"',Is_He_Hod='"+help.getIsHeHod()+"',Enable_Web_access='"+help.getEnablewebAccess()+"'," +
				" Is_This_common_ID='"+help.getIsthisCommonId()+"',Reason='"+help.getReason()+"',TotalEmailIdInDepartment='"+help.getTotalmailIdDept()+"',TotalEmailIdInLocation='"+help.getTotalmailIdloc()+"' where Req_No="+reqId+" ";
		
				 i=ad.SqlExecuteUpdate(insertAduser);
				 
			}
			
			if(ITType.equalsIgnoreCase("Email ID Delete Request"))
			{
				String insertAduser="update IT_HELPDESK set ADLoginName='"+help.getAdloginname()+"',EmailID_Deleted='"+help.getEmailidDelete()+"', " +
				"Is_He_Hod='"+help.getIsHeHod()+"',Is_This_common_ID='"+help.getIsthisCommonId()+"',Delete_From='"+help.getDeletefrom()+"',Reason='"+help.getReason()+"',TotalEmailIdInDepartment='"+help.getTotalmailIdDept()+"',TotalEmailIdInLocation='"+help.getTotalmailIdloc()+"' where Req_No="+reqId+" ";
			
				 i=ad.SqlExecuteUpdate(insertAduser);
				 
			}
			
			if(ITType.equalsIgnoreCase("Internet Access Request"))
			{
				String insertAduser="update IT_HELPDESK set Asset_Details='"+help.getAssetvalue()+"',ADLoginName='"+help.getAdloginname()+"', " +
				"Reason='"+help.getReason()+"',InternetGroupCategory='"+help.getInternetgrp()+"' where Req_No="+reqId+"";
				
				
				 i=ad.SqlExecuteUpdate(insertAduser); 
			}
			if(ITType.equalsIgnoreCase("External Drives Access Request"))
			{
				String devicetype="";
				String a=help.getCdrom();
				String b=help.getUsb();
				
				if(a==null)
				{
				a="";
				}
				if(b==null)
				{
				b="";
				}
				
				
				 if(a.equalsIgnoreCase("CD/DVD_ROM") && b.equalsIgnoreCase("USB")){
					 devicetype="3";
				 }else{
					 if(a.equalsIgnoreCase("CD/DVD_ROM")){
						 devicetype="1";
					 }
					 if(b.equalsIgnoreCase("USB")){
						 devicetype="2";
					 }
				 }
				
				String insertAduser="update IT_HELPDESK set Asset_Details='"+help.getAssetvalue()+"',ADLoginName='"+help.getAdloginname()+"', " +
				"Device_type='"+devicetype+"',Access_type='"+help.getAccesstype()+"',Reason='"+help.getReason()+"' where Req_No="+reqId+"";
				
				
				 i=ad.SqlExecuteUpdate(insertAduser);
			}
			if(ITType.equalsIgnoreCase("FTP Access Request"))
			{
				
				
				String a[]=help.getAccesstypes();
				StringBuffer result = new StringBuffer();
				for (int j = 0; j < a.length; j++) {
				   result.append( a[j]+"," );
				}
				String ans = result.toString();
				ans=ans.substring(0, ans.length()-1);
				
				String insertAduser="update IT_HELPDESK set Asset_Details='"+help.getAssetvalue()+"',ADLoginName='"+help.getAdloginname()+"', " +
				" Server_Address='"+help.getServer()+"',Req_Folder_access='"+help.getRequiredfoldername()+"',Access_type='"+ans+"'," +
				"FrmRequiredDurationofAccess='"+help.getFrmdurationofaccess()+"',ToRequiredDurationofAccess='"+help.getTodurationofaccess()+"',Reason='"+help.getReason()+"',"
				+ "UserName='"+help.getUsername()+"',Password='"+help.getPassword()+"',RequiredDurationofAccess='"+help.getDurationofaccess()+"' where Req_No="+reqId+"";
				
				
				 i=ad.SqlExecuteUpdate(insertAduser);
			}
			
			if(ITType.equalsIgnoreCase("File Server Access Request"))
			{
				String insertAduser="update IT_HELPDESK set Asset_Details='"+help.getAssetvalue()+"',ADLoginName='"+help.getAdloginname()+"', " +
				"Server_Address='"+help.getServer()+"' ,Req_Folder_access='"+help.getRequiredfoldername()+"',Access_type='"+help.getAccesstype()+"',Reason='"+help.getReason()+"' where Req_No="+reqId+"";
				
				 i=ad.SqlExecuteUpdate(insertAduser);
			}
			
			
				}

				
				
				
				
			
				int upd=0;
				int upd1=0;
       //check ITHOD status
				
				String ithodstus="select IT_hod_status from IT_HELPDESK where Req_No='"+reqId+"' ";
				ResultSet result=ad.selectQuery(ithodstus);
				while(result.next())
				{
					ITstatus=result.getString("IT_hod_status");
				}
			
				if(ITstatus==null)
				{
			String updateSql= "update All_Request set Approved_Persons='"+userID+"', Last_approver='"+userID+"',Pending_approver='',Comments='"+help.getComments()+"'," +
            "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' and Pending_approver='"+userID+"' and Req_Type='IT Request'";
			 upd=ad.SqlExecuteUpdate(updateSql);
				}
				
				else
				{
			
						String updateSql= "update All_Request set Approved_Persons='"+userID+"', Last_approver='"+userID+"',Pending_approver='',Comments='"+help.getComments()+"'," +
			            "approved_date='"+dateNow+"',rejected_date='',Req_Status='Completed' where Req_Id='"+reqId+"' and Pending_approver='"+userID+"' and Req_Type='IT Request'";
						 upd1=ad.SqlExecuteUpdate(updateSql);	
					
				}
		
			
				if(upd1>0)
				{
					help.setMessage("Request Closed successfully ");
					help.setComments("");
				}
			
			if(upd>0)
			{
				
					
				help.setMessage("Request Approved successfully ");
				help.setComments("");
			}
				
				if(ITstatus==null)
				{
					//transaction table
					
					 trans="insert into IT_TRANSACTION_DETAILS(Req_No,Emp_No,Req_type,Approver_ID,Req_Status,Transaction_Date,ITEng_Status)" +
					" values('"+reqId+"','"+empID+"','"+ITType+"','"+userID+"','Approved','"+dateNow+"','Open')";
				 	 i=ad.SqlExecuteUpdate(trans);

				 approverPriority=0;
				 getApprPriority="select Priority from IT_Approvers where Req_Type='"+ITType+"' and Approver_ID='"+userID+"' and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  ";
				 rsApprPriority=ad.selectQuery(getApprPriority);
				while(rsApprPriority.next())
				{
					approverPriority=rsApprPriority.getInt("Priority");
				}
				
				//IT Engineer details
				 String chkIt="select it.Approver_ID,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp where Req_Type = '"+ITType+"' " +
				 "and Priority=1 and emp.PERNR=it.Approver_ID and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) ";
				 ResultSet rs3= ad.selectQuery(chkIt);
				 try {
					if(rs3.next())
					 {
						itengineerid=rs3.getString("Approver_ID");
						itengineername=rs3.getString("EMP_FULLNAME");
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				
				
					
					
					String getApproverID="select Priority,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp where Req_Type='"+ITType+"'" +
							" and emp.PERNR=it.Approver_ID and Priority>'"+approverPriority+"' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  order by Priority";				
					ResultSet approverRS=ad.selectQuery(getApproverID);
					try {
						while(approverRS.next()){
								int priority = approverRS.getInt("Priority");
								
								if(pendingApprovers.equalsIgnoreCase("")){
								pendingApprovers = approverRS.getString("EMP_FULLNAME")+",";
								}
								else{
									pendingApprovers = pendingApprovers +approverRS.getString("EMP_FULLNAME")+",";
								}
								
						}
						pendingApprovers=pendingApprovers+itengineername;
						
					} catch (SQLException e2) {
						
						e2.printStackTrace();
					}
					
							
				String maintable="update IT_HELPDESK set Req_Status='In Process',approved_date='"+dateNow+"',rejected_date='',Pending_approver='"+pendingApprovers+"',Last_approver='"+Empname(userID)+"' where Req_No='"+reqId+"' "	;

				 i=ad.SqlExecuteUpdate(maintable);
				 
				 try {
				 //Get It Approvers 
				int totalApproverCount=0;
				String getcount="select Count(*) from IT_Approvers where Req_Type='"+ITType+"' and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  ";
				ResultSet rsA=ad.selectQuery(getcount);
				while(rsA.next())
				{
					totalApproverCount=rsA.getInt(1);
				}
				 getApprPriority="select Priority from IT_Approvers where Req_Type='"+ITType+"' and Approver_ID='"+userID+"' and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) ";
				 rsApprPriority=ad.selectQuery(getApprPriority);
				while(rsApprPriority.next())
				{
					approverPriority=rsApprPriority.getInt("Priority");
				}
				if((totalApproverCount==approverPriority)||ITType.equalsIgnoreCase("Active Directory User Creation")){
					//update user request  status
				 maintable="update IT_HELPDESK set IT_hod_status='YES',Req_Status='Approved',approved_date='"+dateNow+"',rejected_date='',Pending_approver='"+pendingApprovers+"',Last_approver='"+Empname(userID)+"' where Req_No='"+reqId+"' "	;
				 i=ad.SqlExecuteUpdate(maintable);
				 //insert again to IT engineer
				 String insert="insert into All_Request(Req_Id,Req_Type,Requester_Name,Req_Date,Req_Status,Last_Approver," +
					"Pending_Approver,Approved_Persons,Requester_Id,type) values('"+reqId+"','IT Request','"+empID+"'," +
					"'"+submit_date+"','Pending','','"+itengineerid +"','',"+empID+",'"+ITType+"')";
						 i=ad.SqlExecuteUpdate(insert);
							ad.connClose();
						 int j = email.sendMailToApprover(request, Integer.parseInt(reqId),ITType,itengineerid,"");
							//transaction table
							
						  trans="insert into IT_TRANSACTION_DETAILS(Req_No,Emp_No,Req_type,Approver_ID,Req_Status,Transaction_Date,ITEng_Status)" +
							" values('"+reqId+"','"+empID+"','"+ITType+"','"+itengineerid+"','Pending','"+dateNow+"','Open')";
						 	 i=ad.SqlExecuteUpdate(trans);
				 
					
				}else{
					String nextApprover="";

						
						
						String nxt="select * from IT_Approvers where Req_Type = '"+ITType+"' and Priority='"+(approverPriority+1)+"' and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) ";
					
					 ResultSet rs= ad.selectQuery(nxt);
					
						while(rs.next())
						 {
							nextApprover=rs.getString("Approver_ID");
						 }
							
								
							String insert="insert into All_Request(Req_Id,Req_Type,Requester_Name,Req_Date,Req_Status,Last_Approver," +
							"Pending_Approver,Approved_Persons,Requester_Id,type) values('"+reqId+"','IT Request','"+empID+"'," +
							"'"+submit_date+"','Pending','','"+nextApprover+"','',"+empID+",'"+ITType+"')";
								
							 i=ad.SqlExecuteUpdate(insert);
								ad.connClose();
							 int j = email.sendMailToApprover(request, Integer.parseInt(reqId),ITType,nextApprover,"");
							 
							//transaction table
								
							  trans="insert into IT_TRANSACTION_DETAILS(Req_No,Emp_No,Req_type,Approver_ID,Req_Status,Transaction_Date,ITEng_Status)" +
								" values('"+reqId+"','"+empID+"','"+ITType+"','"+nextApprover+"','Pending','"+dateNow+"','Open')";
							 	 i=ad.SqlExecuteUpdate(trans);
					
				 
				}
				} catch (SQLException e) {
					e.printStackTrace();
				
				 }
				
				
				
			}
			 
				else
				{
					String maintable1="update IT_HELPDESK set ITEng_Status='Closed',Req_Status='Completed',approved_date='"+dateNow+"',rejected_date='',Pending_approver='No',Last_approver='"+Empname(userID)+"' where Req_No='"+reqId+"' "	;
					 i=ad.SqlExecuteUpdate(maintable1);
					 
					//transaction table
						
					  trans="insert into IT_TRANSACTION_DETAILS(Req_No,Emp_No,Req_type,Approver_ID,Req_Status,Transaction_Date,ITEng_Status)" +
						" values('"+reqId+"','"+empID+"','"+ITType+"','"+userID+"','Approved','"+dateNow+"','Closed')";
					 	 i=ad.SqlExecuteUpdate(trans);
					 ad.connClose();
						
					 	 int j = email.sendMailToRequester(request, Integer.parseInt(reqId),ITType,userID,"");
				}
			
			
			
			}
			else
			{
			
				String updateSql= "update All_Request set Approved_Persons='"+userID+"', Last_approver='"+userID+"',Pending_approver='',Comments='"+help.getComments()+"'," +
			     "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected' where Req_Id='"+reqId+"' and Pending_approver='"+userID+"' and Req_Type='IT Request'";
							 
							int upd=ad.SqlExecuteUpdate(updateSql);
							if(upd>0)
							{
                                 help.setMessage2("Request has been rejected Succesfully");
								request.setAttribute("statusMessage2", "statusMessage2");
								help.setComments("");
								String maintable="update IT_HELPDESK set Req_Status='Rejected',approved_date='',rejected_date='"+dateNow+"',Pending_approver='No',Last_approver='"+Empname(userID)+"' where Req_No='"+reqId+"' "	;

								 i=ad.SqlExecuteUpdate(maintable);
								
								 
								//transaction table
									
								  trans="insert into IT_TRANSACTION_DETAILS(Req_No,Emp_No,Req_type,Approver_ID,Req_Status,Transaction_Date,ITEng_Status)" +
									" values('"+reqId+"','"+empID+"','"+ITType+"','"+userID+"','Rejected','"+dateNow+"','Open')";
								 	 i=ad.SqlExecuteUpdate(trans);
								 	 ad.connClose();
								 	 int j = email.sendMailToRequester(request, Integer.parseInt(reqId),ITType,userID,"");
							
							}
			}
			
			
		}catch (Exception e) {
		e.printStackTrace();
		}
			
			int approverPriority=0;
			String getApprPriority="select Priority from IT_Approvers where Req_Type='"+ITType+"' and Approver_ID='"+userID+"' and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) ";
			ResultSet rsApprPriority=ad.selectQuery(getApprPriority);
			try {
				while(rsApprPriority.next())
				{
					approverPriority=rsApprPriority.getInt("Priority");
				}
			} catch (SQLException e2) {
			
				e2.printStackTrace();
			}
			
			if(ITType.equalsIgnoreCase("Qms Application Access"))
			{

				LinkedList qmscreation=new LinkedList();
				String empno=userID;
				
				String data="select emp.PERNR,emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE " +
						"from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"+empID+"' and " +
						"dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";	
				ResultSet rs= ad.selectQuery(data);
				try {
					while(rs.next())
					{
						
					
						help.setRequestername(rs.getString("EMP_FULLNAME"));
						help.setRequesterdepartment(rs.getString("DPTSTXT"));
						help.setRequesterdesignation(rs.getString("DSGSTXT"));
						help.setExtno(rs.getString("TEL_EXTENS"));
						help.setIpPhoneno(rs.getString("IP_PHONE"));
						help.setLocation(rs.getString("LOCATION_CODE"));
						help.setEmpno(rs.getString("PERNR"));
						
					
						
					}
				} catch (SQLException e) {
				  e.printStackTrace();
				}
				
				String data1=" select * from IT_HELPDESK where Req_No="+reqId+"";	
		ResultSet rs1= ad.selectQuery(data1);
		try {
			while(rs1.next())
			{
				help.setAssetvalue(rs1.getString("Asset_Details"));
				help.setAdloginname(rs1.getString("ADLoginName"));
				help.setServer(rs1.getString("Server_Address"));
				help.setReqdfolderacces(rs1.getString("Req_Folder_access"));
				help.setReason(rs1.getString("Reason"));
				help.setHostname(rs1.getString("HostName"));
				help.setIPNumber(rs1.getString("IPAddress"));
				help.setReqPriority(rs1.getString("Req_Priority"));
				help.setLocationId(rs1.getString("QMS_LocId"));
				help.setUser(rs1.getString("QMS_GrpId"));
				help.setView(rs1.getString("QMS_View"));
			
				
				String rmk=rs1.getString("Remarks");
				if(rmk!=null)
				{
					help.setRemarks(rs1.getString("Remarks"));
					request.setAttribute("Remark", "Remark");
				}
			}
		} catch (SQLException e) {
			  e.printStackTrace();
			}
		
					
		qmscreation.add(help);
		request.setAttribute("qmscreation", qmscreation);	
		
		//Approver Details
		  checkStatus=0;
		LinkedList listApprers=new LinkedList();
		int jk=0;
		//HOD

		 hodpresent=0;
		 hodpresentinIt=0;
		 HODPresentId="";
		 HODPresentname="";
		 itengineerid="";
		 itengineername="";
		 HOD="";
			pendingApprovers="";
		
		 //chk if he has Hod
		 String chkhod="select count(*) from ESS_Approvers where employeeNumber='"+empID+"'  ";
		 ResultSet rs10= ad.selectQuery(chkhod);
		 try {
			while(rs10.next())
			 {
				 hodpresent=rs10.getInt(1);
			 }
		} catch (SQLException e1) {
			
			e1.printStackTrace();
		}
		
		//get hod details
		
	
		if(hodpresent>0){
		String gethod="select ess.ApproverId,emp.EMP_FULLNAME from ESS_Approvers  as ess,emp_official_info as emp  " +
				" where employeeNumber='"+empID+"'  and essType='Leave' and emp.PERNR=ess.ApproverId ";
		 ResultSet rs2= ad.selectQuery(gethod);
		 
		 try {
			if(rs2.next())
			 {
				HODPresentId=rs2.getString("ApproverId");
				HODPresentname=rs2.getString("EMP_FULLNAME");
			 }
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		}
		
		//chk if he is present in It approver
		 String chkhodinit="select count(*) from IT_Approvers where Approver_ID='"+HODPresentId+"' and Req_Type = '"+ITType+"'  and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))";
		 ResultSet rs11= ad.selectQuery(chkhodinit);
		 try {
			while(rs11.next())
			 {
				hodpresentinIt=rs11.getInt(1);
			 }
		} catch (SQLException e1) {
			
			e1.printStackTrace();
		}
		 
			if(hodpresent>0 && hodpresentinIt==0 )
			{
				
				
				try {
					
						checkStatus=1;
						ApprovalsForm apprvershod=new ApprovalsForm();
						apprvershod.setPriority("1");
						
						apprvershod.setEmployeeCode(HODPresentId);
						apprvershod.setEmployeeName(HODPresentname);
						
						String recordStatus="select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
					+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND "
					+ "all_r.Last_Approver='"+HODPresentId+"' and all_r.Req_Type='IT Request' and it.Req_Type='"+ITType+"' and emp.PERNR=all_r.Last_Approver"
					+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";
						
						ResultSet rsAppInfo=ad.selectQuery(recordStatus);
						if(rsAppInfo.next())
						{
							apprvershod.setApproveStatus(rsAppInfo.getString("Req_Status"));
							String approveStatus=rsAppInfo.getString("Req_Status");
							if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
							{
								apprvershod.setDate(rsAppInfo.getString("approved_date"));
							}else{
								apprvershod.setDate(rsAppInfo.getString("rejected_date"));
							}
							 comments="";
							comments=rsAppInfo.getString("Comments");
							if(comments=="null" )
							{
								apprvershod.setComments("");
							}else{
								apprvershod.setComments(rsAppInfo.getString("Comments"));
							}
						}
						
						
						listApprers.add(apprvershod);
					 jk=1;
					}
				
				catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				
			}
		
		
	
		
		
		String getApprDetails="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
		ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
		try {
			while(rsApprDetails.next())
			{
			
				checkStatus=1;
				ApprovalsForm apprvers=new ApprovalsForm();
				apprvers.setPriority(rsApprDetails.getString("Priority"));
				
				
				
				
			
				
				apprvers.setPriority(rsApprDetails.getString("Priority"));
				if(jk==1){
					
					apprvers.setPriority(Integer.toString(listApprers.size()+1));
				}
				apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
				String empCode=rsApprDetails.getString("Approver_Id");
				
				String recordStatus="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
						+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
						+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode+"' and it.Approver_Id=all_r.Last_Approver  and all_r.Req_Type='IT Request' and "
						+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
						+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
				
				ResultSet rsAppInfo=ad.selectQuery(recordStatus);
				if(rsAppInfo.next())
				{
					
					if(rsAppInfo.getInt("Priority")==1 )
					{
						 chkdate=rsAppInfo.getString("approved_date");
						 chkdate1=rsAppInfo.getString("rejected_date");
					}
					apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
					String approveStatus=rsAppInfo.getString("Req_Status");
					if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
					{
					apprvers.setDate(rsAppInfo.getString("approved_date"));
					}else{
						apprvers.setDate(rsAppInfo.getString("rejected_date"));
					}
					 comments="";
					comments=rsAppInfo.getString("Comments");
					if(comments=="null" )
					{
						apprvers.setComments("");
					}else{
						apprvers.setComments(rsAppInfo.getString("Comments"));
					}
				}
				apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
				
				listApprers.add(apprvers);
				
			}
				//IT ENGINEER DETAIlS
				
				
				String getApprDetails1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' and it.Priority=1    group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
				ResultSet rsApprDetails1=ad.selectQuery(getApprDetails1);
				
					while(rsApprDetails1.next())
					{
						checkStatus=1;
						ApprovalsForm apprvers=new ApprovalsForm();
						apprvers.setPriority(Integer.toString(listApprers.size()+1));
						
						apprvers.setEmployeeCode(rsApprDetails1.getString("Approver_Id"));
						String empCode1=rsApprDetails1.getString("Approver_Id");
						
						String recordStatus1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
								+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
								+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode1+"' and it.Approver_Id=all_r.Last_Approver and all_r.Req_Type='IT Request' and "
								+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
								+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
						
						ResultSet rsAppInfo1=ad.selectQuery(recordStatus1);
						if(rsAppInfo1.next())
						{
							
							String approveStatus=rsAppInfo1.getString("Req_Status");
							if(approveStatus.equalsIgnoreCase("Approved"))
							{
								recordStatus1=recordStatus1+" order by all_r.approved_date desc ";
								ResultSet rsAppInfo2=ad.selectQuery(recordStatus1);
								if(rsAppInfo2.next())
								{
									if(!chkdate.equalsIgnoreCase(rsAppInfo2.getString("approved_date")))
									{
										apprvers.setApproveStatus("Closed");
									apprvers.setDate(rsAppInfo2.getString("approved_date"));
									
								
								
								 comments="";
								comments=rsAppInfo2.getString("Comments");
								if(comments=="null" )
								{
									apprvers.setComments("");
								}else{
									apprvers.setComments(rsAppInfo2.getString("Comments"));
								}
								}
								}
							}else{
								
								recordStatus1=recordStatus1+" order by all_r.rejected_date desc ";
								ResultSet rsAppInfo3=ad.selectQuery(recordStatus1);
								if(rsAppInfo3.next())
								{
									if(!chkdate1.equalsIgnoreCase(rsAppInfo3.getString("rejected_date")))
									{
									apprvers.setDate(rsAppInfo3.getString("rejected_date"));
									}
								
								 comments="";
								comments=rsAppInfo3.getString("Comments");
								if(comments=="null" )
								{
									apprvers.setComments("");
								}else{
									apprvers.setComments(rsAppInfo3.getString("Comments"));
								}
								}
							}
							
						}
						apprvers.setEmployeeName(rsApprDetails1.getString("EMP_FULLNAME"));
				
					listApprers.add(apprvers);
					}
				
				request.setAttribute("approverDetails", listApprers);
			
		} 
		
			catch (SQLException e) {
			e.printStackTrace();
		}
		
		
		
		if(approverPriority==1)
		{
			
				forwardType="QMSformENG";
				
				
		}
		else{
		forwardType="QMSformAppr";
		}
			
				
			}
			
			if(ITType.equalsIgnoreCase("New IT Spares Request"))
			{

				LinkedList newassetcreation=new LinkedList();
				String empno=userID;
				
				String data="select emp.PERNR,emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE " +
						"from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"+empID+"' and " +
						"dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";	
				ResultSet rs= ad.selectQuery(data);
				try {
					while(rs.next())
					{
						
					
						help.setRequestername(rs.getString("EMP_FULLNAME"));
						help.setRequesterdepartment(rs.getString("DPTSTXT"));
						help.setRequesterdesignation(rs.getString("DSGSTXT"));
						help.setExtno(rs.getString("TEL_EXTENS"));
						help.setIpPhoneno(rs.getString("IP_PHONE"));
						help.setLocation(rs.getString("LOCATION_CODE"));
						help.setEmpno(rs.getString("PERNR"));
						
					
						
					}
				} catch (SQLException e) {
				  e.printStackTrace();
				}
				String requester="";
				
				String data1=" select * from IT_HELPDESK where Req_No="+reqId+"";	
		ResultSet rs1= ad.selectQuery(data1);
		try {
			while(rs1.next())
			{
				help.setAssetvalue(rs1.getString("Asset_Details"));
				help.setAdloginname(rs1.getString("ADLoginName"));
				help.setServer(rs1.getString("Server_Address"));

				help.setReason(rs1.getString("Reason"));
				help.setHostname(rs1.getString("HostName"));
				help.setIPNumber(rs1.getString("IPAddress"));
				help.setReqPriority(rs1.getString("Req_Priority"));
				
				help.setAssetcategory(rs1.getString("Category"));
				help.setReqbydate(rs1.getString("reqbydate"));
				help.setSuggestmodelname(rs1.getString("suggmodel"));
				
				
				
			
				help.setSuggestmodelno(rs1.getString("suggmodelno"));
				help.setApprxvalue(rs1.getString("Apprxvalue"));
		

				help.setPurpose(rs1.getString("purpose"));
		
				
				String rmk=rs1.getString("Remarks");
				if(rmk!=null)
				{
					help.setRemarks(rs1.getString("Remarks"));
					request.setAttribute("Remark", "Remark");
				}
			}
		} catch (SQLException e) {
			  e.printStackTrace();
			}
		
					
		newassetcreation.add(help);
		request.setAttribute("newassetcreation", newassetcreation);	
		
		//Approver Details
		  checkStatus=0;
		LinkedList listApprers=new LinkedList();
		int jk=0;
		//HOD

		 hodpresent=0;
		 hodpresentinIt=0;
		 HODPresentId="";
		 HODPresentname="";
		 itengineerid="";
		 itengineername="";
		 HOD="";
			pendingApprovers="";
		
		 //chk if he has Hod
		 String chkhod="select count(*) from ESS_Approvers where employeeNumber='"+empID+"'  ";
		 ResultSet rs10= ad.selectQuery(chkhod);
		 try {
			while(rs10.next())
			 {
				 hodpresent=rs10.getInt(1);
			 }
		} catch (SQLException e1) {
			
			e1.printStackTrace();
		}
		
		//get hod details
		
	
		if(hodpresent>0){
		String gethod="select ess.ApproverId,emp.EMP_FULLNAME from ESS_Approvers  as ess,emp_official_info as emp  " +
				" where employeeNumber='"+empID+"'  and essType='Leave' and emp.PERNR=ess.ApproverId ";
		 ResultSet rs2= ad.selectQuery(gethod);
		 
		 try {
			if(rs2.next())
			 {
				HODPresentId=rs2.getString("ApproverId");
				HODPresentname=rs2.getString("EMP_FULLNAME");
			 }
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		}
		
		//chk if he is present in It approver
		 String chkhodinit="select count(*) from IT_Approvers where Approver_ID='"+HODPresentId+"' and Req_Type = '"+ITType+"'  and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))";
		 ResultSet rs11= ad.selectQuery(chkhodinit);
		 try {
			while(rs11.next())
			 {
				hodpresentinIt=rs11.getInt(1);
			 }
		} catch (SQLException e1) {
			
			e1.printStackTrace();
		}
		 
		// Plant head
			String plantheadid = "";
			String plantheadname = "";
			String plantheaddep = "";
			String plantheaddesg = "";
			String a="";
			String userx="select loc.LOCID from Location as loc,emp_official_info as emp where loc.LOCATION_CODE=emp.LOCID and emp.PERNR='"+requester+"' ";
			ResultSet userrs=ad.selectQuery(userx);
			try {
				while(userrs.next())
				 {				
					a=userrs.getString("LOCID");
				 }
			} catch (SQLException e2) {
				// TODO Auto-generated catch block
				e2.printStackTrace();
			}
			if (!a.equalsIgnoreCase("16")) {
				String plant = "select pl.Plant,pl.PERNR,emp.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from PLANT_HEAD pl,emp_official_info emp,DEPARTMENT dep,DESIGNATION desg where Plant=(select LOCATION_CODE from Location where LOCID='"
						+ a
						+ "') and emp.PERNR=pl.PERNR and dep.DPTID=emp.DPTID and desg.DSGID=emp.DSGID";
				ResultSet pl = ad.selectQuery(plant);
				try {
					while (pl.next()) {
						plantheadid = pl.getString("pernr");
						plantheadname = pl.getString("EMP_FULLNAME");
						plantheaddep = pl.getString("DPTSTXT");
						plantheaddesg = pl.getString("DSGSTXT");
					}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			if (plantheadid.equalsIgnoreCase("")) {

				if (hodpresent > 0 && hodpresentinIt == 0) {

					try {

						checkStatus = 1;
						ApprovalsForm apprvershod = new ApprovalsForm();
						apprvershod.setPriority("1");

						apprvershod.setEmployeeCode(HODPresentId);
						apprvershod.setEmployeeName(HODPresentname);

						String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
								+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
								+ reqId
								+ "' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
								+ empID
								+ "')) AND "
								+ "all_r.Last_Approver='"
								+ HODPresentId
								+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
								+ ITType
								+ "' and emp.PERNR=all_r.Last_Approver"
								+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

						ResultSet rsAppInfo = ad.selectQuery(recordStatus);
						if (rsAppInfo.next()) {
							apprvershod.setApproveStatus(rsAppInfo
									.getString("Req_Status"));
							String approveStatus = rsAppInfo
									.getString("Req_Status");
							if (approveStatus.equalsIgnoreCase("Approved")
									|| approveStatus
											.equalsIgnoreCase("Completed")) {
								apprvershod.setDate(rsAppInfo
										.getString("approved_date"));
							} else {
								apprvershod.setDate(rsAppInfo
										.getString("rejected_date"));
							}
							comments = "";
							comments = rsAppInfo.getString("Comments");
							if (comments == "null") {
								apprvershod.setComments("");
							} else {
								apprvershod.setComments(rsAppInfo
										.getString("Comments"));
							}
						}

						listApprers.add(apprvershod);
						jk = 1;
					}

					catch (SQLException e1) {

						e1.printStackTrace();
					}

				}
			}

			if (!plantheadid.equalsIgnoreCase("")) {

				try {

					checkStatus = 1;
					ApprovalsForm apprvershod = new ApprovalsForm();
					apprvershod.setPriority("1");

					apprvershod.setEmployeeCode(plantheadid);
					apprvershod.setEmployeeName(plantheadname);

					String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
							+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
							+ reqId
							+ "' and it.LOCATION_ID='"
							+ EmpLoc(userID)
							+ "' AND "
							+ "all_r.Last_Approver='"
							+ plantheadid
							+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
							+ ITType
							+ "' and emp.PERNR=all_r.Last_Approver"
							+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

					ResultSet rsAppInfo = ad.selectQuery(recordStatus);
					if (rsAppInfo.next()) {
						apprvershod.setApproveStatus(rsAppInfo
								.getString("Req_Status"));
						String approveStatus = rsAppInfo
								.getString("Req_Status");
						if (approveStatus.equalsIgnoreCase("Approved")
								|| approveStatus
										.equalsIgnoreCase("Created")) {
							apprvershod.setDate(rsAppInfo
									.getString("approved_date"));
						} else {
							apprvershod.setDate(rsAppInfo
									.getString("rejected_date"));
						}
						comments = "";
						comments = rsAppInfo.getString("Comments");
						if (comments == "null") {
							apprvershod.setComments("");
						} else {
							apprvershod.setComments(rsAppInfo
									.getString("Comments"));
						}
					}

					listApprers.add(apprvershod);
					jk = 1;
				}

				catch (SQLException e1) {

					e1.printStackTrace();
				}

			}

			String getApprDetails = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
					+ empID
					+ "'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"
					+ ITType
					+ "' group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
			ResultSet rsApprDetails = ad.selectQuery(getApprDetails);
			try {
				while (rsApprDetails.next()) {

					checkStatus = 1;
					ApprovalsForm apprvers = new ApprovalsForm();
					apprvers.setPriority(rsApprDetails
							.getString("Priority"));

					apprvers.setPriority(rsApprDetails
							.getString("Priority"));
					if (jk == 1) {

						apprvers.setPriority(Integer.toString(listApprers
								.size() + 1));
					}
					apprvers.setEmployeeCode(rsApprDetails
							.getString("Approver_Id"));
					String empCode = rsApprDetails.getString("Approver_Id");

					String recordStatus = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
							+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
							+ reqId
							+ "' "
							+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
							+ empID
							+ "')) AND all_r.Last_Approver='"
							+ empCode
							+ "' and it.Approver_Id=all_r.Last_Approver  and all_r.Req_Type='IT Request' and "
							+ "it.Req_Type='"
							+ ITType
							+ "' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
							+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";

					ResultSet rsAppInfo = ad.selectQuery(recordStatus);
					if (rsAppInfo.next()) {
						if (rsAppInfo.getInt("Priority") == 1) {
							chkdate = rsAppInfo.getString("approved_date");
							chkdate1 = rsAppInfo.getString("rejected_date");
						}
						apprvers.setApproveStatus(rsAppInfo
								.getString("Req_Status"));
						String approveStatus = rsAppInfo
								.getString("Req_Status");
						if (approveStatus.equalsIgnoreCase("Approved")
								|| approveStatus
										.equalsIgnoreCase("Completed")) {
							apprvers.setDate(rsAppInfo
									.getString("approved_date"));
						} else {
							apprvers.setDate(rsAppInfo
									.getString("rejected_date"));
						}
						comments = "";
						comments = rsAppInfo.getString("Comments");
						if (comments == "null") {
							apprvers.setComments("");
						} else {
							apprvers.setComments(rsAppInfo
									.getString("Comments"));
						}
					}
					apprvers.setEmployeeName(rsApprDetails
							.getString("EMP_FULLNAME"));

					listApprers.add(apprvers);

				}
				//IT ENGINEER DETAIlS
				
				
				String getApprDetails1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' and it.Priority=1    group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
				ResultSet rsApprDetails1=ad.selectQuery(getApprDetails1);
				
					while(rsApprDetails1.next())
					{
						checkStatus=1;
						ApprovalsForm apprvers=new ApprovalsForm();
						apprvers.setPriority(Integer.toString(listApprers.size()+1));
						
						apprvers.setEmployeeCode(rsApprDetails1.getString("Approver_Id"));
						String empCode1=rsApprDetails1.getString("Approver_Id");
						
						String recordStatus1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
								+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
								+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode1+"' and it.Approver_Id=all_r.Last_Approver and all_r.Req_Type='IT Request' and "
								+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
								+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
						
						ResultSet rsAppInfo1=ad.selectQuery(recordStatus1);
						if(rsAppInfo1.next())
						{
							
							String approveStatus=rsAppInfo1.getString("Req_Status");
							if(approveStatus.equalsIgnoreCase("Approved"))
							{
								recordStatus1=recordStatus1+" order by all_r.approved_date desc ";
								ResultSet rsAppInfo2=ad.selectQuery(recordStatus1);
								if(rsAppInfo2.next())
								{
									if(!chkdate.equalsIgnoreCase(rsAppInfo2.getString("approved_date")))
									{
										apprvers.setApproveStatus("Closed");
									apprvers.setDate(rsAppInfo2.getString("approved_date"));
									
								
								
								 comments="";
								comments=rsAppInfo2.getString("Comments");
								if(comments=="null" )
								{
									apprvers.setComments("");
								}else{
									apprvers.setComments(rsAppInfo2.getString("Comments"));
								}
								}
								}
							}else{
								
								recordStatus1=recordStatus1+" order by all_r.rejected_date desc ";
								ResultSet rsAppInfo3=ad.selectQuery(recordStatus1);
								if(rsAppInfo3.next())
								{
									if(!chkdate1.equalsIgnoreCase(rsAppInfo3.getString("rejected_date")))
									{
									apprvers.setDate(rsAppInfo3.getString("rejected_date"));
									}
								
								 comments="";
								comments=rsAppInfo3.getString("Comments");
								if(comments=="null" )
								{
									apprvers.setComments("");
								}else{
									apprvers.setComments(rsAppInfo3.getString("Comments"));
								}
								}
							}
							
						}
						apprvers.setEmployeeName(rsApprDetails1.getString("EMP_FULLNAME"));
				
					listApprers.add(apprvers);
					}
				
				request.setAttribute("approverDetails", listApprers);
			
		} 
		
			catch (SQLException e) {
			e.printStackTrace();
		}
		
		
		
		if(approverPriority==1)
		{
			
				forwardType="NewItspareformENG";
				
				
		}
		else{
		forwardType="NewItspareformAppr";
		}
			
			}
			
			
			if(ITType.equalsIgnoreCase("New IT Asset Request"))
			{

				LinkedList newassetcreation=new LinkedList();
				String empno=userID;
				
				String data="select emp.PERNR,emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE " +
						"from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"+empID+"' and " +
						"dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";	
				ResultSet rs= ad.selectQuery(data);
				try {
					while(rs.next())
					{
						
					
						help.setRequestername(rs.getString("EMP_FULLNAME"));
						help.setRequesterdepartment(rs.getString("DPTSTXT"));
						help.setRequesterdesignation(rs.getString("DSGSTXT"));
						help.setExtno(rs.getString("TEL_EXTENS"));
						help.setIpPhoneno(rs.getString("IP_PHONE"));
						help.setLocation(rs.getString("LOCATION_CODE"));
						help.setEmpno(rs.getString("PERNR"));
						
					
						
					}
				} catch (SQLException e) {
				  e.printStackTrace();
				}
				String requester="";
				String data1=" select * from IT_HELPDESK where Req_No="+reqId+"";	
		ResultSet rs1= ad.selectQuery(data1);
		try {
			while(rs1.next())
			{
				help.setAssetvalue(rs1.getString("Asset_Details"));
				help.setAdloginname(rs1.getString("ADLoginName"));
				help.setServer(rs1.getString("Server_Address"));
				help.setReqdfolderacces(rs1.getString("Req_Folder_access"));
				help.setReason(rs1.getString("Reason"));
				help.setHostname(rs1.getString("HostName"));
				help.setIPNumber(rs1.getString("IPAddress"));
				help.setReqPriority(rs1.getString("Req_Priority"));
				
				help.setAssetcategory(rs1.getString("Category"));
				help.setReqbydate(rs1.getString("reqbydate"));
				help.setSuggestmodelname(rs1.getString("suggmodel"));
				
				String gxp=rs1.getString("gxp");
				
				
				if(gxp.equalsIgnoreCase("Yes"))
				{
					help.setGxpyes("true");
				}
				
				if(gxp.equalsIgnoreCase("No"))
				{
					help.setGxpno("true");
				}
				
	
				
				
				
				String lan=rs1.getString("lan");
			
				
						if(lan.equalsIgnoreCase("Yes"))
						{
							help.setLanyes("true");
						}
						
						if(lan.equalsIgnoreCase("No"))
						{
							help.setLanno("true");
						}
				
				help.setTypeofprinter(rs1.getString("typeofprinter"));
				help.setUsers(rs1.getString("noofusers"));
				help.setPrintvolpermonth(rs1.getString("printvolpm"));
				help.setSuggestmodelno(rs1.getString("suggmodelno"));
				help.setApprxvalue(rs1.getString("Apprxvalue"));
		
			
				help.setAnysplreq(rs1.getString("anysplreq"));
				help.setPurpose(rs1.getString("purpose"));
		
				
				String rmk=rs1.getString("Remarks");
				if(rmk!=null)
				{
					help.setRemarks(rs1.getString("Remarks"));
					request.setAttribute("Remark", "Remark");
				}
			}
		} catch (SQLException e) {
			  e.printStackTrace();
			}
		
					
		newassetcreation.add(help);
		request.setAttribute("newassetcreation", newassetcreation);	
		
		//Approver Details
		 checkStatus=0;
		LinkedList listApprers=new LinkedList();
		int jk=0;
		//HOD

		hodpresent=0;
		 hodpresentinIt=0;
		 HODPresentId="";
		HODPresentname="";
		 itengineerid="";
		itengineername="";
		 HOD="";
			pendingApprovers="";
		
		 //chk if he has Hod
		 String chkhod="select count(*) from ESS_Approvers where employeeNumber='"+empID+"'  ";
		 ResultSet rs10= ad.selectQuery(chkhod);
		 try {
			while(rs10.next())
			 {
				 hodpresent=rs10.getInt(1);
			 }
		} catch (SQLException e1) {
			
			e1.printStackTrace();
		}
		
		//get hod details
		
	
		if(hodpresent>0){
		String gethod="select ess.ApproverId,emp.EMP_FULLNAME from ESS_Approvers  as ess,emp_official_info as emp  " +
				" where employeeNumber='"+empID+"'  and essType='Leave' and emp.PERNR=ess.ApproverId ";
		 ResultSet rs2= ad.selectQuery(gethod);
		 
		 try {
			if(rs2.next())
			 {
				HODPresentId=rs2.getString("ApproverId");
				HODPresentname=rs2.getString("EMP_FULLNAME");
			 }
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		}
		
		//chk if he is present in It approver
		 String chkhodinit="select count(*) from IT_Approvers where Approver_ID='"+HODPresentId+"' and Req_Type = '"+ITType+"'  and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))";
		 ResultSet rs11= ad.selectQuery(chkhodinit);
		 try {
			while(rs11.next())
			 {
				hodpresentinIt=rs11.getInt(1);
			 }
		} catch (SQLException e1) {
			
			e1.printStackTrace();
		}
		 
		// Plant head
			String plantheadid = "";
			String plantheadname = "";
			String plantheaddep = "";
			String plantheaddesg = "";
			String a="";
			String userx="select loc.LOCID from Location as loc,emp_official_info as emp where loc.LOCATION_CODE=emp.LOCID and emp.PERNR='"+requester+"' ";
			ResultSet userrs=ad.selectQuery(userx);
			try {
				while(userrs.next())
				 {				
					a=userrs.getString("LOCID");
				 }
			} catch (SQLException e2) {
				// TODO Auto-generated catch block
				e2.printStackTrace();
			}
			if (!a.equalsIgnoreCase("16")) {
				String plant = "select pl.Plant,pl.PERNR,emp.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from PLANT_HEAD pl,emp_official_info emp,DEPARTMENT dep,DESIGNATION desg where Plant=(select LOCATION_CODE from Location where LOCID='"
						+ a
						+ "') and emp.PERNR=pl.PERNR and dep.DPTID=emp.DPTID and desg.DSGID=emp.DSGID";
				ResultSet pl = ad.selectQuery(plant);
				try {
					while (pl.next()) {
						plantheadid = pl.getString("pernr");
						plantheadname = pl.getString("EMP_FULLNAME");
						plantheaddep = pl.getString("DPTSTXT");
						plantheaddesg = pl.getString("DSGSTXT");
					}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			if (plantheadid.equalsIgnoreCase("")) {

				if (hodpresent > 0 && hodpresentinIt == 0) {

					try {

						checkStatus = 1;
						ApprovalsForm apprvershod = new ApprovalsForm();
						apprvershod.setPriority("1");

						apprvershod.setEmployeeCode(HODPresentId);
						apprvershod.setEmployeeName(HODPresentname);

						String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
								+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
								+ reqId
								+ "' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
								+ empID
								+ "')) AND "
								+ "all_r.Last_Approver='"
								+ HODPresentId
								+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
								+ ITType
								+ "' and emp.PERNR=all_r.Last_Approver"
								+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

						ResultSet rsAppInfo = ad.selectQuery(recordStatus);
						if (rsAppInfo.next()) {
							apprvershod.setApproveStatus(rsAppInfo
									.getString("Req_Status"));
							String approveStatus = rsAppInfo
									.getString("Req_Status");
							if (approveStatus.equalsIgnoreCase("Approved")
									|| approveStatus
											.equalsIgnoreCase("Completed")) {
								apprvershod.setDate(rsAppInfo
										.getString("approved_date"));
							} else {
								apprvershod.setDate(rsAppInfo
										.getString("rejected_date"));
							}
							comments = "";
							comments = rsAppInfo.getString("Comments");
							if (comments == "null") {
								apprvershod.setComments("");
							} else {
								apprvershod.setComments(rsAppInfo
										.getString("Comments"));
							}
						}

						listApprers.add(apprvershod);
						jk = 1;
					}

					catch (SQLException e1) {

						e1.printStackTrace();
					}

				}
			}

			if (!plantheadid.equalsIgnoreCase("")) {

				try {

					checkStatus = 1;
					ApprovalsForm apprvershod = new ApprovalsForm();
					apprvershod.setPriority("1");

					apprvershod.setEmployeeCode(plantheadid);
					apprvershod.setEmployeeName(plantheadname);

					String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
							+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
							+ reqId
							+ "' and it.LOCATION_ID='"
							+ EmpLoc(userID)
							+ "' AND "
							+ "all_r.Last_Approver='"
							+ plantheadid
							+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
							+ ITType
							+ "' and emp.PERNR=all_r.Last_Approver"
							+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

					ResultSet rsAppInfo = ad.selectQuery(recordStatus);
					if (rsAppInfo.next()) {
						apprvershod.setApproveStatus(rsAppInfo
								.getString("Req_Status"));
						String approveStatus = rsAppInfo
								.getString("Req_Status");
						if (approveStatus.equalsIgnoreCase("Approved")
								|| approveStatus
										.equalsIgnoreCase("Created")) {
							apprvershod.setDate(rsAppInfo
									.getString("approved_date"));
						} else {
							apprvershod.setDate(rsAppInfo
									.getString("rejected_date"));
						}
						comments = "";
						comments = rsAppInfo.getString("Comments");
						if (comments == "null") {
							apprvershod.setComments("");
						} else {
							apprvershod.setComments(rsAppInfo
									.getString("Comments"));
						}
					}

					listApprers.add(apprvershod);
					jk = 1;
				}

				catch (SQLException e1) {

					e1.printStackTrace();
				}

			}

			String getApprDetails = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
					+ empID
					+ "'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"
					+ ITType
					+ "' group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
			ResultSet rsApprDetails = ad.selectQuery(getApprDetails);
			try {
				while (rsApprDetails.next()) {

					checkStatus = 1;
					ApprovalsForm apprvers = new ApprovalsForm();
					apprvers.setPriority(rsApprDetails
							.getString("Priority"));

					apprvers.setPriority(rsApprDetails
							.getString("Priority"));
					if (jk == 1) {

						apprvers.setPriority(Integer.toString(listApprers
								.size() + 1));
					}
					apprvers.setEmployeeCode(rsApprDetails
							.getString("Approver_Id"));
					String empCode = rsApprDetails.getString("Approver_Id");

					String recordStatus = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
							+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
							+ reqId
							+ "' "
							+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
							+ empID
							+ "')) AND all_r.Last_Approver='"
							+ empCode
							+ "' and it.Approver_Id=all_r.Last_Approver  and all_r.Req_Type='IT Request' and "
							+ "it.Req_Type='"
							+ ITType
							+ "' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
							+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";

					ResultSet rsAppInfo = ad.selectQuery(recordStatus);
					if (rsAppInfo.next()) {
						if (rsAppInfo.getInt("Priority") == 1) {
							chkdate = rsAppInfo.getString("approved_date");
							chkdate1 = rsAppInfo.getString("rejected_date");
						}
						apprvers.setApproveStatus(rsAppInfo
								.getString("Req_Status"));
						String approveStatus = rsAppInfo
								.getString("Req_Status");
						if (approveStatus.equalsIgnoreCase("Approved")
								|| approveStatus
										.equalsIgnoreCase("Completed")) {
							apprvers.setDate(rsAppInfo
									.getString("approved_date"));
						} else {
							apprvers.setDate(rsAppInfo
									.getString("rejected_date"));
						}
						comments = "";
						comments = rsAppInfo.getString("Comments");
						if (comments == "null") {
							apprvers.setComments("");
						} else {
							apprvers.setComments(rsAppInfo
									.getString("Comments"));
						}
					}
					apprvers.setEmployeeName(rsApprDetails
							.getString("EMP_FULLNAME"));

					listApprers.add(apprvers);

				}
				//IT ENGINEER DETAIlS
				
				
				String getApprDetails1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' and it.Priority=1    group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
				ResultSet rsApprDetails1=ad.selectQuery(getApprDetails1);
				
					while(rsApprDetails1.next())
					{
						checkStatus=1;
						ApprovalsForm apprvers=new ApprovalsForm();
						apprvers.setPriority(Integer.toString(listApprers.size()+1));
						
						apprvers.setEmployeeCode(rsApprDetails1.getString("Approver_Id"));
						String empCode1=rsApprDetails1.getString("Approver_Id");
						
						String recordStatus1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
								+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
								+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode1+"' and it.Approver_Id=all_r.Last_Approver and all_r.Req_Type='IT Request' and "
								+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
								+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
						
						ResultSet rsAppInfo1=ad.selectQuery(recordStatus1);
						if(rsAppInfo1.next())
						{
							
							String approveStatus=rsAppInfo1.getString("Req_Status");
							if(approveStatus.equalsIgnoreCase("Approved"))
							{
								recordStatus1=recordStatus1+" order by all_r.approved_date desc ";
								ResultSet rsAppInfo2=ad.selectQuery(recordStatus1);
								if(rsAppInfo2.next())
								{
									if(!chkdate.equalsIgnoreCase(rsAppInfo2.getString("approved_date")))
									{
										apprvers.setApproveStatus("Closed");
									apprvers.setDate(rsAppInfo2.getString("approved_date"));
									
								
								
								 comments="";
								comments=rsAppInfo2.getString("Comments");
								if(comments=="null" )
								{
									apprvers.setComments("");
								}else{
									apprvers.setComments(rsAppInfo2.getString("Comments"));
								}
								}
								}
							}else{
								
								recordStatus1=recordStatus1+" order by all_r.rejected_date desc ";
								ResultSet rsAppInfo3=ad.selectQuery(recordStatus1);
								if(rsAppInfo3.next())
								{
									if(!chkdate1.equalsIgnoreCase(rsAppInfo3.getString("rejected_date")))
									{
									apprvers.setDate(rsAppInfo3.getString("rejected_date"));
									}
								
								 comments="";
								comments=rsAppInfo3.getString("Comments");
								if(comments=="null" )
								{
									apprvers.setComments("");
								}else{
									apprvers.setComments(rsAppInfo3.getString("Comments"));
								}
								}
							}
							
						}
						apprvers.setEmployeeName(rsApprDetails1.getString("EMP_FULLNAME"));
				
					listApprers.add(apprvers);
					}
				
				request.setAttribute("approverDetails", listApprers);
			
		} 
		
			catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		
		if(approverPriority==1)
		{
			
				forwardType="NewItassetformENG";
				
				
		}
		else{
		forwardType="NewItassetformAppr";
		}
			
				
			}
			
			if(ITType.equalsIgnoreCase("Active Directory User Creation"))
			{
				LinkedList Adusercreation=new LinkedList();
				String empno=userID;
				
				String data="select emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE " +
						"from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"+empID+"' and " +
						"dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";	
				ResultSet rs= ad.selectQuery(data);
				try {
					while(rs.next())
					{
						
					
						help.setRequestername(rs.getString("EMP_FULLNAME"));
						help.setRequesterdepartment(rs.getString("DPTSTXT"));
						help.setRequesterdesignation(rs.getString("DSGSTXT"));
						help.setExtno(rs.getString("TEL_EXTENS"));
						help.setIpPhoneno(rs.getString("IP_PHONE"));
						help.setLocation(rs.getString("LOCATION_CODE"));
						
						
					
						
					}
				} catch (SQLException e) {
				  e.printStackTrace();
				}
				
				String data1=" select * from IT_HELPDESK where Req_No="+reqId+"";	
		ResultSet rs1= ad.selectQuery(data1);
		try {
			while(rs1.next())
			{
				help.setAssetvalue(rs1.getString("Asset_Details"));
				help.setAdloginname(rs1.getString("ADLoginName"));
				help.setServer(rs1.getString("Server_Address"));
				help.setReqdfolderacces(rs1.getString("Req_Folder_access"));
				help.setReason(rs1.getString("Reason"));
				help.setHostname(rs1.getString("HostName"));
				help.setIPNumber(rs1.getString("IPAddress"));
				help.setReqPriority(rs1.getString("Req_Priority"));
				
				help.setInitials(rs1.getString("Initials"));
				help.setFirstname(rs1.getString("Frst_Name"));
				help.setLastname(rs1.getString("Last_Name"));
				
				String rmk=rs1.getString("Remarks");
				if(rmk!=null)
				{
					help.setRemarks(rs1.getString("Remarks"));
					request.setAttribute("Remark", "Remark");
				}
			}
		} catch (SQLException e) {
			  e.printStackTrace();
			}
		
		Adusercreation.add(help);
		request.setAttribute("Adusercreation", Adusercreation);	
		
		//Approver Details
		  checkStatus=0;
		LinkedList listApprers=new LinkedList();
		int jk=0;
		//HOD

		 hodpresent=0;
		 hodpresentinIt=0;
		 HODPresentId="";
		 HODPresentname="";
		 itengineerid="";
		 itengineername="";
		 HOD="";
			pendingApprovers="";
		
		 //chk if he has Hod
		 String chkhod="select count(*) from ESS_Approvers where employeeNumber='"+empID+"'  ";
		 ResultSet rs10= ad.selectQuery(chkhod);
		 try {
			while(rs10.next())
			 {
				 hodpresent=rs10.getInt(1);
			 }
		} catch (SQLException e1) {
			
			e1.printStackTrace();
		}
		
		//get hod details
		
	
		if(hodpresent>0){
		String gethod="select ess.ApproverId,emp.EMP_FULLNAME from ESS_Approvers  as ess,emp_official_info as emp  " +
				" where employeeNumber='"+empID+"'  and essType='Leave' and emp.PERNR=ess.ApproverId ";
		 ResultSet rs2= ad.selectQuery(gethod);
		 
		 try {
			if(rs2.next())
			 {
			
				HODPresentId=rs2.getString("ApproverId");
				HODPresentname=rs2.getString("EMP_FULLNAME");
			 }
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		}
		
		//chk if he is present in It approver
		 String chkhodinit="select count(*) from IT_Approvers where Approver_ID='"+HODPresentId+"' and Req_Type = '"+ITType+"'  and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))";
		 ResultSet rs11= ad.selectQuery(chkhodinit);
		 try {
			while(rs11.next())
			 {
				hodpresentinIt=rs11.getInt(1);
			 }
		} catch (SQLException e1) {
			
			e1.printStackTrace();
		}
		 
			if(hodpresent>0 && hodpresentinIt==0 )
			{
				
				
				try {
					
						checkStatus=1;
						ApprovalsForm apprvershod=new ApprovalsForm();
						apprvershod.setPriority("1");
						
						apprvershod.setEmployeeCode(HODPresentId);
						apprvershod.setEmployeeName(HODPresentname);
						
						String recordStatus="select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
					+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND "
					+ "all_r.Last_Approver='"+HODPresentId+"' and all_r.Req_Type='IT Request' and it.Req_Type='"+ITType+"' and emp.PERNR=all_r.Last_Approver"
					+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";
						
						ResultSet rsAppInfo=ad.selectQuery(recordStatus);
						if(rsAppInfo.next())
						{
							apprvershod.setApproveStatus(rsAppInfo.getString("Req_Status"));
							String approveStatus=rsAppInfo.getString("Req_Status");
							if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
							{
								apprvershod.setDate(rsAppInfo.getString("approved_date"));
							}else{
								apprvershod.setDate(rsAppInfo.getString("rejected_date"));
							}
							 comments="";
							comments=rsAppInfo.getString("Comments");
							if(comments=="null" )
							{
								apprvershod.setComments("");
							}else{
								apprvershod.setComments(rsAppInfo.getString("Comments"));
							}
						}
						
						
						listApprers.add(apprvershod);
					 jk=1;
					}
				
				catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				
			}
		
		
	
		
		String getApprDetails="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
		ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
		try {
			while(rsApprDetails.next())
			{
				
				checkStatus=1;
				ApprovalsForm apprvers=new ApprovalsForm();
				apprvers.setPriority(rsApprDetails.getString("Priority"));
				
			
				
				apprvers.setPriority(rsApprDetails.getString("Priority"));
				if( jk==1)
				{
					apprvers.setPriority(Integer.toString(listApprers.size()+1));
				}
				apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
				String empCode=rsApprDetails.getString("Approver_Id");
				
				/*String recordStatus="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
						+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
						+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode+"' and it.Approver_Id=all_r.Last_Approver  and all_r.Req_Type='IT Request' and "
						+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
						+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
				
				ResultSet rsAppInfo=ad.selectQuery(recordStatus);
				if(rsAppInfo.next())
				{
					if(rsAppInfo.getInt("Priority")==1 )
					{
						 chkdate=rsAppInfo.getString("approved_date");
						 chkdate1=rsAppInfo.getString("rejected_date");
					}
					apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
					String approveStatus=rsAppInfo.getString("Req_Status");
					if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
					{
					apprvers.setDate(rsAppInfo.getString("approved_date"));
					}else{
						apprvers.setDate(rsAppInfo.getString("rejected_date"));
					}
					 comments="";
					comments=rsAppInfo.getString("Comments");
					if(comments=="null" )
					{
						apprvers.setComments("");
					}else{
						apprvers.setComments(rsAppInfo.getString("Comments"));
					}
				}
				apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
				
				listApprers.add(apprvers);*/
				
			}
				//IT ENGINEER DETAIlS
				
				
				String getApprDetails1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' and it.Priority=1    group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
				ResultSet rsApprDetails1=ad.selectQuery(getApprDetails1);
				
					while(rsApprDetails1.next())
					{
						checkStatus=1;
						ApprovalsForm apprvers=new ApprovalsForm();
						apprvers.setPriority(Integer.toString(listApprers.size()+1));
						
						apprvers.setEmployeeCode(rsApprDetails1.getString("Approver_Id"));
						String empCode1=rsApprDetails1.getString("Approver_Id");
						
						String recordStatus1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
								+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
								+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode1+"' and it.Approver_Id=all_r.Last_Approver and all_r.Req_Type='IT Request' and "
								+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
								+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
						
						ResultSet rsAppInfo1=ad.selectQuery(recordStatus1);
						if(rsAppInfo1.next())
						{
							
							String approveStatus=rsAppInfo1.getString("Req_Status");
							if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
							{
								recordStatus1=recordStatus1+" order by all_r.approved_date desc ";
								ResultSet rsAppInfo2=ad.selectQuery(recordStatus1);
								if(rsAppInfo2.next())
								{
									if(!chkdate.equalsIgnoreCase(rsAppInfo2.getString("approved_date")))
									{
										apprvers.setApproveStatus("Closed");
									apprvers.setDate(rsAppInfo2.getString("approved_date"));
									
								
								
								 comments="";
								comments=rsAppInfo2.getString("Comments");
								if(comments=="null" )
								{
									apprvers.setComments("");
								}else{
									apprvers.setComments(rsAppInfo2.getString("Comments"));
								}
								}
								}
							}else{
								
								recordStatus1=recordStatus1+" order by all_r.rejected_date desc ";
								ResultSet rsAppInfo3=ad.selectQuery(recordStatus1);
								if(rsAppInfo3.next())
								{
									if(!chkdate1.equalsIgnoreCase(rsAppInfo3.getString("rejected_date")))
									{
									apprvers.setDate(rsAppInfo3.getString("rejected_date"));
									}
									
								
								 comments="";
								comments=rsAppInfo3.getString("Comments");
								if(comments=="null" )
								{
									apprvers.setComments("");
								}else{
									apprvers.setComments(rsAppInfo3.getString("Comments"));
								}
								}
							}
							
						}
						apprvers.setEmployeeName(rsApprDetails1.getString("EMP_FULLNAME"));
				
					listApprers.add(apprvers);
					}
				
				request.setAttribute("approverDetails", listApprers);
			
		} 
		
			catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		
		if(approverPriority==1)
		{
			
			forwardType="AduserCreationformENG";
		}
		else{
		forwardType="AduserCreationformAppr";
		}
				
			}
			
			if(ITType.equalsIgnoreCase("Active Directory User Deletion"))
			{


				LinkedList AduserDeletion=new LinkedList();
				String empno=userID;
				
				String data="select emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE " +
						"from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"+empID+"' and " +
						"dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";	
				ResultSet rs= ad.selectQuery(data);
				try {
					while(rs.next())
					{
						
					
						help.setRequestername(rs.getString("EMP_FULLNAME"));
						help.setRequesterdepartment(rs.getString("DPTSTXT"));
						help.setRequesterdesignation(rs.getString("DSGSTXT"));
						help.setExtno(rs.getString("TEL_EXTENS"));
						help.setIpPhoneno(rs.getString("IP_PHONE"));
						help.setLocation(rs.getString("LOCATION_CODE"));
						
						
					
						
					}
				} catch (SQLException e) {
				  e.printStackTrace();
				}
				
				String data1=" select * from IT_HELPDESK where Req_No="+reqId+"";	
		ResultSet rs1= ad.selectQuery(data1);
		try {
			while(rs1.next())
			{
				help.setAssetvalue(rs1.getString("Asset_Details"));
				help.setAdloginname(rs1.getString("ADLoginName"));
				help.setServer(rs1.getString("Server_Address"));
				help.setReqdfolderdeletion(rs1.getString("Req_Folder_Deletion"));
				help.setDeletefrom(rs1.getString("Delete_From"));
				help.setReason(rs1.getString("Reason"));
				help.setHostname(rs1.getString("HostName"));
				help.setIPNumber(rs1.getString("IPAddress"));
				help.setReqPriority(rs1.getString("Req_Priority"));
				
				String rmk=rs1.getString("Remarks");
				if(rmk!=null)
				{
					help.setRemarks(rs1.getString("Remarks"));
					request.setAttribute("Remark", "Remark");
				}
				
				
			}
		} catch (SQLException e) {
			  e.printStackTrace();
			}
		
		
		AduserDeletion.add(help);
		request.setAttribute("AduserDeletion", AduserDeletion);	
		
		//Approver Details
		  checkStatus=0;
		LinkedList listApprers=new LinkedList();
		int jk=0;
		//HOD

		 hodpresent=0;
		 hodpresentinIt=0;
		 HODPresentId="";
		 HODPresentname="";
		 itengineerid="";
		 itengineername="";
		 HOD="";
			pendingApprovers="";
		
		 //chk if he has Hod
		 String chkhod="select count(*) from ESS_Approvers where employeeNumber='"+empID+"'  ";
		 ResultSet rs10= ad.selectQuery(chkhod);
		 try {
			while(rs10.next())
			 {
				 hodpresent=rs10.getInt(1);
			 }
		} catch (SQLException e1) {
			
			e1.printStackTrace();
		}
		
		//get hod details
		
	
		if(hodpresent>0){
		String gethod="select ess.ApproverId,emp.EMP_FULLNAME from ESS_Approvers  as ess,emp_official_info as emp  " +
				" where employeeNumber='"+empID+"'  and essType='Leave' and emp.PERNR=ess.ApproverId ";
		 ResultSet rs2= ad.selectQuery(gethod);
		 
		 try {
			if(rs2.next())
			 {
			
				HODPresentId=rs2.getString("ApproverId");
				HODPresentname=rs2.getString("EMP_FULLNAME");
			 }
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		}
		
		//chk if he is present in It approver
		 String chkhodinit="select count(*) from IT_Approvers where Approver_ID='"+HODPresentId+"' and Req_Type = '"+ITType+"'  and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))";
		 ResultSet rs11= ad.selectQuery(chkhodinit);
		 try {
			while(rs11.next())
			 {
				hodpresentinIt=rs11.getInt(1);
			 }
		} catch (SQLException e1) {
			
			e1.printStackTrace();
		}
		 
			if(hodpresent>0 && hodpresentinIt==0 )
			{
				
				
				try {
					
						checkStatus=1;
						ApprovalsForm apprvershod=new ApprovalsForm();
						apprvershod.setPriority("1");
						
						apprvershod.setEmployeeCode(HODPresentId);
						apprvershod.setEmployeeName(HODPresentname);
						
						String recordStatus="select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
					+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND "
					+ "all_r.Last_Approver='"+HODPresentId+"' and all_r.Req_Type='IT Request' and it.Req_Type='"+ITType+"' and emp.PERNR=all_r.Last_Approver"
					+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";
						
						ResultSet rsAppInfo=ad.selectQuery(recordStatus);
						if(rsAppInfo.next())
						{
							apprvershod.setApproveStatus(rsAppInfo.getString("Req_Status"));
							String approveStatus=rsAppInfo.getString("Req_Status");
							if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
							{
								apprvershod.setDate(rsAppInfo.getString("approved_date"));
							}else{
								apprvershod.setDate(rsAppInfo.getString("rejected_date"));
							}
							 comments="";
							comments=rsAppInfo.getString("Comments");
							if(comments=="null" )
							{
								apprvershod.setComments("");
							}else{
								apprvershod.setComments(rsAppInfo.getString("Comments"));
							}
						}
						
						
						listApprers.add(apprvershod);
					 jk=1;
					}
				
				catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				
			}
		
		
	
		
		String getApprDetails="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
		ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
		try {
			while(rsApprDetails.next())
			{
				
				checkStatus=1;
				ApprovalsForm apprvers=new ApprovalsForm();
				apprvers.setPriority(rsApprDetails.getString("Priority"));
				
			
			
				
				apprvers.setPriority(rsApprDetails.getString("Priority"));
				if(jk==1){
					
					apprvers.setPriority(Integer.toString(listApprers.size()+1));
				}
				apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
				String empCode=rsApprDetails.getString("Approver_Id");
				
				String recordStatus="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
						+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
						+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode+"' and it.Approver_Id=all_r.Last_Approver  and all_r.Req_Type='IT Request' and "
						+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
						+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
				
				ResultSet rsAppInfo=ad.selectQuery(recordStatus);
				if(rsAppInfo.next())
				{
					if(rsAppInfo.getInt("Priority")==1 )
					{
						 chkdate=rsAppInfo.getString("approved_date");
						 chkdate1=rsAppInfo.getString("rejected_date");
					}
					apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
					String approveStatus=rsAppInfo.getString("Req_Status");
					if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
					{
					apprvers.setDate(rsAppInfo.getString("approved_date"));
					}else{
						apprvers.setDate(rsAppInfo.getString("rejected_date"));
					}
					 comments="";
					comments=rsAppInfo.getString("Comments");
					if(comments=="null" )
					{
						apprvers.setComments("");
					}else{
						apprvers.setComments(rsAppInfo.getString("Comments"));
					}
				}
				apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
				
				listApprers.add(apprvers);
				
			}
				//IT ENGINEER DETAIlS
				
				
				String getApprDetails1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' and it.Priority=1    group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
				ResultSet rsApprDetails1=ad.selectQuery(getApprDetails1);
				
					while(rsApprDetails1.next())
					{
						checkStatus=1;
						ApprovalsForm apprvers=new ApprovalsForm();
						apprvers.setPriority(Integer.toString(listApprers.size()+1));
						
						apprvers.setEmployeeCode(rsApprDetails1.getString("Approver_Id"));
						String empCode1=rsApprDetails1.getString("Approver_Id");
						
						String recordStatus1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
								+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
								+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode1+"' and it.Approver_Id=all_r.Last_Approver and all_r.Req_Type='IT Request' and "
								+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
								+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
						
						ResultSet rsAppInfo1=ad.selectQuery(recordStatus1);
						if(rsAppInfo1.next())
						{
							
							String approveStatus=rsAppInfo1.getString("Req_Status");
							if(approveStatus.equalsIgnoreCase("Approved"))
							{
								recordStatus1=recordStatus1+" order by all_r.approved_date desc ";
								ResultSet rsAppInfo2=ad.selectQuery(recordStatus1);
								if(rsAppInfo2.next())
								{
									if(!chkdate.equalsIgnoreCase(rsAppInfo2.getString("approved_date")))
									{
										apprvers.setApproveStatus("Closed");
									apprvers.setDate(rsAppInfo2.getString("approved_date"));
									
								
								
								 comments="";
								comments=rsAppInfo2.getString("Comments");
								if(comments=="null" )
								{
									apprvers.setComments("");
								}else{
									apprvers.setComments(rsAppInfo2.getString("Comments"));
								}
								}
								}
							}else{
								
								recordStatus1=recordStatus1+" order by all_r.rejected_date desc ";
								ResultSet rsAppInfo3=ad.selectQuery(recordStatus1);
								if(rsAppInfo3.next())
								{
									if(!chkdate1.equalsIgnoreCase(rsAppInfo3.getString("rejected_date")))
									{
									apprvers.setDate(rsAppInfo3.getString("rejected_date"));
									}
									
								
								 comments="";
								comments=rsAppInfo3.getString("Comments");
								if(comments=="null" )
								{
									apprvers.setComments("");
								}else{
									apprvers.setComments(rsAppInfo3.getString("Comments"));
								}
								}
							}
							
						}
						apprvers.setEmployeeName(rsApprDetails1.getString("EMP_FULLNAME"));
				
					listApprers.add(apprvers);
					}
				
				request.setAttribute("approverDetails", listApprers);
			
		} 
		
			catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
				
				
		if(approverPriority==1)
		{
			forwardType="AduserDeletionformENG";
		}
		else{
		forwardType="AduserDeletionformAppr";
		}
			
				
			
				
			}
			
			if(ITType.equalsIgnoreCase("Active Directory User Transfer"))
			{
				LinkedList Adusertransfer=new LinkedList();
				String empno=userID;
				
				String data="select emp.PERNR,emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE " +
						"from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"+empID+"' and " +
						"dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";	
				ResultSet rs= ad.selectQuery(data);
				try {
					while(rs.next())
					{
						
					
						help.setRequestername(rs.getString("EMP_FULLNAME"));
						help.setRequesterdepartment(rs.getString("DPTSTXT"));
						help.setRequesterdesignation(rs.getString("DSGSTXT"));
						help.setExtno(rs.getString("TEL_EXTENS"));
						help.setIpPhoneno(rs.getString("IP_PHONE"));
						help.setLocation(rs.getString("LOCATION_CODE"));
						help.setEmpno(rs.getString("PERNR"));
						
					
						
					}
				} catch (SQLException e) {
				  e.printStackTrace();
				}
				
				String data1=" select * from IT_HELPDESK where Req_No="+reqId+"";	
		ResultSet rs1= ad.selectQuery(data1);
		try {
			while(rs1.next())
			{
				help.setAssetvalue(rs1.getString("Asset_Details"));
				help.setAdloginname(rs1.getString("ADLoginName"));
				help.setReason(rs1.getString("Reason"));
	
				help.setIPNumber(rs1.getString("IPAddress"));
				help.setFromlocationId(rs1.getString("From_Loc"));
				help.setTolocationId(rs1.getString("To_Loc"));
				help.setFromdepartment(rs1.getString("From_Dep"));
				help.setTodepartment(rs1.getString("To_Dep"));
				
				
				help.setReqPriority(rs1.getString("Req_Priority"));
				
				String rmk=rs1.getString("Remarks");
				if(rmk!=null)
				{
					help.setRemarks(rs1.getString("Remarks"));
					request.setAttribute("Remark", "Remark");
				}
			}
		} catch (SQLException e) {
			  e.printStackTrace();
			}
		
		
		ResultSet rs111 = ad.selectQuery("select LOCID," +
				"LOCNAME,location_code from location");
				ArrayList locationList=new ArrayList();
				ArrayList locationLabelList=new ArrayList();
					
				try {
					while(rs111.next()) {
						locationList.add(rs111.getString("location_code")+"-"+rs111.getString("LOCNAME"));
						locationLabelList.add(rs111.getString("location_code")+"-"+rs111.getString("LOCNAME"));
					}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				help.setLocationIdList(locationList);
				help.setLocationLabelList(locationLabelList);
				
				ArrayList deparmentList=new ArrayList();
				ResultSet rs12 =ad.selectQuery("select DPTSTXT from department order by DPTSTXT");
				try {
					while(rs12.next()){
						
						deparmentList.add(rs12.getString("DPTSTXT"));
					}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setDepartmentList(deparmentList);
		
		
					
		Adusertransfer.add(help);
		request.setAttribute("Adusertransfer", Adusertransfer);	
		
		//Approver Details
		 checkStatus=0;
		LinkedList listApprers=new LinkedList();
		int jk=0;
		//HOD

		 hodpresent=0;
		 hodpresentinIt=0;
		 HODPresentId="";
		HODPresentname="";
		 itengineerid="";
		 itengineername="";
		 HOD="";
			pendingApprovers="";
		
		 //chk if he has Hod
		 String chkhod="select count(*) from ESS_Approvers where employeeNumber='"+empID+"'  ";
		 ResultSet rs10= ad.selectQuery(chkhod);
		 try {
			while(rs10.next())
			 {
				 hodpresent=rs10.getInt(1);
			 }
		} catch (SQLException e1) {
			
			e1.printStackTrace();
		}
		
		//get hod details
		
	
		if(hodpresent>0){
		String gethod="select ess.ApproverId,emp.EMP_FULLNAME from ESS_Approvers  as ess,emp_official_info as emp  " +
				" where employeeNumber='"+empID+"'  and essType='Leave' and emp.PERNR=ess.ApproverId ";
		 ResultSet rs2= ad.selectQuery(gethod);
		 
		 try {
			if(rs2.next())
			 {
			
				HODPresentId=rs2.getString("ApproverId");
				HODPresentname=rs2.getString("EMP_FULLNAME");
			 }
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		}
		
		//chk if he is present in It approver
		 String chkhodinit="select count(*) from IT_Approvers where Approver_ID='"+HODPresentId+"' and Req_Type = '"+ITType+"'  and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))";
		 ResultSet rs11= ad.selectQuery(chkhodinit);
		 try {
			while(rs11.next())
			 {
				hodpresentinIt=rs11.getInt(1);
			 }
		} catch (SQLException e1) {
			
			e1.printStackTrace();
		}
		 
			if(hodpresent>0 && hodpresentinIt==0 )
			{
				
				
				try {
					
						checkStatus=1;
						ApprovalsForm apprvershod=new ApprovalsForm();
						apprvershod.setPriority("1");
						
						apprvershod.setEmployeeCode(HODPresentId);
						apprvershod.setEmployeeName(HODPresentname);
						
						String recordStatus="select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
					+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND "
					+ "all_r.Last_Approver='"+HODPresentId+"' and all_r.Req_Type='IT Request' and it.Req_Type='"+ITType+"' and emp.PERNR=all_r.Last_Approver"
					+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";
						
						ResultSet rsAppInfo=ad.selectQuery(recordStatus);
						if(rsAppInfo.next())
						{
							apprvershod.setApproveStatus(rsAppInfo.getString("Req_Status"));
							String approveStatus=rsAppInfo.getString("Req_Status");
							if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
							{
								apprvershod.setDate(rsAppInfo.getString("approved_date"));
							}else{
								apprvershod.setDate(rsAppInfo.getString("rejected_date"));
							}
							 comments="";
							comments=rsAppInfo.getString("Comments");
							if(comments=="null" )
							{
								apprvershod.setComments("");
							}else{
								apprvershod.setComments(rsAppInfo.getString("Comments"));
							}
						}
						
						
						listApprers.add(apprvershod);
					 jk=1;
					}
				
				catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				
			}
		
		
	
		
		
		String getApprDetails="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
		ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
		try {
			while(rsApprDetails.next())
			{
			
				checkStatus=1;
				ApprovalsForm apprvers=new ApprovalsForm();
				apprvers.setPriority(rsApprDetails.getString("Priority"));
				
				
				
				
			
				
				apprvers.setPriority(rsApprDetails.getString("Priority"));
				if(jk==1){
					
					apprvers.setPriority(Integer.toString(listApprers.size()+1));
				}
				apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
				String empCode=rsApprDetails.getString("Approver_Id");
				
				String recordStatus="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
						+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
						+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode+"' and it.Approver_Id=all_r.Last_Approver  and all_r.Req_Type='IT Request' and "
						+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
						+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
				
				ResultSet rsAppInfo=ad.selectQuery(recordStatus);
				if(rsAppInfo.next())
				{
					
					if(rsAppInfo.getInt("Priority")==1 )
					{
						 chkdate=rsAppInfo.getString("approved_date");
						 chkdate1=rsAppInfo.getString("rejected_date");
					}
					apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
					String approveStatus=rsAppInfo.getString("Req_Status");
					if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
					{
					apprvers.setDate(rsAppInfo.getString("approved_date"));
					}else{
						apprvers.setDate(rsAppInfo.getString("rejected_date"));
					}
					 comments="";
					comments=rsAppInfo.getString("Comments");
					if(comments=="null" )
					{
						apprvers.setComments("");
					}else{
						apprvers.setComments(rsAppInfo.getString("Comments"));
					}
				}
				apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
				
				listApprers.add(apprvers);
				
			}
				//IT ENGINEER DETAIlS
				
				
				String getApprDetails1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' and it.Priority=1    group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
				ResultSet rsApprDetails1=ad.selectQuery(getApprDetails1);
				
					while(rsApprDetails1.next())
					{
						checkStatus=1;
						ApprovalsForm apprvers=new ApprovalsForm();
						apprvers.setPriority(Integer.toString(listApprers.size()+1));
						
						apprvers.setEmployeeCode(rsApprDetails1.getString("Approver_Id"));
						String empCode1=rsApprDetails1.getString("Approver_Id");
						
						String recordStatus1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
								+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
								+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode1+"' and it.Approver_Id=all_r.Last_Approver and all_r.Req_Type='IT Request' and "
								+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
								+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
						
						ResultSet rsAppInfo1=ad.selectQuery(recordStatus1);
						if(rsAppInfo1.next())
						{
							
							String approveStatus=rsAppInfo1.getString("Req_Status");
							if(approveStatus.equalsIgnoreCase("Approved"))
							{
								recordStatus1=recordStatus1+" order by all_r.approved_date desc ";
								ResultSet rsAppInfo2=ad.selectQuery(recordStatus1);
								if(rsAppInfo2.next())
								{
									if(!chkdate.equalsIgnoreCase(rsAppInfo2.getString("approved_date")))
									{
										apprvers.setApproveStatus("Closed");
									apprvers.setDate(rsAppInfo2.getString("approved_date"));
									
								
								
								 comments="";
								comments=rsAppInfo2.getString("Comments");
								if(comments=="null" )
								{
									apprvers.setComments("");
								}else{
									apprvers.setComments(rsAppInfo2.getString("Comments"));
								}
								}
								}
							}else{
								
								recordStatus1=recordStatus1+" order by all_r.rejected_date desc ";
								ResultSet rsAppInfo3=ad.selectQuery(recordStatus1);
								if(rsAppInfo3.next())
								{
									if(!chkdate1.equalsIgnoreCase(rsAppInfo3.getString("rejected_date")))
									{
									apprvers.setDate(rsAppInfo3.getString("rejected_date"));
									}
								
								 comments="";
								comments=rsAppInfo3.getString("Comments");
								if(comments=="null" )
								{
									apprvers.setComments("");
								}else{
									apprvers.setComments(rsAppInfo3.getString("Comments"));
								}
								}
							}
							
						}
						apprvers.setEmployeeName(rsApprDetails1.getString("EMP_FULLNAME"));
				
					listApprers.add(apprvers);
					}
				
				request.setAttribute("approverDetails", listApprers);
			
		} 
		
			catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		
		if(approverPriority==1)
		{
		forwardType="AduserTransferformENG";
				
		}
		else{
		forwardType="AduserTransferformAppr";
		}
			
				
			}
			
			
			if(ITType.equalsIgnoreCase("Email ID Create Request"))
			{
				
				
				ArrayList desgList=new ArrayList();
				ArrayList desgLabelList=new ArrayList();
				ResultSet rs16 = ad.selectQuery("select dsgid," +
						"DSGLTXT from DESIGNATION order by DSGLTXT"); 
						try {
							while(rs16.next()) {
								desgList.add(rs16.getString("dsgid"));
								desgLabelList.add(rs16.getString("DSGLTXT"));
							}
							rs16.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							
							e.printStackTrace();
						}
						
						help.setDesgList(desgList);
						help.setDesgLabelList(desgLabelList);
				
				
				
				
				ArrayList deptList=new ArrayList();
								ArrayList deptLabelList=new ArrayList();
								ResultSet rs161 = ad.selectQuery("select dptid," +
										"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
										try {
											while(rs161.next()) {
												deptList.add(rs161.getString("dptid"));
												deptLabelList.add(rs161.getString("DPTLTXT"));
											}
											rs16.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										
										help.setDeptList(deptList);
										help.setDeptLabelList(deptLabelList);
										
										
				LinkedList LotusIDCreation = new LinkedList();
				String empno = userID;

				String data = "select emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE "
						+ "from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"
						+ empID
						+ "' and "
						+ "dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";
				ResultSet rs = ad.selectQuery(data);
				try {
					while (rs.next()) {

						help.setRequestername(rs.getString("EMP_FULLNAME"));
						help.setRequesterdepartment(rs.getString("DPTSTXT"));
						help.setRequesterdesignation(rs.getString("DSGSTXT"));
						help.setExtno(rs.getString("TEL_EXTENS"));
						help.setIpPhoneno(rs.getString("IP_PHONE"));
						help.setLocation(rs.getString("LOCATION_CODE"));

					}
				} catch (SQLException e) {
					e.printStackTrace();
				} 
				String requester="";
                String raisedby="";
				String data1 = " select * from IT_HELPDESK where Req_No="
						+ reqId + "";
				ResultSet rs1 = ad.selectQuery(data1);
				try {
					while (rs1.next()) {
						requester=rs1.getString("Emp_No");
						
						raisedby=rs1.getString("raisedBy");
						
						if(!raisedby.equalsIgnoreCase(empID))
						{
						
						
						String da1 = "select emp.PERNR,emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE "
								+ "from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"
								+ raisedby
								+ "' and "
								+ "dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";
						ResultSet r1 = ad.selectQuery(da1);
						try {
							while (r1.next()) {

								help.setRequestedforname(r1
										.getString("EMP_FULLNAME"));
								help.setRequestedfordepartment(r1
										.getString("DPTSTXT"));
								help.setRequestedfordesignation(r1
										.getString("DSGSTXT"));						
								help.setRequestedforlocation(r1
										.getString("LOCATION_CODE"));
								

							}
						} catch (SQLException e) {
							e.printStackTrace();
						}
						
						request.setAttribute("showothr", "showothr");
						}
						
						help.setAdloginname(rs1.getString("ADLoginName"));
						help.setSuggestedEmailId(rs1
								.getString("SuggestedEmailId"));
						String x = rs1.getString("comm_outside");
						if (x.equalsIgnoreCase("Yes")) {
							help.setOutsidecomyes("true");
						}
						if (x.equalsIgnoreCase("No")) {
							help.setOutsidecomno("true");
						}
						help.setIsHeHod(rs1.getString("Is_He_Hod"));
						help.setIsthisCommonId(rs1
								.getString("Is_This_common_ID"));
						help.setEnablewebAccess(rs1
								.getString("Enable_Web_access"));
						help.setReason(rs1.getString("Reason"));
						help.setHostname(rs1.getString("HostName"));
						help.setIPNumber(rs1.getString("IPAddress"));
						help.setTotalmailIdDept(rs1
								.getInt("TotalEmailIdInDepartment"));
						help.setTotalmailIdloc(rs1
								.getInt("TotalEmailIdInLocation"));
						help.setReqPriority(rs1.getString("Req_Priority"));
						help.setFirstname(rs1.getString("Frst_Name"));
						help.setLastname(rs1.getString("Last_Name"));
						help.setMiddname(rs1.getString("Middle_Name"));
						help.setDesignation(rs1.getString("designation"));
						help.setDepartment(rs1.getString("department"));
						String newlyJoinined = rs1.getString("newly_Joinied");
						if (newlyJoinined.equals("Yes")) {
							help.setNewlyJoinedYes("true");
						} else {
							help.setNewlyJoinedNo("true");
						}
						help.setJoiningDate(rs1.getString("joining_date"));
						help.setTotalIDs(rs1.getString("Total_Mailids"));

						String rmk = rs1.getString("Remarks");
						if (rmk != null) {
							help.setRemarks(rs1.getString("Remarks"));
							request.setAttribute("Remark", "Remark");
						}
					}
				} catch (SQLException e) {
					e.printStackTrace();
				}

				LotusIDCreation.add(help);
				request.setAttribute("LotusIDCreation", LotusIDCreation);

				// Approver Details
				checkStatus = 0;
				LinkedList listApprers = new LinkedList();
				int jk = 0;
				// HOD

				hodpresent = 0;
				hodpresentinIt = 0;
				HODPresentId = "";
				HODPresentname = "";
				itengineerid = "";
				itengineername = "";
				HOD = "";
				pendingApprovers = "";

				// chk if he has Hod
				String chkhod = "select count(*) from ESS_Approvers where employeeNumber='"
						+ empID + "'  ";
				ResultSet rs10 = ad.selectQuery(chkhod);
				try {
					while (rs10.next()) {
						hodpresent = rs10.getInt(1);
					}
				} catch (SQLException e1) {

					e1.printStackTrace();
				}

				// get hod details

				if (hodpresent > 0) {
					String gethod = "select ess.ApproverId,emp.EMP_FULLNAME from ESS_Approvers  as ess,emp_official_info as emp  "
							+ " where employeeNumber='"
							+ empID
							+ "'  and essType='Leave' and emp.PERNR=ess.ApproverId ";
					ResultSet rs2 = ad.selectQuery(gethod);

					try {
						if (rs2.next()) {

							HODPresentId = rs2.getString("ApproverId");
							HODPresentname = rs2.getString("EMP_FULLNAME");
						}
					} catch (SQLException e) {

						e.printStackTrace();
					}
				}

				// chk if he is present in It approver
				String chkhodinit = "select count(*) from IT_Approvers where Approver_ID='"
						+ HODPresentId
						+ "' and Req_Type = '"
						+ ITType
						+ "'  and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
						+ empID + "'))";
				ResultSet rs11 = ad.selectQuery(chkhodinit);
				try {
					while (rs11.next()) {
						hodpresentinIt = rs11.getInt(1);
					}
				} catch (SQLException e1) {

					e1.printStackTrace();
				}

				// Plant head
				String plantheadid = "";
				String plantheadname = "";
				String plantheaddep = "";
				String plantheaddesg = "";
				String a="";
				String userx="select loc.LOCID from Location as loc,emp_official_info as emp where loc.LOCATION_CODE=emp.LOCID and emp.PERNR='"+requester+"' ";
				ResultSet userrs=ad.selectQuery(userx);
				try {
					while(userrs.next())
					 {				
						a=userrs.getString("LOCID");
					 }
				} catch (SQLException e2) {
					// TODO Auto-generated catch block
					e2.printStackTrace();
				}
				if (!a.equalsIgnoreCase("16")) {
					String plant = "select pl.Plant,pl.PERNR,emp.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from PLANT_HEAD pl,emp_official_info emp,DEPARTMENT dep,DESIGNATION desg where Plant=(select LOCATION_CODE from Location where LOCID='"
							+ a
							+ "') and emp.PERNR=pl.PERNR and dep.DPTID=emp.DPTID and desg.DSGID=emp.DSGID";
					ResultSet pl = ad.selectQuery(plant);
					try {
						while (pl.next()) {
							plantheadid = pl.getString("pernr");
							plantheadname = pl.getString("EMP_FULLNAME");
							plantheaddep = pl.getString("DPTSTXT");
							plantheaddesg = pl.getString("DSGSTXT");
						}
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				if (plantheadid.equalsIgnoreCase("")) {

					if (hodpresent > 0 && hodpresentinIt == 0) {

						try {

							checkStatus = 1;
							ApprovalsForm apprvershod = new ApprovalsForm();
							apprvershod.setPriority("1");

							apprvershod.setEmployeeCode(HODPresentId);
							apprvershod.setEmployeeName(HODPresentname);

							String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
									+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
									+ reqId
									+ "' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
									+ empID
									+ "')) AND "
									+ "all_r.Last_Approver='"
									+ HODPresentId
									+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
									+ ITType
									+ "' and emp.PERNR=all_r.Last_Approver"
									+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

							ResultSet rsAppInfo = ad.selectQuery(recordStatus);
							if (rsAppInfo.next()) {
								apprvershod.setApproveStatus(rsAppInfo
										.getString("Req_Status"));
								String approveStatus = rsAppInfo
										.getString("Req_Status");
								if (approveStatus.equalsIgnoreCase("Approved")
										|| approveStatus
												.equalsIgnoreCase("Completed")) {
									apprvershod.setDate(rsAppInfo
											.getString("approved_date"));
								} else {
									apprvershod.setDate(rsAppInfo
											.getString("rejected_date"));
								}
								comments = "";
								comments = rsAppInfo.getString("Comments");
								if (comments == "null") {
									apprvershod.setComments("");
								} else {
									apprvershod.setComments(rsAppInfo
											.getString("Comments"));
								}
							}

							listApprers.add(apprvershod);
							jk = 1;
						}

						catch (SQLException e1) {

							e1.printStackTrace();
						}

					}
				}

				if (!plantheadid.equalsIgnoreCase("")) {

					try {

						checkStatus = 1;
						ApprovalsForm apprvershod = new ApprovalsForm();
						apprvershod.setPriority("1");

						apprvershod.setEmployeeCode(plantheadid);
						apprvershod.setEmployeeName(plantheadname);

						String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
								+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
								+ reqId
								+ "' and it.LOCATION_ID='"
								+ EmpLoc(userID)
								+ "' AND "
								+ "all_r.Last_Approver='"
								+ plantheadid
								+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
								+ ITType
								+ "' and emp.PERNR=all_r.Last_Approver"
								+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

						ResultSet rsAppInfo = ad.selectQuery(recordStatus);
						if (rsAppInfo.next()) {
							apprvershod.setApproveStatus(rsAppInfo
									.getString("Req_Status"));
							String approveStatus = rsAppInfo
									.getString("Req_Status");
							if (approveStatus.equalsIgnoreCase("Approved")
									|| approveStatus
											.equalsIgnoreCase("Created")) {
								apprvershod.setDate(rsAppInfo
										.getString("approved_date"));
							} else {
								apprvershod.setDate(rsAppInfo
										.getString("rejected_date"));
							}
							comments = "";
							comments = rsAppInfo.getString("Comments");
							if (comments == "null") {
								apprvershod.setComments("");
							} else {
								apprvershod.setComments(rsAppInfo
										.getString("Comments"));
							}
						}

						listApprers.add(apprvershod);
						jk = 1;
					}

					catch (SQLException e1) {

						e1.printStackTrace();
					}

				}

				String getApprDetails = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
						+ empID
						+ "'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"
						+ ITType
						+ "' group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
				ResultSet rsApprDetails = ad.selectQuery(getApprDetails);
				try {
					while (rsApprDetails.next()) {

						checkStatus = 1;
						ApprovalsForm apprvers = new ApprovalsForm();
						apprvers.setPriority(rsApprDetails
								.getString("Priority"));

						apprvers.setPriority(rsApprDetails
								.getString("Priority"));
						if (jk == 1) {

							apprvers.setPriority(Integer.toString(listApprers
									.size() + 1));
						}
						apprvers.setEmployeeCode(rsApprDetails
								.getString("Approver_Id"));
						String empCode = rsApprDetails.getString("Approver_Id");

						String recordStatus = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
								+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
								+ reqId
								+ "' "
								+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
								+ empID
								+ "')) AND all_r.Last_Approver='"
								+ empCode
								+ "' and it.Approver_Id=all_r.Last_Approver  and all_r.Req_Type='IT Request' and "
								+ "it.Req_Type='"
								+ ITType
								+ "' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
								+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";

						ResultSet rsAppInfo = ad.selectQuery(recordStatus);
						if (rsAppInfo.next()) {
							if (rsAppInfo.getInt("Priority") == 1) {
								chkdate = rsAppInfo.getString("approved_date");
								chkdate1 = rsAppInfo.getString("rejected_date");
							}
							apprvers.setApproveStatus(rsAppInfo
									.getString("Req_Status"));
							String approveStatus = rsAppInfo
									.getString("Req_Status");
							if (approveStatus.equalsIgnoreCase("Approved")
									|| approveStatus
											.equalsIgnoreCase("Completed")) {
								apprvers.setDate(rsAppInfo
										.getString("approved_date"));
							} else {
								apprvers.setDate(rsAppInfo
										.getString("rejected_date"));
							}
							comments = "";
							comments = rsAppInfo.getString("Comments");
							if (comments == "null") {
								apprvers.setComments("");
							} else {
								apprvers.setComments(rsAppInfo
										.getString("Comments"));
							}
						}
						apprvers.setEmployeeName(rsApprDetails
								.getString("EMP_FULLNAME"));

						listApprers.add(apprvers);

					}
					// IT ENGINEER DETAIlS

					String getApprDetails1 = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
							+ empID
							+ "'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"
							+ ITType
							+ "' and it.Priority=1    group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
					ResultSet rsApprDetails1 = ad.selectQuery(getApprDetails1);

					while (rsApprDetails1.next()) {
						checkStatus = 1;
						ApprovalsForm apprvers = new ApprovalsForm();
						apprvers.setPriority(Integer.toString(listApprers
								.size() + 1));

						apprvers.setEmployeeCode(rsApprDetails1
								.getString("Approver_Id"));
						String empCode1 = rsApprDetails1
								.getString("Approver_Id");

						String recordStatus1 = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
								+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
								+ reqId
								+ "' "
								+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
								+ empID
								+ "')) AND all_r.Last_Approver='"
								+ empCode1
								+ "' and it.Approver_Id=all_r.Last_Approver and all_r.Req_Type='IT Request' and "
								+ "it.Req_Type='"
								+ ITType
								+ "' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
								+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";

						ResultSet rsAppInfo1 = ad.selectQuery(recordStatus1);
						if (rsAppInfo1.next()) {

							String approveStatus = rsAppInfo1
									.getString("Req_Status");
							if (approveStatus.equalsIgnoreCase("Approved")) {
								recordStatus1 = recordStatus1
										+ " order by all_r.approved_date desc ";
								ResultSet rsAppInfo2 = ad
										.selectQuery(recordStatus1);
								if (rsAppInfo2.next()) {
									if (!chkdate.equalsIgnoreCase(rsAppInfo2
											.getString("approved_date"))) {
										apprvers.setApproveStatus("Closed");
										apprvers.setDate(rsAppInfo2
												.getString("approved_date"));

										comments = "";
										comments = rsAppInfo2
												.getString("Comments");
										if (comments == "null") {
											apprvers.setComments("");
										} else {
											apprvers.setComments(rsAppInfo2
													.getString("Comments"));
										}
									}
								}
							} else {

								recordStatus1 = recordStatus1
										+ " order by all_r.rejected_date desc ";
								ResultSet rsAppInfo3 = ad
										.selectQuery(recordStatus1);
								if (rsAppInfo3.next()) {
									if (!chkdate1.equalsIgnoreCase(rsAppInfo3
											.getString("rejected_date"))) {
										apprvers.setDate(rsAppInfo3
												.getString("rejected_date"));
									}

									comments = "";
									comments = rsAppInfo3.getString("Comments");
									if (comments == "null") {
										apprvers.setComments("");
									} else {
										apprvers.setComments(rsAppInfo3
												.getString("Comments"));
									}
								}
							}

						}
						apprvers.setEmployeeName(rsApprDetails1
								.getString("EMP_FULLNAME"));

						listApprers.add(apprvers);
					}

					request.setAttribute("approverDetails", listApprers);

				}

				catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				if (approverPriority == 1) {
					forwardType = "LotusIDCreationENG";
				} else {
					forwardType = "LotusIDCreationAppr";
				}
			}
			
			
			if(ITType.equalsIgnoreCase("Email ID Change Request"))
			{

				LinkedList LotusIDChange=new LinkedList();
				String empno=userID;
				
				String data="select emp.PERNR,emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE " +
						"from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"+empID+"' and " +
						"dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";	
				ResultSet rs= ad.selectQuery(data);
				try {
					while(rs.next())
					{
						
						help.setRequestername(rs.getString("EMP_FULLNAME"));
						help.setRequesterdepartment(rs.getString("DPTSTXT"));
						help.setRequesterdesignation(rs.getString("DSGSTXT"));
						help.setExtno(rs.getString("TEL_EXTENS"));
						help.setIpPhoneno(rs.getString("IP_PHONE"));
						help.setLocation(rs.getString("LOCATION_CODE"));
					
						help.setEmpno(rs.getString("PERNR"));
						
					}
				} catch (SQLException e) {
				  e.printStackTrace();
				}
				String requester="";
				String data1=" select * from IT_HELPDESK where Req_No="+reqId+"";	
				ResultSet rs1= ad.selectQuery(data1);
				try {
					while(rs1.next())
					{
						requester=rs1.getString("Emp_No");
						help.setAdloginname(rs1.getString("ADLoginName"));
						help.setFromemailId(rs1.getString("From_EmailID"));
						String x=rs1.getString("comm_outside");
						if(x.equalsIgnoreCase("Yes"))
						{
							help.setOutsidecomyes("true");
						}
						if(x.equalsIgnoreCase("No"))
						{
							help.setOutsidecomno("true");
						}
						
						String  newlyJoinined=rs1.getString("newly_Joinied");
						if(newlyJoinined.equals("Yes")){
							help.setNewlyJoinedYes("true");
						}else{
							help.setNewlyJoinedNo("true");
						}
						
						help.setTotalIDs(rs1.getString("Total_Mailids"));
						help.setJoiningDate(rs1.getString("joining_date"));
						help.setFirstname(rs1.getString("Frst_Name"));
						help.setLastname(rs1.getString("Last_Name"));
						help.setMiddname(rs1.getString("Middle_Name"));
						
						help.setDeleteoldmails(rs1.getString("delete_old_email"));
						help.setSuggestedEmailId(rs1.getString("SuggestedEmailId"));
						help.setIsHeHod(rs1.getString("Is_He_Hod"));
						help.setTransferoldmail(rs1.getString("Transfer_Old_Emails"));
						help.setIsthisCommonId(rs1.getString("Is_This_common_ID"));
						help.setEnablewebAccess(rs1.getString("Enable_Web_access"));
						help.setReason(rs1.getString("Reason"));
						help.setHostname(rs1.getString("HostName"));
						help.setIPNumber(rs1.getString("IPAddress"));
						help.setTotalmailIdDept(rs1.getInt("TotalEmailIdInDepartment"));
						help.setTotalmailIdloc(rs1.getInt("TotalEmailIdInLocation"));
						help.setReqPriority(rs1.getString("Req_Priority"));
						
						String rmk=rs1.getString("Remarks");
						if(rmk!=null)
						{
							help.setRemarks(rs1.getString("Remarks"));
							request.setAttribute("Remark", "Remark");
						}
						
					}
				} catch (SQLException e) {
					  e.printStackTrace();
					}
				LotusIDChange.add(reqId);
				request.setAttribute("LotusIDChange", LotusIDChange);
				
				//Approver Details
				  checkStatus=0;
				LinkedList listApprers=new LinkedList();
				int jk=0;
				//HOD

				 hodpresent=0;
				 hodpresentinIt=0;
				 HODPresentId="";
				 HODPresentname="";
				 itengineerid="";
				 itengineername="";
				 HOD="";
					pendingApprovers="";
				
				 //chk if he has Hod
				 String chkhod="select count(*) from ESS_Approvers where employeeNumber='"+empID+"'  ";
				 ResultSet rs10= ad.selectQuery(chkhod);
				 try {
					while(rs10.next())
					 {
						 hodpresent=rs10.getInt(1);
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				
				//get hod details
				
			
				if(hodpresent>0){
				String gethod="select ess.ApproverId,emp.EMP_FULLNAME from ESS_Approvers  as ess,emp_official_info as emp  " +
						" where employeeNumber='"+empID+"'  and essType='Leave' and emp.PERNR=ess.ApproverId ";
				 ResultSet rs2= ad.selectQuery(gethod);
				 
				 try {
					if(rs2.next())
					 {
					
						HODPresentId=rs2.getString("ApproverId");
						HODPresentname=rs2.getString("EMP_FULLNAME");
					 }
				} catch (SQLException e) {
					
					e.printStackTrace();
				}
				}
				
				//chk if he is present in It approver
				 String chkhodinit="select count(*) from IT_Approvers where Approver_ID='"+HODPresentId+"' and Req_Type = '"+ITType+"'  and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))";
				 ResultSet rs11= ad.selectQuery(chkhodinit);
				 try {
					while(rs11.next())
					 {
						hodpresentinIt=rs11.getInt(1);
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				 
				//Plant head
					String plantheadid="";
					String plantheadname="";
					String plantheaddep="";
					String plantheaddesg="";
					String a="";
					String userx="select loc.LOCID from Location as loc,emp_official_info as emp where loc.LOCATION_CODE=emp.LOCID and emp.PERNR='"+requester+"' ";
					ResultSet userrs=ad.selectQuery(userx);
					try {
						while(userrs.next())
						 {				
							a=userrs.getString("LOCID");
						 }
					} catch (SQLException e2) {
						// TODO Auto-generated catch block
						e2.printStackTrace();
					}
					if(!a.equalsIgnoreCase("16"))
					{
						String plant ="select pl.Plant,pl.PERNR,emp.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from PLANT_HEAD pl,emp_official_info emp,DEPARTMENT dep,DESIGNATION desg where Plant=(select LOCATION_CODE from Location where LOCID='"+a+"') and emp.PERNR=pl.PERNR and dep.DPTID=emp.DPTID and desg.DSGID=emp.DSGID";
						ResultSet pl=ad.selectQuery(plant);
						try {
							while(pl.next())
							 {
								plantheadid=pl.getString("pernr");
								plantheadname=pl.getString("EMP_FULLNAME");
								plantheaddep=pl.getString("DPTSTXT");
								plantheaddesg=pl.getString("DSGSTXT");
							 }
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					if(plantheadid.equalsIgnoreCase(""))
					{
				 
					if(hodpresent>0 && hodpresentinIt==0 )
					{
						
						
						try {
							
								checkStatus=1;
								ApprovalsForm apprvershod=new ApprovalsForm();
								apprvershod.setPriority("1");
								
								apprvershod.setEmployeeCode(HODPresentId);
								apprvershod.setEmployeeName(HODPresentname);
								
								String recordStatus="select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
							+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND "
							+ "all_r.Last_Approver='"+HODPresentId+"' and all_r.Req_Type='IT Request' and it.Req_Type='"+ITType+"' and emp.PERNR=all_r.Last_Approver"
							+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";
								
								ResultSet rsAppInfo=ad.selectQuery(recordStatus);
								if(rsAppInfo.next())
								{
									apprvershod.setApproveStatus(rsAppInfo.getString("Req_Status"));
									String approveStatus=rsAppInfo.getString("Req_Status");
									if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
									{
										apprvershod.setDate(rsAppInfo.getString("approved_date"));
									}else{
										apprvershod.setDate(rsAppInfo.getString("rejected_date"));
									}
									 comments="";
									comments=rsAppInfo.getString("Comments");
									if(comments=="null" )
									{
										apprvershod.setComments("");
									}else{
										apprvershod.setComments(rsAppInfo.getString("Comments"));
									}
								}
								
								
								listApprers.add(apprvershod);
							 jk=1;
							}
						
						catch (SQLException e1) {
							
							e1.printStackTrace();
						}
						
					}
					}
					
					 if(!plantheadid.equalsIgnoreCase(""))
						{
							
							
							try {
								
									checkStatus=1;
									ApprovalsForm apprvershod=new ApprovalsForm();
									apprvershod.setPriority("1");
									
									apprvershod.setEmployeeCode(plantheadid);
									apprvershod.setEmployeeName(plantheadname);
									
									String recordStatus="select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
								+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and it.LOCATION_ID='"+EmpLoc(userID)+"' AND "
								+ "all_r.Last_Approver='"+plantheadid+"' and all_r.Req_Type='IT Request' and it.Req_Type='"+ITType+"' and emp.PERNR=all_r.Last_Approver"
								+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";
									
									ResultSet rsAppInfo=ad.selectQuery(recordStatus);
									if(rsAppInfo.next())
									{
										apprvershod.setApproveStatus(rsAppInfo.getString("Req_Status"));
										String approveStatus=rsAppInfo.getString("Req_Status");
										if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Created"))
										{
											apprvershod.setDate(rsAppInfo.getString("approved_date"));
										}else{
											apprvershod.setDate(rsAppInfo.getString("rejected_date"));
										}
										 comments="";
										comments=rsAppInfo.getString("Comments");
										if(comments=="null" )
										{
											apprvershod.setComments("");
										}else{
											apprvershod.setComments(rsAppInfo.getString("Comments"));
										}
									}
									
									
									listApprers.add(apprvershod);
								 jk=1;
								}
							
							catch (SQLException e1) {
								
								e1.printStackTrace();
							}
							
						}
			
				
				String getApprDetails="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
				ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
				try {
					while(rsApprDetails.next())
					{
						
						checkStatus=1;
						ApprovalsForm apprvers=new ApprovalsForm();
						apprvers.setPriority(rsApprDetails.getString("Priority"));
						
					
					
						
						apprvers.setPriority(rsApprDetails.getString("Priority"));
						if(jk==1){
							
							apprvers.setPriority(Integer.toString(listApprers.size()+1));
						}
						apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
						String empCode=rsApprDetails.getString("Approver_Id");
						
						String recordStatus="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
								+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
								+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode+"' and it.Approver_Id=all_r.Last_Approver  and all_r.Req_Type='IT Request' and "
								+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
								+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
						
						ResultSet rsAppInfo=ad.selectQuery(recordStatus);
						if(rsAppInfo.next())
						{
							if(rsAppInfo.getInt("Priority")==1 )
							{
								 chkdate=rsAppInfo.getString("approved_date");
								 chkdate1=rsAppInfo.getString("rejected_date");
							}
							apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
							String approveStatus=rsAppInfo.getString("Req_Status");
							if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
							{
							apprvers.setDate(rsAppInfo.getString("approved_date"));
							}else{
								apprvers.setDate(rsAppInfo.getString("rejected_date"));
							}
							 comments="";
							comments=rsAppInfo.getString("Comments");
							if(comments=="null" )
							{
								apprvers.setComments("");
							}else{
								apprvers.setComments(rsAppInfo.getString("Comments"));
							}
						}
						apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
						
						listApprers.add(apprvers);
						
					}
						//IT ENGINEER DETAIlS
						
						
						String getApprDetails1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' and it.Priority=1    group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
						ResultSet rsApprDetails1=ad.selectQuery(getApprDetails1);
						
							while(rsApprDetails1.next())
							{
								checkStatus=1;
								ApprovalsForm apprvers=new ApprovalsForm();
								apprvers.setPriority(Integer.toString(listApprers.size()+1));
								
								apprvers.setEmployeeCode(rsApprDetails1.getString("Approver_Id"));
								String empCode1=rsApprDetails1.getString("Approver_Id");
								
								String recordStatus1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
										+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
										+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode1+"' and it.Approver_Id=all_r.Last_Approver and all_r.Req_Type='IT Request' and "
										+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
										+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
								
								ResultSet rsAppInfo1=ad.selectQuery(recordStatus1);
								if(rsAppInfo1.next())
								{
									
									String approveStatus=rsAppInfo1.getString("Req_Status");
									if(approveStatus.equalsIgnoreCase("Approved"))
									{
										recordStatus1=recordStatus1+" order by all_r.approved_date desc ";
										ResultSet rsAppInfo2=ad.selectQuery(recordStatus1);
										if(rsAppInfo2.next())
										{
											if(!chkdate.equalsIgnoreCase(rsAppInfo2.getString("approved_date")))
											{
												apprvers.setApproveStatus("Closed");
											apprvers.setDate(rsAppInfo2.getString("approved_date"));
											
										
										
										 comments="";
										comments=rsAppInfo2.getString("Comments");
										if(comments=="null" )
										{
											apprvers.setComments("");
										}else{
											apprvers.setComments(rsAppInfo2.getString("Comments"));
										}
										}
										}
									}else{
										
										recordStatus1=recordStatus1+" order by all_r.rejected_date desc ";
										ResultSet rsAppInfo3=ad.selectQuery(recordStatus1);
										if(rsAppInfo3.next())
										{
											if(!chkdate1.equalsIgnoreCase(rsAppInfo3.getString("rejected_date")))
											{
											apprvers.setDate(rsAppInfo3.getString("rejected_date"));
											}
											
										
										 comments="";
										comments=rsAppInfo3.getString("Comments");
										if(comments=="null" )
										{
											apprvers.setComments("");
										}else{
											apprvers.setComments(rsAppInfo3.getString("Comments"));
										}
										}
									}
									
								}
								apprvers.setEmployeeName(rsApprDetails1.getString("EMP_FULLNAME"));
						
							listApprers.add(apprvers);
							}
						
						request.setAttribute("approverDetails", listApprers);
					
				} 
				
					catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				if(approverPriority==1)
				{
					forwardType="LotusIDChangeENG";
				}
				else{
				forwardType="LotusIDChangeAppr";
				}
			}
			
			if(ITType.equalsIgnoreCase("Email ID Delete Request"))
			{


				LinkedList LotusIDDeletion=new LinkedList();
				String empno=userID;
				
				String data="select emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE " +
						"from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"+empID+"' and " +
						"dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";	
				ResultSet rs= ad.selectQuery(data);
				try {
					while(rs.next())
					{
						
						
						help.setRequestername(rs.getString("EMP_FULLNAME"));
						help.setRequesterdepartment(rs.getString("DPTSTXT"));
						help.setRequesterdesignation(rs.getString("DSGSTXT"));
						help.setExtno(rs.getString("TEL_EXTENS"));
						help.setIpPhoneno(rs.getString("IP_PHONE"));
						help.setLocation(rs.getString("LOCATION_CODE"));
					
						
						
					}
				} catch (SQLException e) {
				  e.printStackTrace();
				}
				String requester="";
				String data1=" select * from IT_HELPDESK where Req_No="+reqId+"";	
				ResultSet rs1= ad.selectQuery(data1);
				try {
					while(rs1.next())
					{
						requester=rs1.getString("Emp_No");
						help.setAdloginname(rs1.getString("ADLoginName"));
						help.setSuggestedEmailId(rs1.getString("SuggestedEmailId"));
						help.setIsHeHod(rs1.getString("Is_He_Hod"));
						help.setIsthisCommonId(rs1.getString("Is_This_common_ID"));
						help.setEmailidDelete(rs1.getString("EmailID_Deleted"));
						help.setDeletefrom(rs1.getString("Delete_From"));
						help.setReason(rs1.getString("Reason"));
						help.setReqPriority(rs1.getString("Req_Priority"));
						help.setHostname(rs1.getString("HostName"));
						help.setIPNumber(rs1.getString("IPAddress"));
						help.setTotalmailIdDept(rs1.getInt("TotalEmailIdInDepartment"));
						help.setTotalmailIdloc(rs1.getInt("TotalEmailIdInLocation"));
						help.setForward_MailID(rs1.getString("forward_MailID"));
						help.setMailIDPath(rs1.getString("path"));
						String x=rs1.getString("deletedDB");
						if(x.equalsIgnoreCase("Yes"))
						{
							help.setDeletedDBYes("true");
						}
						if(x.equalsIgnoreCase("No"))
						{
							help.setDeletedDBNo("true");
						}
						
						String rmk=rs1.getString("Remarks");
						if(rmk!=null)
						{
							help.setRemarks(rs1.getString("Remarks"));
							request.setAttribute("Remark", "Remark");
						}
						
					}
				} catch (SQLException e) {
					  e.printStackTrace();
					}
				
				//Approver Details
				  checkStatus=0;
				LinkedList listApprers=new LinkedList();
				int jk=0;
				//HOD

				 hodpresent=0;
				 hodpresentinIt=0;
				 HODPresentId="";
				 HODPresentname="";
				 itengineerid="";
				 itengineername="";
				 HOD="";
					pendingApprovers="";
				
				 //chk if he has Hod
				 String chkhod="select count(*) from ESS_Approvers where employeeNumber='"+empID+"'  ";
				 ResultSet rs10= ad.selectQuery(chkhod);
				 try {
					while(rs10.next())
					 {
						 hodpresent=rs10.getInt(1);
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				
				//get hod details
				
			
				if(hodpresent>0){
				String gethod="select ess.ApproverId,emp.EMP_FULLNAME from ESS_Approvers  as ess,emp_official_info as emp  " +
						" where employeeNumber='"+empID+"'  and essType='Leave' and emp.PERNR=ess.ApproverId ";
				 ResultSet rs2= ad.selectQuery(gethod);
				 
				 try {
					if(rs2.next())
					 {
					
						HODPresentId=rs2.getString("ApproverId");
						HODPresentname=rs2.getString("EMP_FULLNAME");
					 }
				} catch (SQLException e) {
					
					e.printStackTrace();
				}
				}
				
				//chk if he is present in It approver
				 String chkhodinit="select count(*) from IT_Approvers where Approver_ID='"+HODPresentId+"' and Req_Type = '"+ITType+"'  and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))";
				 ResultSet rs11= ad.selectQuery(chkhodinit);
				 try {
					while(rs11.next())
					 {
						hodpresentinIt=rs11.getInt(1);
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				 
				//Plant head
					String plantheadid="";
					String plantheadname="";
					String plantheaddep="";
					String plantheaddesg="";
					String a="";
					String userx="select loc.LOCID from Location as loc,emp_official_info as emp where loc.LOCATION_CODE=emp.LOCID and emp.PERNR='"+requester+"' ";
					ResultSet userrs=ad.selectQuery(userx);
					try {
						while(userrs.next())
						 {				
							a=userrs.getString("LOCID");
						 }
					} catch (SQLException e2) {
						// TODO Auto-generated catch block
						e2.printStackTrace();
					}
					if(!a.equalsIgnoreCase("16"))
					{
						String plant ="select pl.Plant,pl.PERNR,emp.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from PLANT_HEAD pl,emp_official_info emp,DEPARTMENT dep,DESIGNATION desg where Plant=(select LOCATION_CODE from Location where LOCID='"+a+"') and emp.PERNR=pl.PERNR and dep.DPTID=emp.DPTID and desg.DSGID=emp.DSGID";
						ResultSet pl=ad.selectQuery(plant);
						try {
							while(pl.next())
							 {
								plantheadid=pl.getString("pernr");
								plantheadname=pl.getString("EMP_FULLNAME");
								plantheaddep=pl.getString("DPTSTXT");
								plantheaddesg=pl.getString("DSGSTXT");
							 }
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					if(plantheadid.equalsIgnoreCase(""))
					{
				 
					if(hodpresent>0 && hodpresentinIt==0 )
					{
						
						
						try {
							
								checkStatus=1;
								ApprovalsForm apprvershod=new ApprovalsForm();
								apprvershod.setPriority("1");
								
								apprvershod.setEmployeeCode(HODPresentId);
								apprvershod.setEmployeeName(HODPresentname);
								
								String recordStatus="select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
							+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND "
							+ "all_r.Last_Approver='"+HODPresentId+"' and all_r.Req_Type='IT Request' and it.Req_Type='"+ITType+"' and emp.PERNR=all_r.Last_Approver"
							+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";
								
								ResultSet rsAppInfo=ad.selectQuery(recordStatus);
								if(rsAppInfo.next())
								{
									apprvershod.setApproveStatus(rsAppInfo.getString("Req_Status"));
									String approveStatus=rsAppInfo.getString("Req_Status");
									if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
									{
										apprvershod.setDate(rsAppInfo.getString("approved_date"));
									}else{
										apprvershod.setDate(rsAppInfo.getString("rejected_date"));
									}
									 comments="";
									comments=rsAppInfo.getString("Comments");
									if(comments=="null" )
									{
										apprvershod.setComments("");
									}else{
										apprvershod.setComments(rsAppInfo.getString("Comments"));
									}
								}
								
								
								listApprers.add(apprvershod);
							 jk=1;
							}
						
						catch (SQLException e1) {
							
							e1.printStackTrace();
						}
						
					}
					}
					
					 if(!plantheadid.equalsIgnoreCase(""))
						{
							
							
							try {
								
									checkStatus=1;
									ApprovalsForm apprvershod=new ApprovalsForm();
									apprvershod.setPriority("1");
									
									apprvershod.setEmployeeCode(plantheadid);
									apprvershod.setEmployeeName(plantheadname);
									
									String recordStatus="select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
								+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and it.LOCATION_ID='"+EmpLoc(userID)+"' AND "
								+ "all_r.Last_Approver='"+plantheadid+"' and all_r.Req_Type='IT Request' and it.Req_Type='"+ITType+"' and emp.PERNR=all_r.Last_Approver"
								+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";
									
									ResultSet rsAppInfo=ad.selectQuery(recordStatus);
									if(rsAppInfo.next())
									{
										apprvershod.setApproveStatus(rsAppInfo.getString("Req_Status"));
										String approveStatus=rsAppInfo.getString("Req_Status");
										if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Created"))
										{
											apprvershod.setDate(rsAppInfo.getString("approved_date"));
										}else{
											apprvershod.setDate(rsAppInfo.getString("rejected_date"));
										}
										 comments="";
										comments=rsAppInfo.getString("Comments");
										if(comments=="null" )
										{
											apprvershod.setComments("");
										}else{
											apprvershod.setComments(rsAppInfo.getString("Comments"));
										}
									}
									
									
									listApprers.add(apprvershod);
								 jk=1;
								}
							
							catch (SQLException e1) {
								
								e1.printStackTrace();
							}
							
						}
			
				
				String getApprDetails="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
				ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
				try {
					while(rsApprDetails.next())
					{
						
						checkStatus=1;
						ApprovalsForm apprvers=new ApprovalsForm();
						apprvers.setPriority(rsApprDetails.getString("Priority"));
						
					
					
						
						apprvers.setPriority(rsApprDetails.getString("Priority"));
						if(jk==1){
							
							apprvers.setPriority(Integer.toString(listApprers.size()+1));
						}
						apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
						String empCode=rsApprDetails.getString("Approver_Id");
						
						String recordStatus="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
								+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
								+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode+"' and it.Approver_Id=all_r.Last_Approver  and all_r.Req_Type='IT Request' and "
								+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
								+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
						
						ResultSet rsAppInfo=ad.selectQuery(recordStatus);
						if(rsAppInfo.next())
						{
							if(rsAppInfo.getInt("Priority")==1 )
							{
								 chkdate=rsAppInfo.getString("approved_date");
								 chkdate1=rsAppInfo.getString("rejected_date");
							}
							apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
							String approveStatus=rsAppInfo.getString("Req_Status");
							if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
							{
							apprvers.setDate(rsAppInfo.getString("approved_date"));
							}else{
								apprvers.setDate(rsAppInfo.getString("rejected_date"));
							}
							 comments="";
							comments=rsAppInfo.getString("Comments");
							if(comments=="null" )
							{
								apprvers.setComments("");
							}else{
								apprvers.setComments(rsAppInfo.getString("Comments"));
							}
						}
						apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
						
						listApprers.add(apprvers);
						
					}
						//IT ENGINEER DETAIlS
						
						
						String getApprDetails1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' and it.Priority=1    group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
						ResultSet rsApprDetails1=ad.selectQuery(getApprDetails1);
						
							while(rsApprDetails1.next())
							{
								checkStatus=1;
								ApprovalsForm apprvers=new ApprovalsForm();
								apprvers.setPriority(Integer.toString(listApprers.size()+1));
								
								apprvers.setEmployeeCode(rsApprDetails1.getString("Approver_Id"));
								String empCode1=rsApprDetails1.getString("Approver_Id");
								
								String recordStatus1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
										+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
										+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode1+"' and it.Approver_Id=all_r.Last_Approver and all_r.Req_Type='IT Request' and "
										+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
										+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
								
								ResultSet rsAppInfo1=ad.selectQuery(recordStatus1);
								if(rsAppInfo1.next())
								{
									
									String approveStatus=rsAppInfo1.getString("Req_Status");
									if(approveStatus.equalsIgnoreCase("Approved"))
									{
										recordStatus1=recordStatus1+" order by all_r.approved_date desc ";
										ResultSet rsAppInfo2=ad.selectQuery(recordStatus1);
										if(rsAppInfo2.next())
										{
											if(!chkdate.equalsIgnoreCase(rsAppInfo2.getString("approved_date")))
											{
												apprvers.setApproveStatus("Closed");
											apprvers.setDate(rsAppInfo2.getString("approved_date"));
											
										
										
										 comments="";
										comments=rsAppInfo2.getString("Comments");
										if(comments=="null" )
										{
											apprvers.setComments("");
										}else{
											apprvers.setComments(rsAppInfo2.getString("Comments"));
										}
										}
										}
									}else{
										
										recordStatus1=recordStatus1+" order by all_r.rejected_date desc ";
										ResultSet rsAppInfo3=ad.selectQuery(recordStatus1);
										if(rsAppInfo3.next())
										{
											if(!chkdate1.equalsIgnoreCase(rsAppInfo3.getString("rejected_date")))
											{
											apprvers.setDate(rsAppInfo3.getString("rejected_date"));
											}
											
										
										 comments="";
										comments=rsAppInfo3.getString("Comments");
										if(comments=="null" )
										{
											apprvers.setComments("");
										}else{
											apprvers.setComments(rsAppInfo3.getString("Comments"));
										}
										}
									}
									
								}
								apprvers.setEmployeeName(rsApprDetails1.getString("EMP_FULLNAME"));
						
							listApprers.add(apprvers);
							}
						
						request.setAttribute("approverDetails", listApprers);
					
				} 
				
					catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				
				
				request.setAttribute("LotusIDDeletion", LotusIDDeletion);
				if(approverPriority==1)
				{
					forwardType="LotusIDDeleteENG";
				}
				else{
				forwardType="LotusIDDeleteAppr";
				}
			
				
			
			}
			
			
			
			
			if(ITType.equalsIgnoreCase("Internet Access Request"))
			{
				LinkedList internet=new LinkedList();
				String empno=userID;
				
				String data="select emp.PERNR,emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE " +
						"from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"+empID+"' and " +
						"dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";	
				ResultSet rs= ad.selectQuery(data);
				try {
					while(rs.next())
					{
					
						help.setRequestername(rs.getString("EMP_FULLNAME"));
						help.setRequesterdepartment(rs.getString("DPTSTXT"));
						help.setRequesterdesignation(rs.getString("DSGSTXT"));
						help.setExtno(rs.getString("TEL_EXTENS"));
						help.setIpPhoneno(rs.getString("IP_PHONE"));
						help.setLocation(rs.getString("LOCATION_CODE"));
					
						help.setEmpno(rs.getString("PERNR"));
						
					}
				} catch (SQLException e) {
				  e.printStackTrace();
				}
				
				String requester="";
				String data1=" select * from IT_HELPDESK where Req_No="+reqId+"";	
				ResultSet rs1= ad.selectQuery(data1);
				try {
					while(rs1.next())
					{
						requester=rs1.getString("Emp_No");
						help.setIsHeHod(rs1.getString("Is_He_Hod"));
						help.setAssetvalue(rs1.getString("Asset_Details"));
						help.setAdloginname(rs1.getString("ADLoginName"));
						help.setReason(rs1.getString("Reason"));
						help.setHostname(rs1.getString("HostName"));
						help.setIPNumber(rs1.getString("IPAddress"));
						help.setInternetgrp(rs1.getString("InternetGroupCategory"));
						help.setReqPriority(rs1.getString("Req_Priority"));
						
						String rmk=rs1.getString("Remarks");
						if(rmk!=null)
						{
							help.setRemarks(rs1.getString("Remarks"));
							request.setAttribute("Remark", "Remark");
						}
						
					}
				} catch (SQLException e) {
					  e.printStackTrace();
					}
						
				internet.add(help);
				request.setAttribute("Internet", internet);
				
				//Approver Details
				  checkStatus=0;
				LinkedList listApprers=new LinkedList();
				int jk=0;
				//HOD

				 hodpresent=0;
				 hodpresentinIt=0;
				 HODPresentId="";
				 HODPresentname="";
				 itengineerid="";
				 itengineername="";
				 HOD="";
					pendingApprovers="";
				
				 //chk if he has Hod
				 String chkhod="select count(*) from ESS_Approvers where employeeNumber='"+empID+"'  ";
				 ResultSet rs10= ad.selectQuery(chkhod);
				 try {
					while(rs10.next())
					 {
						 hodpresent=rs10.getInt(1);
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				
				//get hod details
				
			
				if(hodpresent>0){
				String gethod="select ess.ApproverId,emp.EMP_FULLNAME from ESS_Approvers  as ess,emp_official_info as emp  " +
						" where employeeNumber='"+empID+"'  and essType='Leave' and emp.PERNR=ess.ApproverId ";
				 ResultSet rs2= ad.selectQuery(gethod);
				 
				 try {
					if(rs2.next())
					 {
					
						HODPresentId=rs2.getString("ApproverId");
						HODPresentname=rs2.getString("EMP_FULLNAME");
					 }
				} catch (SQLException e) {
					
					e.printStackTrace();
				}
				}
				
				//chk if he is present in It approver
				 String chkhodinit="select count(*) from IT_Approvers where Approver_ID='"+HODPresentId+"' and Req_Type = '"+ITType+"'  and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))";
				 ResultSet rs11= ad.selectQuery(chkhodinit);
				 try {
					while(rs11.next())
					 {
						hodpresentinIt=rs11.getInt(1);
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				 
				// Plant head
					String plantheadid = "";
					String plantheadname = "";
					String plantheaddep = "";
					String plantheaddesg = "";
					String a="";
					String userx="select loc.LOCID from Location as loc,emp_official_info as emp where loc.LOCATION_CODE=emp.LOCID and emp.PERNR='"+requester+"' ";
					ResultSet userrs=ad.selectQuery(userx);
					try {
						while(userrs.next())
						 {				
							a=userrs.getString("LOCID");
						 }
					} catch (SQLException e2) {
						// TODO Auto-generated catch block
						e2.printStackTrace();
					}
					if (!a.equalsIgnoreCase("16")) {
						String plant = "select pl.Plant,pl.PERNR,emp.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from PLANT_HEAD pl,emp_official_info emp,DEPARTMENT dep,DESIGNATION desg where Plant=(select LOCATION_CODE from Location where LOCID='"
								+ a
								+ "') and emp.PERNR=pl.PERNR and dep.DPTID=emp.DPTID and desg.DSGID=emp.DSGID";
						ResultSet pl = ad.selectQuery(plant);
						try {
							while (pl.next()) {
								plantheadid = pl.getString("pernr");
								plantheadname = pl.getString("EMP_FULLNAME");
								plantheaddep = pl.getString("DPTSTXT");
								plantheaddesg = pl.getString("DSGSTXT");
							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					if (plantheadid.equalsIgnoreCase("")) {

						if (hodpresent > 0 && hodpresentinIt == 0) {

							try {

								checkStatus = 1;
								ApprovalsForm apprvershod = new ApprovalsForm();
								apprvershod.setPriority("1");

								apprvershod.setEmployeeCode(HODPresentId);
								apprvershod.setEmployeeName(HODPresentname);

								String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
										+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
										+ reqId
										+ "' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
										+ empID
										+ "')) AND "
										+ "all_r.Last_Approver='"
										+ HODPresentId
										+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
										+ ITType
										+ "' and emp.PERNR=all_r.Last_Approver"
										+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

								ResultSet rsAppInfo = ad.selectQuery(recordStatus);
								if (rsAppInfo.next()) {
									apprvershod.setApproveStatus(rsAppInfo
											.getString("Req_Status"));
									String approveStatus = rsAppInfo
											.getString("Req_Status");
									if (approveStatus.equalsIgnoreCase("Approved")
											|| approveStatus
													.equalsIgnoreCase("Completed")) {
										apprvershod.setDate(rsAppInfo
												.getString("approved_date"));
									} else {
										apprvershod.setDate(rsAppInfo
												.getString("rejected_date"));
									}
									comments = "";
									comments = rsAppInfo.getString("Comments");
									if (comments == "null") {
										apprvershod.setComments("");
									} else {
										apprvershod.setComments(rsAppInfo
												.getString("Comments"));
									}
								}

								listApprers.add(apprvershod);
								jk = 1;
							}

							catch (SQLException e1) {

								e1.printStackTrace();
							}

						}
					}

					if (!plantheadid.equalsIgnoreCase("")) {

						try {

							checkStatus = 1;
							ApprovalsForm apprvershod = new ApprovalsForm();
							apprvershod.setPriority("1");

							apprvershod.setEmployeeCode(plantheadid);
							apprvershod.setEmployeeName(plantheadname);

							String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
									+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
									+ reqId
									+ "' and it.LOCATION_ID='"
									+ EmpLoc(userID)
									+ "' AND "
									+ "all_r.Last_Approver='"
									+ plantheadid
									+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
									+ ITType
									+ "' and emp.PERNR=all_r.Last_Approver"
									+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

							ResultSet rsAppInfo = ad.selectQuery(recordStatus);
							if (rsAppInfo.next()) {
								apprvershod.setApproveStatus(rsAppInfo
										.getString("Req_Status"));
								String approveStatus = rsAppInfo
										.getString("Req_Status");
								if (approveStatus.equalsIgnoreCase("Approved")
										|| approveStatus
												.equalsIgnoreCase("Created")) {
									apprvershod.setDate(rsAppInfo
											.getString("approved_date"));
								} else {
									apprvershod.setDate(rsAppInfo
											.getString("rejected_date"));
								}
								comments = "";
								comments = rsAppInfo.getString("Comments");
								if (comments == "null") {
									apprvershod.setComments("");
								} else {
									apprvershod.setComments(rsAppInfo
											.getString("Comments"));
								}
							}

							listApprers.add(apprvershod);
							jk = 1;
						}

						catch (SQLException e1) {

							e1.printStackTrace();
						}

					}

					String getApprDetails = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
							+ empID
							+ "'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"
							+ ITType
							+ "' group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
					ResultSet rsApprDetails = ad.selectQuery(getApprDetails);
					try {
						while (rsApprDetails.next()) {

							checkStatus = 1;
							ApprovalsForm apprvers = new ApprovalsForm();
							apprvers.setPriority(rsApprDetails
									.getString("Priority"));

							apprvers.setPriority(rsApprDetails
									.getString("Priority"));
							if (jk == 1) {

								apprvers.setPriority(Integer.toString(listApprers
										.size() + 1));
							}
							apprvers.setEmployeeCode(rsApprDetails
									.getString("Approver_Id"));
							String empCode = rsApprDetails.getString("Approver_Id");

							String recordStatus = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
									+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
									+ reqId
									+ "' "
									+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
									+ empID
									+ "')) AND all_r.Last_Approver='"
									+ empCode
									+ "' and it.Approver_Id=all_r.Last_Approver  and all_r.Req_Type='IT Request' and "
									+ "it.Req_Type='"
									+ ITType
									+ "' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
									+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";

							ResultSet rsAppInfo = ad.selectQuery(recordStatus);
							if (rsAppInfo.next()) {
								if (rsAppInfo.getInt("Priority") == 1) {
									chkdate = rsAppInfo.getString("approved_date");
									chkdate1 = rsAppInfo.getString("rejected_date");
								}
								apprvers.setApproveStatus(rsAppInfo
										.getString("Req_Status"));
								String approveStatus = rsAppInfo
										.getString("Req_Status");
								if (approveStatus.equalsIgnoreCase("Approved")
										|| approveStatus
												.equalsIgnoreCase("Completed")) {
									apprvers.setDate(rsAppInfo
											.getString("approved_date"));
								} else {
									apprvers.setDate(rsAppInfo
											.getString("rejected_date"));
								}
								comments = "";
								comments = rsAppInfo.getString("Comments");
								if (comments == "null") {
									apprvers.setComments("");
								} else {
									apprvers.setComments(rsAppInfo
											.getString("Comments"));
								}
							}
							apprvers.setEmployeeName(rsApprDetails
									.getString("EMP_FULLNAME"));

							listApprers.add(apprvers);

						}
						//IT ENGINEER DETAIlS
						
						
						String getApprDetails1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' and it.Priority=1    group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
						ResultSet rsApprDetails1=ad.selectQuery(getApprDetails1);
						
							while(rsApprDetails1.next())
							{
								checkStatus=1;
								ApprovalsForm apprvers=new ApprovalsForm();
								apprvers.setPriority(Integer.toString(listApprers.size()+1));
								
								apprvers.setEmployeeCode(rsApprDetails1.getString("Approver_Id"));
								String empCode1=rsApprDetails1.getString("Approver_Id");
								
								String recordStatus1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
										+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
										+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode1+"' and it.Approver_Id=all_r.Last_Approver and all_r.Req_Type='IT Request' and "
										+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
										+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
								
								ResultSet rsAppInfo1=ad.selectQuery(recordStatus1);
								if(rsAppInfo1.next())
								{
									
									String approveStatus=rsAppInfo1.getString("Req_Status");
									if(approveStatus.equalsIgnoreCase("Approved"))
									{
										recordStatus1=recordStatus1+" order by all_r.approved_date desc ";
										ResultSet rsAppInfo2=ad.selectQuery(recordStatus1);
										if(rsAppInfo2.next())
										{
											if(!chkdate.equalsIgnoreCase(rsAppInfo2.getString("approved_date")))
											{
												apprvers.setApproveStatus("Closed");
											apprvers.setDate(rsAppInfo2.getString("approved_date"));
											
										
										
										 comments="";
										comments=rsAppInfo2.getString("Comments");
										if(comments=="null" )
										{
											apprvers.setComments("");
										}else{
											apprvers.setComments(rsAppInfo2.getString("Comments"));
										}
										}
										}
									}else{
										
										recordStatus1=recordStatus1+" order by all_r.rejected_date desc ";
										ResultSet rsAppInfo3=ad.selectQuery(recordStatus1);
										if(rsAppInfo3.next())
										{
											if(!chkdate1.equalsIgnoreCase(rsAppInfo3.getString("rejected_date")))
											{
											apprvers.setDate(rsAppInfo3.getString("rejected_date"));
											}
											
										
										 comments="";
										comments=rsAppInfo3.getString("Comments");
										if(comments=="null" )
										{
											apprvers.setComments("");
										}else{
											apprvers.setComments(rsAppInfo3.getString("Comments"));
										}
										}
									}
									
								}
								apprvers.setEmployeeName(rsApprDetails1.getString("EMP_FULLNAME"));
						
							listApprers.add(apprvers);
							}
						
						request.setAttribute("approverDetails", listApprers);
					
				} 
				
					catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				if(approverPriority==1)
				{
					forwardType="InternetENG";
				}
				else{
				forwardType="InternetAppr";
				}
			}
			
			if(ITType.equalsIgnoreCase("External Drives Access Request"))
			{
				LinkedList externaldrives=new LinkedList();
				String empno=userID;
				
				String data="select emp.PERNR,emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE " +
						"from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"+empID+"' and " +
						"dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";	
				ResultSet rs= ad.selectQuery(data);
				try {
					while(rs.next())
					{
						
						help.setRequestername(rs.getString("EMP_FULLNAME"));
						help.setRequesterdepartment(rs.getString("DPTSTXT"));
						help.setRequesterdesignation(rs.getString("DSGSTXT"));
						help.setExtno(rs.getString("TEL_EXTENS"));
						help.setIpPhoneno(rs.getString("IP_PHONE"));
						help.setLocation(rs.getString("LOCATION_CODE"));
						
						help.setEmpno(rs.getString("PERNR"));
						
						
					}
				} catch (SQLException e) {
				  e.printStackTrace();
				}
				
				String requester="";
				String data1=" select * from IT_HELPDESK where Req_No="+reqId+"";	
				ResultSet rs1= ad.selectQuery(data1);
				try {
					while(rs1.next())
					{
						requester=rs1.getString("Emp_No");
						help.setAdloginname(rs1.getString("ADLoginName"));
						help.setAssetvalue(rs1.getString("Asset_Details"));
						help.setAccesstype(rs1.getString("Access_type"));
						help.setReason(rs1.getString("Reason"));
						help.setHostname(rs1.getString("HostName"));
						help.setIPNumber(rs1.getString("IPAddress"));
						help.setReqPriority(rs1.getString("Req_Priority"));
						String device=rs1.getString("Device_type");
						if(device.equalsIgnoreCase("3"))
						{
							help.setCdrom("CD/DVD_ROM");
							help.setUsb("USB");
						}
						if(device.equalsIgnoreCase("1"))
						{
							help.setCdrom("CD/DVD_ROM");
							
						}
						if(device.equalsIgnoreCase("2"))
						{
							
							help.setUsb("USB");
						}
						
						String rmk=rs1.getString("Remarks");
						if(rmk!=null)
						{
							help.setRemarks(rs1.getString("Remarks"));
							request.setAttribute("Remark", "Remark");
						}
						
					}
				} catch (SQLException e) {
					  e.printStackTrace();
					}
				externaldrives.add(help);
				request.setAttribute("externaldrives", externaldrives);
				
				//Approver Details
				  checkStatus=0;
				LinkedList listApprers=new LinkedList();
				int jk=0;
				//HOD

				 hodpresent=0;
				 hodpresentinIt=0;
				 HODPresentId="";
				 HODPresentname="";
				 itengineerid="";
				 itengineername="";
				 HOD="";
					pendingApprovers="";
				
				 //chk if he has Hod
				 String chkhod="select count(*) from ESS_Approvers where employeeNumber='"+empID+"'  ";
				 ResultSet rs10= ad.selectQuery(chkhod);
				 try {
					while(rs10.next())
					 {
						 hodpresent=rs10.getInt(1);
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				
				//get hod details
				
			
				if(hodpresent>0){
				String gethod="select ess.ApproverId,emp.EMP_FULLNAME from ESS_Approvers  as ess,emp_official_info as emp  " +
						" where employeeNumber='"+empID+"'  and essType='Leave' and emp.PERNR=ess.ApproverId ";
				 ResultSet rs2= ad.selectQuery(gethod);
				 
				 try {
					if(rs2.next())
					 {
					
						HODPresentId=rs2.getString("ApproverId");
						HODPresentname=rs2.getString("EMP_FULLNAME");
					 }
				} catch (SQLException e) {
					
					e.printStackTrace();
				}
				}
				
				//chk if he is present in It approver
				 String chkhodinit="select count(*) from IT_Approvers where Approver_ID='"+HODPresentId+"' and Req_Type = '"+ITType+"'  and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))";
				 ResultSet rs11= ad.selectQuery(chkhodinit);
				 try {
					while(rs11.next())
					 {
						hodpresentinIt=rs11.getInt(1);
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				 
				// Plant head
					String plantheadid = "";
					String plantheadname = "";
					String plantheaddep = "";
					String plantheaddesg = "";
					String a="";
					String userx="select loc.LOCID from Location as loc,emp_official_info as emp where loc.LOCATION_CODE=emp.LOCID and emp.PERNR='"+requester+"' ";
					ResultSet userrs=ad.selectQuery(userx);
					try {
						while(userrs.next())
						 {				
							a=userrs.getString("LOCID");
						 }
					} catch (SQLException e2) {
						// TODO Auto-generated catch block
						e2.printStackTrace();
					}
					if (!a.equalsIgnoreCase("16")) {
						String plant = "select pl.Plant,pl.PERNR,emp.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from PLANT_HEAD pl,emp_official_info emp,DEPARTMENT dep,DESIGNATION desg where Plant=(select LOCATION_CODE from Location where LOCID='"
								+ a
								+ "') and emp.PERNR=pl.PERNR and dep.DPTID=emp.DPTID and desg.DSGID=emp.DSGID";
						ResultSet pl = ad.selectQuery(plant);
						try {
							while (pl.next()) {
								plantheadid = pl.getString("pernr");
								plantheadname = pl.getString("EMP_FULLNAME");
								plantheaddep = pl.getString("DPTSTXT");
								plantheaddesg = pl.getString("DSGSTXT");
							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					if (plantheadid.equalsIgnoreCase("")) {

						if (hodpresent > 0 && hodpresentinIt == 0) {

							try {

								checkStatus = 1;
								ApprovalsForm apprvershod = new ApprovalsForm();
								apprvershod.setPriority("1");

								apprvershod.setEmployeeCode(HODPresentId);
								apprvershod.setEmployeeName(HODPresentname);

								String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
										+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
										+ reqId
										+ "' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
										+ empID
										+ "')) AND "
										+ "all_r.Last_Approver='"
										+ HODPresentId
										+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
										+ ITType
										+ "' and emp.PERNR=all_r.Last_Approver"
										+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

								ResultSet rsAppInfo = ad.selectQuery(recordStatus);
								if (rsAppInfo.next()) {
									apprvershod.setApproveStatus(rsAppInfo
											.getString("Req_Status"));
									String approveStatus = rsAppInfo
											.getString("Req_Status");
									if (approveStatus.equalsIgnoreCase("Approved")
											|| approveStatus
													.equalsIgnoreCase("Completed")) {
										apprvershod.setDate(rsAppInfo
												.getString("approved_date"));
									} else {
										apprvershod.setDate(rsAppInfo
												.getString("rejected_date"));
									}
									comments = "";
									comments = rsAppInfo.getString("Comments");
									if (comments == "null") {
										apprvershod.setComments("");
									} else {
										apprvershod.setComments(rsAppInfo
												.getString("Comments"));
									}
								}

								listApprers.add(apprvershod);
								jk = 1;
							}

							catch (SQLException e1) {

								e1.printStackTrace();
							}

						}
					}

					if (!plantheadid.equalsIgnoreCase("")) {

						try {

							checkStatus = 1;
							ApprovalsForm apprvershod = new ApprovalsForm();
							apprvershod.setPriority("1");

							apprvershod.setEmployeeCode(plantheadid);
							apprvershod.setEmployeeName(plantheadname);

							String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
									+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
									+ reqId
									+ "' and it.LOCATION_ID='"
									+ EmpLoc(userID)
									+ "' AND "
									+ "all_r.Last_Approver='"
									+ plantheadid
									+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
									+ ITType
									+ "' and emp.PERNR=all_r.Last_Approver"
									+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

							ResultSet rsAppInfo = ad.selectQuery(recordStatus);
							if (rsAppInfo.next()) {
								apprvershod.setApproveStatus(rsAppInfo
										.getString("Req_Status"));
								String approveStatus = rsAppInfo
										.getString("Req_Status");
								if (approveStatus.equalsIgnoreCase("Approved")
										|| approveStatus
												.equalsIgnoreCase("Created")) {
									apprvershod.setDate(rsAppInfo
											.getString("approved_date"));
								} else {
									apprvershod.setDate(rsAppInfo
											.getString("rejected_date"));
								}
								comments = "";
								comments = rsAppInfo.getString("Comments");
								if (comments == "null") {
									apprvershod.setComments("");
								} else {
									apprvershod.setComments(rsAppInfo
											.getString("Comments"));
								}
							}

							listApprers.add(apprvershod);
							jk = 1;
						}

						catch (SQLException e1) {

							e1.printStackTrace();
						}

					}

					String getApprDetails = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
							+ empID
							+ "'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"
							+ ITType
							+ "' group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
					ResultSet rsApprDetails = ad.selectQuery(getApprDetails);
					try {
						while (rsApprDetails.next()) {

							checkStatus = 1;
							ApprovalsForm apprvers = new ApprovalsForm();
							apprvers.setPriority(rsApprDetails
									.getString("Priority"));

							apprvers.setPriority(rsApprDetails
									.getString("Priority"));
							if (jk == 1) {

								apprvers.setPriority(Integer.toString(listApprers
										.size() + 1));
							}
							apprvers.setEmployeeCode(rsApprDetails
									.getString("Approver_Id"));
							String empCode = rsApprDetails.getString("Approver_Id");

							String recordStatus = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
									+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
									+ reqId
									+ "' "
									+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
									+ empID
									+ "')) AND all_r.Last_Approver='"
									+ empCode
									+ "' and it.Approver_Id=all_r.Last_Approver  and all_r.Req_Type='IT Request' and "
									+ "it.Req_Type='"
									+ ITType
									+ "' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
									+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";

							ResultSet rsAppInfo = ad.selectQuery(recordStatus);
							if (rsAppInfo.next()) {
								if (rsAppInfo.getInt("Priority") == 1) {
									chkdate = rsAppInfo.getString("approved_date");
									chkdate1 = rsAppInfo.getString("rejected_date");
								}
								apprvers.setApproveStatus(rsAppInfo
										.getString("Req_Status"));
								String approveStatus = rsAppInfo
										.getString("Req_Status");
								if (approveStatus.equalsIgnoreCase("Approved")
										|| approveStatus
												.equalsIgnoreCase("Completed")) {
									apprvers.setDate(rsAppInfo
											.getString("approved_date"));
								} else {
									apprvers.setDate(rsAppInfo
											.getString("rejected_date"));
								}
								comments = "";
								comments = rsAppInfo.getString("Comments");
								if (comments == "null") {
									apprvers.setComments("");
								} else {
									apprvers.setComments(rsAppInfo
											.getString("Comments"));
								}
							}
							apprvers.setEmployeeName(rsApprDetails
									.getString("EMP_FULLNAME"));

							listApprers.add(apprvers);

						}
						//IT ENGINEER DETAIlS
						
						
						String getApprDetails1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' and it.Priority=1    group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
						ResultSet rsApprDetails1=ad.selectQuery(getApprDetails1);
						
							while(rsApprDetails1.next())
							{
								checkStatus=1;
								ApprovalsForm apprvers=new ApprovalsForm();
								apprvers.setPriority(Integer.toString(listApprers.size()+1));
								
								apprvers.setEmployeeCode(rsApprDetails1.getString("Approver_Id"));
								String empCode1=rsApprDetails1.getString("Approver_Id");
								
								String recordStatus1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
										+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
										+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode1+"' and it.Approver_Id=all_r.Last_Approver and all_r.Req_Type='IT Request' and "
										+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
										+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
								
								ResultSet rsAppInfo1=ad.selectQuery(recordStatus1);
								if(rsAppInfo1.next())
								{
									
									String approveStatus=rsAppInfo1.getString("Req_Status");
									if(approveStatus.equalsIgnoreCase("Approved"))
									{
										recordStatus1=recordStatus1+" order by all_r.approved_date desc ";
										ResultSet rsAppInfo2=ad.selectQuery(recordStatus1);
										if(rsAppInfo2.next())
										{
											if(!chkdate.equalsIgnoreCase(rsAppInfo2.getString("approved_date")))
											{
												apprvers.setApproveStatus("Closed");
											apprvers.setDate(rsAppInfo2.getString("approved_date"));
											
										
										
										 comments="";
										comments=rsAppInfo2.getString("Comments");
										if(comments=="null" )
										{
											apprvers.setComments("");
										}else{
											apprvers.setComments(rsAppInfo2.getString("Comments"));
										}
										}
										}
									}else{
										
										recordStatus1=recordStatus1+" order by all_r.rejected_date desc ";
										ResultSet rsAppInfo3=ad.selectQuery(recordStatus1);
										if(rsAppInfo3.next())
										{
											if(!chkdate1.equalsIgnoreCase(rsAppInfo3.getString("rejected_date")))
											{
											apprvers.setDate(rsAppInfo3.getString("rejected_date"));
											}
											
										
										 comments="";
										comments=rsAppInfo3.getString("Comments");
										if(comments=="null" )
										{
											apprvers.setComments("");
										}else{
											apprvers.setComments(rsAppInfo3.getString("Comments"));
										}
										}
									}
									
								}
								apprvers.setEmployeeName(rsApprDetails1.getString("EMP_FULLNAME"));
						
							listApprers.add(apprvers);
							}
						
						request.setAttribute("approverDetails", listApprers);
					
				} 
				
					catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				if(approverPriority==1)
				{
					forwardType="externaldrivesENG";
				}
				else{
				forwardType="externaldrivesAppr";
				}
			}
			
			if(ITType.equalsIgnoreCase("FTP Access Request"))
			{
				LinkedList ftp=new LinkedList();
				String empno=userID;
				
				String data="select emp.PERNR,emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE " +
						"from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"+empID+"' and " +
						"dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";	
				ResultSet rs= ad.selectQuery(data);
				try {
					while(rs.next())
					{
						
						help.setRequestername(rs.getString("EMP_FULLNAME"));
						help.setRequesterdepartment(rs.getString("DPTSTXT"));
						help.setRequesterdesignation(rs.getString("DSGSTXT"));
						help.setExtno(rs.getString("TEL_EXTENS"));
						help.setIpPhoneno(rs.getString("IP_PHONE"));
						help.setLocation(rs.getString("LOCATION_CODE"));
						
						help.setEmpno(rs.getString("PERNR"));
						
					}
				} catch (SQLException e) {
				  e.printStackTrace();
				}
				String requester="";
				String data1=" select * from IT_HELPDESK where Req_No="+reqId+"";	
				ResultSet rs1= ad.selectQuery(data1);
				try {
					while(rs1.next())
					{
						requester=rs1.getString("Emp_No");
						help.setAdloginname(rs1.getString("ADLoginName"));
						help.setAssetvalue(rs1.getString("Asset_Details"));
						help.setRequiredfoldername(rs1.getString("Req_Folder_access"));
						help.setServer(rs1.getString("Server_Address"));
						help.setAccesstype(rs1.getString("Access_type"));
						help.setFrmdurationofaccess(rs1.getString("FrmRequiredDurationofAccess"));
						help.setTodurationofaccess(rs1.getString("ToRequiredDurationofAccess"));
						help.setReason(rs1.getString("Reason"));
						help.setHostname(rs1.getString("HostName"));
						help.setIPNumber(rs1.getString("IPAddress"));
						help.setUsername(rs1.getString("UserName"));
						help.setPassword(rs1.getString("Password"));
						help.setReqPriority(rs1.getString("Req_Priority"));
						help.setDurationofaccess(rs1.getString("RequiredDurationofAccess"));
						
						String rmk=rs1.getString("Remarks");
						if(rmk!=null)
						{
							help.setRemarks(rs1.getString("Remarks"));
							request.setAttribute("Remark", "Remark");
						}
						
					}
				} catch (SQLException e) {
					  e.printStackTrace();
					}
				ftp.add(help);
				request.setAttribute("ftp", ftp);
				
				//Approver Details
				  checkStatus=0;
				LinkedList listApprers=new LinkedList();
				int jk=0;
				//HOD

				 hodpresent=0;
				 hodpresentinIt=0;
				 HODPresentId="";
				 HODPresentname="";
				 itengineerid="";
				 itengineername="";
				 HOD="";
					pendingApprovers="";
				
				 //chk if he has Hod
				 String chkhod="select count(*) from ESS_Approvers where employeeNumber='"+empID+"'  ";
				 ResultSet rs10= ad.selectQuery(chkhod);
				 try {
					while(rs10.next())
					 {
						 hodpresent=rs10.getInt(1);
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				
				//get hod details
				
			
				if(hodpresent>0){
				String gethod="select ess.ApproverId,emp.EMP_FULLNAME from ESS_Approvers  as ess,emp_official_info as emp  " +
						" where employeeNumber='"+empID+"'  and essType='Leave' and emp.PERNR=ess.ApproverId ";
				 ResultSet rs2= ad.selectQuery(gethod);
				 
				 try {
					if(rs2.next())
					 {
					
						HODPresentId=rs2.getString("ApproverId");
						HODPresentname=rs2.getString("EMP_FULLNAME");
					 }
				} catch (SQLException e) {
					
					e.printStackTrace();
				}
				}
				
				//chk if he is present in It approver
				 String chkhodinit="select count(*) from IT_Approvers where Approver_ID='"+HODPresentId+"' and Req_Type = '"+ITType+"'  and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))";
				 ResultSet rs11= ad.selectQuery(chkhodinit);
				 try {
					while(rs11.next())
					 {
						hodpresentinIt=rs11.getInt(1);
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				 
				// Plant head
					String plantheadid = "";
					String plantheadname = "";
					String plantheaddep = "";
					String plantheaddesg = "";
					String a="";
					String userx="select loc.LOCID from Location as loc,emp_official_info as emp where loc.LOCATION_CODE=emp.LOCID and emp.PERNR='"+requester+"' ";
					ResultSet userrs=ad.selectQuery(userx);
					try {
						while(userrs.next())
						 {				
							a=userrs.getString("LOCID");
						 }
					} catch (SQLException e2) {
						// TODO Auto-generated catch block
						e2.printStackTrace();
					}
					if (!a.equalsIgnoreCase("16")) {
						String plant = "select pl.Plant,pl.PERNR,emp.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from PLANT_HEAD pl,emp_official_info emp,DEPARTMENT dep,DESIGNATION desg where Plant=(select LOCATION_CODE from Location where LOCID='"
								+ a
								+ "') and emp.PERNR=pl.PERNR and dep.DPTID=emp.DPTID and desg.DSGID=emp.DSGID";
						ResultSet pl = ad.selectQuery(plant);
						try {
							while (pl.next()) {
								plantheadid = pl.getString("pernr");
								plantheadname = pl.getString("EMP_FULLNAME");
								plantheaddep = pl.getString("DPTSTXT");
								plantheaddesg = pl.getString("DSGSTXT");
							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					if (plantheadid.equalsIgnoreCase("")) {

						if (hodpresent > 0 && hodpresentinIt == 0) {

							try {

								checkStatus = 1;
								ApprovalsForm apprvershod = new ApprovalsForm();
								apprvershod.setPriority("1");

								apprvershod.setEmployeeCode(HODPresentId);
								apprvershod.setEmployeeName(HODPresentname);

								String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
										+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
										+ reqId
										+ "' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
										+ empID
										+ "')) AND "
										+ "all_r.Last_Approver='"
										+ HODPresentId
										+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
										+ ITType
										+ "' and emp.PERNR=all_r.Last_Approver"
										+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

								ResultSet rsAppInfo = ad.selectQuery(recordStatus);
								if (rsAppInfo.next()) {
									apprvershod.setApproveStatus(rsAppInfo
											.getString("Req_Status"));
									String approveStatus = rsAppInfo
											.getString("Req_Status");
									if (approveStatus.equalsIgnoreCase("Approved")
											|| approveStatus
													.equalsIgnoreCase("Completed")) {
										apprvershod.setDate(rsAppInfo
												.getString("approved_date"));
									} else {
										apprvershod.setDate(rsAppInfo
												.getString("rejected_date"));
									}
									comments = "";
									comments = rsAppInfo.getString("Comments");
									if (comments == "null") {
										apprvershod.setComments("");
									} else {
										apprvershod.setComments(rsAppInfo
												.getString("Comments"));
									}
								}

								listApprers.add(apprvershod);
								jk = 1;
							}

							catch (SQLException e1) {

								e1.printStackTrace();
							}

						}
					}

					if (!plantheadid.equalsIgnoreCase("")) {

						try {

							checkStatus = 1;
							ApprovalsForm apprvershod = new ApprovalsForm();
							apprvershod.setPriority("1");

							apprvershod.setEmployeeCode(plantheadid);
							apprvershod.setEmployeeName(plantheadname);

							String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
									+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
									+ reqId
									+ "' and it.LOCATION_ID='"
									+ EmpLoc(userID)
									+ "' AND "
									+ "all_r.Last_Approver='"
									+ plantheadid
									+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
									+ ITType
									+ "' and emp.PERNR=all_r.Last_Approver"
									+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

							ResultSet rsAppInfo = ad.selectQuery(recordStatus);
							if (rsAppInfo.next()) {
								apprvershod.setApproveStatus(rsAppInfo
										.getString("Req_Status"));
								String approveStatus = rsAppInfo
										.getString("Req_Status");
								if (approveStatus.equalsIgnoreCase("Approved")
										|| approveStatus
												.equalsIgnoreCase("Created")) {
									apprvershod.setDate(rsAppInfo
											.getString("approved_date"));
								} else {
									apprvershod.setDate(rsAppInfo
											.getString("rejected_date"));
								}
								comments = "";
								comments = rsAppInfo.getString("Comments");
								if (comments == "null") {
									apprvershod.setComments("");
								} else {
									apprvershod.setComments(rsAppInfo
											.getString("Comments"));
								}
							}

							listApprers.add(apprvershod);
							jk = 1;
						}

						catch (SQLException e1) {

							e1.printStackTrace();
						}

					}

					String getApprDetails = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
							+ empID
							+ "'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"
							+ ITType
							+ "' group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
					ResultSet rsApprDetails = ad.selectQuery(getApprDetails);
					try {
						while (rsApprDetails.next()) {

							checkStatus = 1;
							ApprovalsForm apprvers = new ApprovalsForm();
							apprvers.setPriority(rsApprDetails
									.getString("Priority"));

							apprvers.setPriority(rsApprDetails
									.getString("Priority"));
							if (jk == 1) {

								apprvers.setPriority(Integer.toString(listApprers
										.size() + 1));
							}
							apprvers.setEmployeeCode(rsApprDetails
									.getString("Approver_Id"));
							String empCode = rsApprDetails.getString("Approver_Id");

							String recordStatus = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
									+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
									+ reqId
									+ "' "
									+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
									+ empID
									+ "')) AND all_r.Last_Approver='"
									+ empCode
									+ "' and it.Approver_Id=all_r.Last_Approver  and all_r.Req_Type='IT Request' and "
									+ "it.Req_Type='"
									+ ITType
									+ "' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
									+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";

							ResultSet rsAppInfo = ad.selectQuery(recordStatus);
							if (rsAppInfo.next()) {
								if (rsAppInfo.getInt("Priority") == 1) {
									chkdate = rsAppInfo.getString("approved_date");
									chkdate1 = rsAppInfo.getString("rejected_date");
								}
								apprvers.setApproveStatus(rsAppInfo
										.getString("Req_Status"));
								String approveStatus = rsAppInfo
										.getString("Req_Status");
								if (approveStatus.equalsIgnoreCase("Approved")
										|| approveStatus
												.equalsIgnoreCase("Completed")) {
									apprvers.setDate(rsAppInfo
											.getString("approved_date"));
								} else {
									apprvers.setDate(rsAppInfo
											.getString("rejected_date"));
								}
								comments = "";
								comments = rsAppInfo.getString("Comments");
								if (comments == "null") {
									apprvers.setComments("");
								} else {
									apprvers.setComments(rsAppInfo
											.getString("Comments"));
								}
							}
							apprvers.setEmployeeName(rsApprDetails
									.getString("EMP_FULLNAME"));

							listApprers.add(apprvers);

						}
						//IT ENGINEER DETAIlS
						
						
						String getApprDetails1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' and it.Priority=1    group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
						ResultSet rsApprDetails1=ad.selectQuery(getApprDetails1);
						
							while(rsApprDetails1.next())
							{
								checkStatus=1;
								ApprovalsForm apprvers=new ApprovalsForm();
								apprvers.setPriority(Integer.toString(listApprers.size()+1));
								
								apprvers.setEmployeeCode(rsApprDetails1.getString("Approver_Id"));
								String empCode1=rsApprDetails1.getString("Approver_Id");
								
								String recordStatus1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
										+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
										+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode1+"' and it.Approver_Id=all_r.Last_Approver and all_r.Req_Type='IT Request' and "
										+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
										+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
								
								ResultSet rsAppInfo1=ad.selectQuery(recordStatus1);
								if(rsAppInfo1.next())
								{
									
									String approveStatus=rsAppInfo1.getString("Req_Status");
									if(approveStatus.equalsIgnoreCase("Approved"))
									{
										recordStatus1=recordStatus1+" order by all_r.approved_date desc ";
										ResultSet rsAppInfo2=ad.selectQuery(recordStatus1);
										if(rsAppInfo2.next())
										{
											if(!chkdate.equalsIgnoreCase(rsAppInfo2.getString("approved_date")))
											{
												apprvers.setApproveStatus("Closed");
											apprvers.setDate(rsAppInfo2.getString("approved_date"));
											
										
										
										 comments="";
										comments=rsAppInfo2.getString("Comments");
										if(comments=="null" )
										{
											apprvers.setComments("");
										}else{
											apprvers.setComments(rsAppInfo2.getString("Comments"));
										}
										}
										}
									}else{
										
										recordStatus1=recordStatus1+" order by all_r.rejected_date desc ";
										ResultSet rsAppInfo3=ad.selectQuery(recordStatus1);
										if(rsAppInfo3.next())
										{
											if(!chkdate1.equalsIgnoreCase(rsAppInfo3.getString("rejected_date")))
											{
											apprvers.setDate(rsAppInfo3.getString("rejected_date"));
											}
											
										
										 comments="";
										comments=rsAppInfo3.getString("Comments");
										if(comments=="null" )
										{
											apprvers.setComments("");
										}else{
											apprvers.setComments(rsAppInfo3.getString("Comments"));
										}
										}
									}
									
								}
								apprvers.setEmployeeName(rsApprDetails1.getString("EMP_FULLNAME"));
						
							listApprers.add(apprvers);
							}
						
						request.setAttribute("approverDetails", listApprers);
					
				} 
				
					catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				if(approverPriority==1)
				{
					forwardType="ftpENG";
				}
				else{
				forwardType="ftpAppr";
				}
			}
			
			if(ITType.equalsIgnoreCase("File Server Access Request"))
			{
				LinkedList folder=new LinkedList();
				String empno=userID;
				
				String data="select emp.PERNR,emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE " +
						"from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"+empID+"' and " +
						"dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";	
				ResultSet rs= ad.selectQuery(data);
				try {
					while(rs.next())
					{
						
						help.setRequestername(rs.getString("EMP_FULLNAME"));
						help.setRequesterdepartment(rs.getString("DPTSTXT"));
						help.setRequesterdesignation(rs.getString("DSGSTXT"));
						help.setExtno(rs.getString("TEL_EXTENS"));
						help.setIpPhoneno(rs.getString("IP_PHONE"));
						help.setLocation(rs.getString("LOCATION_CODE"));
						
						help.setEmpno(rs.getString("PERNR"));
						
					}
				} catch (SQLException e) {
				  e.printStackTrace();
				}
				
				String requester="";
				String data1=" select * from IT_HELPDESK where Req_No="+reqId+"";	
				ResultSet rs1= ad.selectQuery(data1);
				try {
					while(rs1.next())
					{
						requester=rs1.getString("Emp_No");
						help.setFromlocationId(rs1.getString("From_Loc"));
						help.setAssetvalue(rs1.getString("Asset_Details"));
						help.setAdloginname(rs1.getString("ADLoginName"));
						help.setAccesstype(rs1.getString("Access_type"));
						help.setRequiredfoldername(rs1.getString("Req_Folder_access"));
						help.setServer(rs1.getString("Server_Address"));
						help.setReason(rs1.getString("Reason"));
						help.setHostname(rs1.getString("HostName"));
						help.setIPNumber(rs1.getString("IPAddress"));
						help.setReqPriority(rs1.getString("Req_Priority"));
						
						String rmk=rs1.getString("Remarks");
						if(rmk!=null)
						{
							help.setRemarks(rs1.getString("Remarks"));
							request.setAttribute("Remark", "Remark");
						}
					}
				} catch (SQLException e) {
					  e.printStackTrace();
					}
				
				
				ResultSet rs111 = ad.selectQuery("select LOCID," +
						"LOCNAME,location_code from location");
						ArrayList locationList=new ArrayList();
						ArrayList locationLabelList=new ArrayList();
							
						try {
							while(rs111.next()) {
								locationList.add(rs111.getString("location_code")+"-"+rs111.getString("LOCNAME"));
								locationLabelList.add(rs111.getString("location_code")+"-"+rs111.getString("LOCNAME"));
							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						help.setLocationIdList(locationList);
						help.setLocationLabelList(locationLabelList);
						
						ArrayList deparmentList=new ArrayList();
						ResultSet rs12 =ad.selectQuery("select DPTSTXT from department order by DPTSTXT");
						try {
							while(rs12.next()){
								
								deparmentList.add(rs12.getString("DPTSTXT"));
							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
					  		e.printStackTrace();
						}
						
						help.setDepartmentList(deparmentList);
				
				
				
				
				folder.add(help);
				request.setAttribute("folder", folder);
				
				//Approver Details
				  checkStatus=0;
				LinkedList listApprers=new LinkedList();
				int jk=0;
				//HOD

				 hodpresent=0;
				 hodpresentinIt=0;
				 HODPresentId="";
				 HODPresentname="";
				 itengineerid="";
				 itengineername="";
				 HOD="";
					pendingApprovers="";
				
				 //chk if he has Hod
				 String chkhod="select count(*) from ESS_Approvers where employeeNumber='"+empID+"'  ";
				 ResultSet rs10= ad.selectQuery(chkhod);
				 try {
					while(rs10.next())
					 {
						 hodpresent=rs10.getInt(1);
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				
				//get hod details
				
			
				if(hodpresent>0){
				String gethod="select ess.ApproverId,emp.EMP_FULLNAME from ESS_Approvers  as ess,emp_official_info as emp  " +
						" where employeeNumber='"+empID+"'  and essType='Leave' and emp.PERNR=ess.ApproverId ";
				 ResultSet rs2= ad.selectQuery(gethod);
				 
				 try {
					if(rs2.next())
					 {
					
						HODPresentId=rs2.getString("ApproverId");
						HODPresentname=rs2.getString("EMP_FULLNAME");
					 }
				} catch (SQLException e) {
					
					e.printStackTrace();
				}
				}
				
				//chk if he is present in It approver
				 String chkhodinit="select count(*) from IT_Approvers where Approver_ID='"+HODPresentId+"' and Req_Type = '"+ITType+"'  and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))";
				 ResultSet rs11= ad.selectQuery(chkhodinit);
				 try {
					while(rs11.next())
					 {
						hodpresentinIt=rs11.getInt(1);
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				 
				// Plant head
					String plantheadid = "";
					String plantheadname = "";
					String plantheaddep = "";
					String plantheaddesg = "";
					String a="";
					String userx="select loc.LOCID from Location as loc,emp_official_info as emp where loc.LOCATION_CODE=emp.LOCID and emp.PERNR='"+requester+"' ";
					ResultSet userrs=ad.selectQuery(userx);
					try {
						while(userrs.next())
						 {				
							a=userrs.getString("LOCID");
						 }
					} catch (SQLException e2) {
						// TODO Auto-generated catch block
						e2.printStackTrace();
					}
					if (!a.equalsIgnoreCase("16")) {
						String plant = "select pl.Plant,pl.PERNR,emp.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from PLANT_HEAD pl,emp_official_info emp,DEPARTMENT dep,DESIGNATION desg where Plant=(select LOCATION_CODE from Location where LOCID='"
								+ a
								+ "') and emp.PERNR=pl.PERNR and dep.DPTID=emp.DPTID and desg.DSGID=emp.DSGID";
						ResultSet pl = ad.selectQuery(plant);
						try {
							while (pl.next()) {
								plantheadid = pl.getString("pernr");
								plantheadname = pl.getString("EMP_FULLNAME");
								plantheaddep = pl.getString("DPTSTXT");
								plantheaddesg = pl.getString("DSGSTXT");
							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					if (plantheadid.equalsIgnoreCase("")) {

						if (hodpresent > 0 && hodpresentinIt == 0) {

							try {

								checkStatus = 1;
								ApprovalsForm apprvershod = new ApprovalsForm();
								apprvershod.setPriority("1");

								apprvershod.setEmployeeCode(HODPresentId);
								apprvershod.setEmployeeName(HODPresentname);

								String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
										+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
										+ reqId
										+ "' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
										+ empID
										+ "')) AND "
										+ "all_r.Last_Approver='"
										+ HODPresentId
										+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
										+ ITType
										+ "' and emp.PERNR=all_r.Last_Approver"
										+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

								ResultSet rsAppInfo = ad.selectQuery(recordStatus);
								if (rsAppInfo.next()) {
									apprvershod.setApproveStatus(rsAppInfo
											.getString("Req_Status"));
									String approveStatus = rsAppInfo
											.getString("Req_Status");
									if (approveStatus.equalsIgnoreCase("Approved")
											|| approveStatus
													.equalsIgnoreCase("Completed")) {
										apprvershod.setDate(rsAppInfo
												.getString("approved_date"));
									} else {
										apprvershod.setDate(rsAppInfo
												.getString("rejected_date"));
									}
									comments = "";
									comments = rsAppInfo.getString("Comments");
									if (comments == "null") {
										apprvershod.setComments("");
									} else {
										apprvershod.setComments(rsAppInfo
												.getString("Comments"));
									}
								}

								listApprers.add(apprvershod);
								jk = 1;
							}

							catch (SQLException e1) {

								e1.printStackTrace();
							}

						}
					}

					if (!plantheadid.equalsIgnoreCase("")) {

						try {

							checkStatus = 1;
							ApprovalsForm apprvershod = new ApprovalsForm();
							apprvershod.setPriority("1");

							apprvershod.setEmployeeCode(plantheadid);
							apprvershod.setEmployeeName(plantheadname);

							String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
									+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
									+ reqId
									+ "' and it.LOCATION_ID='"
									+ EmpLoc(userID)
									+ "' AND "
									+ "all_r.Last_Approver='"
									+ plantheadid
									+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
									+ ITType
									+ "' and emp.PERNR=all_r.Last_Approver"
									+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

							ResultSet rsAppInfo = ad.selectQuery(recordStatus);
							if (rsAppInfo.next()) {
								apprvershod.setApproveStatus(rsAppInfo
										.getString("Req_Status"));
								String approveStatus = rsAppInfo
										.getString("Req_Status");
								if (approveStatus.equalsIgnoreCase("Approved")
										|| approveStatus
												.equalsIgnoreCase("Created")) {
									apprvershod.setDate(rsAppInfo
											.getString("approved_date"));
								} else {
									apprvershod.setDate(rsAppInfo
											.getString("rejected_date"));
								}
								comments = "";
								comments = rsAppInfo.getString("Comments");
								if (comments == "null") {
									apprvershod.setComments("");
								} else {
									apprvershod.setComments(rsAppInfo
											.getString("Comments"));
								}
							}

							listApprers.add(apprvershod);
							jk = 1;
						}

						catch (SQLException e1) {

							e1.printStackTrace();
						}

					}

					String getApprDetails = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
							+ empID
							+ "'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"
							+ ITType
							+ "' group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
					ResultSet rsApprDetails = ad.selectQuery(getApprDetails);
					try {
						while (rsApprDetails.next()) {

							checkStatus = 1;
							ApprovalsForm apprvers = new ApprovalsForm();
							apprvers.setPriority(rsApprDetails
									.getString("Priority"));

							apprvers.setPriority(rsApprDetails
									.getString("Priority"));
							if (jk == 1) {

								apprvers.setPriority(Integer.toString(listApprers
										.size() + 1));
							}
							apprvers.setEmployeeCode(rsApprDetails
									.getString("Approver_Id"));
							String empCode = rsApprDetails.getString("Approver_Id");

							String recordStatus = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
									+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
									+ reqId
									+ "' "
									+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
									+ empID
									+ "')) AND all_r.Last_Approver='"
									+ empCode
									+ "' and it.Approver_Id=all_r.Last_Approver  and all_r.Req_Type='IT Request' and "
									+ "it.Req_Type='"
									+ ITType
									+ "' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
									+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";

							ResultSet rsAppInfo = ad.selectQuery(recordStatus);
							if (rsAppInfo.next()) {
								if (rsAppInfo.getInt("Priority") == 1) {
									chkdate = rsAppInfo.getString("approved_date");
									chkdate1 = rsAppInfo.getString("rejected_date");
								}
								apprvers.setApproveStatus(rsAppInfo
										.getString("Req_Status"));
								String approveStatus = rsAppInfo
										.getString("Req_Status");
								if (approveStatus.equalsIgnoreCase("Approved")
										|| approveStatus
												.equalsIgnoreCase("Completed")) {
									apprvers.setDate(rsAppInfo
											.getString("approved_date"));
								} else {
									apprvers.setDate(rsAppInfo
											.getString("rejected_date"));
								}
								comments = "";
								comments = rsAppInfo.getString("Comments");
								if (comments == "null") {
									apprvers.setComments("");
								} else {
									apprvers.setComments(rsAppInfo
											.getString("Comments"));
								}
							}
							apprvers.setEmployeeName(rsApprDetails
									.getString("EMP_FULLNAME"));

							listApprers.add(apprvers);

						}
						//IT ENGINEER DETAIlS
						
						
						String getApprDetails1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' and it.Priority=1    group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
						ResultSet rsApprDetails1=ad.selectQuery(getApprDetails1);
						
							while(rsApprDetails1.next())
							{
								checkStatus=1;
								ApprovalsForm apprvers=new ApprovalsForm();
								apprvers.setPriority(Integer.toString(listApprers.size()+1));
								
								apprvers.setEmployeeCode(rsApprDetails1.getString("Approver_Id"));
								String empCode1=rsApprDetails1.getString("Approver_Id");
								
								String recordStatus1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
										+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
										+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode1+"' and it.Approver_Id=all_r.Last_Approver and all_r.Req_Type='IT Request' and "
										+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
										+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
								
								ResultSet rsAppInfo1=ad.selectQuery(recordStatus1);
								if(rsAppInfo1.next())
								{
									
									String approveStatus=rsAppInfo1.getString("Req_Status");
									if(approveStatus.equalsIgnoreCase("Approved"))
									{
										recordStatus1=recordStatus1+" order by all_r.approved_date desc ";
										ResultSet rsAppInfo2=ad.selectQuery(recordStatus1);
										if(rsAppInfo2.next())
										{
											if(!chkdate.equalsIgnoreCase(rsAppInfo2.getString("approved_date")))
											{
												apprvers.setApproveStatus("Closed");
											apprvers.setDate(rsAppInfo2.getString("approved_date"));
											
										
										
										 comments="";
										comments=rsAppInfo2.getString("Comments");
										if(comments=="null" )
										{
											apprvers.setComments("");
										}else{
											apprvers.setComments(rsAppInfo2.getString("Comments"));
										}
										}
										}
									}else{
										
										recordStatus1=recordStatus1+" order by all_r.rejected_date desc ";
										ResultSet rsAppInfo3=ad.selectQuery(recordStatus1);
										if(rsAppInfo3.next())
										{
											if(!chkdate1.equalsIgnoreCase(rsAppInfo3.getString("rejected_date")))
											{
											apprvers.setDate(rsAppInfo3.getString("rejected_date"));
											}
											
										
										 comments="";
										comments=rsAppInfo3.getString("Comments");
										if(comments=="null" )
										{
											apprvers.setComments("");
										}else{
											apprvers.setComments(rsAppInfo3.getString("Comments"));
										}
										}
									}
									
								}
								apprvers.setEmployeeName(rsApprDetails1.getString("EMP_FULLNAME"));
						
							listApprers.add(apprvers);
							}
						
						request.setAttribute("approverDetails", listApprers);
					
				} 
				
					catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				if(approverPriority==1)
				{
					forwardType="folderENG";
				}
				else{
				forwardType="folderAppr";
				}
			}
		
		
	 
			
	
		
		
		return mapping.findForward("ITmaildetails");
		
	}
	
	public ActionForward approveMailPermissionRequest(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ApprovalsForm approvalsForm = (ApprovalsForm) form;
		String userID=request.getParameter("userID");
		String reqId=request.getParameter("reqId");
		String status=request.getParameter("status");
		NewsandMediaDao ad=new NewsandMediaDao();
		String empID="";
		String submit_date="";
		String c[] = null;
		String type="";
		String swipetype="";
		String inTime="";
		String outTime="";
		String manualdate="";
		Date dNow = new Date( );
		 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS");
			String dateNow = ft.format(dNow);
			boolean permissionStatus=true;
			   
			   String checkRecordStatus="select * from All_Request where Req_Type='Permission' and Req_Id='"+reqId+"' and (Pending_Approver='"+userID+"' or Approved_Persons='"+userID+"')";
				ResultSet rsLvStatus=ad.selectQuery(checkRecordStatus);
				try{
				while(rsLvStatus.next())
				{
					String lvStatus=rsLvStatus.getString("Req_Status");
					if(lvStatus.equalsIgnoreCase("Approved"))
					{
						status="Approve";
						permissionStatus=false;
						approvalsForm.setMessage2("");
				   		approvalsForm.setMessage("This request has already been approved.");
					}
					if(lvStatus.equalsIgnoreCase("Rejected"))
					{
						status="Reject";
						permissionStatus=false;
						approvalsForm.setMessage2("");
				   		approvalsForm.setMessage("This request has already been rejected.");
					}
					
					if(lvStatus.equalsIgnoreCase("Self Cancelled"))
					{
						status="Self Cancelled";
						permissionStatus=false;
						approvalsForm.setMessage2("");
				   		approvalsForm.setMessage("This request has already been Self Cancelled.");
					}
					
				}
				}catch (Exception e) {
					e.printStackTrace();
				}		
			if(permissionStatus==true){	
			
			
   	if(status.equalsIgnoreCase("Approve"))
   	{
   		int recordCount=0;
   		try{
   	String checkRecord="select count(*) from All_Request where Req_Type='Permission' and Req_Id='"+reqId+"' and Req_Status='Approved' and (Pending_Approver='"+userID+"' or Approved_Persons='"+userID+"')";
   	ResultSet rsChcek=ad.selectQuery(checkRecord);
   	while(rsChcek.next())
   	{
   		recordCount=rsChcek.getInt(1);
   		approvalsForm.setMessage("");
   		if(recordCount!=0)
   		approvalsForm.setMessage2("This request has already been approved.");
   	}
   	if(recordCount==0)
   	{
   		boolean existStatus=false;
   		int priorityCout=0;
		int totalApproverCount=0;
		String dataFlowType=""; 
		String getPermissionDetails="select left(startTime,5)+' '+right(startTime,2) as startTime1,left(endTime,5)+' '+right(endTime,2) as endTime1,* from Permission_details where request_no='"+reqId+"'"; 
		ResultSet rsgetPermission=ad.selectQuery(getPermissionDetails);
		while(rsgetPermission.next())
		{
			empID=rsgetPermission.getString("user_id");
			submit_date=rsgetPermission.getString("date");
			manualdate=rsgetPermission.getString("date");
			String a[]=submit_date.split("-");
	
			
			c=submit_date.split("-");
			submit_date=a[2]+"/"+a[1]+"/"+a[0];
			type = rsgetPermission.getString("type");
			inTime =rsgetPermission.getString("startTime1");
			 swipetype=rsgetPermission.getString("swipe_type");
			/*outTime=rsgetPermission.getString("endTime1");*/
			
		}
		String checkESSApproverList="select count(*) from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave'";
		ResultSet rsCheckInEss=ad.selectQuery(checkESSApproverList);
		while(rsCheckInEss.next())
		{
			int number=rsCheckInEss.getInt(1);
			totalApproverCount=rsCheckInEss.getInt(1);
			if(number==0)
			{
				existStatus=false;
			}else{
				existStatus=true;
			}
		}
		if(existStatus==true){
			String getDataFlowType="select * from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave' ";
			ResultSet rsDataFlowType=ad.selectQuery(getDataFlowType);
			while(rsDataFlowType.next())
			{
				dataFlowType=rsDataFlowType.getString("reqType");
			}
			if(dataFlowType.equalsIgnoreCase("sequential"))
			{
				int approverPriority=0;
				String approver="";
				String papprover1="";
				String papprover2="";
				
				String getApprPriority="select * from ESS_Approvers where employeeNumber='"+empID+"' and (ApproverId='"+userID+"' or parallel_approver1='"+userID+"' or parallel_approver2='"+userID+"') and essType='Leave'";
				ResultSet rsApprPriority=ad.selectQuery(getApprPriority);
				if(rsApprPriority.next())
				{
					approverPriority=rsApprPriority.getInt("Priority");
					approver=rsApprPriority.getString("ApproverId");
					papprover1=rsApprPriority.getString("Parallel_Approver1");
					papprover2=rsApprPriority.getString("Parallel_Approver2");
				}
				
				
				
				
			    int count =0 ;
				String sj="";
			    if(!approver.equalsIgnoreCase(""))
				 sj = "select case when count(*) >1 then 1 else count(*) end from ESS_CANCEL_APPR where Location ='"+EmpLoc(empID)+"' and (hr_no = '"+approver+"' or  hr_no = '"+papprover1+"' or  hr_no = '"+papprover2+"')   ";
			    else
			    	 sj = "select case when count(*) >1 then 1 else count(*) end from ESS_CANCEL_APPR where Location ='"+EmpLoc(empID)+"' and hr_no = '"+userID+"'   ";
			    	
			   
			    ResultSet rsk = ad.selectQuery(sj);
			    if(rsk.next())
			    {
			    	count = rsk.getInt(1);
			    }
				
			    
			    
			    	
			    	
			    
			    if(count == 1 && approverPriority>=0)
			    {

			    	
			    	
			    	
			    	String updateSql= " update All_Request set  actual_approver ='"+userID+"', Approved_Persons=pending_approver, Last_approver=pending_approver,Pending_approver='',Comments=''," +
	                         		  " approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' and Pending_approver in (select hr_no from ESS_CANCEL_APPR where Location ='"+EmpLoc(empID)+"')"
	                         		  		+ " and Req_Type='Permission' ";
					int upd=ad.SqlExecuteUpdate(updateSql);
					
					
					String updateSql1= "update Permission_details set Last_approver='"+userID+"',Pending_approver='',Approver_Status='1',approved_date='"+dateNow+"',rejected_date='' where request_no='"+reqId+"'";
					ad.SqlExecuteUpdate(updateSql1);
					
					if(!type.equalsIgnoreCase("Permission"))
					{
					
					///insert into manula entry
					String manualswipe="";
					String manualtype="";
					
					if(swipetype.equalsIgnoreCase("In"))
					{
						manualswipe="I";
					}
					else
					{
						manualswipe="O";
					}
					
					if(type.equalsIgnoreCase("late Coming"))
					{
						manualtype="Late";
					}
					else
					{
						manualtype=type;
					}
					
					String up="update EMP_MANUAL_SWIPE set Status_Flag=0 where pernr='"+empID+"' and Start_date='"+manualdate+"' and In_Out='"+manualswipe+"'";
				    int s1d= ad.SqlExecuteUpdate(up);
				    
				    String s ="insert into EMP_MANUAL_SWIPE(Pernr,Start_date,In_Out,Start,Lost_Entry_Reason_Type,Remarks,Date,Time,Username,Created_date,Status_Flag) "
				    		+ "values('"+empID+"','"+manualdate+"', '"+manualswipe+"','"+getrailwaytime(inTime)+"', '"+manualtype+"','User Request',getdate(),getdate(),'"+userID+"',getdate(),'1')";
					
					int k = ad.SqlExecuteUpdate(s);
					
					String time= "";
					String time_Status="";
					if(swipetype .equalsIgnoreCase("In"))
					{
						
						
						time = "update EMP_IN_OUT set  day"+Integer.parseInt(c[2])+" ='"+getrailwaytime(inTime)+"' where year ='"+Integer.parseInt(c[0])+"'  "
					    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"' and in_out = 'I' ";
							 int s1 = ad.SqlExecuteUpdate(time);
							 
					if(type.equalsIgnoreCase("late") || type.equalsIgnoreCase("Missing") || type.equalsIgnoreCase("Forgot Swipe"))
					{
						
							 
						time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" ='PP'+RIGHT(day"+Integer.parseInt(c[2])+",2) where year ='"+Integer.parseInt(c[0])+"'  "
							    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
									 int s2 = ad.SqlExecuteUpdate(time_Status);	 
						
					}
					if(type.equalsIgnoreCase("early")|| type.equalsIgnoreCase("Personal"))
					{
						
					    
					    time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" ='PM'+RIGHT(day"+Integer.parseInt(c[2])+",2) where year ='"+Integer.parseInt(c[0])+"'  "
					    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
							 int s2 = ad.SqlExecuteUpdate(time_Status);
					}
					}
					else
						
					{
						
						time = "update EMP_IN_OUT set  day"+Integer.parseInt(c[2])+" ='"+getrailwaytime(inTime)+"' where year ='"+Integer.parseInt(c[0])+"'  "
					    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"' and in_out = 'O' ";
							 int s1 = ad.SqlExecuteUpdate(time);
						

						if(type.equalsIgnoreCase("late") || type.equalsIgnoreCase("Missing") || type.equalsIgnoreCase("Forgot Swipe"))
						{
							
								 
							time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" =LEFT(day"+Integer.parseInt(c[2])+",2)+'PP' where year ='"+Integer.parseInt(c[0])+"'  "
								    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
										 int s2 = ad.SqlExecuteUpdate(time_Status);	 
							
						}
						if(type.equalsIgnoreCase("early")|| type.equalsIgnoreCase("Personal"))
						{
							
						    
						    time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" =LEFT(day"+Integer.parseInt(c[2])+",2)+'PM' where year ='"+Integer.parseInt(c[0])+"'  "
						    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
								 int s2 = ad.SqlExecuteUpdate(time_Status);
						}
						
					}
					}
			    
					existStatus=false;
			    }
			    
			  
			    if(count == 0 && approverPriority>0)
				    
			    {	
			    	
			    	if(totalApproverCount==approverPriority)
					{
				
					//last approver
					
					String nextApprover="";
					String getNextApprDetails="select top 1 * from ESS_CANCEL_APPR where Location ='"+EmpLoc(empID)+"' ";
		            ResultSet rsNextApprDetails=ad.selectQuery(getNextApprDetails);
		            while(rsNextApprDetails.next())
		            {
		            	nextApprover=rsNextApprDetails.getString("hr_no");
		            }
					existStatus=false;
					
					/* SimpleDateFormat ft1 = new SimpleDateFormat ("dd/MM/yyyy");
					 String submitDate = ft1.format(dNow);*/
					
					//check cancelled Record
					String updateSql= " update All_Request set  actual_approver ='"+userID+"', Approved_Persons=pending_approver, Last_approver=pending_approver,Pending_approver='',Comments=''," +
                   		  " approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' and Pending_approver='"+userID+"' "
                   		  		+ " and Req_Type='Permission'";
			int upd=ad.SqlExecuteUpdate(updateSql);
	                
	                String as="select * from ess_cancel_appr where Location='"+EmpLoc(empID)+"' ";
	        		ResultSet ads=ad.selectQuery(as);
	        		try {
	        			while(ads.next())
	        			{		
	        			
	        			String saveRecReq="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments) values (";
	    			saveRecReq = saveRecReq + "'"+reqId+"','Permission','"+empID+"','"+submit_date+"','Pending','','"+ads.getString("HR_NO")+"','','"+userID+"','')";
	        			int i=ad.SqlExecuteUpdate(saveRecReq);
	        			
	        			EMailer email = new EMailer();
	    				
	    				String approvermail="";
	    				
	    				int	ij = email.sendMailToNextSequentialApprover(request, approvermail,reqId, "Permission",ads.getString("HR_NO"),empID);
	        			 
	        			}
	        		} catch (SQLException e) {
	        			// TODO Auto-generated catch block
	        			e.printStackTrace();
	        		}
				
				 
				
			    }
			    	else
					{
						String nextApprover="";
						String getNextApprDetails="select ApproverId from ESS_Approvers where employeeNumber='"+empID+"' and Priority='"+(approverPriority+1)+"' and essType='Leave'";
			            ResultSet rsNextApprDetails=ad.selectQuery(getNextApprDetails);
			            while(rsNextApprDetails.next())
			            {
			            	nextApprover=rsNextApprDetails.getString("ApproverId");
			            }
			            
			            
			         	
				    	String updateSql= " update All_Request set  actual_approver ='"+userID+"', Approved_Persons=pending_approver, Last_approver=pending_approver,Pending_approver='',Comments=''," +
		                         		  " approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' and Pending_approver='"+userID+"' "
		                         		  		+ " and Req_Type='Permission'";
						int upd=ad.SqlExecuteUpdate(updateSql);
			            
			            String saveRecReq="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments) values (";
		    			saveRecReq = saveRecReq + "'"+reqId+"','Permission','"+empID+"','"+submit_date+"','Pending','','"+nextApprover+"','','"+userID+"','')";
		        			int i=ad.SqlExecuteUpdate(saveRecReq);
		        			
		        			EMailer email = new EMailer();
		    				
		    				String approvermail="";
		    				
		    				int	ij = email.sendMailToNextSequentialApprover(request, approvermail,reqId, "Permission",nextApprover,empID);
		        			 
		    				existStatus=false;
					}
			    }
				
			
		}
			if(dataFlowType.equalsIgnoreCase("parallel"))
			{
				

				int approverPriority=0;
				String approver="";
				String papprover1="";
				String papprover2="";
				
				String getApprPriority="select * from ESS_Approvers where employeeNumber='"+empID+"' and (ApproverId='"+userID+"' or parallel_approver1='"+userID+"' or parallel_approver2='"+userID+"') and essType='Leave' and priority=1";
				ResultSet rsApprPriority=ad.selectQuery(getApprPriority);
				if(rsApprPriority.next())
				{
					approverPriority=rsApprPriority.getInt("Priority");
					approver=rsApprPriority.getString("ApproverId");
					papprover1=rsApprPriority.getString("Parallel_Approver1");
					papprover2=rsApprPriority.getString("Parallel_Approver2");
				}
				
				
			    int count =0 ;
				String sj="";
			    if(!approver.equalsIgnoreCase(""))
				 sj = "select case when count(*) >1 then 1 else count(*) end from ESS_CANCEL_APPR where Location ='"+EmpLoc(empID)+"' and (hr_no = '"+approver+"' or  hr_no = '"+papprover1+"' or  hr_no = '"+papprover2+"')   ";
			    else
			    	 sj = "select case when count(*) >1 then 1 else count(*) end from ESS_CANCEL_APPR where Location ='"+EmpLoc(empID)+"' and hr_no = '"+userID+"'   ";
			    	
			   
			    ResultSet rsk = ad.selectQuery(sj);
			    if(rsk.next())
			    {
			    	count = rsk.getInt(1);
			    }
				
			    if(count == 1 && approverPriority==1)
			    {

			    	
			    	
			    	
			    	String updateSql= " update All_Request set  actual_approver ='"+userID+"', Approved_Persons=pending_approver, Last_approver=pending_approver,Pending_approver='',Comments=''," +
	                         		  " approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' "
	                         		  		+ " and Req_Type='Permission'";
					int upd=ad.SqlExecuteUpdate(updateSql);
					
					
					String updateSql1= "update Permission_details set Last_approver='"+userID+"',Pending_approver='',Approver_Status='1',approved_date='"+dateNow+"',rejected_date='' where request_no='"+reqId+"'";
					ad.SqlExecuteUpdate(updateSql1);
					
					
					if(!type.equalsIgnoreCase("Permission"))
					{
					///insert into manula entry
					String manualswipe="";
					String manualtype="";
					
					if(swipetype.equalsIgnoreCase("In"))
					{
						manualswipe="I";
					}
					else
					{
						manualswipe="O";
					}
					
					if(type.equalsIgnoreCase("late Coming"))
					{
						manualtype="Late";
					}
					else
					{
						manualtype=type;
					}
					
					String up="update EMP_MANUAL_SWIPE set Status_Flag=0 where pernr='"+empID+"' and Start_date='"+manualdate+"' and In_Out='"+manualswipe+"'";
				    int s1d= ad.SqlExecuteUpdate(up);
				    
				    String s ="insert into EMP_MANUAL_SWIPE(Pernr,Start_date,In_Out,Start,Lost_Entry_Reason_Type,Remarks,Date,Time,Username,Created_date,Status_Flag) "
				    		+ "values('"+empID+"','"+manualdate+"', '"+manualswipe+"','"+getrailwaytime(inTime)+"', '"+manualtype+"','User Request',getdate(),getdate(),'"+userID+"',getdate(),'1')";
					
					int k = ad.SqlExecuteUpdate(s);
					
					String time= "";
					String time_Status="";
					if(swipetype .equalsIgnoreCase("In"))
					{
						
						
						time = "update EMP_IN_OUT set  day"+Integer.parseInt(c[2])+" ='"+getrailwaytime(inTime)+"' where year ='"+Integer.parseInt(c[0])+"'  "
					    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"' and in_out = 'I' ";
							 int s1 = ad.SqlExecuteUpdate(time);
							 
					if(type.equalsIgnoreCase("late") || type.equalsIgnoreCase("Missing") || type.equalsIgnoreCase("Forgot Swipe"))
					{
						
							 
						time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" ='PP'+RIGHT(day"+Integer.parseInt(c[2])+",2) where year ='"+Integer.parseInt(c[0])+"'  "
							    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
									 int s2 = ad.SqlExecuteUpdate(time_Status);	 
						
					}
					if(type.equalsIgnoreCase("early")|| type.equalsIgnoreCase("Personal"))
					{
						
					    
					    time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" ='PM'+RIGHT(day"+Integer.parseInt(c[2])+",2) where year ='"+Integer.parseInt(c[0])+"'  "
					    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
							 int s2 = ad.SqlExecuteUpdate(time_Status);
					}
					}
					else
						
					{
						
						time = "update EMP_IN_OUT set  day"+Integer.parseInt(c[2])+" ='"+getrailwaytime(inTime)+"' where year ='"+Integer.parseInt(c[0])+"'  "
					    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"' and in_out = 'O' ";
							 int s1 = ad.SqlExecuteUpdate(time);
						

						if(type.equalsIgnoreCase("late") || type.equalsIgnoreCase("Missing") || type.equalsIgnoreCase("Forgot Swipe"))
						{
							
								 
							time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" =LEFT(day"+Integer.parseInt(c[2])+",2)+'PP' where year ='"+Integer.parseInt(c[0])+"'  "
								    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
										 int s2 = ad.SqlExecuteUpdate(time_Status);	 
							
						}
						if(type.equalsIgnoreCase("early")|| type.equalsIgnoreCase("Personal"))
						{
							
						    
						    time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" =LEFT(day"+Integer.parseInt(c[2])+",2)+'PM' where year ='"+Integer.parseInt(c[0])+"'  "
						    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
								 int s2 = ad.SqlExecuteUpdate(time_Status);
						}
						
					}
					}
			    
					existStatus=false;	
			    }
			    
			    if(count == 1 && approverPriority==0 )
			    {

			    	String updateSql= " update All_Request set  actual_approver ='"+userID+"', Approved_Persons=pending_approver, Last_approver=pending_approver,Pending_approver='',Comments=''," +
	                         		  " approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' and Pending_approver in (select hr_no from ESS_CANCEL_APPR where Location ='"+EmpLoc(empID)+"')"
	                         		  		+ " and Req_Type='Permission'";
					int upd=ad.SqlExecuteUpdate(updateSql);
					
					
					
					
					  String updateSql1= "update Permission_details set Last_approver='"+userID+"',Pending_approver='',Approver_Status='1',approved_date='"+dateNow+"',rejected_date='' where request_no='"+reqId+"'";
						ad.SqlExecuteUpdate(updateSql1);
							
						if(!type.equalsIgnoreCase("Permission"))
						{
						///insert into manula entry
						String manualswipe="";
						String manualtype="";
						
						if(swipetype.equalsIgnoreCase("In"))
						{
							manualswipe="I";
						}
						else
						{
							manualswipe="O";
						}
						
						if(type.equalsIgnoreCase("late Coming"))
						{
							manualtype="Late";
						}
						else
						{
							manualtype=type;
						}
						
						String up="update EMP_MANUAL_SWIPE set Status_Flag=0 where pernr='"+empID+"' and Start_date='"+manualdate+"' and In_Out='"+manualswipe+"'";
					    int s1d= ad.SqlExecuteUpdate(up);
					    
					    String s ="insert into EMP_MANUAL_SWIPE(Pernr,Start_date,In_Out,Start,Lost_Entry_Reason_Type,Remarks,Date,Time,Username,Created_date,Status_Flag) "
					    		+ "values('"+empID+"','"+manualdate+"', '"+manualswipe+"','"+getrailwaytime(inTime)+"', '"+manualtype+"','User Request',getdate(),getdate(),'"+userID+"',getdate(),'1')";
						
						int k = ad.SqlExecuteUpdate(s);
					
					String time= "";
					String time_Status="";
					if(swipetype .equalsIgnoreCase("In"))
					{
						
						
						time = "update EMP_IN_OUT set  day"+Integer.parseInt(c[2])+" ='"+getrailwaytime(inTime)+"' where year ='"+Integer.parseInt(c[0])+"'  "
					    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"' and in_out = 'I' ";
							 int s1 = ad.SqlExecuteUpdate(time);
							 
					if(type.equalsIgnoreCase("late") || type.equalsIgnoreCase("Missing") || type.equalsIgnoreCase("Forgot Swipe"))
					{
						
							 
						time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" ='PP'+RIGHT(day"+Integer.parseInt(c[2])+",2) where year ='"+Integer.parseInt(c[0])+"'  "
							    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
									 int s2 = ad.SqlExecuteUpdate(time_Status);	 
						
					}
					if(type.equalsIgnoreCase("early")|| type.equalsIgnoreCase("Personal"))
					{
						
					    
					    time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" ='PM'+RIGHT(day"+Integer.parseInt(c[2])+",2) where year ='"+Integer.parseInt(c[0])+"'  "
					    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
							 int s2 = ad.SqlExecuteUpdate(time_Status);
					}
					}
					else
						
					{
						
						time = "update EMP_IN_OUT set  day"+Integer.parseInt(c[2])+" ='"+getrailwaytime(inTime)+"' where year ='"+Integer.parseInt(c[0])+"'  "
					    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"' and in_out = 'O' ";
							 int s1 = ad.SqlExecuteUpdate(time);
						

						if(type.equalsIgnoreCase("late") || type.equalsIgnoreCase("Missing") || type.equalsIgnoreCase("Forgot Swipe"))
						{
							
								 
							time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" =LEFT(day"+Integer.parseInt(c[2])+",2)+'PP' where year ='"+Integer.parseInt(c[0])+"'  "
								    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
										 int s2 = ad.SqlExecuteUpdate(time_Status);	 
							
						}
						if(type.equalsIgnoreCase("early")|| type.equalsIgnoreCase("Personal"))
						{
							
						    
						    time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" =LEFT(day"+Integer.parseInt(c[2])+",2)+'PM' where year ='"+Integer.parseInt(c[0])+"'  "
						    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
								 int s2 = ad.SqlExecuteUpdate(time_Status);
						}
						
					}}
					existStatus=false;
			    }
			    if(count == 0 && approverPriority==1)
				    
			    {	
				
					//last approver
					
					String nextApprover="";
					String getNextApprDetails="select top 1 * from ESS_CANCEL_APPR where Location ='"+EmpLoc(empID)+"' ";
		            ResultSet rsNextApprDetails=ad.selectQuery(getNextApprDetails);
		            while(rsNextApprDetails.next())
		            {
		            	nextApprover=rsNextApprDetails.getString("hr_no");
		            }
					existStatus=false;
					
			    	String updateSql= " update All_Request set  actual_approver ='"+userID+"', Approved_Persons=pending_approver, Last_approver=pending_approver,Pending_approver='',Comments=''," +
                   		  " approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' "
                   		  		+ " and Req_Type='Permission'";
			int upd=ad.SqlExecuteUpdate(updateSql);
	                
	                String as="select * from ess_cancel_appr where Location='"+EmpLoc(empID)+"' ";
	        		ResultSet ads=ad.selectQuery(as);
	        		try {
	        			while(ads.next())
	        			{		
	        			
	        			String saveRecReq="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments) values (";
	    			saveRecReq = saveRecReq + "'"+reqId+"','Permission','"+empID+"','"+submit_date+"','Pending','','"+ads.getString("HR_NO")+"','','"+userID+"','')";
	        			int i=ad.SqlExecuteUpdate(saveRecReq);
	        			
	        			EMailer email = new EMailer();
	    				
	    				String approvermail="";
	    				
	    				int	ij = email.sendMailToNextSequentialApprover(request, approvermail,reqId, "Permission",ads.getString("HR_NO"),empID);
	        			 
	        			}
	        		} catch (SQLException e) {
	        			// TODO Auto-generated catch block
	        			e.printStackTrace();
	        		}
				
				 
				
			    }
			
		
				
			}
		}
	if(existStatus==false)	{

    	approvalsForm.setMessage("");
    	approvalsForm.setMessage2("Request has been approved.");
    
  
	}
		
   	}
	}catch (Exception e) {
		e.printStackTrace();
	}
   	}
   	if(status.equalsIgnoreCase("Reject")){ 
   		int recordCount=0;
   	  	try{
   		boolean existStatus=false;
		boolean checkStatus=false;
		
		String getPermissionDetails="select * from Permission_details where request_no='"+reqId+"'"; 
		ResultSet rsgetPermission=ad.selectQuery(getPermissionDetails);
		while(rsgetPermission.next())
		{
			empID=rsgetPermission.getString("user_id");
			submit_date=rsgetPermission.getString("date");
			String a[]=submit_date.split("-");
			submit_date=a[2]+"/"+a[1]+"/"+a[0];
		}
		int priorityCout=0;
		int totalApproverCount=0;
		String dataFlowType=""; 
		String checkESSApproverList="select count(*) from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave'";
		ResultSet rsCheckInEss=ad.selectQuery(checkESSApproverList);
		while(rsCheckInEss.next())
		{
			int number=rsCheckInEss.getInt(1);
			totalApproverCount=rsCheckInEss.getInt(1);
			if(number==0)
			{
				existStatus=false;
			}else{
				existStatus=true;
			}
		}
		
   		String checkRecord="select count(*) from All_Request where Req_Type='Permission' and Req_Id='"+reqId+"' and Req_Status='Rejected'";
   	ResultSet rsChcek=ad.selectQuery(checkRecord);
 
   	while(rsChcek.next())
   	{
   		recordCount=rsChcek.getInt(1);
   		approvalsForm.setMessage("");
   		approvalsForm.setMessage("This request has already been rejected.");
   	}
   	
   	
   	if(recordCount==0)
   	{
   		if(existStatus==true){
   			String getDataFlowType="select * from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave' ";
			ResultSet rsDataFlowType=ad.selectQuery(getDataFlowType);
			while(rsDataFlowType.next())
			{
				dataFlowType=rsDataFlowType.getString("reqType");
			}
			if(dataFlowType.equalsIgnoreCase("sequential"))
			{
				int approverPriority=0;
				String getApprPriority="select Priority from ESS_Approvers where employeeNumber='"+empID+"' and ApproverId='"+userID+"' and essType='Leave'";
				ResultSet rsApprPriority=ad.selectQuery(getApprPriority);
				while(rsApprPriority.next())
				{
					approverPriority=rsApprPriority.getInt("Priority");
				}
				if(totalApproverCount==approverPriority)
				{
					//last approver
					existStatus=false;
					//check cancelled Record
                    int cancelledCount=0;
                    String getCheckCancelled="select COUNT(*) from All_Request where Req_Id='"+reqId+"' and Req_Type='Permission' and Req_Status='Cancelled'";
                    ResultSet rsCheckCancel=ad.selectQuery(getCheckCancelled);
                    while(rsCheckCancel.next())
                    {
                    	cancelledCount=rsCheckCancel.getInt(1);
                    	if(cancelledCount>0)
                    	{
                    		existStatus=true;
                    		 String updateSql= "update All_Request set Approved_Persons='"+userID+"', Last_approver='"+userID+"',Pending_approver='',Comments=''," +
                             "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected' where Req_Id='"+reqId+"' and Req_Type='Permission'";
							 int upd=ad.SqlExecuteUpdate(updateSql);
	   							 if(upd>0)
	   							 {
	   								request.setAttribute("statusMessage2", "statusMessage2");
								approvalsForm.setMessage2("Request has been Cancelled");
	   							 }
                    	}
                    }
				}else{
				String nextApprover="";
				String getNextApprDetails="select ApproverId from ESS_Approvers where employeeNumber='"+empID+"' and Priority='"+(approverPriority+1)+"' and essType='Leave'";
                ResultSet rsNextApprDetails=ad.selectQuery(getNextApprDetails);
                while(rsNextApprDetails.next())
                {
                	nextApprover=rsNextApprDetails.getString("ApproverId");
                }
                
                //check cancelled Record
                int cancelledCount=0;
                String getCheckCancelled="select COUNT(*) from All_Request where Req_Id='"+reqId+"' and Req_Type='Permission' and Req_Status='Cancelled'";
                ResultSet rsCheckCancel=ad.selectQuery(getCheckCancelled);
                while(rsCheckCancel.next())
                {
                	cancelledCount=rsCheckCancel.getInt(1);
                	if(cancelledCount>0)
                	{
                		existStatus=true;
                		 String updateSql= "update All_Request set Approved_Persons='"+userID+"', Last_approver='"+userID+"',Pending_approver='',Comments=''," +
                         "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected' where Req_Id='"+reqId+"'  and Req_Type='Permission'";
						 int upd=ad.SqlExecuteUpdate(updateSql);
							 if(upd>0)
							 {
								request.setAttribute("statusMessage2", "statusMessage2");
								 approvalsForm.setMessage2("Request already has been Cancelled");
							 }
                	}
                }
                if(cancelledCount==0){
                String updateSql= "update All_Request set Approved_Persons='"+userID+"', Last_approver='"+userID+"',Pending_approver='',Comments=''," +
                "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected' where Req_Id='"+reqId+"' and Req_Type='Permission'";
				 int upd=ad.SqlExecuteUpdate(updateSql);
				 request.setAttribute("statusMessage2", "statusMessage2");
				 approvalsForm.setMessage2("Request has been rejected");
					
			  }
				}
			}
			if(dataFlowType.equalsIgnoreCase("parallel"))
			{
				//check total Approve count
				int totalApproveCount=0;
				int totalRejectCount=0;
				String getTotApprCount="select count(*) from All_Request where Req_Id='"+reqId+"' and Requester_Name='"+empID+"' and Req_Status='Approved' and Req_Type='Permission'";
				ResultSet rsTotApprCount=ad.selectQuery(getTotApprCount);
				while(rsTotApprCount.next())
				{
					totalApproveCount=rsTotApprCount.getInt(1);
				}
				String getTotRejectCount="select count(*) from All_Request where Req_Id='"+reqId+"' and Requester_Name='"+empID+"' and Req_Status='Rejected' and Req_Type='Permission'";
				ResultSet rsTotRejCount=ad.selectQuery(getTotRejectCount);
				while(rsTotRejCount.next())
				{
					totalRejectCount=rsTotRejCount.getInt(1);
				}
				 getTotRejectCount="select count(*) from All_Request where Req_Id='"+reqId+"' and Requester_Name='"+empID+"' and Req_Status='Cancelled' and Req_Type='Permission'";
				 rsTotRejCount=ad.selectQuery(getTotRejectCount);
				while(rsTotRejCount.next())
				{
					totalRejectCount=totalRejectCount+rsTotRejCount.getInt(1);
				
				}
				if(totalApproveCount==0)
				{
					
					if(totalRejectCount==0)
					{
					 String updateSql= "update All_Request set Approved_Persons='"+userID+"', Last_approver='"+userID+"',Pending_approver='',Comments=''," +
                        "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected' where Req_Id='"+reqId+"' and Pending_approver='"+userID+"' and Req_Type='Permission'";
						 int upd=ad.SqlExecuteUpdate(updateSql);
							 if(upd>0)
							 {
								request.setAttribute("statusMessage2", "statusMessage2");
								approvalsForm.setMessage2("Request has been rejected");
							 }
					}
					if(totalRejectCount==2)
					{
						String updateSql= "update Permission_details set Last_approver='"+userID+"',Pending_approver='',Approver_Status='2',approved_date='',rejected_date='"+dateNow+"' where request_no='"+reqId+"'";
	   					ad.SqlExecuteUpdate(updateSql);
						
						String updateSql1= "update All_Request set Req_Status='Rejected', Comments='',approved_date='',rejected_date='"+dateNow+"',Last_Approver='"+userID+"',Pending_Approver='',Approved_Persons='"+userID+"' where Req_Id='"+reqId+"' and Pending_Approver='"+userID+"'  and Req_Type='Permission' and Pending_Approver='"+userID+"'";;
						int upd2=ad.SqlExecuteUpdate(updateSql1);
						if(upd2>0){
							request.setAttribute("statusMessage", "statusMessage");
							approvalsForm.setMessage("This request already has been rejected");
						}
					}
					if(totalRejectCount==1)
					{
						existStatus=false;
					}
					
				}
				if(totalRejectCount==0)
				{
				 String updateSql= "update All_Request set Approved_Persons='"+userID+"', Last_approver='"+userID+"',Pending_approver='',Comments=''," +
                    "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected' where Req_Id='"+reqId+"'  and Req_Type='Permission'";
					 int upd=ad.SqlExecuteUpdate(updateSql);
						 if(upd>0)
						 {
							request.setAttribute("statusMessage2", "statusMessage2");
							approvalsForm.setMessage2("Request has been rejected");
						 }
				}if(totalRejectCount==1){
					
					existStatus=false;
					
				}
				if(totalRejectCount==2)
				{
					//show message Approve
					String updateSql1= "update All_Request set Approved_Persons='"+userID+"', Last_approver='"+userID+"',Pending_approver='',Comments=''," +
                    "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected' where Req_Id='"+reqId+"' and Req_Type='Permission'";
					 int upd=ad.SqlExecuteUpdate(updateSql1);
						 if(upd>0)
						 {
							request.setAttribute("statusMessage2", "statusMessage2");
							approvalsForm.setMessage2("This  request already has been  approved");
						 }
				}
			}
			
   		}
   		if(existStatus==false){
   			String modifyRequest="update  All_Request set Last_Approver='"+userID+"',Approved_Persons='"+userID+"',Req_Status='Rejected',Pending_Approver='',approved_date='',rejected_date='"+dateNow+"' where Req_Type='Permission' and Req_Id='"+reqId+"' ";	
   			int statsChange=ad.SqlExecuteUpdate(modifyRequest);	
   				if(statsChange>0){	
   					String updateSql= "update Permission_details set Last_approver='"+userID+"',Pending_approver='',Approver_Status='2',approved_date='',rejected_date='"+dateNow+"' where request_no='"+reqId+"'";
   					ad.SqlExecuteUpdate(updateSql);
   					approvalsForm.setMessage("");
   					approvalsForm.setMessage2("Request has been rejected.");
   		   		}
   		}
   		
		}
   	 }catch (Exception e) {
 		e.printStackTrace();
 	}
   	}
			}
		String getPermissionRecords="";  
		if(status.equalsIgnoreCase("Reject")){
			
			getPermissionRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Requester_Id) AS RowNum,all_R.Req_Id," +
			"all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,CONVERT(varchar(11),perm.[date],103) as date,perm.startTime,perm.endTime,perm.reason from  All_Request as all_R," +
		"emp_official_info as emp, Permission_details as perm where  all_R.Approved_Persons='"+userID+"' and  all_R.Req_Id='"+reqId+"' and Req_Status='Rejected' " +
		"and all_R.Req_Id=perm.request_no and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Permission') as  sub Where  " +
		"sub.RowNum between 1 and 10 order by Req_Id desc";
		}
		if(status.equalsIgnoreCase("Approve")){
			
			getPermissionRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Requester_Id) AS RowNum,all_R.Req_Id," +
			"all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, CONVERT(varchar(11),perm.[date],103) as date,perm.startTime,perm.endTime,perm.reason from  All_Request as all_R," +
		"emp_official_info as emp, Permission_details as perm where  all_R.Last_Approver='"+userID+"' and  all_R.Req_Id='"+reqId+"' and Req_Status='Approved' " +
		"and all_R.Req_Id=perm.request_no and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Permission') as  sub Where  " +
		"sub.RowNum between 1 and 10 order by Req_Id desc";
		}
		
if(status.equalsIgnoreCase("Self Cancelled")){
			
			getPermissionRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Requester_Id) AS RowNum,all_R.Req_Id," +
			"all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, CONVERT(varchar(11),perm.[date],103) as date,perm.startTime,perm.endTime,perm.reason from  All_Request as all_R," +
		"emp_official_info as emp, Permission_details as perm where  all_R.Pending_Approver='"+userID+"' and  all_R.Req_Id='"+reqId+"' and Req_Status='Self Cancelled' " +
		"and all_R.Req_Id=perm.request_no and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Permission') as  sub Where  " +
		"sub.RowNum between 1 and 10 order by Req_Id desc";
		
	}
		LinkedList permissionList=new LinkedList();
		ResultSet rsPermission=ad.selectQuery(getPermissionRecords);
		try{
		while(rsPermission.next()){
			MyRequestForm permission=new MyRequestForm();
			permission.setRequestNumber(rsPermission.getString("Req_Id"));
			permission.setStartDate(rsPermission.getString("date"));
            permission.setStartTime(rsPermission.getString("startTime"));
	          permission.setEndTime(rsPermission.getString("endTime"));
			String requestDate=rsPermission.getString("Req_Date");
			int isthere = (requestDate.indexOf("/"));
			if(isthere <= 0){
				String req[]=requestDate.split(" ");
				requestDate=req[0];
				String a[]=requestDate.split("-");
				requestDate=a[2]+"/"+a[1]+"/"+a[0];
			}
			permission.setCreateDate(requestDate);
			
			permission.setEmployeeName(rsPermission.getString("EMP_FULLNAME"));
			permission.setApprover(rsPermission.getString("Req_Status"));
			permission.setEmployeeNumber(rsPermission.getString("Requester_Name"));
			permission.setRequestType(rsPermission.getString("reason"));
			permissionList.add(permission);
				
		}
		request.setAttribute("permissionList", permissionList);
		}catch (Exception e) {
			e.printStackTrace();
		}
		return mapping.findForward("permissionDetails1");
	
	}
	public ActionForward approveMailOndutyRequest(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ApprovalsForm approvalsForm = (ApprovalsForm) form;
		String userID=request.getParameter("userID");
		String reqId=request.getParameter("reqId");
		String status=request.getParameter("status");
		NewsandMediaDao ad=new NewsandMediaDao();
		Date dNow = new Date( );
		String empID="";
		String submit_date="";
		 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS");
			String dateNow = ft.format(dNow);
			boolean ondutyStatus=true;
			   
			   String checkRecordStatus="select * from All_Request where Req_Type='On Duty' and Req_Id='"+reqId+"' and (Pending_Approver='"+userID+"' or Approved_Persons='"+userID+"')";
				ResultSet rsLvStatus=ad.selectQuery(checkRecordStatus);
				try{
				while(rsLvStatus.next())
				{
					String lvStatus=rsLvStatus.getString("Req_Status");
					if(lvStatus.equalsIgnoreCase("Approved"))
					{
						status="Approve";
						ondutyStatus=false;
						approvalsForm.setMessage2("");
				   		approvalsForm.setMessage("This request has already been approved.");
					}
					if(lvStatus.equalsIgnoreCase("Rejected"))
					{
						status="Reject";
						ondutyStatus=false;
						approvalsForm.setMessage2("");
				   		approvalsForm.setMessage("This request has already been rejected.");
					}
					if(lvStatus.equalsIgnoreCase("Self Cancelled"))
					{
						status="Self Cancelled";
						ondutyStatus=false;
						approvalsForm.setMessage2("");
				   		approvalsForm.setMessage("This request has already been Self Cancelled.");
					}
					
				}
				}catch (Exception e) {
					e.printStackTrace();
				}		
			if(ondutyStatus==true){			
			   	if(status.equalsIgnoreCase("Approve"))
			   	{
			   		int recordCount=0;
			   		try{
			   	String checkRecord="select count(*) from All_Request where Req_Type='On Duty' and Req_Id='"+reqId+"' and Req_Status='Approved' and (Pending_Approver='"+userID+"' or Approved_Persons='"+userID+"')";
			   	ResultSet rsChcek=ad.selectQuery(checkRecord);
			   	while(rsChcek.next())
			   	{
			   		recordCount=rsChcek.getInt(1);
			   		approvalsForm.setMessage("");
			   		approvalsForm.setMessage2("This request has already been approved.");
			   	}
			   	if(recordCount==0)
			   	{
			   		boolean existStatus=false;
			   		int priorityCout=0;
					int totalApproverCount=0;
					String dataFlowType=""; 
					String getOnDutyDetails="select * from OnDuty_details where request_no='"+reqId+"'"; 
					ResultSet rsOnDuty=ad.selectQuery(getOnDutyDetails);
					while(rsOnDuty.next())
					{
						empID=rsOnDuty.getString("user_id");
						submit_date=rsOnDuty.getString("submit_date");
					}
					String checkESSApproverList="select count(*) from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave'";
					ResultSet rsCheckInEss=ad.selectQuery(checkESSApproverList);
					while(rsCheckInEss.next())
					{
						int number=rsCheckInEss.getInt(1);
						totalApproverCount=rsCheckInEss.getInt(1);
						if(number==0)
						{
							existStatus=false;
						}else{
							existStatus=true;
						}
					}
					if(existStatus==true){
						String getDataFlowType="select * from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave' ";
						ResultSet rsDataFlowType=ad.selectQuery(getDataFlowType);
						while(rsDataFlowType.next())
						{
							dataFlowType=rsDataFlowType.getString("reqType");
						}
						if(dataFlowType.equalsIgnoreCase("sequential"))
						{
							int approverPriority=0;
							String getApprPriority="select Priority from ESS_Approvers where employeeNumber='"+empID+"' and ApproverId='"+userID+"' and essType='Leave'";
							ResultSet rsApprPriority=ad.selectQuery(getApprPriority);
							while(rsApprPriority.next())
							{
								approverPriority=rsApprPriority.getInt("Priority");
							}
							if(totalApproverCount==approverPriority)
							{
								//last approver
								
								existStatus=false;
								
								//check cancelled Record
				                int cancelledCount=0;
				                String getCheckCancelled="select COUNT(*) from All_Request where Req_Id='"+reqId+"' and Req_Type='On Duty' and Req_Status='Cancelled'";
				                ResultSet rsCheckCancel=ad.selectQuery(getCheckCancelled);
				                while(rsCheckCancel.next())
				                {
				                	cancelledCount=rsCheckCancel.getInt(1);
				                	if(cancelledCount>0)
				                	{
				                		existStatus=true;
				                		 String updateSql= "update All_Request set Approved_Persons='"+userID+"', Last_approver='"+userID+"',Pending_approver='',Comments=''," +
				                         "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' and Pending_approver='"+userID+"' and Req_Type='On Duty'";
										 int upd=ad.SqlExecuteUpdate(updateSql);
											 if(upd>0)
											 {
												request.setAttribute("statusMessage2", "statusMessage2");
											approvalsForm.setMessage2("This Request already has been Cancelled");
											 }
				                	}
				                }
							}else{
								
							String nextApprover="";
							String getNextApprDetails="select ApproverId from ESS_Approvers where employeeNumber='"+empID+"' and Priority='"+(approverPriority+1)+"' and essType='Leave'";
				            ResultSet rsNextApprDetails=ad.selectQuery(getNextApprDetails);
				            while(rsNextApprDetails.next())
				            {
				            	nextApprover=rsNextApprDetails.getString("ApproverId");
				            }
				          //check cancelled Record
				            int cancelledCount=0;
				            String getCheckCancelled="select COUNT(*) from All_Request where Req_Id='"+reqId+"' and Req_Type='OnDuty' and Req_Status='Cancelled'";
				            ResultSet rsCheckCancel=ad.selectQuery(getCheckCancelled);
				            while(rsCheckCancel.next())
				            {
				            	cancelledCount=rsCheckCancel.getInt(1);
				            	if(cancelledCount>0)
				            	{
				            		existStatus=true;
				            		 String updateSql= "update All_Request set Approved_Persons='"+userID+"', Last_approver='"+userID+"',Pending_approver='',Comments=''," +
				                     "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' and Pending_approver='"+userID+"' and Req_Type='On Duty'";
									 int upd=ad.SqlExecuteUpdate(updateSql);
											 if(upd>0)
											 {
												request.setAttribute("statusMessage2", "statusMessage2");
										approvalsForm.setMessage2("This Request already has been Cancelled");
											 }
				            	}
				            }
				            if(cancelledCount==0){
				            String updateSql= "update All_Request set Approved_Persons='"+userID+"', Last_approver='"+userID+"',Pending_approver='',Comments=''," +
				            "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' and Pending_approver='"+userID+"' and Req_Type='On Duty'";
							 int upd=ad.SqlExecuteUpdate(updateSql);
							 approvalsForm.setMessage2("Request has been approved.");
								 if(upd>0)
								 {
									String saveRecReq="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments) values (";
									saveRecReq = saveRecReq + "'"+reqId+"','On Duty','"+empID+"','"+submit_date+"','Pending','','"+nextApprover+"','No','"+empID+"','')";
									 int i1=ad.SqlExecuteUpdate(saveRecReq);
									 ad.connClose();
									 approvalsForm.setMessage("");
									 approvalsForm.setMessage2("");
									 approvalsForm.setMessage2("Request has been approved.");
										status="Approve";
									 EMailer email = new EMailer();
									 int j=email.sendMailToNextSequentialApprover(request, "", reqId, "On Duty",nextApprover,empID);
									 
									 
								 }
						  }
							}
						
					}
						if(dataFlowType.equalsIgnoreCase("parallel"))
						{
							
							
							String frstapp="";
							String par1app="";
							String par2app="";
							
							//Approvers
							String getNextApprDetails="select * from ESS_Approvers where employeeNumber='"+empID+"'  and essType='Leave'";
				            ResultSet rsNextApprDetails=ad.selectQuery(getNextApprDetails);
				            while(rsNextApprDetails.next())
				            {
				            	frstapp=rsNextApprDetails.getString("ApproverId");
				            	par1app=rsNextApprDetails.getString("Parallel_Approver1");
				            	par2app=rsNextApprDetails.getString("Parallel_Approver2");
				            }
							//check total Approve count
							
							int totalApproveCount=0;
							String getTotApprCount="select count(*) from All_Request where Req_Id='"+reqId+"' and Requester_Name='"+empID+"' and Req_Status='Approved' and Req_Type='On Duty'";
							ResultSet rsTotApprCount=ad.selectQuery(getTotApprCount);
							while(rsTotApprCount.next())
							{
								totalApproveCount=rsTotApprCount.getInt(1);
							}
							if(totalApproveCount==0)
							{
								String updateSql11= "update All_Request set Approved_Persons='"+frstapp+"', Last_approver='"+frstapp+"',Pending_approver='',Comments=''," +
							            "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved',Actual_Approver='"+userID+"' where Req_Id='"+reqId+"' and Pending_approver='"+frstapp+"' and Req_Type='On Duty'";
											 int upd1=ad.SqlExecuteUpdate(updateSql11);
											 status="Approve";
											 approvalsForm.setMessage2("Request has been approved.");
											 if(par1app==null)
												{
													par1app="";
												}
												
												if(par2app==null)
												{
													par2app="";
												}
											 
												if(!par1app.equalsIgnoreCase(""))
												{
													 String updateSql1= "update All_Request set Approved_Persons='"+par1app+"', Last_approver='"+par1app+"',Pending_approver='',Comments=''," +
											                    "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved',Actual_Approver='"+userID+"' where Req_Id='"+reqId+"' and Pending_approver='"+par1app+"' and Req_Type='On Duty'";
																 int upd2=ad.SqlExecuteUpdate(updateSql1);
												}
												
												if(!par2app.equalsIgnoreCase(""))
												{
													 String updateSql1= "update All_Request set Approved_Persons='"+par2app+"', Last_approver='"+par2app+"',Pending_approver='',Comments=''," +
											                    "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved',Actual_Approver='"+userID+"' where Req_Id='"+reqId+"' and Pending_approver='"+par2app+"' and Req_Type='On Duty'";
																 int upd2=ad.SqlExecuteUpdate(updateSql1);
												}
												
												existStatus=false;
											 
								//check reject count 
								int totalRejectCount=0;
								String getTotRejectCount="select count(*) from All_Request where Req_Id='"+reqId+"' and Requester_Name='"+empID+"' and Req_Status='Rejected' and Req_Type='On Duty'";
								ResultSet rsTotRejCount=ad.selectQuery(getTotRejectCount);
								while(rsTotRejCount.next())
								{
									totalRejectCount=rsTotRejCount.getInt(1);
								}
								if(totalRejectCount==0)
								{
								
								 String updateSql= "update All_Request set Approved_Persons='"+userID+"', Last_approver='"+userID+"',Pending_approver='',Comments=''," +
				                   "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' and Pending_approver='"+userID+"' and Req_Type='On Duty'";
									 int upd=ad.SqlExecuteUpdate(updateSql);
										 
								}
								if(totalRejectCount==2)
								{
									String updateSql1= "update All_Request set Req_Status='Approved', Comments='',approved_date='"+dateNow+"',rejected_date='',Last_Approver='"+userID+"',Pending_Approver='',Approved_Persons='"+userID+"' where Req_Id='"+reqId+"' and Pending_Approver='"+userID+"'  and Req_Type='On Duty'";;
									int upd2=ad.SqlExecuteUpdate(updateSql1);
									
								}
							}if(totalApproveCount==1){
								
								//no one leave request is approved
								existStatus=false;
								
								//check cancelled Record
				                int cancelledCount=0;
				                String getCheckCancelled="select COUNT(*) from All_Request where Req_Id='"+reqId+"' and Req_Type='On Duty' and Req_Status='Cancelled'";
				                ResultSet rsCheckCancel=ad.selectQuery(getCheckCancelled);
				                while(rsCheckCancel.next())
				                {
				                	cancelledCount=rsCheckCancel.getInt(1);
				                	if(cancelledCount>0)
				                	{
												request.setAttribute("statusMessage2", "statusMessage2");
												approvalsForm.setMessage2("This Request already has been Cancelled");
												existStatus=true;
				                	}
				                }
								
								
							}
							if(totalApproveCount==2)
							{
								//show message Approve
								String updateSql= "update All_Request set Approved_Persons='"+userID+"', Last_approver='"+userID+"',Pending_approver='',Comments=''," +
				               "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' and Pending_approver='"+userID+"' and Req_Type='On Duty'";
								 int upd=ad.SqlExecuteUpdate(updateSql);
								 	request.setAttribute("statusMessage2", "statusMessage2");
									approvalsForm.setMessage2("This Request already has been approved");
									existStatus=true;
							}
						}
						
						
					}
					if(existStatus==false){
				String modifyRequest="update  All_Request set Last_Approver='"+userID+"',Approved_Persons='"+userID+"',Req_Status='Approved',Pending_Approver='',approved_date='"+dateNow+"',rejected_date='' where Req_Type='On Duty' and Req_Id='"+reqId+"' and Pending_Approver='"+userID+"'";	
				int statusChange=ad.SqlExecuteUpdate(modifyRequest);
			    if(statusChange>0)
			    {
			    	approvalsForm.setMessage("");
			    	approvalsForm.setMessage2("Request has been approved.");
			    }
			    String updateSql= "update OnDuty_details set Last_approver='"+userID+"',Pending_approver='',OnDuty_status='1',Approver_Status='Approved',approved_date='"+dateNow+"',rejected_date='' where request_no='"+reqId+"'";
				ad.SqlExecuteUpdate(updateSql);
					}
					
			   	}
				}catch (Exception e) {
					e.printStackTrace();
				}
			   	}
			   	if(status.equalsIgnoreCase("Reject")){ 
			   		try{
			   		int recordCount=0;
			   		boolean existStatus=false;
					boolean checkStatus=false;
					 empID="";
					String getLeaveDetails="select * from OnDuty_details where request_no='"+reqId+"'"; 
					ResultSet rsLeave=ad.selectQuery(getLeaveDetails);
					while(rsLeave.next())
					{
						empID=rsLeave.getString("user_id");
						submit_date=rsLeave.getString("submit_date");
						
					}
					int priorityCout=0;
					int totalApproverCount=0;
					String dataFlowType=""; 
					String checkESSApproverList="select count(*) from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave'";
					ResultSet rsCheckInEss=ad.selectQuery(checkESSApproverList);
					while(rsCheckInEss.next())
					{
						int number=rsCheckInEss.getInt(1);
						totalApproverCount=rsCheckInEss.getInt(1);
						if(number==0)
						{
							existStatus=false;
						}else{
							existStatus=true;
						}
					}
					if(existStatus==true){
						String getDataFlowType="select * from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave' ";
						ResultSet rsDataFlowType=ad.selectQuery(getDataFlowType);
						while(rsDataFlowType.next())
						{
							dataFlowType=rsDataFlowType.getString("reqType");
						}
						if(dataFlowType.equalsIgnoreCase("sequential"))
						{
							int approverPriority=0;
							String getApprPriority="select Priority from ESS_Approvers where employeeNumber='"+empID+"' and ApproverId='"+userID+"' and essType='Leave'";
							ResultSet rsApprPriority=ad.selectQuery(getApprPriority);
							while(rsApprPriority.next())
							{
								approverPriority=rsApprPriority.getInt("Priority");
							}
							if(totalApproverCount==approverPriority)
							{
								//last approver
								existStatus=false;
								//check cancelled Record
			                    int cancelledCount=0;
			                    String getCheckCancelled="select COUNT(*) from All_Request where Req_Id='"+reqId+"' and Req_Type='On Duty' and Req_Status='Cancelled'";
			                    ResultSet rsCheckCancel=ad.selectQuery(getCheckCancelled);
			                    while(rsCheckCancel.next())
			                    {
			                    	cancelledCount=rsCheckCancel.getInt(1);
			                    	if(cancelledCount>0)
			                    	{
			                    		existStatus=true;
			                    		 String updateSql= "update All_Request set Approved_Persons='"+userID+"', Last_approver='"+userID+"',Pending_approver='',Comments=''," +
			                             "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected' where Req_Id='"+reqId+"' and Pending_approver='"+userID+"' and Req_Type='On Duty'";
										 int upd=ad.SqlExecuteUpdate(updateSql);
				   							 if(upd>0)
				   							 {
				   								request.setAttribute("statusMessage2", "statusMessage2");
											approvalsForm.setMessage2("Request has been Cancelled");
				   							 }
			                    	}
			                    }
							}else{
							String nextApprover="";
							String getNextApprDetails="select ApproverId from ESS_Approvers where employeeNumber='"+empID+"' and Priority='"+(approverPriority+1)+"' and essType='Leave'";
			                ResultSet rsNextApprDetails=ad.selectQuery(getNextApprDetails);
			                while(rsNextApprDetails.next())
			                {
			                	nextApprover=rsNextApprDetails.getString("ApproverId");
			                }
			                
			                //check cancelled Record
			                int cancelledCount=0;
			                String getCheckCancelled="select COUNT(*) from All_Request where Req_Id='"+reqId+"' and Req_Type='On Duty' and Req_Status='Cancelled'";
			                ResultSet rsCheckCancel=ad.selectQuery(getCheckCancelled);
			                while(rsCheckCancel.next())
			                {
			                	cancelledCount=rsCheckCancel.getInt(1);
			                	if(cancelledCount>0)
			                	{
			                		existStatus=true;
			                		 String updateSql= "update All_Request set Approved_Persons='"+userID+"', Last_approver='"+userID+"',Pending_approver='',Comments=''," +
			                         "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected' where Req_Id='"+reqId+"' and Pending_approver='"+userID+"' and Req_Type='On Duty'";
									 int upd=ad.SqlExecuteUpdate(updateSql);
										 if(upd>0)
										 {
											request.setAttribute("statusMessage2", "statusMessage2");
											 approvalsForm.setMessage2("Request already has been Cancelled");
										 }
			                	}
			                }
			                if(cancelledCount==0){
			                String updateSql= "update All_Request set Approved_Persons='"+userID+"', Last_approver='"+userID+"',Pending_approver='',Comments=''," +
			                "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected' where Req_Id='"+reqId+"' and Pending_approver='"+userID+"' and Req_Type='On Duty'";
							 int upd=ad.SqlExecuteUpdate(updateSql);
							 request.setAttribute("statusMessage2", "statusMessage2");
							 approvalsForm.setMessage2("Request has been rejected");
								
						  }
							}
						}
						if(dataFlowType.equalsIgnoreCase("parallel"))
						{
							
							String frstapp="";
							String par1app="";
							String par2app="";
							
							//Approvers
							String getNextApprDetails="select * from ESS_Approvers where employeeNumber='"+empID+"'  and essType='Leave'";
				            ResultSet rsNextApprDetails=ad.selectQuery(getNextApprDetails);
				            while(rsNextApprDetails.next())
				            {
				            	frstapp=rsNextApprDetails.getString("ApproverId");
				            	par1app=rsNextApprDetails.getString("Parallel_Approver1");
				            	par2app=rsNextApprDetails.getString("Parallel_Approver2");
				            }
							
							//check total Approve count
							int totalApproveCount=0;
							int totalRejectCount=0;
							String getTotApprCount="select count(*) from All_Request where Req_Id='"+reqId+"' and Requester_Name='"+empID+"' and Req_Status='Approved' and Req_Type='On Duty'";
							ResultSet rsTotApprCount=ad.selectQuery(getTotApprCount);
							while(rsTotApprCount.next())
							{
								totalApproveCount=rsTotApprCount.getInt(1);
							}
							String getTotRejectCount="select count(*) from All_Request where Req_Id='"+reqId+"' and Requester_Name='"+empID+"' and Req_Status='Rejected' and Req_Type='On Duty'";
							ResultSet rsTotRejCount=ad.selectQuery(getTotRejectCount);
							while(rsTotRejCount.next())
							{
								totalRejectCount=rsTotRejCount.getInt(1);
							}
							 getTotRejectCount="select count(*) from All_Request where Req_Id='"+reqId+"' and Requester_Name='"+empID+"' and Req_Status='Cancelled' and Req_Type='On Duty'";
							 rsTotRejCount=ad.selectQuery(getTotRejectCount);
							while(rsTotRejCount.next())
							{
								totalRejectCount=totalRejectCount+rsTotRejCount.getInt(1);
							
							}
							if(totalApproveCount==0)
							{
								
								if(totalRejectCount==0)
								{
									String updateSql= "update All_Request set Approved_Persons='"+frstapp+"', Last_approver='"+frstapp+"',Pending_approver='',Comments=''," +
					                        "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected',Actual_Approver='"+userID+"' where Req_Id='"+reqId+"' and Pending_approver='"+frstapp+"' and Req_Type='On Duty'";
											 int upd=ad.SqlExecuteUpdate(updateSql);
										 if(upd>0)
										 {
											request.setAttribute("statusMessage2", "statusMessage2");
											approvalsForm.setMessage2("Request has been rejected");
											
											if(par1app==null)
											{
												par1app="";
											}
											
											if(par2app==null)
											{
												par2app="";
											}
											
											if(!par1app.equalsIgnoreCase(""))
											{
												 String updateSql1= "update All_Request set Approved_Persons='"+par1app+"', Last_approver='"+par1app+"',Pending_approver='',Comments=''," +
										                    "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected',Actual_Approver='"+userID+"' where Req_Id='"+reqId+"' and Pending_approver='"+par1app+"' and Req_Type='On Duty'";
															 int upd1=ad.SqlExecuteUpdate(updateSql1);
											}
											
											if(!par2app.equalsIgnoreCase(""))
											{
												 String updateSql1= "update All_Request set Approved_Persons='"+par2app+"', Last_approver='"+par2app+"',Pending_approver='',Comments=''," +
										                    "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected',Actual_Approver='"+userID+"' where Req_Id='"+reqId+"' and Pending_approver='"+par2app+"' and Req_Type='On Duty'";
															 int upd1=ad.SqlExecuteUpdate(updateSql1);
											}
											
											String updateSql1= "update OnDuty_details set Last_approver='"+userID+"',Pending_approver='',OnDuty_status='2',Approver_Status='Rejected',approved_date='',rejected_date='"+dateNow+"' where request_no='"+reqId+"'";
											ad.SqlExecuteUpdate(updateSql1);
											
										 }
								}
								if(totalRejectCount==2)
								{
									String updateSql= "update OnDuty_details set Last_approver='"+userID+"',Pending_approver='',OnDuty_status='2',Approver_Status='Rejected',approved_date='',rejected_date='"+dateNow+"',comments='' where request_no='"+reqId+"'";
									int recordChange=ad.SqlExecuteUpdate(updateSql);
									
									String updateSql1= "update All_Request set Req_Status='Rejected', Comments='',approved_date='',rejected_date='"+dateNow+"',Last_Approver='"+userID+"',Pending_Approver='',Approved_Persons='"+userID+"' where Req_Id='"+reqId+"' and Pending_Approver='"+userID+"'  and Req_Type='On Duty'";;
									int upd2=ad.SqlExecuteUpdate(updateSql1);
									if(upd2>0){
										request.setAttribute("statusMessage", "statusMessage");
										approvalsForm.setMessage("This request already has been rejected");
									}
								}
								if(totalRejectCount==1)
								{
									existStatus=false;
								}
								
							}
							if(totalRejectCount==0)
							{
							 String updateSql= "update All_Request set Approved_Persons='"+userID+"', Last_approver='"+userID+"',Pending_approver='',Comments=''," +
		                        "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected' where Req_Id='"+reqId+"' and Pending_approver='"+userID+"' and Req_Type='On Duty'";
								 int upd=ad.SqlExecuteUpdate(updateSql);
									 if(upd>0)
									 {
										request.setAttribute("statusMessage2", "statusMessage2");
										approvalsForm.setMessage2("Request has been rejected");
									 }
							}if(totalRejectCount==1){
								
								existStatus=false;
								
							}
							if(totalRejectCount==2)
							{
								//show message Approve
								String updateSql1= "update All_Request set Approved_Persons='"+userID+"', Last_approver='"+userID+"',Pending_approver='',Comments=''," +
			                    "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected' where Req_Id='"+reqId+"' and Pending_approver='"+userID+"' and Req_Type='On Duty'";
								 int upd=ad.SqlExecuteUpdate(updateSql1);
									 if(upd>0)
									 {
										request.setAttribute("statusMessage2", "statusMessage2");
										approvalsForm.setMessage2("This  request already has been  approved");
									 }
							}
						}
						
						
					}
					if(existStatus==false){
						String checkRecord="select count(*) from All_Request where Req_Type='On Duty' and Req_Id='"+reqId+"' and Req_Status='Rejected' and  (Pending_Approver='"+userID+"' or Approved_Persons='"+userID+"')";
					   	ResultSet rsChcek=ad.selectQuery(checkRecord);
					   	try{
					   	while(rsChcek.next())
					   	{
					   		recordCount=rsChcek.getInt(1);
					   		approvalsForm.setMessage("");
					   		approvalsForm.setMessage("Request has been rejected.");
					   	}
					   	
					   	}catch (Exception e) {
							e.printStackTrace();
						}
				   	if(recordCount==0)
				   	{
				   		String modifyRequest="update  All_Request set Last_Approver='"+userID+"',Approved_Persons='"+userID+"',Req_Status='Rejected',Pending_Approver='',approved_date='',rejected_date='"+dateNow+"' where Req_Type='On Duty' and Req_Id='"+reqId+"' and Pending_Approver='"+userID+"' ";	
						int statsChange=ad.SqlExecuteUpdate(modifyRequest);	
							if(statsChange>0){	
								String updateSql= "update OnDuty_details set Last_approver='"+userID+"',Pending_approver='',OnDuty_status='2',Approver_Status='Rejected',approved_date='',rejected_date='"+dateNow+"' where request_no='"+reqId+"'";
								ad.SqlExecuteUpdate(updateSql);
								approvalsForm.setMessage("");
								approvalsForm.setMessage2("Request has been rejected.");
					   		}
						}
					}
					
			   	}catch (Exception e) {
					e.printStackTrace();
				}
			}
			}
		String getOndutyRecords="";  
		if(status.equalsIgnoreCase("Reject")){
			
			getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Requester_Id) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime,onduty.reason," +
			"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,onduty.start_date,onduty.end_date " +
		"from  All_Request as all_R,emp_official_info as emp,OnDuty_details as onduty where all_R.Approved_Persons='"+userID+"' and  all_R.Req_Id='"+reqId+"' and Req_Type='On Duty' and all_R.Req_Id=onduty.request_no " +
			"and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='On Duty') as  sub Where  sub.RowNum between 1 and 10 order by Req_Id desc";
		}
		if(status.equalsIgnoreCase("Approve")){
			
			getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Requester_Id) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime,onduty.reason," +
			"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,onduty.start_date,onduty.end_date " +
			"from  All_Request as all_R,emp_official_info as emp,OnDuty_details as onduty where all_R.Last_Approver='"+userID+"' and  all_R.Req_Id='"+reqId+"' and Req_Type='On Duty' and all_R.Req_Id=onduty.request_no " +
			"and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='On Duty') as  sub Where  sub.RowNum between 1 and 10 order by Req_Id desc";
		}
if(status.equalsIgnoreCase("Self Cancelled")){
			
			getOndutyRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Requester_Id) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime,onduty.reason," +
			"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,onduty.start_date,onduty.end_date " +
			"from  All_Request as all_R,emp_official_info as emp,OnDuty_details as onduty where all_R.Pending_Approver='"+userID+"' and  all_R.Req_Id='"+reqId+"' and Req_Type='On Duty' and all_R.Req_Id=onduty.request_no " +
			"and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='On Duty') as  sub Where  sub.RowNum between 1 and 10 order by Req_Id desc";
		}
		
		LinkedList ondutyList=new LinkedList();
		ResultSet rsOnduty=ad.selectQuery(getOndutyRecords);
		try{
		if(rsOnduty.next()){

			OnDutyForm onduty=new OnDutyForm();
			onduty.setRequestNumber(rsOnduty.getInt("Req_Id"));
			onduty.setEmployeeNumber(rsOnduty.getString("Requester_Name"));
			onduty.setOnDutyType(rsOnduty.getString("onDuty_Type"));
			onduty.setLocationId(rsOnduty.getString("location")+"");
			onduty.setEmployeeName(rsOnduty.getString("EMP_FULLNAME"));
			onduty.setSubmitDate(rsOnduty.getString("Req_Date"));
			onduty.setStartDate(EMicroUtils.display(rsOnduty.getDate("start_date")));
			onduty.setLocationId(rsOnduty.getString("location"));
			onduty.setStartTime(rsOnduty.getString("startTime"));
			onduty.setEndDate(EMicroUtils.display(rsOnduty.getDate("end_date")));
			onduty.setEndTime(rsOnduty.getString("endTime"));
			onduty.setReason(rsOnduty.getString("reason"));
			onduty.setApprover(rsOnduty.getString("Req_Status"));
			ondutyList.add(onduty);
			
		}
		request.setAttribute("ondutyList", ondutyList);
		}catch (Exception e) {
			e.printStackTrace();
		}
		return mapping.findForward("ondutyDetails1");
	
	}
	public ActionForward approveMailRequest(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) { 
		ApprovalsForm approvalsForm = (ApprovalsForm) form;
		String userID=request.getParameter("userID");
		String reqId=request.getParameter("reqId");
		String status=request.getParameter("status");
		NewsandMediaDao ad=new NewsandMediaDao();
		Date dNow = new Date( );
		 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS");
			String dateNow = ft.format(dNow);
			String empID="";
			
   boolean leaveStatus=true;
   
	int year=0;
   
   String checkRecordStatus="select * from All_Request where Req_Type='Leave' and Req_Id='"+reqId+"' and (Pending_Approver='"+userID+"' or Approved_Persons='"+userID+"')";
	ResultSet rsLvStatus=ad.selectQuery(checkRecordStatus);
	try{
	while(rsLvStatus.next())
	{
		String lvStatus=rsLvStatus.getString("Req_Status");
		if(lvStatus.equalsIgnoreCase("Approved"))
		{
			status="Approve";
			leaveStatus=false;
			approvalsForm.setMessage2("");
	   		approvalsForm.setMessage("This request has already been approved.");
		}
		if(lvStatus.equalsIgnoreCase("Rejected"))
		{
			status="Reject";
			leaveStatus=false;
			approvalsForm.setMessage2("");
	   		approvalsForm.setMessage("This request has already been rejected.");
		}
		if(lvStatus.equalsIgnoreCase("Self Cancelled"))
		{
			status="Self Cancelled";
			leaveStatus=false;
			approvalsForm.setMessage2("");
	   		approvalsForm.setMessage("This request has already been self cancelld.");
		}
	}
	}catch (Exception e) {
		e.printStackTrace();
	}
	if(leaveStatus==true){		
   	if(status.equalsIgnoreCase("Approve"))
   	{
   		int recordCount=0;
   		try{
   	String checkRecord="select count(*) from All_Request where Req_Type='Leave' and Req_Id='"+reqId+"' and Req_Status='Approved' and Approved_Persons='"+userID+"'";
   	ResultSet rsChcek=ad.selectQuery(checkRecord);
   	while(rsChcek.next())
   	{
   		recordCount=rsChcek.getInt(1);
   		approvalsForm.setMessage("");
   		if(recordCount>0)
   		approvalsForm.setMessage2("This request has already been approved.");
   	}if(recordCount!=1)
   	{
	   	checkRecord="select count(*) from All_Request where Req_Type='Leave' and Req_Id='"+reqId+"' and Req_Status='Self Cancelled'";
	   	ResultSet rsChcek1=ad.selectQuery(checkRecord);
	   	while(rsChcek1.next())
	   	{
	   		recordCount=rsChcek1.getInt(1);
	   		approvalsForm.setMessage2("");
	   		if(recordCount>0)
	   		approvalsForm.setMessage("This request has already been self cancelld.");
	   		status="Self Cancelled";
	   	}
   	}
   	if(recordCount==0)
   	{
   		float noOfDays=0;
   		boolean existStatus=false;
   		String leaveType="";
   		String submit_date="";
   		String stdate="";
   		
   		String getLeaveDetails="select *,year(start_date) as year from leave_details where Req_Id='"+reqId+"'"; 
		ResultSet rsLeave=ad.selectQuery(getLeaveDetails);
		while(rsLeave.next())
		{
			noOfDays=rsLeave.getFloat("no_of_days");
			leaveType=rsLeave.getString("leave_type");
			empID=rsLeave.getString("firstname");
			submit_date=rsLeave.getString("submit_date");
			stdate=rsLeave.getString("start_date");
			year=Integer.parseInt(rsLeave.getString("year"));
			
		}
		
		int curyear = Calendar.getInstance().get(Calendar.YEAR);
	
		int priorityCout=0;
		int totalApproverCount=0;
		String dataFlowType=""; 
		String checkESSApproverList="select count(*) from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave'";
		ResultSet rsCheckInEss=ad.selectQuery(checkESSApproverList);
		while(rsCheckInEss.next())
		{
			int number=rsCheckInEss.getInt(1);
			totalApproverCount=rsCheckInEss.getInt(1);
			if(number==0)
			{
				existStatus=false;
			}else{
				existStatus=true;
			}
		}
	if(existStatus==true){
		String getDataFlowType="select * from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave' ";
		ResultSet rsDataFlowType=ad.selectQuery(getDataFlowType);
		while(rsDataFlowType.next())
		{
			dataFlowType=rsDataFlowType.getString("reqType");
		}
		if(dataFlowType.equalsIgnoreCase("sequential"))
		{
			int approverPriority=0;
			String getApprPriority="select Priority from ESS_Approvers where employeeNumber='"+empID+"' and ApproverId='"+userID+"' and essType='Leave'";
			ResultSet rsApprPriority=ad.selectQuery(getApprPriority);
			while(rsApprPriority.next())
			{
				approverPriority=rsApprPriority.getInt("Priority");
			}
			if(totalApproverCount==approverPriority)
			{
				//last approver
				
				existStatus=false;
				
				//check cancelled Record
                int cancelledCount=0;
                String getCheckCancelled="select COUNT(*) from All_Request where Req_Id='"+reqId+"' and Req_Type='Leave' and Req_Status='Cancelled'";
                ResultSet rsCheckCancel=ad.selectQuery(getCheckCancelled);
                while(rsCheckCancel.next())
                {
                	cancelledCount=rsCheckCancel.getInt(1);
                	if(cancelledCount>0)
                	{
                		existStatus=true;
                		 String updateSql= "update All_Request set Approved_Persons='"+userID+"', Last_approver='"+userID+"',Pending_approver='',Comments=''," +
                         "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' and Pending_approver='"+userID+"' and Req_Type='Leave'";
						 int upd=ad.SqlExecuteUpdate(updateSql);
							 if(upd>0)
							 {
								request.setAttribute("statusMessage2", "statusMessage2");
							approvalsForm.setMessage2("This Request already has been Cancelled");
							 }
                	}
                }
			}else{
				
			String nextApprover="";
			String getNextApprDetails="select ApproverId from ESS_Approvers where employeeNumber='"+empID+"' and Priority='"+(approverPriority+1)+"' and essType='Leave'";
            ResultSet rsNextApprDetails=ad.selectQuery(getNextApprDetails);
            while(rsNextApprDetails.next())
            {
            	nextApprover=rsNextApprDetails.getString("ApproverId");
            }
          //check cancelled Record
            int cancelledCount=0;
            String getCheckCancelled="select COUNT(*) from All_Request where Req_Id='"+reqId+"' and Req_Type='Leave' and Req_Status='Cancelled'";
            ResultSet rsCheckCancel=ad.selectQuery(getCheckCancelled);
            while(rsCheckCancel.next())
            {
            	cancelledCount=rsCheckCancel.getInt(1);
            	if(cancelledCount>0)
            	{
            		existStatus=true;
            		 String updateSql= "update All_Request set Approved_Persons='"+userID+"', Last_approver='"+userID+"',Pending_approver='',Comments=''," +
                     "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' and Pending_approver='"+userID+"' and Req_Type='Leave'";
					 int upd=ad.SqlExecuteUpdate(updateSql);
							 if(upd>0)
							 {
								request.setAttribute("statusMessage2", "statusMessage2");
						approvalsForm.setMessage2("This Request already has been Cancelled");
							 }
            	}
            }
            if(cancelledCount==0){
            String updateSql= "update All_Request set Approved_Persons='"+userID+"', Last_approver='"+userID+"',Pending_approver='',Comments=''," +
            "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' and Pending_approver='"+userID+"' and Req_Type='Leave'";
			 int upd=ad.SqlExecuteUpdate(updateSql);
			 approvalsForm.setMessage2("Request has been approved.");
				 if(upd>0)
				 {
					String saveRecReq="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments) values (";
					saveRecReq = saveRecReq + "'"+reqId+"','Leave','"+empID+"','"+submit_date+"','Pending','','"+nextApprover+"','No','"+empID+"','')";
					 int i1=ad.SqlExecuteUpdate(saveRecReq);
					 ad.connClose();
					 approvalsForm.setMessage("");
					 approvalsForm.setMessage2("");
					 approvalsForm.setMessage2("Request has been approved.");
						status="Approve";
					 EMailer email = new EMailer();
					 int j=email.sendMailToNextSequentialApprover(request, "", reqId, "Leave",nextApprover,empID);
					 
					 
				 }
		  }
			}
		
	}
		if(dataFlowType.equalsIgnoreCase("parallel"))
		{
			//check total Approve count
			
			int totalApproveCount=0;
			String getTotApprCount="select count(*) from All_Request where Req_Id='"+reqId+"' and Requester_Name='"+empID+"' and Req_Status='Approved' and Req_Type='Leave'";
			ResultSet rsTotApprCount=ad.selectQuery(getTotApprCount);
			while(rsTotApprCount.next())
			{
				totalApproveCount=rsTotApprCount.getInt(1);
			}
			if(totalApproveCount==0)
			{
				 String updateSql11= "update All_Request set Approved_Persons='"+userID+"', Last_approver='"+userID+"',Pending_approver='',Comments=''," +
		            "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved',Actual_Approver='"+userID+"',Actual_Approver_status='Approved',Actual_Approved_Date='"+dateNow+"',Actual_Approved_Comments='' where Req_Id='"+reqId+"' and Pending_approver='"+userID+"' and Req_Type='Leave'";
						 int upd1=ad.SqlExecuteUpdate(updateSql11);
						 status="Approve";
						 approvalsForm.setMessage2("Request has been approved.");
						 
						 
						 String frstapp="";
							String par1app="";
							String par2app="";
							
							//Approvers
							String getNextApprDetails="select * from ESS_Approvers where employeeNumber='"+empID+"'  and essType='Leave'";
                         ResultSet rsNextApprDetails=ad.selectQuery(getNextApprDetails);
                         while(rsNextApprDetails.next())
                         {
                         	frstapp=rsNextApprDetails.getString("ApproverId");
                         	par1app=rsNextApprDetails.getString("Parallel_Approver1");
                         	par2app=rsNextApprDetails.getString("Parallel_Approver2");
                         }
                         
                         if(!frstapp.equalsIgnoreCase(""))
							{
								String updateSql1= "update All_Request set Approved_Persons='"+frstapp+"', Last_approver='"+frstapp+"',Pending_approver='',Comments=''," +
		                                "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved',Actual_Approver='"+userID+"',Actual_Approver_status='Approved',Actual_Approved_Date='"+dateNow+"',Actual_Approved_Comments='' where Req_Id='"+reqId+"' and Pending_Approver='"+frstapp+"' and Req_Type='Leave'";
		   							 int upd11=ad.SqlExecuteUpdate(updateSql1);
							}
                         
                         if(par1app==null)
							{
								par1app="";
							}
							
							if(par2app==null)
							{
								par2app="";
							}
                         
                         if(!par1app.equalsIgnoreCase(""))
							{
								String updateSql1= "update All_Request set Approved_Persons='"+par1app+"', Last_approver='"+par1app+"',Pending_approver='',Comments=''," +
		                                "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved',Actual_Approver='"+userID+"',Actual_Approver_status='Approved',Actual_Approved_Date='"+dateNow+"',Actual_Approved_Comments='' where Req_Id='"+reqId+"' and Pending_Approver='"+par1app+"' and Req_Type='Leave'";
		   							 int upd11=ad.SqlExecuteUpdate(updateSql1);
							}
							
							if(!par2app.equalsIgnoreCase(""))
							{
								String updateSql1= "update All_Request set Approved_Persons='"+par2app+"', Last_approver='"+par2app+"',Pending_approver='',Comments=''," +
		                                "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved',Actual_Approver='"+userID+"',Actual_Approver_status='Approved',Actual_Approved_Date='"+dateNow+"',Actual_Approved_Comments='' where Req_Id='"+reqId+"' and Pending_Approver='"+par2app+"' and Req_Type='Leave'";
		   							 int upd11=ad.SqlExecuteUpdate(updateSql1);
							}
						 
						 
							existStatus=false;
				//check reject count 
				int totalRejectCount=0;
				String getTotRejectCount="select count(*) from All_Request where Req_Id='"+reqId+"' and Requester_Name='"+empID+"' and Req_Status='Rejected' and Req_Type='Leave'";
				ResultSet rsTotRejCount=ad.selectQuery(getTotRejectCount);
				while(rsTotRejCount.next())
				{
					totalRejectCount=rsTotRejCount.getInt(1);
				}
				if(totalRejectCount==0)
				{
				
				 String updateSql= "update All_Request set Approved_Persons='"+userID+"', Last_approver='"+userID+"',Pending_approver='',Comments=''," +
                   "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' and Pending_approver='"+userID+"' and Req_Type='Leave'";
					 int upd=ad.SqlExecuteUpdate(updateSql);
						 
				}
				if(totalRejectCount==2)
				{
					String updateSql1= "update All_Request set Req_Status='Approved', Comments='',approved_date='"+dateNow+"',rejected_date='',Last_Approver='"+userID+"',Pending_Approver='',Approved_Persons='"+userID+"' where Req_Id='"+reqId+"' and Pending_Approver='"+userID+"'  and Req_Type='Leave'";;
					int upd2=ad.SqlExecuteUpdate(updateSql1);
					
				}
			}if(totalApproveCount==1){
				
				//no one leave request is approved
				existStatus=false;
				
				//check cancelled Record
                int cancelledCount=0;
                String getCheckCancelled="select COUNT(*) from All_Request where Req_Id='"+reqId+"' and Req_Type='Leave' and Req_Status='Cancelled'";
                ResultSet rsCheckCancel=ad.selectQuery(getCheckCancelled);
                while(rsCheckCancel.next())
                {
                	cancelledCount=rsCheckCancel.getInt(1);
                	if(cancelledCount>0)
                	{
								request.setAttribute("statusMessage2", "statusMessage2");
								approvalsForm.setMessage2("This Request already has been Cancelled");
								existStatus=true;
                	}
                }
				
				
			}
			if(totalApproveCount==2)
			{
				//show message Approve
				String updateSql= "update All_Request set Approved_Persons='"+userID+"', Last_approver='"+userID+"',Pending_approver='',Comments=''," +
               "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' and Pending_approver='"+userID+"' and Req_Type='Leave'";
				 int upd=ad.SqlExecuteUpdate(updateSql);
				 	request.setAttribute("statusMessage2", "statusMessage2");
					approvalsForm.setMessage2("This Request already has been approved");
					existStatus=true;
			}
		}
		
	}
   	if(existStatus==false){	
	String modifyRequest="update  All_Request set Last_Approver='"+userID+"',Approved_Persons='"+userID+"',Req_Status='Approved',Pending_Approver='',approved_date='"+dateNow+"',rejected_date='' where Req_Type='Leave' and Req_Id='"+reqId+"' and Pending_Approver='"+userID+"'";	
	int statusChange=ad.SqlExecuteUpdate(modifyRequest);
    if(statusChange>0)
    {
    	approvalsForm.setMessage("");
    	approvalsForm.setMessage2("");
    	approvalsForm.setMessage2("Request has been approved.");
    	status="Approve";
    }
	String updateSql= "update leave_details set Last_approver='"+userID+"',Pending_approver='',leave_status='1',Approvel_Status='Approved',approved_date='"+dateNow+"',rejected_date='' where Req_Id='"+reqId+"'";
	ad.SqlExecuteUpdate(updateSql);
		float lvBal=0;
		float avlBal=0;
		float closingBal=0;
		float leaveAvaild=0;
		/*String getLeaveDetails="select * from leave_details where Req_Id='"+reqId+"'"; 
		ResultSet rsLeave=ad.selectQuery(getLeaveDetails);
		while(rsLeave.next())
		{
			noOfDays=rsLeave.getFloat("no_of_days");
			leaveType=rsLeave.getString("leave_type");
			empID=rsLeave.getString("firstname");
		}*/
		String leaveBal="select * from lv_type_d where lv_empcode='"+empID+"' and lv_typeid='"+leaveType+"' and lv_calyear='"+year+"'";
		ResultSet rsLeaveBal=ad.selectQuery(leaveBal);
		while(rsLeaveBal.next()){
			avlBal=rsLeaveBal.getFloat("lv_awtBal");
			closingBal=rsLeaveBal.getFloat("lv_clbal");
			leaveAvaild=rsLeaveBal.getFloat("lv_availed");
		}
		avlBal=avlBal-noOfDays;
		closingBal=closingBal-noOfDays;
		leaveAvaild=leaveAvaild+noOfDays;
		
	
	  
	///fianaicial year
		if(leaveType.equalsIgnoreCase("2") || leaveType.equalsIgnoreCase("3"))
		{
		if(curyear==year)
		{
	  String updateLeaveDetails="update lv_type_d set lv_clbal='"+closingBal+"',lv_awtBal='"+avlBal+"',lv_availed='"+leaveAvaild+"' where lv_typeid='"+leaveType+"' and lv_empcode='"+empID+"' and lv_calyear='"+year+"'";
	  int checkResult=ad.SqlExecuteUpdate(updateLeaveDetails);		
		}
		else
		{
			String updateLeaveDetails="update lv_type_d set lv_clbal='"+closingBal+"',lv_awtBal='"+avlBal+"',lv_availed='"+leaveAvaild+"' where lv_typeid='"+leaveType+"' and lv_empcode='"+empID+"' and lv_calyear='"+year+"'";
			  int checkResult=ad.SqlExecuteUpdate(updateLeaveDetails);	
			  
			  String updatecuryear="update lv_type_d set lv_clbal=lv_clbal-"+noOfDays+" ,lv_opbal=lv_opbal-"+noOfDays+" where lv_typeid='"+leaveType+"' and lv_empcode='"+empID+"' and lv_calyear='"+curyear+"'";
			  int curResult=ad.SqlExecuteUpdate(updatecuryear);	
		}
		}
		else
		{
			  String updateLeaveDetails="update lv_type_d set lv_clbal='"+closingBal+"',lv_awtBal='"+avlBal+"',lv_availed='"+leaveAvaild+"' where lv_typeid='"+leaveType+"' and lv_empcode='"+empID+"' and lv_calyear='"+year+"'";
			  int checkResult=ad.SqlExecuteUpdate(updateLeaveDetails);	
		}
	  
		///update comp_oT
		if(leaveType.equalsIgnoreCase("6"))
										
		{
			
			Date dNow1 = new Date();
			SimpleDateFormat ft1 = new SimpleDateFormat("yyyy-MM-dd");
			String todaydate = ft1.format(dNow1);
			
			
			float reqnoOfDays=noOfDays;
		    String upadte="select * from COMP_OT_SAP where Employee_Number='"+empID+"' and Comp_Off_Balance>0 and  "
             		+ "DATEDIFF(DAY,Start_Date,'"+stdate+"') <=(select comp_off_days  from location where location_code="
             		+ "(select locid from emp_official_info where pernr='"+empID+"')) and '"+stdate+"'>=Start_Date order by Start_Date ";
             ResultSet rs=ad.selectQuery(upadte);
		
			while(rs.next())
			{
				int chk=0;
				if(reqnoOfDays>1)
				{
					String update="update COMP_OT_SAP set Comp_Off_Availed_Date='"+stdate+"',Comp_Off_Availed_Days=Number_of_Days,Processd_Date='"+dateNow+"',Leav_req_no='"+reqId+"' where Employee_Number='"+empID+"' and Start_Date='"+rs.getString("Start_Date")+"' ";
					chk=ad.SqlExecuteUpdate(update);	
					
					String updt2="update COMP_OT_SAP set Comp_Off_Balance=Number_of_Days-Comp_Off_Availed_Days,Processd_Date='"+dateNow+"',Leav_req_no='"+reqId+"' where Employee_Number='"+empID+"' and Start_Date='"+rs.getString("Start_Date")+"'";
					chk=ad.SqlExecuteUpdate(updt2);
				}
				if(reqnoOfDays==1)
				{
					String update="update COMP_OT_SAP set Comp_Off_Availed_Date='"+stdate+"',Comp_Off_Availed_Days=Number_of_Days,Processd_Date='"+dateNow+"',Leav_req_no='"+reqId+"' where Employee_Number='"+empID+"' and Start_Date='"+rs.getString("Start_Date")+"' ";
					chk=ad.SqlExecuteUpdate(update);	
					
					String updt2="update COMP_OT_SAP set Comp_Off_Balance=Number_of_Days-Comp_Off_Availed_Days,Processd_Date='"+dateNow+"',Leav_req_no='"+reqId+"' where Employee_Number='"+empID+"' and Start_Date='"+rs.getString("Start_Date")+"'";
					chk=ad.SqlExecuteUpdate(updt2);
				}
				if(reqnoOfDays==0.5)
				{
					String update="update COMP_OT_SAP set Comp_Off_Availed_Date='"+stdate+"',Comp_Off_Availed_Days=Comp_Off_Availed_Days+0.5,Processd_Date='"+dateNow+"',Leav_req_no='"+reqId+"' where Employee_Number='"+empID+"' and Start_Date='"+rs.getString("Start_Date")+"' ";
					chk=ad.SqlExecuteUpdate(update);	
					
					String updt2="update COMP_OT_SAP set Comp_Off_Balance=Number_of_Days-Comp_Off_Availed_Days,Processd_Date='"+dateNow+"',Leav_req_no='"+reqId+"' where Employee_Number='"+empID+"' and Start_Date='"+rs.getString("Start_Date")+"'";
					chk=ad.SqlExecuteUpdate(updt2);
				}
				
				if(chk>0)
				{
				reqnoOfDays=reqnoOfDays-rs.getFloat("Number_of_Days");
				}
				
				if(reqnoOfDays<=0)
				{
					break;
				}
				
			}
			
			
			
		}
	  
	  
   	}
   	}
	}catch (Exception e) {
		e.printStackTrace();
	}
   	}
   	if(status.equalsIgnoreCase("Reject")){
   		
   		int recordCount=0;
   		String getLeaveDetails="select * from leave_details where Req_Id='"+reqId+"'"; 
		ResultSet rsLeave=ad.selectQuery(getLeaveDetails);
	   	try{
		while(rsLeave.next())
		{
			empID=rsLeave.getString("firstname");
		}
   	
   	String checkRecord="select count(*) from All_Request where Req_Type='Leave' and Req_Id='"+reqId+"' and Req_Status='Rejected'  and (Pending_Approver='"+userID+"' or Approved_Persons='"+userID+"')";
   	ResultSet rsChcek=ad.selectQuery(checkRecord);

   	while(rsChcek.next())
   	{
   		recordCount=rsChcek.getInt(1);
   		approvalsForm.setMessage("");
   		if(recordCount>0)
   		approvalsForm.setMessage("This request has already been rejected.");
   	}
   	if(recordCount!=1)
   	{
	checkRecord="select count(*) from All_Request where Req_Type='Leave' and Req_Id='"+reqId+"' and Req_Status='Self Cancelled'";
   	ResultSet rsChcek1=ad.selectQuery(checkRecord);
   	while(rsChcek1.next())
   	{
   		recordCount=rsChcek1.getInt(1);
   		approvalsForm.setMessage2("");
   		if(recordCount>0){
   		approvalsForm.setMessage("This request has already been self cancelld.");
   		status="Self Cancelled";
   		}
   	}
   	}
   	}catch (Exception e) {
		e.printStackTrace();
	}
   	
   	boolean existStatus=false;
   	try{
	String dataFlowType=""; 
	String checkESSApproverList="select count(*) from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave'";
	ResultSet rsCheckInEss=ad.selectQuery(checkESSApproverList);
	while(rsCheckInEss.next())
	{
		int number=rsCheckInEss.getInt(1);
		if(number==0)
		{
			existStatus=false;
		}else{
			existStatus=true;
		}
	}
	if(existStatus==true)
	{
		String getDataFlowType="select * from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave' ";
		ResultSet rsDataFlowType=ad.selectQuery(getDataFlowType);
		while(rsDataFlowType.next())
		{
			dataFlowType=rsDataFlowType.getString("reqType");
		}
		if(dataFlowType.equalsIgnoreCase("sequential")){
			existStatus=true;
		}
		if(dataFlowType.equalsIgnoreCase("parallel")){
			
			String frstapp="";
			String par1app="";
			String par2app="";
			
			//Approvers
			String getNextApprDetails="select * from ESS_Approvers where employeeNumber='"+empID+"'  and essType='Leave'";
            ResultSet rsNextApprDetails=ad.selectQuery(getNextApprDetails);
            while(rsNextApprDetails.next())
            {
            	frstapp=rsNextApprDetails.getString("ApproverId");
            	par1app=rsNextApprDetails.getString("Parallel_Approver1");
            	par2app=rsNextApprDetails.getString("Parallel_Approver2");
            }
		//check reject count
			String comments="";
			int totalRejectCount=0;
			String getTotApprCount="select count(*) from All_Request where Req_Id='"+reqId+"' and Requester_Name='"+empID+"' and Req_Status='Rejected' and Req_Type='Leave'";
			ResultSet rsTotApprCount=ad.selectQuery(getTotApprCount);
			while(rsTotApprCount.next())
			{
				totalRejectCount=rsTotApprCount.getInt(1);
			}
			if(totalRejectCount==0)
			{
				MainDao exeQry = new MainDao();
				LinkedList paramList =  new LinkedList();
				//check Approve Count
				int totalApproveCount=0;
				 getTotApprCount="select count(*) from All_Request where Req_Id='"+reqId+"' and Requester_Name='"+empID+"' and Req_Status='Approved' and Req_Type='Leave'";
				 rsTotApprCount=ad.selectQuery(getTotApprCount);
				while(rsTotApprCount.next())
				{
					totalApproveCount=rsTotApprCount.getInt(1);
				}
				if(totalApproveCount==1)
				{
					String updateSql= "update All_Request set Req_Status='Rejected', Comments='"+comments+"',approved_date='',rejected_date='"+dateNow+"',Last_Approver='"+userID+"',Pending_Approver='',Approved_Persons='"+userID+"' where Req_Id='"+reqId+"' and Pending_Approver='"+userID+"'  and Req_Type='Leave'";
					int upd1=exeQry.SqlExecuteUpdate(updateSql, paramList);
					approvalsForm.setMessage("");
			   		approvalsForm.setMessage2("Request has been rejected.");
			   		status="Reject";
				}
				if(totalApproveCount==2)
				{
					String updateSql= "update All_Request set Req_Status='Rejected', Comments='"+comments+"',approved_date='',rejected_date='"+dateNow+"',Last_Approver='"+userID+"',Pending_Approver='',Approved_Persons='"+userID+"' where Req_Id='"+reqId+"' and Pending_Approver='"+userID+"'  and Req_Type='Leave'";
					int upd1=exeQry.SqlExecuteUpdate(updateSql, paramList);
					approvalsForm.setMessage("");
					approvalsForm.setMessage2("Request has been rejected.");
			   		status="Reject";
					
				}
				if(totalApproveCount==0)
				{
					String	updateSql= "update All_Request set Req_Status='Rejected', Comments='"+comments+"',approved_date='',rejected_date='"+dateNow+"',Last_Approver='"+userID+"',Pending_Approver='',Approved_Persons='"+userID+"',Actual_Approver='"+userID+"' where Req_Id='"+reqId+"' and Pending_Approver='"+userID+"'  and Req_Type='Leave'";
				int upd1=exeQry.SqlExecuteUpdate(updateSql, paramList);
				
				
				approvalsForm.setMessage("");
		   		approvalsForm.setMessage2("Request has been rejected.");
		   		status="Reject";
		   		
		   		if(par1app==null)
				{
					par1app="";
				}
				
				if(par2app==null)
				{
					par2app="";
				}
		   		

		   		if(!frstapp.equalsIgnoreCase(""))
				{
					String updateSql1= "update All_Request set Approved_Persons='"+frstapp+"', Last_approver='"+frstapp+"',Pending_approver='',Comments='"+comments+"'," +
                            "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected',Actual_Approver='"+userID+"',Actual_Approver_status='Rejected',Actual_Approved_Date='"+dateNow+"',Actual_Approved_Comments='' where Req_Id='"+reqId+"' and Pending_Approver='"+frstapp+"' and Req_Type='Leave'";
							 int upd11=ad.SqlExecuteUpdate(updateSql1);
				}
								


             if(!par1app.equalsIgnoreCase(""))
						{
							String updateSql1= "update All_Request set Approved_Persons='"+par1app+"', Last_approver='"+par1app+"',Pending_approver='',Comments='"+comments+"'," +
	                                "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected',Actual_Approver='"+userID+"',Actual_Approver_status='Rejected',Actual_Approved_Date='"+dateNow+"',Actual_Approved_Comments='' where Req_Id='"+reqId+"' and Pending_Approver='"+par1app+"' and Req_Type='Leave'";
	   							 int upd11=ad.SqlExecuteUpdate(updateSql1);
						}
						
						if(!par2app.equalsIgnoreCase(""))
						{
							String updateSql1= "update All_Request set Approved_Persons='"+par2app+"', Last_approver='"+par2app+"',Pending_approver='',Comments='"+comments+"'," +
	                                "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected',Actual_Approver='"+userID+"',Actual_Approver_status='Rejected',Actual_Approved_Date='"+dateNow+"',Actual_Approved_Comments='' where Req_Id='"+reqId+"' and Pending_Approver='"+par2app+"' and Req_Type='Leave'";
	   							 int upd11=ad.SqlExecuteUpdate(updateSql1);
						}
		   		
					
				    
					String updateSql1= "update leave_details set Approvel_Status='Rejected',Last_Approver='"+userID+"',Pending_Approver='',approved_date='',rejected_date='"+dateNow+"'  where Req_Id='"+reqId+"'";
					int ii=ad.SqlExecuteUpdate(updateSql1);
					//change leave Balence
					float noOfDays=0;
					String leaveType="";
					float lvBal=0;
					float avlBal=0;
					float closingBal=0;
						try{
						 getLeaveDetails="select *,year(start_date) as year from leave_details where Req_Id='"+reqId+"'"; 
						 rsLeave=ad.selectQuery(getLeaveDetails);
						while(rsLeave.next())
						{
							noOfDays=rsLeave.getFloat("no_of_days");
							leaveType=rsLeave.getString("leave_type");
							empID=rsLeave.getString("firstname");
							year=Integer.parseInt(rsLeave.getString("year"));
							
							
						}
						String leaveBal="select * from lv_type_d where lv_empcode='"+empID+"' and lv_typeid='"+leaveType+"' and lv_calyear='"+year+"'";
						ResultSet rsLeaveBal=ad.selectQuery(leaveBal);
						while(rsLeaveBal.next()){
							avlBal=rsLeaveBal.getFloat("lv_awtBal");
							closingBal=rsLeaveBal.getFloat("lv_clbal");
						}
						avlBal=avlBal-noOfDays;
						closingBal=closingBal-noOfDays;
					  String updateLeaveDetails="update lv_type_d set lv_awtBal='"+avlBal+"' where lv_typeid='"+leaveType+"' and lv_empcode='"+empID+"' and lv_calyear='"+year+"'";
					  int checkResult=ad.SqlExecuteUpdate(updateLeaveDetails);
						
						}catch (Exception e) {
							e.printStackTrace();
						}
					
			
				}
			}
			if(totalRejectCount==1)
			{
				existStatus=true;
			}
			if(totalRejectCount==2)
			{
				MainDao exeQry = new MainDao();
				LinkedList paramList =  new LinkedList();
				String	updateSql= "update All_Request set Req_Status='Rejected', Comments='"+comments+"',approved_date='',rejected_date='"+dateNow+"',Last_Approver='"+userID+"',Pending_Approver='',Approved_Persons='"+userID+"' where Req_Id='"+reqId+"' and Pending_Approver='"+userID+"'  and Req_Type='Leave'";
				int upd1=exeQry.SqlExecuteUpdate(updateSql, paramList);
				
				approvalsForm.setMessage("");
		   		approvalsForm.setMessage2("Request has been rejected.");
		   		status="Reject";
			}
			
			
		}
	}
   	}catch (Exception e) {
		e.printStackTrace();
	}
   	
	if(existStatus==true)
	{
   	if(recordCount==0)
   	{
   		String modifyRequest="update  All_Request set Last_Approver='"+userID+"',Approved_Persons='"+userID+"',Req_Status='Rejected',Pending_Approver='',approved_date='',rejected_date='"+dateNow+"' where Req_Type='Leave' and Req_Id='"+reqId+"' and  Pending_Approver='"+userID+"'";	
		int statsChange=ad.SqlExecuteUpdate(modifyRequest);	
		if(statsChange>0){
			
		    	approvalsForm.setMessage("");
		   		approvalsForm.setMessage2("Request has been rejected.");
		   		status="Reject";
		    
			String updateSql= "update leave_details set Approvel_Status='Rejected',Last_Approver='"+userID+"',Pending_Approver='',approved_date='',rejected_date='"+dateNow+"'  where Req_Id='"+reqId+"'";
			int ii=ad.SqlExecuteUpdate(updateSql);
			//change leave Balence
			float noOfDays=0;
			String leaveType="";
			float lvBal=0;
			float avlBal=0;
			float closingBal=0;
				try{
				 getLeaveDetails="select *,year(start_date) as year from leave_details where Req_Id='"+reqId+"'"; 
				 rsLeave=ad.selectQuery(getLeaveDetails);
				while(rsLeave.next())
				{
					noOfDays=rsLeave.getFloat("no_of_days");
					leaveType=rsLeave.getString("leave_type");
					empID=rsLeave.getString("firstname");
					year=Integer.parseInt(rsLeave.getString("year"));
					
				}
				String leaveBal="select * from lv_type_d where lv_empcode='"+empID+"' and lv_typeid='"+leaveType+"' and lv_calyear='"+year+"'";
				ResultSet rsLeaveBal=ad.selectQuery(leaveBal);
				while(rsLeaveBal.next()){
					avlBal=rsLeaveBal.getFloat("lv_awtBal");
					closingBal=rsLeaveBal.getFloat("lv_clbal");
				}
				avlBal=avlBal-noOfDays;
				closingBal=closingBal-noOfDays;
			  String updateLeaveDetails="update lv_type_d set lv_awtBal='"+avlBal+"' where lv_typeid='"+leaveType+"' and lv_empcode='"+empID+"' and lv_calyear='"+year+"'";
			  int checkResult=ad.SqlExecuteUpdate(updateLeaveDetails);
				
				}catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
   	}
   	}
	}
		String getLeaveRecords="";
		if(status.equalsIgnoreCase("Approve")){
			getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Requester_Id) AS  RowNum,all_R.Req_Id,leave.leave_type," +
			"emp.EMP_FULLNAME,all_R.Req_Date,all_R.Req_Status,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days from  All_Request as all_R," +
			"emp_official_info as emp,leave_details as leave where all_R.Last_Approver='"+userID+"' and  all_R.Req_Id='"+reqId+"' and Req_Status='Approved' and all_R.Req_Type='Leave' and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id) " +
			"as  sub Where  sub.RowNum between 1 and 10 order by RowNum desc";
		}
		if(status.equalsIgnoreCase("Reject")){
			getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Requester_Id) AS  RowNum,all_R.Req_Id,leave.leave_type," +
			"emp.EMP_FULLNAME,all_R.Req_Date,all_R.Req_Status,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days from  All_Request as all_R," +
			"emp_official_info as emp,leave_details as leave where all_R.Approved_Persons='"+userID+"' and  all_R.Req_Id='"+reqId+"' and Req_Status='Rejected' and all_R.Req_Type='Leave' and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id) " +
			"as  sub Where  sub.RowNum between 1 and 10 order by RowNum desc";
		}
		if(status.equalsIgnoreCase("Self Cancelled")){
			getLeaveRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Requester_Id) AS  RowNum,all_R.Req_Id,leave.leave_type," +
			"emp.EMP_FULLNAME,all_R.Req_Date,all_R.Req_Status,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days from  All_Request as all_R," +
			"emp_official_info as emp,leave_details as leave where all_R.Pending_Approver='"+userID+"' and  all_R.Req_Id='"+reqId+"' and Req_Status='Self Cancelled' and all_R.Req_Type='Leave' and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id) " +
			"as  sub Where  sub.RowNum between 1 and 10 order by RowNum desc";
		}
		LinkedList leaveList=new LinkedList();
		ResultSet rsLeave=ad.selectQuery(getLeaveRecords);
		try{
		if(rsLeave.next()){
		LeaveForm leave=new LeaveForm();
		leave.setRequestNumber(rsLeave.getInt("Req_Id"));
		
	String	leaveType=rsLeave.getString("leave_type");
		if(leaveType.equalsIgnoreCase("1")){
			leaveType="Casual";
		}
		if(leaveType.equalsIgnoreCase("2")){
			leaveType="Sick";
		}
		if(leaveType.equalsIgnoreCase("3")){
			leaveType="privilege";
		}
		if(leaveType.equalsIgnoreCase("4")){
			leaveType="Loss Of Pay";
		}
		if(leaveType.equalsIgnoreCase("5")){
			leaveType="Maternity";
		}
		if(leaveType.equalsIgnoreCase("6")){
			leaveType="Comp-Off";
		}
		leave.setLeaveType(leaveType);
		leave.setEmployeeName(rsLeave.getString("EMP_FULLNAME"));
		leave.setSubmitDate(rsLeave.getString("Req_Date"));
		leave.setStartDate(EMicroUtils.display(rsLeave.getDate("start_date")));
		String stDur=rsLeave.getString("start_duration");
		
		if(stDur.equalsIgnoreCase("FD")){
			stDur="Full Day";
		}
		if(stDur.equalsIgnoreCase("FH")){
			stDur="First Half";
		}
		if(stDur.equalsIgnoreCase("SH")){
			stDur="Second Half";
		}
		leave.setStartDurationType(stDur);
		
		leave.setEndDate(EMicroUtils.display(rsLeave.getDate("end_date")));
		
		String endDur=rsLeave.getString("end_duration");
		
		if(endDur.equalsIgnoreCase("FD")){
			endDur="Full Day";
		}
		if(endDur.equalsIgnoreCase("FH")){
			endDur="First Half";
		}
		if(endDur.equalsIgnoreCase("SH")){
			endDur="Second Half";
		}
		leave.setEndDurationType(endDur);
		leave.setNoOfDays(rsLeave.getString("no_of_days"));
		leave.setApproveStatus(rsLeave.getString("Req_Status"));
		leaveList.add(leave);
		}
		request.setAttribute("LeaveList", leaveList);
		}catch (Exception e) {
			e.printStackTrace();
		}
	
   	
		return mapping.findForward("leaveDetails1");
	
	}
	
	public ActionForward approveRequest(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ApprovalsForm approvalsForm = (ApprovalsForm) form;
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		NewsandMediaDao ad=new NewsandMediaDao();
		if(user==null){
			request.setAttribute("message","Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		String selectedReq[]=approvalsForm.getSelectedRequestNo();
		System.out.println("total="+selectedReq.length);
		String reqType=approvalsForm.getReqRequstType();
		approvalsForm.setReqRequstType(reqType);
		String status=approvalsForm.getSelectedFilter();
		approvalsForm.setSelectedFilter(status);
		String swipetype="";
		String type="";
		String inTime="";
		String outTime="";
		String c[] = null;
		if(reqType.equalsIgnoreCase("Permission"))
		{

		
			
			for(int i=0;i<selectedReq.length;i++)
			{
				Date dNow = new Date( );
				 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS");
				String dateNow = ft.format(dNow);
				String reqId=selectedReq[i];
				String getLeaveDetails="select left(startTime,5)+' '+right(startTime,2) as startTime1,left(endTime,5)+' '+right(endTime,2) as endTime1,* from Permission_details where request_no='"+reqId+"'"; 
				ResultSet rsLeave=ad.selectQuery(getLeaveDetails);
				String empID="";
				String submit_date="";
				String manualdate="";
				
			
				try {
					while(rsLeave.next())
					{
						empID=rsLeave.getString("user_id");
						submit_date=rsLeave.getString("date");
						manualdate=rsLeave.getString("date");
						c=submit_date.split("-");
						String a[]=submit_date.split("-");
						submit_date=a[2]+"/"+a[1]+"/"+a[0];
						
						type = rsLeave.getString("type");
						inTime =rsLeave.getString("startTime1");
						outTime=rsLeave.getString("endTime1");
						 swipetype=rsLeave.getString("swipe_type");
					}
				
				boolean existStatus=false;
				boolean checkStatus=false;
				
				int priorityCout=0;
				int totalApproverCount=0;
				String dataFlowType=""; 
				String checkESSApproverList="select count(*) from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave'";
				ResultSet rsCheckInEss=ad.selectQuery(checkESSApproverList);
				while(rsCheckInEss.next())
				{
					int number=rsCheckInEss.getInt(1);
					totalApproverCount=rsCheckInEss.getInt(1);
					if(number==0)
					{
						existStatus=false;
					}else{
						existStatus=true;
					}
				}
				if(existStatus==true){
					String getDataFlowType="select * from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave' ";
					ResultSet rsDataFlowType=ad.selectQuery(getDataFlowType);
					while(rsDataFlowType.next())
					{
						dataFlowType=rsDataFlowType.getString("reqType");
					}
					if(dataFlowType.equalsIgnoreCase("sequential"))
					{
						int approverPriority=0;
						String approver="";
						String papprover1="";
						String papprover2="";
						
						String getApprPriority="select * from ESS_Approvers where employeeNumber='"+empID+"' and (ApproverId='"+user.getEmployeeNo()+"' or parallel_approver1='"+user.getEmployeeNo()+"' or parallel_approver2='"+user.getEmployeeNo()+"') and essType='Leave'";
						ResultSet rsApprPriority=ad.selectQuery(getApprPriority);
						if(rsApprPriority.next())
						{
							approverPriority=rsApprPriority.getInt("Priority");
							approver=rsApprPriority.getString("ApproverId");
							papprover1=rsApprPriority.getString("Parallel_Approver1");
							papprover2=rsApprPriority.getString("Parallel_Approver2");
						}
						
						
						if(papprover1==null )
						{
							papprover1="";
						}
						if(papprover2==null)
						{
							papprover2="";
						}
					    int count =0 ;
						String sj="";
					    if(!approver.equalsIgnoreCase(""))
						 sj = "select case when count(*) >1 then 1 else count(*) end from ESS_CANCEL_APPR where Location ='"+EmpLoc(empID)+"' and (hr_no = '"+approver+"' or  hr_no = '"+papprover1+"' or  hr_no = '"+papprover2+"')   ";
					    else
					    	 sj = "select case when count(*) >1 then 1 else count(*) end from ESS_CANCEL_APPR where Location ='"+EmpLoc(empID)+"' and hr_no = '"+user.getEmployeeNo()+"'   ";
					    	
					   
					    ResultSet rsk = ad.selectQuery(sj);
					    if(rsk.next())
					    {
					    	count = rsk.getInt(1);
					    }
						
					    
					    
					    	
					    	
					    
					    if(count == 1 && approverPriority>=0)
					    {

					    	
					    	
					    	
					    	String updateSql= " update All_Request set  actual_approver ='"+user.getEmployeeNo()+"', Approved_Persons=pending_approver, Last_approver=pending_approver,Pending_approver='',Comments=''," +
			                         		  " approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' and Pending_approver in (select hr_no from ESS_CANCEL_APPR where Location ='"+EmpLoc(empID)+"')"
			                         		  		+ " and Req_Type='Permission' ";
							int upd=ad.SqlExecuteUpdate(updateSql);
							
							
							String updateSql1= "update Permission_details set Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Approver_Status='1',approved_date='"+dateNow+"',rejected_date='' where request_no='"+reqId+"'";
							ad.SqlExecuteUpdate(updateSql1);
							
							
							if(!type.equalsIgnoreCase("Permission"))
							{
							///insert into manula entry
							String manualswipe="";
							String manualtype="";
							
							if(swipetype.equalsIgnoreCase("In"))
							{
								manualswipe="I";
							}
							else
							{
								manualswipe="O";
							}
							
							if(type.equalsIgnoreCase("late Coming"))
							{
								manualtype="Late";
							}
							else
							{
								manualtype=type;
							}
							
							String up="update EMP_MANUAL_SWIPE set Status_Flag=0 where pernr='"+empID+"' and Start_date='"+manualdate+"' and In_Out='"+manualswipe+"'";
						    int s1d= ad.SqlExecuteUpdate(up);
						    
						    String s ="insert into EMP_MANUAL_SWIPE(Pernr,Start_date,In_Out,Start,Lost_Entry_Reason_Type,Remarks,Date,Time,Username,Created_date,Status_Flag) "
						    		+ "values('"+empID+"','"+manualdate+"', '"+manualswipe+"','"+getrailwaytime(inTime)+"', '"+manualtype+"','User Request',getdate(),getdate(),'"+user.getEmployeeNo()+"',getdate(),'1')";
							
							int k = ad.SqlExecuteUpdate(s);
							
							String time= "";
							String time_Status="";
							if(swipetype .equalsIgnoreCase("In"))
							{
								
								
								time = "update EMP_IN_OUT set  day"+Integer.parseInt(c[2])+" ='"+getrailwaytime(inTime)+"' where year ='"+Integer.parseInt(c[0])+"'  "
							    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"' and in_out = 'I' ";
									 int s1 = ad.SqlExecuteUpdate(time);
									 
							if(type.equalsIgnoreCase("late") || type.equalsIgnoreCase("Missing") || type.equalsIgnoreCase("Forgot Swipe"))
							{
								
									 
								time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" ='PP'+RIGHT(day"+Integer.parseInt(c[2])+",2) where year ='"+Integer.parseInt(c[0])+"'  "
									    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
											 int s2 = ad.SqlExecuteUpdate(time_Status);	 
								
							}
							if(type.equalsIgnoreCase("early")|| type.equalsIgnoreCase("Personal"))
							{
								
							    
							    time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" ='PM'+RIGHT(day"+Integer.parseInt(c[2])+",2) where year ='"+Integer.parseInt(c[0])+"'  "
							    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
									 int s2 = ad.SqlExecuteUpdate(time_Status);
							}
							}
							else
								
							{
								
								time = "update EMP_IN_OUT set  day"+Integer.parseInt(c[2])+" ='"+getrailwaytime(inTime)+"' where year ='"+Integer.parseInt(c[0])+"'  "
							    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"' and in_out = 'O' ";
									 int s1 = ad.SqlExecuteUpdate(time);
								

								if(type.equalsIgnoreCase("late") || type.equalsIgnoreCase("Missing") || type.equalsIgnoreCase("Forgot Swipe"))
								{
									
										 
									time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" =LEFT(day"+Integer.parseInt(c[2])+",2)+'PP' where year ='"+Integer.parseInt(c[0])+"'  "
										    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
												 int s2 = ad.SqlExecuteUpdate(time_Status);	 
									
								}
								if(type.equalsIgnoreCase("early")|| type.equalsIgnoreCase("Personal"))
								{
									
								    
								    time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" =LEFT(day"+Integer.parseInt(c[2])+",2)+'PM' where year ='"+Integer.parseInt(c[0])+"'  "
								    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
										 int s2 = ad.SqlExecuteUpdate(time_Status);
								}
								
							}
							
							}
							existStatus=false;
					    }
					    
					  
					    if(count == 0 && approverPriority>0)
						    
					    {	
					    	
					    	if(totalApproverCount==approverPriority)
							{
						
							//last approver
							
							String nextApprover="";
							String getNextApprDetails="select top 1 * from ESS_CANCEL_APPR where Location ='"+EmpLoc(empID)+"' ";
				            ResultSet rsNextApprDetails=ad.selectQuery(getNextApprDetails);
				            while(rsNextApprDetails.next())
				            {
				            	nextApprover=rsNextApprDetails.getString("hr_no");
				            }
							existStatus=false;
							
							/* SimpleDateFormat ft1 = new SimpleDateFormat ("dd/MM/yyyy");
							 String submitDate = ft1.format(dNow);*/
							
							//check cancelled Record
							String updateSql= " update All_Request set  actual_approver ='"+user.getEmployeeNo()+"', Approved_Persons=pending_approver, Last_approver=pending_approver,Pending_approver='',Comments=''," +
		                   		  " approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' and Pending_approver='"+user.getEmployeeNo()+"' "
		                   		  		+ " and Req_Type='Permission'";
					int upd=ad.SqlExecuteUpdate(updateSql);
			                
			                String as="select * from ess_cancel_appr where Location='"+EmpLoc(empID)+"' ";
			        		ResultSet ads=ad.selectQuery(as);
			        		try {
			        			while(ads.next())
			        			{		
			        			
			        			String saveRecReq="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments) values (";
			    			saveRecReq = saveRecReq + "'"+reqId+"','Permission','"+empID+"','"+submit_date+"','Pending','','"+ads.getString("HR_NO")+"','','"+user.getEmployeeNo()+"','')";
			        			int p=ad.SqlExecuteUpdate(saveRecReq);
			        			
			        			EMailer email = new EMailer();
			    				
			    				String approvermail="";
			    				
			    				int	ij = email.sendMailToNextSequentialApprover(request, approvermail,reqId, "Permission",ads.getString("HR_NO"),empID);
			        			 
			        			}
			        		} catch (SQLException e) {
			        			// TODO Auto-generated catch block
			        			e.printStackTrace();
			        		}
						
						 
						
					    }
					    	else
							{
								String nextApprover="";
								String getNextApprDetails="select ApproverId from ESS_Approvers where employeeNumber='"+empID+"' and Priority='"+(approverPriority+1)+"' and essType='Leave'";
					            ResultSet rsNextApprDetails=ad.selectQuery(getNextApprDetails);
					            while(rsNextApprDetails.next())
					            {
					            	nextApprover=rsNextApprDetails.getString("ApproverId");
					            }
					            
					            
					         	
						    	String updateSql= " update All_Request set  actual_approver ='"+user.getEmployeeNo()+"', Approved_Persons=pending_approver, Last_approver=pending_approver,Pending_approver='',Comments=''," +
				                         		  " approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' and Pending_approver='"+user.getEmployeeNo()+"' "
				                         		  		+ " and Req_Type='Permission'";
								int upd=ad.SqlExecuteUpdate(updateSql);
					            
					            String saveRecReq="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments) values (";
				    			saveRecReq = saveRecReq + "'"+reqId+"','Permission','"+empID+"','"+submit_date+"','Pending','','"+nextApprover+"','','"+user.getEmployeeNo()+"','')";
				        			int p=ad.SqlExecuteUpdate(saveRecReq);
				        			
				        			EMailer email = new EMailer();
				    				
				    				String approvermail="";
				    				
				    				int	ij = email.sendMailToNextSequentialApprover(request, approvermail,reqId, "Permission",nextApprover,empID);
				        			 
				    				existStatus=false;
							}
					    }
						
					
				}
					if(dataFlowType.equalsIgnoreCase("parallel"))
					{
						

						int approverPriority=0;
						String approver="";
						String papprover1="";
						String papprover2="";
						
						String getApprPriority="select * from ESS_Approvers where employeeNumber='"+empID+"' and (ApproverId='"+user.getEmployeeNo()+"' or parallel_approver1='"+user.getEmployeeNo()+"' or parallel_approver2='"+user.getEmployeeNo()+"') and essType='Leave' and priority=1";
						ResultSet rsApprPriority=ad.selectQuery(getApprPriority);
						if(rsApprPriority.next())
						{
							approverPriority=rsApprPriority.getInt("Priority");
							approver=rsApprPriority.getString("ApproverId");
							papprover1=rsApprPriority.getString("Parallel_Approver1");
							papprover2=rsApprPriority.getString("Parallel_Approver2");
						}
						
						
					    int count =0 ;
						String sj="";
					    if(!approver.equalsIgnoreCase(""))
						 sj = "select case when count(*) >1 then 1 else count(*) end from ESS_CANCEL_APPR where Location ='"+EmpLoc(empID)+"' and (hr_no = '"+approver+"' or  hr_no = '"+papprover1+"' or  hr_no = '"+papprover2+"')   ";
					    else
					    	 sj = "select case when count(*) >1 then 1 else count(*) end from ESS_CANCEL_APPR where Location ='"+EmpLoc(empID)+"' and hr_no = '"+user.getEmployeeNo()+"'   ";
					    	
					   
					    ResultSet rsk = ad.selectQuery(sj);
					    if(rsk.next())
					    {
					    	count = rsk.getInt(1);
					    }
						
					    if(count == 1 && approverPriority==1)
					    {

					    	
					    	
					    	
					    	String updateSql= " update All_Request set  actual_approver ='"+user.getEmployeeNo()+"', Approved_Persons=pending_approver, Last_approver=pending_approver,Pending_approver='',Comments=''," +
			                         		  " approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' "
			                         		  		+ " and Req_Type='Permission'";
							int upd=ad.SqlExecuteUpdate(updateSql);
							
							
							String updateSql1= "update Permission_details set Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Approver_Status='1',approved_date='"+dateNow+"',rejected_date='' where request_no='"+reqId+"'";
							ad.SqlExecuteUpdate(updateSql1);
							
							if(!type.equalsIgnoreCase("Permission"))
							{
							
							///insert into manula entry
							String manualswipe="";
							String manualtype="";
							
							if(swipetype.equalsIgnoreCase("In"))
							{
								manualswipe="I";
							}
							else
							{
								manualswipe="O";
							}
							
							if(type.equalsIgnoreCase("late Coming"))
							{
								manualtype="Late";
							}
							else
							{
								manualtype=type;
							}
							
							String up="update EMP_MANUAL_SWIPE set Status_Flag=0 where pernr='"+empID+"' and Start_date='"+manualdate+"' and In_Out='"+manualswipe+"'";
						    int s1d= ad.SqlExecuteUpdate(up);
						    
						    String s ="insert into EMP_MANUAL_SWIPE(Pernr,Start_date,In_Out,Start,Lost_Entry_Reason_Type,Remarks,Date,Time,Username,Created_date,Status_Flag) "
						    		+ "values('"+empID+"','"+manualdate+"', '"+manualswipe+"','"+getrailwaytime(inTime)+"', '"+manualtype+"','User Request',getdate(),getdate(),'"+user.getEmployeeNo()+"',getdate(),'1')";
							
							int k = ad.SqlExecuteUpdate(s);
							
							String time= "";
							String time_Status="";
							if(swipetype .equalsIgnoreCase("In"))
							{
								
								
								time = "update EMP_IN_OUT set  day"+Integer.parseInt(c[2])+" ='"+getrailwaytime(inTime)+"' where year ='"+Integer.parseInt(c[0])+"'  "
							    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"' and in_out = 'I' ";
									 int s1 = ad.SqlExecuteUpdate(time);
									 
							if(type.equalsIgnoreCase("late") || type.equalsIgnoreCase("Missing") || type.equalsIgnoreCase("Forgot Swipe"))
							{
								
									 
								time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" ='PP'+RIGHT(day"+Integer.parseInt(c[2])+",2) where year ='"+Integer.parseInt(c[0])+"'  "
									    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
											 int s2 = ad.SqlExecuteUpdate(time_Status);	 
								
							}
							if(type.equalsIgnoreCase("early")|| type.equalsIgnoreCase("Personal"))
							{
								
							    
							    time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" ='PM'+RIGHT(day"+Integer.parseInt(c[2])+",2) where year ='"+Integer.parseInt(c[0])+"'  "
							    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
									 int s2 = ad.SqlExecuteUpdate(time_Status);
							}
							}
							else
								
							{
								
								time = "update EMP_IN_OUT set  day"+Integer.parseInt(c[2])+" ='"+getrailwaytime(inTime)+"' where year ='"+Integer.parseInt(c[0])+"'  "
							    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"' and in_out = 'O' ";
									 int s1 = ad.SqlExecuteUpdate(time);
								

								if(type.equalsIgnoreCase("late") || type.equalsIgnoreCase("Missing") || type.equalsIgnoreCase("Forgot Swipe"))
								{
									
										 
									time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" =LEFT(day"+Integer.parseInt(c[2])+",2)+'PP' where year ='"+Integer.parseInt(c[0])+"'  "
										    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
												 int s2 = ad.SqlExecuteUpdate(time_Status);	 
									
								}
								if(type.equalsIgnoreCase("early")|| type.equalsIgnoreCase("Personal"))
								{
									
								    
								    time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" =LEFT(day"+Integer.parseInt(c[2])+",2)+'PM' where year ='"+Integer.parseInt(c[0])+"'  "
								    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
										 int s2 = ad.SqlExecuteUpdate(time_Status);
								}
								
							}
							
							}
							existStatus=false;	
					    }
					    
					    if(count == 1 && approverPriority==0 )
					    {

					    	String updateSql= " update All_Request set  actual_approver ='"+user.getEmployeeNo()+"', Approved_Persons=pending_approver, Last_approver=pending_approver,Pending_approver='',Comments=''," +
			                         		  " approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' and Pending_approver in (select hr_no from ESS_CANCEL_APPR where Location ='"+EmpLoc(empID)+"')"
			                         		  		+ " and Req_Type='Permission'";
							int upd=ad.SqlExecuteUpdate(updateSql);
							
							
							
							
							  String updateSql1= "update Permission_details set Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Approver_Status='1',approved_date='"+dateNow+"',rejected_date='' where request_no='"+reqId+"'";
								ad.SqlExecuteUpdate(updateSql1);
									
								if(!type.equalsIgnoreCase("Permission"))
								{
								///insert into manula entry
								String manualswipe="";
								String manualtype="";
								
								if(swipetype.equalsIgnoreCase("In"))
								{
									manualswipe="I";
								}
								else
								{
									manualswipe="O";
								}
								
								if(type.equalsIgnoreCase("late Coming"))
								{
									manualtype="Late";
								}
								else
								{
									manualtype=type;
								}
								
								String up="update EMP_MANUAL_SWIPE set Status_Flag=0 where pernr='"+empID+"' and Start_date='"+manualdate+"' and In_Out='"+manualswipe+"'";
							    int s1d= ad.SqlExecuteUpdate(up);
							    
							    String s ="insert into EMP_MANUAL_SWIPE(Pernr,Start_date,In_Out,Start,Lost_Entry_Reason_Type,Remarks,Date,Time,Username,Created_date,Status_Flag) "
							    		+ "values('"+empID+"','"+manualdate+"', '"+manualswipe+"','"+getrailwaytime(inTime)+"', '"+manualtype+"','User Request',getdate(),getdate(),'"+user.getEmployeeNo()+"',getdate(),'1')";
								
								int k = ad.SqlExecuteUpdate(s);
							
							String time= "";
							String time_Status="";
							if(swipetype .equalsIgnoreCase("In"))
							{
								
								
								time = "update EMP_IN_OUT set  day"+Integer.parseInt(c[2])+" ='"+getrailwaytime(inTime)+"' where year ='"+Integer.parseInt(c[0])+"'  "
							    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"' and in_out = 'I' ";
									 int s1 = ad.SqlExecuteUpdate(time);
									 
							if(type.equalsIgnoreCase("late") || type.equalsIgnoreCase("Missing") || type.equalsIgnoreCase("Forgot Swipe"))
							{
								
									 
								time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" ='PP'+RIGHT(day"+Integer.parseInt(c[2])+",2) where year ='"+Integer.parseInt(c[0])+"'  "
									    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
											 int s2 = ad.SqlExecuteUpdate(time_Status);	 
								
							}
							if(type.equalsIgnoreCase("early")|| type.equalsIgnoreCase("Personal"))
							{
								
							    
							    time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" ='PM'+RIGHT(day"+Integer.parseInt(c[2])+",2) where year ='"+Integer.parseInt(c[0])+"'  "
							    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
									 int s2 = ad.SqlExecuteUpdate(time_Status);
							}
							}
							else
								
							{
								
								time = "update EMP_IN_OUT set  day"+Integer.parseInt(c[2])+" ='"+getrailwaytime(inTime)+"' where year ='"+Integer.parseInt(c[0])+"'  "
							    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"' and in_out = 'O' ";
									 int s1 = ad.SqlExecuteUpdate(time);
								

								if(type.equalsIgnoreCase("late") || type.equalsIgnoreCase("Missing") || type.equalsIgnoreCase("Forgot Swipe"))
								{
									
										 
									time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" =LEFT(day"+Integer.parseInt(c[2])+",2)+'PP' where year ='"+Integer.parseInt(c[0])+"'  "
										    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
												 int s2 = ad.SqlExecuteUpdate(time_Status);	 
									
								}
								if(type.equalsIgnoreCase("early")|| type.equalsIgnoreCase("Personal"))
								{
									
								    
								    time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" =LEFT(day"+Integer.parseInt(c[2])+",2)+'PM' where year ='"+Integer.parseInt(c[0])+"'  "
								    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
										 int s2 = ad.SqlExecuteUpdate(time_Status);
								}
								
							}}
							existStatus=false;
					    }
					    if(count == 0 && approverPriority==1)
						    
					    {	
						
							//last approver
							
							String nextApprover="";
							String getNextApprDetails="select top 1 * from ESS_CANCEL_APPR where Location ='"+EmpLoc(empID)+"' ";
				            ResultSet rsNextApprDetails=ad.selectQuery(getNextApprDetails);
				            while(rsNextApprDetails.next())
				            {
				            	nextApprover=rsNextApprDetails.getString("hr_no");
				            }
							existStatus=false;
							
					    	String updateSql= " update All_Request set  actual_approver ='"+user.getEmployeeNo()+"', Approved_Persons=pending_approver, Last_approver=pending_approver,Pending_approver='',Comments=''," +
		                   		  " approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' "
		                   		  		+ " and Req_Type='Permission'";
					int upd=ad.SqlExecuteUpdate(updateSql);
			                
			                String as="select * from ess_cancel_appr where Location='"+EmpLoc(empID)+"' ";
			        		ResultSet ads=ad.selectQuery(as);
			        		try {
			        			while(ads.next())
			        			{		
			        			
			        			String saveRecReq="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments) values (";
			    			saveRecReq = saveRecReq + "'"+reqId+"','Permission','"+empID+"','"+submit_date+"','Pending','','"+ads.getString("HR_NO")+"','','"+user.getEmployeeNo()+"','')";
			        			int p=ad.SqlExecuteUpdate(saveRecReq);
			        			
			        			EMailer email = new EMailer();
			    				
			    				String approvermail="";
			    				
			    				int	ij = email.sendMailToNextSequentialApprover(request, approvermail,reqId, "Permission",ads.getString("HR_NO"),empID);
			        			 
			        			}
			        		} catch (SQLException e) {
			        			// TODO Auto-generated catch block
			        			e.printStackTrace();
			        		}
						
						 
						
					    }
					
				
						
					}
				}
				
				if(existStatus==false){
				/*String modifyRequest="update  All_Request set Last_Approver='"+user.getEmployeeNo()+"',Approved_Persons='"+user.getEmployeeNo()+"',Req_Status='Approved',Pending_Approver='',approved_date='"+dateNow+"',rejected_date='' where Req_Type='Permission' and Req_Id='"+selectedReq[i]+"' and Pending_Approver='"+user.getEmployeeNo()+"'";	
				int statusChange=ad.SqlExecuteUpdate(modifyRequest);*/
				
				
				
				
				}
				} catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
				
		
			
		}
		if(reqType.equalsIgnoreCase("On Duty")){
			for(int i=0;i<selectedReq.length;i++){
				try{
				Date dNow = new Date( );
				 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS");
				String dateNow = ft.format(dNow);
				boolean existStatus=false;
				boolean checkStatus=false;
				String submit_date="";
				String empID="";
				String getLeaveDetails="select * from OnDuty_details where request_no='"+selectedReq[i]+"'"; 
				ResultSet rsLeave=ad.selectQuery(getLeaveDetails);
				while(rsLeave.next())
				{
					empID=rsLeave.getString("user_id");
					submit_date=rsLeave.getString("submit_date");
					
				}
				int priorityCout=0;
				int totalApproverCount=0;
				String dataFlowType=""; 
				String checkESSApproverList="select count(*) from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave'";
				ResultSet rsCheckInEss=ad.selectQuery(checkESSApproverList);
				while(rsCheckInEss.next())
				{
					int number=rsCheckInEss.getInt(1);
					totalApproverCount=rsCheckInEss.getInt(1);
					if(number==0)
					{
						existStatus=false;
					}else{
						existStatus=true;
					}
				}
				if(existStatus==true){
					String getDataFlowType="select * from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave' ";
					ResultSet rsDataFlowType=ad.selectQuery(getDataFlowType);
					while(rsDataFlowType.next())
					{
						dataFlowType=rsDataFlowType.getString("reqType");
					}
					if(dataFlowType.equalsIgnoreCase("sequential"))
					{
						int approverPriority=0;
						String getApprPriority="select Priority from ESS_Approvers where employeeNumber='"+empID+"' and ApproverId='"+user.getEmployeeNo()+"' and essType='Leave'";
						ResultSet rsApprPriority=ad.selectQuery(getApprPriority);
						while(rsApprPriority.next())
						{
							approverPriority=rsApprPriority.getInt("Priority");
						}
						if(totalApproverCount==approverPriority)
						{
							//last approver
							existStatus=false;
							//check cancelled Record
		                    int cancelledCount=0;
		                    String getCheckCancelled="select COUNT(*) from All_Request where Req_Id='"+selectedReq[i]+"' and Req_Type='On Duty' and Req_Status='Cancelled'";
		                    ResultSet rsCheckCancel=ad.selectQuery(getCheckCancelled);
		                    while(rsCheckCancel.next())
		                    {
		                    	cancelledCount=rsCheckCancel.getInt(1);
		                    	if(cancelledCount>0)
		                    	{
		                    		existStatus=true;
		                    		 String updateSql= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Comments=''," +
		                             "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+selectedReq[i]+"' and Pending_approver='"+user.getEmployeeNo()+"' and Req_Type='On Duty'";
									 int upd=ad.SqlExecuteUpdate(updateSql);
			   							 if(upd>0)
			   							 {
			   								//request.setAttribute("statusMessage2", "statusMessage2");
									//	statusForm.setMessage2("This Request already has been Cancelled");
			   							 }
		                    	}
		                    }
						}else{
						String nextApprover="";
						String getNextApprDetails="select ApproverId from ESS_Approvers where employeeNumber='"+empID+"' and Priority='"+(approverPriority+1)+"' and essType='Leave'";
		                ResultSet rsNextApprDetails=ad.selectQuery(getNextApprDetails);
		                while(rsNextApprDetails.next())
		                {
		                	nextApprover=rsNextApprDetails.getString("ApproverId");
		                }
		                
		                //check cancelled Record
		                int cancelledCount=0;
		                String getCheckCancelled="select COUNT(*) from All_Request where Req_Id='"+selectedReq[i]+"' and Req_Type='On Duty' and Req_Status='Cancelled'";
		                ResultSet rsCheckCancel=ad.selectQuery(getCheckCancelled);
		                while(rsCheckCancel.next())
		                {
		                	cancelledCount=rsCheckCancel.getInt(1);
		                	if(cancelledCount>0)
		                	{
		                		existStatus=true;
		                		 String updateSql= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Comments=''," +
		                         "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+selectedReq[i]+"' and Pending_approver='"+user.getEmployeeNo()+"' and Req_Type='On Duty'";
								 int upd=ad.SqlExecuteUpdate(updateSql);
									 if(upd>0)
									 {
										
										//request.setAttribute("statusMessage2", "statusMessage2");
									//statusForm.setMessage2("This Request already has been Cancelled");
									 }
		                	}
		                }
		                if(cancelledCount==0){
		                String updateSql= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Comments=''," +
		                "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+selectedReq[i]+"' and Pending_approver='"+user.getEmployeeNo()+"' and Req_Type='On Duty'";
						 int upd=ad.SqlExecuteUpdate(updateSql);
						 request.setAttribute("statusMessage2", "statusMessage2");
							//statusForm.setMessage2("Request has been approved");
							 if(upd>0)
							 {
								String saveRecReq="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments) values (";
								saveRecReq = saveRecReq + "'"+selectedReq[i]+"','On Duty','"+empID+"','"+submit_date+"','Pending','','"+nextApprover+"','No','"+empID+"','')";
								 i=ad.SqlExecuteUpdate(saveRecReq);
								 ad.connClose();
								 EMailer email = new EMailer();
								 int j=email.sendMailToNextSequentialApprover(request, "", selectedReq[i], "On Duty",nextApprover,empID);
							 }
					  }
						}
					}
					if(dataFlowType.equalsIgnoreCase("parallel"))
					{
						
						String frstapp="";
						String par1app="";
						String par2app="";
						
						//Approvers
						String getNextApprDetails="select * from ESS_Approvers where employeeNumber='"+empID+"'  and essType='Leave'";
			            ResultSet rsNextApprDetails=ad.selectQuery(getNextApprDetails);
			            while(rsNextApprDetails.next())
			            {
			            	frstapp=rsNextApprDetails.getString("ApproverId");
			            	par1app=rsNextApprDetails.getString("Parallel_Approver1");
			            	par2app=rsNextApprDetails.getString("Parallel_Approver2");
			            }
						
						
						//check total Approve count
						int totalApproveCount=0;
						String getTotApprCount="select count(*) from All_Request where Req_Id='"+selectedReq[i]+"' and Requester_Name='"+empID+"' and Req_Status='Approved' and Req_Type='On Duty'";
						ResultSet rsTotApprCount=ad.selectQuery(getTotApprCount);
						while(rsTotApprCount.next())
						{
							totalApproveCount=rsTotApprCount.getInt(1);
						}
						if(totalApproveCount==0)
						{
							//check reject count 
							int totalRejectCount=0;
							String getTotRejectCount="select count(*) from All_Request where Req_Id='"+selectedReq[i]+"' and Requester_Name='"+empID+"' and Req_Status='Rejected' and Req_Type='On Duty'";
							ResultSet rsTotRejCount=ad.selectQuery(getTotRejectCount);
							while(rsTotRejCount.next())
							{
								totalRejectCount=rsTotRejCount.getInt(1);
							}
							getTotRejectCount="select count(*) from All_Request where Req_Id='"+selectedReq[i]+"' and Requester_Name='"+empID+"' and Req_Status='Cancelled' and Req_Type='On Duty'";
							 rsTotRejCount=ad.selectQuery(getTotRejectCount);
							while(rsTotRejCount.next())
							{
								totalRejectCount=totalRejectCount+rsTotRejCount.getInt(1);
							}
							if(totalRejectCount==0)
							{
							 String updateSql= "update All_Request set Approved_Persons='"+frstapp+"', Last_approver='"+frstapp+"',Pending_approver='',Comments=''," +
		                        "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+selectedReq[i]+"' and Pending_approver='"+frstapp+"' and Req_Type='On Duty'";
								 int upd=ad.SqlExecuteUpdate(updateSql);
									 if(upd>0)
									 {
										 if(par1app==null)
											{
												par1app="";
											}
											
											if(par2app==null)
											{
												par2app="";
											}
										 
										 if(!par1app.equalsIgnoreCase(""))
											{
												 String updateSql1= "update All_Request set Approved_Persons='"+par1app+"', Last_approver='"+par1app+"',Pending_approver='',Comments=''," +
										                    "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+selectedReq[i]+"' and Pending_approver='"+par1app+"' and Req_Type='On Duty'";
															 int upd1=ad.SqlExecuteUpdate(updateSql1);
											}
											
											if(!par2app.equalsIgnoreCase(""))
											{
												 String updateSql1= "update All_Request set Approved_Persons='"+par2app+"', Last_approver='"+par2app+"',Pending_approver='',Comments=''," +
										                    "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+selectedReq[i]+"' and Pending_approver='"+par2app+"' and Req_Type='On Duty'";
															 int upd1=ad.SqlExecuteUpdate(updateSql1);
											}
											
											existStatus=false;
										 
										 
										//request.setAttribute("statusMessage2", "statusMessage2");
										//statusForm.setMessage2("Request has been approved");
									 }
							}
							
							if(totalRejectCount==1)
							{
								String updateSql= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Comments=''," +
		                        "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+selectedReq[i]+"' and Pending_approver='"+user.getEmployeeNo()+"' and Req_Type='On Duty'";
								 int upd=ad.SqlExecuteUpdate(updateSql);
								
							}
							if(totalRejectCount==2)
							{
								String updateSql= "update OnDuty_details set Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',OnDuty_status='2',Approver_Status='Rejected',approved_date='',rejected_date='"+dateNow+"',comments='' where request_no='"+selectedReq[i]+"'";
								int recordChange=ad.SqlExecuteUpdate(updateSql);
								
								String updateSql1= "update All_Request set Req_Status='Approved', Comments='',approved_date='"+dateNow+"',rejected_date='',Last_Approver='"+user.getEmployeeNo()+"',Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"' where Req_Id='"+selectedReq[i]+"' and Pending_Approver='"+user.getEmployeeNo()+"'  and Req_Type='On Duty'";;
								int upd2=ad.SqlExecuteUpdate(updateSql1);
								if(upd2>0){
									//request.setAttribute("statusMessage", "statusMessage");
									//statusForm.setMessage("This request already has been rejected");
								}
								
								
							}
						}if(totalApproveCount==1){
							//no one leave request is approved
							existStatus=false;
						}
						if(totalApproveCount==2)
						{
							
							//show message Approve
							String updateSql1= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Comments=''," +
		                    "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+selectedReq[i]+"' and Pending_approver='"+user.getEmployeeNo()+"' and Req_Type='On Duty'";
							 int upd=ad.SqlExecuteUpdate(updateSql1);
								 if(upd>0)
								 {
									request.setAttribute("statusMessage2", "statusMessage2");
								//statusForm.setMessage2("This  request already has been  approved");
								 }
						}
					}
				}
				if(existStatus==false){
				String modifyRequest="update  All_Request set Last_Approver='"+user.getEmployeeNo()+"',Approved_Persons='"+user.getEmployeeNo()+"',Req_Status='Approved',Pending_Approver='',approved_date='"+dateNow+"',rejected_date='' where Req_Type='On Duty' and Req_Id='"+selectedReq[i]+"' and Pending_Approver='"+user.getEmployeeNo()+"'";	
				int statusChange=ad.SqlExecuteUpdate(modifyRequest);
			
				String updateSql= "update OnDuty_details set Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',OnDuty_status='1',Approver_Status='Approved',approved_date='"+dateNow+"',rejected_date='' where request_no='"+selectedReq[i]+"'";
				ad.SqlExecuteUpdate(updateSql);
				}
		}catch (Exception e) {
			e.printStackTrace();
		}
			}
		}
		
		if(reqType.equalsIgnoreCase("Customer Master")){
			for(int i=0;i<selectedReq.length;i++){
				Date dNow = new Date( );
				 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS");
					String dateNow = ft.format(dNow);
				String location="";
				String matGroup="";
				String approver="";
				String parllelAppr1="";
				String parllelAppr2="";
				String reqDate="";
				String reqesterID="";
				String requestNo="";
				String reqId=selectedReq[i];
				int priorityCout=0;
				int checkStatus=0;
				String matType="Customer Master";
				String userRole="";
				try{
					
					approvalsForm.setComments("");
					String getMatGroup="select Customer_Type from CUSTOMER_MASTER_M where REQUEST_NO='"+reqId+"' ";
				 	ResultSet rsMatGrup=ad.selectQuery(getMatGroup);
				 	while(rsMatGrup.next()){
				 		matGroup=rsMatGrup.getString("Customer_Type");
				 		
				 	}
				 	if(matGroup.equalsIgnoreCase("Exports"))
				 	{
				 		matGroup="Export";
				 	}
				 	String test="";
					String getProrityCout="select max(Priority) from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"'";
					ResultSet rsCout=ad.selectQuery(getProrityCout);
					while(rsCout.next())
					{
						priorityCout=rsCout.getInt(1);
						test=rsCout.getString(1);
					}
					if(test==null){
						getProrityCout="select max(Priority) from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group=''";
						rsCout=ad.selectQuery(getProrityCout);
						while(rsCout.next())
						{
							priorityCout=rsCout.getInt(1);
						}
					}
					
					checkStatus=0;
					int apprverPriority=0;
					String getApproverDetails="select * from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and (Approver_Id='"+user.getEmployeeNo()+"' or Parllel_Approver_1='"+user.getEmployeeNo()+"' or Parllel_Approver_2='"+user.getEmployeeNo()+"') ";
					ResultSet rsAppDet=ad.selectQuery(getApproverDetails);
					while(rsAppDet.next())
					{
						checkStatus=1;
						apprverPriority=rsAppDet.getInt("Priority");
						approver=rsAppDet.getString("Approver_Id");
						parllelAppr1=rsAppDet.getString("Parllel_Approver_1");
						parllelAppr2=rsAppDet.getString("Parllel_Approver_2");
						userRole=rsAppDet.getString("Role");
					}
					//last approver creator
					if(priorityCout==apprverPriority)
					{
						approvalsForm.setMessage("Please Provide SAP Code No.");
						
					}else{

					    String nextAppr="";
					    String nextPar1="";
					    String nextPar2="";
					    checkStatus=0;
						String getNextApprover="select Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and Priority='"+(apprverPriority+1)+"'";
						ResultSet rsNextApp=ad.selectQuery(getNextApprover);
						while(rsNextApp.next())
						{  
							checkStatus=1;
							nextAppr=rsNextApp.getString("Approver_Id");
							nextPar1=rsNextApp.getString("Parllel_Approver_1");
							nextPar2=rsNextApp.getString("Parllel_Approver_2");
						}
						if(checkStatus==0)
						{
							getNextApprover="select Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' and Priority='"+(apprverPriority+1)+"'";
							rsNextApp=ad.selectQuery(getNextApprover);
							while(rsNextApp.next())
							{  
								checkStatus=1;
								nextAppr=rsNextApp.getString("Approver_Id");
								nextPar1=rsNextApp.getString("Parllel_Approver_1");
								nextPar2=rsNextApp.getString("Parllel_Approver_2");
							}
						}
					String empNo=user.getEmployeeNo();
						if(empNo.equalsIgnoreCase(approver))
						{
							String updateStatus="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+user.getEmployeeNo()+"'," +
							"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Customer Master' and Pending_Approver='"+user.getEmployeeNo()+"'";
						    int saveStatus=0;
						    saveStatus=ad.SqlExecuteUpdate(updateStatus);
						    
						    if(!(parllelAppr1.equalsIgnoreCase("")))
						    {
						    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+parllelAppr1+"'," +
									"Pending_Approver='',Approved_Persons='"+parllelAppr1+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Customer Master' and Pending_Approver='"+parllelAppr1+"'";
								    ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
						    }
						    if(!(parllelAppr2.equalsIgnoreCase("")))
						    {
						    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+parllelAppr2+"'," +
									"Pending_Approver='',Approved_Persons='"+parllelAppr2+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"'and Req_Type='Customer Master' and Pending_Approver='"+parllelAppr2+"'";
								    ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
						    }
						    if(saveStatus>0)
						    {
						    	approvalsForm.setMessage2("Request Is Approved Successfully");
						    	 
						    	String recordStatus="select * from All_Request where Req_Id='"+reqId+"' and Approved_Persons='"+user.getEmployeeNo()+"'";
						    	ResultSet rsRecDet=ad.selectQuery(recordStatus);
						    	while(rsRecDet.next())
						    	{
						    		requestNo=rsRecDet.getString("Requester_Name");
						    		reqDate=rsRecDet.getString("Req_Date");
						    		reqesterID=rsRecDet.getString("Requester_Name");
						    	}
						    	rsRecDet.close();
						    	ad.connClose();
						    	System.out.println(userRole);
						    	if(userRole.equalsIgnoreCase("Accounts"))
						    	{
						    	//
						    		  String updateRecord="update CUSTOMER_MASTER_M set last_approver='"+user.getFullName()+"',pending_approver='No' where REQUEST_NO='"+reqId+"'";
					    			
					    				ad.SqlExecuteUpdate(updateRecord);
						  
						    		
						    		
						    	}
						    	
						    	
						    	//update last Approver and Pending Approver
						    	//GET pending approvers
						    	if(!(userRole.equalsIgnoreCase("Creator")))
						    	{
						    	checkStatus=0;
						    	String pendingApprovers="";
						    	String nextApprovers="";
								getNextApprover="select emp.EMP_FULLNAME,Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers as mat,emp_official_info AS emp where " +
										" Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
								ResultSet rsPendignApp=ad.selectQuery(getNextApprover);
								while(rsPendignApp.next())
								{  
									checkStatus=1;
									pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
								}
								if(checkStatus==0)
								{
									getNextApprover="select emp.EMP_FULLNAME,Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers as mat,emp_official_info AS emp where " +
											" Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
									rsPendignApp=ad.selectQuery(getNextApprover);
									while(rsPendignApp.next())
									{  
										checkStatus=1;
										pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
									}
								}
								if(!(pendingApprovers.equalsIgnoreCase(""))){
									pendingApprovers=pendingApprovers.substring(0, (pendingApprovers.length()-2));	
								}
								 String updateRecord="update CUSTOMER_MASTER_M set last_approver='"+user.getFullName()+"',pending_approver='"+pendingApprovers+"',Approve_Status='In Process' where REQUEST_NO='"+reqId+"'";
					    			
								 int check=	ad.SqlExecuteUpdate(updateRecord);
								
								
						    	}
						    	// insert record to next approver
						    	String insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
						    	" values('"+reqId+"','Customer Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextAppr+"','No','"+reqesterID+"','','"+matType+"')";
						    	ad.SqlExecuteUpdate(insertAllRequest);
						    	EMailer email = new EMailer();
						    	String approvermail="";
						    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Customer Master", nextAppr, reqesterID);
						    	if(!(nextPar1.equalsIgnoreCase(""))){
						    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
							    	" values('"+reqId+"','Customer Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar1+"','No','"+reqesterID+"','','"+matType+"')";
							    	ad.SqlExecuteUpdate(insertAllRequest);
							    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Vendor Master", nextPar1, reqesterID);
						    	}
						    	if(!(nextPar2.equalsIgnoreCase(""))){
						    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
							    	" values('"+reqId+"','Customer Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar2+"','No','"+reqesterID+"','','"+matType+"')";
							    	ad.SqlExecuteUpdate(insertAllRequest);
							    	 email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Material Code Request", nextPar2, reqesterID);
						    	}
						    	
						    }else{
						    	approvalsForm.setMessage("Error..Request Is Not Approved");
						    }
							
						}if(!(parllelAppr1.equalsIgnoreCase(""))){
							
							if(empNo.equalsIgnoreCase(parllelAppr1)){
								String updateStatus="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+user.getEmployeeNo()+"'," +
								"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Customer Master' and Pending_Approver='"+user.getEmployeeNo()+"'";
							    int saveStatus=0;
							    saveStatus=ad.SqlExecuteUpdate(updateStatus);
							    
							    String updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+approver+"'," +
								"Pending_Approver='',Approved_Persons='"+approver+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Customer Master' and Pending_Approver='"+approver+"'";
							    ad.SqlExecuteUpdate(updateStatusForApprover); 
							    
							    if(!(parllelAppr2.equalsIgnoreCase("")))
							    {
							    	  updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+parllelAppr2+"'," +
										"Pending_Approver='',Approved_Persons='"+parllelAppr2+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Customer Master' and Pending_Approver='"+parllelAppr2+"'";
									    ad.SqlExecuteUpdate(updateStatusForApprover); 
							    }
							   
							    if(saveStatus>0)
							    {
							    	approvalsForm.setMessage2("Request Is Approved Successfully");
							    	String recordStatus="select * from All_Request where Req_Id='"+reqId+"' and Approved_Persons='"+user.getEmployeeNo()+"'";
							    	ResultSet rsRecDet=ad.selectQuery(recordStatus);
							    	while(rsRecDet.next())
							    	{
							    		requestNo=rsRecDet.getString("Requester_Name");
							    		reqDate=rsRecDet.getString("Req_Date");
							    		reqesterID=rsRecDet.getString("Requester_Name");
							    	}
							    	
							    	// insert record to next approver
							    	String insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
							    	" values('"+reqId+"','Customer Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextAppr+"','No','"+reqesterID+"','','"+matType+"')";
							    	ad.SqlExecuteUpdate(insertAllRequest);
							    	EMailer email = new EMailer();
							    	String approvermail="";
							    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Customer Master", nextAppr, reqesterID);
							    	if(!(nextPar1.equalsIgnoreCase(""))){
							    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
								    	" values('"+reqId+"','Customer Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar1+"','No','"+reqesterID+"','','"+matType+"')";
								    	ad.SqlExecuteUpdate(insertAllRequest);
								    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Customer Master", nextPar1, reqesterID);
							    	}
							    	if(!(nextPar2.equalsIgnoreCase(""))){
							    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
								    	" values('"+reqId+"','Customer Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar2+"','No','"+reqesterID+"','','"+matType+"')";
								    	ad.SqlExecuteUpdate(insertAllRequest);
								    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Customer Master", nextPar2, reqesterID);
							    	}
							    	
							    	if(!(userRole.equalsIgnoreCase("Creator")))
							    	{
							    	checkStatus=0;
							    	String pendingApprovers="";
							    	String nextApprovers="";
									getNextApprover="select emp.EMP_FULLNAME,Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers as mat,emp_official_info AS emp where " +
											"Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
									ResultSet rsPendignApp=ad.selectQuery(getNextApprover);
									while(rsPendignApp.next())
									{  
										checkStatus=1;
										pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
									}
									if(checkStatus==0)
									{
										getNextApprover="select emp.EMP_FULLNAME,Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  as mat,emp_official_info AS emp where " +
												"Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
										rsPendignApp=ad.selectQuery(getNextApprover);
										while(rsPendignApp.next())
										{  
											checkStatus=1;
											pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
										}
									}
									if(!(pendingApprovers.equalsIgnoreCase(""))){
										pendingApprovers=pendingApprovers.substring(0, (pendingApprovers.length()-2));	
									}
									
									String updateRecord="update CUSTOMER_MASTER_M set last_approver='"+user.getFullName()+"',pending_approver='"+pendingApprovers+"',Approve_Status='In Process' where REQUEST_NO='"+reqId+"'";
					    			
									 int check=	ad.SqlExecuteUpdate(updateRecord);
									}
							    	
							    	
							    }else{
							    	approvalsForm.setMessage("Error..Request Is Not Approved");
							    }
								
							}
							
							
						}
						if(!(parllelAppr2.equalsIgnoreCase(""))){

							
							if(empNo.equalsIgnoreCase(parllelAppr2)){
								String updateStatus="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+user.getEmployeeNo()+"'," +
								"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Customer Master' and Pending_Approver='"+user.getEmployeeNo()+"'";
							    int saveStatus=0;
							    saveStatus=ad.SqlExecuteUpdate(updateStatus);
							    String updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+approver+"'," +
								"Pending_Approver='',Approved_Persons='"+approver+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Customer Master' and Pending_Approver='"+approver+"'";
							    ad.SqlExecuteUpdate(updateStatusForApprover); 
							    
							    if(!(parllelAppr1.equalsIgnoreCase("")))
							    {
							    	  updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+parllelAppr1+"'," +
										"Pending_Approver='',Approved_Persons='"+parllelAppr1+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Customer Master' and Pending_Approver='"+parllelAppr1+"'";
									    ad.SqlExecuteUpdate(updateStatusForApprover); 
							    }
							    if(saveStatus>0)
							    {
							    	 
							    	String recordStatus="select * from All_Request where Req_Id='"+reqId+"' and Approved_Persons='"+user.getEmployeeNo()+"'";
							    	ResultSet rsRecDet=ad.selectQuery(recordStatus);
							    	while(rsRecDet.next())
							    	{
							    		requestNo=rsRecDet.getString("Requester_Name");
							    		reqDate=rsRecDet.getString("Req_Date");
							    		reqesterID=rsRecDet.getString("Requester_Name");
							    	}
							    	
							    	// insert record to next approver
							    	String insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
							    	" values('"+reqId+"','Customer Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextAppr+"','No','"+reqesterID+"','','"+matType+"')";
							    	ad.SqlExecuteUpdate(insertAllRequest);
							    	EMailer email = new EMailer();
							    	String approvermail="";
							    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Customer Master", nextAppr, reqesterID);
							    	if(!(nextPar1.equalsIgnoreCase(""))){
							    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
								    	" values('"+reqId+"','Customer Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar1+"','No','"+reqesterID+"','','"+matType+"')";
								    	ad.SqlExecuteUpdate(insertAllRequest);
								    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Customer Master", nextPar1, reqesterID);
							    	}
							    	if(!(nextPar2.equalsIgnoreCase(""))){
							    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
								    	" values('"+reqId+"','Customer Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar2+"','No','"+reqesterID+"','','"+matType+"')";
								    	ad.SqlExecuteUpdate(insertAllRequest);
								    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Customer Master", nextPar2, reqesterID);
							    	}
							    	
							    	if(!(userRole.equalsIgnoreCase("Creator")))
							    	{
							    	checkStatus=0;
							    	String pendingApprovers="";
							    	String nextApprovers="";
									getNextApprover="select emp.EMP_FULLNAME,Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers as mat," +
									"emp_official_info AS emp where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
									ResultSet rsPendignApp=ad.selectQuery(getNextApprover);
									while(rsPendignApp.next())
									{  
										checkStatus=1;
										pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
									}
									if(checkStatus==0)
									{
										getNextApprover="select emp.EMP_FULLNAME,Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers as mat,emp_official_info AS emp " +
										"where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
										rsPendignApp=ad.selectQuery(getNextApprover);
										while(rsPendignApp.next())
										{  
											checkStatus=1;
											pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
										}
									}
									if(!(pendingApprovers.equalsIgnoreCase(""))){
										pendingApprovers=pendingApprovers.substring(0, (pendingApprovers.length()-2));	
									}
									
									String updateRecord="update CUSTOMER_MASTER_M set last_approver='"+user.getFullName()+"',pending_approver='"+pendingApprovers+"',Approve_Status='In Process' where REQUEST_NO='"+reqId+"'";
					    			
									 int check=	ad.SqlExecuteUpdate(updateRecord);
									}
							    	
							    	
							    }else{
							    	approvalsForm.setMessage("Error..Request Is Not Approved");
							    }
								
							}
						}
				     
					
					}
				 	
				 	
				
					
				}catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
		
		if(reqType.equalsIgnoreCase("Vendor Master")){
			
			for(int i=0;i<selectedReq.length;i++){
				approvalsForm.setComments("");
				Date dNow = new Date( );
				 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS");
					String dateNow = ft.format(dNow);
				String location="";
				String matGroup="";
				String approver="";
				String parllelAppr1="";
				String parllelAppr2="";
				String reqDate="";
				String reqesterID="";
				String requestNo="";
				String reqId=selectedReq[i];
				int priorityCout=0;
				int checkStatus=0;
				String matType="Vendor Master";
				String userRole="";
				try{
					String getMatGroup="select acc.ACCOUNT_GROUP_NAME from vendor_master_m as v,ACCOUNT_GROUP_M as acc where v.REQUEST_NO='"+reqId+"' and  v.ACCOUNT_GROUP_ID=acc.ACCOUNT_GROUP_ID ";
				 	ResultSet rsMatGrup=ad.selectQuery(getMatGroup);
				 	while(rsMatGrup.next()){
				 		matGroup=rsMatGrup.getString("ACCOUNT_GROUP_NAME");
				 	}
				 	if(matGroup.equalsIgnoreCase("Import"))
				 	{
				 		
				 	}else{
				 		matGroup="Local";
				 	}
				 	String test="";
					String getProrityCout="select max(Priority) from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"'";
					ResultSet rsCout=ad.selectQuery(getProrityCout);
					while(rsCout.next())
					{
						priorityCout=rsCout.getInt(1);
						test=rsCout.getString(1);
					}
					if(test==null){
						getProrityCout="select max(Priority) from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group=''";
						rsCout=ad.selectQuery(getProrityCout);
						while(rsCout.next())
						{
							priorityCout=rsCout.getInt(1);
						}
					}
					
					checkStatus=0;
					int apprverPriority=0;
					String getApproverDetails="select * from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and (Approver_Id='"+user.getEmployeeNo()+"' or Parllel_Approver_1='"+user.getEmployeeNo()+"' or Parllel_Approver_2='"+user.getEmployeeNo()+"') ";
					ResultSet rsAppDet=ad.selectQuery(getApproverDetails);
					while(rsAppDet.next())
					{
						checkStatus=1;
						apprverPriority=rsAppDet.getInt("Priority");
						approver=rsAppDet.getString("Approver_Id");
						parllelAppr1=rsAppDet.getString("Parllel_Approver_1");
						parllelAppr2=rsAppDet.getString("Parllel_Approver_2");
						userRole=rsAppDet.getString("Role");
					}
					//last approver creator
					if(priorityCout==apprverPriority)
					{
						
					}else{

					    String nextAppr="";
					    String nextPar1="";
					    String nextPar2="";
					    checkStatus=0;
						String getNextApprover="select Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and Priority='"+(apprverPriority+1)+"'";
						ResultSet rsNextApp=ad.selectQuery(getNextApprover);
						while(rsNextApp.next())
						{  
							checkStatus=1;
							nextAppr=rsNextApp.getString("Approver_Id");
							nextPar1=rsNextApp.getString("Parllel_Approver_1");
							nextPar2=rsNextApp.getString("Parllel_Approver_2");
						}
						if(checkStatus==0)
						{
							getNextApprover="select Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' and Priority='"+(apprverPriority+1)+"'";
							rsNextApp=ad.selectQuery(getNextApprover);
							while(rsNextApp.next())
							{  
								checkStatus=1;
								nextAppr=rsNextApp.getString("Approver_Id");
								nextPar1=rsNextApp.getString("Parllel_Approver_1");
								nextPar2=rsNextApp.getString("Parllel_Approver_2");
							}
						}
					String empNo=user.getEmployeeNo();
						if(empNo.equalsIgnoreCase(approver))
						{
							String updateStatus="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+user.getEmployeeNo()+"'," +
							"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Vendor Master' and Pending_Approver='"+user.getEmployeeNo()+"'";
						    int saveStatus=0;
						    saveStatus=ad.SqlExecuteUpdate(updateStatus);
						    
						    if(!(parllelAppr1.equalsIgnoreCase("")))
						    {
						    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+parllelAppr1+"'," +
									"Pending_Approver='',Approved_Persons='"+parllelAppr1+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Vendor Master' and Pending_Approver='"+parllelAppr1+"'";
								    ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
						    }
						    if(!(parllelAppr2.equalsIgnoreCase("")))
						    {
						    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+parllelAppr2+"'," +
									"Pending_Approver='',Approved_Persons='"+parllelAppr2+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"'and Req_Type='Vendor Master' and Pending_Approver='"+parllelAppr2+"'";
								    ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
						    }
						    if(saveStatus>0)
						    {
						    	approvalsForm.setMessage2("Request Is Approved Successfully");
						    	
						    
						    	 
						    	String recordStatus="select * from All_Request where Req_Id='"+reqId+"' and Approved_Persons='"+user.getEmployeeNo()+"'";
						    	ResultSet rsRecDet=ad.selectQuery(recordStatus);
						    	while(rsRecDet.next())
						    	{
						    		requestNo=rsRecDet.getString("Requester_Name");
						    		reqDate=rsRecDet.getString("Req_Date");
						    		reqesterID=rsRecDet.getString("Requester_Name");
						    	}
						    	System.out.println(userRole);
						    	if(userRole.equalsIgnoreCase("Accounts"))
						    	{
						    	//
						    		 // String updateRecord="update vendor_master_m set MODIFIED_DATE='"+dateNow+"',MODIFIED_BY='"+user.getId()+"',Approve_Status='Approved',last_approver='"+user.getFullName()+"',pending_approver='No' where REQUEST_NO='"+reqId+"'";
					    			
					    				//ad.SqlExecuteUpdate(updateRecord);
						  
						    		
						    		
						    	}
						    	
						    	
						    	//update last Approver and Pending Approver
						    	//GET pending approvers
						    	if(!(userRole.equalsIgnoreCase("Creator")))
						    	{
						    	checkStatus=0;
						    	String pendingApprovers="";
						    	String nextApprovers="";
								getNextApprover="select emp.EMP_FULLNAME,Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers mat,emp_official_info AS emp" +
										" where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
								ResultSet rsPendignApp=ad.selectQuery(getNextApprover);
								while(rsPendignApp.next())
								{  
									checkStatus=1;
									pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
								}
								if(checkStatus==0)
								{
									getNextApprover="select emp.EMP_FULLNAME,Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers mat,emp_official_info AS emp  where Location='"+location+"' AND " +
											" Material_Type='"+matType+"' AND Material_Group='' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
									rsPendignApp=ad.selectQuery(getNextApprover);
									while(rsPendignApp.next())
									{  
										checkStatus=1;
										pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
									}
								}
								if(!(pendingApprovers.equalsIgnoreCase(""))){
									pendingApprovers=pendingApprovers.substring(0, (pendingApprovers.length()-2));	
								}
								 String updateRecord="update vendor_master_m set last_approver='"+user.getFullName()+"',pending_approver='"+pendingApprovers+"' where REQUEST_NO='"+reqId+"'";
					    			
								 int check=	ad.SqlExecuteUpdate(updateRecord);
								
								
						    	}
						    	// insert record to next approver
						    	String insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
						    	" values('"+reqId+"','Vendor Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextAppr+"','No','"+reqesterID+"','','"+matType+"')";
						    	ad.SqlExecuteUpdate(insertAllRequest);
						    	EMailer email = new EMailer();
								String approvermail="";
						    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Vendor Master", nextAppr, reqesterID);
						    	if(!(nextPar1.equalsIgnoreCase(""))){
						    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
							    	" values('"+reqId+"','Vendor Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar1+"','No','"+reqesterID+"','','"+matType+"')";
							    	ad.SqlExecuteUpdate(insertAllRequest);
							    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Vendor Master", nextPar1, reqesterID);
						    	}
						    	if(!(nextPar2.equalsIgnoreCase(""))){
						    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
							    	" values('"+reqId+"','Vendor Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar2+"','No','"+reqesterID+"','','"+matType+"')";
							    	ad.SqlExecuteUpdate(insertAllRequest);
							    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Vendor Master", nextPar2, reqesterID);
						    	}
						    	ad.connClose();
						    	
						    }else{
						    	approvalsForm.setMessage("Error..Request Is Not Approved");
						    }
							
						}if(!(parllelAppr1.equalsIgnoreCase(""))){
							
							if(empNo.equalsIgnoreCase(parllelAppr1)){
								String updateStatus="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+user.getEmployeeNo()+"'," +
								"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Vendor Master' and Pending_Approver='"+user.getEmployeeNo()+"'";
							    int saveStatus=0;
							    saveStatus=ad.SqlExecuteUpdate(updateStatus);
							    
							    String updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+approver+"'," +
								"Pending_Approver='',Approved_Persons='"+approver+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Vendor Master' and Pending_Approver='"+approver+"'";
							    ad.SqlExecuteUpdate(updateStatusForApprover); 
							    
							    if(!(parllelAppr2.equalsIgnoreCase("")))
							    {
							    	  updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+parllelAppr2+"'," +
										"Pending_Approver='',Approved_Persons='"+parllelAppr2+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Vendor Master' and Pending_Approver='"+parllelAppr2+"'";
									    ad.SqlExecuteUpdate(updateStatusForApprover); 
							    }
							   
							    if(saveStatus>0)
							    {
							    	approvalsForm.setMessage2("Request Is Approved Successfully");
							    	String recordStatus="select * from All_Request where Req_Id='"+reqId+"' and Approved_Persons='"+user.getEmployeeNo()+"'";
							    	ResultSet rsRecDet=ad.selectQuery(recordStatus);
							    	while(rsRecDet.next())
							    	{
							    		requestNo=rsRecDet.getString("Requester_Name");
							    		reqDate=rsRecDet.getString("Req_Date");
							    		reqesterID=rsRecDet.getString("Requester_Name");
							    	}
							    	
							    	// insert record to next approver
							    	String insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
							    	" values('"+reqId+"','Vendor Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextAppr+"','No','"+reqesterID+"','','"+matType+"')";
							    	ad.SqlExecuteUpdate(insertAllRequest);
							    	EMailer email = new EMailer();
									String approvermail="";
							    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Vendor Master", nextAppr, reqesterID);
							    	if(!(nextPar1.equalsIgnoreCase(""))){
							    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
								    	" values('"+reqId+"','Vendor Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar1+"','No','"+reqesterID+"','','"+matType+"')";
								    	ad.SqlExecuteUpdate(insertAllRequest);
								    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Vendor Master", nextPar1, reqesterID);
							    	}
							    	if(!(nextPar2.equalsIgnoreCase(""))){
							    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
								    	" values('"+reqId+"','Vendor Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar2+"','No','"+reqesterID+"','','"+matType+"')";
								    	ad.SqlExecuteUpdate(insertAllRequest);
								    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Vendor Master", nextPar2, reqesterID);
							    	}
							    	
							    	if(!(userRole.equalsIgnoreCase("Creator")))
							    	{
							    	checkStatus=0;
							    	String pendingApprovers="";
							    	String nextApprovers="";
							    	getNextApprover="select emp.EMP_FULLNAME,Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers mat,emp_official_info AS emp" +
									" where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
							ResultSet rsPendignApp=ad.selectQuery(getNextApprover);
							while(rsPendignApp.next())
							{  
								checkStatus=1;
								pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
							}
							if(checkStatus==0)
							{
								getNextApprover="select emp.EMP_FULLNAME,Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers mat,emp_official_info AS emp  where Location='"+location+"' AND " +
										" Material_Type='"+matType+"' AND Material_Group='' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
								rsPendignApp=ad.selectQuery(getNextApprover);
								while(rsPendignApp.next())
								{  
									checkStatus=1;
									pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
								}
							}
									if(!(pendingApprovers.equalsIgnoreCase(""))){
										pendingApprovers=pendingApprovers.substring(0, (pendingApprovers.length()-2));	
									}
									
									String updateRecord="update vendor_master_m set last_approver='"+user.getFullName()+"',pending_approver='"+pendingApprovers+"' where REQUEST_NO='"+reqId+"'";
					    			
									 int check=	ad.SqlExecuteUpdate(updateRecord);
									}
							    	
							    	
							    }else{
							    	approvalsForm.setMessage("Error..Request Is Not Approved");
							    }
								
							}
							
							
						}
						if(!(parllelAppr2.equalsIgnoreCase(""))){

							
							if(empNo.equalsIgnoreCase(parllelAppr2)){
								String updateStatus="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+user.getEmployeeNo()+"'," +
								"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Vendor Master' and Pending_Approver='"+user.getEmployeeNo()+"'";
							    int saveStatus=0;
							    saveStatus=ad.SqlExecuteUpdate(updateStatus);
							    String updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+approver+"'," +
								"Pending_Approver='',Approved_Persons='"+approver+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Vendor Master' and Pending_Approver='"+approver+"'";
							    ad.SqlExecuteUpdate(updateStatusForApprover); 
							    
							    if(!(parllelAppr1.equalsIgnoreCase("")))
							    {
							    	  updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+parllelAppr1+"'," +
										"Pending_Approver='',Approved_Persons='"+parllelAppr1+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Vendor Master' and Pending_Approver='"+parllelAppr1+"'";
									    ad.SqlExecuteUpdate(updateStatusForApprover); 
							    }
							    if(saveStatus>0)
							    {
							    	 
							    	String recordStatus="select * from All_Request where Req_Id='"+reqId+"' and Approved_Persons='"+user.getEmployeeNo()+"'";
							    	ResultSet rsRecDet=ad.selectQuery(recordStatus);
							    	while(rsRecDet.next())
							    	{
							    		requestNo=rsRecDet.getString("Requester_Name");
							    		reqDate=rsRecDet.getString("Req_Date");
							    		reqesterID=rsRecDet.getString("Requester_Name");
							    	}
							    	
							    	// insert record to next approver
							    	String insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
							    	" values('"+reqId+"','Vendor Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextAppr+"','No','"+reqesterID+"','','"+matType+"')";
							    	ad.SqlExecuteUpdate(insertAllRequest);
							    	EMailer email = new EMailer();
									String approvermail="";
							    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Vendor Master", nextAppr, reqesterID);
							    	if(!(nextPar1.equalsIgnoreCase(""))){
							    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
								    	" values('"+reqId+"','Vendor Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar1+"','No','"+reqesterID+"','','"+matType+"')";
								    	ad.SqlExecuteUpdate(insertAllRequest);
								    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Vendor Master", nextPar1, reqesterID);
							    	}
							    	if(!(nextPar2.equalsIgnoreCase(""))){
							    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
								    	" values('"+reqId+"','Vendor Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar2+"','No','"+reqesterID+"','','"+matType+"')";
								    	ad.SqlExecuteUpdate(insertAllRequest);
								    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Vendor Master", nextPar2, reqesterID);
							    	}
							    	
							    	if(!(userRole.equalsIgnoreCase("Creator")))
							    	{
							    	checkStatus=0;
							    	String pendingApprovers="";
							    	String nextApprovers="";
							    	getNextApprover="select emp.EMP_FULLNAME,Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers mat,emp_official_info AS emp" +
									" where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
							ResultSet rsPendignApp=ad.selectQuery(getNextApprover);
							while(rsPendignApp.next())
							{  
								checkStatus=1;
								pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
							}
							if(checkStatus==0)
							{
								getNextApprover="select emp.EMP_FULLNAME,Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers mat,emp_official_info AS emp  where Location='"+location+"' AND " +
										" Material_Type='"+matType+"' AND Material_Group='' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
								rsPendignApp=ad.selectQuery(getNextApprover);
								while(rsPendignApp.next())
								{  
									checkStatus=1;
									pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
								}
							}
									if(!(pendingApprovers.equalsIgnoreCase(""))){
										pendingApprovers=pendingApprovers.substring(0, (pendingApprovers.length()-2));	
									}
									
									String updateRecord="update vendor_master_m set last_approver='"+user.getFullName()+"',pending_approver='"+pendingApprovers+"' where REQUEST_NO='"+reqId+"'";
					    		
									 int check=	ad.SqlExecuteUpdate(updateRecord);
									}
							    	
							    	
							    }else{
							    	approvalsForm.setMessage("Error..Request Is Not Approved");
							    }
								
							}
						}
				     
					
					}
				 	
				 	
				}catch (Exception e) {
					e.printStackTrace();
				}
			}
			
			
		}
		
		if(reqType.equalsIgnoreCase("Code Extention")){
			approvalsForm.setComments("");

			for(int i=0;i<selectedReq.length;i++){
				Date dNow = new Date( );
				 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS");
					String dateNow = ft.format(dNow);
				String location="";
				String matGroup="";
				String approver="";
				String parllelAppr1="";
				String parllelAppr2="";
				String reqDate="";
				String reqesterID="";
				String requestNo="";
				String reqId=selectedReq[i];
				int priorityCout=0;
				int checkStatus=0;
				String matType="";
				try{
					String userRole="";
					String matDetails="select loc.LOCATION_CODE,mat.CREATED_BY from code_extenstion_request as mat,Location as loc  where mat.REQUEST_NO='"+reqId+"' and (mat.EXTENDED_TO_PLANT_1=loc.LOCATION_CODE or mat.PLANT_2=loc.LOCATION_CODE) ";
					ResultSet rsDetails=ad.selectQuery(matDetails);
					while(rsDetails.next())
					{
						location=rsDetails.getString("LOCATION_CODE");
						matType="Code Extention";
						reqesterID=rsDetails.getString("CREATED_BY");
					}
					String test="";
					String getProrityCout="select max(Priority) from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"'";
					ResultSet rsCout=ad.selectQuery(getProrityCout);
					while(rsCout.next())
					{
						priorityCout=rsCout.getInt(1);
						test=rsCout.getString(1);
					}
					if(test==null){
						getProrityCout="select max(Priority) from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group=''";
						rsCout=ad.selectQuery(getProrityCout);
						while(rsCout.next())
						{
							priorityCout=rsCout.getInt(1);
						}
					}
					
					checkStatus=0;
					int apprverPriority=0;
					String getApproverDetails="select * from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and (Approver_Id='"+user.getEmployeeNo()+"' or Parllel_Approver_1='"+user.getEmployeeNo()+"' or Parllel_Approver_2='"+user.getEmployeeNo()+"') ";
					ResultSet rsAppDet=ad.selectQuery(getApproverDetails);
					while(rsAppDet.next())
					{
						checkStatus=1;
						apprverPriority=rsAppDet.getInt("Priority");
						approver=rsAppDet.getString("Approver_Id");
						parllelAppr1=rsAppDet.getString("Parllel_Approver_1");
						parllelAppr2=rsAppDet.getString("Parllel_Approver_2");
						userRole=rsAppDet.getString("Role");
					}
					
					//last approver creator
					if(priorityCout==apprverPriority)
					{
						
					}else{
					    String nextAppr="";
					    String nextPar1="";
					    String nextPar2="";
					    checkStatus=0;
						String getNextApprover="select Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and Priority='"+(apprverPriority+1)+"'";
						ResultSet rsNextApp=ad.selectQuery(getNextApprover);
						while(rsNextApp.next())
						{  
							checkStatus=1;
							nextAppr=rsNextApp.getString("Approver_Id");
							nextPar1=rsNextApp.getString("Parllel_Approver_1");
							nextPar2=rsNextApp.getString("Parllel_Approver_2");
						}
						if(checkStatus==0)
						{
							getNextApprover="select Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' and Priority='"+(apprverPriority+1)+"'";
							rsNextApp=ad.selectQuery(getNextApprover);
							while(rsNextApp.next())
							{  
								checkStatus=1;
								nextAppr=rsNextApp.getString("Approver_Id");
								nextPar1=rsNextApp.getString("Parllel_Approver_1");
								nextPar2=rsNextApp.getString("Parllel_Approver_2");
							}
						}
					String empNo=user.getEmployeeNo();
						if(empNo.equalsIgnoreCase(approver))
						{
							String updateStatus="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+user.getEmployeeNo()+"'," +
							"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Code Extention' and Pending_Approver='"+user.getEmployeeNo()+"'";
						    int saveStatus=0;
						    saveStatus=ad.SqlExecuteUpdate(updateStatus);
						    
						    if(!(parllelAppr1.equalsIgnoreCase("")))
						    {
						    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+parllelAppr1+"'," +
									"Pending_Approver='',Approved_Persons='"+parllelAppr1+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Code Extention' and Pending_Approver='"+parllelAppr1+"'";
								    ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
						    }
						    if(!(parllelAppr2.equalsIgnoreCase("")))
						    {
						    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+parllelAppr2+"'," +
									"Pending_Approver='',Approved_Persons='"+parllelAppr2+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Code Extention' and Pending_Approver='"+parllelAppr2+"'";
								    ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
						    }
						    if(saveStatus>0)
						    {
						    	approvalsForm.setMessage2("Request Is Approved Successfully");
						    	 
						    	String recordStatus="select * from All_Request where Req_Id='"+reqId+"' and Approved_Persons='"+user.getEmployeeNo()+"'";
						    	ResultSet rsRecDet=ad.selectQuery(recordStatus);
						    	while(rsRecDet.next())
						    	{
						    		requestNo=rsRecDet.getString("Requester_Name");
						    		reqDate=rsRecDet.getString("Req_Date");
						    		reqesterID=rsRecDet.getString("Requester_Name");
						    	}
						    	System.out.println(userRole);
						    	if(userRole.equalsIgnoreCase("Accounts"))
						    	{
						    	//
						    		  String updateRecord="update code_extenstion_request set MODIFIED_DATE='"+dateNow+"',MODIFIED_BY='"+user.getId()+"',APPROVE_TYPE='Approved',last_approver='"+user.getFullName()+"',pending_approver='No' where REQUEST_NO='"+reqId+"'";
					    			
					    				ad.SqlExecuteUpdate(updateRecord);
						  
						    		
						    		
						    	}
						    	
						    	
						    	//update last Approver and Pending Approver
						    	//GET pending approvers
						    	if(!(userRole.equalsIgnoreCase("Creator")))
						    	{
						    	checkStatus=0;
						    	String pendingApprovers="";
						    	String nextApprovers="";
								getNextApprover="select emp.EMP_FULLNAME,Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers as mat,emp_official_info AS emp" +
										" where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
								ResultSet rsPendignApp=ad.selectQuery(getNextApprover);
								while(rsPendignApp.next())
								{  
									checkStatus=1;
									pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
								}
								if(checkStatus==0)
								{
									getNextApprover="select emp.EMP_FULLNAME,Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers as mat,emp_official_info AS emp " +
											" where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
									rsPendignApp=ad.selectQuery(getNextApprover);
									while(rsPendignApp.next())
									{  
										checkStatus=1;
										pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
									}
								}
								if(!(pendingApprovers.equalsIgnoreCase(""))){
									pendingApprovers=pendingApprovers.substring(0, (pendingApprovers.length()-2));	
								}
								 String updateRecord="update code_extenstion_request set MODIFIED_DATE='"+dateNow+"',MODIFIED_BY='"+user.getId()+"',APPROVE_TYPE='Approved',last_approver='"+user.getFullName()+"',pending_approver='"+pendingApprovers+"' where REQUEST_NO='"+reqId+"'";
					    			
								 int check=	ad.SqlExecuteUpdate(updateRecord);
								
								
						    	}
						    	// insert record to next approver
						    	String insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
						    	" values('"+reqId+"','Code Extention','"+requestNo+"','"+reqDate+"','Pending','No','"+nextAppr+"','No','"+reqesterID+"','','"+matType+"')";
						    	ad.SqlExecuteUpdate(insertAllRequest);
						    	EMailer email = new EMailer();
						    	String approvermail="";
						    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Code Extension", nextAppr, reqesterID);
						    	if(!(nextPar1.equalsIgnoreCase(""))){
						    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
							    	" values('"+reqId+"','Code Extention','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar1+"','No','"+reqesterID+"','','"+matType+"')";
							    	ad.SqlExecuteUpdate(insertAllRequest);
							    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Code Extension", nextPar1, reqesterID);
						    	}
						    	if(!(nextPar2.equalsIgnoreCase(""))){
						    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
							    	" values('"+reqId+"','Code Extention','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar2+"','No','"+reqesterID+"','','"+matType+"')";
							    	ad.SqlExecuteUpdate(insertAllRequest);
							    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Code Extension", nextPar2, reqesterID);
						    	}
						    	
						    }else{
						    	approvalsForm.setMessage("Error..Request Is Not Approved");
						    }
							
						}if(!(parllelAppr1.equalsIgnoreCase(""))){
							
							if(empNo.equalsIgnoreCase(parllelAppr1)){
								String updateStatus="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+user.getEmployeeNo()+"'," +
								"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Code Extention' and Pending_Approver='"+user.getEmployeeNo()+"'";
							    int saveStatus=0;
							    saveStatus=ad.SqlExecuteUpdate(updateStatus);
							    
							    String updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+approver+"'," +
								"Pending_Approver='',Approved_Persons='"+approver+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Code Extention' and Pending_Approver='"+approver+"'";
							    ad.SqlExecuteUpdate(updateStatusForApprover); 
							    
							    if(!(parllelAppr2.equalsIgnoreCase("")))
							    {
							    	  updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+parllelAppr2+"'," +
										"Pending_Approver='',Approved_Persons='"+parllelAppr2+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Code Extention' and Pending_Approver='"+parllelAppr2+"'";
									    ad.SqlExecuteUpdate(updateStatusForApprover); 
							    }
							   
							    if(saveStatus>0)
							    {
							    	approvalsForm.setMessage2("Request Is Approved Successfully");
							    	String recordStatus="select * from All_Request where Req_Id='"+reqId+"' and Approved_Persons='"+user.getEmployeeNo()+"'";
							    	ResultSet rsRecDet=ad.selectQuery(recordStatus);
							    	while(rsRecDet.next())
							    	{
							    		requestNo=rsRecDet.getString("Requester_Name");
							    		reqDate=rsRecDet.getString("Req_Date");
							    		reqesterID=rsRecDet.getString("Requester_Name");
							    	}
							    	
							    	// insert record to next approver
							    	String insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
							    	" values('"+reqId+"','Code Extention','"+requestNo+"','"+reqDate+"','Pending','No','"+nextAppr+"','No','"+reqesterID+"','','"+matType+"')";
							    	ad.SqlExecuteUpdate(insertAllRequest);
							    	EMailer email = new EMailer();
							    	String approvermail="";
							    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Code Extension", nextAppr, reqesterID);
							    	if(!(nextPar1.equalsIgnoreCase(""))){
							    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
								    	" values('"+reqId+"','Code Extention','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar1+"','No','"+reqesterID+"','','"+matType+"')";
								    	ad.SqlExecuteUpdate(insertAllRequest);
								    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Code Extension", nextPar1, reqesterID);
							    	}
							    	if(!(nextPar2.equalsIgnoreCase(""))){
							    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
								    	" values('"+reqId+"','Code Extention','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar2+"','No','"+reqesterID+"','','"+matType+"')";
								    	ad.SqlExecuteUpdate(insertAllRequest);
								    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Code Extension", nextPar2, reqesterID);
							    	}
							    	
							    	if(!(userRole.equalsIgnoreCase("Creator")))
							    	{
							    	checkStatus=0;
							    	String pendingApprovers="";
							    	String nextApprovers="";
							    	getNextApprover="select emp.EMP_FULLNAME,Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers as mat,emp_official_info AS emp" +
									" where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
							ResultSet rsPendignApp=ad.selectQuery(getNextApprover);
							while(rsPendignApp.next())
							{  
								checkStatus=1;
								pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
							}
							if(checkStatus==0)
							{
								getNextApprover="select emp.EMP_FULLNAME,Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers as mat,emp_official_info AS emp " +
										" where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
								rsPendignApp=ad.selectQuery(getNextApprover);
								while(rsPendignApp.next())
								{  
									checkStatus=1;
									pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
								}
							}
									if(!(pendingApprovers.equalsIgnoreCase(""))){
										pendingApprovers=pendingApprovers.substring(0, (pendingApprovers.length()-2));	
									}
									
									String updateRecord="update code_extenstion_request set MODIFIED_DATE='"+dateNow+"',MODIFIED_BY='"+user.getId()+"',APPROVE_TYPE='Approved',last_approver='"+user.getFullName()+"',pending_approver='"+pendingApprovers+"' where REQUEST_NO='"+reqId+"'";
					    			
									 int check=	ad.SqlExecuteUpdate(updateRecord);
									}
							    	
							    	
							    }else{
							    	approvalsForm.setMessage("Error..Request Is Not Approved");
							    }
								
							}
							
							
						}
						if(!(parllelAppr2.equalsIgnoreCase(""))){

							
							if(empNo.equalsIgnoreCase(parllelAppr2)){
								String updateStatus="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+user.getEmployeeNo()+"'," +
								"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Code Extention' and Pending_Approver='"+user.getEmployeeNo()+"'";
							    int saveStatus=0;
							    saveStatus=ad.SqlExecuteUpdate(updateStatus);
							    String updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+approver+"'," +
								"Pending_Approver='',Approved_Persons='"+approver+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Code Extention' and Pending_Approver='"+approver+"'";
							    ad.SqlExecuteUpdate(updateStatusForApprover); 
							    
							    if(!(parllelAppr1.equalsIgnoreCase("")))
							    {
							    	  updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+parllelAppr1+"'," +
										"Pending_Approver='',Approved_Persons='"+parllelAppr1+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Code Extention' and Pending_Approver='"+parllelAppr1+"'";
									    ad.SqlExecuteUpdate(updateStatusForApprover); 
							    }
							    if(saveStatus>0)
							    {
							    	 
							    	String recordStatus="select * from All_Request where Req_Id='"+reqId+"' and Approved_Persons='"+user.getEmployeeNo()+"'";
							    	ResultSet rsRecDet=ad.selectQuery(recordStatus);
							    	while(rsRecDet.next())
							    	{
							    		requestNo=rsRecDet.getString("Requester_Name");
							    		reqDate=rsRecDet.getString("Req_Date");
							    		reqesterID=rsRecDet.getString("Requester_Name");
							    	}
							    	
							    	// insert record to next approver
							    	String insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
							    	" values('"+reqId+"','Code Extention','"+requestNo+"','"+reqDate+"','Pending','No','"+nextAppr+"','No','"+reqesterID+"','','"+matType+"')";
							    	ad.SqlExecuteUpdate(insertAllRequest);
							    	if(!(nextPar1.equalsIgnoreCase(""))){
							    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
								    	" values('"+reqId+"','Code Extention','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar1+"','No','"+reqesterID+"','','"+matType+"')";
								    	ad.SqlExecuteUpdate(insertAllRequest);
								    
							    	}
							    	if(!(nextPar2.equalsIgnoreCase(""))){
							    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
								    	" values('"+reqId+"','Code Extention','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar2+"','No','"+reqesterID+"','','"+matType+"')";
								    	ad.SqlExecuteUpdate(insertAllRequest);
								    
							    	}
							    	
							    	if(!(userRole.equalsIgnoreCase("Creator")))
							    	{
							    	checkStatus=0;
							    	String pendingApprovers="";
							    	String nextApprovers="";
							    	getNextApprover="select emp.EMP_FULLNAME,Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers as mat,emp_official_info AS emp" +
									" where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
							ResultSet rsPendignApp=ad.selectQuery(getNextApprover);
							while(rsPendignApp.next())
							{  
								checkStatus=1;
								pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
							}
							if(checkStatus==0)
							{
								getNextApprover="select emp.EMP_FULLNAME,Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers as mat,emp_official_info AS emp " +
										" where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
								rsPendignApp=ad.selectQuery(getNextApprover);
								while(rsPendignApp.next())
								{  
									checkStatus=1;
									pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
								}
							}
									if(!(pendingApprovers.equalsIgnoreCase(""))){
										pendingApprovers=pendingApprovers.substring(0, (pendingApprovers.length()-2));	
									}
									
									String updateRecord="update code_extenstion_request set MODIFIED_DATE='"+dateNow+"',MODIFIED_BY='"+user.getId()+"',APPROVE_TYPE='Approved',last_approver='"+user.getFullName()+"',pending_approver='"+pendingApprovers+"' where REQUEST_NO='"+reqId+"'";
					    			
									 int check=	ad.SqlExecuteUpdate(updateRecord);
									}
							    	
							    	
							    }else{
							    	approvalsForm.setMessage("Error..Request Is Not Approved");
							    }
								
							}
						}
				     
					}
	
					
				}catch (Exception e) {
					e.printStackTrace();
				}
			}
		
			
		}
		
		if(reqType.equalsIgnoreCase("Service Master")){
			approvalsForm.setComments("");
			for(int i=0;i<selectedReq.length;i++){
				Date dNow = new Date( );
				 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS");
					String dateNow = ft.format(dNow);
				String location="";
				String matGroup="";
				String approver="";
				String parllelAppr1="";
				String parllelAppr2="";
				String reqDate="";
				String reqesterID="";
				String requestNo="";
				String reqId=selectedReq[i]; 
				int priorityCout=0;
				int checkStatus=0;
				String matType="";
				try{
					String userRole="";
					String matDetails="select loc.LOCATION_CODE from SERVICE_MASTER as mat,Location as loc  where mat.REQUEST_NO='"+reqId+"' and mat.plant_code=loc.LOCID";
					ResultSet rsDetails=ad.selectQuery(matDetails);
					while(rsDetails.next())
					{
						location=rsDetails.getString("LOCATION_CODE");
						matType="Service Master";
					}
					String test="";
					String getProrityCout="select max(Priority) from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"'";
					ResultSet rsCout=ad.selectQuery(getProrityCout);
					while(rsCout.next())
					{
						priorityCout=rsCout.getInt(1);
						test=rsCout.getString(1);
					}
					if(test==null){
						getProrityCout="select max(Priority) from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group=''";
						rsCout=ad.selectQuery(getProrityCout);
						while(rsCout.next())
						{
							priorityCout=rsCout.getInt(1);
						}
					}
					
					checkStatus=0;
					int apprverPriority=0;
					String getApproverDetails="select * from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and (Approver_Id='"+user.getEmployeeNo()+"' or Parllel_Approver_1='"+user.getEmployeeNo()+"' or Parllel_Approver_2='"+user.getEmployeeNo()+"') ";
					ResultSet rsAppDet=ad.selectQuery(getApproverDetails);
					while(rsAppDet.next())
					{
						checkStatus=1;
						apprverPriority=rsAppDet.getInt("Priority");
						approver=rsAppDet.getString("Approver_Id");
						parllelAppr1=rsAppDet.getString("Parllel_Approver_1");
						parllelAppr2=rsAppDet.getString("Parllel_Approver_2");
						userRole=rsAppDet.getString("Role");
					}
					
					//last approver creator
					if(priorityCout==apprverPriority)
					{ 
						//creator
					}else{
					    String nextAppr="";
					    String nextPar1="";
					    String nextPar2="";
					    checkStatus=0;
						String getNextApprover="select Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and Priority='"+(apprverPriority+1)+"'";
						ResultSet rsNextApp=ad.selectQuery(getNextApprover);
						while(rsNextApp.next())
						{  
							checkStatus=1;
							nextAppr=rsNextApp.getString("Approver_Id");
							nextPar1=rsNextApp.getString("Parllel_Approver_1");
							nextPar2=rsNextApp.getString("Parllel_Approver_2");
						}
						if(checkStatus==0)
						{
							getNextApprover="select Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' and Priority='"+(apprverPriority+1)+"'";
							rsNextApp=ad.selectQuery(getNextApprover);
							while(rsNextApp.next())
							{  
								checkStatus=1;
								nextAppr=rsNextApp.getString("Approver_Id");
								nextPar1=rsNextApp.getString("Parllel_Approver_1");
								nextPar2=rsNextApp.getString("Parllel_Approver_2");
							}
						}
					String empNo=user.getEmployeeNo();
						if(empNo.equalsIgnoreCase(approver))
						{
							String updateStatus="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+user.getEmployeeNo()+"'," +
							"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Service Master' and Pending_Approver='"+user.getEmployeeNo()+"'";
						    int saveStatus=0;
						    saveStatus=ad.SqlExecuteUpdate(updateStatus);
							ad.connClose();
							EMailer email = new EMailer();
							String approvermail="";
							 email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Service Master", nextAppr, reqesterID);
						    if(!(parllelAppr1.equalsIgnoreCase("")))
						    {
						    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+parllelAppr1+"'," +
									"Pending_Approver='',Approved_Persons='"+parllelAppr1+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Service Master' and Pending_Approver='"+parllelAppr1+"'";
								    ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
								    email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Service Master", parllelAppr1, reqesterID);
						    }
						    if(!(parllelAppr2.equalsIgnoreCase("")))
						    {
						    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+parllelAppr2+"'," +
									"Pending_Approver='',Approved_Persons='"+parllelAppr2+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Service Master' and Pending_Approver='"+parllelAppr2+"'";
								    ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
								    email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Service Master", parllelAppr2, reqesterID);
						    }
						    if(saveStatus>0)
						    {
						    	approvalsForm.setMessage2("Request Is Approved Successfully");
						    	 
						    	String recordStatus="select * from All_Request where Req_Id='"+reqId+"' and Approved_Persons='"+user.getEmployeeNo()+"'";
						    	ResultSet rsRecDet=ad.selectQuery(recordStatus);
						    	while(rsRecDet.next())
						    	{
						    		requestNo=rsRecDet.getString("Requester_Name");
						    		reqDate=rsRecDet.getString("Req_Date");
						    		reqesterID=rsRecDet.getString("Requester_Name");
						    	}
						    	System.out.println(userRole);
						    	if(userRole.equalsIgnoreCase("Accounts"))
						    	{
						    	//update valuation class
						    	String updateMaterial="update SERVICE_MASTER set last_approver='"+user.getFullName()+"',pending_approver='"+nextAppr+"' where REQUEST_NO='"+reqId+"'";
						    	int check=ad.SqlExecuteUpdate(updateMaterial);
						    	
						    		
						    		
						    	}
						    	
						    	
						    	//update last Approver and Pending Approver
						    	//GET pending approvers
						    	if(!(userRole.equalsIgnoreCase("Creator")))
						    	{
						    	checkStatus=0;
						    	String pendingApprovers="";
						    	String nextApprovers="";
								getNextApprover="select emp.EMP_FULLNAME,Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers as mat,emp_official_info AS emp" +
										" where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
								ResultSet rsPendignApp=ad.selectQuery(getNextApprover);
								while(rsPendignApp.next())
								{  
									checkStatus=1;
									pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
								}
								if(checkStatus==0)
								{
									getNextApprover="select emp.EMP_FULLNAME,Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers as mat,emp_official_info AS emp" +
											" where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
									rsPendignApp=ad.selectQuery(getNextApprover);
									while(rsPendignApp.next())
									{  
										checkStatus=1;
										pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
									}
								}
								if(!(pendingApprovers.equalsIgnoreCase(""))){
									pendingApprovers=pendingApprovers.substring(0, (pendingApprovers.length()-2));	
								}
								
								String updateMaterial="update SERVICE_MASTER set last_approver='"+user.getFullName()+"',pending_approver='"+pendingApprovers+"' where request_no='"+reqId+"'";
						    	int check=ad.SqlExecuteUpdate(updateMaterial);
						    	}
						    	// insert record to next approver
						    	String insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
						    	" values('"+reqId+"','Service Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextAppr+"','No','"+reqesterID+"','','"+matType+"')";
						    	ad.SqlExecuteUpdate(insertAllRequest);
						    	if(!(nextPar1.equalsIgnoreCase(""))){
						    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
							    	" values('"+reqId+"','Service Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar1+"','No','"+reqesterID+"','','"+matType+"')";
							    	ad.SqlExecuteUpdate(insertAllRequest);
							    
						    	}
						    	if(!(nextPar2.equalsIgnoreCase(""))){
						    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
							    	" values('"+reqId+"','Service Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar2+"','No','"+reqesterID+"','','"+matType+"')";
							    	ad.SqlExecuteUpdate(insertAllRequest);
							    
						    	}
						    	
						    }else{
						    	approvalsForm.setMessage("Error..Request Is Not Approved");
						    }
							
						}if(!(parllelAppr1.equalsIgnoreCase(""))){
							
							if(empNo.equalsIgnoreCase(parllelAppr1)){
								String updateStatus="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+user.getEmployeeNo()+"'," +
								"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Service Master' and Pending_Approver='"+user.getEmployeeNo()+"'";
							    int saveStatus=0;
							    saveStatus=ad.SqlExecuteUpdate(updateStatus);
							    
							    String updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+approver+"'," +
								"Pending_Approver='',Approved_Persons='"+approver+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Service Master' and Pending_Approver='"+approver+"'";
							    ad.SqlExecuteUpdate(updateStatusForApprover); 
							    
							    if(!(parllelAppr2.equalsIgnoreCase("")))
							    {
							    	  updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+parllelAppr2+"'," +
										"Pending_Approver='',Approved_Persons='"+parllelAppr2+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Service Master' and Pending_Approver='"+parllelAppr2+"'";
									    ad.SqlExecuteUpdate(updateStatusForApprover); 
							    }
							   
							    if(saveStatus>0)
							    {
							    	approvalsForm.setMessage2("Request Is Approved Successfully");
							    	String recordStatus="select * from All_Request where Req_Id='"+reqId+"' and Approved_Persons='"+user.getEmployeeNo()+"'";
							    	ResultSet rsRecDet=ad.selectQuery(recordStatus);
							    	while(rsRecDet.next())
							    	{
							    		requestNo=rsRecDet.getString("Requester_Name");
							    		reqDate=rsRecDet.getString("Req_Date");
							    		reqesterID=rsRecDet.getString("Requester_Name");
							    	}
							    	
							    	// insert record to next approver
							    	String insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
							    	" values('"+reqId+"','Service Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextAppr+"','No','"+reqesterID+"','','"+matType+"')";
							    	ad.SqlExecuteUpdate(insertAllRequest);
							    	if(!(nextPar1.equalsIgnoreCase(""))){
							    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
								    	" values('"+reqId+"','Service Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar1+"','No','"+reqesterID+"','','"+matType+"')";
								    	ad.SqlExecuteUpdate(insertAllRequest);
								    
							    	}
							    	if(!(nextPar2.equalsIgnoreCase(""))){
							    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
								    	" values('"+reqId+"','Service Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar2+"','No','"+reqesterID+"','','"+matType+"')";
								    	ad.SqlExecuteUpdate(insertAllRequest);
								    
							    	}
							    	
							    	if(!(userRole.equalsIgnoreCase("Creator")))
							    	{
							    	checkStatus=0;
							    	String pendingApprovers="";
							    	String nextApprovers="";
							    	getNextApprover="select emp.EMP_FULLNAME,Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers as mat,emp_official_info AS emp" +
									" where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
							ResultSet rsPendignApp=ad.selectQuery(getNextApprover);
							while(rsPendignApp.next())
							{  
								checkStatus=1;
								pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
							}
							if(checkStatus==0)
							{
								getNextApprover="select emp.EMP_FULLNAME,Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers as mat,emp_official_info AS emp" +
										" where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
								rsPendignApp=ad.selectQuery(getNextApprover);
								while(rsPendignApp.next())
								{  
									checkStatus=1;
									pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
								}
							}
									if(!(pendingApprovers.equalsIgnoreCase(""))){
										pendingApprovers=pendingApprovers.substring(0, (pendingApprovers.length()-2));	
									}
									
									String updateMaterial="update SERVICE_MASTER set last_approver='"+user.getFullName()+"',pending_approver='"+pendingApprovers+"' where request_no='"+reqId+"'";
							    	int check=ad.SqlExecuteUpdate(updateMaterial);
							    	}
							    	
							    	
							    }else{
							    	approvalsForm.setMessage("Error..Request Is Not Approved");
							    }
								
							}
							
							
						}
						if(!(parllelAppr2.equalsIgnoreCase(""))){

							
							if(empNo.equalsIgnoreCase(parllelAppr2)){
								String updateStatus="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+user.getEmployeeNo()+"'," +
								"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Service Master' and Pending_Approver='"+user.getEmployeeNo()+"'";
							    int saveStatus=0;
							    saveStatus=ad.SqlExecuteUpdate(updateStatus);
							    String updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+approver+"'," +
								"Pending_Approver='',Approved_Persons='"+approver+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Service Master' and Pending_Approver='"+approver+"'";
							    ad.SqlExecuteUpdate(updateStatusForApprover); 
							    
							    if(!(parllelAppr1.equalsIgnoreCase("")))
							    {
							    	  updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+parllelAppr1+"'," +
										"Pending_Approver='',Approved_Persons='"+parllelAppr1+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Service Master' and Pending_Approver='"+parllelAppr1+"'";
									    ad.SqlExecuteUpdate(updateStatusForApprover); 
							    }
							    if(saveStatus>0)
							    {
							    	 
							    	String recordStatus="select * from All_Request where Req_Id='"+reqId+"' and Approved_Persons='"+user.getEmployeeNo()+"'";
							    	ResultSet rsRecDet=ad.selectQuery(recordStatus);
							    	while(rsRecDet.next())
							    	{
							    		requestNo=rsRecDet.getString("Requester_Name");
							    		reqDate=rsRecDet.getString("Req_Date");
							    		reqesterID=rsRecDet.getString("Requester_Name");
							    	}
							    	
							    	// insert record to next approver
							    	String insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
							    	" values('"+reqId+"','Service Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextAppr+"','No','"+reqesterID+"','','"+matType+"')";
							    	ad.SqlExecuteUpdate(insertAllRequest);
							    	if(!(nextPar1.equalsIgnoreCase(""))){
							    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
								    	" values('"+reqId+"','Service Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar1+"','No','"+reqesterID+"','','"+matType+"')";
								    	ad.SqlExecuteUpdate(insertAllRequest);
								    
							    	}
							    	if(!(nextPar2.equalsIgnoreCase(""))){
							    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
								    	" values('"+reqId+"','Service Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar2+"','No','"+reqesterID+"','','"+matType+"')";
								    	ad.SqlExecuteUpdate(insertAllRequest);
								    
							    	}
							    	
							    	if(!(userRole.equalsIgnoreCase("Creator")))
							    	{
							    	checkStatus=0;
							    	String pendingApprovers="";
							    	String nextApprovers="";
							    	getNextApprover="select emp.EMP_FULLNAME,Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers as mat,emp_official_info AS emp" +
									" where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
							ResultSet rsPendignApp=ad.selectQuery(getNextApprover);
							while(rsPendignApp.next())
							{  
								checkStatus=1;
								pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
							}
							if(checkStatus==0)
							{
								getNextApprover="select emp.EMP_FULLNAME,Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers as mat,emp_official_info AS emp" +
										" where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
								rsPendignApp=ad.selectQuery(getNextApprover);
								while(rsPendignApp.next())
								{  
									checkStatus=1;
									pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
								}
							}
									if(!(pendingApprovers.equalsIgnoreCase(""))){
										pendingApprovers=pendingApprovers.substring(0, (pendingApprovers.length()-2));	
									}
									
									String updateMaterial="update SERVICE_MASTER set last_approver='"+user.getFullName()+"',pending_approver='"+pendingApprovers+"' where request_no='"+reqId+"'";
							    	int check=ad.SqlExecuteUpdate(updateMaterial);
							    	}
							    	
							    	
							    }else{
							    	approvalsForm.setMessage("Error..Request Is Not Approved");
							    }
								
							}
						}
				     
					}
	
					
				}catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
		if(reqType.equalsIgnoreCase("Material Master")){
			approvalsForm.setComments("");
			for(int i=0;i<selectedReq.length;i++){
				Date dNow = new Date( );
				 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS");
					String dateNow = ft.format(dNow);
				String location="";
				String matGroup="";
				String approver="";
				String parllelAppr1=""; 
				String parllelAppr2="";
				String reqDate="";
				String reqesterID="";
				String requestNo="";
				String reqId=selectedReq[i];
				int priorityCout=0;
				int checkStatus=0;
				String matType="";
				//
				try{
				String userRole="";
				String matDetails="select loc.LOCATION_CODE,mat.MATERIAL_GROUP_ID,mat.Type from material_code_request as mat,Location as loc  where mat.REQUEST_NO='"+reqId+"' and mat.LOCATION_ID=loc.LOCID";
				ResultSet rsDetails=ad.selectQuery(matDetails);
				while(rsDetails.next())
				{
					location=rsDetails.getString("LOCATION_CODE");
					matGroup=rsDetails.getString("MATERIAL_GROUP_ID");
					matType=rsDetails.getString("Type");
				}
				if(matType.equals("FG")||matType.equals("HAWA")){
				 matDetails="select loc.LOCATION_CODE,mat.Type,mat.CREATED_BY,mat.DOMESTIC_OR_EXPORTS from material_code_request as mat,Location as loc  where mat.REQUEST_NO='"+reqId+"' and mat.LOCATION_ID=loc.LOCID";
				 rsDetails=ad.selectQuery(matDetails);
				while(rsDetails.next())
				{
					
					matGroup=rsDetails.getString("DOMESTIC_OR_EXPORTS");
				}
		 		if(matGroup.equals("D"))
		 			matGroup="Domestic";
		 		if(matGroup.equals("E"))
		 			matGroup="Export";
		 		if(matGroup.equals("V"))
		 			matGroup="V";
				}
		 		
				String test="";
				String getProrityCout="select max(Priority) from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"'";
				ResultSet rsCout=ad.selectQuery(getProrityCout);
				while(rsCout.next())
				{
					priorityCout=rsCout.getInt(1);
					test=rsCout.getString(1);
				}
				if(test==null){
					getProrityCout="select max(Priority) from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group=''";
					rsCout=ad.selectQuery(getProrityCout);
					while(rsCout.next())
					{
						priorityCout=rsCout.getInt(1);
					}
				}
				
				checkStatus=0;
				int apprverPriority=0;
				String getApproverDetails="select * from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and (Approver_Id='"+user.getEmployeeNo()+"' or Parllel_Approver_1='"+user.getEmployeeNo()+"' or Parllel_Approver_2='"+user.getEmployeeNo()+"') ";
				ResultSet rsAppDet=ad.selectQuery(getApproverDetails);
				while(rsAppDet.next())
				{
					checkStatus=1;
					apprverPriority=rsAppDet.getInt("Priority");
					approver=rsAppDet.getString("Approver_Id");
					parllelAppr1=rsAppDet.getString("Parllel_Approver_1");
					parllelAppr2=rsAppDet.getString("Parllel_Approver_2");
					userRole=rsAppDet.getString("Role");
				}
				if(checkStatus==0)
				{
					getApproverDetails="select * from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' and (Approver_Id='"+user.getEmployeeNo()+"' or Parllel_Approver_1='"+user.getEmployeeNo()+"' or Parllel_Approver_2='"+user.getEmployeeNo()+"') ";
					rsAppDet=ad.selectQuery(getApproverDetails);
					while(rsAppDet.next())
					{
					
						apprverPriority=rsAppDet.getInt("Priority");
						approver=rsAppDet.getString("Approver_Id");
						parllelAppr1=rsAppDet.getString("Parllel_Approver_1");
						parllelAppr2=rsAppDet.getString("Parllel_Approver_2");
						userRole=rsAppDet.getString("Role");
					}
				}
				//last approver creator
				if(priorityCout==apprverPriority)
				{
					
					approvalsForm.setMessage("Please Provide SAP Code No.");
					/*String updateStatus="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+user.getEmployeeNo()+"'," +
					"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Material Master' and Pending_Approver='"+user.getEmployeeNo()+"'";
				    int saveStatus=0;
				    saveStatus=ad.SqlExecuteUpdate(updateStatus);
				    
				    if(!(parllelAppr1.equalsIgnoreCase("")))
				    {
				    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+parllelAppr1+"'," +
							"Pending_Approver='',Approved_Persons='"+parllelAppr1+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Material Master' and Pending_Approver='"+parllelAppr1+"'";
						    ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
				    }
				    if(!(parllelAppr2.equalsIgnoreCase("")))
				    {
				    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+parllelAppr2+"'," +
							"Pending_Approver='',Approved_Persons='"+parllelAppr2+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Material Master' and Pending_Approver='"+parllelAppr2+"'";
						    ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
				    }	
				    if(saveStatus>0)
				    {
				    	approvalsForm.setMessage2("Request Is Approved Successfully");
				    	 String sapCreationDate=approvalsForm.getSapCreationDate();
						  String b[]=sapCreationDate.split("/");
						  sapCreationDate=b[2]+"-"+b[1]+"-"+b[0];
			    	
			    		String updatQuery="update material_code_request set  STORAGE_LOCATION_ID='"+approvalsForm.getStorageLocationId()+"',MATERIAL_SHORT_NAME='"+approvalsForm.getMaterialShortName()+"'," +
						"MATERIAL_LONG_NAME='"+approvalsForm.getMaterialLongName()+"',MATERIAL_GROUP_ID='"+approvalsForm.getMaterialGroupId()+"',PHARMACOP_NAME='"+approvalsForm.getPharmacopName()+"',PHARMACOP_GRADE='"+approvalsForm.getPharmacopGrade()+"',GENERIC_NAME='"+approvalsForm.getGenericName()+"',SYNONYM='"+approvalsForm.getSynonym()+"',PHARMACOP_SPECIFICATION='"+approvalsForm.getPharmacopSpecification()+"'" +
						",IS_DMF_MATERIAL='"+approvalsForm.getIsDMFMaterial()+"',DMF_GRADE_ID='"+approvalsForm.getDmfGradeId()+"',MATERIAL_GRADE='"+approvalsForm.getMaterialGrade()+"',COS_GRADE_AND_NO='"+approvalsForm.getCosGradeNo()+"',ADDITIONAL_TEST='"+approvalsForm.getAdditionalTest()+"',COUNTRY_ID='"+approvalsForm.getCountryId()+"',CUSTOMER_NAME='"+approvalsForm.getCustomerName()+"'" +
						",TO_BE_USED_IN_PRODUCTS='"+approvalsForm.getToBeUsedInProducts()+"',IS_VENDOR_SPECIFIC_MATERIAL='"+approvalsForm.getIsVendorSpecificMaterial()+"',MFGR_NAME='"+approvalsForm.getMfgrName()+"',SITE_OF_MANUFACTURE='"+approvalsForm.getSiteOfManufacture()+"',TEMP_CONDITION='"+approvalsForm.getTempCondition()+"',STORAGE_CONDITION='"+approvalsForm.getStorageCondition()+"',SHELF_LIFE='"+approvalsForm.getShelfLife()+"',SHELF_LIFE_TYPE='"+approvalsForm.getShelfLifeType()+"',DUTY_ELEMENT='"+approvalsForm.getDutyElement()+"'" +
						",RETEST_DAYS='"+approvalsForm.getRetestDays()+"',RETEST_DAYS_TYPE='"+approvalsForm.getRetestType()+"',VALUATION_CLASS='"+approvalsForm.getValuationClass()+"',approvalsForm='"+approvalsForm.getApproximateValue()+"',UNIT_OF_MEAS_ID='"+approvalsForm.getUnitOfMeasId()+"',PURCHASE_GROUP_ID='"+approvalsForm.getPuchaseGroupId()+"'" +
						",MODIFIED_DATE='"+dateNow+"',MODIFIED_BY='"+user.getId()+"',SAP_CODE_NO='"+approvalsForm.getSapCodeNo()+"',SAP_CODE_EXISTS='"+approvalsForm.getSapCodeExists()+"',SAP_CREATION_DATE='"+sapCreationDate+"',SAP_CREATED_BY='"+approvalsForm.getSapCreatedBy()+"',Approve_Type='Approved',last_approver='"+user.getFullName()+"',pending_approver='No', where REQUEST_NO='"+reqId+"'";
			            int updateMateStatus=ad.SqlExecuteUpdate(updatQuery);
			            System.out.println(updateMateStatus);
				    }*/
				}else{
				    String nextAppr="";
				    String nextPar1="";
				    String nextPar2="";
				    checkStatus=0;
					String getNextApprover="select Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and Priority='"+(apprverPriority+1)+"'";
					ResultSet rsNextApp=ad.selectQuery(getNextApprover);
					while(rsNextApp.next())
					{  
						checkStatus=1;
						nextAppr=rsNextApp.getString("Approver_Id");
						nextPar1=rsNextApp.getString("Parllel_Approver_1");
						nextPar2=rsNextApp.getString("Parllel_Approver_2");
					}
					if(checkStatus==0)
					{
						getNextApprover="select Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' and Priority='"+(apprverPriority+1)+"'";
						rsNextApp=ad.selectQuery(getNextApprover);
						while(rsNextApp.next())
						{  
							checkStatus=1;
							nextAppr=rsNextApp.getString("Approver_Id");
							nextPar1=rsNextApp.getString("Parllel_Approver_1");
							nextPar2=rsNextApp.getString("Parllel_Approver_2");
						}
					}
				String empNo=user.getEmployeeNo();
					if(empNo.equalsIgnoreCase(approver))
					{
						String updateStatus="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+user.getEmployeeNo()+"'," +
						"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',approved_date='"+dateNow+"',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Req_Type='Material Master' and Pending_Approver='"+user.getEmployeeNo()+"'";
					    int saveStatus=0;
					    saveStatus=ad.SqlExecuteUpdate(updateStatus);
					    
					    if(!(parllelAppr1.equalsIgnoreCase("")))
					    {
					    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+parllelAppr1+"'," +
								"Pending_Approver='',Approved_Persons='"+parllelAppr1+"',approved_date='"+dateNow+"',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Req_Type='Material Master' and Pending_Approver='"+parllelAppr1+"'";
							    ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
					    }
					    if(!(parllelAppr2.equalsIgnoreCase("")))
					    {
					    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+parllelAppr2+"'," +
								"Pending_Approver='',Approved_Persons='"+parllelAppr2+"',approved_date='"+dateNow+"',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Req_Type='Material Master' and Pending_Approver='"+parllelAppr2+"'";
							    ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
					    }
					    if(saveStatus>0)
					    {
					    	approvalsForm.setMessage2("Request Is Approved Successfully");
					    	 
					    	String recordStatus="select * from All_Request where Req_Id='"+reqId+"' and Approved_Persons='"+user.getEmployeeNo()+"'";
					    	ResultSet rsRecDet=ad.selectQuery(recordStatus);
					    	while(rsRecDet.next())
					    	{
					    		requestNo=rsRecDet.getString("Requester_Name");
					    		reqDate=rsRecDet.getString("Req_Date");
					    		reqesterID=rsRecDet.getString("Requester_Name");
					    	}
					    	System.out.println(userRole);
					    	if(userRole.equalsIgnoreCase("Accounts"))
					    	{
					    	//update valuation class
					    	String updateMaterial="update material_code_request set last_approver='"+user.getFullName()+"',pending_approver='"+nextAppr+"' where REQUEST_NO='"+reqId+"'";
					    	int check=ad.SqlExecuteUpdate(updateMaterial);
					    	
					    		
					    		
					    	}
					    	if(userRole.equalsIgnoreCase("Creator"))
					    	{
					    		 String sapCreationDate=approvalsForm.getSapCreationDate();
								  String b[]=sapCreationDate.split("/");
								  sapCreationDate=b[2]+"-"+b[1]+"-"+b[0];
					    	
					    		String updatQuery="update material_code_request set  STORAGE_LOCATION_ID='"+approvalsForm.getStorageLocationId()+"',MATERIAL_SHORT_NAME='"+approvalsForm.getMaterialShortName()+"'," +
								"MATERIAL_LONG_NAME='"+approvalsForm.getMaterialLongName()+"',MATERIAL_GROUP_ID='"+approvalsForm.getMaterialGroupId()+"',PHARMACOP_NAME='"+approvalsForm.getPharmacopName()+"',PHARMACOP_GRADE='"+approvalsForm.getPharmacopGrade()+"',GENERIC_NAME='"+approvalsForm.getGenericName()+"',SYNONYM='"+approvalsForm.getSynonym()+"',PHARMACOP_SPECIFICATION='"+approvalsForm.getPharmacopSpecification()+"'" +
								",IS_DMF_MATERIAL='"+approvalsForm.getIsDMFMaterial()+"',DMF_GRADE_ID='"+approvalsForm.getDmfGradeId()+"',MATERIAL_GRADE='"+approvalsForm.getMaterialGrade()+"',COS_GRADE_AND_NO='"+approvalsForm.getCosGradeNo()+"',ADDITIONAL_TEST='"+approvalsForm.getAdditionalTest()+"',COUNTRY_ID='"+approvalsForm.getCountryId()+"',CUSTOMER_NAME='"+approvalsForm.getCustomerName()+"'" +
								",TO_BE_USED_IN_PRODUCTS='"+approvalsForm.getToBeUsedInProducts()+"',IS_VENDOR_SPECIFIC_MATERIAL='"+approvalsForm.getIsVendorSpecificMaterial()+"',MFGR_NAME='"+approvalsForm.getMfgrName()+"',SITE_OF_MANUFACTURE='"+approvalsForm.getSiteOfManufacture()+"',TEMP_CONDITION='"+approvalsForm.getTempCondition()+"',STORAGE_CONDITION='"+approvalsForm.getStorageCondition()+"',SHELF_LIFE='"+approvalsForm.getShelfLife()+"',SHELF_LIFE_TYPE='"+approvalsForm.getShelfLifeType()+"',DUTY_ELEMENT='"+approvalsForm.getDutyElement()+"'" +
								",RETEST_DAYS='"+approvalsForm.getRetestDays()+"',RETEST_DAYS_TYPE='"+approvalsForm.getRetestType()+"',VALUATION_CLASS='"+approvalsForm.getValuationClass()+"',APPROXIMATE_VALUE='"+approvalsForm.getApproximateValue()+"',UNIT_OF_MEAS_ID='"+approvalsForm.getUnitOfMeasId()+"',PURCHASE_GROUP_ID='"+approvalsForm.getPuchaseGroupId()+"'" +
								",MODIFIED_DATE='"+dateNow+"',MODIFIED_BY='"+user.getId()+"',SAP_CODE_NO='"+approvalsForm.getSapCodeNo()+"',SAP_CODE_EXISTS='"+approvalsForm.getSapCodeExists()+"',SAP_CREATION_DATE='"+sapCreationDate+"',SAP_CREATED_BY='"+approvalsForm.getSapCreatedBy()+"',last_approver='"+user.getFullName()+"',pending_approver='No' where REQUEST_NO='"+reqId+"'";
					    	}
					    	
					    	//update last Approver and Pending Approver
					    	//GET pending approvers
					    	if(!(userRole.equalsIgnoreCase("Creator")))
					    	{
					    	checkStatus=0;
					    	String pendingApprovers="";
					    	String nextApprovers="";
					    	getNextApprover="select emp.EMP_FULLNAME,Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers as mat,emp_official_info AS emp" +
							" where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
					ResultSet rsPendignApp=ad.selectQuery(getNextApprover);
					while(rsPendignApp.next())
					{  
						checkStatus=1;
						pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
					}
					if(checkStatus==0)
					{
						getNextApprover="select emp.EMP_FULLNAME,Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers as mat,emp_official_info AS emp" +
								" where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
						rsPendignApp=ad.selectQuery(getNextApprover);
						while(rsPendignApp.next())
						{  
							checkStatus=1;
							pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
						}
					}
							if(!(pendingApprovers.equalsIgnoreCase(""))){
								pendingApprovers=pendingApprovers.substring(0, (pendingApprovers.length()-2));	
							}
							
							String updateMaterial="update material_code_request set last_approver='"+user.getFullName()+"',pending_approver='"+pendingApprovers+"',Approve_Type='In Process' where REQUEST_NO='"+reqId+"'";
					    	int check=ad.SqlExecuteUpdate(updateMaterial);
					    	}
					    	// insert record to next approver
					    	String insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
					    	" values('"+reqId+"','Material Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextAppr+"','No','"+reqesterID+"','','"+matType+"')";
					    	ad.SqlExecuteUpdate(insertAllRequest);
					    	ad.connClose();
					    	EMailer email = new EMailer();
							String approvermail="";
							 email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Material Code Request", nextAppr, reqesterID);
					    	if(!(nextPar1.equalsIgnoreCase(""))){
					    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
						    	" values('"+reqId+"','Material Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar1+"','No','"+reqesterID+"','','"+matType+"')";
						    	ad.SqlExecuteUpdate(insertAllRequest);
						    	ad.connClose();
								 email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Material Code Request", nextPar1, reqesterID);
					    	}
					    	if(!(nextPar2.equalsIgnoreCase(""))){
					    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
						    	" values('"+reqId+"','Material Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar2+"','No','"+reqesterID+"','','"+matType+"')";
						    	ad.SqlExecuteUpdate(insertAllRequest);
						    	ad.connClose();
						    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Material Code Request", nextPar2, reqesterID);
					    	}
					    	
					    }else{
					    	approvalsForm.setMessage("Error..Request Is Not Approved");
					    }
						
					}if(!(parllelAppr1.equalsIgnoreCase(""))){
						
						if(empNo.equalsIgnoreCase(parllelAppr1)){
							String updateStatus="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+user.getEmployeeNo()+"'," +
							"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',approved_date='"+dateNow+"',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Req_Type='Material Master' and Pending_Approver='"+user.getEmployeeNo()+"'";
						    int saveStatus=0;
						    saveStatus=ad.SqlExecuteUpdate(updateStatus);
						    
						    String updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+approver+"'," +
							"Pending_Approver='',Approved_Persons='"+approver+"',approved_date='"+dateNow+"',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Req_Type='Material Master' and Pending_Approver='"+approver+"'";
						    ad.SqlExecuteUpdate(updateStatusForApprover); 
						    
						    if(!(parllelAppr2.equalsIgnoreCase("")))
						    {
						    	  updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+parllelAppr2+"'," +
									"Pending_Approver='',Approved_Persons='"+parllelAppr2+"',approved_date='"+dateNow+"',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Req_Type='Material Master' and Pending_Approver='"+parllelAppr2+"'";
								    ad.SqlExecuteUpdate(updateStatusForApprover); 
						    }
						   
						    if(saveStatus>0)
						    {
						    	approvalsForm.setMessage2("Request Is Approved Successfully");
						    	String recordStatus="select * from All_Request where Req_Id='"+reqId+"' and Approved_Persons='"+user.getEmployeeNo()+"'";
						    	ResultSet rsRecDet=ad.selectQuery(recordStatus);
						    	while(rsRecDet.next())
						    	{
						    		requestNo=rsRecDet.getString("Requester_Name");
						    		reqDate=rsRecDet.getString("Req_Date");
						    		reqesterID=rsRecDet.getString("Requester_Name");
						    	}
						    	
						    	// insert record to next approver
						    	String insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
						    	" values('"+reqId+"','Material Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextAppr+"','No','"+reqesterID+"','','"+matType+"')";
						    	ad.SqlExecuteUpdate(insertAllRequest);
						    	if(!(nextPar1.equalsIgnoreCase(""))){
						    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
							    	" values('"+reqId+"','Material Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar1+"','No','"+reqesterID+"','','"+matType+"')";
							    	ad.SqlExecuteUpdate(insertAllRequest);
							    
						    	}
						    	if(!(nextPar2.equalsIgnoreCase(""))){
						    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
							    	" values('"+reqId+"','Material Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar2+"','No','"+reqesterID+"','','"+matType+"')";
							    	ad.SqlExecuteUpdate(insertAllRequest);
							    
						    	}
						    	
						    	if(!(userRole.equalsIgnoreCase("Creator")))
						    	{
						    	checkStatus=0;
						    	String pendingApprovers="";
						    	String nextApprovers="";
						    	getNextApprover="select emp.EMP_FULLNAME,Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers as mat,emp_official_info AS emp" +
								" where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
						ResultSet rsPendignApp=ad.selectQuery(getNextApprover);
						while(rsPendignApp.next())
						{  
							checkStatus=1;
							pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
						}
						if(checkStatus==0)
						{
							getNextApprover="select emp.EMP_FULLNAME,Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers as mat,emp_official_info AS emp" +
									" where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
							rsPendignApp=ad.selectQuery(getNextApprover);
							while(rsPendignApp.next())
							{  
								checkStatus=1;
								pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
							}
						}
								if(!(pendingApprovers.equalsIgnoreCase(""))){
									pendingApprovers=pendingApprovers.substring(0, (pendingApprovers.length()-2));	
								}
								
								String updateMaterial="update material_code_request set last_approver='"+user.getFullName()+"',pending_approver='"+pendingApprovers+"',Approve_Type='In Process' where REQUEST_NO='"+reqId+"'";
						    	int check=ad.SqlExecuteUpdate(updateMaterial);
						    	}
						    	
						    	
						    }else{
						    	approvalsForm.setMessage("Error..Request Is Not Approved");
						    }
							
						}
						
						
					}
					if(!(parllelAppr2.equalsIgnoreCase(""))){

						
						if(empNo.equalsIgnoreCase(parllelAppr2)){
							String updateStatus="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+user.getEmployeeNo()+"'," +
							"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',approved_date='"+dateNow+"',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Req_Type='Material Master' and Pending_Approver='"+user.getEmployeeNo()+"'";
						    int saveStatus=0;
						    saveStatus=ad.SqlExecuteUpdate(updateStatus);
						    String updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+approver+"'," +
							"Pending_Approver='',Approved_Persons='"+approver+"',approved_date='"+dateNow+"',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Req_Type='Material Master' and Pending_Approver='"+approver+"'";
						    ad.SqlExecuteUpdate(updateStatusForApprover); 
						    
						    if(!(parllelAppr1.equalsIgnoreCase("")))
						    {
						    	  updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+approvalsForm.getComments()+"',Last_Approver='"+parllelAppr1+"'," +
									"Pending_Approver='',Approved_Persons='"+parllelAppr1+"',approved_date='"+dateNow+"',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Req_Type='Material Master' and Pending_Approver='"+parllelAppr1+"'";
								    ad.SqlExecuteUpdate(updateStatusForApprover); 
						    }
						    if(saveStatus>0)
						    {
						    	 
						    	String recordStatus="select * from All_Request where Req_Id='"+reqId+"' and Approved_Persons='"+user.getEmployeeNo()+"'";
						    	ResultSet rsRecDet=ad.selectQuery(recordStatus);
						    	while(rsRecDet.next())
						    	{
						    		requestNo=rsRecDet.getString("Requester_Name");
						    		reqDate=rsRecDet.getString("Req_Date");
						    		reqesterID=rsRecDet.getString("Requester_Name");
						    	}
						    	
						    	// insert record to next approver
						    	String insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
						    	" values('"+reqId+"','Material Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextAppr+"','No','"+reqesterID+"','','"+matType+"')";
						    	ad.SqlExecuteUpdate(insertAllRequest);
						    	if(!(nextPar1.equalsIgnoreCase(""))){
						    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
							    	" values('"+reqId+"','Material Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar1+"','No','"+reqesterID+"','','"+matType+"')";
							    	ad.SqlExecuteUpdate(insertAllRequest);
							    
						    	}
						    	if(!(nextPar2.equalsIgnoreCase(""))){
						    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
							    	" values('"+reqId+"','Material Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar2+"','No','"+reqesterID+"','','"+matType+"')";
							    	ad.SqlExecuteUpdate(insertAllRequest);
							    
						    	}
						    	
						    	if(!(userRole.equalsIgnoreCase("Creator")))
						    	{
						    	checkStatus=0;
						    	String pendingApprovers="";
						    	String nextApprovers="";
						    	getNextApprover="select emp.EMP_FULLNAME,Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers as mat,emp_official_info AS emp" +
								" where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
						ResultSet rsPendignApp=ad.selectQuery(getNextApprover);
						while(rsPendignApp.next())
						{  
							checkStatus=1;
							pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
						}
						if(checkStatus==0)
						{
							getNextApprover="select emp.EMP_FULLNAME,Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers as mat,emp_official_info AS emp" +
									" where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
							rsPendignApp=ad.selectQuery(getNextApprover);
							while(rsPendignApp.next())
							{  
								checkStatus=1;
								pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
							}
						}
								if(!(pendingApprovers.equalsIgnoreCase(""))){
									pendingApprovers=pendingApprovers.substring(0, (pendingApprovers.length()-2));	
								}
								
								String updateMaterial="update material_code_request set last_approver='"+user.getFullName()+"',pending_approver='"+pendingApprovers+"',Approve_Type='In Process' where REQUEST_NO='"+reqId+"'";
						    	int check=ad.SqlExecuteUpdate(updateMaterial);
						    	}
						    
						    	
						    }else{
						    	approvalsForm.setMessage("Error..Request Is Not Approved");
						    }
							
						}
					}
			     
				}
					
				//set reject buttons  	
					
				
					
					
					
				//material reject
				}catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
		if(reqType.equalsIgnoreCase("Leave"))
		{
			int year = 0;
			for(int i=0;i<selectedReq.length;i++){
				
				Date dNow = new Date( );
			
				 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS");
					String dateNow = ft.format(dNow);
			try{	
				float noOfDays=0;
				String leaveType="";
				String empID="";
				boolean existStatus=false;
				boolean approve=false;
				String submit_date="";
				String stdate="";
				
				String getLeaveDetails="select *,year(start_date) as year from leave_details where Req_Id='"+selectedReq[i]+"'"; 
				ResultSet rsLeave=ad.selectQuery(getLeaveDetails);
				while(rsLeave.next())
				{
					noOfDays=rsLeave.getFloat("no_of_days");
					leaveType=rsLeave.getString("leave_type");
					empID=rsLeave.getString("firstname");
					submit_date=rsLeave.getString("submit_date");
					stdate=rsLeave.getString("start_date");
					year=Integer.parseInt(rsLeave.getString("year"));
				}
				int curyear = Calendar.getInstance().get(Calendar.YEAR);
				int priorityCout=0;
				int totalApproverCount=0;
				String dataFlowType=""; 
				String checkESSApproverList="select count(*) from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave'";
				ResultSet rsCheckInEss=ad.selectQuery(checkESSApproverList);
				while(rsCheckInEss.next())
				{
					int number=rsCheckInEss.getInt(1);
					totalApproverCount=rsCheckInEss.getInt(1);
					if(number==0)
					{
						existStatus=false;
					}else{
						existStatus=true;
					}
				}	
				String comments="";
				if(existStatus==true){
					String getDataFlowType="select * from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave' ";
					ResultSet rsDataFlowType=ad.selectQuery(getDataFlowType);
					while(rsDataFlowType.next())
					{
						dataFlowType=rsDataFlowType.getString("reqType");
					}
					if(dataFlowType.equalsIgnoreCase("sequential"))
					{
						int approverPriority=0;
						String getApprPriority="select Priority from ESS_Approvers where employeeNumber='"+empID+"' and ApproverId='"+user.getEmployeeNo()+"' and essType='Leave'";
						ResultSet rsApprPriority=ad.selectQuery(getApprPriority);
						while(rsApprPriority.next())
						{
							approverPriority=rsApprPriority.getInt("Priority");
						}
						if(totalApproverCount==approverPriority)
						{
							//last approver
							
							existStatus=false;
							
							//check cancelled Record
	                        int cancelledCount=0;
	                        String getCheckCancelled="select COUNT(*) from All_Request where Req_Id='"+selectedReq[i]+"' and Req_Type='Leave' and Req_Status='Cancelled'";
	                        ResultSet rsCheckCancel=ad.selectQuery(getCheckCancelled);
	                        while(rsCheckCancel.next())
	                        {
	                        	cancelledCount=rsCheckCancel.getInt(1);
	                        	if(cancelledCount>0)
	                        	{
	                        		existStatus=true;
	                        		 String updateSql= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Comments='"+comments+"'," +
	                                 "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+selectedReq[i]+"' and Pending_approver='"+user.getEmployeeNo()+"' and Req_Type='Leave'";
	    							 int upd=ad.SqlExecuteUpdate(updateSql);
	 	   							 if(upd>0)
	 	   							 {
	 	   								request.setAttribute("statusMessage2", "statusMessage2");
										approvalsForm.setMessage2("This Request already has been Cancelled");
	 	   							 }
	                        	}
	                        }
						}else{
							
						String nextApprover="";
						String getNextApprDetails="select ApproverId from ESS_Approvers where employeeNumber='"+empID+"' and Priority='"+(approverPriority+1)+"' and essType='Leave'";
	                    ResultSet rsNextApprDetails=ad.selectQuery(getNextApprDetails);
	                    while(rsNextApprDetails.next())
	                    {
	                    	nextApprover=rsNextApprDetails.getString("ApproverId");
	                    }
	                  //check cancelled Record
	                    int cancelledCount=0;
	                    String getCheckCancelled="select COUNT(*) from All_Request where Req_Id='"+selectedReq[i]+"' and Req_Type='Leave' and Req_Status='Cancelled'";
	                    ResultSet rsCheckCancel=ad.selectQuery(getCheckCancelled);
	                    while(rsCheckCancel.next())
	                    {
	                    	cancelledCount=rsCheckCancel.getInt(1);
	                    	if(cancelledCount>0)
	                    	{
	                    		existStatus=true;
	                    		 String updateSql= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Comments='"+comments+"'," +
	                             "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+selectedReq[i]+"' and Pending_approver='"+user.getEmployeeNo()+"' and Req_Type='Leave'";
								 int upd=ad.SqlExecuteUpdate(updateSql);
		   							 if(upd>0)
		   							 {
		   								request.setAttribute("statusMessage2", "statusMessage2");
									approvalsForm.setMessage2("This Request already has been Cancelled");
		   							 }
	                    	}
	                    }
	                    if(cancelledCount==0){
	                    String updateSql= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Comments='"+comments+"'," +
	                    "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+selectedReq[i]+"' and Pending_approver='"+user.getEmployeeNo()+"' and Req_Type='Leave'";
						 int upd=ad.SqlExecuteUpdate(updateSql);
							 if(upd>0)
							 {
								String saveRecReq="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments) values (";
								saveRecReq = saveRecReq + "'"+selectedReq[i]+"','Leave','"+empID+"','"+submit_date+"','Pending','','"+nextApprover+"','No','"+empID+"','')";
								 int i1=ad.SqlExecuteUpdate(saveRecReq);
									ad.connClose();
								 EMailer email = new EMailer();
								 int j=email.sendMailToNextSequentialApprover(request, "", selectedReq[i], "Leave",nextApprover,empID);
								 
							 }
					  }
						}
					}
					if(dataFlowType.equalsIgnoreCase("parallel"))
					{
						//check total Approve count
						
							 
						int totalApproveCount=0;
						String getTotApprCount="select count(*) from All_Request where Req_Id='"+selectedReq[i]+"' and Requester_Name='"+empID+"' and Req_Status='Approved' and Req_Type='Leave'";
						ResultSet rsTotApprCount=ad.selectQuery(getTotApprCount);
						while(rsTotApprCount.next())
						{
							totalApproveCount=rsTotApprCount.getInt(1);
						}
						if(totalApproveCount==0)
						{
							 String updateSql11= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Comments='"+comments+"'," +
		                     "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved',Actual_Approver='"+user.getEmployeeNo()+"',Actual_Approver_status='Approved',Actual_Approved_Date='"+dateNow+"',Actual_Approved_Comments='"+comments+"' where Req_Id='"+selectedReq[i]+"' and Pending_approver='"+user.getEmployeeNo()+"' and Req_Type='Leave'";
								 int upd1=ad.SqlExecuteUpdate(updateSql11);
								 status="Approve";
								 approvalsForm.setMessage2("Request has been approved.");
								 
								 String frstapp="";
									String par1app="";
									String par2app="";
									
									//Approvers
									String getNextApprDetails="select * from ESS_Approvers where employeeNumber='"+empID+"'  and essType='Leave'";
		                         ResultSet rsNextApprDetails=ad.selectQuery(getNextApprDetails);
		                         while(rsNextApprDetails.next())
		                         {
		                         	frstapp=rsNextApprDetails.getString("ApproverId");
		                         	par1app=rsNextApprDetails.getString("Parallel_Approver1");
		                         	par2app=rsNextApprDetails.getString("Parallel_Approver2");
		                         }
		                         if(par1app==null)
									{
										par1app="";
									}
									
									if(par2app==null)
									{
										par2app="";
									}
		                         
		                         if(!frstapp.equalsIgnoreCase(""))
									{
										String updateSql1= "update All_Request set Approved_Persons='"+frstapp+"', Last_approver='"+frstapp+"',Pending_approver='',Comments=''," +
				                                "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved',Actual_Approver='"+user.getEmployeeNo()+"',Actual_Approver_status='Approved',Actual_Approved_Date='"+dateNow+"',Actual_Approved_Comments='"+comments+"' where Req_Id='"+selectedReq[i]+"' and Pending_Approver='"+frstapp+"' and Req_Type='Leave'";
				   							 int upd11=ad.SqlExecuteUpdate(updateSql1);
									}
		                         
		                         if(par1app==null)
									{
										par1app="";
									}
									
									if(par2app==null)
									{
										par2app="";
									}
		                         
		                         if(!par1app.equalsIgnoreCase(""))
									{
										String updateSql1= "update All_Request set Approved_Persons='"+par1app+"', Last_approver='"+par1app+"',Pending_approver='',Comments=''," +
				                                "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved',Actual_Approver='"+user.getEmployeeNo()+"',Actual_Approver_status='Approved',Actual_Approved_Date='"+dateNow+"',Actual_Approved_Comments='"+comments+"' where Req_Id='"+selectedReq[i]+"' and Pending_Approver='"+par1app+"' and Req_Type='Leave'";
				   							 int upd11=ad.SqlExecuteUpdate(updateSql1);
									}
									
									if(!par2app.equalsIgnoreCase(""))
									{
										String updateSql1= "update All_Request set Approved_Persons='"+par2app+"', Last_approver='"+par2app+"',Pending_approver='',Comments=''," +
				                                "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved',Actual_Approver='"+user.getEmployeeNo()+"',Actual_Approver_status='Approved',Actual_Approved_Date='"+dateNow+"',Actual_Approved_Comments='"+comments+"' where Req_Id='"+selectedReq[i]+"' and Pending_Approver='"+par2app+"' and Req_Type='Leave'";
				   							 int upd11=ad.SqlExecuteUpdate(updateSql1);
									}
								 
								 
									existStatus=false;
									approve=true;
							//check reject count 
							int totalRejectCount=0;
							String getTotRejectCount="select count(*) from All_Request where Req_Id='"+selectedReq[i]+"' and Requester_Name='"+empID+"' and Req_Status='Rejected' and Req_Type='Leave'";
							ResultSet rsTotRejCount=ad.selectQuery(getTotRejectCount);
							while(rsTotRejCount.next())
							{
								totalRejectCount=rsTotRejCount.getInt(1);
							}
							if(totalRejectCount==0)
							{
							
							 String updateSql= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Comments='"+comments+"'," +
	                            "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+selectedReq[i]+"' and Pending_approver='"+user.getEmployeeNo()+"' and Req_Type='Leave'";
								 int upd=ad.SqlExecuteUpdate(updateSql);
	   							 
							}
							if(totalRejectCount==2)
							{
								String updateSql1= "update All_Request set Req_Status='Approved', Comments='"+comments+"',approved_date='"+dateNow+"',rejected_date='',Last_Approver='"+user.getEmployeeNo()+"',Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"' where Req_Id='"+selectedReq[i]+"' and Pending_Approver='"+user.getEmployeeNo()+"'  and Req_Type='Leave'";;
								int upd2=ad.SqlExecuteUpdate(updateSql1);
								
							}
						}if(totalApproveCount==1){
							//no one leave request is approved
							existStatus=false;
							
							//check cancelled Record
			                int cancelledCount=0;
			                String getCheckCancelled="select COUNT(*) from All_Request where Req_Id='"+selectedReq[i]+"' and Req_Type='Leave' and Req_Status='Cancelled'";
			                ResultSet rsCheckCancel=ad.selectQuery(getCheckCancelled);
			                while(rsCheckCancel.next())
			                {
			                	cancelledCount=rsCheckCancel.getInt(1);
			                	if(cancelledCount>0)
			                	{
											request.setAttribute("statusMessage2", "statusMessage2");
											approvalsForm.setMessage2("This Request already has been Cancelled");
											existStatus=true;
			                	}
			                }
						}
						if(totalApproveCount==2)
						{
							//show message Approve
							String updateSql= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Comments='"+comments+"'," +
	                        "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+selectedReq[i]+"' and Pending_approver='"+user.getEmployeeNo()+"' and Req_Type='Leave'";
							 int upd=ad.SqlExecuteUpdate(updateSql);
								 
						}
					}
				
				}
			if(existStatus==false){	
			String modifyRequest="update  All_Request set Last_Approver='"+user.getEmployeeNo()+"',Approved_Persons='"+user.getEmployeeNo()+"'," +
			"Req_Status='Approved',Pending_Approver='',approved_date='"+dateNow+"',rejected_date='' where Req_Type='Leave' and Req_Id='"+selectedReq[i]+"' and Pending_Approver='"+user.getEmployeeNo()+"'";	
			int statusChange=ad.SqlExecuteUpdate(modifyRequest);
			if(statusChange>0||approve==true){
			
			
				float lvBal=0;
				float avlBal=0;
				float closingBal=0;
				float leaveAvaild=0;
				
				
				String leaveBal="select * from lv_type_d where lv_empcode='"+empID+"' and lv_typeid='"+leaveType+"' and lv_calyear='"+year+"'";
				ResultSet rsLeaveBal=ad.selectQuery(leaveBal);
				while(rsLeaveBal.next()){
					avlBal=rsLeaveBal.getFloat("lv_awtBal");
					closingBal=rsLeaveBal.getFloat("lv_clbal");
					leaveAvaild=rsLeaveBal.getFloat("lv_availed");
				}
				avlBal=avlBal-noOfDays;
				closingBal=closingBal-noOfDays;
				leaveAvaild=leaveAvaild+noOfDays;
				
				String updateSql= "update leave_details set Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',leave_status='1',Approvel_Status='Approved',approved_date='"+dateNow+"',rejected_date='',lv_balence='"+closingBal+"' where Req_Id='"+selectedReq[i]+"'";
				ad.SqlExecuteUpdate(updateSql);
				
			 
			  
			///fianaicial year
				if(leaveType.equalsIgnoreCase("2") || leaveType.equalsIgnoreCase("3"))
				{
				if(curyear==year)
				{
			  String updateLeaveDetails="update lv_type_d set lv_clbal='"+closingBal+"',lv_awtBal='"+avlBal+"',lv_availed='"+leaveAvaild+"' where lv_typeid='"+leaveType+"' and lv_empcode='"+empID+"' and lv_calyear='"+year+"'";
			  int checkResult=ad.SqlExecuteUpdate(updateLeaveDetails);		
				}
				else
				{
					String updateLeaveDetails="update lv_type_d set lv_clbal='"+closingBal+"',lv_awtBal='"+avlBal+"',lv_availed='"+leaveAvaild+"' where lv_typeid='"+leaveType+"' and lv_empcode='"+empID+"' and lv_calyear='"+year+"'";
					  int checkResult=ad.SqlExecuteUpdate(updateLeaveDetails);	
					  
					  String updatecuryear="update lv_type_d set lv_clbal=lv_clbal-"+noOfDays+" ,lv_opbal=lv_opbal-"+noOfDays+" where lv_typeid='"+leaveType+"' and lv_empcode='"+empID+"' and lv_calyear='"+curyear+"'";
					  int curResult=ad.SqlExecuteUpdate(updatecuryear);	
				}
				}
				else
				{
					  String updateLeaveDetails="update lv_type_d set lv_clbal='"+closingBal+"',lv_awtBal='"+avlBal+"',lv_availed='"+leaveAvaild+"' where lv_typeid='"+leaveType+"' and lv_empcode='"+empID+"' and lv_calyear='"+year+"'";
					  int checkResult=ad.SqlExecuteUpdate(updateLeaveDetails);	
				}
			  
				///update comp_oT
				if(leaveType.equalsIgnoreCase("6"))
												
				{
					
					Date dNow1 = new Date();
					SimpleDateFormat ft1 = new SimpleDateFormat("yyyy-MM-dd");
					String todaydate = ft1.format(dNow1);
					
					
					float reqnoOfDays=noOfDays;
				    String upadte="select * from COMP_OT_SAP where Employee_Number='"+empID+"' and Comp_Off_Balance>0 and  "
                     		+ "DATEDIFF(DAY,Start_Date,'"+stdate+"') <=(select comp_off_days  from location where location_code="
                     		+ "(select locid from emp_official_info where pernr='"+empID+"')) and '"+stdate+"'>=Start_Date order by Start_Date ";
                     ResultSet rs=ad.selectQuery(upadte);
				
					while(rs.next())
					{
						int chk=0;
						if(reqnoOfDays>1)
						{
							String update="update COMP_OT_SAP set Comp_Off_Availed_Date='"+stdate+"',Comp_Off_Availed_Days=Number_of_Days,Processd_Date='"+dateNow+"',Leav_req_no='"+selectedReq[i]+"' where Employee_Number='"+empID+"' and Start_Date='"+rs.getString("Start_Date")+"' ";
							chk=ad.SqlExecuteUpdate(update);	
							
							String updt2="update COMP_OT_SAP set Comp_Off_Balance=Number_of_Days-Comp_Off_Availed_Days,Processd_Date='"+dateNow+"',Leav_req_no='"+selectedReq[i]+"' where Employee_Number='"+empID+"' and Start_Date='"+rs.getString("Start_Date")+"'";
							chk=ad.SqlExecuteUpdate(updt2);
						}
						if(reqnoOfDays==1)
						{
							String update="update COMP_OT_SAP set Comp_Off_Availed_Date='"+stdate+"',Comp_Off_Availed_Days=Number_of_Days,Processd_Date='"+dateNow+"',Leav_req_no='"+selectedReq[i]+"' where Employee_Number='"+empID+"' and Start_Date='"+rs.getString("Start_Date")+"' ";
							chk=ad.SqlExecuteUpdate(update);	
							
							String updt2="update COMP_OT_SAP set Comp_Off_Balance=Number_of_Days-Comp_Off_Availed_Days,Processd_Date='"+dateNow+"',Leav_req_no='"+selectedReq[i]+"' where Employee_Number='"+empID+"' and Start_Date='"+rs.getString("Start_Date")+"'";
							chk=ad.SqlExecuteUpdate(updt2);
						}
						if(reqnoOfDays==0.5)
						{
							String update="update COMP_OT_SAP set Comp_Off_Availed_Date='"+stdate+"',Comp_Off_Availed_Days=Comp_Off_Availed_Days+0.5,Processd_Date='"+dateNow+"',Leav_req_no='"+selectedReq[i]+"' where Employee_Number='"+empID+"' and Start_Date='"+rs.getString("Start_Date")+"' ";
							chk=ad.SqlExecuteUpdate(update);	
							
							String updt2="update COMP_OT_SAP set Comp_Off_Balance=Number_of_Days-Comp_Off_Availed_Days,Processd_Date='"+dateNow+"',Leav_req_no='"+selectedReq[i]+"' where Employee_Number='"+empID+"' and Start_Date='"+rs.getString("Start_Date")+"'";
							chk=ad.SqlExecuteUpdate(updt2);
						}
						
						if(chk>0)
						{
						reqnoOfDays=reqnoOfDays-rs.getFloat("Number_of_Days");
						}
						
						if(reqnoOfDays<=0)
						{
							break;
						}
						
					}
					
					
					
				}
			
			}
			}
			}catch (Exception e) {
				e.printStackTrace();
			}
			}
			}
		pendingRecords(mapping, form, request, response);
		return mapping.findForward("approvePage");
	}
	
	public ActionForward displayApprovePage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ApprovalsForm approvalsForm = (ApprovalsForm) form;
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		if(user==null){
			request.setAttribute("message","Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		return mapping.findForward("approvePage");
	}
	
	public ActionForward pendingRecords(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ApprovalsForm approvalsForm = (ApprovalsForm) form;
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		NewsandMediaDao ad=new NewsandMediaDao();
		if(user==null){
			request.setAttribute("message","Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		int totalRecords=0;
		 int  startRecord=0; int  endRecord=0;
		 String reqType="";
		 String type="";
		String req1=request.getParameter("req_type");
		if(req1==null)
		{
			 reqType=approvalsForm.getReqRequstType();
			
			
			
			 type=approvalsForm.getSelectedFilter();
		
		 totalRecords = getCountForTable(approvalsForm.getSelectedFilter(),user.getEmployeeNo(),approvalsForm.getReqRequstType());
		    startRecord=0;
		    endRecord=0;
		}
		
		if(req1!=null)
		{
			 reqType=req1;
			 approvalsForm.setReqRequstType(reqType);
			
			 type="Pending";
			 approvalsForm.setSelectedFilter(type);
		
		 totalRecords = getCountForTable(approvalsForm.getSelectedFilter(),user.getEmployeeNo(),approvalsForm.getReqRequstType());
		    startRecord=0;
		    endRecord=0;
		}
			 if(totalRecords>10)
			 {
				 approvalsForm.setTotalRecords(totalRecords);
			 startRecord=1;
			 endRecord=10;
			 approvalsForm.setStartRecord(1);
			 approvalsForm.setEndRecord(10);
				request.setAttribute("disablePreviousButton", "disablePreviousButton");
			 request.setAttribute("displayRecordNo", "displayRecordNo");
			 request.setAttribute("nextButton", "nextButton");
			 }else
			 {
				  startRecord=1;
				  endRecord=totalRecords;
				  approvalsForm.setTotalRecords(totalRecords);
				  approvalsForm.setStartRecord(1);
				  approvalsForm.setEndRecord(totalRecords); 
			 }
			 
			 if(totalRecords>0)
			 {
				 
				 
				 if (reqType.equalsIgnoreCase("User Request")) {
						LinkedList Usrreq = new LinkedList();
						String getITRecords = "";

						if (type.equalsIgnoreCase("Pending")) {
							getITRecords = "Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.subject,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type"
									+ " from  All_Request as all_R,emp_official_info as  emp, HR_QUERIES as it where all_R.Pending_Approver='"
									+ user.getEmployeeNo()
									+ "' and all_R.Req_Status='Pending' and all_R.Req_Id=it.id and  all_R.Requester_Name=emp.PERNR "
									+ "and all_R.Req_Type='"+reqType+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.subject,it.Last_approver,it.Pending_approver) as  sub  order by Req_Id desc";

						}

						if (type.equalsIgnoreCase("Approved")) {
							getITRecords = "Select * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.subject,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type"
									+ " from  All_Request as all_R,emp_official_info as  emp, HR_QUERIES as it where all_R.Last_Approver='"
									+ user.getEmployeeNo()
									+ "' and all_R.Req_Status='Approved' and all_R.Req_Id=it.id and  all_R.Requester_Name=emp.PERNR "
									+ "and all_R.Req_Type='"+reqType+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.subject,it.Last_approver,it.Pending_approver) as  sub  order by Req_Id desc";

						}
						if (type.equalsIgnoreCase("Rejected")) {
							getITRecords = "Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.subject,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type"
									+ " from  All_Request as all_R,emp_official_info as  emp, HR_QUERIES as it where all_R.Last_Approver='"
									+ user.getEmployeeNo()
									+ "' and all_R.Req_Status='Rejected' and all_R.Req_Id=it.id and  all_R.Requester_Name=emp.PERNR "
									+ "and all_R.Req_Type='"+reqType+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.subject,it.Last_approver,it.Pending_approver) as  sub  order by Req_Id desc";
						}

						if (type.equalsIgnoreCase("All")) {

							getITRecords = "Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.subject,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type"
									+ " from  All_Request as all_R,emp_official_info as  emp, HR_QUERIES as it where (all_R.Last_Approver='"
									+ user.getEmployeeNo()
									+ "' or all_R.Pending_Approver='"
									+ user.getEmployeeNo()
									+ "')  and all_R.Req_Id=it.id and  all_R.Requester_Name=emp.PERNR "
									+ "and all_R.Req_Type='"+reqType+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.subject,it.Last_approver,it.Pending_approver) as  sub  order by Req_Id desc";

						}
						ResultSet rsit = ad.selectQuery(getITRecords);
						try {
							while (rsit.next()) {
								LeaveForm leave = new LeaveForm();
								leave.setRequestNumber(rsit.getInt("Req_Id"));
								leave.setEmployeeName(rsit.getString("EMP_FULLNAME"));
								leave.setSubmitDate(EMicroUtils.display(rsit
										.getDate("Req_Date")));
								leave.setStatus(rsit.getString("Req_Status"));
								
								leave.setReason(rsit.getString("subject"));
								leave.setLapprover(rsit.getString("Last_approver"));
								leave.setPapprover(rsit.getString("Pending_approver"));
								Usrreq.add(leave);

							}
							if (Usrreq.size() > 0) {
								if (type.equalsIgnoreCase("Pending")) {
									// request.setAttribute("displayButton",
									// "displayButton");
								}
							}
							request.setAttribute("Usrreq", Usrreq);
							if (Usrreq.size() == 0) {
								request.setAttribute("no Usrreq records",
										"no Usrreq records");
								approvalsForm.setMessage3("No Records Found..");
							}
						} catch (SQLException e) {

							e.printStackTrace();
						}

					}
				 
				 
				 if (reqType.equalsIgnoreCase("Travel")) {
						LinkedList Travellsit = new LinkedList();
						String getITRecords = "";

						if (type.equalsIgnoreCase("Pending")) {
							getITRecords = "Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Return_On,it.From_place,it.To_place,it.Depart_On,it.Mode_of_travel,it.Req_type,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,CONVERT(varchar(10),it.Req_Date,103)+' '+ CONVERT(varchar(5),it.Req_Date,108) as Created_date1,all_R.type"
									+ " from  All_Request as all_R,emp_official_info as  emp, Travel_Desk as it where all_R.Pending_Approver='"
									+ user.getEmployeeNo()
									+ "' and all_R.Req_Status='Pending' and all_R.Req_Id=it.reqNo and  all_R.Requester_Name=emp.PERNR "
									+ "and all_R.Req_Type='"+reqType+"' group by it.Return_On, it.From_place,it.To_place,it.Depart_On,it.Mode_of_travel,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,it.Req_Date,all_R.type,it.Req_type,it.Last_approver,it.Pending_approver) as  sub  order by Req_Id desc";

						}

						if (type.equalsIgnoreCase("Approved")) {
							getITRecords = "Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Return_On,it.From_place,it.To_place,it.Depart_On,it.Mode_of_travel,it.Req_type,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,CONVERT(varchar(10),it.Req_Date,103)+' '+ CONVERT(varchar(5),it.Req_Date,108) as Created_date1,all_R.type"
									+ " from  All_Request as all_R,emp_official_info as  emp, Travel_Desk as it where all_R.Last_Approver='"
									+ user.getEmployeeNo()
									+ "' and all_R.Req_Status='Approved' and all_R.Req_Id=it.reqNo and  all_R.Requester_Name=emp.PERNR "
									+ "and all_R.Req_Type='"+reqType+"' group by it.Return_On, it.From_place,it.To_place,it.Depart_On,it.Mode_of_travel,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,it.Req_Date,all_R.type,it.Req_type,it.Last_approver,it.Pending_approver) as  sub order by Req_Id desc";

						}
						if (type.equalsIgnoreCase("Rejected")) {
							getITRecords = "Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Return_On,it.From_place,it.To_place,it.Depart_On,it.Mode_of_travel,it.Req_type,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,CONVERT(varchar(10),it.Req_Date,103)+' '+ CONVERT(varchar(5),it.Req_Date,108) as Created_date1,all_R.type"
									+ " from  All_Request as all_R,emp_official_info as  emp, Travel_Desk as it where all_R.Last_Approver='"
									+ user.getEmployeeNo()
									+ "' and all_R.Req_Status='Rejected' and all_R.Req_Id=it.reqNo and  all_R.Requester_Name=emp.PERNR "
									+ "and all_R.Req_Type='"+reqType+"' group by it.Return_On,it.From_place,it.To_place,it.Depart_On,it.Mode_of_travel,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,it.Req_Date,all_R.type,it.Req_type,it.Last_approver,it.Pending_approver) as  sub order by Req_Id desc";
						}

						if (type.equalsIgnoreCase("All")) {

							getITRecords = "Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Return_On,it.From_place,it.To_place,it.Depart_On,it.Mode_of_travel,it.Req_type,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,CONVERT(varchar(10),it.Req_Date,103)+' '+ CONVERT(varchar(5),it.Req_Date,108) as Created_date1,all_R.type"
									+ " from  All_Request as all_R,emp_official_info as  emp, Travel_Desk as it where (all_R.Last_Approver='"
									+ user.getEmployeeNo()
									+ "' or all_R.Pending_Approver='"
									+ user.getEmployeeNo()
									+ "')  and all_R.Req_Id=it.reqNo and  all_R.Requester_Name=emp.PERNR "
									+ "and all_R.Req_Type='"+reqType+"' group by it.Return_On,it.From_place,it.To_place,it.Depart_On,it.Mode_of_travel, all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,it.Req_Date,all_R.type,it.Req_type,it.Last_approver,it.Pending_approver) as  sub order by Req_Id desc";

						}
						ResultSet rsit = ad.selectQuery(getITRecords);
						try {
							while (rsit.next()) {
								LeaveForm leave = new LeaveForm();
								leave.setRequestNumber(rsit.getInt("Req_Id"));
								leave.setEmployeeName(rsit.getString("EMP_FULLNAME"));
								leave.setSubmitDate(rsit.getString("Created_date1"));
								//leave.setStatus(rsit.getString("Req_Status"));
								
								//leave.setReason(rsit.getString("Req_type"));
							//	leave.setLapprover(rsit.getString("Last_approver"));
								
								String pend="select emp.EMP_FULLNAME from emp_official_info as emp,All_Request as all_R where all_R.Pending_Approver=emp.pernr and all_R.Req_Type='"+reqType+"' and all_R.Pending_Approver='"+user.getEmployeeNo()+"'";
								ResultSet pending=ad.selectQuery(pend);
								while(pending.next())
								{
									leave.setPapprover(pending.getString("EMP_FULLNAME"));
								}
								
								ApprovalsForm travel = new ApprovalsForm();
								leave.setFromPlace(rsit.getString("From_place"));
								leave.setToPlace(rsit.getString("To_place"));
								leave.setDepartOn(rsit.getString("Depart_On"));
								
								if(rsit.getString("Mode_of_travel").equalsIgnoreCase("null"))
								{
									leave.setTypeOfTravel("");
								}
								else
								{
									leave.setTypeOfTravel(rsit.getString("Mode_of_travel"));
								}
								
								
								leave.setReturnOn(rsit.getString("Return_On"));
								
								Travellsit.add(leave);
								
							}
							if (Travellsit.size() > 0) {
								if (type.equalsIgnoreCase("Pending")) {
									// request.setAttribute("displayButton",
									// "displayButton");
								}
							}
							request.setAttribute("travel", Travellsit);
							if (Travellsit.size() == 0) {
								request.setAttribute("no Usrreq records",
										"no Usrreq records");
								approvalsForm.setMessage3("No Records Found..");
							}
						} catch (SQLException e) {

							e.printStackTrace();
						}

					}
				 
				 if (reqType.equalsIgnoreCase("OverTime")) {
						LinkedList OT = new LinkedList();
						String getITRecords = "";

						if (type.equalsIgnoreCase("Pending")) {
							getITRecords = "Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
									+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, OVER_TIME_DETAILS as it where all_R.Pending_Approver='"
									+ user.getEmployeeNo()
									+ "' and all_R.Req_Status='Pending' and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
									+ "and all_R.Req_Type='"+reqType+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub  order by Req_Id desc";

						}

						if (type.equalsIgnoreCase("Approved")) {
							getITRecords = "Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
									+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, OVER_TIME_DETAILS as it where all_R.Last_Approver='"
									+ user.getEmployeeNo()
									+ "' and all_R.Req_Status='Approved' and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
									+ "and all_R.Req_Type='"+reqType+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub order by Req_Id desc";

						}
						if (type.equalsIgnoreCase("Rejected")) {
							getITRecords = "Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
									+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, OVER_TIME_DETAILS as it where all_R.Last_Approver='"
									+ user.getEmployeeNo()
									+ "' and all_R.Req_Status='Rejected' and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
									+ "and all_R.Req_Type='"+reqType+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub  order by Req_Id desc";
						}

						if (type.equalsIgnoreCase("All")) {

							getITRecords = "Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
									+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, OVER_TIME_DETAILS as it where (all_R.Last_Approver='"
									+ user.getEmployeeNo()
									+ "' or all_R.Pending_Approver='"
									+ user.getEmployeeNo()
									+ "')  and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
									+ "and all_R.Req_Type='"+reqType+"' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub  order by Req_Id desc";

						}
						ResultSet rsit = ad.selectQuery(getITRecords);
						try {
							while (rsit.next()) {
								LeaveForm leave = new LeaveForm();
								leave.setRequestNumber(rsit.getInt("Req_Id"));
								leave.setEmployeeName(rsit.getString("EMP_FULLNAME"));
								leave.setSubmitDate(EMicroUtils.display(rsit
										.getDate("Req_Date")));
								leave.setStatus(rsit.getString("Req_Status"));
								leave.setStartDate(EMicroUtils.display(rsit
										.getDate("FromDate")));
								leave.setEndDate(EMicroUtils.display(rsit
										.getDate("ToDate")));
		                        leave.setPapprover(rsit.getString("Pending_approver"));
								
								leave.setLapprover(rsit.getString("Last_approver"));

								OT.add(leave);

							}
							if (OT.size() > 0) {
								if (type.equalsIgnoreCase("Pending")) {
									// request.setAttribute("displayButton",
									// "displayButton");
								}
							}
							request.setAttribute("OT", OT);
							if (OT.size() == 0) {
								request.setAttribute("no OT records",
										"no OT records");
								approvalsForm.setMessage3("No Records Found..");
							}
						} catch (SQLException e) {

							e.printStackTrace();
						}

					}
				 
				 
				 
				 if (reqType.equalsIgnoreCase("Comp-Off/OT")) {
						LinkedList comp = new LinkedList();
						String getITRecords = "";

						if (type.equalsIgnoreCase("Pending")) {
							getITRecords = "Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
									+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, COMP_OT as it where all_R.Pending_Approver='"
									+ user.getEmployeeNo()
									+ "' and all_R.Req_Status='Pending' and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
									+ "and all_R.Req_Type='Comp-Off/OT' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub  order by Req_Id desc";

						}

						if (type.equalsIgnoreCase("Approved")) {
							getITRecords = "Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
									+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, COMP_OT as it where all_R.Last_Approver='"
									+ user.getEmployeeNo()
									+ "' and all_R.Req_Status='Approved' and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
									+ "and all_R.Req_Type='Comp-Off/OT' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub  order by Req_Id desc";

						}
						if (type.equalsIgnoreCase("Rejected")) {
							getITRecords = "Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
									+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, COMP_OT as it where all_R.Last_Approver='"
									+ user.getEmployeeNo()
									+ "' and all_R.Req_Status='Rejected' and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
									+ "and all_R.Req_Type='Comp-Off/OT' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub  order by Req_Id desc";
						}

						if (type.equalsIgnoreCase("All")) {

							getITRecords = "Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,it.Last_approver,it.Pending_approver,all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,"
									+ "it.FromDate,it.ToDate from  All_Request as all_R,emp_official_info as  emp, COMP_OT as it where (all_R.Last_Approver='"
									+ user.getEmployeeNo()
									+ "' or all_R.Pending_Approver='"
									+ user.getEmployeeNo()
									+ "')  and all_R.Req_Id=it.Req_no and  all_R.Requester_Name=emp.PERNR "
									+ "and all_R.Req_Type='Comp-Off/OT' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,all_R.type,it.FromDate,it.ToDate,it.Last_approver,it.Pending_approver) as  sub  order by Req_Id desc";

						}

						ResultSet rsit = ad.selectQuery(getITRecords);
						try {
							while (rsit.next()) {
								LeaveForm leave = new LeaveForm();
								leave.setRequestNumber(rsit.getInt("Req_Id"));
								leave.setEmployeeName(rsit.getString("EMP_FULLNAME"));
								leave.setSubmitDate(EMicroUtils.display(rsit
										.getDate("Req_Date")));
								leave.setStatus(rsit.getString("Req_Status"));
								leave.setStartDate(EMicroUtils.display(rsit
										.getDate("FromDate")));
								leave.setEndDate(EMicroUtils.display(rsit
										.getDate("ToDate")));
								
								leave.setPapprover(rsit.getString("Pending_approver"));
								
								leave.setLapprover(rsit.getString("Last_approver"));
								comp.add(leave);

							}
							if (comp.size() > 0) {
								if (type.equalsIgnoreCase("Pending")) {
									// request.setAttribute("displayButton",
									// "displayButton");
								}
							}
							request.setAttribute("comp", comp);
							if (comp.size() == 0) {
								request.setAttribute("no comp records",
										"no comp records");
								approvalsForm.setMessage3("No Records Found..");
							}
						} catch (SQLException e) {

							e.printStackTrace();
						}

					}
				 
				 
				 if(reqType.equalsIgnoreCase("VC Booking"))
				 {
					 ApprovalsList apprList=new ApprovalsList();
					 
					 LinkedList confList=apprList.getApprovalsList(reqType,type,request,form);
				 
				 try{
				 if(confList.size()>0){
						if(type.equalsIgnoreCase("Pending")){
							}
						}
						request.setAttribute("vcList", confList);
						if(confList.size()==0){
							request.setAttribute("no VC records", "no VC records");
							approvalsForm.setMessage3("No Records Found..");
						}
				 }catch(Exception  e){
					 e.printStackTrace();
				 }
				 }
				 if(reqType.equalsIgnoreCase("Conference"))
				 {
					 ApprovalsList apprList=new ApprovalsList();
					 LinkedList confList=apprList.getApprovalsList(reqType,type,request,form);
					 
					 try{
					 if(confList.size()>0){
							if(type.equalsIgnoreCase("Pending")){
								}
							}
							request.setAttribute("confList", confList);
							if(confList.size()==0){
								request.setAttribute("no confList records", "no confList records");
								approvalsForm.setMessage3("No Records Found..");
							}
					 }catch(Exception  e){
						 e.printStackTrace();
					 }
				 }
				 
				 if(reqType.equalsIgnoreCase("IT Request"))
				 {
					 LinkedList it=new LinkedList();
						String getITRecords="";
						
						if(type.equalsIgnoreCase("Pending")){
							getITRecords="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
							"emp.EMP_FULLNAME,all_R.Req_Status,CONVERT(varchar(10),it.Req_date,103)+' '+ CONVERT(varchar(5),it.Req_date,108) as Req_date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_HELPDESK as it " +
							"where all_R.Pending_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Pending' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
							"all_R.Req_Type='IT Request') as  sub  order by Req_Id desc";			
							
						}
						
						if(type.equalsIgnoreCase("Approved")){
							getITRecords="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
							"emp.EMP_FULLNAME,all_R.Req_Status,CONVERT(varchar(10),it.Req_date,103)+' '+ CONVERT(varchar(5),it.Req_date,108) as Req_date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_HELPDESK as it " +
							"where all_R.Last_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Approved' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
							"all_R.Req_Type='IT Request') as  sub  order by Req_Id desc";
							
						}
						if(type.equalsIgnoreCase("Rejected")){
							
							getITRecords="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
							"emp.EMP_FULLNAME,all_R.Req_Status,CONVERT(varchar(10),it.Req_date,103)+' '+ CONVERT(varchar(5),it.Req_date,108) as Req_date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_HELPDESK as it " +
							"where all_R.Last_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Rejected' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
							"all_R.Req_Type='IT Request') as  sub  order by Req_Id desc";
						}
						
                     	if(type.equalsIgnoreCase("Completed")){
							
							getITRecords="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
							"emp.EMP_FULLNAME,all_R.Req_Status,CONVERT(varchar(10),it.Req_date,103)+' '+ CONVERT(varchar(5),it.Req_date,108) as Req_date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_HELPDESK as it " +
							"where all_R.Last_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Completed' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
							"all_R.Req_Type='IT Request') as  sub  order by Req_Id desc";
						}
						
						if(type.equalsIgnoreCase("All")){
							
							getITRecords="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
							"emp.EMP_FULLNAME,all_R.Req_Status,CONVERT(varchar(10),it.Req_date,103)+' '+ CONVERT(varchar(5),it.Req_date,108) as Req_date,it.Last_Approver,it.Pending_Approver,all_R.type from  All_Request as all_R,emp_official_info as  emp, IT_HELPDESK as it " +
							"where (all_R.Last_Approver='"+user.getEmployeeNo()+"' or all_R.Pending_Approver='"+user.getEmployeeNo()+"')  and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
							"all_R.Req_Type='IT Request') as  sub order by Req_Id desc";
							
						}	
						
						ResultSet rsit=ad.selectQuery(getITRecords);
						try {
							while(rsit.next())
							{
								HelpDeskForm help=new HelpDeskForm();
								help.setRequestNumber(rsit.getString("Req_Id"));
								help.setRequestType(rsit.getString("type"));
								approvalsForm.setItType(rsit.getString("type"));
								help.setRequestername(rsit.getString("EMP_FULLNAME"));
								help.setRequestDate(rsit.getString("Req_Date"));
								help.setRequestStatus(rsit.getString("Req_Status"));
								help.setLastApprover(rsit.getString("Last_Approver"));
								help.setPendingApprover(rsit.getString("Pending_Approver"));
								help.setReqPriority(rsit.getString("Req_Priority"));
								help.setItEngStatus(rsit.getString("ITEng_Status"));
								it.add(help);
								
								
							}
							if(it.size()>0){
								if(type.equalsIgnoreCase("Pending")){
									//request.setAttribute("displayButton", "displayButton");
									}
								}
								request.setAttribute("it", it);
								if(it.size()==0){
									request.setAttribute("no it records", "no it records");
									approvalsForm.setMessage3("No Records Found..");
								}
						} catch (SQLException e) {
						
							e.printStackTrace();
						}
						
						
				 }
				 
				 
				 
				 if(reqType.equalsIgnoreCase("IT Sap Request"))
				 {
					 LinkedList it=new LinkedList();
						String getITRecords="";
						
						if(type.equalsIgnoreCase("Pending")){
							getITRecords="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
							"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,it.Last_Approver,it.Pending_Approver,all_R.type,it.sap_request_type from  All_Request as all_R,emp_official_info as  emp, IT_SAP_ISSUES as it " +
							"where all_R.Pending_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Pending' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
							"all_R.Req_Type='IT Sap Request') as  sub order by Req_Id desc";			
							
						}
						
						if(type.equalsIgnoreCase("Approved")){
							getITRecords="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
							"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,it.Last_Approver,it.Pending_Approver,all_R.type,it.sap_request_type from  All_Request as all_R,emp_official_info as  emp, IT_SAP_ISSUES as it " +
							"where all_R.Last_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Approved' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
							"all_R.Req_Type='IT Sap Request') as  sub  order by Req_Id desc";
							
						}
						if(type.equalsIgnoreCase("Rejected")){
							
							getITRecords="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
							"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,it.Last_Approver,it.Pending_Approver,all_R.type,it.sap_request_type from  All_Request as all_R,emp_official_info as  emp, IT_SAP_ISSUES as it " +
							"where all_R.Last_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Rejected' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
							"all_R.Req_Type='IT Sap Request') as  sub  order by Req_Id desc";
						}
						
	                	if(type.equalsIgnoreCase("Closed")){
							
							getITRecords="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
							"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,it.Last_Approver,it.Pending_Approver,all_R.type,it.sap_request_type from  All_Request as all_R,emp_official_info as  emp, IT_SAP_ISSUES as it " +
							"where all_R.Last_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Closed' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
							"all_R.Req_Type='IT Sap Request') as  sub order by Req_Id desc";
						}
						
	                	if(type.equalsIgnoreCase("Completed")){
							
							getITRecords="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
							"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,it.Last_Approver,it.Pending_Approver,all_R.type,it.sap_request_type from  All_Request as all_R,emp_official_info as  emp, IT_SAP_ISSUES as it " +
							"where all_R.Last_Approver='"+user.getEmployeeNo()+"' and all_R.Req_Status='Completed' and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
							"all_R.Req_Type='IT Sap Request') as  sub  order by Req_Id desc";
						}
						
						if(type.equalsIgnoreCase("All")){
							
							getITRecords="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,Req_Priority,ITEng_Status," +
							"emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date,it.Last_Approver,it.Pending_Approver,all_R.type,it.sap_request_type from  All_Request as all_R,emp_official_info as  emp, IT_SAP_ISSUES as it " +
							"where (all_R.Last_Approver='"+user.getEmployeeNo()+"' or all_R.Pending_Approver='"+user.getEmployeeNo()+"')  and all_R.Req_Id=it.Req_No and  all_R.Requester_Name=emp.PERNR and " +
							"all_R.Req_Type='IT Sap Request') as  sub  order by Req_Id desc";
							
						}	
						
						ResultSet rsapit=ad.selectQuery(getITRecords);
						try {
							while(rsapit.next())
							{
								HelpDeskForm help=new HelpDeskForm();
								help.setRequestNumber(rsapit.getString("Req_Id"));
								help.setRequestType(rsapit.getString("type"));
								approvalsForm.setItType(rsapit.getString("type"));
								help.setRequestername(rsapit.getString("EMP_FULLNAME"));
								help.setRequestDate(rsapit.getString("Req_Date"));
								help.setRequestStatus(rsapit.getString("Req_Status"));
								help.setLastApprover(rsapit.getString("Last_Approver"));
								help.setPendingApprover(rsapit.getString("Pending_Approver"));
								help.setReqPriority(rsapit.getString("Req_Priority"));
								help.setItEngStatus(rsapit.getString("ITEng_Status"));
								help.setRequestName(rsapit.getString("sap_request_type"));
								it.add(help);
								
								
							}
							if(it.size()>0){
								if(type.equalsIgnoreCase("Pending")){
									//request.setAttribute("displayButton", "displayButton");
									}
								}
								request.setAttribute("sapit", it);
								if(it.size()==0){
									request.setAttribute("no it records", "no it records");
									approvalsForm.setMessage3("No Records Found..");
								}
						} catch (SQLException e) {
						
							e.printStackTrace();
						}
						
						
				 }
				
				 
				 
				 
				 if(reqType.equalsIgnoreCase("Personal Information"))
				 {
					 LinkedList perinfoList=new LinkedList();
					String getPermissionRecords="";
					
					
					
					if(type.equalsIgnoreCase("Pending")){
						getPermissionRecords="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS RowNum," +
					"all_R.Req_Id,dep.DPTSTXT,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date from " +
					" All_Request as all_R,emp_official_info as emp,DEPARTMENT as dep where all_R.Requester_Name=emp.PERNR " +
					"and all_R.Req_Type='Personal Information' and dep.DPTID=emp.DPTID and all_R.Pending_Approver='"+user.getEmployeeNo()+"')as " +
						" sub  " +
					"order by RowNum desc";				
						
					}
					
					if(type.equalsIgnoreCase("Approved")){}
					if(type.equalsIgnoreCase("Rejected")){}
					if(type.equalsIgnoreCase("Cancelled")){}
					if(type.equalsIgnoreCase("All")){}	
					
					
					ResultSet rsPermission=ad.selectQuery(getPermissionRecords);
					try{
					while(rsPermission.next())
					{
						JoiningFormalityForm join=new JoiningFormalityForm();
                        join.setReqNo(rsPermission.getString("Req_Id"));
                        join.setDept(rsPermission.getString("DPTSTXT"));
                        join.setEmpname(rsPermission.getString("EMP_FULLNAME"));
                        join.setReqdate(rsPermission.getString("Req_Date"));
                        join.setReqStatus(rsPermission.getString("Req_Status"));
                        join.setEmpId(rsPermission.getString("Requester_Name"));
						perinfoList.add(join);
							
					}
					
					if(perinfoList.size()>0){
						if(type.equalsIgnoreCase("Pending")){
						
							}
						}
						request.setAttribute("perinfoList", perinfoList);
						if(perinfoList.size()==0){
							request.setAttribute("no records", "no  records");
							approvalsForm.setMessage3("No Records Found..");
						}
						}catch (Exception e) {
							e.printStackTrace();
						}
				 
			 
					 
				 }
			 if(reqType.equalsIgnoreCase("Permission"))
			 {
				 LinkedList permList=new LinkedList();
					String getPermissionRecords="";
					String getPermissionDetails="select * from Permission_details where user_id='"+user.getEmployeeNo()+"' ";
					
					
					if(type.equalsIgnoreCase("Pending")){
						getPermissionRecords="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS RowNum,all_R.Req_Id," +
					"all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type from  All_Request as all_R," +
				"emp_official_info as emp, Permission_details as perm where all_R.Pending_Approver='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' " +
				"and all_R.Req_Id=perm.request_no and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Permission' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type ) as  sub  " +
				" order by Req_Id desc";					
						
					}
					
					if(type.equalsIgnoreCase("Approved")){
						
						getPermissionRecords="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS RowNum,all_R.Req_Id," +
					"all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type from  All_Request as all_R," +
				"emp_official_info as emp, Permission_details as perm where  all_R.Last_Approver='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' " +
				"and all_R.Req_Id=perm.request_no and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Permission' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type ) as  sub  " +
				" order by Req_Id desc";
					}
					if(type.equalsIgnoreCase("Rejected")){
						
						getPermissionRecords="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS RowNum,all_R.Req_Id," +
					"all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type from  All_Request as all_R," +
				"emp_official_info as emp, Permission_details as perm where  all_R.Approved_Persons='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' " +
				"and all_R.Req_Id=perm.request_no and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Permission' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type ) as  sub   " +
				" order by Req_Id desc";
					}
					if(type.equalsIgnoreCase("Cancelled")){
						
						getPermissionRecords="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS RowNum,all_R.Req_Id," +
					"all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type from  All_Request as all_R," +
				"emp_official_info as emp, Permission_details as perm where  all_R.Approved_Persons='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' " +
				"and all_R.Req_Id=perm.request_no and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Permission' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type ) as  sub  " +
				" order by Req_Id desc";
					}
					if(type.equalsIgnoreCase("All")){
						
						getPermissionRecords="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY  all_R.Req_Id desc) AS RowNum,all_R.Req_Id," +
					"all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type from  All_Request as all_R," +
				"emp_official_info as emp, Permission_details as perm where  (all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"') " +
				"and all_R.Req_Id=perm.request_no and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='Permission' group by all_R.Req_Id,all_R.Requester_Name,emp.EMP_FULLNAME,all_R.Req_Status,all_R.Req_Date, perm.startTime,perm.endTime,perm.type ) as  sub  " +
				" order by Req_Id desc";
					}		
					
					
					ResultSet rsPermission=ad.selectQuery(getPermissionRecords);
					try{
					while(rsPermission.next())
					{
						MyRequestForm permission=new MyRequestForm();
						permission.setRequestNumber(rsPermission.getString("Req_Id"));
			            permission.setStartTime(rsPermission.getString("startTime"));
				          permission.setEndTime(rsPermission.getString("endTime"));
				      	permission.setRequestType(rsPermission.getString("type"));
						String requestDate=rsPermission.getString("Req_Date");
						int isthere = (requestDate.indexOf("/"));
						if(isthere <= 0){
							String req[]=requestDate.split(" ");
							requestDate=req[0];
							String a[]=requestDate.split("-");
							requestDate=a[2]+"/"+a[1]+"/"+a[0];
						}
						permission.setCreateDate(requestDate);
						permission.setEmployeeName(rsPermission.getString("EMP_FULLNAME"));
						permission.setApprover(rsPermission.getString("Req_Status"));
						permission.setEmployeeNumber(rsPermission.getString("Requester_Name"));
						String url="";
						
						permission.setUrl(url);
						//leaveMaster.setLastApprover(rsLeaveDetails.getString("Last_approver"));
						//leaveMaster.setPendingApprover(rsLeaveDetails.getString("Pending_approver"));
						permList.add(permission);
							
					}
					
					if(permList.size()>0){
						if(type.equalsIgnoreCase("Pending")){
							request.setAttribute("displayButton", "displayButton");
							}
						}
						request.setAttribute("Permissionlist", permList);
						if(permList.size()==0){
							request.setAttribute("no Permission records", "no Permission records");
							approvalsForm.setMessage3("No Records Found..");
						}
						}catch (Exception e) {
							e.printStackTrace();
						}
				 
			 }
			 }
			 if(totalRecords>0)
			 {
			 if(reqType.equalsIgnoreCase("On Duty")){

					LinkedList ondutyList=new LinkedList();
					String getOndutyRecords="";
					if(type.equalsIgnoreCase("Pending")){
						getOndutyRecords="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime," +
						"emp.EMP_FULLNAME,all_R.Req_Status,onduty.submit_date as Req_Date,onduty.start_date,onduty.end_date " +
						"from  All_Request as all_R,emp_official_info as emp,OnDuty_details as onduty where all_R.Pending_Approver='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' and all_R.Req_Id=onduty.request_no " +
						"and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='On Duty') as  sub order by Req_Id desc";
					}
					if(type.equalsIgnoreCase("Approved")){
						
						getOndutyRecords="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime," +
						"emp.EMP_FULLNAME,all_R.Req_Status,onduty.submit_date as Req_Date,onduty.start_date,onduty.end_date " +
						"from  All_Request as all_R,emp_official_info as emp,OnDuty_details as onduty where all_R.Last_Approver='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' and all_R.Req_Id=onduty.request_no " +
						"and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='On Duty') as  sub  order by Req_Id desc";
					}
					if(type.equalsIgnoreCase("Rejected")){
						
						getOndutyRecords="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime," +
						"emp.EMP_FULLNAME,all_R.Req_Status,onduty.submit_date as Req_Date,onduty.start_date,onduty.end_date " +
					"from  All_Request as all_R,emp_official_info as emp,OnDuty_details as onduty where all_R.Approved_Persons='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' and all_R.Req_Id=onduty.request_no " +
						"and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='On Duty') as  sub order by Req_Id desc";
					}
					if(type.equalsIgnoreCase("Cancelled")){
						
						getOndutyRecords="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime," +
						"emp.EMP_FULLNAME,all_R.Req_Status,onduty.submit_date as Req_Date,onduty.start_date,onduty.end_date " +
						"from  All_Request as all_R,emp_official_info as emp,OnDuty_details as onduty where all_R.Approved_Persons='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' " +
						"  and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='On Duty' and all_R.Req_Id=onduty.request_no) as  sub  order by Req_Id desc";
					}
					if(type.equalsIgnoreCase("All")){
						
						getOndutyRecords="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,all_R.Requester_Name,onduty.onDuty_Type,onduty.location,onduty.startTime,onduty.endTime," +
						"emp.EMP_FULLNAME,all_R.Req_Status,onduty.submit_date as Req_Date,onduty.start_date,onduty.end_date " +
						"from  All_Request as all_R,emp_official_info as emp,OnDuty_details as onduty where (all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"')" +
						"  and all_R.Requester_Name=emp.PERNR and all_R.Req_Type='On Duty' and all_R.Req_Id=onduty.request_no) as  sub order by Req_Id desc";
					}
					ResultSet rsOnduty=ad.selectQuery(getOndutyRecords);
					try{
					while(rsOnduty.next()){
					OnDutyForm onduty=new OnDutyForm();
					onduty.setRequestNumber(rsOnduty.getInt("Req_Id"));
					onduty.setEmployeeNumber(rsOnduty.getString("Requester_Name"));
				
					onduty.setOnDutyType(rsOnduty.getString("onDuty_Type"));
					onduty.setLocationId(rsOnduty.getString("location"));
					onduty.setEmployeeName(rsOnduty.getString("EMP_FULLNAME"));
					onduty.setSubmitDate(rsOnduty.getString("Req_Date"));
					onduty.setStartDate(EMicroUtils.display(rsOnduty.getDate("start_date")));
					onduty.setLocationId(rsOnduty.getString("location"));
					onduty.setStartTime(rsOnduty.getString("startTime"));
					onduty.setEndDate(EMicroUtils.display(rsOnduty.getDate("end_date")));
					
					
					onduty.setEndTime(rsOnduty.getString("endTime"));
					onduty.setApprover(rsOnduty.getString("Req_Status"));
					ondutyList.add(onduty);
					}
					if(ondutyList.size()>0){
					if(type.equalsIgnoreCase("Pending")){
						request.setAttribute("displayButton", "displayButton");
						}
					}
					request.setAttribute("ondutyList", ondutyList);
					if(ondutyList.size()==0){
						request.setAttribute("no OnDuty records", "no OnDuty records");
						approvalsForm.setMessage3("No Records Found..");
					}
					}catch (Exception e) {
						e.printStackTrace();
					}
					
				
			 }
			 }
			 if(totalRecords>0)
			 {
			 if(reqType.equalsIgnoreCase("Customer Master"))
				{
				 

				 String getcustMasterList="";
				 ResultSet rsVendor;
				 ArrayList listOfcustList=new ArrayList();
				 try{
					 if(type.equalsIgnoreCase("Pending")){
						 
						 getcustMasterList=" Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id," +
			"all_r.Req_Date,all_r.type,s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status," +
			"acc.ACCOUNT_GROUP_NAME	from  All_Request as all_r,emp_official_info as emp,CUSTOMER_MASTER_M as s,ACCOUNT_GROUP_M as acc  " +
			"where all_r.Req_Type='Customer Master'  and all_r.Pending_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and  " +
			"s.REQUEST_NO=all_r.Req_Id  and all_r.Req_Status='Pending' and acc.MATERIAL_TYPE_ID=s.ACCOUNT_GROUP_ID )as   sub   " +
			"order by Req_Id desc";
				 }
					 if(type.equalsIgnoreCase("Approved")){
						 
						 getcustMasterList=" Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id," +
			"all_r.Req_Date,all_r.type,s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status," +
			"acc.ACCOUNT_GROUP_NAME	from  All_Request as all_r,emp_official_info as emp,CUSTOMER_MASTER_M as s,ACCOUNT_GROUP_M as acc  " +
			"where all_r.Req_Type='Customer Master'  and all_r.Last_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and  " +
			"s.REQUEST_NO=all_r.Req_Id  and all_r.Req_Status='Approved' and acc.MATERIAL_TYPE_ID=s.ACCOUNT_GROUP_ID )as   sub   " +
			" order by Req_Id desc";
				 }	
		 if(type.equalsIgnoreCase("Completed")){
						 
						 getcustMasterList=" Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id," +
			"all_r.Req_Date,all_r.type,s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status," +
			"acc.ACCOUNT_GROUP_NAME	from  All_Request as all_r,emp_official_info as emp,CUSTOMER_MASTER_M as s,ACCOUNT_GROUP_M as acc  " +
			"where all_r.Req_Type='Customer Master'  and all_r.Last_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and  " +
			"s.REQUEST_NO=all_r.Req_Id  and all_r.Req_Status='Completed' and acc.MATERIAL_TYPE_ID=s.ACCOUNT_GROUP_ID )as   sub   " +
			"order by Req_Id desc";
				 }
 if(type.equalsIgnoreCase("Rejected")){
						 
						 getcustMasterList=" Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id," +
			"all_r.Req_Date,all_r.type,s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status," +
			"acc.ACCOUNT_GROUP_NAME	from  All_Request as all_r,emp_official_info as emp,CUSTOMER_MASTER_M as s,ACCOUNT_GROUP_M as acc  " +
			"where all_r.Req_Type='Customer Master'  and all_r.Approved_Persons='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and  " +
			"s.REQUEST_NO=all_r.Req_Id  and all_r.Req_Status='Rejected' and acc.MATERIAL_TYPE_ID=s.ACCOUNT_GROUP_ID )as   sub   " +
			"order by Req_Id desc ";
				 }	
		 if(type.equalsIgnoreCase("All")){
			 
			 getcustMasterList=" Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id," +
		"all_r.Req_Date,all_r.type,s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status," +
		"acc.ACCOUNT_GROUP_NAME	from  All_Request as all_r,emp_official_info as emp,CUSTOMER_MASTER_M as s,ACCOUNT_GROUP_M as acc  " +
		"where all_r.Req_Type='Customer Master'  and (all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"') and emp.PERNR=all_r.Requester_Name and  " +
		"s.REQUEST_NO=all_r.Req_Id   and acc.MATERIAL_TYPE_ID=s.ACCOUNT_GROUP_ID )as   sub   " +
		" order by Req_Id desc ";
		}
				
					 
					 rsVendor=ad.selectQuery(getcustMasterList);
						while(rsVendor.next()){
						MyRequestForm customer=new MyRequestForm();
						customer.setRequestNumber(rsVendor.getString("Req_Id"));
						
						customer.setRequestType(rsVendor.getString("EMP_FULLNAME"));
						customer.setName(rsVendor.getString("name"));
						customer.setLocationName(rsVendor.getString("CITY"));
						customer.setVendorType(rsVendor.getString("ACCOUNT_GROUP_NAME"));
						String requestDate=rsVendor.getString("Req_Date");
						
					
						customer.setCreateDate(requestDate);
						customer.setApprovalStatus(rsVendor.getString("Req_Status"));
						
						customer.setLastApprover(rsVendor.getString("last_approver"));
						customer.setPendingApprover(rsVendor.getString("pending_approver"));

						listOfcustList.add(customer);
							
						}	 
						request.setAttribute("myRequest", listOfcustList);	
						request.setAttribute("customer  list", "customer  list");	
						if(listOfcustList.size()>0){
							if(type.equalsIgnoreCase("Pending")){
								request.setAttribute("displayButton", "displayButton");
								}
							}
				 }
				 catch (Exception e) {
					e.printStackTrace();
				}
				
				 
				 
				 
				 
				}
			 }
			 if(totalRecords>0)
			 {
				 
			 
			 if(reqType.equalsIgnoreCase("Vendor Master"))
				{
				 String getVendorMasterList="";
				 ResultSet rsVendor;
				 ArrayList listOfVedorList=new ArrayList();
				 try{
					 if(type.equalsIgnoreCase("Pending")){
				getVendorMasterList=" Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,all_r.type," +
						"s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,acc.ACCOUNT_GROUP_NAME	" +
						"from  All_Request as all_r,emp_official_info as emp,vendor_master_m as s,ACCOUNT_GROUP_M as acc  where all_r.Req_Type='Vendor Master'  " +
						"and all_r.Pending_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id  " +
						"and all_r.Req_Status='Pending' and acc.ACCOUNT_GROUP_ID=s.ACCOUNT_GROUP_ID)as  sub  order by Req_Id desc";
				 }
					 if(type.equalsIgnoreCase("Approved")){
							getVendorMasterList=" Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,all_r.type," +
									"s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,acc.ACCOUNT_GROUP_NAME	" +
									"from  All_Request as all_r,emp_official_info as emp,vendor_master_m as s,ACCOUNT_GROUP_M as acc  where all_r.Req_Type='Vendor Master'  " +
									"and  all_r.Last_Approver='"+user.getEmployeeNo()+"' and  all_r.Req_Status='Approved' and emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id  " +
									" and acc.ACCOUNT_GROUP_ID=s.ACCOUNT_GROUP_ID)as  sub  order by Req_Id desc";
							 }
					 
					 if(type.equalsIgnoreCase("Completed")){
							getVendorMasterList=" Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,all_r.type," +
									"s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,acc.ACCOUNT_GROUP_NAME	" +
									"from  All_Request as all_r,emp_official_info as emp,vendor_master_m as s,ACCOUNT_GROUP_M as acc  where all_r.Req_Type='Vendor Master'  " +
									"and  all_r.Last_Approver='"+user.getEmployeeNo()+"' and  all_r.Req_Status='Completed' and emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id  " +
									" and acc.ACCOUNT_GROUP_ID=s.ACCOUNT_GROUP_ID)as  sub order by Req_Id desc";
							 }
					 if(type.equalsIgnoreCase("Rejected")){
							getVendorMasterList=" Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,all_r.type," +
									"s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,acc.ACCOUNT_GROUP_NAME	" +
									"from  All_Request as all_r,emp_official_info as emp,vendor_master_m as s,ACCOUNT_GROUP_M as acc  where all_r.Req_Type='Vendor Master'  " +
									"and all_r.Approved_Persons='"+user.getEmployeeNo()+"' and  all_r.Req_Status='Rejected' and emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id  " +
									" and acc.ACCOUNT_GROUP_ID=s.ACCOUNT_GROUP_ID)as  sub  order by Req_Id desc";
							 }
					 if(type.equalsIgnoreCase("All")){
							getVendorMasterList=" Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,all_r.type," +
									"s.NAME,s.CITY,s.ACCOUNT_GROUP_ID,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,acc.ACCOUNT_GROUP_NAME	" +
									"from  All_Request as all_r,emp_official_info as emp,vendor_master_m as s,ACCOUNT_GROUP_M as acc  where all_r.Req_Type='Vendor Master'  " +
									"and (all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"') and emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id  " +
									" and acc.ACCOUNT_GROUP_ID=s.ACCOUNT_GROUP_ID)as  sub  order by Req_Id desc";
							 }
				
					 
					 rsVendor=ad.selectQuery(getVendorMasterList);
						while(rsVendor.next()){
						MyRequestForm vendor=new MyRequestForm();
						vendor.setRequestNumber(rsVendor.getString("Req_Id"));
						
						vendor.setRequestType(rsVendor.getString("EMP_FULLNAME"));
						vendor.setName(rsVendor.getString("name"));
						vendor.setLocationName(rsVendor.getString("CITY"));
						vendor.setVendorType(rsVendor.getString("ACCOUNT_GROUP_NAME"));
						String requestDate=rsVendor.getString("Req_Date");
						
					
						vendor.setCreateDate(requestDate);
						vendor.setApprovalStatus(rsVendor.getString("Req_Status"));
						
						vendor.setLastApprover(rsVendor.getString("last_approver"));
						vendor.setPendingApprover(rsVendor.getString("pending_approver"));

						listOfVedorList.add(vendor);
							
						}	 
						request.setAttribute("myRequestList", listOfVedorList);	
						System.out.println(listOfVedorList.size());
						if(listOfVedorList.size()>0){
						if(type.equalsIgnoreCase("Pending")){
							request.setAttribute("displayButton", "displayButton");
							}
						}
						
						if(listOfVedorList.size()==0){
						
							approvalsForm.setMessage3("No Records Found..");
							request.setAttribute("no Service Master records", "no Service Master records");
						}
						request.setAttribute("vendor  list", "vendor  list");	
				 }catch (Exception e) {
					e.printStackTrace();
				}
				}
			 }
			 if(totalRecords>0)
			 {
			 if(reqType.equalsIgnoreCase("Code Extention"))
				{
				 String getCodeExtention="";
				 ResultSet rsCodeExtention;
				 ArrayList listOfMyRequest=new ArrayList();
				
				try{
				
				if(type.equalsIgnoreCase("Pending")){
					
					getCodeExtention="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE," +
					"all_r.type,s.TYPE as matType,s.REQUEST_NO,s.CREATED_DATE,s.APPROVE_TYPE,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,s.MATERIAL_SHORT_NAME,MATERIAL_CODE_1,MATERIAL_CODE_2 from Location as loc,All_Request as all_r," +
					"emp_official_info as emp,code_extenstion_request as s where all_r.Req_Type='Code Extention' and all_r.Pending_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name " +
					"and s.REQUEST_NO=all_r.Req_Id and (s.PLANT_1=loc.LOCATION_CODE or s.PLANT_2=loc.LOCATION_CODE)  and all_r.Req_Status='"+type+"')as  sub  order by Req_Id desc";
						}
						if(type.equalsIgnoreCase("Approved")||type.equalsIgnoreCase("Completed")){
							getCodeExtention="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE," +
							"all_r.type,s.TYPE as matType,s.REQUEST_NO,s.CREATED_DATE,s.APPROVE_TYPE,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,s.MATERIAL_SHORT_NAME,MATERIAL_CODE_1,MATERIAL_CODE_2 from Location as loc,All_Request as all_r," +
							"emp_official_info as emp,code_extenstion_request as s where all_r.Req_Type='Code Extention' and all_r.Last_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name " +
							"and s.REQUEST_NO=all_r.Req_Id and (s.PLANT_1=loc.LOCATION_CODE or s.PLANT_2=loc.LOCATION_CODE)  and all_r.Req_Status='"+type+"')as  sub  order by Req_Id desc";
								}
						if(type.equalsIgnoreCase("Rejected")){
							getCodeExtention="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE," +
							"all_r.type,s.TYPE as matType,s.REQUEST_NO,s.CREATED_DATE,s.APPROVE_TYPE,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,s.MATERIAL_SHORT_NAME,MATERIAL_CODE_1,MATERIAL_CODE_2 from Location as loc,All_Request as all_r," +
							"emp_official_info as emp,code_extenstion_request as s where all_r.Req_Type='Code Extention' and all_r.Approved_Persons='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name " +
							"and s.REQUEST_NO=all_r.Req_Id and (s.PLANT_1=loc.LOCATION_CODE or s.PLANT_2=loc.LOCATION_CODE)  and all_r.Req_Status='"+type+"')as  sub  order by Req_Id desc";
								}
						if(type.equalsIgnoreCase("All")){
							getCodeExtention="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE," +
							"all_r.type,s.TYPE as matType,s.REQUEST_NO,s.CREATED_DATE,s.APPROVE_TYPE,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status,s.MATERIAL_SHORT_NAME,MATERIAL_CODE_1,MATERIAL_CODE_2 from Location as loc,All_Request as all_r," +
							"emp_official_info as emp,code_extenstion_request as s where all_r.Req_Type='Code Extention' and (all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"') and emp.PERNR=all_r.Requester_Name " +
							"and s.REQUEST_NO=all_r.Req_Id and (s.PLANT_1=loc.LOCATION_CODE or s.PLANT_2=loc.LOCATION_CODE)  )as  sub  order by Req_Id desc";
								}
				
				 rsCodeExtention=ad.selectQuery(getCodeExtention);
				while(rsCodeExtention.next()){
				MyRequestForm codeExtentionRec=new MyRequestForm();
				codeExtentionRec.setRequestNumber(rsCodeExtention.getString("REQUEST_NO"));
				codeExtentionRec.setLocationName(rsCodeExtention.getString("location_code"));
				codeExtentionRec.setRequestType("Code Extention");
				codeExtentionRec.setPlantType(rsCodeExtention.getString("matType"));
				String sapNo="";
				if(rsCodeExtention.getString("matType").equals("Plant"))
					sapNo=rsCodeExtention.getString("MATERIAL_CODE_1");
				else
					sapNo=rsCodeExtention.getString("MATERIAL_CODE_2");
				codeExtentionRec.setSapNo(sapNo);
				codeExtentionRec.setDescription(rsCodeExtention.getString("MATERIAL_SHORT_NAME"));
				String requestDate=rsCodeExtention.getString("CREATED_DATE");
				String req[]=requestDate.split(" ");
				requestDate=req[0];
				String a[]=requestDate.split("-");
				requestDate=a[2]+"/"+a[1]+"/"+a[0];
				codeExtentionRec.setCreateDate(requestDate);
				codeExtentionRec.setApprovalStatus(rsCodeExtention.getString("Req_Status"));
				String url="materialCodeExtenstion.do?method=editCodeExtension";
				codeExtentionRec.setUrl(url);
				codeExtentionRec.setLastApprover(rsCodeExtention.getString("last_approver"));
				codeExtentionRec.setPendingApprover(rsCodeExtention.getString("pending_approver"));

				listOfMyRequest.add(codeExtentionRec);
					
				}
				request.setAttribute("Code Extention list", listOfMyRequest);	
				if(listOfMyRequest.size()>0){
					if(type.equalsIgnoreCase("Pending")){
						request.setAttribute("displayButton", "displayButton");
						}
					}
				}catch (Exception e) {
					e.printStackTrace();
				}
				}
			 }
			 if(totalRecords>0)
			 {
			 if(reqType.equalsIgnoreCase("Service Master")){
				 String getMaterialRecords="";
					if(type.equalsIgnoreCase("Pending")){
				getMaterialRecords="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date," +
				"loc.LOCATION_CODE,all_r.type,s.service_description,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status	from Location as loc," +
				" All_Request as all_r,emp_official_info as emp,SERVICE_MASTER as s where all_r.Req_Type='Service Master' and all_r.Pending_Approver='"+user.getEmployeeNo()+"' and " +
				"emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id and s.plant_code=loc.LOCID and all_r.Req_Status='"+type+"')as  sub  order by Req_Id desc";
					}
					if(type.equalsIgnoreCase("Approved")){
						getMaterialRecords="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date," +
						"loc.LOCATION_CODE,all_r.type,s.service_description,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status	from Location as loc," +
						" All_Request as all_r,emp_official_info as emp,SERVICE_MASTER as s where all_r.Req_Type='Service Master' and all_r.Last_Approver='"+user.getEmployeeNo()+"' and " +
						"emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id and s.plant_code=loc.LOCID and all_r.Req_Status='"+type+"')as  sub  order by Req_Id desc";
					
					}
					
					if(type.equalsIgnoreCase("Completed")){
						getMaterialRecords="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date," +
						"loc.LOCATION_CODE,all_r.type,s.service_description,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status	from Location as loc," +
						" All_Request as all_r,emp_official_info as emp,SERVICE_MASTER as s where all_r.Req_Type='Service Master' and all_r.Approved_Persons='"+user.getEmployeeNo()+"' and " +
						"emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id and s.plant_code=loc.LOCID and all_r.Req_Status='"+type+"')as  sub  order by Req_Id desc";
					
					}
					if(type.equalsIgnoreCase("Rejected")){
						getMaterialRecords="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date," +
						"loc.LOCATION_CODE,all_r.type,s.service_description,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status	from Location as loc," +
						" All_Request as all_r,emp_official_info as emp,SERVICE_MASTER as s where all_r.Req_Type='Service Master' and all_r.Approved_Persons='"+user.getEmployeeNo()+"' and " +
						"emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id and s.plant_code=loc.LOCID and all_r.Req_Status='"+type+"')as  sub order by Req_Id desc";
					
					}
					if(type.equalsIgnoreCase("All")){
						getMaterialRecords="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS RowNum,all_r.Req_Id,all_r.Req_Date," +
								"loc.LOCATION_CODE,all_r.type,s.service_description,emp.EMP_FULLNAME,s.last_approver,s.pending_approver,all_r.Req_Status	" +
								"from Location as  loc, All_Request as all_r,emp_official_info as emp,SERVICE_MASTER as s where all_r.Req_Type='Service Master' " +
								"and (all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"') and emp.PERNR=all_r.Requester_Name and s.REQUEST_NO=all_r.Req_Id and  s.plant_code=loc.LOCID )as  sub  order by Req_Id desc";
					
					}
					
					ResultSet rsMat=ad.selectQuery(getMaterialRecords);	 
					try{
						LinkedList materialList=new LinkedList();
						while(rsMat.next()){
						MaterialCodeRequestForm masterForm=new MaterialCodeRequestForm();
						masterForm.setRequestNumber(rsMat.getString("Req_Id"));
						masterForm.setRequestDate(rsMat.getString("Req_Date"));
						masterForm.setLocationCode(rsMat.getString("LOCATION_CODE"));
						masterForm.setMaterailType(rsMat.getString("type"));
						masterForm.setEmployeeName(rsMat.getString("EMP_FULLNAME"));
						masterForm.setServiceDescription(rsMat.getString("service_description"));
						masterForm.setLastApprover(rsMat.getString("last_approver"));
						masterForm.setPendingApprover(rsMat.getString("pending_approver"));
						masterForm.setApproveStatus(rsMat.getString("Req_Status"));
						
						materialList.add(masterForm);
						
						}
						request.setAttribute("serviceMaster", materialList);
						request.setAttribute("Service Master List", "Service Master List");
						if(materialList.size()==0){
							request.setAttribute("no Service Master records", "no Service Master records");
							approvalsForm.setMessage3("No Records Found..");
						}
						if(materialList.size()>0){
							if(type.equalsIgnoreCase("Pending")){
								request.setAttribute("displayButton", "displayButton");
								}
							}
					}catch (Exception e) {
						e.printStackTrace();
					}
			 }
			 }
			 if(totalRecords>0)
			 {
			 if(reqType.equalsIgnoreCase("Material Master")){
					LinkedList leaveList=new LinkedList();
					String getMaterialRecords="";
					/*if(type.equalsIgnoreCase("Pending")){
						getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE,all_r.type,mat.MATERIAL_SHORT_NAME,emp.EMP_FULLNAME,mat.last_approver,mat.pending_approver," +
						"all_r.Req_Status,mat.MATERIAL_GROUP_ID from Location as loc, All_Request as all_r,emp_official_info as emp,material_code_request as mat " +
						"where all_r.Req_Type='Material Master' and all_r.Pending_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and mat.REQUEST_NO=all_r.Req_Id " +
						"and mat.LOCATION_ID=loc.LOCID and all_r.Req_Status='"+type+"' )as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";	
							}
						if(type.equalsIgnoreCase("Approved")){
							getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE,all_r.type,mat.MATERIAL_SHORT_NAME,emp.EMP_FULLNAME,mat.last_approver,mat.pending_approver," +
							"all_r.Req_Status,mat.MATERIAL_GROUP_ID from Location as loc, All_Request as all_r,emp_official_info as emp,material_code_request as mat  " +
							"where all_r.Req_Type='Material Master' and all_r.Last_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and mat.REQUEST_NO=all_r.Req_Id " +
							"and mat.LOCATION_ID=loc.LOCID and all_r.Req_Status='"+type+"' )as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";	
								}
						
						if(type.equalsIgnoreCase("Completed")){
							getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE,all_r.type,mat.MATERIAL_SHORT_NAME,emp.EMP_FULLNAME,mat.last_approver,mat.pending_approver," +
							"all_r.Req_Status,mat.MATERIAL_GROUP_ID from Location as loc, All_Request as all_r,emp_official_info as emp,material_code_request as mat " +
							"where all_r.Req_Type='Material Master' and all_r.Last_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and mat.REQUEST_NO=all_r.Req_Id " +
							"and mat.LOCATION_ID=loc.LOCID and all_r.Req_Status='"+type+"')as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";	
								}
						
						if(type.equalsIgnoreCase("Rejected")){
							getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE,all_r.type,mat.MATERIAL_SHORT_NAME,emp.EMP_FULLNAME,mat.last_approver,mat.pending_approver," +
							"all_r.Req_Status,mat.MATERIAL_GROUP_ID from Location as loc, All_Request as all_r,emp_official_info as emp,material_code_request as mat " +
							"where all_r.Req_Type='Material Master' and all_r.Approved_Persons='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and mat.REQUEST_NO=all_r.Req_Id " +
							"and mat.LOCATION_ID=loc.LOCID and all_r.Req_Status='"+type+"' )as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";	
							
									}
						if(type.equalsIgnoreCase("All")){
							getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE,all_r.type,mat.MATERIAL_SHORT_NAME,emp.EMP_FULLNAME,mat.last_approver,mat.pending_approver," +
							"all_r.Req_Status,mat.MATERIAL_GROUP_ID from Location as loc, All_Request as all_r,emp_official_info as emp,material_code_request as mat " +
							"where all_r.Req_Type='Material Master' and (all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"') and emp.PERNR=all_r.Requester_Name and mat.REQUEST_NO=all_r.Req_Id " +
							"and mat.LOCATION_ID=loc.LOCID  )as  sub Where  sub.RowNum between "+startRecord+" and "+endRecord+" order by Req_Id desc";	
							
								}*/
					if(type.equalsIgnoreCase("Pending")){
						getMaterialRecords="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE,all_r.type,mat.MATERIAL_SHORT_NAME,emp.EMP_FULLNAME,mat.last_approver,mat.pending_approver," +
						"all_r.Req_Status,mat.MATERIAL_GROUP_ID from Location as loc, All_Request as all_r,emp_official_info as emp,material_code_request as mat " +
						"where all_r.Req_Type='Material Master' and all_r.Pending_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and mat.REQUEST_NO=all_r.Req_Id " +
						"and mat.LOCATION_ID=loc.LOCID and all_r.Req_Status='"+type+"' )as  sub order by Req_Id desc";	
							}
						if(type.equalsIgnoreCase("Approved")){
							getMaterialRecords="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE,all_r.type,mat.MATERIAL_SHORT_NAME,emp.EMP_FULLNAME,mat.last_approver,mat.pending_approver," +
							"all_r.Req_Status,mat.MATERIAL_GROUP_ID from Location as loc, All_Request as all_r,emp_official_info as emp,material_code_request as mat  " +
							"where all_r.Req_Type='Material Master' and all_r.Last_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and mat.REQUEST_NO=all_r.Req_Id " +
							"and mat.LOCATION_ID=loc.LOCID and all_r.Req_Status='"+type+"' )as  sub  order by Req_Id desc";	
								}
						
						if(type.equalsIgnoreCase("Completed")){
							getMaterialRecords="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE,all_r.type,mat.MATERIAL_SHORT_NAME,emp.EMP_FULLNAME,mat.last_approver,mat.pending_approver," +
							"all_r.Req_Status,mat.MATERIAL_GROUP_ID from Location as loc, All_Request as all_r,emp_official_info as emp,material_code_request as mat " +
							"where all_r.Req_Type='Material Master' and all_r.Last_Approver='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and mat.REQUEST_NO=all_r.Req_Id " +
							"and mat.LOCATION_ID=loc.LOCID and all_r.Req_Status='"+type+"')as  sub  order by Req_Id desc";	
								}
						
						if(type.equalsIgnoreCase("Rejected")){
							getMaterialRecords="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE,all_r.type,mat.MATERIAL_SHORT_NAME,emp.EMP_FULLNAME,mat.last_approver,mat.pending_approver," +
							"all_r.Req_Status,mat.MATERIAL_GROUP_ID from Location as loc, All_Request as all_r,emp_official_info as emp,material_code_request as mat " +
							"where all_r.Req_Type='Material Master' and all_r.Approved_Persons='"+user.getEmployeeNo()+"' and emp.PERNR=all_r.Requester_Name and mat.REQUEST_NO=all_r.Req_Id " +
							"and mat.LOCATION_ID=loc.LOCID and all_r.Req_Status='"+type+"' )as  sub  order by Req_Id desc";	
							
									}
						if(type.equalsIgnoreCase("All")){
							getMaterialRecords="Select * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_r.Req_Id,all_r.Req_Date,loc.LOCATION_CODE,all_r.type,mat.MATERIAL_SHORT_NAME,emp.EMP_FULLNAME,mat.last_approver,mat.pending_approver," +
							"all_r.Req_Status,mat.MATERIAL_GROUP_ID from Location as loc, All_Request as all_r,emp_official_info as emp,material_code_request as mat " +
							"where all_r.Req_Type='Material Master' and (all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"') and emp.PERNR=all_r.Requester_Name and mat.REQUEST_NO=all_r.Req_Id " +
							"and mat.LOCATION_ID=loc.LOCID  )as  sub  order by Req_Id desc";	
							
								}
		ResultSet rsMat=ad.selectQuery(getMaterialRecords);	 
		try{
			LinkedList materialList=new LinkedList();
			while(rsMat.next()){
			MaterialCodeRequestForm masterForm=new MaterialCodeRequestForm();
			masterForm.setRequestNumber(rsMat.getString("Req_Id"));
			masterForm.setRequestDate(rsMat.getString("Req_Date"));
			masterForm.setLocationCode(rsMat.getString("LOCATION_CODE"));
			masterForm.setMaterialDesc(rsMat.getString("type"));
			masterForm.setMaterailType(rsMat.getString("type"));
			masterForm.setEmployeeName(rsMat.getString("EMP_FULLNAME"));
			masterForm.setMaterialName(rsMat.getString("MATERIAL_SHORT_NAME"));
			masterForm.setLastApprover(rsMat.getString("last_approver"));
			masterForm.setPendingApprover(rsMat.getString("pending_approver"));
			masterForm.setApproveStatus(rsMat.getString("Req_Status"));
			masterForm.setMaterialGroup(rsMat.getString("MATERIAL_GROUP_ID"));
			materialList.add(masterForm);
			
			}
			request.setAttribute("materialList", materialList);
			request.setAttribute("Material List", "Material List");
			if(materialList.size()==0){
				request.setAttribute("no Material Master records", "no Material Master records");
				approvalsForm.setMessage3("No Records Found..");
			}
			if(materialList.size()>0){
				if(type.equalsIgnoreCase("Pending")){
					request.setAttribute("displayButton", "displayButton");
					}
				}
		}catch (Exception e) {
			e.printStackTrace();
		}
					
			 }
			 
			 }
			 
		if(totalRecords==0 && (!reqType.equalsIgnoreCase("Leave")))
		{
			request.setAttribute("no Material Master records", "no Material Master records");
			approvalsForm.setMessage3("No Records Found..");
		}
		if(totalRecords==0 && (reqType.equalsIgnoreCase("Leave")))
		{
			request.setAttribute("no Leave records", "no Leave records");
			approvalsForm.setMessage3("No Records Found..");
		}
		if(totalRecords==0 && (reqType.equalsIgnoreCase("IT Request")))
		{
			request.setAttribute("no it records", "no it records");
			approvalsForm.setMessage3("No Records Found..");
		}
		if(totalRecords==0 && (reqType.equalsIgnoreCase("Conference")))
		{
			request.setAttribute("no Conference records", "no Conference records");
			approvalsForm.setMessage3("No Records Found..");
		}
		if(totalRecords==0 && (reqType.equalsIgnoreCase("Comp-Off/OT")))
		{
			request.setAttribute("no comp records", "no comp records");
			approvalsForm.setMessage3("No Records Found..");
		}
		if(totalRecords==0 && (reqType.equalsIgnoreCase("OverTime")))
		{
			request.setAttribute("no OT records", "no OT records");
			approvalsForm.setMessage3("No Records Found..");
		}
		
		if(totalRecords>0){			
		if(reqType.equalsIgnoreCase("Leave")){
			LinkedList leaveList=new LinkedList();
			String getLeaveRecords="";
			if(type.equalsIgnoreCase("Pending")){
		getLeaveRecords="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,leave.leave_type," +
			"emp.EMP_FULLNAME,all_R.Req_Status,leave.submit_date as Req_Date,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days from  All_Request as all_R," +
			"emp_official_info as emp,leave_details as leave where all_R.Pending_Approver='"+user.getEmployeeNo()+"' and Req_Status='"+type+"'  and all_R.Req_Type='Leave' and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id) " +
			"as  sub  order by Req_Id desc";
			}
			if(type.equalsIgnoreCase("Approved")){
				getLeaveRecords="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,leave.leave_type," +
				"emp.EMP_FULLNAME,leave.submit_date as Req_Date,all_R.Req_Status,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days from  All_Request as all_R," +
				"emp_official_info as emp,leave_details as leave where all_R.Last_Approver='"+user.getEmployeeNo()+"' and Req_Status='"+type+"'   and all_R.Req_Type='Leave' and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id) " +
				"as  sub  order by Req_Id desc";
			}
			if(type.equalsIgnoreCase("Rejected")){
				getLeaveRecords="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,leave.leave_type," +
				"emp.EMP_FULLNAME,leave.submit_date as Req_Date,all_R.Req_Status,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days from  All_Request as all_R," +
				"emp_official_info as emp,leave_details as leave where all_R.Approved_Persons='"+user.getEmployeeNo()+"' and Req_Status='"+type+"' and all_R.Req_Type='Leave' and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id) " +
				"as  sub  order by Req_Id desc";
			}
			if(type.equalsIgnoreCase("Cancelled")){
				getLeaveRecords="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,leave.leave_type," +
				"emp.EMP_FULLNAME,leave.submit_date as Req_Date,all_R.Req_Status,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days from  All_Request as all_R," +
				"emp_official_info as emp,leave_details as leave where all_R.Approved_Persons='"+user.getEmployeeNo()+"' and (Req_Status='"+type+"' OR Actual_Approver_status='"+type+"') and all_R.Req_Type='Leave' and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id) " +
				"as  sub order by Req_Id desc";
			}
			if(type.equalsIgnoreCase("All")){
				getLeaveRecords="Select top 1000 * From (SELECT ROW_NUMBER() OVER(ORDER BY all_R.Req_Id desc) AS  RowNum,all_R.Req_Id,leave.leave_type," +
				"emp.EMP_FULLNAME,leave.submit_date as Req_Date,all_R.Req_Status,leave.start_date,leave.start_duration,leave.end_date,leave.end_duration,leave.no_of_days from  All_Request as all_R," +
				"emp_official_info as emp,leave_details as leave where (all_R.Last_Approver ='"+user.getEmployeeNo()+"' or all_R.Pending_Approver = '"+user.getEmployeeNo()+"')  and all_R.Req_Type='Leave' and all_R.Requester_Name=emp.PERNR and leave.Req_Id=all_R.Req_Id) " +
				"as  sub  order by Req_Id desc";
			}
			ResultSet rsLeave=ad.selectQuery(getLeaveRecords);
			try{
			while(rsLeave.next()){
			LeaveForm leave=new LeaveForm();
			leave.setRequestNumber(rsLeave.getInt("Req_Id"));
			
		String	leaveType=rsLeave.getString("leave_type");
			if(leaveType.equalsIgnoreCase("1")){
				leaveType="Casual";
			}
			if(leaveType.equalsIgnoreCase("2")){
				leaveType="Sick";
			}
			if(leaveType.equalsIgnoreCase("3")){
				leaveType="privilege";
			}
			if(leaveType.equalsIgnoreCase("4")){
				leaveType="Loss Of Pay";
			}
			if(leaveType.equalsIgnoreCase("5")){
				leaveType="Maternity";
			}
			if(leaveType.equalsIgnoreCase("6")){
				leaveType="Comp-Off";
			}
			leave.setLeaveType(leaveType);
			leave.setEmployeeName(rsLeave.getString("EMP_FULLNAME"));
			leave.setSubmitDate(rsLeave.getString("Req_Date"));
			leave.setStartDate(EMicroUtils.display(rsLeave.getDate("start_date")));
			String stDur=rsLeave.getString("start_duration");
			
			if(stDur.equalsIgnoreCase("FD")){
				stDur="Full Day";
			}
			if(stDur.equalsIgnoreCase("FH")){
				stDur="First Half";
			}
			if(stDur.equalsIgnoreCase("SH")){
				stDur="Second Half";
			}
			leave.setStartDurationType(stDur);
			
			leave.setEndDate(EMicroUtils.display(rsLeave.getDate("end_date")));
			
			String endDur=rsLeave.getString("end_duration");
			
			if(endDur.equalsIgnoreCase("FD")){
				endDur="Full Day";
			}
			if(endDur.equalsIgnoreCase("FH")){
				endDur="First Half";
			}
			if(endDur.equalsIgnoreCase("SH")){
				endDur="Second Half";
			}
			leave.setEndDurationType(endDur);
			leave.setNoOfDays(rsLeave.getString("no_of_days"));
			if(type.equalsIgnoreCase("Cancelled"))
			leave.setApproveStatus("Cancelled");
			else
			leave.setApproveStatus(rsLeave.getString("Req_Status"));	
			
			//disable cancle button
			int year = Calendar.getInstance().get(Calendar.YEAR);
			int mon=Calendar.getInstance().get(Calendar.MONTH);
			int day=Calendar.getInstance().get(Calendar.DAY_OF_MONTH);
			mon=mon+1;
			String month="";
			if(mon<10)
			{
				month="0"+Integer.toString(mon);
			}
			else
			{
				month=Integer.toString(mon);
			}
	
			
	   		if(day>=21)
	   		{
	   			
	   			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	        	Date date1 = rsLeave.getDate("start_date");
	        	Date date2 = sdf.parse(""+year+"-"+month+"-21");
	 
	        	
	   	
	   			
			int value=date1.compareTo(date2);
			if(value<1)
			{
				leave.setApptype("DisableCancel");
			}
	   		}
			leaveList.add(leave);
			}
			if(leaveList.size()>0){
			if(type.equalsIgnoreCase("Pending")){
				request.setAttribute("displayButton", "displayButton");
				}
			}
			request.setAttribute("leaveList", leaveList);
			if(leaveList.size()==0){
				request.setAttribute("no Leave records", "no Leave records");
				approvalsForm.setMessage3("No Records Found..");
			}
			}catch (Exception e) {
				e.printStackTrace();
			}
			
		}
	}

	 	return mapping.findForward("approvePage");
	}
	
	
	
	public ActionForward display(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ApprovalsForm approvalsForm = (ApprovalsForm) form;
		
		
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		NewsandMediaDao ad=new NewsandMediaDao();
		
		
		try{
		  java.util.List set1 = new java.util.ArrayList();
		  
		  ResultSet rs3=ad.selectQuery("select * from display_columnheader where type='Vendor Master'");
		  
		  while(rs3.next()) {
			      java.util.Map email = new java.util.HashMap();
			      
				  email.put("property", rs3.getString("column_property"));
				  email.put("title",  rs3.getString("column_name"));
				  set1.add(email);
		}
		  
		  request.setAttribute("collist", set1);
		  request.setAttribute("collist1", set1);
		  
		String sql="select * from vendor_master_approval where approver1 like '%"+user.getId()+"%' or " +
				"approver2 like '%"+user.getId()+"%' or approver3 like '%"+user.getId()+"%' ";
		
		ResultSet rs=ad.selectQuery(sql);
		
		ArrayList a1=new ArrayList();
		
		
			ApprovalsForm approvalsForm1=null;
			while(rs.next()) {
				
				if(rs.getString("approver1").equalsIgnoreCase(String.valueOf(user.getId()))){
					
					System.out.println("getting APPROVER_STATUS1 is *********"+rs.getString("APPROVER_STATUS1"));
					if(rs.getString("APPROVER_STATUS1").equalsIgnoreCase("0")){
						
						String sql1="select * from vendor_master_m where REQUEST_NO='"+rs.getString("REQUEST_ID")+"'";
						ResultSet rs1=ad.selectQuery(sql1);
						
						while(rs1.next()) {
							
							VendorMaster vb=new VendorMaster(rs1.getString("REQUEST_NO"),EMicroUtils.display(rs1.getDate("REQUEST_DATE")),
									rs1.getString("CREATED_BY"),"Vendor Master Request");
							a1.add(vb);
						}
					}
				}
				
				
				if(rs.getString("approver2").equalsIgnoreCase(String.valueOf(user.getId()))){
					
					if(rs.getString("APPROVER_STATUS1").equalsIgnoreCase("1") && rs.getString("APPROVER_STATUS2").equalsIgnoreCase("0")){
						
						String sql1="select * from vendor_master_m where REQUEST_NO='"+rs.getString("REQUEST_ID")+"'";
						
						ResultSet rs1=ad.selectQuery(sql1);
						
						while(rs1.next()) {
							
							VendorMaster vb=new VendorMaster(rs1.getString("REQUEST_NO"),EMicroUtils.display(rs1.getDate("REQUEST_DATE")),
									rs1.getString("CREATED_BY"),"Vendor Master Request");
							a1.add(vb);
							
						}
						
						
					}
					
				}
				
			}
			
			
			request.setAttribute("requestDetails", a1);
			
			ad.closeResultset();
			ad.closeStatement();
		}catch(SQLException se){
			se.printStackTrace();
		}
		
		
		
		return mapping.findForward("mac");
	}
	
	public ActionForward test1(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ApprovalsForm approvalsForm = (ApprovalsForm) form;
	    
		HttpSession session=request.getSession();
		
		
		ArrayList a1=(ArrayList) session.getAttribute("Art");
		int noOfRecords=0;
		
		EssDao ad=new EssDao();
		
	 	String[] t= request.getParameterValues("email2");
	 	java.util.List set1 = new java.util.ArrayList();
	 	for(int i=0;i<t.length;i++){
	 		
	 		java.util.Map email = new java.util.HashMap();
	 		
	 		System.out.println("Getting a Property is *********"+t[i].split(",")[0]);
	 		System.out.println("Getting a Title is *********"+ t[i].split(",")[1]);

	 		email.put("property", t[i].split(",")[0]);
			email.put("title",  t[i].split(",")[1]);
			set1.add(email);
	 		
	 	}
		
		String dateValue=request.getParameter("date");
		String moneyValue=request.getParameter("money");
		
		
		try{
			ResultSet rs1=ad.selectQuery("select * from display_columnheader where type='Vendor Master'");
			  
			  
			ArrayList a2=new ArrayList();
			  while (rs1.next()) {
				  java.util.Map email = new java.util.HashMap();
				  
				  email.put("property", rs1.getString("column_property"));
				  email.put("title",  rs1.getString("column_name"));
				  a2.add(email);
			}
			  
			request.setAttribute("collist", a2);
			request.setAttribute("collist1", set1);
			
			ArrayList myList = new ArrayList();
			
			Iterator itr= a1.iterator();
			
			while(itr.hasNext()) {
				VendorMaster leav=(VendorMaster)itr.next();
				
				System.out.println("Getting a Leave is "+leav.getRequestDate());
				myList.add(leav);
			}
			
			System.out.println(myList);
			request.setAttribute("requestDetails", myList);
			
		}catch(Exception se){
			se.printStackTrace();
		}
		
		return mapping.findForward("display");
	}
	
	public ActionForward displayPending(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response){
		String requestStatus = "Pending";
		LinkedList list = new LinkedList();
		MailInboxAction mAction = new MailInboxAction();
		ApprovalsForm pendAppForm=(ApprovalsForm) form;
		HttpSession session=request.getSession();
		String requestName = pendAppForm.getReqRequstType();
		if(requestName == null){
			requestName="";
		}
		int  startCount=0;
		int  endCount=0;
		setFilterType(requestStatus, pendAppForm);
		UserInfo user=(UserInfo)session.getAttribute("user");
		String selectedFilter = pendAppForm.getSelectedFilter();
		if(selectedFilter != null && selectedFilter.equalsIgnoreCase("Delegate")){
			request.setAttribute("noRecords","noRecords");
			request.setAttribute("header", "Delegation By You");
			request.setAttribute("openRequest", "");
			request.setAttribute("listDetails", list);
			String result=(String)session.getAttribute("result");
			System.out.println("result="+result);
			if(result==null||result==" ")
			session.setAttribute("result"," ");
			
			
			if(request.getParameter("id")!=null){
			
			request.setAttribute("MenuIcon", request.getParameter("id"));
			}
			pendAppForm.setHeading("Delegation By You");
			pendAppForm.setAppMessage("No Records in Selected Filter/Request!");
			return mapping.findForward("displayRequest");
		}
		
		if(user == null)
		{
			pendAppForm.setAppMessage("Session Expried! Try to Login again!");
			request.setAttribute("noRecords","noRecords");
			request.setAttribute("header", "Pending Request");
			request.setAttribute("listDetails", list);
			return mapping.findForward("displayRequest");
		}
		int userId=user.getId();
		String fullName = user.getFullName();
		int totalCount = getCountForTable(requestStatus,fullName,requestName);
		String scount = request.getParameter("sCount");
		if(scount == null){
			request.setAttribute("noRecords","noRecords");
			pendAppForm.setAppMessage("Request Approved Successfully!");
		}
		if(scount != null){
			startCount=Integer.parseInt(scount);
			endCount=Integer.parseInt(request.getParameter("eCount"));
		}
		mAction.basicNavigation(request);
		LinkedList naviCount = getLimitAndNavigation(mapping,form,request,requestStatus,totalCount,startCount,endCount);
		startCount = Integer.parseInt(naviCount.get(0).toString());
		endCount = Integer.parseInt(naviCount.get(1).toString());
		list = getRequestList(mapping, form, request, requestStatus,startCount,endCount);
		request.setAttribute("header", "Pending Request");
		request.setAttribute("openRequest", "");
		request.setAttribute("listDetails", list);
		String result=(String)session.getAttribute("result");
		System.out.println("result="+result);
		if(result==null||result==" ")
		session.setAttribute("result"," ");
		
		
		if(request.getParameter("id")!=null){
		
		request.setAttribute("MenuIcon", request.getParameter("id"));
		}
		pendAppForm.setHeading(requestStatus);
		return mapping.findForward("displayRequest");
	}
	
	public ActionForward displayApproved(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response){
		String requestStatus = "Approved";
		LinkedList list = new LinkedList();
		ApprovalsForm approvedAppForm=(ApprovalsForm) form;
		MailInboxAction mAction = new MailInboxAction();
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		String requestName = approvedAppForm.getReqRequstType();
		int userId=user.getId();
		String fullName = user.getFullName();
		int  startCount=0;
		int  endCount=0;
		setFilterType(requestStatus, approvedAppForm);
		int totalCount = getCountForTable(requestStatus,fullName,requestName);
		String scount = request.getParameter("sCount");
		if(scount == null){
			approvedAppForm.setAppMessage("Request Approved Successfully!");
		}
		if(scount != null){
			startCount=Integer.parseInt(scount);
			endCount=Integer.parseInt(request.getParameter("eCount"));
		}
		mAction.basicNavigation(request);
		LinkedList naviCount = getLimitAndNavigation(mapping,form,request,requestStatus,totalCount,startCount,endCount);
		startCount = Integer.parseInt(naviCount.get(0).toString());
		endCount = Integer.parseInt(naviCount.get(1).toString());
		list = getRequestList(mapping, form, request, requestStatus,startCount,endCount);
		request.setAttribute("header", "Approved Request");
		request.setAttribute("openRequest", "");
		request.setAttribute("listDetails", list);
		String result=(String)session.getAttribute("result");
		System.out.println("result="+result);
		if(result==null||result==" ")
		session.setAttribute("result"," ");
		
		
		if(request.getParameter("id")!=null){
		
		request.setAttribute("MenuIcon", request.getParameter("id"));
		}
		approvedAppForm.setHeading(requestStatus);
		return mapping.findForward("displayRequest");
	}
	
	public ActionForward displayRejected(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response){
		String requestStatus = "Rejected";
		LinkedList list = new LinkedList();
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		int userId=user.getId();
		String fullName = user.getFullName();
		MailInboxAction mAction = new MailInboxAction();
		ApprovalsForm rejectedAppForm=(ApprovalsForm) form;
		int  startCount=0;
		int  endCount=0;
		setFilterType(requestStatus, rejectedAppForm);
		String requestName = rejectedAppForm.getReqRequstType();
		int totalCount = getCountForTable(requestStatus,fullName,requestName);
		String scount = request.getParameter("sCount");
		if(scount == null){
			rejectedAppForm.setAppMessage("Request Approved Successfully!");
		}
		if(scount != null){
			startCount=Integer.parseInt(scount);
			endCount=Integer.parseInt(request.getParameter("eCount"));
		}
		mAction.basicNavigation(request);
		LinkedList naviCount = getLimitAndNavigation(mapping,form,request,requestStatus,totalCount,startCount,endCount);
		startCount = Integer.parseInt(naviCount.get(0).toString());
		endCount = Integer.parseInt(naviCount.get(1).toString());
		list = getRequestList(mapping, form, request, requestStatus,startCount,endCount);
		request.setAttribute("header", "Rejected Request");
		request.setAttribute("openRequest", "");
		request.setAttribute("listDetails", list);
		String result=(String)session.getAttribute("result");
		System.out.println("result="+result);
		if(result==null||result==" ")
		session.setAttribute("result"," ");
		
		
		if(request.getParameter("id")!=null){
		
		request.setAttribute("MenuIcon", request.getParameter("id"));
		}
		rejectedAppForm.setHeading(requestStatus);
		return mapping.findForward("displayRequest");
	}
	
	public LinkedList getRequestList(ActionMapping mapping, ActionForm form, HttpServletRequest request, String reqType,int sCount, int eCount) {
		System.out.println("display ManPower");
		ApprovalsForm pendAppForm=(ApprovalsForm) form;
		HttpSession sesion=request.getSession();
		UserInfo user=(UserInfo)sesion.getAttribute("user");
		String module = request.getParameter("id");
		String uName = user.getUserName();
		String sTxt = pendAppForm.getSearchText();
		if(sTxt == null){
			sTxt="";
		}
		System.out.println(" module - "+module);
		LinkedList list = new LinkedList();
		try
		{
			LinkedList pendingList=new LinkedList();
			LinkedList locationName=new LinkedList();
			UserDao adMPM=new UserDao();
			String reqList = "";
			if(reqType.equalsIgnoreCase("Approved")){
				reqList="select * from All_Request where Approved_Persons like '%"+uName+"%'";
			}
			else if(reqType.equalsIgnoreCase("Rejected")){
				reqList="select * from All_Request where Req_Status='"+reqType+"'";
			}
			else{
				reqList="select * from All_Request where Pending_approver like '%"+uName+"%' and Req_Status='"+reqType+"'";
			}
			/*if(reqType.equalsIgnoreCase("Approved")){
				reqList="select * from Recruitment_Request where Approved_Persons like '%"+uName+"%'";
			}
			else if(reqType.equalsIgnoreCase("Rejected")){
				reqList="select * from Recruitment_Request where Approvel_Status='"+reqType+"'";
			}
			else{
				reqList="select * from Recruitment_Request where Pending_approver='"+uName+"' and Approvel_Status='"+reqType+"'";
			}*/
			ResultSet rsGetReq=adMPM.selectQuery(reqList);
			ApprovalsForm pendAppForm1=null;
			String request_Name="";
			int count = 0;
			while(rsGetReq.next()){
				int startRow = rsGetReq.getRow();
				if(startRow >= sCount)
				{
					pendAppForm1 = new ApprovalsForm();
					pendAppForm1.setRequestNo(rsGetReq.getString("Req_Id"));
					pendAppForm1.setRequestedBy(rsGetReq.getString("Requester_name"));
					request_Name = rsGetReq.getString("Req_Type");
					pendAppForm1.setRequestType(request_Name);
					pendAppForm1.setRequestDate(rsGetReq.getString("Req_Date"));
					pendAppForm.setRequestType(request_Name);
					pendAppForm1.setUrl("approvals.do?method=getSelectedRequestToApprove&reqId="+rsGetReq.getString("Req_Id")+"&reqType="+request_Name+"&sCount="+sCount+"&eCount="+eCount+"&searchTxt="+sTxt);
					pendAppForm.setSelectedFilter(reqType);
					list.add(pendAppForm1);
					/*if(request_Name.equalsIgnoreCase("Material Code Request")){
						EMailer email = new EMailer();
						String tName = email.getTableNameForRequest(request_Name);
						String urlSelect = "select URL from "+tName+" where REQUEST_NO='"+rsGetReq.getString("Req_Id")+"'";
						ResultSet urlRS=adMPM.selectQuery(urlSelect);
						while(urlRS.next()){
							pendAppForm1.setUrl(urlRS.getString("URL"));
						}
					}*/
					count++;
					if(count == MAIL_PER_PAGE)
					{
						break;
					}
				}
			}
			
		} catch (Exception e) {
			System.out.println("Exception @ getRequestList");			
			e.printStackTrace();
		}
		return list;
	}
	
	
	public ActionForward getCustomerStates(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ApprovalsForm pendAppForm=(ApprovalsForm) form;
		EssDao ad=new EssDao();	
		try{
		
		String countryId=pendAppForm.getCountryId();
		LinkedList stateID=new LinkedList();
		LinkedList stateName=new LinkedList();
		String getStateDetails="select * from State where LAND1='"+countryId+"'";
		ResultSet rsState=ad.selectQuery(getStateDetails);
		while(rsState.next())
		{
			stateID.add(rsState.getString("BLAND"));
			stateName.add(rsState.getString("BEZEI"));
		}
		
		
		
		pendAppForm.setStateId(stateID);
		pendAppForm.setStates(stateName);
		
		ArrayList accountGroupList=new ArrayList();
		ArrayList accountGroupLabelList=new ArrayList();
	 	ResultSet rs1 = ad.selectQuery("select ACCOUNT_GROUP_ID,ACCOUNT_GROUP_NAME from ACCOUNT_GROUP_M where active='True'");
ArrayList subLinkIdList = new ArrayList();
ArrayList subLinkValueList = new ArrayList();
while(rs1.next()) {
	accountGroupList.add(rs1.getString("ACCOUNT_GROUP_ID"));
	accountGroupLabelList.add(rs1.getString("ACCOUNT_GROUP_NAME"));
}
pendAppForm.setAccountGroupList(accountGroupList);
pendAppForm.setAccountGroupLabelList(accountGroupLabelList);
		
		ResultSet rs7 = ad.selectQuery("select PAYMENT_TERM_ID," +
		"PAYMENT_TERM_NAME from PAYMENT_TERM_M where ACTIVE='True' order by PAYMENT_TERM_NAME");
		ArrayList paymentTermList=new ArrayList();
		ArrayList paymentTermLabelList=new ArrayList();
		
		while(rs7.next()) {
			paymentTermList.add(rs7.getString("PAYMENT_TERM_ID"));
			paymentTermLabelList.add(rs7.getString("PAYMENT_TERM_ID")+"-"+rs7.getString("PAYMENT_TERM_NAME"));
		}
		pendAppForm.setPaymentTermList(paymentTermList);
		pendAppForm.setPaymentTermLabelList(paymentTermLabelList);
		
		
		
		
		 
		String getCountryDetails="select * from Country";
		LinkedList countryID=new LinkedList();
		LinkedList countryName=new LinkedList();
		ResultSet rsCountryDetails=ad.selectQuery(getCountryDetails);
		while(rsCountryDetails.next()){
			countryID.add(rsCountryDetails.getString("LAND1"));
			countryName.add(rsCountryDetails.getString("LAND1")+" - "+rsCountryDetails.getString("LANDX"));
		}
		pendAppForm.setCounID(countryID);
		pendAppForm.setCountryName(countryName);
		
			
		
		LinkedList currencyID=new LinkedList();
		LinkedList cureencyNames=new LinkedList();
		String geCurrencyDetails="select * from Currency";
		ResultSet rsCurrencyDetails=ad.selectQuery(geCurrencyDetails);
		while(rsCurrencyDetails.next())
		{
			currencyID.add(rsCurrencyDetails.getString("WAERS"));
			cureencyNames.add(rsCurrencyDetails.getString("WAERS")+" - "+rsCurrencyDetails.getString("ISOCD"));
		}
		pendAppForm.setCurrenIds(currencyID);
		pendAppForm.setCurrencys(cureencyNames);	
		
	LinkedList tdsID=new LinkedList();
	LinkedList tdsValue=new LinkedList();
	
	String getTDs="select * from TDS_SECTION_M where ACTIVE='True'";
	ResultSet rsTDs=ad.selectQuery(getTDs);
	while(rsTDs.next())
	{
		tdsID.add(rsTDs.getString("TDS_SECTION_ID"));
		tdsValue.add(rsTDs.getString("TDS_SECTION_DESC"));
	}
	
	pendAppForm.setTdsIds(tdsID);
	pendAppForm.setTdsCodes(tdsValue);
	HttpSession session=request.getSession();
	UserInfo user=(UserInfo)session.getAttribute("user");
	ArrayList list = new ArrayList();
	ResultSet rs5 = ad.selectQuery("select *  from UploadFiles_Masters where request_no='"+pendAppForm.getRequestNumber()+"' and userId='"+user.getEmployeeNo()+"'");
			while (rs5.next()) {
				CustomerMasterForm custForm1 = new CustomerMasterForm();
				String s=rs5.getString("file_name");
				custForm1.setFileList(rs5.getString("file_name"));
				custForm1.setFilepath("jsp/EMicro Files/ESS/sapMasterRequest/Customer master files/UploadFiles/"+rs5.getString("file_name")+"");
				list.add(custForm1);
			}
			if(list.size()>0){
			request.setAttribute("listName", list);
			}
		
		
		String typeDetails=pendAppForm.getTypeDetails();
		pendAppForm.setTypeDetails(typeDetails);
		request.setAttribute("diplayStates", "diplayStates");
		

		
		LinkedList cusGroupID = new LinkedList();
		LinkedList cusGroupList = new LinkedList();
		 rs1 = ad.selectQuery("select C_GROUP_ID,C_GROUP_NAME from Customer_Group ");
		while(rs1.next()) {
			cusGroupID.add(rs1.getString("C_GROUP_ID"));
			cusGroupList.add(rs1.getString("C_GROUP_NAME"));
		}
		pendAppForm.setCusGroupID(cusGroupID);
		pendAppForm.setCusGroupList(cusGroupList);	
		
		LinkedList priceGroupID = new LinkedList();
		LinkedList piceGroupList = new LinkedList();
		ResultSet rs2 = ad.selectQuery("select * from PRICE_GROUP ");
		while(rs2.next()) {
			priceGroupID.add(rs2.getString("P_GROUP_ID"));
			piceGroupList.add(rs2.getString("P_GROUP_NAME"));
		}
		pendAppForm.setPriceGroupID(priceGroupID);
		pendAppForm.setPiceGroupList(piceGroupList);	
		
		ResultSet rs8 = ad.selectQuery("select ACC_CLERK_ID," +
		"ACC_CLERK_DESC from ACC_CLERK_M where ACTIVE='True'");
		ArrayList accountClerkList=new ArrayList();
		ArrayList accountClerkLabelList=new ArrayList();
		
		while(rs8.next()) {
			accountClerkList.add(rs8.getString("ACC_CLERK_ID"));
			accountClerkLabelList.add(rs8.getString("ACC_CLERK_DESC"));
		}
		pendAppForm.setAccountClerkList(accountClerkList);
		pendAppForm.setAccountClerkLabelList(accountClerkLabelList);
		
		
		LinkedList priceListID = new LinkedList();
		LinkedList piceListValue = new LinkedList();
		ResultSet rs3 = ad.selectQuery("select * from PRICE_LIST ");
		while(rs3.next()) {
			priceListID.add(rs3.getString("P_List_ID"));
			piceListValue.add(rs3.getString("P_LIST_NAME"));
		}
		pendAppForm.setPriceListID(priceListID);
		pendAppForm.setPiceListValue(piceListValue);
		
		LinkedList taxTypeID = new LinkedList();
		LinkedList taxTypeValue = new LinkedList();
		ResultSet rs4 = ad.selectQuery("select * from TAX_CLASS ");
		while(rs4.next()) {
			taxTypeID.add(rs4.getString("T_CLASS_ID"));
			taxTypeValue.add(rs4.getString("T_CLASS_NAME"));
		}
		pendAppForm.setTaxTypeID(taxTypeID);
		pendAppForm.setTaxTypeValue(taxTypeValue);	
		
		
		String editRecord="select * from CUSTOMER_MASTER_M where REQUEST_NO='"+pendAppForm.getRequestNo()+"'";
		ResultSet rsEditRecord=ad.selectQuery(editRecord);
		
		while(rsEditRecord.next())
		{
			ArrayList fileList = new ArrayList();
			String uploadedFiles=rsEditRecord.getString("Attachments");
			if(uploadedFiles.equalsIgnoreCase(""))
			{
				
			}try{
			String v[] = uploadedFiles.split(",");
			int l = v.length;
				for (int i = 0; i < l; i++) 
				{
					CustomerMasterForm custForm2=new CustomerMasterForm();
				int x=v[i].lastIndexOf("/");
				uploadedFiles=v[i].substring(x+1);		
				custForm2.setFileList(uploadedFiles);
				custForm2.setFilepath("jsp/EMicro Files/ESS/sapMasterRequest/Customer master files/UploadFiles/"+uploadedFiles+"");
				fileList.add(custForm2);
				}
			request.setAttribute("listName", fileList);
			
		}
			catch (Exception e) {
				e.printStackTrace();
		
	}
		}
		
		

		}catch (Exception e) {
			e.printStackTrace();
		}
		
		request.setAttribute("approveButton", "approveButton");
		request.setAttribute("rejectButton", "rejectButton");
	
		//display(mapping, form, request, response);
		//displayCMS(mapping, form, request, response);
	return mapping.findForward("customerMaster_Creator");	
	}
	
	
	public ActionForward displayVendorState(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		ApprovalsForm pendAppForm=(ApprovalsForm) form;
		NewsandMediaDao ad=new NewsandMediaDao();
		
		String countryID=request.getParameter("CountryID");
HttpSession session=request.getSession();
		
		
		UserInfo user=(UserInfo)session.getAttribute("user");
		
		try{
			
			if(pendAppForm.getCountry()!=null){
				
			if(!pendAppForm.getCountry().equalsIgnoreCase("")){
			ResultSet rs4 = ad.selectQuery("select BLAND,BEZEI from State where LAND1='"+pendAppForm.getCountry()+"'");
			ArrayList stateList=new ArrayList();
			ArrayList stateLabelList=new ArrayList();
			
			while(rs4.next()) {
				stateList.add(rs4.getString("BLAND"));
				stateLabelList.add(rs4.getString("BEZEI"));
			}
			pendAppForm.setStateList(stateList);
			pendAppForm.setStateLabelList(stateLabelList);
			
			
			request.setAttribute("States", "States");
			
			}
			}
			
			
			
			if(pendAppForm.getTdsCode()!=null){
				
				
				if(!pendAppForm.getTdsCode().equalsIgnoreCase("YES")){
				ResultSet rs4 = ad.selectQuery("select TDS_SECTION_ID,TDS_SECTION_DESC from TDS_SECTION_M where ACTIVE='True' ");
				ArrayList tdsIdList=new ArrayList();
				ArrayList tdsLabelList=new ArrayList();
				
				while(rs4.next()) {
					tdsIdList.add(rs4.getString("TDS_SECTION_ID"));
					tdsLabelList.add(rs4.getString("TDS_SECTION_DESC"));
				}
				pendAppForm.setTdsIdList(tdsIdList);
				pendAppForm.setTdsLabelList(tdsLabelList);
				
				
				request.setAttribute("TdsCode", "TdsCode");
				}
				}
	if(pendAppForm.getRegExciseVendor()!=null){
				
				
				if(pendAppForm.getRegExciseVendor().equalsIgnoreCase("True")){
				
				
				
				request.setAttribute("RegExciseVendor", "RegExciseVendor");
				}
				}
			
			
			
			
			
			
			
			String country=pendAppForm.getCountry();
			pendAppForm.setCountry(country);
			
			ArrayList accountGroupList=new ArrayList();
			ArrayList accountGroupLabelList=new ArrayList();
		 	ResultSet rs = ad.selectQuery("select ACCOUNT_GROUP_ID,ACCOUNT_GROUP_NAME from ACCOUNT_GROUP_M where active='True'");
	ArrayList subLinkIdList = new ArrayList();
	ArrayList subLinkValueList = new ArrayList();
	while(rs.next()) {
		accountGroupList.add(rs.getString("ACCOUNT_GROUP_ID"));
		accountGroupLabelList.add(rs.getString("ACCOUNT_GROUP_NAME"));
	}
	pendAppForm.setAccountGroupList(accountGroupList);
	pendAppForm.setAccountGroupLabelList(accountGroupLabelList);
		 	 
		 	 
	ResultSet rs9 = ad.selectQuery("select * from Country");
	ArrayList countryList=new ArrayList();
	ArrayList countryLabelList=new ArrayList();

	while(rs9.next()) {
		countryList.add(rs9.getString("LAND1"));
		countryLabelList.add(rs9.getString("LAND1")+" - "+rs9.getString("LANDX"));
	}
	pendAppForm.setCountryList(countryList);
	pendAppForm.setCountryLabelList(countryLabelList);


	ResultSet rs5 = ad.selectQuery("select WAERS,ISOCD from Currency order by ISOCD");
	ArrayList currencyList=new ArrayList();
	ArrayList currencyLabelList=new ArrayList();

	while(rs5.next()) {
		currencyList.add(rs5.getString("WAERS"));
		currencyLabelList.add(rs5.getString("WAERS")+"-"+rs5.getString("ISOCD"));
	}
	pendAppForm.setCurrencyList(currencyList);
	pendAppForm.setCurrencyLabelList(currencyLabelList);


	ResultSet rs6 = ad.selectQuery("select RECONCILIATION_ACCOUNT_ID," +
			"RECONCILIATION_ACCOUNT_NAME from RECONCILIATION_ACCOUNT_M where ACTIVE='True' order by RECONCILIATION_ACCOUNT_NAME");
	ArrayList reConcillationList=new ArrayList();
	ArrayList reConcillationLabelList=new ArrayList();


	while(rs6.next()) {
		reConcillationList.add(rs6.getString("RECONCILIATION_ACCOUNT_ID"));
		reConcillationLabelList.add(rs6.getString("RECONCILIATION_ACCOUNT_ID")+"-"+rs6.getString("RECONCILIATION_ACCOUNT_NAME"));
	}
	pendAppForm.setReConcillationList(reConcillationList);
	pendAppForm.setReConcillationLabelList(reConcillationLabelList);


	ResultSet rs7 = ad.selectQuery("select PAYMENT_TERM_ID," +
	"PAYMENT_TERM_NAME from PAYMENT_TERM_M where ACTIVE='True' order by PAYMENT_TERM_NAME");
	ArrayList paymentTermList=new ArrayList();
	ArrayList paymentTermLabelList=new ArrayList();

	while(rs7.next()) {
		paymentTermList.add(rs7.getString("PAYMENT_TERM_ID"));
		paymentTermLabelList.add(rs7.getString("PAYMENT_TERM_ID")+"-"+rs7.getString("PAYMENT_TERM_NAME"));
	}
	pendAppForm.setPaymentTermList(paymentTermList);
	pendAppForm.setPaymentTermLabelList(paymentTermLabelList);


	ResultSet rs8 = ad.selectQuery("select ACC_CLERK_ID," +
	"ACC_CLERK_DESC from ACC_CLERK_M where ACTIVE='True'");
	ArrayList accountClerkList=new ArrayList();
	ArrayList accountClerkLabelList=new ArrayList();

	while(rs8.next()) {
		accountClerkList.add(rs8.getString("ACC_CLERK_ID"));
		accountClerkLabelList.add(rs8.getString("ACC_CLERK_DESC"));
	}
	pendAppForm.setAccountClerkList(accountClerkList);
	pendAppForm.setAccountClerkLabelList(accountClerkLabelList);


	ResultSet rs11 = ad.selectQuery("select LOCID,LOCNAME,location_code from location");
	ArrayList locationList=new ArrayList();
	ArrayList locationLabelList=new ArrayList();

	while(rs11.next()) {
		locationList.add(rs11.getString("LOCID"));
		locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAME"));
	}
	pendAppForm.setLocationIdList(locationList);
	pendAppForm.setLocationLabelList(locationLabelList);



	ResultSet rs4 = ad.selectQuery("select TDS_SECTION_ID,TDS_SECTION_DESC from TDS_SECTION_M where ACTIVE='True' ");
	ArrayList tdsIdList=new ArrayList();
	ArrayList tdsLabelList=new ArrayList();

	while(rs4.next()) {
		tdsIdList.add(rs4.getString("TDS_SECTION_ID"));
		tdsLabelList.add(rs4.getString("TDS_SECTION_DESC"));
	}
	pendAppForm.setTdsIdList(tdsIdList);
	pendAppForm.setTdsLabelList(tdsLabelList);

	String typeDetails=pendAppForm.getTypeDetails();
	pendAppForm.setTypeDetails(typeDetails);


	ArrayList venodreCode=new ArrayList();
	ArrayList vendorType=new ArrayList();
	ResultSet rsVendorType = ad.selectQuery("select V_CODE,V_LTXT from VENDOR_TYPE where active='True' ");
	while(rsVendorType.next()) {
		venodreCode.add(rsVendorType.getString("V_CODE"));
		vendorType.add(rsVendorType.getString("V_LTXT"));
	}

			}catch(SQLException se){
				se.printStackTrace();
			}
			
			String sql1="select * from temp_vendor_documents where request_no='"+pendAppForm.getRequestNo()+"' and userId='"+user.getEmployeeNo()+"'";
			ResultSet rs=ad.selectQuery(sql1);
			try{
				VendorMasterRequestForm pendAppForm1=null;
				ArrayList a1=new ArrayList();
				while(rs.next()) {
					pendAppForm1=new VendorMasterRequestForm();
					pendAppForm1.setFileName(rs.getString("file_name"));
					pendAppForm1.setFileId(rs.getString("file_name"));
					pendAppForm1.setFilepath("jsp/EMicro Files/ESS/sapMasterRequest/vendorDocuments/temp/"+rs.getString("file_name")+"");
					a1.add(pendAppForm1);
				}
				if(a1.size()>0){
				request.setAttribute("documentDetails", a1);
				}
				
			}catch(Exception e){
				e.printStackTrace();
			}
		
		

		
		
		
			request.setAttribute("approveButton", "approveButton");
			request.setAttribute("rejectButton", "rejectButton");
		
		
		
		
		
		//display(mapping, form, request, response);
		return mapping.findForward("VendorMaster_Creator");
	}
	public ActionForward searchVCRoom(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) 
	{ApprovalsForm conForm=(ApprovalsForm) form;
	EssDao ad=new EssDao();
	
	String locId=conForm.getLocationId();
	String floor=conForm.getFloor();
	String room=conForm.getRoomName();
	
	request.setAttribute("ResetSearch", "ResetSearch");
	ResultSet rs11 = ad.selectQuery("select * from location");
	ArrayList locationList=new ArrayList();
	ArrayList locationLabelList=new ArrayList();
	try {
		while(rs11.next()) {
			locationList.add(rs11.getString("LOCID"));
			locationLabelList.add(rs11.getString("LOCATION_CODE")+" - "+rs11.getString("LOCNAME"));
		}
	
	conForm.setLocationIdList(locationList);
	conForm.setLocationLabelList(locationLabelList);
	
	String reqFromDate=conForm.getFromDate();
	
    String a1[]=reqFromDate.split("/");
    reqFromDate=a1[2]+"-"+a1[1]+"-"+a1[0];
    String fromtime=conForm.getFromTime();
    String pm="PM";
   if(fromtime.toLowerCase().indexOf(pm.toLowerCase()) != -1 ) {
	   fromtime=fromtime.replaceAll("PM","");
	   String a[]=fromtime.split(":");
	   if(Integer.parseInt(a[0])!=12){
       int hr=Integer.parseInt(a[0])+12;
       reqFromDate=reqFromDate+" "+hr+":"+a[1];
	   }else{
		   fromtime=fromtime.replaceAll("PM","");
			reqFromDate=reqFromDate+" "+fromtime;
	   }
	}else{
		fromtime=fromtime.replaceAll("AM","");
		reqFromDate=reqFromDate+" "+fromtime;
	}
   
  
   String reqToDate=conForm.getFromDate();
   String b1[]=reqToDate.split("/");
    reqToDate=b1[2]+"-"+b1[1]+"-"+b1[0];
    String totime=conForm.getToTime();
   if(totime.toLowerCase().indexOf(pm.toLowerCase()) != -1 ) {
	   totime=totime.replaceAll("PM","");
	   String a[]=totime.split(":");
	   if(Integer.parseInt(a[0])!=12){
       int hr=Integer.parseInt(a[0])+12;
       reqToDate=reqToDate+" "+hr+":"+a[1];
	   }else{
		   totime=totime.replaceAll("PM","");
			reqToDate=reqToDate+" "+totime;
	   }
	}else{
		totime=totime.replaceAll("AM","");
		reqToDate=reqToDate+" "+totime;
	}
	
	
	Date dNow = new Date( );
	 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd");
    String dateNow = ft.format(dNow);
	List resarvedList=new LinkedList();
 	   String checkAvilbilty="select conf.Reqest_No,conf.Submit_Date,emp.EMP_FULLNAME,loc.LOCATION_CODE,conf.Floor,"
   	+ "conf.Conf_Room,conf.From_Date,conf.From_Time,conf.To_Date,conf.To_Time,conf.approval_status from VCRoom_Details conf,"
   	+ "emp_official_info emp,Location loc where ((conf.Req_From_Date between '"+reqFromDate+"' and '"+reqToDate+"') or (conf.Req_To_Date between '"+reqFromDate+"' and '"+reqToDate+"')) and emp.PERNR=conf.Requster_Id "
   	+ "and conf.Loc_Id=loc.LOCID and emp.PERNR=conf.Requster_Id and conf.Loc_Id=loc.LOCID";
 	
 	if(conForm.getFromTime().equals("")){
 		String fromDate=conForm.getFromDate();
 	   String b2[]=fromDate.split("/");
 	  fromDate=b2[2]+"-"+b2[1]+"-"+b2[0];
 		checkAvilbilty="select conf.Reqest_No,conf.Submit_Date,emp.EMP_FULLNAME,loc.LOCATION_CODE,conf.Floor,"
	   	+ "conf.Conf_Room,conf.From_Date,conf.From_Time,conf.To_Date,conf.To_Time,conf.approval_status from VCRoom_Details conf,"
	   	+ "emp_official_info emp,Location loc where (conf.From_Date='"+fromDate+"' or conf.To_Date='"+fromDate+"' ) and emp.PERNR=conf.Requster_Id "
	   	+ "and conf.Loc_Id=loc.LOCID and emp.PERNR=conf.Requster_Id and conf.Loc_Id=loc.LOCID";
 		
 	}
 	   
   ResultSet rs=ad.selectQuery(checkAvilbilty);
	   try{
		   while(rs.next()){
		   VCForm c=new VCForm();
			   c.setReqNo(rs.getString("Reqest_No"));
			   c.setLocation(rs.getString("LOCATION_CODE"));
			   c.setEmpName(rs.getString("EMP_FULLNAME"));
			   c.setFloor(rs.getString("Floor"));
			   c.setRoomName(rs.getString("Conf_Room"));
			   c.setFromDate(rs.getString("From_Date")+" "+rs.getString("From_Time"));
			   c.setToDate(rs.getString("To_Date")+" "+rs.getString("To_Time"));
			   c.setApprovalStatus(rs.getString("approval_status"));
		   resarvedList.add(c);
		   
		   }
		   }catch(Exception e){
		   e.printStackTrace();
	   }
	   if(resarvedList.size()>0){
		   request.setAttribute("resarvedList", resarvedList);
	   }else{
		   request.setAttribute("NoRecords", "NoRecords");
	   }
	} catch (SQLException e) {
		e.printStackTrace();
	}
	return mapping.findForward("checkVCAvail");}
	public ActionForward searchConfRoom(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) 
	{
		ApprovalsForm conForm=(ApprovalsForm) form;
		EssDao ad=new EssDao();
		
		String locId=conForm.getLocationId();
		String floor=conForm.getFloor();
		String room=conForm.getRoomName();
		
		request.setAttribute("ResetSearch", "ResetSearch");
		ResultSet rs11 = ad.selectQuery("select * from location");
		ArrayList locationList=new ArrayList();
		ArrayList locationLabelList=new ArrayList();
		try {
			while(rs11.next()) {
				locationList.add(rs11.getString("LOCID"));
				locationLabelList.add(rs11.getString("LOCATION_CODE")+" - "+rs11.getString("LOCNAME"));
			}
		
		conForm.setLocationIdList(locationList);
		conForm.setLocationLabelList(locationLabelList);
		
		String reqFromDate=conForm.getFromDate();
		
	    String a1[]=reqFromDate.split("/");
	    reqFromDate=a1[2]+"-"+a1[1]+"-"+a1[0];
	    String fromtime=conForm.getFromTime();
	    String pm="PM";
	   if(fromtime.toLowerCase().indexOf(pm.toLowerCase()) != -1 ) {
		   fromtime=fromtime.replaceAll("PM","");
		   String a[]=fromtime.split(":");
		   if(Integer.parseInt(a[0])!=12){
	       int hr=Integer.parseInt(a[0])+12;
	       reqFromDate=reqFromDate+" "+hr+":"+a[1];
		   }else{
			   fromtime=fromtime.replaceAll("PM","");
				reqFromDate=reqFromDate+" "+fromtime;
		   }
		}else{
			fromtime=fromtime.replaceAll("AM","");
			reqFromDate=reqFromDate+" "+fromtime;
		}
	   
	  
	   String reqToDate=conForm.getFromDate();
	   String b1[]=reqToDate.split("/");
	    reqToDate=b1[2]+"-"+b1[1]+"-"+b1[0];
	    String totime=conForm.getToTime();
	   if(totime.toLowerCase().indexOf(pm.toLowerCase()) != -1 ) {
		   totime=totime.replaceAll("PM","");
		   String a[]=totime.split(":");
		   if(Integer.parseInt(a[0])!=12){
	       int hr=Integer.parseInt(a[0])+12;
	       reqToDate=reqToDate+" "+hr+":"+a[1];
		   }else{
			   totime=totime.replaceAll("PM","");
				reqToDate=reqToDate+" "+totime;
		   }
		}else{
			totime=totime.replaceAll("AM","");
			reqToDate=reqToDate+" "+totime;
		}
		
		
		Date dNow = new Date( );
		 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd");
	    String dateNow = ft.format(dNow);
		List resarvedList=new LinkedList();
		 String checkAvilbilty="select conf.Reqest_No,conf.Submit_Date,emp.EMP_FULLNAME,loc.LOCATION_CODE,conf.Floor,"
	   	+ "conf.Conf_Room,conf.From_Date,conf.From_Time,conf.To_Date,conf.To_Time,conf.approval_status from ConferenceRoom_Details conf,"
	   	+ "emp_official_info emp,Location loc where ((conf.Req_From_Date between '"+reqFromDate+"' and '"+reqToDate+"') or "
	   	+ "(conf.Req_To_Date between '"+reqFromDate+"' and '"+reqToDate+"')) and emp.PERNR=conf.Requster_Id "
	   	+ "and conf.Loc_Id=loc.LOCID and emp.PERNR=conf.Requster_Id and conf.Loc_Id=loc.LOCID";
			 	
	 	if(conForm.getFromTime().equals("")){
	 		String fromDate=conForm.getFromDate();
	 	   String b2[]=fromDate.split("/");
	 	  fromDate=b2[2]+"-"+b2[1]+"-"+b2[0];
	 		checkAvilbilty="select conf.Reqest_No,conf.Submit_Date,emp.EMP_FULLNAME,loc.LOCATION_CODE,conf.Floor,"
		   	+ "conf.Conf_Room,conf.From_Date,conf.From_Time,conf.To_Date,conf.To_Time,conf.approval_status from ConferenceRoom_Details conf,"
		   	+ "emp_official_info emp,Location loc where (conf.From_Date='"+fromDate+"' or conf.To_Date='"+fromDate+"' ) and emp.PERNR=conf.Requster_Id "
		   	+ "and conf.Loc_Id=loc.LOCID and emp.PERNR=conf.Requster_Id and conf.Loc_Id=loc.LOCID";
	 		
	 	}
	 	   
	   ResultSet rs=ad.selectQuery(checkAvilbilty);
		   try{
			   while(rs.next()){
			   ConferenceForm c=new ConferenceForm();
				   c.setReqNo(rs.getString("Reqest_No"));
				   c.setLocation(rs.getString("LOCATION_CODE"));
				   c.setEmpName(rs.getString("EMP_FULLNAME"));
				   c.setFloor(rs.getString("Floor"));
				   c.setRoomName(rs.getString("Conf_Room"));
				   c.setFromDate(rs.getString("From_Date")+" "+rs.getString("From_Time"));
				   c.setToDate(rs.getString("To_Date")+" "+rs.getString("To_Time"));
				   c.setApprovalStatus(rs.getString("approval_status"));
			   resarvedList.add(c);
			   
			   }
			   }catch(Exception e){
			   e.printStackTrace();
		   }
		   if(resarvedList.size()>0){
			   request.setAttribute("resarvedList", resarvedList);
		   }else{
			   request.setAttribute("NoRecords", "NoRecords");
		   }
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return mapping.findForward("checkConfAvail");
	}
	public ActionForward checkVCAvail(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
	{
		ApprovalsForm statusForm=(ApprovalsForm) form;
		EssDao ad=new EssDao();
		ResultSet rs11 = ad.selectQuery("select * from location");
		ArrayList locationList=new ArrayList();
		ArrayList locationLabelList=new ArrayList();
		try {
			while(rs11.next()) {
				locationList.add(rs11.getString("LOCID"));
				locationLabelList.add(rs11.getString("LOCATION_CODE")+" - "+rs11.getString("LOCNAME"));
			}
		}catch(Exception e){
			e.printStackTrace();
		}
			statusForm.setLocationIdList(locationList);
			statusForm.setLocationLabelList(locationLabelList);
		
		return mapping.findForward("checkVCAvail");
	}
	public ActionForward checkConferenceAvail(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
	{
		ApprovalsForm statusForm=(ApprovalsForm) form;
		EssDao ad=new EssDao();
		ResultSet rs11 = ad.selectQuery("select * from location");
		ArrayList locationList=new ArrayList();
		ArrayList locationLabelList=new ArrayList();
		try {
			while(rs11.next()) {
				locationList.add(rs11.getString("LOCID"));
				locationLabelList.add(rs11.getString("LOCATION_CODE")+" - "+rs11.getString("LOCNAME"));
			}
		}catch(Exception e){
			e.printStackTrace();
		}
			statusForm.setLocationIdList(locationList);
			statusForm.setLocationLabelList(locationLabelList);
		
		return mapping.findForward("checkConfAvail");
	}
	public ActionForward statusChangeVC(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
	{
		ApprovalsForm statusForm = (ApprovalsForm) form;
		String reqId = statusForm.getRequestNo();
		String reqType = statusForm.getReqRequstType();
		statusForm.setRequestType(reqType);
		HttpSession session = request.getSession();
		UserInfo user = (UserInfo) session.getAttribute("user");
		EssDao ad = new EssDao();
		statusForm.setRequestType(reqType);
		String reqStatus = request.getParameter("status");
		String filterBy = statusForm.getSelectedFilter();
		Date dNow = new Date();
		SimpleDateFormat ft = new SimpleDateFormat("yyyy-MM-dd HH:mm");
		String dateNow = ft.format(dNow);
		if (user == null) {
			request.setAttribute("message",
					"Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		statusForm.setRequestType(reqType);
		String locId = "";
		String floor = "";
		String room = "";
		String requesterID = "";
		String reqNo = statusForm.getRequestNo();
		// set Request Details
		String reqFromDate = "";
		String reqToDate = "";
		String vcTo ="";
		String vcFrom ="";

		String getRequestDetails = "select conf.Requster_Id,conf.Req_From_Date,conf.Req_To_Date,conf.Loc_Id,conf.foruse,emp.EMP_FULLNAME,emp1.EMP_FULLNAME as forusage,dept.DPTSTXT,"
				+ "desg.DSGSTXT,conf.Ext_No,conf.Email_ID,conf.IP_Phone,conf.IPAddress,loc.LOCATION_CODE,loc.LOCNAME,conf.Floor,"
				+ "conf.Conf_Room,conf.From_Date,conf.From_Time,conf.To_Date,conf.To_Time,conf.vc_from,conf.vc_to,conf.Purpose,"
				+ "conf.approval_status,conf.approved_date from VCRoom_Details conf,emp_official_info emp,emp_official_info emp1,"
				+ "DEPARTMENT dept,DESIGNATION desg ,Location loc where conf.Reqest_No='"
				+ statusForm.getRequestNo()
				+ "' and conf.Requster_Id=emp.PERNR and"
				+ " emp.DPTID=dept.DPTID and emp.DSGID=desg.DSGID and loc.LOCID=conf.Loc_Id  and emp1.PERNR=conf.foruse";
		ResultSet rs = ad.selectQuery(getRequestDetails);
		try {
			while (rs.next()) {
				VCForm c = new VCForm();
				locId = rs.getString("Loc_Id");
				floor = rs.getString("Floor");
				room = rs.getString("Conf_Room");
				requesterID = rs.getString("Requster_Id");
				c.setEmpId(rs.getString("Requster_Id"));
				c.setEmpName(rs.getString("EMP_FULLNAME"));
				c.setUsage(rs.getString("foruse") + "-"
						+ rs.getString("forusage"));
				c.setDept(rs.getString("DPTSTXT"));
				c.setDesg(rs.getString("DSGSTXT"));
				c.setExtno(rs.getString("Ext_No"));
				c.setEmpEmailID(rs.getString("Email_ID"));
				c.setIpPhoneno(rs.getString("IP_Phone"));
				c.setIPNumber(rs.getString("IPAddress"));
				c.setLocation(rs.getString("LOCATION_CODE") + "-"
						+ rs.getString("LOCNAME"));
				c.setFloor(rs.getString("Floor"));
				c.setRoomName(rs.getString("Conf_Room"));
				c.setFromDate(EMicroUtils.display(rs.getDate("From_Date")));
				c.setFromTime(rs.getString("From_Time"));
				c.setToDate(EMicroUtils.display(rs.getDate("To_Date")));
				c.setToTime(rs.getString("To_Time"));
				c.setVcFrom(rs.getString("vc_from"));
				vcFrom=rs.getString("vc_from");
				c.setVcTo(rs.getString("vc_to"));
				vcTo = rs.getString("vc_to");
				c.setPurpose(rs.getString("Purpose"));
				c.setStatus(rs.getString("approval_status"));
				String approvalStatus = rs.getString("approval_status");
				c.setApprovedDate("");
				if (!approvalStatus.equals("Pending"))
					c.setApprovedDate(rs.getString("approved_date"));
				if (approvalStatus.equals("Reserved")) {

				}
				reqFromDate = rs.getString("Req_From_Date");
				reqToDate = rs.getString("Req_To_Date");

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		// check request Status
		String reqestStatus = "";
		String locid ="";
		String checkReqStatus = "select * from VCRoom_Details where   Reqest_No='"
				+ reqId + "'";
		ResultSet rsCheck = ad.selectQuery(checkReqStatus);
		try {
			while (rsCheck.next()) {
				reqestStatus = rsCheck.getString("approval_status");
				locid = rsCheck.getString("loc_id");
			}
		} catch (Exception e) {
			e.printStackTrace();

		}
		// check Availablity

		if (!reqestStatus.equals("Self Cancelled")) {
			int count = 0;
			String checkAvilbilty = "select count(*) from VCRoom_Details conf where (( Req_From_Date between '"
					+ reqFromDate
					+ "'  and '"
					+ reqToDate
					+ "') or "
					+ "( Req_To_Date  between '"
					+ reqFromDate
					+ "'  and '"
					+ reqToDate
					+ "')) and conf.Loc_Id='"
					+ locId
					+ "' and conf.Floor='"
					+ floor
					+ "' "
					+ "and conf.Conf_Room='"
					+ room
					+ "' and (approval_status='Reserved' or approval_status='Completed')  ";

			ResultSet rs1 = ad.selectQuery(checkAvilbilty);
			try {
				while (rs1.next()) {
					count = rs1.getInt(1);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}

			int priorityCout = 0;
			int apprverPriority = 0;
			int nextApprover = 0;
			
			if (reqStatus.equals("Approve")) {
				
				String getProrityCout = "select MAX(Priority) from VCRoom_Approvers where LocID='"
						+ locId
						+ "' and Floor='"
						+ floor
						+ "' and Room='"
						+ room + "'";
				ResultSet rsCout = ad.selectQuery(getProrityCout);
				try {
					while (rsCout.next()) {
						priorityCout = rsCout.getInt(1);
					}
					String getApprPrority = "select Priority from VCRoom_Approvers where LocID='"
							+ locId
							+ "' and Floor='"
							+ floor
							+ "' and Room='"
							+ room
							+ "' "
							+ "and (Approver_Id='"+ user.getEmployeeNo() + "' or Parallel_Approver_Id='"+ user.getEmployeeNo() + "') ";
					ResultSet rsPriority = ad.selectQuery(getApprPrority);
					while (rsPriority.next()) {
						apprverPriority = rsPriority.getInt("Priority");
					}
					if (count == 0) {
						filterBy = "Approve";

						if (apprverPriority == priorityCout) {

							// last Approver

							String updateStatus = "update All_Request set Req_Status='Approved',Comments='"
									+ statusForm.getRemark()
									+ "',Last_Approver=Pending_Approver,"
									+ "Pending_Approver='',"
									+ "Approved_Persons=Pending_Approver,approved_date='"
									+ dateNow
									+ "',Actual_Approver='"+user.getEmployeeNo()+"',Actual_Approved_Date='"+dateNow+"' where Req_Id='"
									+ reqId
									+ "' and Req_Type='VC Booking'";
							int saveStatus = 0;
							saveStatus = ad.SqlExecuteUpdate(updateStatus);
							if (saveStatus > 0) {
								statusForm
										.setMessage2("Request Approved Successfully");
								String requsertDetails = "update VCRoom_Details  set approval_status='Reserved',Last_approver='"
										+ user.getFullName()
										+ "',Pending_approver='',approved_date='"
										+ dateNow
										+ "' "
										+ "where Reqest_No='"
										+ reqId + "'";
								ad.SqlExecuteUpdate(requsertDetails);

								VCMail mail = new VCMail();
								mail.sendMailToRequester(request,
										Integer.parseInt(reqId),
										user.getEmployeeNo(), requesterID,
										"Reserved");

							}
							
							if(!locid.equalsIgnoreCase(vcTo))
							{	
							
							String getIttech = "select top 1 PERNR as It_person  from emp_official_info ,Location  where location.location_code =emp_official_info.locid and DPTID = '21' and  ACTIVE = 1 and Location.LOCID = '"+vcTo+"'";
									
							ResultSet rs12 = ad.selectQuery(getIttech);
							
							VCMail mail = new VCMail();
							
						String pernr="";
							if(rs12.next())
							{
								//statusForm.setToItperson("It_person");
								pernr=rs12.getString("It_person");
							}
							
							if(!statusForm.getToItperson().equalsIgnoreCase(""))
							{
								mail.sendMailToRequester(request,
								Integer.parseInt(reqId),
								user.getEmployeeNo(), pernr,
								"Information");

							}
							
							
							
							}
							
							if(!locid.equalsIgnoreCase(vcFrom))
							{	
							
							String getIttech = "select top 1 PERNR as It_person  from emp_official_info ,Location  where location.location_code =emp_official_info.locid and DPTID = '21' and  ACTIVE = 1 and Location.LOCID = '"+vcFrom+"'";
									
							ResultSet rs12 = ad.selectQuery(getIttech);
							
							VCMail mail = new VCMail();
							
						
							String pernr="";
							if(rs12.next())
							{
								//statusForm.setToItperson("It_person");
								pernr=rs12.getString("It_person");
							}
							
							if(!statusForm.getToItperson().equalsIgnoreCase(""))
							{
								mail.sendMailToRequester(request,
								Integer.parseInt(reqId),
								user.getEmployeeNo(), pernr,
								"Information");

							}
							
							
							
							}
							

						} else {

							String approverID = "";
							String pendingApprs = "";
							String getApprovers = "select appr.Approver_Id,emp.EMP_FULLNAME,appr.Priority from VCRoom_Approvers appr,emp_official_info emp "
									+ " where appr.LocID='"
									+ locId
									+ "' and appr.Floor='"
									+ floor
									+ "' and appr.Room='"
									+ room
									+ "' "
									+ "and emp.PERNR=appr.Approver_Id and  Priority>"
									+ apprverPriority + "";
							ResultSet rsAppr = ad.selectQuery(getApprovers);
							try {
								while (rsAppr.next()) {
									pendingApprs = pendingApprs
											+ rsAppr.getString("EMP_FULLNAME")
											+ " , ";
								}
								if (!(pendingApprs.equalsIgnoreCase(""))) {
									int size = pendingApprs.length();
									pendingApprs = pendingApprs.substring(0,
											(size - 2));
								}
							} catch (Exception e) {
								e.printStackTrace();
							}
							String updateStatus = "update All_Request set Req_Status='Approved',Comments='"
									+ statusForm.getRemark()
									+ "',Last_Approver='"
									+ user.getEmployeeNo()
									+ "',"
									+ "Pending_Approver='',Approved_Persons='"
									+ user.getEmployeeNo()
									+ "',approved_date='"
									+ dateNow
									+ "' where Req_Id='"
									+ reqId
									+ "' and Req_Type='VC Booking' and Pending_Approver='"
									+ user.getEmployeeNo() + "'";
							int saveStatus = 0;
							saveStatus = ad.SqlExecuteUpdate(updateStatus);
							if (saveStatus > 0) {
								statusForm
										.setMessage2("Request Approved Successfully");

								String updateApprovers = "update VCRoom_Details  set Last_approver='"
										+ user.getFullName()
										+ "',Pending_approver='"
										+ pendingApprs
										+ "' "
										+ "where Reqest_No='"
										+ reqId
										+ "'";
								ad.SqlExecuteUpdate(updateApprovers);

								String getNextAppr = "select Approver_Id from VCRoom_Approvers where Priority='"
										+ (apprverPriority + 1)
										+ "' and LocID='"
										+ locId
										+ "' and "
										+ "Floor='"
										+ floor
										+ "' and Room='"
										+ room + "'";
								ResultSet rsNextAppr = ad
										.selectQuery(getNextAppr);
								while (rsNextAppr.next()) {
									nextApprover = rsNextAppr
											.getInt("Approver_Id");
								}
								ft = new SimpleDateFormat("dd/MM/yyyy");
								dateNow = ft.format(dNow);
								String saveAllReq = "insert into All_Request(Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,"
										+ "Approved_Persons,Requester_Id,Comments,type) values ('"
										+ reqId
										+ "','VC Booking','"
										+ requesterID
										+ "','"
										+ dateNow
										+ "','Pending','',"
										+ "'"
										+ nextApprover
										+ "','','"
										+ requesterID
										+ "','','VC Booking')";
								ad.selectQuery(saveAllReq);

							}
						}
					} else {
						statusForm.setMessage("VC Room Already Reserved.");
					}

				} catch (Exception e) {
					e.printStackTrace();
				}
			} 
			if (reqStatus.equals("Reject"))  {
				// reject

				String updateStatus = "update All_Request set Req_Status='Rejected',Comments='"
						+ statusForm.getRemark()
						+ "',Last_Approver=Pending_Approver,"
						+ "Pending_Approver='',Approved_Persons=Pending_Approver,rejected_date='"
						+ dateNow
						+ "',Actual_Approver='"+user.getEmployeeNo()+"',Actual_Approved_Date='"+dateNow+"' where Req_Id='"
						+ reqId
						+ "' and Req_Type='VC Booking' ";
				int saveStatus = 0;
				saveStatus = ad.SqlExecuteUpdate(updateStatus);
				if (saveStatus > 0) {
					statusForm.setMessage2("Request Rejected Successfully");
					String requsertDetails = "update VCRoom_Details  set approval_status='Rejected',Last_approver='"
							+ user.getFullName()
							+ "',Pending_approver='',approved_date='"
							+ dateNow
							+ "' " + "where Reqest_No='" + reqId + "'";
					ad.SqlExecuteUpdate(requsertDetails);
					VCMail mail = new VCMail();
					mail.sendMailToRequester(request, Integer.parseInt(reqId),
							user.getEmployeeNo(), requesterID, "Rejected");
				}

			}
		} else {
			statusForm.setMessage("VC Room Already Self Cancelled.");
		}
		
	

		if (reqStatus.equals("Completed")) {
			String updateStatus = "update All_Request set Req_Status='Completed',approved_date='"
					+ dateNow
					+ "',Actual_Approver='"+user.getEmployeeNo()+"',Actual_Approved_Date='"+dateNow+"' where Req_Id='"
					+ reqId
					+ "' and Req_Type='VC Booking'";
			int saveStatus = 0;
			saveStatus = ad.SqlExecuteUpdate(updateStatus);
			if (saveStatus > 0) {
				statusForm.setMessage2("Request Completed Successfully");
				String requsertDetails = "update VCRoom_Details  set approval_status='Completed' where Reqest_No='"
						+ reqId + "'";
				ad.SqlExecuteUpdate(requsertDetails);
				VCMail mail = new VCMail();
				mail.sendMailToRequester(request, Integer.parseInt(reqId),
						user.getEmployeeNo(), requesterID, "Completed");
			}
		}
		if (reqStatus.equals("Cancel")) {
			String updateStatus = "update All_Request set Req_Status='Cancelled',rejected_date='"
					+ dateNow
					+ "',Actual_Approver='"+user.getEmployeeNo()+"',Actual_Approved_Date='"+dateNow+"' where Req_Id='"
					+ reqId
					+ "' and Req_Type='VC Booking' ";
			int saveStatus = 0;
			saveStatus = ad.SqlExecuteUpdate(updateStatus);
			if (saveStatus > 0) {
				statusForm.setMessage2("Request Cancelled Successfully");
				String requsertDetails = "update VCRoom_Details  set approval_status='Cancelled',Last_approver='"
						+ user.getEmployeeNo()
						+ "',Pending_approver='',approved_date='"
						+ dateNow
						+ "' where Reqest_No='" + reqId + "'";
				ad.SqlExecuteUpdate(requsertDetails);
				VCMail mail = new VCMail();
				mail.sendMailToRequester(request, Integer.parseInt(reqId),
						user.getEmployeeNo(), requesterID, "Cancel");
			}

		}
		ad.connClose();

		/*
		 * if(filterBy.equalsIgnoreCase("Pending")){
		 * request.setAttribute("approveButton", "approveButton");
		 * request.setAttribute("rejectButton", "rejectButton"); }
		 * if(filterBy.equalsIgnoreCase("Rejected")){
		 * request.setAttribute("approveButton", "approveButton"); }
		 */
		// Approvers Details
		String appstatus="";
		List confList = new LinkedList();
		getRequestDetails = "select conf.Requster_Id,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT,conf.Ext_No,conf.Email_ID,conf.IP_Phone,"
				+ "conf.IPAddress,loc.LOCATION_CODE,loc.LOCNAME,conf.Floor,conf.Conf_Room,conf.From_Date,conf.From_Time,conf.To_Date,conf.To_Time,conf.vc_from,conf.vc_to,"
				+ "conf.Purpose,conf.approval_status,conf.Loc_Id,conf.Req_From_Date,conf.Req_To_Date,conf.approved_date from VCRoom_Details conf,emp_official_info emp,DEPARTMENT dept,DESIGNATION desg ,Location loc where "
				+ "conf.Reqest_No='"
				+ statusForm.getRequestNo()
				+ "' and conf.Requster_Id=emp.PERNR and emp.DPTID=dept.DPTID and emp.DSGID=desg.DSGID and loc.LOCID=conf.Loc_Id ";
		rs = ad.selectQuery(getRequestDetails);
		try {
			while (rs.next()) {
				VCForm c = new VCForm();
				locId = rs.getString("Loc_Id");
				floor = rs.getString("Floor");
				room = rs.getString("Conf_Room");
				requesterID = rs.getString("Requster_Id");
				c.setEmpId(rs.getString("Requster_Id"));
				c.setEmpName(rs.getString("EMP_FULLNAME"));
				c.setDept(rs.getString("DPTSTXT"));
				c.setDesg(rs.getString("DSGSTXT"));
				c.setExtno(rs.getString("Ext_No"));
				c.setEmpEmailID(rs.getString("Email_ID"));
				c.setIpPhoneno(rs.getString("IP_Phone"));
				c.setIPNumber(rs.getString("IPAddress"));
				c.setLocation(rs.getString("LOCATION_CODE") + "-"
						+ rs.getString("LOCNAME"));
				c.setFloor(rs.getString("Floor"));
				c.setRoomName(rs.getString("Conf_Room"));
				c.setFromDate(EMicroUtils.display(rs.getDate("From_Date")));
				c.setFromTime(rs.getString("From_Time"));
				c.setToDate(EMicroUtils.display(rs.getDate("To_Date")));
				c.setToTime(rs.getString("To_Time"));
				c.setVcFrom(rs.getString("vc_from"));
				c.setVcTo(rs.getString("vc_to"));
				c.setPurpose(rs.getString("Purpose"));
				c.setStatus(rs.getString("approval_status"));
				appstatus=rs.getString("approval_status");
				String approvalStatus = rs.getString("approval_status");
				c.setApprovedDate("");
				if (!approvalStatus.equals("Pending"))
					c.setApprovedDate(rs.getString("approved_date"));
				if (approvalStatus.equals("Reserved")) {

				}
				reqFromDate = rs.getString("Req_From_Date");
				reqToDate = rs.getString("Req_To_Date");

				confList.add(c);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		request.setAttribute("confList", confList);
		List appList = new LinkedList();
		
		String getApproverDetails="";
		if(appstatus.equalsIgnoreCase("Pending"))
		{
		 getApproverDetails = "select appr.Approver_Id,emp.EMP_FULLNAME,dept.DPTSTXT,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
				+ "all_r.Comments,all_r.Approved_Persons,all_r.Pending_Approver from VCRoom_Details conf,VCRoom_Approvers appr ,"
				+ "All_Request all_r,emp_official_info emp,DEPARTMENT dept,DESIGNATION desg ,Location loc where conf.Reqest_No="
				+ reqId
				+ " and conf.Loc_Id=appr.LocID "
				+ "and conf.Floor=appr.Floor and conf.Conf_Room=appr.Room and all_r.Req_Id=conf.Reqest_No and all_r.Req_Type='VC Booking' and  "
				+ "(appr.Approver_Id=all_r.Last_Approver or appr.Approver_Id=all_r.Pending_Approver) and  (all_r.Pending_Approver=emp.PERNR or "
				+ "all_r.Last_Approver =emp.PERNR) and emp.DPTID=dept.DPTID and emp.DSGID=desg.DSGID and loc.LOCID=conf.Loc_Id "
				+ "union "
				+ "select appr.parallel_Approver_Id,emp.EMP_FULLNAME,dept.DPTSTXT,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
				+ "all_r.Comments,all_r.Approved_Persons,all_r.Pending_Approver from VCRoom_Details conf,VCRoom_Approvers appr ,"
				+ "All_Request all_r,emp_official_info emp,DEPARTMENT dept,DESIGNATION desg ,Location loc where conf.Reqest_No="
				+ reqId
				+ " and conf.Loc_Id=appr.LocID "
				+ "and conf.Floor=appr.Floor and conf.Conf_Room=appr.Room and all_r.Req_Id=conf.Reqest_No and all_r.Req_Type='VC Booking' and  "
				+ "(appr.parallel_Approver_Id=all_r.Last_Approver or appr.parallel_Approver_Id=all_r.Pending_Approver) and  (all_r.Pending_Approver=emp.PERNR or "
				+ "all_r.Last_Approver =emp.PERNR) and emp.DPTID=dept.DPTID and emp.DSGID=desg.DSGID and loc.LOCID=conf.Loc_Id " 
				+ "";
		}
		else
		{
			 getApproverDetails = "select appr.Approver_Id,emp.EMP_FULLNAME,dept.DPTSTXT,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
						+ "all_r.Comments,all_r.Approved_Persons,all_r.Pending_Approver from VCRoom_Details conf,VCRoom_Approvers appr ,"
						+ "All_Request all_r,emp_official_info emp,DEPARTMENT dept,DESIGNATION desg ,Location loc where conf.Reqest_No="
						+ reqId
						+ " and conf.Loc_Id=appr.LocID "
						+ "and conf.Floor=appr.Floor and conf.Conf_Room=appr.Room and all_r.Req_Id=conf.Reqest_No and all_r.Req_Type='VC Booking' and  "
						+ "(appr.Approver_Id=all_r.Last_Approver or appr.Approver_Id=all_r.Pending_Approver) and  (all_r.Actual_Approver=emp.PERNR or "
						+ "all_r.Actual_Approver =emp.PERNR) and emp.DPTID=dept.DPTID and emp.DSGID=desg.DSGID and loc.LOCID=conf.Loc_Id ";
		}
		
		
		ResultSet rsAppr = ad.selectQuery(getApproverDetails);
		try {
			while (rsAppr.next()) {
				ApprovalsForm appr = new ApprovalsForm();
				appr.setApprover(rsAppr.getString("EMP_FULLNAME"));
				appr.setDesignation(rsAppr.getString("DPTSTXT"));
				appr.setApproveStatus(rsAppr.getString("Req_Status"));
				String approvaStatus = rsAppr.getString("Req_Status");
				if (approvaStatus.equals("Pending")) {
					appr.setApproveDate("");
					appr.setComments("");
				}
				if (approvaStatus.equals("Approved")
						|| approvaStatus.equals("Completed")) {
					appr.setApproveDate(rsAppr.getString("approved_date"));
					appr.setComments(rsAppr.getString("Comments"));
				}
				if (approvaStatus.equals("Rejected")
						|| approvaStatus.equals("Cancelled")) {
					appr.setApproveDate(rsAppr.getString("rejected_date"));
					appr.setComments(rsAppr.getString("Comments"));
				}
				appList.add(appr);
			}
			request.setAttribute("appList", appList);
			ad.connClose();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mapping.findForward("VCRoom");}
	public ActionForward statusChangeConference(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
	{
		ApprovalsForm statusForm=(ApprovalsForm) form;
		String reqId =statusForm.getRequestNo();
		String reqType = statusForm.getReqRequstType();
		statusForm.setRequestType(reqType);
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		EssDao ad=new EssDao();
		statusForm.setRequestType(reqType);
		String reqStatus = request.getParameter("status");
		String filterBy=statusForm.getSelectedFilter();
		Date dNow = new Date( );
		 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm");
			String dateNow = ft.format(dNow);
		if(user==null){
			request.setAttribute("message","Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		statusForm.setRequestType(reqType);
		String locId="";
		String floor="";
		String room="";
		String requesterID="";
		String reqNo=statusForm.getRequestNo();
		//set Request Details
		String reqFromDate="";
		String reqToDate="";
		
				String getRequestDetails="select conf.Requster_Id,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT,conf.Ext_No,conf.Email_ID,conf.IP_Phone,"
				+ "conf.IPAddress,loc.LOCATION_CODE,loc.LOCNAME,conf.Floor,conf.Conf_Room,conf.From_Date,conf.From_Time,conf.To_Date,conf.To_Time,"
				+ "conf.Purpose,conf.approval_status,conf.Loc_Id,conf.Req_From_Date,conf.Req_To_Date,conf.approved_date from ConferenceRoom_Details conf,emp_official_info emp,DEPARTMENT dept,DESIGNATION desg ,Location loc where "
				+ "conf.Reqest_No='"+statusForm.getRequestNo()+"' and conf.Requster_Id=emp.PERNR and emp.DPTID=dept.DPTID and emp.DSGID=desg.DSGID and loc.LOCID=conf.Loc_Id ";
				ResultSet rs=ad.selectQuery(getRequestDetails);
				try{
				while(rs.next()){
					ConferenceForm c=new ConferenceForm();
					locId=rs.getString("Loc_Id");
					floor=rs.getString("Floor");
					room=rs.getString("Conf_Room");
					requesterID=rs.getString("Requster_Id");
					c.setEmpId(rs.getString("Requster_Id"));
					c.setEmpName(rs.getString("EMP_FULLNAME"));
					c.setDept(rs.getString("DPTSTXT"));
					c.setDesg(rs.getString("DSGSTXT"));
					c.setExtno(rs.getString("Ext_No"));
					c.setEmpEmailID(rs.getString("Email_ID"));
					c.setIpPhoneno(rs.getString("IP_Phone"));
					c.setIPNumber(rs.getString("IPAddress"));
					c.setLocation(rs.getString("LOCATION_CODE")+"-"+rs.getString("LOCNAME"));
					c.setFloor(rs.getString("Floor"));
					c.setRoomName(rs.getString("Conf_Room"));
					c.setFromDate(EMicroUtils.display(rs.getDate("From_Date")));
					c.setFromTime(rs.getString("From_Time"));
					c.setToDate(EMicroUtils.display(rs.getDate("To_Date")));
					c.setToTime(rs.getString("To_Time"));
					c.setPurpose(rs.getString("Purpose"));
					c.setStatus(rs.getString("approval_status"));
					String approvalStatus=rs.getString("approval_status");
					c.setApprovedDate("");
					if(!approvalStatus.equals("Pending"))
						c.setApprovedDate(rs.getString("approved_date"));
					if(approvalStatus.equals("Reserved"))
					{
					
					}
					reqFromDate=rs.getString("Req_From_Date");
					reqToDate=rs.getString("Req_To_Date");
					
				}
				}catch(Exception e){
					e.printStackTrace();
				}
				//check request Status
				String reqestStatus="";
				String checkReqStatus="select * from ConferenceRoom_Details where   Reqest_No='"+reqId+"'";
				ResultSet rsCheck=ad.selectQuery(checkReqStatus);
				try{
				while(rsCheck.next()){
					reqestStatus=rsCheck.getString("approval_status");
				}
				}catch(Exception e){
					e.printStackTrace();
					
				}
				//check Availablity
			   
			   if(!reqestStatus.equals("Self Cancelled"))
			   {
			   int count=0;
				   String checkAvilbilty="select count(*) from ConferenceRoom_Details conf where (( Req_From_Date between '"+reqFromDate+"'  and '"+reqToDate+"') or "
				   	+ "( Req_To_Date  between '"+reqFromDate+"'  and '"+reqToDate+"')) and conf.Loc_Id='"+locId+"' and conf.Floor='"+floor+"' "
				   	+ "and conf.Conf_Room='"+room+"' and (approval_status='Reserved' or approval_status='Completed')  ";
				   
				   ResultSet rs1=ad.selectQuery(checkAvilbilty);
				   try{
					   while(rs1.next()){
					  count=rs1.getInt(1);
					   }
					   }catch(Exception e){
					   e.printStackTrace();
				   }
				
				int priorityCout=0;
				int apprverPriority=0;
				int nextApprover=0;		
		if(reqStatus.equals("Approve")){
			String getProrityCout="select MAX(Priority) from ConferanceRoom_Approvers where LocID='"+locId+"' and Floor='"+floor+"' and Room='"+room+"'";
			ResultSet rsCout=ad.selectQuery(getProrityCout);
			try{
			while(rsCout.next())
			{
				priorityCout=rsCout.getInt(1);
			}
			String getApprPrority="select Priority from ConferanceRoom_Approvers where LocID='"+locId+"' and Floor='"+floor+"' and Room='"+room+"' "
					+ "and Approver_Id='"+user.getEmployeeNo()+"'";
			ResultSet rsPriority=ad.selectQuery(getApprPrority);
			while(rsPriority.next()){
				apprverPriority=rsPriority.getInt("Priority");
			}
			if(count==0){
				filterBy="Approve";
				
			if(apprverPriority==priorityCout){
				
				//last Approver
				
				String updateStatus="update All_Request set Req_Status='Approved',Comments='"+statusForm.getRemark()+"',Last_Approver='"+user.getEmployeeNo()+"'," +
						"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Conference' and Pending_Approver='"+user.getEmployeeNo()+"'";
			    int saveStatus=0;
			    saveStatus=ad.SqlExecuteUpdate(updateStatus);
			    if(saveStatus>0){
					statusForm.setMessage2("Request Approved Successfully");
					String requsertDetails="update ConferenceRoom_Details  set approval_status='Reserved',Last_approver='"+user.getFullName()+"',Pending_approver='',approved_date='"+dateNow+"' "
							+ "where Reqest_No='"+reqId+"'";
					ad.SqlExecuteUpdate(requsertDetails);
					
					ConferenceMail mail=new ConferenceMail();
					mail.sendMailToRequester(request, Integer.parseInt(reqId), user.getEmployeeNo(), requesterID,"Reserved");
					
			    }
				
				
			}else{
				
				String approverID="";
				   String pendingApprs="";
				   String getApprovers="select appr.Approver_Id,emp.EMP_FULLNAME,appr.Priority from ConferanceRoom_Approvers appr,emp_official_info emp "
				   		+ " where appr.LocID='"+locId+"' and appr.Floor='"+floor+"' and appr.Room='"+room+"' "
				   				+ "and emp.PERNR=appr.Approver_Id and  Priority>"+apprverPriority+"";
				   ResultSet rsAppr=ad.selectQuery(getApprovers);
				   try{
				   while(rsAppr.next()){
					   pendingApprs=pendingApprs+rsAppr.getString("EMP_FULLNAME")+" , ";
				   }
				   if(!(pendingApprs.equalsIgnoreCase(""))){
			 			int size=pendingApprs.length();
			 			pendingApprs=pendingApprs.substring(0, (size-2));
			 		}
				   }catch(Exception e){
					   e.printStackTrace();
				   }
				String updateStatus="update All_Request set Req_Status='Approved',Comments='"+statusForm.getRemark()+"',Last_Approver='"+user.getEmployeeNo()+"'," +
			"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Conference' and Pending_Approver='"+user.getEmployeeNo()+"'";
		    int saveStatus=0;
		    saveStatus=ad.SqlExecuteUpdate(updateStatus);
			if(saveStatus>0){
				statusForm.setMessage2("Request Approved Successfully");
				
				String updateApprovers="update ConferenceRoom_Details  set Last_approver='"+user.getFullName()+"',Pending_approver='"+pendingApprs+"' "
						+ "where Reqest_No='"+reqId+"'";
				ad.SqlExecuteUpdate(updateApprovers);
				
				String getNextAppr="select Approver_Id from ConferanceRoom_Approvers where Priority='"+(apprverPriority+1)+"' and LocID='"+locId+"' and "
				+ "Floor='"+floor+"' and Room='"+room+"'";
				ResultSet rsNextAppr=ad.selectQuery(getNextAppr);
				while(rsNextAppr.next()){
					nextApprover=rsNextAppr.getInt("Approver_Id");
				}
				 ft = new SimpleDateFormat ("dd/MM/yyyy");
			     dateNow = ft.format(dNow);
				String saveAllReq="insert into All_Request(Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,"
			  + "Approved_Persons,Requester_Id,Comments,type) values ('"+reqId+"','Conference','"+requesterID+"','"+dateNow+"','Pending','',"
			  + "'"+nextApprover+"','','"+requesterID+"','','Conference')";
				ad.selectQuery(saveAllReq);
				
			}
			}
			}else{
				statusForm.setMessage("Conference Room Already Reserved.");
			}
			
			
			
			}catch(Exception e){
				e.printStackTrace();
			}
		}else{
			//reject
			
			String updateStatus="update All_Request set Req_Status='Rejected',Comments='"+statusForm.getRemark()+"',Last_Approver='"+user.getEmployeeNo()+"'," +
					"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',rejected_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Conference' and Pending_Approver='"+user.getEmployeeNo()+"'";
		    int saveStatus=0;
		    saveStatus=ad.SqlExecuteUpdate(updateStatus);
		    if(saveStatus>0){
				statusForm.setMessage2("Request Rejected Successfully");
				String requsertDetails="update ConferenceRoom_Details  set approval_status='Rejected',Last_approver='"+user.getFullName()+"',Pending_approver='',approved_date='"+dateNow+"' "
						+ "where Reqest_No='"+reqId+"'";
				ad.SqlExecuteUpdate(requsertDetails);
				ConferenceMail mail=new ConferenceMail();
				mail.sendMailToRequester(request, Integer.parseInt(reqId), user.getEmployeeNo(), requesterID,"Rejected");
		    }
			
		}
			   }else{
					statusForm.setMessage("Conference Room Already Self Cancelled.");
				}
			  	   
		if(reqStatus.equals("Completed")){
			String updateStatus="update All_Request set Req_Status='Completed'," +
					"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Conference' and Approved_Persons='"+user.getEmployeeNo()+"'";
		    int saveStatus=0;
		    saveStatus=ad.SqlExecuteUpdate(updateStatus);
		    if(saveStatus>0){
				statusForm.setMessage2("Request Completed Successfully");
				String requsertDetails="update ConferenceRoom_Details  set approval_status='Completed' where Reqest_No='"+reqId+"'";
				ad.SqlExecuteUpdate(requsertDetails);
		    }
		}
	    if(reqStatus.equals("Cancel")){
	    	String updateStatus="update All_Request set Req_Status='Cancelled'," +
					"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',rejected_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Conference' and Approved_Persons='"+user.getEmployeeNo()+"'";
	    	int   saveStatus=0;
		    saveStatus=ad.SqlExecuteUpdate(updateStatus);
		    if(saveStatus>0){
				statusForm.setMessage2("Request Cancelled Successfully");
				String requsertDetails="update ConferenceRoom_Details  set approval_status='Cancelled',Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',approved_date='"+dateNow+"' where Reqest_No='"+reqId+"'";
				ad.SqlExecuteUpdate(requsertDetails);
		    }   
		    
		}
		ad.connClose();
		
		/*if(filterBy.equalsIgnoreCase("Pending")){
			request.setAttribute("approveButton", "approveButton");
			request.setAttribute("rejectButton", "rejectButton");
			} 
			if(filterBy.equalsIgnoreCase("Rejected")){
			request.setAttribute("approveButton", "approveButton");
			}*/
		//Approvers Details
			 List confList= new LinkedList();
			 getRequestDetails="select conf.Requster_Id,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT,conf.Ext_No,conf.Email_ID,conf.IP_Phone,"
			+ "conf.IPAddress,loc.LOCATION_CODE,loc.LOCNAME,conf.Floor,conf.Conf_Room,conf.From_Date,conf.From_Time,conf.To_Date,conf.To_Time,"
			+ "conf.Purpose,conf.approval_status,conf.Loc_Id,conf.Req_From_Date,conf.Req_To_Date,conf.approved_date from ConferenceRoom_Details conf,emp_official_info emp,DEPARTMENT dept,DESIGNATION desg ,Location loc where "
			+ "conf.Reqest_No='"+statusForm.getRequestNo()+"' and conf.Requster_Id=emp.PERNR and emp.DPTID=dept.DPTID and emp.DSGID=desg.DSGID and loc.LOCID=conf.Loc_Id ";
			 rs=ad.selectQuery(getRequestDetails);
			try{
			while(rs.next()){
				ConferenceForm c=new ConferenceForm();
				locId=rs.getString("Loc_Id");
				floor=rs.getString("Floor");
				room=rs.getString("Conf_Room");
				requesterID=rs.getString("Requster_Id");
				c.setEmpId(rs.getString("Requster_Id"));
				c.setEmpName(rs.getString("EMP_FULLNAME"));
				c.setDept(rs.getString("DPTSTXT"));
				c.setDesg(rs.getString("DSGSTXT"));
				c.setExtno(rs.getString("Ext_No"));
				c.setEmpEmailID(rs.getString("Email_ID"));
				c.setIpPhoneno(rs.getString("IP_Phone"));
				c.setIPNumber(rs.getString("IPAddress"));
				c.setLocation(rs.getString("LOCATION_CODE")+"-"+rs.getString("LOCNAME"));
				c.setFloor(rs.getString("Floor"));
				c.setRoomName(rs.getString("Conf_Room"));
				c.setFromDate(EMicroUtils.display(rs.getDate("From_Date")));
				c.setFromTime(rs.getString("From_Time"));
				c.setToDate(EMicroUtils.display(rs.getDate("To_Date")));
				c.setToTime(rs.getString("To_Time"));
				c.setPurpose(rs.getString("Purpose"));
				c.setStatus(rs.getString("approval_status"));
				String approvalStatus=rs.getString("approval_status");
				c.setApprovedDate("");
				if(!approvalStatus.equals("Pending"))
					c.setApprovedDate(rs.getString("approved_date"));
				if(approvalStatus.equals("Reserved"))
				{
				
				}
				reqFromDate=rs.getString("Req_From_Date");
				reqToDate=rs.getString("Req_To_Date");
				
				confList.add(c);
			}
			}catch(Exception e){
				e.printStackTrace();
			}
			request.setAttribute("confList", confList);	
			List appList=new LinkedList();
			String getApproverDetails="select appr.Approver_Id,emp.EMP_FULLNAME,dept.DPTSTXT,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
					+ "all_r.Comments,all_r.Approved_Persons,all_r.Pending_Approver from ConferenceRoom_Details conf,ConferanceRoom_Approvers appr ,"
					+ "All_Request all_r,emp_official_info emp,DEPARTMENT dept,DESIGNATION desg ,Location loc where conf.Reqest_No="+reqId+" and conf.Loc_Id=appr.LocID "
					+ "and conf.Floor=appr.Floor and conf.Conf_Room=appr.Room and all_r.Req_Id=conf.Reqest_No and all_r.Req_Type='Conference' and  "
					+ "(appr.Approver_Id=all_r.Last_Approver or appr.Approver_Id=all_r.Pending_Approver) and  (all_r.Pending_Approver=emp.PERNR or "
					+ "all_r.Last_Approver =emp.PERNR) and emp.DPTID=dept.DPTID and emp.DSGID=desg.DSGID and loc.LOCID=conf.Loc_Id ";
		ResultSet rsAppr=ad.selectQuery(getApproverDetails);
		try{
			while(rsAppr.next()){
			ApprovalsForm appr=new ApprovalsForm();
			appr.setApprover(rsAppr.getString("EMP_FULLNAME"));
			appr.setDesignation(rsAppr.getString("DPTSTXT"));
			appr.setApproveStatus(rsAppr.getString("Req_Status"));
			String approvaStatus=rsAppr.getString("Req_Status");
			if(approvaStatus.equals("Pending")){
				appr.setApproveDate("");
				appr.setComments("");
			}
			if(approvaStatus.equals("Approved")||approvaStatus.equals("Completed")){
				appr.setApproveDate(rsAppr.getString("approved_date"));
				appr.setComments(rsAppr.getString("Comments"));
			}
			if(approvaStatus.equals("Rejected")||approvaStatus.equals("Cancelled")){
				appr.setApproveDate(rsAppr.getString("rejected_date"));
				appr.setComments(rsAppr.getString("Comments"));
			}
			appList.add(appr);
			}
			request.setAttribute("appList",appList);
			ad.connClose();
		}catch(Exception e){
			e.printStackTrace();
		}
		return mapping.findForward("Conference");
	}
	public ActionForward vcSelectedRequestToApprove(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
	{	ApprovalsForm pendAppForm = (ApprovalsForm) form;
	String reqId = request.getParameter("reqId");
	String reqType = pendAppForm.getReqRequstType();
	pendAppForm.setRequestType(reqType);
	HttpSession session = request.getSession();
	UserInfo user = (UserInfo) session.getAttribute("user");
	if (user == null) {
		request.setAttribute("message",
				"Session Expried! Try to Login again!");
		return mapping.findForward("displayiFrameSession");
	}
	String scount = Integer.toString(pendAppForm.getStartRecord());

	int totalRecords = pendAppForm.getTotalRecords();// 21
	int startRecord = pendAppForm.getStartRecord();// 11
	int endRecord = pendAppForm.getEndRecord();
	String filterBy = pendAppForm.getSelectedFilter();

	pendAppForm.setTotalRecords(totalRecords);
	pendAppForm.setStartRecord(startRecord);
	pendAppForm.setEndRecord(endRecord);
	pendAppForm.setSelectedFilter(filterBy);
	if (reqId == null && reqType == null) {
		reqId = pendAppForm.getRequestNo();
		reqType = pendAppForm.getRequestType();
	}
	int startCount = 0;
	int endCount = 0;
	if (scount == null) {
		request.setAttribute("noRecords", "noRecords");
		pendAppForm.setAppMessage("Request Approved Successfully!");
	}
	if (scount != null) {
		startCount = Integer.parseInt(scount);
		endCount = endRecord;
		pendAppForm.setStartRecord(startCount);
		pendAppForm.setEndRecord(endCount);
	}
	setAllCount(pendAppForm, pendAppForm.getTotalAppCount(), startCount,
			endCount);
	setFilterType(reqType, pendAppForm);
	EssDao ad = new EssDao();
	int requesterNo = Integer.parseInt(request.getParameter("reqId"));
	String appstatus="";
	List confList = new LinkedList();
	String getRequestDetails = "select conf.Requster_Id,conf.foruse,emp.EMP_FULLNAME,emp1.EMP_FULLNAME as forusage,dept.DPTSTXT,"
			+ "desg.DSGSTXT,conf.Ext_No,conf.Email_ID,conf.IP_Phone,conf.IPAddress,loc.LOCATION_CODE,loc.LOCNAME,conf.Floor,"
			+ "conf.Conf_Room,conf.From_Date,conf.From_Time,conf.To_Date,conf.To_Time,(select LOCATION_CODE+'-'+LOCNAME from Location where LOCID = conf.vc_from) as vc_from,(select LOCATION_CODE+'-'+LOCNAME from Location where LOCID = conf.vc_to) as vc_to,conf.Purpose,"
			+ "conf.approval_status,conf.approved_date from VCRoom_Details conf,emp_official_info emp,emp_official_info emp1,"
			+ "DEPARTMENT dept,DESIGNATION desg ,Location loc where conf.Reqest_No='"
			+ requesterNo
			+ "' and conf.Requster_Id=emp.PERNR and"
			+ " emp.DPTID=dept.DPTID and emp.DSGID=desg.DSGID and loc.LOCID=conf.Loc_Id  and emp1.PERNR=conf.foruse";
	ResultSet rs = ad.selectQuery(getRequestDetails);
	try {
		while (rs.next()) {
			VCForm c = new VCForm();
			pendAppForm.setRequestNo(Integer.toString(requesterNo));
			c.setEmpId(rs.getString("Requster_Id"));
			c.setEmpName(rs.getString("EMP_FULLNAME"));
			c.setUsage(rs.getString("foruse") + "-"
					+ rs.getString("forusage"));
			c.setDept(rs.getString("DPTSTXT"));
			c.setDesg(rs.getString("DSGSTXT"));
			c.setExtno(rs.getString("Ext_No"));
			c.setEmpEmailID(rs.getString("Email_ID"));
			c.setIpPhoneno(rs.getString("IP_Phone"));
			c.setIPNumber(rs.getString("IPAddress"));
			c.setLocation(rs.getString("LOCATION_CODE") + "-"
					+ rs.getString("LOCNAME"));
			c.setFloor(rs.getString("Floor"));
			c.setRoomName(rs.getString("Conf_Room"));
			c.setFromDate(EMicroUtils.display(rs.getDate("From_Date")));
			c.setFromTime(rs.getString("From_Time"));
			c.setToDate(EMicroUtils.display(rs.getDate("To_Date")));
			c.setToTime(rs.getString("To_Time"));
			c.setVcFrom(rs.getString("vc_from"));
			c.setVcTo(rs.getString("vc_to"));
			c.setPurpose(rs.getString("Purpose"));
			c.setStatus(rs.getString("approval_status"));
			appstatus=rs.getString("approval_status");
			String approvalStatus = rs.getString("approval_status");
			if (approvalStatus.equals("Reserved")) {
				request.setAttribute("completedButton", "completedButton");
				request.setAttribute("Cancel", "Cancel");
			}
			c.setApprovedDate("");
			if (!approvalStatus.equals("Pending"))
				c.setApprovedDate(rs.getString("approved_date"));
			confList.add(c);
		}
		request.setAttribute("confList", confList);
	} catch (Exception e) {
		e.printStackTrace();
	}
	if (filterBy.equalsIgnoreCase("Pending")) {
		request.setAttribute("CheckAvailButton", "CheckAvailButton");
		request.setAttribute("approveButton", "approveButton");
		request.setAttribute("rejectButton", "rejectButton");
	}
	if (filterBy.equalsIgnoreCase("Approved")) {

	}
	if (filterBy.equalsIgnoreCase("Rejected")) {
		// request.setAttribute("approveButton", "approveButton");
	}
	// Approvers Details
	List appList = new LinkedList();
	
	String getApproverDetails="";
	if(appstatus.equalsIgnoreCase("Pending"))
	{
	 getApproverDetails = "select appr.Approver_Id,emp.EMP_FULLNAME,dept.DPTSTXT,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
			+ "all_r.Comments,all_r.Approved_Persons,all_r.Pending_Approver from VCRoom_Details conf,VCRoom_Approvers appr ,"
			+ "All_Request all_r,emp_official_info emp,DEPARTMENT dept,DESIGNATION desg ,Location loc where conf.Reqest_No="
			+ reqId
			+ " and conf.Loc_Id=appr.LocID "
			+ "and conf.Floor=appr.Floor and conf.Conf_Room=appr.Room and all_r.Req_Id=conf.Reqest_No and all_r.Req_Type='VC Booking' and  "
			+ "(appr.Approver_Id=all_r.Last_Approver or appr.Approver_Id=all_r.Pending_Approver) and  (all_r.Pending_Approver=emp.PERNR or "
			+ "all_r.Last_Approver =emp.PERNR) and emp.DPTID=dept.DPTID and emp.DSGID=desg.DSGID and loc.LOCID=conf.Loc_Id "
			+ "union "
			+ "select appr.parallel_Approver_Id,emp.EMP_FULLNAME,dept.DPTSTXT,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
			+ "all_r.Comments,all_r.Approved_Persons,all_r.Pending_Approver from VCRoom_Details conf,VCRoom_Approvers appr ,"
			+ "All_Request all_r,emp_official_info emp,DEPARTMENT dept,DESIGNATION desg ,Location loc where conf.Reqest_No="
			+ reqId
			+ " and conf.Loc_Id=appr.LocID "
			+ "and conf.Floor=appr.Floor and conf.Conf_Room=appr.Room and all_r.Req_Id=conf.Reqest_No and all_r.Req_Type='VC Booking' and  "
			+ "(appr.parallel_Approver_Id=all_r.Last_Approver or appr.parallel_Approver_Id=all_r.Pending_Approver) and  (all_r.Pending_Approver=emp.PERNR or "
			+ "all_r.Last_Approver =emp.PERNR) and emp.DPTID=dept.DPTID and emp.DSGID=desg.DSGID and loc.LOCID=conf.Loc_Id " 
			+ "";
	}
	else
	{
		 getApproverDetails = "select appr.Approver_Id,emp.EMP_FULLNAME,dept.DPTSTXT,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
					+ "all_r.Comments,all_r.Approved_Persons,all_r.Pending_Approver from VCRoom_Details conf,VCRoom_Approvers appr ,"
					+ "All_Request all_r,emp_official_info emp,DEPARTMENT dept,DESIGNATION desg ,Location loc where conf.Reqest_No="
					+ reqId
					+ " and conf.Loc_Id=appr.LocID "
					+ "and conf.Floor=appr.Floor and conf.Conf_Room=appr.Room and all_r.Req_Id=conf.Reqest_No and all_r.Req_Type='VC Booking' and  "
					+ "(appr.Approver_Id=all_r.Last_Approver or appr.Approver_Id=all_r.Pending_Approver) and  (all_r.Actual_Approver=emp.PERNR or "
					+ "all_r.Actual_Approver =emp.PERNR) and emp.DPTID=dept.DPTID and emp.DSGID=desg.DSGID and loc.LOCID=conf.Loc_Id ";
	}
	
	ResultSet rsAppr = ad.selectQuery(getApproverDetails);
	try {
		while (rsAppr.next()) {
			ApprovalsForm appr = new ApprovalsForm();
			appr.setApprover(rsAppr.getString("EMP_FULLNAME"));
			appr.setDesignation(rsAppr.getString("DPTSTXT"));
			appr.setApproveStatus(rsAppr.getString("Req_Status"));
			String approvaStatus = rsAppr.getString("Req_Status");
			if (approvaStatus.equals("Pending")) {
				appr.setApproveDate("");
				appr.setComments("");
			}
			if (approvaStatus.equals("Approved")
					|| approvaStatus.equals("Completed")) {
				appr.setApproveDate(rsAppr.getString("approved_date"));
				appr.setComments(rsAppr.getString("Comments"));
			}
			if (approvaStatus.equals("Rejected")
					|| approvaStatus.equals("Cancelled")) {
				appr.setApproveDate(rsAppr.getString("rejected_date"));
				appr.setComments(rsAppr.getString("Comments"));
			}
			appList.add(appr);
		}
		request.setAttribute("appList", appList);
		ad.connClose();
	} catch (Exception e) {
		e.printStackTrace();
	}
	return mapping.findForward("VCRoom");
	}
	public ActionForward confSelectedRequestToApprove(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
	{
		ApprovalsForm pendAppForm=(ApprovalsForm) form;
		String reqId = request.getParameter("reqId");
		String reqType = pendAppForm.getReqRequstType();
		pendAppForm.setRequestType(reqType);
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		if(user==null){
			request.setAttribute("message","Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		String scount = Integer.toString(pendAppForm.getStartRecord());
		
		int totalRecords=pendAppForm.getTotalRecords();//21
		int startRecord=pendAppForm.getStartRecord();//11
		int endRecord=pendAppForm.getEndRecord();	
		String filterBy=pendAppForm.getSelectedFilter();
		
		pendAppForm.setTotalRecords(totalRecords);
		pendAppForm.setStartRecord(startRecord);
		pendAppForm.setEndRecord(endRecord);
	pendAppForm.setSelectedFilter(filterBy);
		if(reqId==null && reqType==null){
			reqId=pendAppForm.getRequestNo();
			reqType=pendAppForm.getRequestType();
		}
		int startCount = 0;
		int endCount = 0;
		if(scount == null){
			request.setAttribute("noRecords","noRecords");
			pendAppForm.setAppMessage("Request Approved Successfully!");
		}
		if(scount != null){
			startCount=Integer.parseInt(scount);
			endCount=endRecord;
			pendAppForm.setStartRecord(startCount);
			pendAppForm.setEndRecord(endCount);
		}
		setAllCount(pendAppForm, pendAppForm.getTotalAppCount(), startCount, endCount);
		setFilterType(reqType, pendAppForm);
		EssDao ad=new EssDao();
		int requesterNo=Integer.parseInt(request.getParameter("reqId"));
		List confList= new LinkedList();
		String getRequestDetails="select conf.Requster_Id,emp.EMP_FULLNAME,dept.DPTSTXT,desg.DSGSTXT,conf.Ext_No,conf.Email_ID,conf.IP_Phone,"
		+ "conf.IPAddress,loc.LOCATION_CODE,loc.LOCNAME,conf.Floor,conf.Conf_Room,conf.From_Date,conf.From_Time,conf.To_Date,conf.To_Time,"
		+ "conf.Purpose,conf.approval_status,conf.approved_date from ConferenceRoom_Details conf,emp_official_info emp,DEPARTMENT dept,DESIGNATION desg ,Location loc where "
		+ "conf.Reqest_No='"+requesterNo+"' and conf.Requster_Id=emp.PERNR and emp.DPTID=dept.DPTID and emp.DSGID=desg.DSGID and loc.LOCID=conf.Loc_Id ";
		ResultSet rs=ad.selectQuery(getRequestDetails);
		try{
		while(rs.next()){
			ConferenceForm c=new ConferenceForm();
			pendAppForm.setRequestNo(Integer.toString(requesterNo));
			c.setEmpId(rs.getString("Requster_Id"));
			c.setEmpName(rs.getString("EMP_FULLNAME"));
			c.setDept(rs.getString("DPTSTXT"));
			c.setDesg(rs.getString("DSGSTXT"));
			c.setExtno(rs.getString("Ext_No"));
			c.setEmpEmailID(rs.getString("Email_ID"));
			c.setIpPhoneno(rs.getString("IP_Phone"));
			c.setIPNumber(rs.getString("IPAddress"));
			c.setLocation(rs.getString("LOCATION_CODE")+"-"+rs.getString("LOCNAME"));
			c.setFloor(rs.getString("Floor"));
			c.setRoomName(rs.getString("Conf_Room"));
			c.setFromDate(EMicroUtils.display(rs.getDate("From_Date")));
			c.setFromTime(rs.getString("From_Time"));
			c.setToDate(EMicroUtils.display(rs.getDate("To_Date")));
			c.setToTime(rs.getString("To_Time"));
			c.setPurpose(rs.getString("Purpose"));
			c.setStatus(rs.getString("approval_status"));
			String approvalStatus=rs.getString("approval_status");
			if(approvalStatus.equals("Reserved"))
			{
				request.setAttribute("completedButton", "completedButton");
				request.setAttribute("Cancel", "Cancel");
			}
			c.setApprovedDate("");
			if(!approvalStatus.equals("Pending"))
				c.setApprovedDate(rs.getString("approved_date"));
			confList.add(c);
		}
		request.setAttribute("confList", confList);
		}catch(Exception e){
			e.printStackTrace();
		}
		if(filterBy.equalsIgnoreCase("Pending")){
			request.setAttribute("CheckAvailButton", "CheckAvailButton");
			request.setAttribute("approveButton", "approveButton");
			request.setAttribute("rejectButton", "rejectButton");
			}
		if(filterBy.equalsIgnoreCase("Approved")){
			
			
			} 
			if(filterBy.equalsIgnoreCase("Rejected")){
			//request.setAttribute("approveButton", "approveButton");
			}
		//Approvers Details
			List appList=new LinkedList();
			String getApproverDetails="select appr.Approver_Id,emp.EMP_FULLNAME,dept.DPTSTXT,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
					+ "all_r.Comments,all_r.Approved_Persons,all_r.Pending_Approver from ConferenceRoom_Details conf,ConferanceRoom_Approvers appr ,"
					+ "All_Request all_r,emp_official_info emp,DEPARTMENT dept,DESIGNATION desg ,Location loc where conf.Reqest_No="+reqId+" and conf.Loc_Id=appr.LocID "
					+ "and conf.Floor=appr.Floor and conf.Conf_Room=appr.Room and all_r.Req_Id=conf.Reqest_No and all_r.Req_Type='Conference' and  "
					+ "(appr.Approver_Id=all_r.Last_Approver or appr.Approver_Id=all_r.Pending_Approver) and  (all_r.Pending_Approver=emp.PERNR or "
					+ "all_r.Last_Approver =emp.PERNR) and emp.DPTID=dept.DPTID and emp.DSGID=desg.DSGID and loc.LOCID=conf.Loc_Id ";
		ResultSet rsAppr=ad.selectQuery(getApproverDetails);
		try{
			while(rsAppr.next()){
			ApprovalsForm appr=new ApprovalsForm();
			appr.setApprover(rsAppr.getString("EMP_FULLNAME"));
			appr.setDesignation(rsAppr.getString("DPTSTXT"));
			appr.setApproveStatus(rsAppr.getString("Req_Status"));
			String approvaStatus=rsAppr.getString("Req_Status");
			if(approvaStatus.equals("Pending")){
				appr.setApproveDate("");
				appr.setComments("");
			}
			if(approvaStatus.equals("Approved")||approvaStatus.equals("Completed")){
				appr.setApproveDate(rsAppr.getString("approved_date"));
				appr.setComments(rsAppr.getString("Comments"));
			}
			if(approvaStatus.equals("Rejected")||approvaStatus.equals("Cancelled")){
				appr.setApproveDate(rsAppr.getString("rejected_date"));
				appr.setComments(rsAppr.getString("Comments"));
			}
			appList.add(appr);
			}
			request.setAttribute("appList",appList);
			ad.connClose();
		}catch(Exception e){
			e.printStackTrace();
		}
		return mapping.findForward("Conference");
	}
	public ActionForward ITSelectedRequestToApprove(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
	{
		String ITstatus="";
		String chkdate="";
		String chkdate1="";
		String 	forwardType="";
		ApprovalsForm pendAppForm=(ApprovalsForm) form;
		String reqId = request.getParameter("reqId");
		pendAppForm.setRequestNo(reqId);
		String reqType = pendAppForm.getReqRequstType();
		pendAppForm.setRequestType(reqType);
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		if(user==null){
			request.setAttribute("message","Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		String scount = Integer.toString(pendAppForm.getStartRecord());
		
		int totalRecords=pendAppForm.getTotalRecords();//21
		int startRecord=pendAppForm.getStartRecord();//11
		int endRecord=pendAppForm.getEndRecord();	
		String filterBy=pendAppForm.getSelectedFilter();
		
		pendAppForm.setTotalRecords(totalRecords);
		pendAppForm.setStartRecord(startRecord);
		pendAppForm.setEndRecord(endRecord);
	    pendAppForm.setSelectedFilter(filterBy);
		if(reqId==null && reqType==null){
			reqId=pendAppForm.getRequestNo();
			reqType=pendAppForm.getRequestType();
		}
		int startCount = 0;
		int endCount = 0;
		if(scount == null){
			request.setAttribute("noRecords","noRecords");
			pendAppForm.setAppMessage("Request Approved Successfully!");
		}
		if(scount != null){
			startCount=Integer.parseInt(scount);
			endCount=endRecord;
			pendAppForm.setStartRecord(startCount);
			pendAppForm.setEndRecord(endCount);
		}
		setAllCount(pendAppForm, pendAppForm.getTotalAppCount(), startCount, endCount);
		request.setAttribute("header", reqType+"For Approve");
		String tName="leave";
		setFilterType(reqType, pendAppForm);
		String uName = user.getUserName();
		UserDao adMPM=new UserDao();
		EssDao ad=new EssDao();
		
		if(reqType.equalsIgnoreCase("IT Request"))
		{
			  
			
         	String ITType="";
			String requesterdetails="Select CONVERT(varchar(10),Req_date,103)+' '+ CONVERT(varchar(5),Req_date,108) as Req_date,* from IT_HELPDESK where Req_No='"+reqId+"'";
			ResultSet rsLeave=ad.selectQuery(requesterdetails);
			String empID="";
			String submit_date="";
			try{
			while(rsLeave.next())
			{
				empID=rsLeave.getString("Emp_No");
				submit_date=rsLeave.getString("Req_date");			
				ITType=rsLeave.getString("Req_type");
				
			}
			pendAppForm.setRequestDate(submit_date);
			int approverPriority=0;
			String getApprPriority="select Priority from IT_Approvers where Req_Type='"+ITType+"' and (Approver_ID='"+user.getEmployeeNo()+"' or Parallel_Approver1='"+user.getEmployeeNo()+"' or  Parallel_Approver2='"+user.getEmployeeNo()+"') and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) ";
			ResultSet rsApprPriority=ad.selectQuery(getApprPriority);
			while(rsApprPriority.next())
			{
				approverPriority=rsApprPriority.getInt("Priority");
			}
			
			//check ITHOD status
			
			String ithodstus="select IT_hod_status from IT_HELPDESK where Req_No='"+reqId+"' ";
			ResultSet result=ad.selectQuery(ithodstus);
			while(result.next())
			{
				ITstatus=result.getString("IT_hod_status");
			}
			
			
			if(ITType.equalsIgnoreCase("New IT Asset Request"))
			{
				LinkedList newassetcreation=new LinkedList();
				String empno=user.getEmployeeNo();
				
				String data="select emp.PERNR,emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE " +
						"from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"+empID+"' and " +
						"dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";	
				ResultSet rs= ad.selectQuery(data);
				try {
					while(rs.next())
					{
						
					
						pendAppForm.setRequestername(rs.getString("EMP_FULLNAME"));
						pendAppForm.setRequesterdepartment(rs.getString("DPTSTXT"));
						pendAppForm.setRequesterdesignation(rs.getString("DSGSTXT"));
						pendAppForm.setExtno(rs.getString("TEL_EXTENS"));
						pendAppForm.setIpPhoneno(rs.getString("IP_PHONE"));
						pendAppForm.setLocation(rs.getString("LOCATION_CODE"));
						pendAppForm.setEmpno(rs.getString("PERNR"));
						
					
						
					}
				} catch (SQLException e) {
				  e.printStackTrace();
				}
				
				String requester = "";
				String data1=" select * from IT_HELPDESK where Req_No="+reqId+"";	
		ResultSet rs1= ad.selectQuery(data1);
		try {
			while(rs1.next())
			{
				pendAppForm.setAssetvalue(rs1.getString("Asset_Details"));
				pendAppForm.setAdloginname(rs1.getString("ADLoginName"));
				pendAppForm.setServer(rs1.getString("Server_Address"));
				pendAppForm.setReqdfolderacces(rs1.getString("Req_Folder_access"));
				pendAppForm.setReason(rs1.getString("Reason"));
				pendAppForm.setHostname(rs1.getString("HostName"));
				pendAppForm.setIPNumber(rs1.getString("IPAddress"));
				pendAppForm.setReqPriority(rs1.getString("Req_Priority"));
				requester = rs1.getString("Emp_No");
				pendAppForm.setAssetcategory(rs1.getString("Category"));
				pendAppForm.setReqbydate(rs1.getString("reqbydate"));
				pendAppForm.setSuggestmodelname(rs1.getString("suggmodel"));
				
				String gxp=rs1.getString("gxp");
				
			
				if(gxp.equalsIgnoreCase("Yes"))
				{
					pendAppForm.setGxpyes("true");
				}
				
				if(gxp.equalsIgnoreCase("No"))
				{
					pendAppForm.setGxpno("true");
				}
				
	
				
				
				
				String lan=rs1.getString("lan");
			
				
						if(lan.equalsIgnoreCase("Yes"))
						{
							pendAppForm.setLanyes("true");
						}
						
						if(lan.equalsIgnoreCase("No"))
						{
							pendAppForm.setLanno("true");
						}
				

				
				pendAppForm.setTypeofprinter(rs1.getString("typeofprinter"));
				pendAppForm.setUsers(rs1.getString("noofusers"));
				pendAppForm.setPrintvolpermonth(rs1.getString("printvolpm"));
				pendAppForm.setSuggestmodelno(rs1.getString("suggmodelno"));
				pendAppForm.setApprxvalue(rs1.getString("Apprxvalue"));
		
				requester = rs1.getString("Emp_No");
				
				pendAppForm.setAnysplreq(rs1.getString("anysplreq"));
				pendAppForm.setPurpose(rs1.getString("purpose"));
		
				
				String rmk=rs1.getString("Remarks");
				if(rmk!=null)
				{
					pendAppForm.setRemarks(rs1.getString("Remarks"));
					request.setAttribute("Remark", "Remark");
				}
			}
		} catch (SQLException e) {
			  e.printStackTrace();
			}
		
					
		newassetcreation.add(pendAppForm);
		request.setAttribute("newassetcreation", newassetcreation);	
		
		//Approver Details
		int  checkStatus=0;
		LinkedList listApprers=new LinkedList();
		int jk=0;
		//HOD

		int hodpresent=0;
		int hodpresentinIt=0;
		String HODPresentId="";
		String HODPresentname="";
		String itengineerid="";
		String itengineername="";
		String HOD="";
		String	pendingApprovers="";
		
		 //chk if he has Hod
		 String chkhod="select count(*) from ESS_Approvers where employeeNumber='"+empID+"'  ";
		 ResultSet rs10= ad.selectQuery(chkhod);
		 try {
			while(rs10.next())
			 {
				 hodpresent=rs10.getInt(1);
			 }
		} catch (SQLException e1) {
			
			e1.printStackTrace();
		}
		
		//get hod details
		
	
		if(hodpresent>0){
		String gethod="select ess.ApproverId,emp.EMP_FULLNAME from ESS_Approvers  as ess,emp_official_info as emp  " +
				" where employeeNumber='"+empID+"'  and essType='Leave' and emp.PERNR=ess.ApproverId ";
		 ResultSet rs2= ad.selectQuery(gethod);
		 
		 try {
			if(rs2.next())
			 {
				HODPresentId=rs2.getString("ApproverId");
				HODPresentname=rs2.getString("EMP_FULLNAME");
			 }
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		}
		
		//chk if he is present in It approver
		 String chkhodinit="select count(*) from IT_Approvers where Approver_ID='"+HODPresentId+"' and Req_Type = '"+ITType+"'  and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))";
		 ResultSet rs11= ad.selectQuery(chkhodinit);
		 try {
			while(rs11.next())
			 {
				hodpresentinIt=rs11.getInt(1);
			 }
		} catch (SQLException e1) {
			
			e1.printStackTrace();
		}
		 
		// Plant head
					String plantheadid = "";
					String plantheadname = "";
					String plantheaddep = "";
					String plantheaddesg = "";
					String a = "";
					String userx = "select loc.LOCID from Location as loc,emp_official_info as emp where loc.LOCATION_CODE=emp.LOCID and emp.PERNR='"
					+ requester + "' ";
					ResultSet userrs = ad.selectQuery(userx);
					try {
						while (userrs.next()) {
							a = userrs.getString("LOCID");
						}
					} catch (SQLException e2) {
						// TODO Auto-generated catch block
						e2.printStackTrace();
					}
					if (!a.equalsIgnoreCase("16")) {
						String plant = "select pl.Plant,pl.PERNR,emp.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from PLANT_HEAD pl,emp_official_info emp,DEPARTMENT dep,DESIGNATION desg where Plant=(select LOCATION_CODE from Location where LOCID='"
								+ a
								+ "') and emp.PERNR=pl.PERNR and dep.DPTID=emp.DPTID and desg.DSGID=emp.DSGID";
						ResultSet pl = ad.selectQuery(plant);
						try {
							while (pl.next()) {
								plantheadid = pl.getString("pernr");
								plantheadname = pl.getString("EMP_FULLNAME");
								plantheaddep = pl.getString("DPTSTXT");
								plantheaddesg = pl.getString("DSGSTXT");
							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					if (plantheadid.equalsIgnoreCase("")) {

						if (hodpresent > 0 && hodpresentinIt == 0) {

							try {

								checkStatus = 1;
								ApprovalsForm apprvershod = new ApprovalsForm();
								apprvershod.setPriority("1");

								apprvershod.setEmployeeCode(HODPresentId);
								apprvershod.setEmployeeName(HODPresentname);

								String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
										+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
										+ reqId
										+ "' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
										+ empID
										+ "')) AND "
										+ "all_r.Last_Approver='"
										+ HODPresentId
										+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
										+ ITType
										+ "' and emp.PERNR=all_r.Last_Approver"
										+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

								ResultSet rsAppInfo = ad
										.selectQuery(recordStatus);
								if (rsAppInfo.next()) {
									apprvershod.setApproveStatus(rsAppInfo
											.getString("Req_Status"));
									String approveStatus = rsAppInfo
											.getString("Req_Status");
									if (approveStatus
											.equalsIgnoreCase("Approved")
											|| approveStatus
													.equalsIgnoreCase("Completed")) {
										apprvershod.setDate(rsAppInfo
												.getString("approved_date"));
									} else {
										apprvershod.setDate(rsAppInfo
												.getString("rejected_date"));
									}
									String comments = "";
									comments = rsAppInfo.getString("Comments");
									if (comments == "null") {
										apprvershod.setComments("");
									} else {
										apprvershod.setComments(rsAppInfo
												.getString("Comments"));
									}
								}

								listApprers.add(apprvershod);
								jk = 1;
							}

							catch (SQLException e1) {

								e1.printStackTrace();
							}

						}
					}

					if (!plantheadid.equalsIgnoreCase("")) {

						try {

							checkStatus = 1;
							ApprovalsForm apprvershod = new ApprovalsForm();
							apprvershod.setPriority("1");

							apprvershod.setEmployeeCode(plantheadid);
							apprvershod.setEmployeeName(plantheadname);

							String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
									+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
									+ reqId
									+ "' and it.LOCATION_ID='"
									+ user.getPlantId()
									+ "' AND "
									+ "all_r.Last_Approver='"
									+ plantheadid
									+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
									+ ITType
									+ "' and emp.PERNR=all_r.Last_Approver"
									+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

							ResultSet rsAppInfo = ad.selectQuery(recordStatus);
							if (rsAppInfo.next()) {
								apprvershod.setApproveStatus(rsAppInfo
										.getString("Req_Status"));
								String approveStatus = rsAppInfo
										.getString("Req_Status");
								if (approveStatus.equalsIgnoreCase("Approved")
										|| approveStatus
												.equalsIgnoreCase("Created")) {
									apprvershod.setDate(rsAppInfo
											.getString("approved_date"));
								} else {
									apprvershod.setDate(rsAppInfo
											.getString("rejected_date"));
								}
								String comments = "";
								comments = rsAppInfo.getString("Comments");
								if (comments == "null") {
									apprvershod.setComments("");
								} else {
									apprvershod.setComments(rsAppInfo
											.getString("Comments"));
								}
							}

							listApprers.add(apprvershod);
							jk = 1;
						}

						catch (SQLException e1) {

							e1.printStackTrace();
						}

					}

					String getApprDetails = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
							+ empID
							+ "'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"
							+ ITType
							+ "' group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
					ResultSet rsApprDetails = ad.selectQuery(getApprDetails);
					try {
						while (rsApprDetails.next()) {

							checkStatus = 1;
							ApprovalsForm apprvers = new ApprovalsForm();
							apprvers.setPriority(rsApprDetails
									.getString("Priority"));

							apprvers.setPriority(rsApprDetails
									.getString("Priority"));
							if (jk == 1) {

								apprvers.setPriority(Integer
										.toString(listApprers.size() + 1));
							}
							apprvers.setEmployeeCode(rsApprDetails
									.getString("Approver_Id"));
							String empCode = rsApprDetails
									.getString("Approver_Id");

							String recordStatus = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
									+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
									+ reqId
									+ "' "
									+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
									+ empID
									+ "')) AND all_r.Last_Approver='"
									+ empCode
									+ "' and it.Approver_Id=all_r.Last_Approver  and all_r.Req_Type='IT Request' and "
									+ "it.Req_Type='"
									+ ITType
									+ "' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
									+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";

							ResultSet rsAppInfo = ad.selectQuery(recordStatus);
							if (rsAppInfo.next()) {

								if (rsAppInfo.getInt("Priority") == 1) {
									chkdate = rsAppInfo
											.getString("approved_date");
									chkdate1 = rsAppInfo
											.getString("rejected_date");
								}
								apprvers.setApproveStatus(rsAppInfo
										.getString("Req_Status"));
								String approveStatus = rsAppInfo
										.getString("Req_Status");
								if (approveStatus.equalsIgnoreCase("Approved")
										|| approveStatus
												.equalsIgnoreCase("Completed")) {
									apprvers.setDate(rsAppInfo
											.getString("approved_date"));
								} else {
									apprvers.setDate(rsAppInfo
											.getString("rejected_date"));
								}
								String comments = "";
								comments = rsAppInfo.getString("Comments");
								if (comments == "null") {
									apprvers.setComments("");
								} else {
									apprvers.setComments(rsAppInfo
											.getString("Comments"));
								}
							}
							apprvers.setEmployeeName(rsApprDetails
									.getString("EMP_FULLNAME"));

							listApprers.add(apprvers);

						}
				//IT ENGINEER DETAIlS
				
				
				String getApprDetails1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' and it.Priority=1    group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
				ResultSet rsApprDetails1=ad.selectQuery(getApprDetails1);
				
					while(rsApprDetails1.next())
					{
						checkStatus=1;
						ApprovalsForm apprvers=new ApprovalsForm();
						apprvers.setPriority(Integer.toString(listApprers.size()+1));
						
						apprvers.setEmployeeCode(rsApprDetails1.getString("Approver_Id"));
						String empCode1=rsApprDetails1.getString("Approver_Id");
						
						String recordStatus1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
								+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
								+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode1+"' and it.Approver_Id=all_r.Last_Approver and all_r.Req_Type='IT Request' and "
								+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
								+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
						
						ResultSet rsAppInfo1=ad.selectQuery(recordStatus1);
						if(rsAppInfo1.next())
						{
							
							String approveStatus=rsAppInfo1.getString("Req_Status");
							if(approveStatus.equalsIgnoreCase("Approved"))
							{
								recordStatus1=recordStatus1+" order by all_r.approved_date desc ";
								ResultSet rsAppInfo2=ad.selectQuery(recordStatus1);
								if(rsAppInfo2.next())
								{
									if(!chkdate.equalsIgnoreCase(rsAppInfo2.getString("approved_date")))
									{
										apprvers.setApproveStatus("Closed");
									apprvers.setDate(rsAppInfo2.getString("approved_date"));
									
								
								
								String comments="";
								comments=rsAppInfo2.getString("Comments");
								if(comments=="null" )
								{
									apprvers.setComments("");
								}else{
									apprvers.setComments(rsAppInfo2.getString("Comments"));
								}
								}
								}
							}else{
								
								recordStatus1=recordStatus1+" order by all_r.rejected_date desc ";
								ResultSet rsAppInfo3=ad.selectQuery(recordStatus1);
								if(rsAppInfo3.next())
								{
									if(!chkdate1.equalsIgnoreCase(rsAppInfo3.getString("rejected_date")))
									{
									apprvers.setDate(rsAppInfo3.getString("rejected_date"));
									}
								
								String comments="";
								comments=rsAppInfo3.getString("Comments");
								if(comments=="null" )
								{
									apprvers.setComments("");
								}else{
									apprvers.setComments(rsAppInfo3.getString("Comments"));
								}
								}
							}
							
						}
						apprvers.setEmployeeName(rsApprDetails1.getString("EMP_FULLNAME"));
				
					listApprers.add(apprvers);
					}
				
				request.setAttribute("approverDetails", listApprers);
			
		} 
		
			catch (SQLException e) {
			e.printStackTrace();
		}
		
		
		
		if(approverPriority==1)
		{
			
				forwardType="NewItassetformENG";
				
				
		}
		else{
		forwardType="NewItassetformAppr";
		}
			}
			
			
			if(ITType.equalsIgnoreCase("New IT Spares Request"))
			{

				LinkedList newassetcreation=new LinkedList();
				String empno=user.getEmployeeNo();
				
				String data="select emp.PERNR,emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE " +
						"from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"+empID+"' and " +
						"dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";	
				ResultSet rs= ad.selectQuery(data);
				try {
					while(rs.next())
					{
						
					
						pendAppForm.setRequestername(rs.getString("EMP_FULLNAME"));
						pendAppForm.setRequesterdepartment(rs.getString("DPTSTXT"));
						pendAppForm.setRequesterdesignation(rs.getString("DSGSTXT"));
						pendAppForm.setExtno(rs.getString("TEL_EXTENS"));
						pendAppForm.setIpPhoneno(rs.getString("IP_PHONE"));
						pendAppForm.setLocation(rs.getString("LOCATION_CODE"));
						pendAppForm.setEmpno(rs.getString("PERNR"));
						
					
						
					}
				} catch (SQLException e) {
				  e.printStackTrace();
				}
				
				
				String requester = "";
				String data1=" select * from IT_HELPDESK where Req_No="+reqId+"";	
		ResultSet rs1= ad.selectQuery(data1);
		try {
			while(rs1.next())
			{
				pendAppForm.setAssetvalue(rs1.getString("Asset_Details"));
				pendAppForm.setAdloginname(rs1.getString("ADLoginName"));
				pendAppForm.setServer(rs1.getString("Server_Address"));

				pendAppForm.setReason(rs1.getString("Reason"));
				pendAppForm.setHostname(rs1.getString("HostName"));
				pendAppForm.setIPNumber(rs1.getString("IPAddress"));
				pendAppForm.setReqPriority(rs1.getString("Req_Priority"));
				
				pendAppForm.setAssetcategory(rs1.getString("Category"));
				pendAppForm.setReqbydate(rs1.getString("reqbydate"));
				pendAppForm.setSuggestmodelname(rs1.getString("suggmodel"));
				
				requester = rs1.getString("Emp_No");
				
			
				pendAppForm.setSuggestmodelno(rs1.getString("suggmodelno"));
				pendAppForm.setApprxvalue(rs1.getString("Apprxvalue"));
		

				pendAppForm.setPurpose(rs1.getString("purpose"));
		
				
				String rmk=rs1.getString("Remarks");
				if(rmk!=null)
				{
					pendAppForm.setRemarks(rs1.getString("Remarks"));
					request.setAttribute("Remark", "Remark");
				}
			}
		} catch (SQLException e) {
			  e.printStackTrace();
			}
		
					
		newassetcreation.add(pendAppForm);
		request.setAttribute("newassetcreation", newassetcreation);	
		
		//Approver Details
		int  checkStatus=0;
		LinkedList listApprers=new LinkedList();
		int jk=0;
		//HOD

		int hodpresent=0;
		int hodpresentinIt=0;
		String HODPresentId="";
		String HODPresentname="";
		String itengineerid="";
		String itengineername="";
		String HOD="";
		String	pendingApprovers="";
		
		 //chk if he has Hod
		 String chkhod="select count(*) from ESS_Approvers where employeeNumber='"+empID+"'  ";
		 ResultSet rs10= ad.selectQuery(chkhod);
		 try {
			while(rs10.next())
			 {
				 hodpresent=rs10.getInt(1);
			 }
		} catch (SQLException e1) {
			
			e1.printStackTrace();
		}
		
		//get hod details
		
	
		if(hodpresent>0){
		String gethod="select ess.ApproverId,emp.EMP_FULLNAME from ESS_Approvers  as ess,emp_official_info as emp  " +
				" where employeeNumber='"+empID+"'  and essType='Leave' and emp.PERNR=ess.ApproverId ";
		 ResultSet rs2= ad.selectQuery(gethod);
		 
		 try {
			if(rs2.next())
			 {
				HODPresentId=rs2.getString("ApproverId");
				HODPresentname=rs2.getString("EMP_FULLNAME");
			 }
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		}
		
		//chk if he is present in It approver
		 String chkhodinit="select count(*) from IT_Approvers where Approver_ID='"+HODPresentId+"' and Req_Type = '"+ITType+"'  and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))";
		 ResultSet rs11= ad.selectQuery(chkhodinit);
		 try {
			while(rs11.next())
			 {
				hodpresentinIt=rs11.getInt(1);
			 }
		} catch (SQLException e1) {
			
			e1.printStackTrace();
		}
		 
		// Plant head
			String plantheadid = "";
			String plantheadname = "";
			String plantheaddep = "";
			String plantheaddesg = "";
			String a = "";
			String userx = "select loc.LOCID from Location as loc,emp_official_info as emp where loc.LOCATION_CODE=emp.LOCID and emp.PERNR='"
			+ requester + "' ";
			ResultSet userrs = ad.selectQuery(userx);
			try {
				while (userrs.next()) {
					a = userrs.getString("LOCID");
				}
			} catch (SQLException e2) {
				// TODO Auto-generated catch block
				e2.printStackTrace();
			}
			if (!a.equalsIgnoreCase("16")) {
				String plant = "select pl.Plant,pl.PERNR,emp.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from PLANT_HEAD pl,emp_official_info emp,DEPARTMENT dep,DESIGNATION desg where Plant=(select LOCATION_CODE from Location where LOCID='"
						+ a
						+ "') and emp.PERNR=pl.PERNR and dep.DPTID=emp.DPTID and desg.DSGID=emp.DSGID";
				ResultSet pl = ad.selectQuery(plant);
				try {
					while (pl.next()) {
						plantheadid = pl.getString("pernr");
						plantheadname = pl.getString("EMP_FULLNAME");
						plantheaddep = pl.getString("DPTSTXT");
						plantheaddesg = pl.getString("DSGSTXT");
					}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			if (plantheadid.equalsIgnoreCase("")) {

				if (hodpresent > 0 && hodpresentinIt == 0) {

					try {

						checkStatus = 1;
						ApprovalsForm apprvershod = new ApprovalsForm();
						apprvershod.setPriority("1");

						apprvershod.setEmployeeCode(HODPresentId);
						apprvershod.setEmployeeName(HODPresentname);

						String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
								+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
								+ reqId
								+ "' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
								+ empID
								+ "')) AND "
								+ "all_r.Last_Approver='"
								+ HODPresentId
								+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
								+ ITType
								+ "' and emp.PERNR=all_r.Last_Approver"
								+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

						ResultSet rsAppInfo = ad
								.selectQuery(recordStatus);
						if (rsAppInfo.next()) {
							apprvershod.setApproveStatus(rsAppInfo
									.getString("Req_Status"));
							String approveStatus = rsAppInfo
									.getString("Req_Status");
							if (approveStatus
									.equalsIgnoreCase("Approved")
									|| approveStatus
											.equalsIgnoreCase("Completed")) {
								apprvershod.setDate(rsAppInfo
										.getString("approved_date"));
							} else {
								apprvershod.setDate(rsAppInfo
										.getString("rejected_date"));
							}
							String comments = "";
							comments = rsAppInfo.getString("Comments");
							if (comments == "null") {
								apprvershod.setComments("");
							} else {
								apprvershod.setComments(rsAppInfo
										.getString("Comments"));
							}
						}

						listApprers.add(apprvershod);
						jk = 1;
					}

					catch (SQLException e1) {

						e1.printStackTrace();
					}

				}
			}

			if (!plantheadid.equalsIgnoreCase("")) {

				try {

					checkStatus = 1;
					ApprovalsForm apprvershod = new ApprovalsForm();
					apprvershod.setPriority("1");

					apprvershod.setEmployeeCode(plantheadid);
					apprvershod.setEmployeeName(plantheadname);

					String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
							+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
							+ reqId
							+ "' and it.LOCATION_ID='"
							+ user.getPlantId()
							+ "' AND "
							+ "all_r.Last_Approver='"
							+ plantheadid
							+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
							+ ITType
							+ "' and emp.PERNR=all_r.Last_Approver"
							+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

					ResultSet rsAppInfo = ad.selectQuery(recordStatus);
					if (rsAppInfo.next()) {
						apprvershod.setApproveStatus(rsAppInfo
								.getString("Req_Status"));
						String approveStatus = rsAppInfo
								.getString("Req_Status");
						if (approveStatus.equalsIgnoreCase("Approved")
								|| approveStatus
										.equalsIgnoreCase("Created")) {
							apprvershod.setDate(rsAppInfo
									.getString("approved_date"));
						} else {
							apprvershod.setDate(rsAppInfo
									.getString("rejected_date"));
						}
						String comments = "";
						comments = rsAppInfo.getString("Comments");
						if (comments == "null") {
							apprvershod.setComments("");
						} else {
							apprvershod.setComments(rsAppInfo
									.getString("Comments"));
						}
					}

					listApprers.add(apprvershod);
					jk = 1;
				}

				catch (SQLException e1) {

					e1.printStackTrace();
				}

			}

			String getApprDetails = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
					+ empID
					+ "'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"
					+ ITType
					+ "' group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
			ResultSet rsApprDetails = ad.selectQuery(getApprDetails);
			try {
				while (rsApprDetails.next()) {

					checkStatus = 1;
					ApprovalsForm apprvers = new ApprovalsForm();
					apprvers.setPriority(rsApprDetails
							.getString("Priority"));

					apprvers.setPriority(rsApprDetails
							.getString("Priority"));
					if (jk == 1) {

						apprvers.setPriority(Integer
								.toString(listApprers.size() + 1));
					}
					apprvers.setEmployeeCode(rsApprDetails
							.getString("Approver_Id"));
					String empCode = rsApprDetails
							.getString("Approver_Id");

					String recordStatus = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
							+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
							+ reqId
							+ "' "
							+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
							+ empID
							+ "')) AND all_r.Last_Approver='"
							+ empCode
							+ "' and it.Approver_Id=all_r.Last_Approver  and all_r.Req_Type='IT Request' and "
							+ "it.Req_Type='"
							+ ITType
							+ "' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
							+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";

					ResultSet rsAppInfo = ad.selectQuery(recordStatus);
					if (rsAppInfo.next()) {

						if (rsAppInfo.getInt("Priority") == 1) {
							chkdate = rsAppInfo
									.getString("approved_date");
							chkdate1 = rsAppInfo
									.getString("rejected_date");
						}
						apprvers.setApproveStatus(rsAppInfo
								.getString("Req_Status"));
						String approveStatus = rsAppInfo
								.getString("Req_Status");
						if (approveStatus.equalsIgnoreCase("Approved")
								|| approveStatus
										.equalsIgnoreCase("Completed")) {
							apprvers.setDate(rsAppInfo
									.getString("approved_date"));
						} else {
							apprvers.setDate(rsAppInfo
									.getString("rejected_date"));
						}
						String comments = "";
						comments = rsAppInfo.getString("Comments");
						if (comments == "null") {
							apprvers.setComments("");
						} else {
							apprvers.setComments(rsAppInfo
									.getString("Comments"));
						}
					}
					apprvers.setEmployeeName(rsApprDetails
							.getString("EMP_FULLNAME"));

					listApprers.add(apprvers);

				}
				//IT ENGINEER DETAIlS
				
				
				String getApprDetails1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' and it.Priority=1    group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
				ResultSet rsApprDetails1=ad.selectQuery(getApprDetails1);
				
					while(rsApprDetails1.next())
					{
						checkStatus=1;
						ApprovalsForm apprvers=new ApprovalsForm();
						apprvers.setPriority(Integer.toString(listApprers.size()+1));
						
						apprvers.setEmployeeCode(rsApprDetails1.getString("Approver_Id"));
						String empCode1=rsApprDetails1.getString("Approver_Id");
						
						String recordStatus1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
								+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
								+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode1+"' and it.Approver_Id=all_r.Last_Approver and all_r.Req_Type='IT Request' and "
								+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
								+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
						
						ResultSet rsAppInfo1=ad.selectQuery(recordStatus1);
						if(rsAppInfo1.next())
						{
							
							String approveStatus=rsAppInfo1.getString("Req_Status");
							if(approveStatus.equalsIgnoreCase("Approved"))
							{
								recordStatus1=recordStatus1+" order by all_r.approved_date desc ";
								ResultSet rsAppInfo2=ad.selectQuery(recordStatus1);
								if(rsAppInfo2.next())
								{
									if(!chkdate.equalsIgnoreCase(rsAppInfo2.getString("approved_date")))
									{
										apprvers.setApproveStatus("Closed");
									apprvers.setDate(rsAppInfo2.getString("approved_date"));
									
								
								
								String comments="";
								comments=rsAppInfo2.getString("Comments");
								if(comments=="null" )
								{
									apprvers.setComments("");
								}else{
									apprvers.setComments(rsAppInfo2.getString("Comments"));
								}
								}
								}
							}else{
								
								recordStatus1=recordStatus1+" order by all_r.rejected_date desc ";
								ResultSet rsAppInfo3=ad.selectQuery(recordStatus1);
								if(rsAppInfo3.next())
								{
									if(!chkdate1.equalsIgnoreCase(rsAppInfo3.getString("rejected_date")))
									{
									apprvers.setDate(rsAppInfo3.getString("rejected_date"));
									}
								
								String comments="";
								comments=rsAppInfo3.getString("Comments");
								if(comments=="null" )
								{
									apprvers.setComments("");
								}else{
									apprvers.setComments(rsAppInfo3.getString("Comments"));
								}
								}
							}
							
						}
						apprvers.setEmployeeName(rsApprDetails1.getString("EMP_FULLNAME"));
				
					listApprers.add(apprvers);
					}
				
				request.setAttribute("approverDetails", listApprers);
			
		} 
		
			catch (SQLException e) {
			e.printStackTrace();
		}
		
		
		
		if(approverPriority==1)
		{
			
				forwardType="NewItspareformENG";
				
				
		}
		else{
		forwardType="NewItspareformAppr";
		}
			
			}
		
			
			if(ITType.equalsIgnoreCase("Active Directory User Creation"))
			{
				LinkedList Adusercreation=new LinkedList();
				String empno=user.getEmployeeNo();
				
				String data="select emp.PERNR,emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE " +
						"from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"+empID+"' and " +
						"dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";	
				ResultSet rs= ad.selectQuery(data);
				try {
					while(rs.next())
					{
						
					
						pendAppForm.setRequestername(rs.getString("EMP_FULLNAME"));
						pendAppForm.setRequesterdepartment(rs.getString("DPTSTXT"));
						pendAppForm.setRequesterdesignation(rs.getString("DSGSTXT"));
						pendAppForm.setExtno(rs.getString("TEL_EXTENS"));
						pendAppForm.setIpPhoneno(rs.getString("IP_PHONE"));
						pendAppForm.setLocation(rs.getString("LOCATION_CODE"));
						pendAppForm.setEmpno(rs.getString("PERNR"));
						
					
						
					}
				} catch (SQLException e) {
				  e.printStackTrace();
				}
				
				String data1=" select * from IT_HELPDESK where Req_No="+reqId+"";	
		ResultSet rs1= ad.selectQuery(data1);
		try {
			while(rs1.next())
			{
				pendAppForm.setAssetvalue(rs1.getString("Asset_Details"));
				pendAppForm.setAdloginname(rs1.getString("ADLoginName"));
				pendAppForm.setServer(rs1.getString("Server_Address"));
				pendAppForm.setReqdfolderacces(rs1.getString("Req_Folder_access"));
				pendAppForm.setReason(rs1.getString("Reason"));
				pendAppForm.setHostname(rs1.getString("HostName"));
				pendAppForm.setIPNumber(rs1.getString("IPAddress"));
				pendAppForm.setReqPriority(rs1.getString("Req_Priority"));
				
				pendAppForm.setInitials(rs1.getString("Initials"));
				pendAppForm.setFirstname(rs1.getString("Frst_Name"));
				pendAppForm.setLastname(rs1.getString("Last_Name"));
				
				String rmk=rs1.getString("Remarks");
				if(rmk!=null)
				{
					pendAppForm.setRemarks(rs1.getString("Remarks"));
					request.setAttribute("Remark", "Remark");
				}
			}
		} catch (SQLException e) {
			  e.printStackTrace();
			}
		
					
		Adusercreation.add(pendAppForm);
		request.setAttribute("Adusercreation", Adusercreation);	
		
		//Approver Details
		int  checkStatus=0;
		LinkedList listApprers=new LinkedList();
		int jk=0;
		//HOD

		int hodpresent=0;
		int hodpresentinIt=0;
		String HODPresentId="";
		String HODPresentname="";
		String itengineerid="";
		String itengineername="";
		String HOD="";
		String	pendingApprovers="";
		
		 //chk if he has Hod
		 String chkhod="select count(*) from ESS_Approvers where employeeNumber='"+empID+"'  ";
		 ResultSet rs10= ad.selectQuery(chkhod);
		 try {
			while(rs10.next())
			 {
				 hodpresent=rs10.getInt(1);
			 }
		} catch (SQLException e1) {
			
			e1.printStackTrace();
		}
		
		//get hod details
		
	
		if(hodpresent>0){
		String gethod="select ess.ApproverId,emp.EMP_FULLNAME from ESS_Approvers  as ess,emp_official_info as emp  " +
				" where employeeNumber='"+empID+"'  and essType='Leave' and emp.PERNR=ess.ApproverId ";
		 ResultSet rs2= ad.selectQuery(gethod);
		 
		 try {
			if(rs2.next())
			 {
				HODPresentId=rs2.getString("ApproverId");
				HODPresentname=rs2.getString("EMP_FULLNAME");
			 }
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		}
		
		//chk if he is present in It approver
		 String chkhodinit="select count(*) from IT_Approvers where Approver_ID='"+HODPresentId+"' and Req_Type = '"+ITType+"'  and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))";
		 ResultSet rs11= ad.selectQuery(chkhodinit);
		 try {
			while(rs11.next())
			 {
				hodpresentinIt=rs11.getInt(1);
			 }
		} catch (SQLException e1) {
			
			e1.printStackTrace();
		}
		 
			if(hodpresent>0 && hodpresentinIt==0 )
			{
				
				
				try {
					
						checkStatus=1;
						ApprovalsForm apprvershod=new ApprovalsForm();
						apprvershod.setPriority("1");
						
						apprvershod.setEmployeeCode(HODPresentId);
						apprvershod.setEmployeeName(HODPresentname);
						
						String recordStatus="select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
					+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND "
					+ "all_r.Last_Approver='"+HODPresentId+"' and all_r.Req_Type='IT Request' and it.Req_Type='"+ITType+"' and emp.PERNR=all_r.Last_Approver"
					+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";
						
						ResultSet rsAppInfo=ad.selectQuery(recordStatus);
						if(rsAppInfo.next())
						{
							apprvershod.setApproveStatus(rsAppInfo.getString("Req_Status"));
							String approveStatus=rsAppInfo.getString("Req_Status");
							if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
							{
								apprvershod.setDate(rsAppInfo.getString("approved_date"));
							}else{
								apprvershod.setDate(rsAppInfo.getString("rejected_date"));
							}
							String comments="";
							comments=rsAppInfo.getString("Comments");
							if(comments=="null" )
							{
								apprvershod.setComments("");
							}else{
								apprvershod.setComments(rsAppInfo.getString("Comments"));
							}
						}
						
						
						listApprers.add(apprvershod);
					 jk=1;
					}
				
				catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				
			}
		
		
	
		
		
		String getApprDetails="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
		ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
		try {
			while(rsApprDetails.next())
			{
			
				checkStatus=1;
				ApprovalsForm apprvers=new ApprovalsForm();
				apprvers.setPriority(rsApprDetails.getString("Priority"));
				
				
				
				
			
				
				apprvers.setPriority(rsApprDetails.getString("Priority"));
				if(jk==1){
					
					apprvers.setPriority(Integer.toString(listApprers.size()+1));
				}
				apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
				String empCode=rsApprDetails.getString("Approver_Id");
				
				/*String recordStatus="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
						+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
						+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode+"' and it.Approver_Id=all_r.Last_Approver  and all_r.Req_Type='IT Request' and "
						+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
						+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
				
				ResultSet rsAppInfo=ad.selectQuery(recordStatus);
				if(rsAppInfo.next())
				{
					
					if(rsAppInfo.getInt("Priority")==1 )
					{
						 chkdate=rsAppInfo.getString("approved_date");
						 chkdate1=rsAppInfo.getString("rejected_date");
					}
					apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
					String approveStatus=rsAppInfo.getString("Req_Status");
					if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
					{
					apprvers.setDate(rsAppInfo.getString("approved_date"));
					}else{
						apprvers.setDate(rsAppInfo.getString("rejected_date"));
					}
					String comments="";
					comments=rsAppInfo.getString("Comments");
					if(comments=="null" )
					{
						apprvers.setComments("");
					}else{
						apprvers.setComments(rsAppInfo.getString("Comments"));
					}
				}
				apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
				
				listApprers.add(apprvers);*/
				
			}
				//IT ENGINEER DETAIlS
				
				
				String getApprDetails1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' and it.Priority=1    group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
				ResultSet rsApprDetails1=ad.selectQuery(getApprDetails1);
				
					while(rsApprDetails1.next())
					{
						checkStatus=1;
						ApprovalsForm apprvers=new ApprovalsForm();
						apprvers.setPriority(Integer.toString(listApprers.size()+1));
						
						apprvers.setEmployeeCode(rsApprDetails1.getString("Approver_Id"));
						String empCode1=rsApprDetails1.getString("Approver_Id");
						
						String recordStatus1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
								+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
								+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode1+"' and it.Approver_Id=all_r.Last_Approver and all_r.Req_Type='IT Request' and "
								+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
								+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
						
						ResultSet rsAppInfo1=ad.selectQuery(recordStatus1);
						if(rsAppInfo1.next())
						{
							
							String approveStatus=rsAppInfo1.getString("Req_Status");
							if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
							{
								recordStatus1=recordStatus1+" order by all_r.approved_date desc ";
								ResultSet rsAppInfo2=ad.selectQuery(recordStatus1);
								if(rsAppInfo2.next())
								{
									if(!chkdate.equalsIgnoreCase(rsAppInfo2.getString("approved_date")))
									{
										apprvers.setApproveStatus("Closed");
									apprvers.setDate(rsAppInfo2.getString("approved_date"));
									
								
								
								String comments="";
								comments=rsAppInfo2.getString("Comments");
								if(comments=="null" )
								{
									apprvers.setComments("");
								}else{
									apprvers.setComments(rsAppInfo2.getString("Comments"));
								}
								}
								}
							}else{
								
								recordStatus1=recordStatus1+" order by all_r.rejected_date desc ";
								ResultSet rsAppInfo3=ad.selectQuery(recordStatus1);
								if(rsAppInfo3.next())
								{
									if(!chkdate1.equalsIgnoreCase(rsAppInfo3.getString("rejected_date")))
									{
									apprvers.setDate(rsAppInfo3.getString("rejected_date"));
									}
								
								String comments="";
								comments=rsAppInfo3.getString("Comments");
								if(comments=="null" )
								{
									apprvers.setComments("");
								}else{
									apprvers.setComments(rsAppInfo3.getString("Comments"));
								}
								}
							}
							
						}
						apprvers.setEmployeeName(rsApprDetails1.getString("EMP_FULLNAME"));
				
					listApprers.add(apprvers);
					}
				
				request.setAttribute("approverDetails", listApprers);
			
		} 
		
			catch (SQLException e) {
			e.printStackTrace();
		}
		
		
		
		if(approverPriority==1)
		{
			
				forwardType="AduserCreationformENG";
				
				
		}
		else{
		forwardType="AduserCreationformAppr";
		}
			}
			
			if(ITType.equalsIgnoreCase("Active Directory User Deletion"))
			{

				LinkedList AduserDeletion=new LinkedList();
				String empno=user.getEmployeeNo();
				
				String data="select emp.PERNR,emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE " +
						"from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"+empID+"' and " +
						"dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";	
				ResultSet rs= ad.selectQuery(data);
				try {
					while(rs.next())
					{
						
					
						pendAppForm.setRequestername(rs.getString("EMP_FULLNAME"));
						pendAppForm.setRequesterdepartment(rs.getString("DPTSTXT"));
						pendAppForm.setRequesterdesignation(rs.getString("DSGSTXT"));
						pendAppForm.setExtno(rs.getString("TEL_EXTENS"));
						pendAppForm.setIpPhoneno(rs.getString("IP_PHONE"));
						pendAppForm.setLocation(rs.getString("LOCATION_CODE"));
						pendAppForm.setEmpno(rs.getString("PERNR"));
						
					
						
					}
				} catch (SQLException e) {
				  e.printStackTrace();
				}
				
				String data1=" select * from IT_HELPDESK where Req_No="+reqId+"";	
		ResultSet rs1= ad.selectQuery(data1);
		try {
			while(rs1.next())
			{
				pendAppForm.setAssetvalue(rs1.getString("Asset_Details"));
				pendAppForm.setAdloginname(rs1.getString("ADLoginName"));
				pendAppForm.setServer(rs1.getString("Server_Address"));
				pendAppForm.setReqdfolderdeletion(rs1.getString("Req_Folder_Deletion"));
				pendAppForm.setDeletefrom(rs1.getString("Delete_From"));
				pendAppForm.setReason(rs1.getString("Reason"));
				pendAppForm.setHostname(rs1.getString("HostName"));
				pendAppForm.setIPNumber(rs1.getString("IPAddress"));
				pendAppForm.setReqPriority(rs1.getString("Req_Priority"));
				String rmk=rs1.getString("Remarks");
				if(rmk!=null)
				{
					pendAppForm.setRemarks(rs1.getString("Remarks"));
					request.setAttribute("Remark", "Remark");
				}
				
				
			}
		} catch (SQLException e) {
			  e.printStackTrace();
			}
		
		
		AduserDeletion.add(pendAppForm);
		request.setAttribute("AduserDeletion", AduserDeletion);	
		
		//Approver Details
				int  checkStatus=0;
				LinkedList listApprers=new LinkedList();
				int jk=0;
				//HOD

				int hodpresent=0;
				int hodpresentinIt=0;
				String HODPresentId="";
				String HODPresentname="";
				String itengineerid="";
				String itengineername="";
				String HOD="";
				String	pendingApprovers="";
				
				 //chk if he has Hod
				 String chkhod="select count(*) from ESS_Approvers where employeeNumber='"+empID+"'  ";
				 ResultSet rs10= ad.selectQuery(chkhod);
				 try {
					while(rs10.next())
					 {
						 hodpresent=rs10.getInt(1);
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				
				//get hod details
				
			
				if(hodpresent>0){
				String gethod="select ess.ApproverId,emp.EMP_FULLNAME from ESS_Approvers  as ess,emp_official_info as emp  " +
						" where employeeNumber='"+empID+"'  and essType='Leave' and emp.PERNR=ess.ApproverId ";
				 ResultSet rs2= ad.selectQuery(gethod);
				 
				 try {
					if(rs2.next())
					 {
					
						HODPresentId=rs2.getString("ApproverId");
						HODPresentname=rs2.getString("EMP_FULLNAME");
					 }
				} catch (SQLException e) {
					
					e.printStackTrace();
				}
				}
				
				//chk if he is present in It approver
				 String chkhodinit="select count(*) from IT_Approvers where Approver_ID='"+HODPresentId+"' and Req_Type = '"+ITType+"'  and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))";
				 ResultSet rs11= ad.selectQuery(chkhodinit);
				 try {
					while(rs11.next())
					 {
						hodpresentinIt=rs11.getInt(1);
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				 
					if(hodpresent>0 && hodpresentinIt==0 )
					{
						
						
						try {
							
								checkStatus=1;
								ApprovalsForm apprvershod=new ApprovalsForm();
								apprvershod.setPriority("1");
								
								apprvershod.setEmployeeCode(HODPresentId);
								apprvershod.setEmployeeName(HODPresentname);
								
								String recordStatus="select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
							+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND "
							+ "all_r.Last_Approver='"+HODPresentId+"' and all_r.Req_Type='IT Request' and it.Req_Type='"+ITType+"' and emp.PERNR=all_r.Last_Approver"
							+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";
								
								ResultSet rsAppInfo=ad.selectQuery(recordStatus);
								if(rsAppInfo.next())
								{
									apprvershod.setApproveStatus(rsAppInfo.getString("Req_Status"));
									String approveStatus=rsAppInfo.getString("Req_Status");
									if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
									{
										apprvershod.setDate(rsAppInfo.getString("approved_date"));
									}else{
										apprvershod.setDate(rsAppInfo.getString("rejected_date"));
									}
									String comments="";
									comments=rsAppInfo.getString("Comments");
									if(comments=="null" )
									{
										apprvershod.setComments("");
									}else{
										apprvershod.setComments(rsAppInfo.getString("Comments"));
									}
								}
								
								
								listApprers.add(apprvershod);
							 jk=1;
							}
						
						catch (SQLException e1) {
							
							e1.printStackTrace();
						}
						
					}
				
				
			
				
				
				String getApprDetails="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
				ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
				try {
					while(rsApprDetails.next())
					{
					
						checkStatus=1;
						ApprovalsForm apprvers=new ApprovalsForm();
						apprvers.setPriority(rsApprDetails.getString("Priority"));
						
						
						
						
					
						
						apprvers.setPriority(rsApprDetails.getString("Priority"));
						if(jk==1){
							
							apprvers.setPriority(Integer.toString(listApprers.size()+1));
						}
						apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
						String empCode=rsApprDetails.getString("Approver_Id");
						
						String recordStatus="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
								+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
								+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode+"' and it.Approver_Id=all_r.Last_Approver  and all_r.Req_Type='IT Request' and "
								+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
								+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
						
						ResultSet rsAppInfo=ad.selectQuery(recordStatus);
						if(rsAppInfo.next())
						{
							
							if(rsAppInfo.getInt("Priority")==1 )
							{
								 chkdate=rsAppInfo.getString("approved_date");
								 chkdate1=rsAppInfo.getString("rejected_date");
							}
							apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
							String approveStatus=rsAppInfo.getString("Req_Status");
							if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
							{
							apprvers.setDate(rsAppInfo.getString("approved_date"));
							}else{
								apprvers.setDate(rsAppInfo.getString("rejected_date"));
							}
							String comments="";
							comments=rsAppInfo.getString("Comments");
							if(comments=="null" )
							{
								apprvers.setComments("");
							}else{
								apprvers.setComments(rsAppInfo.getString("Comments"));
							}
						}
						apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
						
						listApprers.add(apprvers);
						
					}
						//IT ENGINEER DETAIlS
						
						
						String getApprDetails1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' and it.Priority=1    group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
						ResultSet rsApprDetails1=ad.selectQuery(getApprDetails1);
						
							while(rsApprDetails1.next())
							{
								checkStatus=1;
								ApprovalsForm apprvers=new ApprovalsForm();
								apprvers.setPriority(Integer.toString(listApprers.size()+1));
								
								apprvers.setEmployeeCode(rsApprDetails1.getString("Approver_Id"));
								String empCode1=rsApprDetails1.getString("Approver_Id");
								
								String recordStatus1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
										+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
										+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode1+"' and it.Approver_Id=all_r.Last_Approver and all_r.Req_Type='IT Request' and "
										+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
										+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
								
								ResultSet rsAppInfo1=ad.selectQuery(recordStatus1);
								if(rsAppInfo1.next())
								{
									
									String approveStatus=rsAppInfo1.getString("Req_Status");
									if(approveStatus.equalsIgnoreCase("Approved"))
									{
										recordStatus1=recordStatus1+" order by all_r.approved_date desc ";
										ResultSet rsAppInfo2=ad.selectQuery(recordStatus1);
										if(rsAppInfo2.next())
										{
											if(!chkdate.equalsIgnoreCase(rsAppInfo2.getString("approved_date")))
											{
												apprvers.setApproveStatus("Closed");
											apprvers.setDate(rsAppInfo2.getString("approved_date"));
											
										
										
										String comments="";
										comments=rsAppInfo2.getString("Comments");
										if(comments=="null" )
										{
											apprvers.setComments("");
										}else{
											apprvers.setComments(rsAppInfo2.getString("Comments"));
										}
										}
										}
									}else{
										
										recordStatus1=recordStatus1+" order by all_r.rejected_date desc ";
										ResultSet rsAppInfo3=ad.selectQuery(recordStatus1);
										if(rsAppInfo3.next())
										{
											if(!chkdate1.equalsIgnoreCase(rsAppInfo3.getString("rejected_date")))
											{
											apprvers.setDate(rsAppInfo3.getString("rejected_date"));
											}
										
										String comments="";
										comments=rsAppInfo3.getString("Comments");
										if(comments=="null" )
										{
											apprvers.setComments("");
										}else{
											apprvers.setComments(rsAppInfo3.getString("Comments"));
										}
										}
									}
									
								}
								apprvers.setEmployeeName(rsApprDetails1.getString("EMP_FULLNAME"));
						
							listApprers.add(apprvers);
							}
						
						request.setAttribute("approverDetails", listApprers);
			
		} 
		
			catch (SQLException e) {
			e.printStackTrace();
		}
		
				
				
		if(approverPriority==1)
		{
			forwardType="AduserDeletionformENG";
		}
		else{
		forwardType="AduserDeletionformAppr";
		}
			
				
			}
			
			if(ITType.equalsIgnoreCase("Active Directory User Transfer"))
			{
				LinkedList Adusertransfer=new LinkedList();
				String empno=user.getEmployeeNo();
				
				String data="select emp.PERNR,emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE " +
						"from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"+empID+"' and " +
						"dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";	
				ResultSet rs= ad.selectQuery(data);
				try {
					while(rs.next())
					{
						
					
						pendAppForm.setRequestername(rs.getString("EMP_FULLNAME"));
						pendAppForm.setRequesterdepartment(rs.getString("DPTSTXT"));
						pendAppForm.setRequesterdesignation(rs.getString("DSGSTXT"));
						pendAppForm.setExtno(rs.getString("TEL_EXTENS"));
						pendAppForm.setIpPhoneno(rs.getString("IP_PHONE"));
						pendAppForm.setLocation(rs.getString("LOCATION_CODE"));
						pendAppForm.setEmpno(rs.getString("PERNR"));
						
					
						
					}
				} catch (SQLException e) {
				  e.printStackTrace();
				}
				
				String data1=" select * from IT_HELPDESK where Req_No="+reqId+"";	
		ResultSet rs1= ad.selectQuery(data1);
		try {
			while(rs1.next())
			{
				pendAppForm.setAssetvalue(rs1.getString("Asset_Details"));
				pendAppForm.setAdloginname(rs1.getString("ADLoginName"));
				pendAppForm.setReason(rs1.getString("Reason"));
	
				pendAppForm.setIPNumber(rs1.getString("IPAddress"));
				pendAppForm.setFromlocationId(rs1.getString("From_Loc"));
				pendAppForm.setTolocationId(rs1.getString("To_Loc"));
				pendAppForm.setFromdepartment(rs1.getString("From_Dep"));
				pendAppForm.setTodepartment(rs1.getString("To_Dep"));
				
				
				pendAppForm.setReqPriority(rs1.getString("Req_Priority"));
				
				String rmk=rs1.getString("Remarks");
				if(rmk!=null)
				{
					pendAppForm.setRemarks(rs1.getString("Remarks"));
					request.setAttribute("Remark", "Remark");
				}
			}
		} catch (SQLException e) {
			  e.printStackTrace();
			}
		
		
		ResultSet rs111 = ad.selectQuery("select LOCID," +
				"LOCNAME,location_code from location");
				ArrayList locationList=new ArrayList();
				ArrayList locationLabelList=new ArrayList();
					
				try {
					while(rs111.next()) {
						locationList.add(rs111.getString("location_code")+"-"+rs111.getString("LOCNAME"));
						locationLabelList.add(rs111.getString("location_code")+"-"+rs111.getString("LOCNAME"));
					}
				} catch (SQLException e) {
					e.printStackTrace();
				}
				pendAppForm.setLocationIdList(locationList);
				pendAppForm.setLocationLabelList(locationLabelList);
				
				ArrayList deparmentList=new ArrayList();
				ResultSet rs12 =ad.selectQuery("select DPTSTXT from department order by DPTSTXT");
				try {
					while(rs12.next()){
						
						deparmentList.add(rs12.getString("DPTSTXT"));
					}
				} catch (SQLException e) {
					e.printStackTrace();
				}
				
				pendAppForm.setDepartmentList(deparmentList);
		
		
					
		Adusertransfer.add(pendAppForm);
		request.setAttribute("Adusertransfer", Adusertransfer);	
		
		//Approver Details
		int  checkStatus=0;
		LinkedList listApprers=new LinkedList();
		int jk=0;
		//HOD

		int hodpresent=0;
		int hodpresentinIt=0;
		String HODPresentId="";
		String HODPresentname="";
		String itengineerid="";
		String itengineername="";
		String HOD="";
		String	pendingApprovers="";
		
		 //chk if he has Hod
		 String chkhod="select count(*) from ESS_Approvers where employeeNumber='"+empID+"'  ";
		 ResultSet rs10= ad.selectQuery(chkhod);
		 try {
			while(rs10.next())
			 {
				 hodpresent=rs10.getInt(1);
			 }
		} catch (SQLException e1) {
			
			e1.printStackTrace();
		}
		
		//get hod details
		
	
		if(hodpresent>0){
		String gethod="select ess.ApproverId,emp.EMP_FULLNAME from ESS_Approvers  as ess,emp_official_info as emp  " +
				" where employeeNumber='"+empID+"'  and essType='Leave' and emp.PERNR=ess.ApproverId ";
		 ResultSet rs2= ad.selectQuery(gethod);
		 
		 try {
			if(rs2.next())
			 {
			
				HODPresentId=rs2.getString("ApproverId");
				HODPresentname=rs2.getString("EMP_FULLNAME");
			 }
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		}
		
		//chk if he is present in It approver
		 String chkhodinit="select count(*) from IT_Approvers where Approver_ID='"+HODPresentId+"' and Req_Type = '"+ITType+"'  and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))";
		 ResultSet rs11= ad.selectQuery(chkhodinit);
		 try {
			while(rs11.next())
			 {
				hodpresentinIt=rs11.getInt(1);
			 }
		} catch (SQLException e1) {
			
			e1.printStackTrace();
		}
		 
			if(hodpresent>0 && hodpresentinIt==0 )
			{
				
				
				try {
					
						checkStatus=1;
						ApprovalsForm apprvershod=new ApprovalsForm();
						apprvershod.setPriority("1");
						
						apprvershod.setEmployeeCode(HODPresentId);
						apprvershod.setEmployeeName(HODPresentname);
						
						String recordStatus="select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
					+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND "
					+ "all_r.Last_Approver='"+HODPresentId+"' and all_r.Req_Type='IT Request' and it.Req_Type='"+ITType+"' and emp.PERNR=all_r.Last_Approver"
					+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";
						
						ResultSet rsAppInfo=ad.selectQuery(recordStatus);
						if(rsAppInfo.next())
						{
							apprvershod.setApproveStatus(rsAppInfo.getString("Req_Status"));
							String approveStatus=rsAppInfo.getString("Req_Status");
							if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
							{
								apprvershod.setDate(rsAppInfo.getString("approved_date"));
							}else{
								apprvershod.setDate(rsAppInfo.getString("rejected_date"));
							}
							String comments="";
							comments=rsAppInfo.getString("Comments");
							if(comments=="null" )
							{
								apprvershod.setComments("");
							}else{
								apprvershod.setComments(rsAppInfo.getString("Comments"));
							}
						}
						
						
						listApprers.add(apprvershod);
					 jk=1;
					}
				
				catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				
			}
		
		
	
		
		
		String getApprDetails="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
		ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
		try {
			while(rsApprDetails.next())
			{
			
				checkStatus=1;
				ApprovalsForm apprvers=new ApprovalsForm();
				apprvers.setPriority(rsApprDetails.getString("Priority"));
				
				
				
				
			
				
				apprvers.setPriority(rsApprDetails.getString("Priority"));
				if(jk==1){
					
					apprvers.setPriority(Integer.toString(listApprers.size()+1));
				}
				apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
				String empCode=rsApprDetails.getString("Approver_Id");
				
				String recordStatus="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
						+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
						+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode+"' and it.Approver_Id=all_r.Last_Approver  and all_r.Req_Type='IT Request' and "
						+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
						+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
				
				ResultSet rsAppInfo=ad.selectQuery(recordStatus);
				if(rsAppInfo.next())
				{
					
					if(rsAppInfo.getInt("Priority")==1 )
					{
						 chkdate=rsAppInfo.getString("approved_date");
						 chkdate1=rsAppInfo.getString("rejected_date");
					}
					apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
					String approveStatus=rsAppInfo.getString("Req_Status");
					if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
					{
					apprvers.setDate(rsAppInfo.getString("approved_date"));
					}else{
						apprvers.setDate(rsAppInfo.getString("rejected_date"));
					}
					String comments="";
					comments=rsAppInfo.getString("Comments");
					if(comments=="null" )
					{
						apprvers.setComments("");
					}else{
						apprvers.setComments(rsAppInfo.getString("Comments"));
					}
				}
				apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
				
				listApprers.add(apprvers);
				
			}
				//IT ENGINEER DETAIlS
				
				
				String getApprDetails1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' and it.Priority=1    group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
				ResultSet rsApprDetails1=ad.selectQuery(getApprDetails1);
				
					while(rsApprDetails1.next())
					{
						checkStatus=1;
						ApprovalsForm apprvers=new ApprovalsForm();
						apprvers.setPriority(Integer.toString(listApprers.size()+1));
						
						apprvers.setEmployeeCode(rsApprDetails1.getString("Approver_Id"));
						String empCode1=rsApprDetails1.getString("Approver_Id");
						
						String recordStatus1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
								+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
								+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode1+"' and it.Approver_Id=all_r.Last_Approver and all_r.Req_Type='IT Request' and "
								+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
								+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
						
						ResultSet rsAppInfo1=ad.selectQuery(recordStatus1);
						if(rsAppInfo1.next())
						{
							
							String approveStatus=rsAppInfo1.getString("Req_Status");
							if(approveStatus.equalsIgnoreCase("Approved"))
							{
								recordStatus1=recordStatus1+" order by all_r.approved_date desc ";
								ResultSet rsAppInfo2=ad.selectQuery(recordStatus1);
								if(rsAppInfo2.next())
								{
									if(!chkdate.equalsIgnoreCase(rsAppInfo2.getString("approved_date")))
									{
										apprvers.setApproveStatus("Closed");
									apprvers.setDate(rsAppInfo2.getString("approved_date"));
									
								
								
								String comments="";
								comments=rsAppInfo2.getString("Comments");
								if(comments=="null" )
								{
									apprvers.setComments("");
								}else{
									apprvers.setComments(rsAppInfo2.getString("Comments"));
								}
								}
								}
							}else{
								
								recordStatus1=recordStatus1+" order by all_r.rejected_date desc ";
								ResultSet rsAppInfo3=ad.selectQuery(recordStatus1);
								if(rsAppInfo3.next())
								{
									if(!chkdate1.equalsIgnoreCase(rsAppInfo3.getString("rejected_date")))
									{
									apprvers.setDate(rsAppInfo3.getString("rejected_date"));
									}
								
								String comments="";
								comments=rsAppInfo3.getString("Comments");
								if(comments=="null" )
								{
									apprvers.setComments("");
								}else{
									apprvers.setComments(rsAppInfo3.getString("Comments"));
								}
								}
							}
							
						}
						apprvers.setEmployeeName(rsApprDetails1.getString("EMP_FULLNAME"));
				
					listApprers.add(apprvers);
					}
				
				request.setAttribute("approverDetails", listApprers);
			
		} 
		
			catch (SQLException e) {
			e.printStackTrace();
		}
		
		
		
		if(approverPriority==1)
		{
		forwardType="AduserTransferformENG";
		}
		else{
		forwardType="AduserTransferformAppr";
		}
			
				
			}
			
			if(ITType.equalsIgnoreCase("Email ID Create Request"))
			{
				LinkedList LotusIDCreation = new LinkedList();
				String empno = user.getEmployeeNo();

				String data = "select emp.PERNR,emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE "
						+ "from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"
						+ empID
						+ "' and "
						+ "dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";
				ResultSet rs = ad.selectQuery(data);
				try {
					while (rs.next()) {

						pendAppForm.setRequestername(rs
								.getString("EMP_FULLNAME"));
						pendAppForm.setRequesterdepartment(rs
								.getString("DPTSTXT"));
						pendAppForm.setRequesterdesignation(rs
								.getString("DSGSTXT"));
						pendAppForm.setExtno(rs.getString("TEL_EXTENS"));
						pendAppForm.setIpPhoneno(rs.getString("IP_PHONE"));
						pendAppForm.setLocation(rs
								.getString("LOCATION_CODE"));
						pendAppForm.setEmpno(rs.getString("PERNR"));

					}
				} catch (SQLException e) {
					e.printStackTrace();
				}
				
				

						ArrayList desgList=new ArrayList();
						ArrayList desgLabelList=new ArrayList();
						ResultSet rs16 = ad.selectQuery("select dsgid," +
								"DSGLTXT from DESIGNATION order by DSGLTXT"); 
								try {
									while(rs16.next()) {
										desgList.add(rs16.getString("dsgid"));
										desgLabelList.add(rs16.getString("DSGLTXT"));
									}
									rs16.close();
								} catch (SQLException e) {
									// TODO Auto-generated catch block
									
									e.printStackTrace();
								}
								
								pendAppForm.setDesgList(desgList);
								pendAppForm.setDesgLabelList(desgLabelList);
						
						
						
						
						ArrayList deptList=new ArrayList();
										ArrayList deptLabelList=new ArrayList();
										ResultSet rs161 = ad.selectQuery("select dptid," +
												"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
												try {
													while(rs161.next()) {
														deptList.add(rs161.getString("dptid"));
														deptLabelList.add(rs161.getString("DPTLTXT"));
													}
													rs16.close();
												} catch (SQLException e) {
													// TODO Auto-generated catch block
													e.printStackTrace();
												}
												
												pendAppForm.setDeptList(deptList);
												pendAppForm.setDeptLabelList(deptLabelList);
						
				
				String raisedby = "";
				String requester = "";
				String data1 = " select * from IT_HELPDESK where Req_No="
						+ reqId + "";
				ResultSet rs1 = ad.selectQuery(data1);
				try {
					while (rs1.next()) {
						
						raisedby=rs1.getString("raisedBy");
						
						if(!raisedby.equalsIgnoreCase(empID))
						{
						
						
						String da1 = "select emp.PERNR,emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE "
								+ "from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"
								+ raisedby
								+ "' and "
								+ "dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";
						ResultSet r1 = ad.selectQuery(da1);
						try {
							while (r1.next()) {

								pendAppForm.setRequestedforname(r1
										.getString("EMP_FULLNAME"));
								pendAppForm.setRequestedfordepartment(r1
										.getString("DPTSTXT"));
								pendAppForm.setRequestedfordesignation(r1
										.getString("DSGSTXT"));						
								pendAppForm.setRequestedforlocation(r1
										.getString("LOCATION_CODE"));
								

							}
						} catch (SQLException e) {
							e.printStackTrace();
						}
						
						request.setAttribute("showothr", "showothr");
						}
						
						requester = rs1.getString("Emp_No");
						pendAppForm.setAdloginname(rs1
								.getString("ADLoginName"));
						pendAppForm.setSuggestedEmailId(rs1
								.getString("SuggestedEmailId"));

						String x = rs1.getString("comm_outside");
						if (x.equalsIgnoreCase("Yes")) {
							pendAppForm.setOutsidecomyes("Yes");
						}
						if (x.equalsIgnoreCase("No")) {
							pendAppForm.setOutsidecomno("No");
						}

						pendAppForm.setIsHeHod(rs1.getString("Is_He_Hod"));
						pendAppForm.setIsthisCommonId(rs1.getString("Is_This_common_ID"));
						pendAppForm.setEnablewebAccess(rs1.getString("Enable_Web_access"));
						pendAppForm.setReason(rs1.getString("Reason"));
						pendAppForm.setHostname(rs1.getString("HostName"));
						pendAppForm.setIPNumber(rs1.getString("IPAddress"));
						pendAppForm.setTotalmailIdDept(rs1.getInt("TotalEmailIdInDepartment"));
						pendAppForm.setTotalmailIdloc(rs1.getInt("TotalEmailIdInLocation"));
						pendAppForm.setReqPriority(rs1.getString("Req_Priority"));
						pendAppForm
								.setFirstname(rs1.getString("Frst_Name"));
						pendAppForm.setLastname(rs1.getString("Last_Name"));
						pendAppForm.setMiddname(rs1
								.getString("Middle_Name"));
						pendAppForm.setDesignation(rs1.getString("designation"));
						pendAppForm.setDepartment(rs1.getString("department"));
						String newlyJoinined = rs1
								.getString("newly_Joinied");
						if (newlyJoinined.equals("Yes")) {
							pendAppForm.setNewlyJoinedYes("true");
						} else {
							pendAppForm.setNewlyJoinedNo("true");
						}
						pendAppForm.setJoiningDate(rs1
								.getString("joining_date"));
						pendAppForm.setTotalIDs(rs1
								.getString("Total_Mailids"));
						pendAppForm.setMailIDRetained(rs1
								.getString("OldMailID_Retained"));
						String allowOutSideComm = rs1
								.getString("comm_outside");
						if (allowOutSideComm.equals("Yes"))
							pendAppForm.setOutsidecomyes("true");
						else
							pendAppForm.setOutsidecomno("true");
						String rmk = rs1.getString("Remarks");
						if (rmk != null) {
							pendAppForm
									.setRemarks(rs1.getString("Remarks"));
							request.setAttribute("Remark", "Remark");
						}
					}
				} catch (SQLException e) {
					e.printStackTrace();
				}

				LotusIDCreation.add(pendAppForm);
				request.setAttribute("LotusIDCreation", LotusIDCreation);

				// Approver Details
				int checkStatus = 0;
				LinkedList listApprers = new LinkedList();
				int jk = 0;
				// HOD

				int hodpresent = 0;
				int hodpresentinIt = 0;
				String HODPresentId = "";
				String HODPresentname = "";
				String itengineerid = "";
				String itengineername = "";
				String HOD = "";
				String pendingApprovers = "";

				// chk if he has Hod
				String chkhod = "select count(*) from ESS_Approvers where employeeNumber='"
						+ empID + "'  ";
				ResultSet rs10 = ad.selectQuery(chkhod);
				try {
					while (rs10.next()) {
						hodpresent = rs10.getInt(1);
					}
				} catch (SQLException e1) {

					e1.printStackTrace();
				}

				// get hod details

				if (hodpresent > 0) {
					String gethod = "select ess.ApproverId,emp.EMP_FULLNAME from ESS_Approvers  as ess,emp_official_info as emp  "
							+ " where employeeNumber='"
							+ empID
							+ "'  and essType='Leave' and emp.PERNR=ess.ApproverId ";
					ResultSet rs2 = ad.selectQuery(gethod);

					try {
						if (rs2.next()) {

							HODPresentId = rs2.getString("ApproverId");
							HODPresentname = rs2.getString("EMP_FULLNAME");
						}
					} catch (SQLException e) {

						e.printStackTrace();
					}
				}

				// chk if he is present in It approver
				String chkhodinit = "select count(*) from IT_Approvers where Approver_ID='"
						+ HODPresentId
						+ "' and Req_Type = '"
						+ ITType
						+ "'  and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
						+ empID + "'))";
				ResultSet rs11 = ad.selectQuery(chkhodinit);
				try {
					while (rs11.next()) {
						hodpresentinIt = rs11.getInt(1);
					}
				} catch (SQLException e1) {

					e1.printStackTrace();
				}

				// Plant head
				String plantheadid = "";
				String plantheadname = "";
				String plantheaddep = "";
				String plantheaddesg = "";
				String a = "";
				String userx = "select loc.LOCID from Location as loc,emp_official_info as emp where loc.LOCATION_CODE=emp.LOCID and emp.PERNR='"
						+ requester + "' ";
				ResultSet userrs = ad.selectQuery(userx);
				try {
					while (userrs.next()) {
						a = userrs.getString("LOCID");
					}
				} catch (SQLException e2) {
					// TODO Auto-generated catch block
					e2.printStackTrace();
				}
				if (!a.equalsIgnoreCase("16")) {
					String plant = "select pl.Plant,pl.PERNR,emp.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from PLANT_HEAD pl,emp_official_info emp,DEPARTMENT dep,DESIGNATION desg where Plant=(select LOCATION_CODE from Location where LOCID='"
							+ a
							+ "') and emp.PERNR=pl.PERNR and dep.DPTID=emp.DPTID and desg.DSGID=emp.DSGID";
					ResultSet pl = ad.selectQuery(plant);
					try {
						while (pl.next()) {
							plantheadid = pl.getString("pernr");
							plantheadname = pl.getString("EMP_FULLNAME");
							plantheaddep = pl.getString("DPTSTXT");
							plantheaddesg = pl.getString("DSGSTXT");
						}
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				if (plantheadid.equalsIgnoreCase("")) {

					if (hodpresent > 0 && hodpresentinIt == 0) {

						try {

							checkStatus = 1;
							ApprovalsForm apprvershod = new ApprovalsForm();
							apprvershod.setPriority("1");

							apprvershod.setEmployeeCode(HODPresentId);
							apprvershod.setEmployeeName(HODPresentname);

							String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
									+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
									+ reqId
									+ "' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
									+ empID
									+ "')) AND "
									+ "all_r.Last_Approver='"
									+ HODPresentId
									+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
									+ ITType
									+ "' and emp.PERNR=all_r.Last_Approver"
									+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

							ResultSet rsAppInfo = ad
									.selectQuery(recordStatus);
							if (rsAppInfo.next()) {
								apprvershod.setApproveStatus(rsAppInfo
										.getString("Req_Status"));
								String approveStatus = rsAppInfo
										.getString("Req_Status");
								if (approveStatus
										.equalsIgnoreCase("Approved")
										|| approveStatus
												.equalsIgnoreCase("Completed")) {
									apprvershod.setDate(rsAppInfo
											.getString("approved_date"));
								} else {
									apprvershod.setDate(rsAppInfo
											.getString("rejected_date"));
								}
								String comments = "";
								comments = rsAppInfo.getString("Comments");
								if (comments == "null") {
									apprvershod.setComments("");
								} else {
									apprvershod.setComments(rsAppInfo
											.getString("Comments"));
								}
							}

							listApprers.add(apprvershod);
							jk = 1;
						}

						catch (SQLException e1) {

							e1.printStackTrace();
						}

					}
				}

				if (!plantheadid.equalsIgnoreCase("")) {

					try {

						checkStatus = 1;
						ApprovalsForm apprvershod = new ApprovalsForm();
						apprvershod.setPriority("1");

						apprvershod.setEmployeeCode(plantheadid);
						apprvershod.setEmployeeName(plantheadname);

						String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
								+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
								+ reqId
								+ "' and it.LOCATION_ID='"
								+ user.getPlantId()
								+ "' AND "
								+ "all_r.Last_Approver='"
								+ plantheadid
								+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
								+ ITType
								+ "' and emp.PERNR=all_r.Last_Approver"
								+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

						ResultSet rsAppInfo = ad.selectQuery(recordStatus);
						if (rsAppInfo.next()) {
							apprvershod.setApproveStatus(rsAppInfo
									.getString("Req_Status"));
							String approveStatus = rsAppInfo
									.getString("Req_Status");
							if (approveStatus.equalsIgnoreCase("Approved")
									|| approveStatus
											.equalsIgnoreCase("Created")) {
								apprvershod.setDate(rsAppInfo
										.getString("approved_date"));
							} else {
								apprvershod.setDate(rsAppInfo
										.getString("rejected_date"));
							}
							String comments = "";
							comments = rsAppInfo.getString("Comments");
							if (comments == "null") {
								apprvershod.setComments("");
							} else {
								apprvershod.setComments(rsAppInfo
										.getString("Comments"));
							}
						}

						listApprers.add(apprvershod);
						jk = 1;
					}

					catch (SQLException e1) {

						e1.printStackTrace();
					}

				}

				String getApprDetails = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
						+ empID
						+ "'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"
						+ ITType
						+ "' group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
				ResultSet rsApprDetails = ad.selectQuery(getApprDetails);
				try {
					while (rsApprDetails.next()) {

						checkStatus = 1;
						ApprovalsForm apprvers = new ApprovalsForm();
						apprvers.setPriority(rsApprDetails
								.getString("Priority"));

						apprvers.setPriority(rsApprDetails
								.getString("Priority"));
						if (jk == 1) {

							apprvers.setPriority(Integer
									.toString(listApprers.size() + 1));
						}
						apprvers.setEmployeeCode(rsApprDetails
								.getString("Approver_Id"));
						String empCode = rsApprDetails
								.getString("Approver_Id");

						String recordStatus = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
								+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
								+ reqId
								+ "' "
								+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
								+ empID
								+ "')) AND all_r.Last_Approver='"
								+ empCode
								+ "' and it.Approver_Id=all_r.Last_Approver  and all_r.Req_Type='IT Request' and "
								+ "it.Req_Type='"
								+ ITType
								+ "' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
								+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";

						ResultSet rsAppInfo = ad.selectQuery(recordStatus);
						if (rsAppInfo.next()) {

							if (rsAppInfo.getInt("Priority") == 1) {
								chkdate = rsAppInfo
										.getString("approved_date");
								chkdate1 = rsAppInfo
										.getString("rejected_date");
							}
							apprvers.setApproveStatus(rsAppInfo
									.getString("Req_Status"));
							String approveStatus = rsAppInfo
									.getString("Req_Status");
							if (approveStatus.equalsIgnoreCase("Approved")
									|| approveStatus
											.equalsIgnoreCase("Completed")) {
								apprvers.setDate(rsAppInfo
										.getString("approved_date"));
							} else {
								apprvers.setDate(rsAppInfo
										.getString("rejected_date"));
							}
							String comments = "";
							comments = rsAppInfo.getString("Comments");
							if (comments == "null") {
								apprvers.setComments("");
							} else {
								apprvers.setComments(rsAppInfo
										.getString("Comments"));
							}
						}
						apprvers.setEmployeeName(rsApprDetails
								.getString("EMP_FULLNAME"));

						listApprers.add(apprvers);

					}
					// IT ENGINEER DETAIlS

					String getApprDetails1 = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
							+ empID
							+ "'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"
							+ ITType
							+ "' and it.Priority=1    group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
					ResultSet rsApprDetails1 = ad
							.selectQuery(getApprDetails1);

					while (rsApprDetails1.next()) {
						checkStatus = 1;
						ApprovalsForm apprvers = new ApprovalsForm();
						apprvers.setPriority(Integer.toString(listApprers
								.size() + 1));

						apprvers.setEmployeeCode(rsApprDetails1
								.getString("Approver_Id"));
						String empCode1 = rsApprDetails1
								.getString("Approver_Id");

						String recordStatus1 = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
								+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
								+ reqId
								+ "' "
								+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
								+ empID
								+ "')) AND all_r.Last_Approver='"
								+ empCode1
								+ "' and it.Approver_Id=all_r.Last_Approver and all_r.Req_Type='IT Request' and "
								+ "it.Req_Type='"
								+ ITType
								+ "' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
								+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";

						ResultSet rsAppInfo1 = ad
								.selectQuery(recordStatus1);
						if (rsAppInfo1.next()) {

							String approveStatus = rsAppInfo1
									.getString("Req_Status");
							if (approveStatus.equalsIgnoreCase("Approved")) {
								recordStatus1 = recordStatus1
										+ " order by all_r.approved_date desc ";
								ResultSet rsAppInfo2 = ad
										.selectQuery(recordStatus1);
								if (rsAppInfo2.next()) {
									if (!chkdate
											.equalsIgnoreCase(rsAppInfo2
													.getString("approved_date"))) {
										apprvers.setApproveStatus("Closed");
										apprvers.setDate(rsAppInfo2
												.getString("approved_date"));

										String comments = "";
										comments = rsAppInfo2
												.getString("Comments");
										if (comments == "null") {
											apprvers.setComments("");
										} else {
											apprvers.setComments(rsAppInfo2
													.getString("Comments"));
										}
									}
								}
							} else {

								recordStatus1 = recordStatus1
										+ " order by all_r.rejected_date desc ";
								ResultSet rsAppInfo3 = ad
										.selectQuery(recordStatus1);
								if (rsAppInfo3.next()) {
									if (!chkdate1
											.equalsIgnoreCase(rsAppInfo3
													.getString("rejected_date"))) {
										apprvers.setDate(rsAppInfo3
												.getString("rejected_date"));
									}

									String comments = "";
									comments = rsAppInfo3
											.getString("Comments");
									if (comments == "null") {
										apprvers.setComments("");
									} else {
										apprvers.setComments(rsAppInfo3
												.getString("Comments"));
									}
								}
							}

						}
						apprvers.setEmployeeName(rsApprDetails1
								.getString("EMP_FULLNAME"));

						listApprers.add(apprvers);
					}

					request.setAttribute("approverDetails", listApprers);

				}

				catch (SQLException e) {
					e.printStackTrace();
				}
				if (approverPriority == 1) {
					forwardType = "LotusIDCreationENG";
				} else {
					forwardType = "LotusIDCreationAppr";
				}
			}
			
			
			if(ITType.equalsIgnoreCase("Email ID Change Request"))
			{

				LinkedList LotusIDChange=new LinkedList();
				String empno=user.getEmployeeNo();
				
				String data="select emp.PERNR,emp.PERNR,emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE " +
						"from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"+empID+"' and " +
						"dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";	
				ResultSet rs= ad.selectQuery(data);
				try {
					while(rs.next())
					{
						pendAppForm.setRequestername(rs.getString("EMP_FULLNAME"));
						pendAppForm.setRequesterdepartment(rs.getString("DPTSTXT"));
						pendAppForm.setRequesterdesignation(rs.getString("DSGSTXT"));
						pendAppForm.setExtno(rs.getString("TEL_EXTENS"));
						pendAppForm.setIpPhoneno(rs.getString("IP_PHONE"));
						pendAppForm.setLocation(rs.getString("LOCATION_CODE"));
						pendAppForm.setEmpno(rs.getString("PERNR"));
						
					}
				} catch (SQLException e) {
				  e.printStackTrace();
				}
				String requester="";
				String data1=" select * from IT_HELPDESK where Req_No="+reqId+"";	
				ResultSet rs1= ad.selectQuery(data1);
				try {
					while(rs1.next())
					{
						requester=rs1.getString("Emp_No");
						pendAppForm.setAdloginname(rs1.getString("ADLoginName"));
						pendAppForm.setFromemailId(rs1.getString("From_EmailID"));
						String x=rs1.getString("comm_outside");
						if(x.equalsIgnoreCase("Yes"))
						{
							pendAppForm.setOutsidecomyes("true");
						}
						if(x.equalsIgnoreCase("No"))
						{
							pendAppForm.setOutsidecomno("true");
						}
						
						String  newlyJoinined=rs1.getString("newly_Joinied");
						if(newlyJoinined.equals("Yes")){
							pendAppForm.setNewlyJoinedYes("true");
						}else{
							pendAppForm.setNewlyJoinedNo("true");
						}
						
						pendAppForm.setTotalIDs(rs1.getString("Total_Mailids"));
						pendAppForm.setJoiningDate(rs1.getString("joining_date"));
						pendAppForm.setFirstname(rs1.getString("Frst_Name"));
						pendAppForm.setLastname(rs1.getString("Last_Name"));
						pendAppForm.setMiddname(rs1.getString("Middle_Name"));
						pendAppForm.setDeleteoldmails(rs1.getString("delete_old_email"));
						pendAppForm.setSuggestedEmailId(rs1.getString("SuggestedEmailId"));
						pendAppForm.setIsHeHod(rs1.getString("Is_He_Hod"));
						pendAppForm.setTransferoldmail(rs1.getString("Transfer_Old_Emails"));
						pendAppForm.setIsthisCommonId(rs1.getString("Is_This_common_ID"));
						pendAppForm.setEnablewebAccess(rs1.getString("Enable_Web_access"));
						pendAppForm.setReason(rs1.getString("Reason"));
						pendAppForm.setHostname(rs1.getString("HostName"));
						pendAppForm.setIPNumber(rs1.getString("IPAddress"));
						pendAppForm.setTotalmailIdDept(rs1.getInt("TotalEmailIdInDepartment"));
						pendAppForm.setTotalmailIdloc(rs1.getInt("TotalEmailIdInLocation"));
						pendAppForm.setReqPriority(rs1.getString("Req_Priority"));
						
						String rmk=rs1.getString("Remarks");
						if(rmk!=null)
						{
							pendAppForm.setRemarks(rs1.getString("Remarks"));
							request.setAttribute("Remark", "Remark");
						}
					}
				} catch (SQLException e) {
					  e.printStackTrace();
					}
				LotusIDChange.add(reqId);
				request.setAttribute("LotusIDChange", LotusIDChange);
				
				//Approver Details
				int  checkStatus=0;
				LinkedList listApprers=new LinkedList();
				int jk=0;
				//HOD

				int hodpresent=0;
				int hodpresentinIt=0;
				String HODPresentId="";
				String HODPresentname="";
				String itengineerid="";
				String itengineername="";
				String HOD="";
				String	pendingApprovers="";
				
				 //chk if he has Hod
				 String chkhod="select count(*) from ESS_Approvers where employeeNumber='"+empID+"'  ";
				 ResultSet rs10= ad.selectQuery(chkhod);
				 try {
					while(rs10.next())
					 {
						 hodpresent=rs10.getInt(1);
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				
				//get hod details
				
			
				if(hodpresent>0){
				String gethod="select ess.ApproverId,emp.EMP_FULLNAME from ESS_Approvers  as ess,emp_official_info as emp  " +
						" where employeeNumber='"+empID+"'  and essType='Leave' and emp.PERNR=ess.ApproverId ";
				 ResultSet rs2= ad.selectQuery(gethod);
				 
				 try {
					if(rs2.next())
					 {
					
						HODPresentId=rs2.getString("ApproverId");
						HODPresentname=rs2.getString("EMP_FULLNAME");
					 }
				} catch (SQLException e) {
					
					e.printStackTrace();
				}
				}
				
				//chk if he is present in It approver
				 String chkhodinit="select count(*) from IT_Approvers where Approver_ID='"+HODPresentId+"' and Req_Type = '"+ITType+"'  and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))";
				 ResultSet rs11= ad.selectQuery(chkhodinit);
				 try {
					while(rs11.next())
					 {
						hodpresentinIt=rs11.getInt(1);
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				 
				 
				 
				//Plant head
					String plantheadid="";
					String plantheadname="";
					String plantheaddep="";
					String plantheaddesg="";
					String a="";
					String userx="select loc.LOCID from Location as loc,emp_official_info as emp where loc.LOCATION_CODE=emp.LOCID and emp.PERNR='"+requester+"' ";
					ResultSet userrs=ad.selectQuery(userx);
					try {
						while(userrs.next())
						 {				
							a=userrs.getString("LOCID");
						 }
					} catch (SQLException e2) {
						// TODO Auto-generated catch block
						e2.printStackTrace();
					}
					if(!a.equalsIgnoreCase("16"))
					{
						String plant ="select pl.Plant,pl.PERNR,emp.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from PLANT_HEAD pl,emp_official_info emp,DEPARTMENT dep,DESIGNATION desg where Plant=(select LOCATION_CODE from Location where LOCID='"+a+"') and emp.PERNR=pl.PERNR and dep.DPTID=emp.DPTID and desg.DSGID=emp.DSGID";
						ResultSet pl=ad.selectQuery(plant);
						try {
							while(pl.next())
							 {
								plantheadid=pl.getString("pernr");
								plantheadname=pl.getString("EMP_FULLNAME");
								plantheaddep=pl.getString("DPTSTXT");
								plantheaddesg=pl.getString("DSGSTXT");
							 }
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					if(plantheadid.equalsIgnoreCase(""))
					{
						if(hodpresent>0 && hodpresentinIt==0 )
						{
						
						try {
							
								checkStatus=1;
								ApprovalsForm apprvershod=new ApprovalsForm();
								apprvershod.setPriority("1");
								
								apprvershod.setEmployeeCode(HODPresentId);
								apprvershod.setEmployeeName(HODPresentname);
								
								String recordStatus="select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
							+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND "
							+ "all_r.Last_Approver='"+HODPresentId+"' and all_r.Req_Type='IT Request' and it.Req_Type='"+ITType+"' and emp.PERNR=all_r.Last_Approver"
							+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";
								
								ResultSet rsAppInfo=ad.selectQuery(recordStatus);
								if(rsAppInfo.next())
								{
									apprvershod.setApproveStatus(rsAppInfo.getString("Req_Status"));
									String approveStatus=rsAppInfo.getString("Req_Status");
									if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
									{
										apprvershod.setDate(rsAppInfo.getString("approved_date"));
									}else{
										apprvershod.setDate(rsAppInfo.getString("rejected_date"));
									}
									String comments="";
									comments=rsAppInfo.getString("Comments");
									if(comments=="null" )
									{
										apprvershod.setComments("");
									}else{
										apprvershod.setComments(rsAppInfo.getString("Comments"));
									}
								}
								
								
								listApprers.add(apprvershod);
							 jk=1;
							}
						
						catch (SQLException e1) {
							
							e1.printStackTrace();
						}
						
					}
					}
					
					if(!plantheadid.equalsIgnoreCase(""))
					{
						
						
						try {
							
								checkStatus=1;
								ApprovalsForm apprvershod=new ApprovalsForm();
								apprvershod.setPriority("1");
								
								apprvershod.setEmployeeCode(plantheadid);
								apprvershod.setEmployeeName(plantheadname);
								
								String recordStatus="select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
							+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and it.LOCATION_ID='"+user.getPlantId()+"' AND "
							+ "all_r.Last_Approver='"+plantheadid+"' and all_r.Req_Type='IT Request' and it.Req_Type='"+ITType+"' and emp.PERNR=all_r.Last_Approver"
							+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";
								
								ResultSet rsAppInfo=ad.selectQuery(recordStatus);
								if(rsAppInfo.next())
								{
									apprvershod.setApproveStatus(rsAppInfo.getString("Req_Status"));
									String approveStatus=rsAppInfo.getString("Req_Status");
									if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Created"))
									{
										apprvershod.setDate(rsAppInfo.getString("approved_date"));
									}else{
										apprvershod.setDate(rsAppInfo.getString("rejected_date"));
									}
									String comments="";
									comments=rsAppInfo.getString("Comments");
									if(comments=="null" )
									{
										apprvershod.setComments("");
									}else{
										apprvershod.setComments(rsAppInfo.getString("Comments"));
									}
								}
								
								
								listApprers.add(apprvershod);
							 jk=1;
							}
						
						catch (SQLException e1) {
							
							e1.printStackTrace();
						}
						
					}
				
			
				
				
				String getApprDetails="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
				ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
				try {
					while(rsApprDetails.next())
					{
					
						checkStatus=1;
						ApprovalsForm apprvers=new ApprovalsForm();
						apprvers.setPriority(rsApprDetails.getString("Priority"));
						
						
						
						
					
						
						apprvers.setPriority(rsApprDetails.getString("Priority"));
						if(jk==1){
							
							apprvers.setPriority(Integer.toString(listApprers.size()+1));
						}
						apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
						String empCode=rsApprDetails.getString("Approver_Id");
						
						String recordStatus="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
								+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
								+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode+"' and it.Approver_Id=all_r.Last_Approver  and all_r.Req_Type='IT Request' and "
								+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
								+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
						
						ResultSet rsAppInfo=ad.selectQuery(recordStatus);
						if(rsAppInfo.next())
						{
							
							if(rsAppInfo.getInt("Priority")==1 )
							{
								 chkdate=rsAppInfo.getString("approved_date");
								 chkdate1=rsAppInfo.getString("rejected_date");
							}
							apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
							String approveStatus=rsAppInfo.getString("Req_Status");
							if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
							{
							apprvers.setDate(rsAppInfo.getString("approved_date"));
							}else{
								apprvers.setDate(rsAppInfo.getString("rejected_date"));
							}
							String comments="";
							comments=rsAppInfo.getString("Comments");
							if(comments=="null" )
							{
								apprvers.setComments("");
							}else{
								apprvers.setComments(rsAppInfo.getString("Comments"));
							}
						}
						apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
						
						listApprers.add(apprvers);
						
					}
						//IT ENGINEER DETAIlS
						
						
						String getApprDetails1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' and it.Priority=1    group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
						ResultSet rsApprDetails1=ad.selectQuery(getApprDetails1);
						
							while(rsApprDetails1.next())
							{
								checkStatus=1;
								ApprovalsForm apprvers=new ApprovalsForm();
								apprvers.setPriority(Integer.toString(listApprers.size()+1));
								
								apprvers.setEmployeeCode(rsApprDetails1.getString("Approver_Id"));
								String empCode1=rsApprDetails1.getString("Approver_Id");
								
								String recordStatus1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
										+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
										+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode1+"' and it.Approver_Id=all_r.Last_Approver and all_r.Req_Type='IT Request' and "
										+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
										+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
								
								ResultSet rsAppInfo1=ad.selectQuery(recordStatus1);
								if(rsAppInfo1.next())
								{
									
									String approveStatus=rsAppInfo1.getString("Req_Status");
									if(approveStatus.equalsIgnoreCase("Approved"))
									{
										recordStatus1=recordStatus1+" order by all_r.approved_date desc ";
										ResultSet rsAppInfo2=ad.selectQuery(recordStatus1);
										if(rsAppInfo2.next())
										{
											if(!chkdate.equalsIgnoreCase(rsAppInfo2.getString("approved_date")))
											{
												apprvers.setApproveStatus("Closed");
											apprvers.setDate(rsAppInfo2.getString("approved_date"));
											
										
										
										String comments="";
										comments=rsAppInfo2.getString("Comments");
										if(comments=="null" )
										{
											apprvers.setComments("");
										}else{
											apprvers.setComments(rsAppInfo2.getString("Comments"));
										}
										}
										}
									}else{
										
										recordStatus1=recordStatus1+" order by all_r.rejected_date desc ";
										ResultSet rsAppInfo3=ad.selectQuery(recordStatus1);
										if(rsAppInfo3.next())
										{
											if(!chkdate1.equalsIgnoreCase(rsAppInfo3.getString("rejected_date")))
											{
											apprvers.setDate(rsAppInfo3.getString("rejected_date"));
											}
										
										String comments="";
										comments=rsAppInfo3.getString("Comments");
										if(comments=="null" )
										{
											apprvers.setComments("");
										}else{
											apprvers.setComments(rsAppInfo3.getString("Comments"));
										}
										}
									}
									
								}
								apprvers.setEmployeeName(rsApprDetails1.getString("EMP_FULLNAME"));
						
							listApprers.add(apprvers);
							}
						
						request.setAttribute("approverDetails", listApprers);
					
				} 
				
					catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				if(approverPriority==1)
				{
					forwardType="LotusIDChangeENG";
				}
				else{
				forwardType="LotusIDChangeAppr";
				}
			}
			
			if(ITType.equalsIgnoreCase("Email ID Delete Request"))
			{


				LinkedList LotusIDDeletion=new LinkedList();
				String empno=user.getEmployeeNo();
				
				String data="select emp.PERNR,emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE " +
						"from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"+empID+"' and " +
						"dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";	
				ResultSet rs= ad.selectQuery(data);
				try {
					while(rs.next())
					{
						
						
						pendAppForm.setRequestername(rs.getString("EMP_FULLNAME"));
						pendAppForm.setRequesterdepartment(rs.getString("DPTSTXT"));
						pendAppForm.setRequesterdesignation(rs.getString("DSGSTXT"));
						pendAppForm.setExtno(rs.getString("TEL_EXTENS"));
						pendAppForm.setIpPhoneno(rs.getString("IP_PHONE"));
						pendAppForm.setLocation(rs.getString("LOCATION_CODE"));
					
						pendAppForm.setEmpno(rs.getString("PERNR"));
						
					}
				} catch (SQLException e) {
				  e.printStackTrace();
				}
				String requester="";
				String data1=" select * from IT_HELPDESK where Req_No="+reqId+"";	
				ResultSet rs1= ad.selectQuery(data1);
				try {
					while(rs1.next())
					{
						requester=rs1.getString("Emp_No");
						pendAppForm.setAdloginname(rs1.getString("ADLoginName"));
						pendAppForm.setSuggestedEmailId(rs1.getString("SuggestedEmailId"));
						pendAppForm.setIsHeHod(rs1.getString("Is_He_Hod"));
						pendAppForm.setIsthisCommonId(rs1.getString("Is_This_common_ID"));
						pendAppForm.setEmailidDelete(rs1.getString("EmailID_Deleted"));
						pendAppForm.setDeletefrom(rs1.getString("Delete_From"));
						pendAppForm.setReason(rs1.getString("Reason"));
						pendAppForm.setReqPriority(rs1.getString("Req_Priority"));
						pendAppForm.setHostname(rs1.getString("HostName"));
						pendAppForm.setIPNumber(rs1.getString("IPAddress"));
						pendAppForm.setTotalmailIdDept(rs1.getInt("TotalEmailIdInDepartment"));
						pendAppForm.setTotalmailIdloc(rs1.getInt("TotalEmailIdInLocation"));
						pendAppForm.setForward_MailID(rs1.getString("forward_MailID"));
						pendAppForm.setMailIDPath(rs1.getString("path"));
						String x=rs1.getString("deletedDB");
						if(x.equalsIgnoreCase("Yes"))
						{
							pendAppForm.setDeletedDBYes("true");
						}
						if(x.equalsIgnoreCase("No"))
						{
							pendAppForm.setDeletedDBNo("true");
						}
						
						
						String rmk=rs1.getString("Remarks");
						if(rmk!=null)
						{
							pendAppForm.setRemarks(rs1.getString("Remarks"));
							request.setAttribute("Remark", "Remark");
						}
					}
				} catch (SQLException e) {
					  e.printStackTrace();
					}
				
				//Approver Details
				int  checkStatus=0;
				LinkedList listApprers=new LinkedList();
				int jk=0;
				//HOD

				int hodpresent=0;
				int hodpresentinIt=0;
				String HODPresentId="";
				String HODPresentname="";
				String itengineerid="";
				String itengineername="";
				String HOD="";
				String	pendingApprovers="";
				
				 //chk if he has Hod
				 String chkhod="select count(*) from ESS_Approvers where employeeNumber='"+empID+"'  ";
				 ResultSet rs10= ad.selectQuery(chkhod);
				 try {
					while(rs10.next())
					 {
						 hodpresent=rs10.getInt(1);
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				
				//get hod details
				
			
				if(hodpresent>0){
				String gethod="select ess.ApproverId,emp.EMP_FULLNAME from ESS_Approvers  as ess,emp_official_info as emp  " +
						" where employeeNumber='"+empID+"'  and essType='Leave' and emp.PERNR=ess.ApproverId ";
				 ResultSet rs2= ad.selectQuery(gethod);
				 
				 try {
					if(rs2.next())
					 {
					
						HODPresentId=rs2.getString("ApproverId");
						HODPresentname=rs2.getString("EMP_FULLNAME");
					 }
				} catch (SQLException e) {
					
					e.printStackTrace();
				}
				}
				
				//chk if he is present in It approver
				 String chkhodinit="select count(*) from IT_Approvers where Approver_ID='"+HODPresentId+"' and Req_Type = '"+ITType+"'  and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))";
				 ResultSet rs11= ad.selectQuery(chkhodinit);
				 try {
					while(rs11.next())
					 {
						hodpresentinIt=rs11.getInt(1);
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				 
				//Plant head
					String plantheadid="";
					String plantheadname="";
					String plantheaddep="";
					String plantheaddesg="";
					String a="";
					String userx="select loc.LOCID from Location as loc,emp_official_info as emp where loc.LOCATION_CODE=emp.LOCID and emp.PERNR='"+requester+"' ";
					ResultSet userrs=ad.selectQuery(userx);
					try {
						while(userrs.next())
						 {				
							a=userrs.getString("LOCID");
						 }
					} catch (SQLException e2) {
						// TODO Auto-generated catch block
						e2.printStackTrace();
					}
					if(!a.equalsIgnoreCase("16"))
					{
						String plant ="select pl.Plant,pl.PERNR,emp.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from PLANT_HEAD pl,emp_official_info emp,DEPARTMENT dep,DESIGNATION desg where Plant=(select LOCATION_CODE from Location where LOCID='"+a+"') and emp.PERNR=pl.PERNR and dep.DPTID=emp.DPTID and desg.DSGID=emp.DSGID";
						ResultSet pl=ad.selectQuery(plant);
						try {
							while(pl.next())
							 {
								plantheadid=pl.getString("pernr");
								plantheadname=pl.getString("EMP_FULLNAME");
								plantheaddep=pl.getString("DPTSTXT");
								plantheaddesg=pl.getString("DSGSTXT");
							 }
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					
					if(plantheadid.equalsIgnoreCase(""))
					{
				 
					if(hodpresent>0 && hodpresentinIt==0 )
					{
						
						
						try {
							
								checkStatus=1;
								ApprovalsForm apprvershod=new ApprovalsForm();
								apprvershod.setPriority("1");
								
								apprvershod.setEmployeeCode(HODPresentId);
								apprvershod.setEmployeeName(HODPresentname);
								
								String recordStatus="select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
							+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND "
							+ "all_r.Last_Approver='"+HODPresentId+"' and all_r.Req_Type='IT Request' and it.Req_Type='"+ITType+"' and emp.PERNR=all_r.Last_Approver"
							+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";
								
								ResultSet rsAppInfo=ad.selectQuery(recordStatus);
								if(rsAppInfo.next())
								{
									apprvershod.setApproveStatus(rsAppInfo.getString("Req_Status"));
									String approveStatus=rsAppInfo.getString("Req_Status");
									if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
									{
										apprvershod.setDate(rsAppInfo.getString("approved_date"));
									}else{
										apprvershod.setDate(rsAppInfo.getString("rejected_date"));
									}
									String comments="";
									comments=rsAppInfo.getString("Comments");
									if(comments=="null" )
									{
										apprvershod.setComments("");
									}else{
										apprvershod.setComments(rsAppInfo.getString("Comments"));
									}
								}
								
								
								listApprers.add(apprvershod);
							 jk=1;
							}
						
						catch (SQLException e1) {
							
							e1.printStackTrace();
						}
						
					}
					}
					
					if(!plantheadid.equalsIgnoreCase(""))
					{
						
						
						try {
							
								checkStatus=1;
								ApprovalsForm apprvershod=new ApprovalsForm();
								apprvershod.setPriority("1");
								
								apprvershod.setEmployeeCode(plantheadid);
								apprvershod.setEmployeeName(plantheadname);
								
								String recordStatus="select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
							+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and it.LOCATION_ID='"+user.getPlantId()+"' AND "
							+ "all_r.Last_Approver='"+plantheadid+"' and all_r.Req_Type='IT Request' and it.Req_Type='"+ITType+"' and emp.PERNR=all_r.Last_Approver"
							+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";
								
								ResultSet rsAppInfo=ad.selectQuery(recordStatus);
								if(rsAppInfo.next())
								{
									apprvershod.setApproveStatus(rsAppInfo.getString("Req_Status"));
									String approveStatus=rsAppInfo.getString("Req_Status");
									if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Created"))
									{
										apprvershod.setDate(rsAppInfo.getString("approved_date"));
									}else{
										apprvershod.setDate(rsAppInfo.getString("rejected_date"));
									}
									String comments="";
									comments=rsAppInfo.getString("Comments");
									if(comments=="null" )
									{
										apprvershod.setComments("");
									}else{
										apprvershod.setComments(rsAppInfo.getString("Comments"));
									}
								}
								
								
								listApprers.add(apprvershod);
							 jk=1;
							}
						
						catch (SQLException e1) {
							
							e1.printStackTrace();
						}
						
					}
				
				
			
				
				
				String getApprDetails="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
				ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
				try {
					while(rsApprDetails.next())
					{
					
						checkStatus=1;
						ApprovalsForm apprvers=new ApprovalsForm();
						apprvers.setPriority(rsApprDetails.getString("Priority"));
						
						
						
						
					
						
						apprvers.setPriority(rsApprDetails.getString("Priority"));
						if(jk==1){
							
							apprvers.setPriority(Integer.toString(listApprers.size()+1));
						}
						apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
						String empCode=rsApprDetails.getString("Approver_Id");
						
						String recordStatus="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
								+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
								+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode+"' and it.Approver_Id=all_r.Last_Approver  and all_r.Req_Type='IT Request' and "
								+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
								+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
						
						ResultSet rsAppInfo=ad.selectQuery(recordStatus);
						if(rsAppInfo.next())
						{
							
							if(rsAppInfo.getInt("Priority")==1 )
							{
								 chkdate=rsAppInfo.getString("approved_date");
								 chkdate1=rsAppInfo.getString("rejected_date");
							}
							apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
							String approveStatus=rsAppInfo.getString("Req_Status");
							if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
							{
							apprvers.setDate(rsAppInfo.getString("approved_date"));
							}else{
								apprvers.setDate(rsAppInfo.getString("rejected_date"));
							}
							String comments="";
							comments=rsAppInfo.getString("Comments");
							if(comments=="null" )
							{
								apprvers.setComments("");
							}else{
								apprvers.setComments(rsAppInfo.getString("Comments"));
							}
						}
						apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
						
						listApprers.add(apprvers);
						
					}
						//IT ENGINEER DETAIlS
						
						
						String getApprDetails1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' and it.Priority=1    group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
						ResultSet rsApprDetails1=ad.selectQuery(getApprDetails1);
						
							while(rsApprDetails1.next())
							{
								checkStatus=1;
								ApprovalsForm apprvers=new ApprovalsForm();
								apprvers.setPriority(Integer.toString(listApprers.size()+1));
								
								apprvers.setEmployeeCode(rsApprDetails1.getString("Approver_Id"));
								String empCode1=rsApprDetails1.getString("Approver_Id");
								
								String recordStatus1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
										+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
										+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode1+"' and it.Approver_Id=all_r.Last_Approver and all_r.Req_Type='IT Request' and "
										+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
										+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
								
								ResultSet rsAppInfo1=ad.selectQuery(recordStatus1);
								if(rsAppInfo1.next())
								{
									
									String approveStatus=rsAppInfo1.getString("Req_Status");
									if(approveStatus.equalsIgnoreCase("Approved"))
									{
										recordStatus1=recordStatus1+" order by all_r.approved_date desc ";
										ResultSet rsAppInfo2=ad.selectQuery(recordStatus1);
										if(rsAppInfo2.next())
										{
											if(!chkdate.equalsIgnoreCase(rsAppInfo2.getString("approved_date")))
											{
												apprvers.setApproveStatus("Closed");
											apprvers.setDate(rsAppInfo2.getString("approved_date"));
											
										
										
										String comments="";
										comments=rsAppInfo2.getString("Comments");
										if(comments=="null" )
										{
											apprvers.setComments("");
										}else{
											apprvers.setComments(rsAppInfo2.getString("Comments"));
										}
										}
										}
									}else{
										
										recordStatus1=recordStatus1+" order by all_r.rejected_date desc ";
										ResultSet rsAppInfo3=ad.selectQuery(recordStatus1);
										if(rsAppInfo3.next())
										{
											if(!chkdate1.equalsIgnoreCase(rsAppInfo3.getString("rejected_date")))
											{
											apprvers.setDate(rsAppInfo3.getString("rejected_date"));
											}
										
										String comments="";
										comments=rsAppInfo3.getString("Comments");
										if(comments=="null" )
										{
											apprvers.setComments("");
										}else{
											apprvers.setComments(rsAppInfo3.getString("Comments"));
										}
										}
									}
									
								}
								apprvers.setEmployeeName(rsApprDetails1.getString("EMP_FULLNAME"));
						
							listApprers.add(apprvers);
							}
						
						request.setAttribute("approverDetails", listApprers);
					
				} 
				
					catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				
				
				request.setAttribute("LotusIDDeletion", LotusIDDeletion);
				if(approverPriority==1)
				{
					forwardType="LotusIDDeleteENG";
				}
				else{
				forwardType="LotusIDDeleteAppr";
				}
			
				
			
			}
			
			if(ITType.equalsIgnoreCase("Internet Access Request"))
			{
				LinkedList internet=new LinkedList();
				String empno=user.getEmployeeNo();
				
				String data="select emp.PERNR,emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE " +
						"from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"+empID+"' and " +
						"dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";	
				ResultSet rs= ad.selectQuery(data);
				try {
					while(rs.next())
					{
						
						pendAppForm.setRequestername(rs.getString("EMP_FULLNAME"));
						pendAppForm.setRequesterdepartment(rs.getString("DPTSTXT"));
						pendAppForm.setRequesterdesignation(rs.getString("DSGSTXT"));
						pendAppForm.setExtno(rs.getString("TEL_EXTENS"));
						pendAppForm.setIpPhoneno(rs.getString("IP_PHONE"));
						pendAppForm.setLocation(rs.getString("LOCATION_CODE"));
					    pendAppForm.setEmpno(rs.getString("PERNR"));
						
						
					}
				} catch (SQLException e) {
				  e.printStackTrace();
				}
				String requester = "";
				String data1=" select * from IT_HELPDESK where Req_No="+reqId+"";	
				ResultSet rs1= ad.selectQuery(data1);
				try {
					while(rs1.next())
					{
						
						pendAppForm.setIsHeHod(rs1.getString("Is_He_Hod"));
						pendAppForm.setAssetvalue(rs1.getString("Asset_Details"));
						pendAppForm.setAdloginname(rs1.getString("ADLoginName"));
						pendAppForm.setReason(rs1.getString("Reason"));
						pendAppForm.setHostname(rs1.getString("HostName"));
						pendAppForm.setIPNumber(rs1.getString("IPAddress"));
						pendAppForm.setInternetgrp(rs1.getString("InternetGroupCategory"));
						pendAppForm.setReqPriority(rs1.getString("Req_Priority"));
						requester = rs1.getString("Emp_No");
						String rmk=rs1.getString("Remarks");
						if(rmk!=null)
						{
							pendAppForm.setRemarks(rs1.getString("Remarks"));
							request.setAttribute("Remark", "Remark");
						}
					}
				} catch (SQLException e) {
					  e.printStackTrace();
					}
						
				internet.add(pendAppForm);
				request.setAttribute("Internet", internet);
				
				//Approver Details
				int  checkStatus=0;
				LinkedList listApprers=new LinkedList();
				int jk=0;
				//HOD

				int hodpresent=0;
				int hodpresentinIt=0;
				String HODPresentId="";
				String HODPresentname="";
				String itengineerid="";
				String itengineername="";
				String HOD="";
				String	pendingApprovers="";
				
				 //chk if he has Hod
				 String chkhod="select count(*) from ESS_Approvers where employeeNumber='"+empID+"'  ";
				 ResultSet rs10= ad.selectQuery(chkhod);
				 try {
					while(rs10.next())
					 {
						 hodpresent=rs10.getInt(1);
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				
				//get hod details
				
			
				if(hodpresent>0){
				String gethod="select ess.ApproverId,emp.EMP_FULLNAME from ESS_Approvers  as ess,emp_official_info as emp  " +
						" where employeeNumber='"+empID+"'  and essType='Leave' and emp.PERNR=ess.ApproverId ";
				 ResultSet rs2= ad.selectQuery(gethod);
				 
				 try {
					if(rs2.next())
					 {
					
						HODPresentId=rs2.getString("ApproverId");
						HODPresentname=rs2.getString("EMP_FULLNAME");
					 }
				} catch (SQLException e) {
					
					e.printStackTrace();
				}
				}
				
				//chk if he is present in It approver
				 String chkhodinit="select count(*) from IT_Approvers where Approver_ID='"+HODPresentId+"' and Req_Type = '"+ITType+"'  and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))";
				 ResultSet rs11= ad.selectQuery(chkhodinit);
				 try {
					while(rs11.next())
					 {
						hodpresentinIt=rs11.getInt(1);
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				 
				// Plant head
					String plantheadid = "";
					String plantheadname = "";
					String plantheaddep = "";
					String plantheaddesg = "";
					String a = "";
					String userx = "select loc.LOCID from Location as loc,emp_official_info as emp where loc.LOCATION_CODE=emp.LOCID and emp.PERNR='"
					+ requester + "' ";
					ResultSet userrs = ad.selectQuery(userx);
					try {
						while (userrs.next()) {
							a = userrs.getString("LOCID");
						}
					} catch (SQLException e2) {
						// TODO Auto-generated catch block
						e2.printStackTrace();
					}
					if (!a.equalsIgnoreCase("16")) {
						String plant = "select pl.Plant,pl.PERNR,emp.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from PLANT_HEAD pl,emp_official_info emp,DEPARTMENT dep,DESIGNATION desg where Plant=(select LOCATION_CODE from Location where LOCID='"
								+ a
								+ "') and emp.PERNR=pl.PERNR and dep.DPTID=emp.DPTID and desg.DSGID=emp.DSGID";
						ResultSet pl = ad.selectQuery(plant);
						try {
							while (pl.next()) {
								plantheadid = pl.getString("pernr");
								plantheadname = pl.getString("EMP_FULLNAME");
								plantheaddep = pl.getString("DPTSTXT");
								plantheaddesg = pl.getString("DSGSTXT");
							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					if (plantheadid.equalsIgnoreCase("")) {

						if (hodpresent > 0 && hodpresentinIt == 0) {

							try {

								checkStatus = 1;
								ApprovalsForm apprvershod = new ApprovalsForm();
								apprvershod.setPriority("1");

								apprvershod.setEmployeeCode(HODPresentId);
								apprvershod.setEmployeeName(HODPresentname);

								String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
										+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
										+ reqId
										+ "' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
										+ empID
										+ "')) AND "
										+ "all_r.Last_Approver='"
										+ HODPresentId
										+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
										+ ITType
										+ "' and emp.PERNR=all_r.Last_Approver"
										+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

								ResultSet rsAppInfo = ad
										.selectQuery(recordStatus);
								if (rsAppInfo.next()) {
									apprvershod.setApproveStatus(rsAppInfo
											.getString("Req_Status"));
									String approveStatus = rsAppInfo
											.getString("Req_Status");
									if (approveStatus
											.equalsIgnoreCase("Approved")
											|| approveStatus
													.equalsIgnoreCase("Completed")) {
										apprvershod.setDate(rsAppInfo
												.getString("approved_date"));
									} else {
										apprvershod.setDate(rsAppInfo
												.getString("rejected_date"));
									}
									String comments = "";
									comments = rsAppInfo.getString("Comments");
									if (comments == "null") {
										apprvershod.setComments("");
									} else {
										apprvershod.setComments(rsAppInfo
												.getString("Comments"));
									}
								}

								listApprers.add(apprvershod);
								jk = 1;
							}

							catch (SQLException e1) {

								e1.printStackTrace();
							}

						}
					}

					if (!plantheadid.equalsIgnoreCase("")) {

						try {

							checkStatus = 1;
							ApprovalsForm apprvershod = new ApprovalsForm();
							apprvershod.setPriority("1");

							apprvershod.setEmployeeCode(plantheadid);
							apprvershod.setEmployeeName(plantheadname);

							String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
									+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
									+ reqId
									+ "' and it.LOCATION_ID='"
									+ user.getPlantId()
									+ "' AND "
									+ "all_r.Last_Approver='"
									+ plantheadid
									+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
									+ ITType
									+ "' and emp.PERNR=all_r.Last_Approver"
									+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

							ResultSet rsAppInfo = ad.selectQuery(recordStatus);
							if (rsAppInfo.next()) {
								apprvershod.setApproveStatus(rsAppInfo
										.getString("Req_Status"));
								String approveStatus = rsAppInfo
										.getString("Req_Status");
								if (approveStatus.equalsIgnoreCase("Approved")
										|| approveStatus
												.equalsIgnoreCase("Created")) {
									apprvershod.setDate(rsAppInfo
											.getString("approved_date"));
								} else {
									apprvershod.setDate(rsAppInfo
											.getString("rejected_date"));
								}
								String comments = "";
								comments = rsAppInfo.getString("Comments");
								if (comments == "null") {
									apprvershod.setComments("");
								} else {
									apprvershod.setComments(rsAppInfo
											.getString("Comments"));
								}
							}

							listApprers.add(apprvershod);
							jk = 1;
						}

						catch (SQLException e1) {

							e1.printStackTrace();
						}

					}

					String getApprDetails = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
							+ empID
							+ "'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"
							+ ITType
							+ "' group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
					ResultSet rsApprDetails = ad.selectQuery(getApprDetails);
					try {
						while (rsApprDetails.next()) {

							checkStatus = 1;
							ApprovalsForm apprvers = new ApprovalsForm();
							apprvers.setPriority(rsApprDetails
									.getString("Priority"));

							apprvers.setPriority(rsApprDetails
									.getString("Priority"));
							if (jk == 1) {

								apprvers.setPriority(Integer
										.toString(listApprers.size() + 1));
							}
							apprvers.setEmployeeCode(rsApprDetails
									.getString("Approver_Id"));
							String empCode = rsApprDetails
									.getString("Approver_Id");

							String recordStatus = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
									+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
									+ reqId
									+ "' "
									+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
									+ empID
									+ "')) AND all_r.Last_Approver='"
									+ empCode
									+ "' and it.Approver_Id=all_r.Last_Approver  and all_r.Req_Type='IT Request' and "
									+ "it.Req_Type='"
									+ ITType
									+ "' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
									+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";

							ResultSet rsAppInfo = ad.selectQuery(recordStatus);
							if (rsAppInfo.next()) {

								if (rsAppInfo.getInt("Priority") == 1) {
									chkdate = rsAppInfo
											.getString("approved_date");
									chkdate1 = rsAppInfo
											.getString("rejected_date");
								}
								apprvers.setApproveStatus(rsAppInfo
										.getString("Req_Status"));
								String approveStatus = rsAppInfo
										.getString("Req_Status");
								if (approveStatus.equalsIgnoreCase("Approved")
										|| approveStatus
												.equalsIgnoreCase("Completed")) {
									apprvers.setDate(rsAppInfo
											.getString("approved_date"));
								} else {
									apprvers.setDate(rsAppInfo
											.getString("rejected_date"));
								}
								String comments = "";
								comments = rsAppInfo.getString("Comments");
								if (comments == "null") {
									apprvers.setComments("");
								} else {
									apprvers.setComments(rsAppInfo
											.getString("Comments"));
								}
							}
							apprvers.setEmployeeName(rsApprDetails
									.getString("EMP_FULLNAME"));

							listApprers.add(apprvers);

						}
						//IT ENGINEER DETAIlS
						
						
						String getApprDetails1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' and it.Priority=1    group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
						ResultSet rsApprDetails1=ad.selectQuery(getApprDetails1);
						
							while(rsApprDetails1.next())
							{
								checkStatus=1;
								ApprovalsForm apprvers=new ApprovalsForm();
								apprvers.setPriority(Integer.toString(listApprers.size()+1));
								
								apprvers.setEmployeeCode(rsApprDetails1.getString("Approver_Id"));
								String empCode1=rsApprDetails1.getString("Approver_Id");
								
								String recordStatus1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
										+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
										+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode1+"' and it.Approver_Id=all_r.Last_Approver and all_r.Req_Type='IT Request' and "
										+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
										+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
								
								ResultSet rsAppInfo1=ad.selectQuery(recordStatus1);
								if(rsAppInfo1.next())
								{
									
									String approveStatus=rsAppInfo1.getString("Req_Status");
									if(approveStatus.equalsIgnoreCase("Approved"))
									{
										recordStatus1=recordStatus1+" order by all_r.approved_date desc ";
										ResultSet rsAppInfo2=ad.selectQuery(recordStatus1);
										if(rsAppInfo2.next())
										{
											if(!chkdate.equalsIgnoreCase(rsAppInfo2.getString("approved_date")))
											{
												apprvers.setApproveStatus("Closed");
											apprvers.setDate(rsAppInfo2.getString("approved_date"));
											
										
										
										String comments="";
										comments=rsAppInfo2.getString("Comments");
										if(comments=="null" )
										{
											apprvers.setComments("");
										}else{
											apprvers.setComments(rsAppInfo2.getString("Comments"));
										}
										}
										}
									}else{
										
										recordStatus1=recordStatus1+" order by all_r.rejected_date desc ";
										ResultSet rsAppInfo3=ad.selectQuery(recordStatus1);
										if(rsAppInfo3.next())
										{
											if(!chkdate1.equalsIgnoreCase(rsAppInfo3.getString("rejected_date")))
											{
											apprvers.setDate(rsAppInfo3.getString("rejected_date"));
											}
										
										String comments="";
										comments=rsAppInfo3.getString("Comments");
										if(comments=="null" )
										{
											apprvers.setComments("");
										}else{
											apprvers.setComments(rsAppInfo3.getString("Comments"));
										}
										}
									}
									
								}
								apprvers.setEmployeeName(rsApprDetails1.getString("EMP_FULLNAME"));
						
							listApprers.add(apprvers);
							}
						
						request.setAttribute("approverDetails", listApprers);
					
				} 
				
					catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				if(approverPriority==1)
				{
					forwardType="InternetENG";
				}
				else{
				forwardType="InternetAppr";
				}
			}
			
			if(ITType.equalsIgnoreCase("External Drives Access Request"))
			{
				LinkedList externaldrives=new LinkedList();
				String empno=user.getEmployeeNo();
				
				String data="select emp.PERNR,emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE " +
						"from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"+empID+"' and " +
						"dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";	
				ResultSet rs= ad.selectQuery(data);
				try {
					while(rs.next())
					{
						
						pendAppForm.setRequestername(rs.getString("EMP_FULLNAME"));
						pendAppForm.setRequesterdepartment(rs.getString("DPTSTXT"));
						pendAppForm.setRequesterdesignation(rs.getString("DSGSTXT"));
						pendAppForm.setExtno(rs.getString("TEL_EXTENS"));
						pendAppForm.setIpPhoneno(rs.getString("IP_PHONE"));
						pendAppForm.setLocation(rs.getString("LOCATION_CODE"));
						pendAppForm.setEmpno(rs.getString("PERNR"));
						
						
					}
				} catch (SQLException e) {
				  e.printStackTrace();
				}
				String requester = "";
				String data1=" select * from IT_HELPDESK where Req_No="+reqId+"";	
				ResultSet rs1= ad.selectQuery(data1);
				try {
					while(rs1.next())
					{
						pendAppForm.setAdloginname(rs1.getString("ADLoginName"));
						pendAppForm.setAssetvalue(rs1.getString("Asset_Details"));
						pendAppForm.setAccesstype(rs1.getString("Access_type"));
						pendAppForm.setReason(rs1.getString("Reason"));
						pendAppForm.setHostname(rs1.getString("HostName"));
						pendAppForm.setIPNumber(rs1.getString("IPAddress"));
						pendAppForm.setReqPriority(rs1.getString("Req_Priority"));
						String rmk=rs1.getString("Remarks");
						if(rmk!=null)
						{
							pendAppForm.setRemarks(rs1.getString("Remarks"));
							request.setAttribute("Remark", "Remark");
						}
						requester = rs1.getString("Emp_No");
						String device=rs1.getString("Device_type");
						if(device.equalsIgnoreCase("3"))
						{
							pendAppForm.setCdrom("CD/DVD_ROM");
							pendAppForm.setUsb("USB");
						}
						if(device.equalsIgnoreCase("1"))
						{
							pendAppForm.setCdrom("CD/DVD_ROM");
							
						}
						if(device.equalsIgnoreCase("2"))
						{
							
							pendAppForm.setUsb("USB");
						}
						
					}
				} catch (SQLException e) {
					  e.printStackTrace();
					}
				externaldrives.add(pendAppForm);
				request.setAttribute("externaldrives", externaldrives);
				
				//Approver Details
				int  checkStatus=0;
				LinkedList listApprers=new LinkedList();
				int jk=0;
				//HOD

				int hodpresent=0;
				int hodpresentinIt=0;
				String HODPresentId="";
				String HODPresentname="";
				String itengineerid="";
				String itengineername="";
				String HOD="";
				String	pendingApprovers="";
				
				 //chk if he has Hod
				 String chkhod="select count(*) from ESS_Approvers where employeeNumber='"+empID+"'  ";
				 ResultSet rs10= ad.selectQuery(chkhod);
				 try {
					while(rs10.next())
					 {
						 hodpresent=rs10.getInt(1);
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				
				//get hod details
				
			
				if(hodpresent>0){
				String gethod="select ess.ApproverId,emp.EMP_FULLNAME from ESS_Approvers  as ess,emp_official_info as emp  " +
						" where employeeNumber='"+empID+"'  and essType='Leave' and emp.PERNR=ess.ApproverId ";
				 ResultSet rs2= ad.selectQuery(gethod);
				 
				 try {
					if(rs2.next())
					 {
					
						HODPresentId=rs2.getString("ApproverId");
						HODPresentname=rs2.getString("EMP_FULLNAME");
					 }
				} catch (SQLException e) {
					
					e.printStackTrace();
				}
				}
				
				//chk if he is present in It approver
				 String chkhodinit="select count(*) from IT_Approvers where Approver_ID='"+HODPresentId+"' and Req_Type = '"+ITType+"'  and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))";
				 ResultSet rs11= ad.selectQuery(chkhodinit);
				 try {
					while(rs11.next())
					 {
						hodpresentinIt=rs11.getInt(1);
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				 
				// Plant head
					String plantheadid = "";
					String plantheadname = "";
					String plantheaddep = "";
					String plantheaddesg = "";
					String a = "";
					String userx = "select loc.LOCID from Location as loc,emp_official_info as emp where loc.LOCATION_CODE=emp.LOCID and emp.PERNR='"
					+ requester + "' ";
					ResultSet userrs = ad.selectQuery(userx);
					try {
						while (userrs.next()) {
							a = userrs.getString("LOCID");
						}
					} catch (SQLException e2) {
						// TODO Auto-generated catch block
						e2.printStackTrace();
					}
					if (!a.equalsIgnoreCase("16")) {
						String plant = "select pl.Plant,pl.PERNR,emp.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from PLANT_HEAD pl,emp_official_info emp,DEPARTMENT dep,DESIGNATION desg where Plant=(select LOCATION_CODE from Location where LOCID='"
								+ a
								+ "') and emp.PERNR=pl.PERNR and dep.DPTID=emp.DPTID and desg.DSGID=emp.DSGID";
						ResultSet pl = ad.selectQuery(plant);
						try {
							while (pl.next()) {
								plantheadid = pl.getString("pernr");
								plantheadname = pl.getString("EMP_FULLNAME");
								plantheaddep = pl.getString("DPTSTXT");
								plantheaddesg = pl.getString("DSGSTXT");
							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					if (plantheadid.equalsIgnoreCase("")) {

						if (hodpresent > 0 && hodpresentinIt == 0) {

							try {

								checkStatus = 1;
								ApprovalsForm apprvershod = new ApprovalsForm();
								apprvershod.setPriority("1");

								apprvershod.setEmployeeCode(HODPresentId);
								apprvershod.setEmployeeName(HODPresentname);

								String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
										+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
										+ reqId
										+ "' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
										+ empID
										+ "')) AND "
										+ "all_r.Last_Approver='"
										+ HODPresentId
										+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
										+ ITType
										+ "' and emp.PERNR=all_r.Last_Approver"
										+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

								ResultSet rsAppInfo = ad
										.selectQuery(recordStatus);
								if (rsAppInfo.next()) {
									apprvershod.setApproveStatus(rsAppInfo
											.getString("Req_Status"));
									String approveStatus = rsAppInfo
											.getString("Req_Status");
									if (approveStatus
											.equalsIgnoreCase("Approved")
											|| approveStatus
													.equalsIgnoreCase("Completed")) {
										apprvershod.setDate(rsAppInfo
												.getString("approved_date"));
									} else {
										apprvershod.setDate(rsAppInfo
												.getString("rejected_date"));
									}
									String comments = "";
									comments = rsAppInfo.getString("Comments");
									if (comments == "null") {
										apprvershod.setComments("");
									} else {
										apprvershod.setComments(rsAppInfo
												.getString("Comments"));
									}
								}

								listApprers.add(apprvershod);
								jk = 1;
							}

							catch (SQLException e1) {

								e1.printStackTrace();
							}

						}
					}

					if (!plantheadid.equalsIgnoreCase("")) {

						try {

							checkStatus = 1;
							ApprovalsForm apprvershod = new ApprovalsForm();
							apprvershod.setPriority("1");

							apprvershod.setEmployeeCode(plantheadid);
							apprvershod.setEmployeeName(plantheadname);

							String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
									+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
									+ reqId
									+ "' and it.LOCATION_ID='"
									+ user.getPlantId()
									+ "' AND "
									+ "all_r.Last_Approver='"
									+ plantheadid
									+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
									+ ITType
									+ "' and emp.PERNR=all_r.Last_Approver"
									+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

							ResultSet rsAppInfo = ad.selectQuery(recordStatus);
							if (rsAppInfo.next()) {
								apprvershod.setApproveStatus(rsAppInfo
										.getString("Req_Status"));
								String approveStatus = rsAppInfo
										.getString("Req_Status");
								if (approveStatus.equalsIgnoreCase("Approved")
										|| approveStatus
												.equalsIgnoreCase("Created")) {
									apprvershod.setDate(rsAppInfo
											.getString("approved_date"));
								} else {
									apprvershod.setDate(rsAppInfo
											.getString("rejected_date"));
								}
								String comments = "";
								comments = rsAppInfo.getString("Comments");
								if (comments == "null") {
									apprvershod.setComments("");
								} else {
									apprvershod.setComments(rsAppInfo
											.getString("Comments"));
								}
							}

							listApprers.add(apprvershod);
							jk = 1;
						}

						catch (SQLException e1) {

							e1.printStackTrace();
						}

					}

					String getApprDetails = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
							+ empID
							+ "'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"
							+ ITType
							+ "' group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
					ResultSet rsApprDetails = ad.selectQuery(getApprDetails);
					try {
						while (rsApprDetails.next()) {

							checkStatus = 1;
							ApprovalsForm apprvers = new ApprovalsForm();
							apprvers.setPriority(rsApprDetails
									.getString("Priority"));

							apprvers.setPriority(rsApprDetails
									.getString("Priority"));
							if (jk == 1) {

								apprvers.setPriority(Integer
										.toString(listApprers.size() + 1));
							}
							apprvers.setEmployeeCode(rsApprDetails
									.getString("Approver_Id"));
							String empCode = rsApprDetails
									.getString("Approver_Id");

							String recordStatus = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
									+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
									+ reqId
									+ "' "
									+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
									+ empID
									+ "')) AND all_r.Last_Approver='"
									+ empCode
									+ "' and it.Approver_Id=all_r.Last_Approver  and all_r.Req_Type='IT Request' and "
									+ "it.Req_Type='"
									+ ITType
									+ "' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
									+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";

							ResultSet rsAppInfo = ad.selectQuery(recordStatus);
							if (rsAppInfo.next()) {

								if (rsAppInfo.getInt("Priority") == 1) {
									chkdate = rsAppInfo
											.getString("approved_date");
									chkdate1 = rsAppInfo
											.getString("rejected_date");
								}
								apprvers.setApproveStatus(rsAppInfo
										.getString("Req_Status"));
								String approveStatus = rsAppInfo
										.getString("Req_Status");
								if (approveStatus.equalsIgnoreCase("Approved")
										|| approveStatus
												.equalsIgnoreCase("Completed")) {
									apprvers.setDate(rsAppInfo
											.getString("approved_date"));
								} else {
									apprvers.setDate(rsAppInfo
											.getString("rejected_date"));
								}
								String comments = "";
								comments = rsAppInfo.getString("Comments");
								if (comments == "null") {
									apprvers.setComments("");
								} else {
									apprvers.setComments(rsAppInfo
											.getString("Comments"));
								}
							}
							apprvers.setEmployeeName(rsApprDetails
									.getString("EMP_FULLNAME"));

							listApprers.add(apprvers);

						}
						//IT ENGINEER DETAIlS
						
						
						String getApprDetails1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' and it.Priority=1    group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
						ResultSet rsApprDetails1=ad.selectQuery(getApprDetails1);
						
							while(rsApprDetails1.next())
							{
								checkStatus=1;
								ApprovalsForm apprvers=new ApprovalsForm();
								apprvers.setPriority(Integer.toString(listApprers.size()+1));
								
								apprvers.setEmployeeCode(rsApprDetails1.getString("Approver_Id"));
								String empCode1=rsApprDetails1.getString("Approver_Id");
								
								String recordStatus1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
										+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
										+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode1+"' and it.Approver_Id=all_r.Last_Approver and all_r.Req_Type='IT Request' and "
										+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
										+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
								
								ResultSet rsAppInfo1=ad.selectQuery(recordStatus1);
								if(rsAppInfo1.next())
								{
									
									String approveStatus=rsAppInfo1.getString("Req_Status");
									if(approveStatus.equalsIgnoreCase("Approved"))
									{
										recordStatus1=recordStatus1+" order by all_r.approved_date desc ";
										ResultSet rsAppInfo2=ad.selectQuery(recordStatus1);
										if(rsAppInfo2.next())
										{
											if(!chkdate.equalsIgnoreCase(rsAppInfo2.getString("approved_date")))
											{
												apprvers.setApproveStatus("Closed");
											apprvers.setDate(rsAppInfo2.getString("approved_date"));
											
										
										
										String comments="";
										comments=rsAppInfo2.getString("Comments");
										if(comments=="null" )
										{
											apprvers.setComments("");
										}else{
											apprvers.setComments(rsAppInfo2.getString("Comments"));
										}
										}
										}
									}else{
										
										recordStatus1=recordStatus1+" order by all_r.rejected_date desc ";
										ResultSet rsAppInfo3=ad.selectQuery(recordStatus1);
										if(rsAppInfo3.next())
										{
											if(!chkdate1.equalsIgnoreCase(rsAppInfo3.getString("rejected_date")))
											{
											apprvers.setDate(rsAppInfo3.getString("rejected_date"));
											}
										
										String comments="";
										comments=rsAppInfo3.getString("Comments");
										if(comments=="null" )
										{
											apprvers.setComments("");
										}else{
											apprvers.setComments(rsAppInfo3.getString("Comments"));
										}
										}
									}
									
								}
								apprvers.setEmployeeName(rsApprDetails1.getString("EMP_FULLNAME"));
						
							listApprers.add(apprvers);
							}
						
						request.setAttribute("approverDetails", listApprers);
					
				} 
				
					catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				if(approverPriority==1)
				{
					forwardType="externaldrivesENG";
				}
				else{
				forwardType="externaldrivesAppr";
				}
			}
			
			if(ITType.equalsIgnoreCase("FTP Access Request"))
			{
				LinkedList ftp=new LinkedList();
				String empno=user.getEmployeeNo();
				
				String data="select emp.PERNR,emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE " +
						"from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"+empID+"' and " +
						"dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";	
				ResultSet rs= ad.selectQuery(data);
				try {
					while(rs.next())
					{
						
						pendAppForm.setRequestername(rs.getString("EMP_FULLNAME"));
						pendAppForm.setRequesterdepartment(rs.getString("DPTSTXT"));
						pendAppForm.setRequesterdesignation(rs.getString("DSGSTXT"));
						pendAppForm.setExtno(rs.getString("TEL_EXTENS"));
						pendAppForm.setIpPhoneno(rs.getString("IP_PHONE"));
						pendAppForm.setLocation(rs.getString("LOCATION_CODE"));
						pendAppForm.setEmpno(rs.getString("PERNR"));
						
					}
				} catch (SQLException e) {
				  e.printStackTrace();
				}
				String requester = "";
				String data1=" select * from IT_HELPDESK where Req_No="+reqId+"";	
				ResultSet rs1= ad.selectQuery(data1);
				try {
					while(rs1.next())
					{
						pendAppForm.setAdloginname(rs1.getString("ADLoginName"));
						pendAppForm.setAssetvalue(rs1.getString("Asset_Details"));
						pendAppForm.setRequiredfoldername(rs1.getString("Req_Folder_access"));
						pendAppForm.setServer(rs1.getString("Server_Address"));
						String a=rs1.getString("Access_type");
						String b[]=a.split(",");					
						pendAppForm.setAccesstypes(b);
						pendAppForm.setAccesstype(a);
						pendAppForm.setFrmdurationofaccess(rs1.getString("FrmRequiredDurationofAccess"));
						pendAppForm.setTodurationofaccess(rs1.getString("ToRequiredDurationofAccess"));
						pendAppForm.setReason(rs1.getString("Reason"));
						pendAppForm.setHostname(rs1.getString("HostName"));
						pendAppForm.setIPNumber(rs1.getString("IPAddress"));
						pendAppForm.setUsername(rs1.getString("UserName"));
						pendAppForm.setPassword(rs1.getString("Password"));
						pendAppForm.setReqPriority(rs1.getString("Req_Priority"));
						pendAppForm.setDurationofaccess(rs1.getString("RequiredDurationofAccess"));
						requester = rs1.getString("Emp_No");
						String rmk=rs1.getString("Remarks");
						if(rmk!=null)
						{
							pendAppForm.setRemarks(rs1.getString("Remarks"));
							request.setAttribute("Remark", "Remark");
						}
						
					}
				} catch (SQLException e) {
					  e.printStackTrace();
					}
				ftp.add(pendAppForm);
				request.setAttribute("ftp", ftp);
				
				//Approver Details
				int  checkStatus=0;
				LinkedList listApprers=new LinkedList();
				int jk=0;
				//HOD

				int hodpresent=0;
				int hodpresentinIt=0;
				String HODPresentId="";
				String HODPresentname="";
				String itengineerid="";
				String itengineername="";
				String HOD="";
				String	pendingApprovers="";
				
				 //chk if he has Hod
				 String chkhod="select count(*) from ESS_Approvers where employeeNumber='"+empID+"'  ";
				 ResultSet rs10= ad.selectQuery(chkhod);
				 try {
					while(rs10.next())
					 {
						 hodpresent=rs10.getInt(1);
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				
				//get hod details
				
			
				if(hodpresent>0){
				String gethod="select ess.ApproverId,emp.EMP_FULLNAME from ESS_Approvers  as ess,emp_official_info as emp  " +
						" where employeeNumber='"+empID+"'  and essType='Leave' and emp.PERNR=ess.ApproverId ";
				 ResultSet rs2= ad.selectQuery(gethod);
				 
				 try {
					if(rs2.next())
					 {
					
						HODPresentId=rs2.getString("ApproverId");
						HODPresentname=rs2.getString("EMP_FULLNAME");
					 }
				} catch (SQLException e) {
					
					e.printStackTrace();
				}
				}
				
				//chk if he is present in It approver
				 String chkhodinit="select count(*) from IT_Approvers where Approver_ID='"+HODPresentId+"' and Req_Type = '"+ITType+"'  and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))";
				 ResultSet rs11= ad.selectQuery(chkhodinit);
				 try {
					while(rs11.next())
					 {
						hodpresentinIt=rs11.getInt(1);
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				 
				// Plant head
					String plantheadid = "";
					String plantheadname = "";
					String plantheaddep = "";
					String plantheaddesg = "";
					String a = "";
					String userx = "select loc.LOCID from Location as loc,emp_official_info as emp where loc.LOCATION_CODE=emp.LOCID and emp.PERNR='"
					+ requester + "' ";
					ResultSet userrs = ad.selectQuery(userx);
					try {
						while (userrs.next()) {
							a = userrs.getString("LOCID");
						}
					} catch (SQLException e2) {
						// TODO Auto-generated catch block
						e2.printStackTrace();
					}
					if (!a.equalsIgnoreCase("16")) {
						String plant = "select pl.Plant,pl.PERNR,emp.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from PLANT_HEAD pl,emp_official_info emp,DEPARTMENT dep,DESIGNATION desg where Plant=(select LOCATION_CODE from Location where LOCID='"
								+ a
								+ "') and emp.PERNR=pl.PERNR and dep.DPTID=emp.DPTID and desg.DSGID=emp.DSGID";
						ResultSet pl = ad.selectQuery(plant);
						try {
							while (pl.next()) {
								plantheadid = pl.getString("pernr");
								plantheadname = pl.getString("EMP_FULLNAME");
								plantheaddep = pl.getString("DPTSTXT");
								plantheaddesg = pl.getString("DSGSTXT");
							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					if (plantheadid.equalsIgnoreCase("")) {

						if (hodpresent > 0 && hodpresentinIt == 0) {

							try {

								checkStatus = 1;
								ApprovalsForm apprvershod = new ApprovalsForm();
								apprvershod.setPriority("1");

								apprvershod.setEmployeeCode(HODPresentId);
								apprvershod.setEmployeeName(HODPresentname);

								String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
										+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
										+ reqId
										+ "' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
										+ empID
										+ "')) AND "
										+ "all_r.Last_Approver='"
										+ HODPresentId
										+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
										+ ITType
										+ "' and emp.PERNR=all_r.Last_Approver"
										+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

								ResultSet rsAppInfo = ad
										.selectQuery(recordStatus);
								if (rsAppInfo.next()) {
									apprvershod.setApproveStatus(rsAppInfo
											.getString("Req_Status"));
									String approveStatus = rsAppInfo
											.getString("Req_Status");
									if (approveStatus
											.equalsIgnoreCase("Approved")
											|| approveStatus
													.equalsIgnoreCase("Completed")) {
										apprvershod.setDate(rsAppInfo
												.getString("approved_date"));
									} else {
										apprvershod.setDate(rsAppInfo
												.getString("rejected_date"));
									}
									String comments = "";
									comments = rsAppInfo.getString("Comments");
									if (comments == "null") {
										apprvershod.setComments("");
									} else {
										apprvershod.setComments(rsAppInfo
												.getString("Comments"));
									}
								}

								listApprers.add(apprvershod);
								jk = 1;
							}

							catch (SQLException e1) {

								e1.printStackTrace();
							}

						}
					}

					if (!plantheadid.equalsIgnoreCase("")) {

						try {

							checkStatus = 1;
							ApprovalsForm apprvershod = new ApprovalsForm();
							apprvershod.setPriority("1");

							apprvershod.setEmployeeCode(plantheadid);
							apprvershod.setEmployeeName(plantheadname);

							String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
									+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
									+ reqId
									+ "' and it.LOCATION_ID='"
									+ user.getPlantId()
									+ "' AND "
									+ "all_r.Last_Approver='"
									+ plantheadid
									+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
									+ ITType
									+ "' and emp.PERNR=all_r.Last_Approver"
									+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

							ResultSet rsAppInfo = ad.selectQuery(recordStatus);
							if (rsAppInfo.next()) {
								apprvershod.setApproveStatus(rsAppInfo
										.getString("Req_Status"));
								String approveStatus = rsAppInfo
										.getString("Req_Status");
								if (approveStatus.equalsIgnoreCase("Approved")
										|| approveStatus
												.equalsIgnoreCase("Created")) {
									apprvershod.setDate(rsAppInfo
											.getString("approved_date"));
								} else {
									apprvershod.setDate(rsAppInfo
											.getString("rejected_date"));
								}
								String comments = "";
								comments = rsAppInfo.getString("Comments");
								if (comments == "null") {
									apprvershod.setComments("");
								} else {
									apprvershod.setComments(rsAppInfo
											.getString("Comments"));
								}
							}

							listApprers.add(apprvershod);
							jk = 1;
						}

						catch (SQLException e1) {

							e1.printStackTrace();
						}

					}

					String getApprDetails = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
							+ empID
							+ "'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"
							+ ITType
							+ "' group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
					ResultSet rsApprDetails = ad.selectQuery(getApprDetails);
					try {
						while (rsApprDetails.next()) {

							checkStatus = 1;
							ApprovalsForm apprvers = new ApprovalsForm();
							apprvers.setPriority(rsApprDetails
									.getString("Priority"));

							apprvers.setPriority(rsApprDetails
									.getString("Priority"));
							if (jk == 1) {

								apprvers.setPriority(Integer
										.toString(listApprers.size() + 1));
							}
							apprvers.setEmployeeCode(rsApprDetails
									.getString("Approver_Id"));
							String empCode = rsApprDetails
									.getString("Approver_Id");

							String recordStatus = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
									+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
									+ reqId
									+ "' "
									+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
									+ empID
									+ "')) AND all_r.Last_Approver='"
									+ empCode
									+ "' and it.Approver_Id=all_r.Last_Approver  and all_r.Req_Type='IT Request' and "
									+ "it.Req_Type='"
									+ ITType
									+ "' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
									+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";

							ResultSet rsAppInfo = ad.selectQuery(recordStatus);
							if (rsAppInfo.next()) {

								if (rsAppInfo.getInt("Priority") == 1) {
									chkdate = rsAppInfo
											.getString("approved_date");
									chkdate1 = rsAppInfo
											.getString("rejected_date");
								}
								apprvers.setApproveStatus(rsAppInfo
										.getString("Req_Status"));
								String approveStatus = rsAppInfo
										.getString("Req_Status");
								if (approveStatus.equalsIgnoreCase("Approved")
										|| approveStatus
												.equalsIgnoreCase("Completed")) {
									apprvers.setDate(rsAppInfo
											.getString("approved_date"));
								} else {
									apprvers.setDate(rsAppInfo
											.getString("rejected_date"));
								}
								String comments = "";
								comments = rsAppInfo.getString("Comments");
								if (comments == "null") {
									apprvers.setComments("");
								} else {
									apprvers.setComments(rsAppInfo
											.getString("Comments"));
								}
							}
							apprvers.setEmployeeName(rsApprDetails
									.getString("EMP_FULLNAME"));

							listApprers.add(apprvers);

						}
						//IT ENGINEER DETAIlS
						
						
						String getApprDetails1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' and it.Priority=1    group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
						ResultSet rsApprDetails1=ad.selectQuery(getApprDetails1);
						
							while(rsApprDetails1.next())
							{
								checkStatus=1;
								ApprovalsForm apprvers=new ApprovalsForm();
								apprvers.setPriority(Integer.toString(listApprers.size()+1));
								
								apprvers.setEmployeeCode(rsApprDetails1.getString("Approver_Id"));
								String empCode1=rsApprDetails1.getString("Approver_Id");
								
								String recordStatus1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
										+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
										+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode1+"' and it.Approver_Id=all_r.Last_Approver and all_r.Req_Type='IT Request' and "
										+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
										+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
								
								ResultSet rsAppInfo1=ad.selectQuery(recordStatus1);
								if(rsAppInfo1.next())
								{
									
									String approveStatus=rsAppInfo1.getString("Req_Status");
									if(approveStatus.equalsIgnoreCase("Approved"))
									{
										recordStatus1=recordStatus1+" order by all_r.approved_date desc ";
										ResultSet rsAppInfo2=ad.selectQuery(recordStatus1);
										if(rsAppInfo2.next())
										{
											if(!chkdate.equalsIgnoreCase(rsAppInfo2.getString("approved_date")))
											{
												apprvers.setApproveStatus("Closed");
											apprvers.setDate(rsAppInfo2.getString("approved_date"));
											
										
										
										String comments="";
										comments=rsAppInfo2.getString("Comments");
										if(comments=="null" )
										{
											apprvers.setComments("");
										}else{
											apprvers.setComments(rsAppInfo2.getString("Comments"));
										}
										}
										}
									}else{
										
										recordStatus1=recordStatus1+" order by all_r.rejected_date desc ";
										ResultSet rsAppInfo3=ad.selectQuery(recordStatus1);
										if(rsAppInfo3.next())
										{
											if(!chkdate1.equalsIgnoreCase(rsAppInfo3.getString("rejected_date")))
											{
											apprvers.setDate(rsAppInfo3.getString("rejected_date"));
											}
										
										String comments="";
										comments=rsAppInfo3.getString("Comments");
										if(comments=="null" )
										{
											apprvers.setComments("");
										}else{
											apprvers.setComments(rsAppInfo3.getString("Comments"));
										}
										}
									}
									
								}
								apprvers.setEmployeeName(rsApprDetails1.getString("EMP_FULLNAME"));
						
							listApprers.add(apprvers);
							}
						
						request.setAttribute("approverDetails", listApprers);
					
				} 
				
					catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				if(approverPriority==1)
				{
					forwardType="ftpENG";
				}
				else{
				forwardType="ftpAppr";
				}
			}
			
			if(ITType.equalsIgnoreCase("File Server Access Request"))
			{
				LinkedList folder=new LinkedList();
				String empno=user.getEmployeeNo();
				
				String data="select emp.PERNR,emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE " +
						"from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"+empID+"' and " +
						"dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";	
				ResultSet rs= ad.selectQuery(data);
				try {
					while(rs.next())
					{
						
						pendAppForm.setRequestername(rs.getString("EMP_FULLNAME"));
						pendAppForm.setRequesterdepartment(rs.getString("DPTSTXT"));
						pendAppForm.setRequesterdesignation(rs.getString("DSGSTXT"));
						pendAppForm.setExtno(rs.getString("TEL_EXTENS"));
						pendAppForm.setIpPhoneno(rs.getString("IP_PHONE"));
						pendAppForm.setLocation(rs.getString("LOCATION_CODE"));
						pendAppForm.setEmpno(rs.getString("PERNR"));
						
					}
				} catch (SQLException e) {
				  e.printStackTrace();
				}
				String requester = "";
				String data1=" select * from IT_HELPDESK where Req_No="+reqId+"";	
				ResultSet rs1= ad.selectQuery(data1);
				try {
					while(rs1.next())
					{
						pendAppForm.setFromlocationId(rs1.getString("From_Loc"));
						pendAppForm.setAssetvalue(rs1.getString("Asset_Details"));
						pendAppForm.setAdloginname(rs1.getString("ADLoginName"));
						pendAppForm.setAccesstype(rs1.getString("Access_type"));
						pendAppForm.setRequiredfoldername(rs1.getString("Req_Folder_access"));
						pendAppForm.setServer(rs1.getString("Server_Address"));
						pendAppForm.setReason(rs1.getString("Reason"));
						pendAppForm.setHostname(rs1.getString("HostName"));
						pendAppForm.setIPNumber(rs1.getString("IPAddress"));
						pendAppForm.setReqPriority(rs1.getString("Req_Priority"));
						requester = rs1.getString("Emp_No");
						String rmk=rs1.getString("Remarks");
						if(rmk!=null)
						{
							pendAppForm.setRemarks(rs1.getString("Remarks"));
							request.setAttribute("Remark", "Remark");
						}
					}
				} catch (SQLException e) {
					  e.printStackTrace();
					}
				
				
				
				ResultSet rs111 = ad.selectQuery("select LOCID," +
						"LOCNAME,location_code from location");
						ArrayList locationList=new ArrayList();
						ArrayList locationLabelList=new ArrayList();
							
						try {
							while(rs111.next()) {
								locationList.add(rs111.getString("location_code")+"-"+rs111.getString("LOCNAME"));
								locationLabelList.add(rs111.getString("location_code")+"-"+rs111.getString("LOCNAME"));
							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						pendAppForm.setLocationIdList(locationList);
						pendAppForm.setLocationLabelList(locationLabelList);
						
						ArrayList deparmentList=new ArrayList();
						ResultSet rs12 =ad.selectQuery("select DPTSTXT from department order by DPTSTXT");
						try {
							while(rs12.next()){
								
								deparmentList.add(rs12.getString("DPTSTXT"));
							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						pendAppForm.setDepartmentList(deparmentList);
				
				
				
				
				folder.add(pendAppForm);
				request.setAttribute("folder", folder);
				
				//Approver Details
				int  checkStatus=0;
				LinkedList listApprers=new LinkedList();
				int jk=0;
				//HOD

				int hodpresent=0;
				int hodpresentinIt=0;
				String HODPresentId="";
				String HODPresentname="";
				String itengineerid="";
				String itengineername="";
				String HOD="";
				String	pendingApprovers="";
				
				 //chk if he has Hod
				 String chkhod="select count(*) from ESS_Approvers where employeeNumber='"+empID+"'  ";
				 ResultSet rs10= ad.selectQuery(chkhod);
				 try {
					while(rs10.next())
					 {
						 hodpresent=rs10.getInt(1);
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				
				//get hod details
				
			
				if(hodpresent>0){
				String gethod="select ess.ApproverId,emp.EMP_FULLNAME from ESS_Approvers  as ess,emp_official_info as emp  " +
						" where employeeNumber='"+empID+"'  and essType='Leave' and emp.PERNR=ess.ApproverId ";
				 ResultSet rs2= ad.selectQuery(gethod);
				 
				 try {
					if(rs2.next())
					 {
					
						HODPresentId=rs2.getString("ApproverId");
						HODPresentname=rs2.getString("EMP_FULLNAME");
					 }
				} catch (SQLException e) {
					
					e.printStackTrace();
				}
				}
				
				//chk if he is present in It approver
				 String chkhodinit="select count(*) from IT_Approvers where Approver_ID='"+HODPresentId+"' and Req_Type = '"+ITType+"'  and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))";
				 ResultSet rs11= ad.selectQuery(chkhodinit);
				 try {
					while(rs11.next())
					 {
						hodpresentinIt=rs11.getInt(1);
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				 
				// Plant head
					String plantheadid = "";
					String plantheadname = "";
					String plantheaddep = "";
					String plantheaddesg = "";
					String a = "";
					String userx = "select loc.LOCID from Location as loc,emp_official_info as emp where loc.LOCATION_CODE=emp.LOCID and emp.PERNR='"
					+ requester + "' ";
					ResultSet userrs = ad.selectQuery(userx);
					try {
						while (userrs.next()) {
							a = userrs.getString("LOCID");
						}
					} catch (SQLException e2) {
						// TODO Auto-generated catch block
						e2.printStackTrace();
					}
					if (!a.equalsIgnoreCase("16")) {
						String plant = "select pl.Plant,pl.PERNR,emp.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from PLANT_HEAD pl,emp_official_info emp,DEPARTMENT dep,DESIGNATION desg where Plant=(select LOCATION_CODE from Location where LOCID='"
								+ a
								+ "') and emp.PERNR=pl.PERNR and dep.DPTID=emp.DPTID and desg.DSGID=emp.DSGID";
						ResultSet pl = ad.selectQuery(plant);
						try {
							while (pl.next()) {
								plantheadid = pl.getString("pernr");
								plantheadname = pl.getString("EMP_FULLNAME");
								plantheaddep = pl.getString("DPTSTXT");
								plantheaddesg = pl.getString("DSGSTXT");
							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					if (plantheadid.equalsIgnoreCase("")) {

						if (hodpresent > 0 && hodpresentinIt == 0) {

							try {

								checkStatus = 1;
								ApprovalsForm apprvershod = new ApprovalsForm();
								apprvershod.setPriority("1");

								apprvershod.setEmployeeCode(HODPresentId);
								apprvershod.setEmployeeName(HODPresentname);

								String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
										+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
										+ reqId
										+ "' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
										+ empID
										+ "')) AND "
										+ "all_r.Last_Approver='"
										+ HODPresentId
										+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
										+ ITType
										+ "' and emp.PERNR=all_r.Last_Approver"
										+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

								ResultSet rsAppInfo = ad
										.selectQuery(recordStatus);
								if (rsAppInfo.next()) {
									apprvershod.setApproveStatus(rsAppInfo
											.getString("Req_Status"));
									String approveStatus = rsAppInfo
											.getString("Req_Status");
									if (approveStatus
											.equalsIgnoreCase("Approved")
											|| approveStatus
													.equalsIgnoreCase("Completed")) {
										apprvershod.setDate(rsAppInfo
												.getString("approved_date"));
									} else {
										apprvershod.setDate(rsAppInfo
												.getString("rejected_date"));
									}
									String comments = "";
									comments = rsAppInfo.getString("Comments");
									if (comments == "null") {
										apprvershod.setComments("");
									} else {
										apprvershod.setComments(rsAppInfo
												.getString("Comments"));
									}
								}

								listApprers.add(apprvershod);
								jk = 1;
							}

							catch (SQLException e1) {

								e1.printStackTrace();
							}

						}
					}

					if (!plantheadid.equalsIgnoreCase("")) {

						try {

							checkStatus = 1;
							ApprovalsForm apprvershod = new ApprovalsForm();
							apprvershod.setPriority("1");

							apprvershod.setEmployeeCode(plantheadid);
							apprvershod.setEmployeeName(plantheadname);

							String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
									+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
									+ reqId
									+ "' and it.LOCATION_ID='"
									+ user.getPlantId()
									+ "' AND "
									+ "all_r.Last_Approver='"
									+ plantheadid
									+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
									+ ITType
									+ "' and emp.PERNR=all_r.Last_Approver"
									+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

							ResultSet rsAppInfo = ad.selectQuery(recordStatus);
							if (rsAppInfo.next()) {
								apprvershod.setApproveStatus(rsAppInfo
										.getString("Req_Status"));
								String approveStatus = rsAppInfo
										.getString("Req_Status");
								if (approveStatus.equalsIgnoreCase("Approved")
										|| approveStatus
												.equalsIgnoreCase("Created")) {
									apprvershod.setDate(rsAppInfo
											.getString("approved_date"));
								} else {
									apprvershod.setDate(rsAppInfo
											.getString("rejected_date"));
								}
								String comments = "";
								comments = rsAppInfo.getString("Comments");
								if (comments == "null") {
									apprvershod.setComments("");
								} else {
									apprvershod.setComments(rsAppInfo
											.getString("Comments"));
								}
							}

							listApprers.add(apprvershod);
							jk = 1;
						}

						catch (SQLException e1) {

							e1.printStackTrace();
						}

					}

					String getApprDetails = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
							+ empID
							+ "'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"
							+ ITType
							+ "' group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
					ResultSet rsApprDetails = ad.selectQuery(getApprDetails);
					try {
						while (rsApprDetails.next()) {

							checkStatus = 1;
							ApprovalsForm apprvers = new ApprovalsForm();
							apprvers.setPriority(rsApprDetails
									.getString("Priority"));

							apprvers.setPriority(rsApprDetails
									.getString("Priority"));
							if (jk == 1) {

								apprvers.setPriority(Integer
										.toString(listApprers.size() + 1));
							}
							apprvers.setEmployeeCode(rsApprDetails
									.getString("Approver_Id"));
							String empCode = rsApprDetails
									.getString("Approver_Id");

							String recordStatus = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
									+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
									+ reqId
									+ "' "
									+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
									+ empID
									+ "')) AND all_r.Last_Approver='"
									+ empCode
									+ "' and it.Approver_Id=all_r.Last_Approver  and all_r.Req_Type='IT Request' and "
									+ "it.Req_Type='"
									+ ITType
									+ "' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
									+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";

							ResultSet rsAppInfo = ad.selectQuery(recordStatus);
							if (rsAppInfo.next()) {

								if (rsAppInfo.getInt("Priority") == 1) {
									chkdate = rsAppInfo
											.getString("approved_date");
									chkdate1 = rsAppInfo
											.getString("rejected_date");
								}
								apprvers.setApproveStatus(rsAppInfo
										.getString("Req_Status"));
								String approveStatus = rsAppInfo
										.getString("Req_Status");
								if (approveStatus.equalsIgnoreCase("Approved")
										|| approveStatus
												.equalsIgnoreCase("Completed")) {
									apprvers.setDate(rsAppInfo
											.getString("approved_date"));
								} else {
									apprvers.setDate(rsAppInfo
											.getString("rejected_date"));
								}
								String comments = "";
								comments = rsAppInfo.getString("Comments");
								if (comments == "null") {
									apprvers.setComments("");
								} else {
									apprvers.setComments(rsAppInfo
											.getString("Comments"));
								}
							}
							apprvers.setEmployeeName(rsApprDetails
									.getString("EMP_FULLNAME"));

							listApprers.add(apprvers);

						}
						//IT ENGINEER DETAIlS
						
						
						String getApprDetails1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' and it.Priority=1    group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
						ResultSet rsApprDetails1=ad.selectQuery(getApprDetails1);
						
							while(rsApprDetails1.next())
							{
								checkStatus=1;
								ApprovalsForm apprvers=new ApprovalsForm();
								apprvers.setPriority(Integer.toString(listApprers.size()+1));
								
								apprvers.setEmployeeCode(rsApprDetails1.getString("Approver_Id"));
								String empCode1=rsApprDetails1.getString("Approver_Id");
								
								String recordStatus1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
										+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
										+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode1+"' and it.Approver_Id=all_r.Last_Approver and all_r.Req_Type='IT Request' and "
										+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
										+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
								
								ResultSet rsAppInfo1=ad.selectQuery(recordStatus1);
								if(rsAppInfo1.next())
								{
									
									String approveStatus=rsAppInfo1.getString("Req_Status");
									if(approveStatus.equalsIgnoreCase("Approved"))
									{
										recordStatus1=recordStatus1+" order by all_r.approved_date desc ";
										ResultSet rsAppInfo2=ad.selectQuery(recordStatus1);
										if(rsAppInfo2.next())
										{
											if(!chkdate.equalsIgnoreCase(rsAppInfo2.getString("approved_date")))
											{
												apprvers.setApproveStatus("Closed");
											apprvers.setDate(rsAppInfo2.getString("approved_date"));
											
										
										
										String comments="";
										comments=rsAppInfo2.getString("Comments");
										if(comments=="null" )
										{
											apprvers.setComments("");
										}else{
											apprvers.setComments(rsAppInfo2.getString("Comments"));
										}
										}
										}
									}else{
										
										recordStatus1=recordStatus1+" order by all_r.rejected_date desc ";
										ResultSet rsAppInfo3=ad.selectQuery(recordStatus1);
										if(rsAppInfo3.next())
										{
											if(!chkdate1.equalsIgnoreCase(rsAppInfo3.getString("rejected_date")))
											{
											apprvers.setDate(rsAppInfo3.getString("rejected_date"));
											}
										
										String comments="";
										comments=rsAppInfo3.getString("Comments");
										if(comments=="null" )
										{
											apprvers.setComments("");
										}else{
											apprvers.setComments(rsAppInfo3.getString("Comments"));
										}
										}
									}
									
								}
								apprvers.setEmployeeName(rsApprDetails1.getString("EMP_FULLNAME"));
						
							listApprers.add(apprvers);
							}
						
						request.setAttribute("approverDetails", listApprers);
					
				} 
				
					catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				if(approverPriority==1)
				{
					forwardType="folderENG";
				}
				else{
				forwardType="folderAppr";
				}
			}
			
			
			}catch (Exception e) {
				e.printStackTrace();
			}
			
			
			
			if(filterBy.equalsIgnoreCase("Pending")){
				
				if(ITstatus==null)
				{
				request.setAttribute("approveButton", "approveButton");
				}
				else
				{
					request.setAttribute("resolveButton", "resolveButton");
				}
				
				request.setAttribute("rejectButton", "rejectButton");
				}
			
		
				
		}
		return mapping.findForward(forwardType);
	}
	public ActionForward getSelectedRequestToApprove(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response){
		LinkedList list = new LinkedList();
		
		ApprovalsForm pendAppForm=(ApprovalsForm) form;
		String reqId = request.getParameter("reqId");
		String reqType = pendAppForm.getReqRequstType();
		pendAppForm.setRequestType(reqType);
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		if(user==null){
			request.setAttribute("message","Session Expried! Try to Login again!");
	   		return mapping.findForward("displayiFrameSession");
		}
		String scount = Integer.toString(pendAppForm.getStartRecord());
		
		int totalRecords=pendAppForm.getTotalRecords();//21
		int startRecord=pendAppForm.getStartRecord();//11
		int endRecord=pendAppForm.getEndRecord();	
		String filterBy=pendAppForm.getSelectedFilter();
		
		pendAppForm.setTotalRecords(totalRecords);
		pendAppForm.setStartRecord(startRecord);
		pendAppForm.setEndRecord(endRecord);
	pendAppForm.setSelectedFilter(filterBy);
		if(reqId==null && reqType==null){
			reqId=pendAppForm.getRequestNo();
			reqType=pendAppForm.getRequestType();
		}
		int startCount = 0;
		int endCount = 0;
		if(scount == null){
			request.setAttribute("noRecords","noRecords");
			pendAppForm.setAppMessage("Request Approved Successfully!");
		}
		if(scount != null){
			startCount=Integer.parseInt(scount);
			endCount=endRecord;
			pendAppForm.setStartRecord(startCount);
			pendAppForm.setEndRecord(endCount);
		}
		setAllCount(pendAppForm, pendAppForm.getTotalAppCount(), startCount, endCount);
		request.setAttribute("header", reqType+"For Approve");
		String tName="leave";
		setFilterType(reqType, pendAppForm);
		String uName = user.getUserName();
		UserDao adMPM=new UserDao();
		EssDao ad=new EssDao();
		try{
			if(reqType.equalsIgnoreCase("Permission"))
			{
				String HRid="";
				String empID="";
			
			int requesterNo=Integer.parseInt(request.getParameter("RequesterNo"));
			try{
				String getdetails="select *,CONVERT(varchar(10),Created_date,103)+' '+ CONVERT(varchar(5),Created_date,108) as Created_date1 from Permission_details where request_no='"+reqId+"'";
				ResultSet rs=ad.selectQuery(getdetails);
				while(rs.next())
				{
					empID=rs.getString("user_id");
					pendAppForm.setRequestNo(reqId);
					String date = rs.getString("date");
					String a[]=date.split(" ");
					date=a[0];
					String b[]=date.split("-");
					date=b[2]+"/"+b[1]+"/"+b[0];
					pendAppForm.setDate(date);
					pendAppForm.setStartTime(rs.getString("startTime"));
					pendAppForm.setEndTime(rs.getString("endTime"));
					pendAppForm.setReason(rs.getString("reason"));
					pendAppForm.setRemark(rs.getString("comments"));
					pendAppForm.setType(rs.getString("type"));
					pendAppForm.setRequestDate(rs.getString("Created_date1"));
					pendAppForm.setSwipetype(rs.getString("swipe_type"));
				}
				
			}catch (Exception e) {
				e.printStackTrace();
			}
			LinkedList approverList=new LinkedList();
			String approverName="";
			String approverID="";
			String reportingMgrID="";
			String reportingMgrName="";
			String appDesig="";
			String reportMgrDesg="";
			boolean existStatus=false;
			String reqType1="";
		
			ArrayList paralist=new ArrayList();
			String checkESSApproverList="select count(*),reqType from ESS_Approvers where employeeNumber='"+requesterNo+"' and essType='Leave' group by reqType";
			ResultSet rsCheckInEss=ad.selectQuery(checkESSApproverList);
			while(rsCheckInEss.next())
			{
				int number=rsCheckInEss.getInt(1);
				reqType=rsCheckInEss.getString("reqType");
				if(number==0)
				{
					existStatus=false;
				}else{
					existStatus=true;
				}
			}
			if(existStatus==true){
				if(reqType.equalsIgnoreCase("sequential"))
				{
				String getApproverDesig=" select priority ,  e.ApproverId,emp.EMP_FULLNAME,desg.DSGSTXT  from ESS_Approvers as e,emp_official_info as emp,DESIGNATION as desg " +
										" where employeeNumber='"+requesterNo+"' and  e.ApproverId=emp.PERNR and emp.DSGID=desg.DSGID and essType='Leave' "
										+ " union "
										+" select 10 as priority, e.hr_no ,emp.EMP_FULLNAME,desg.DSGSTXT  from ESS_CANCEL_APPR as e,emp_official_info as emp,DESIGNATION as desg  "
										+ " where e.hr_no=emp.PERNR and emp.DSGID=desg.DSGID and e.location = '"+EmpLoc(request.getParameter("RequesterNo"))+"' "
										+ " order by Priority";
				 
				ResultSet rsA=ad.selectQuery(getApproverDesig);
					while(rsA.next())
					{
						LeaveForm lvform=new LeaveForm();
						 lvform.setApprover(rsA.getString("EMP_FULLNAME"));	
						 lvform.setAppDesig(rsA.getString("DSGSTXT"));	
						String getdetails=" select all_R.Comments,desg.DSGSTXT,all_R.Hr_Id,emp.EMP_FULLNAME,all_R.Req_Status,all_R.approved_date," +
								"all_R.rejected_date from 	All_Request as all_R,emp_official_info as emp, DESIGNATION as desg   " +
								" where all_R.Req_Id='"+reqId+"' and all_R.Req_Type='Permission' and ((emp.PERNR=all_R.Last_Approver) or " +
								"(emp.PERNR=all_R.Pending_Approver))  and (emp.DSGID=desg.DSGID) and((Last_Approver='"+rsA.getString("ApproverId")+"') or " +
								"(Pending_Approver='"+rsA.getString("ApproverId")+"'))  and Requester_Name='"+requesterNo+"'";
						
						ResultSet rsApproverDsg=ad.selectQuery(getdetails);
						
						while(rsApproverDsg.next())
						{
							HRid=rsApproverDsg.getString("Hr_Id");
							String reqstatus=rsApproverDsg.getString("Req_Status");
							lvform.setStatus(rsApproverDsg.getString("Req_Status"));
							if(reqstatus.equalsIgnoreCase("Pending"))
							{
								
								 lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
								 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
								
							}
							if(reqstatus.equalsIgnoreCase("Approved"))
							{
							lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));
							 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
						   lvform.setApprovedDate(rsApproverDsg.getString("approved_date"));
							}
							
							if(reqstatus.equalsIgnoreCase("Rejected"))
							{
								  lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
								  lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
							     lvform.setApprovedDate(rsApproverDsg.getString("rejected_date"));
							}
							if(reqstatus.equalsIgnoreCase("Cancelled"))
							{
								  lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
								  lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
							     lvform.setApprovedDate(rsApproverDsg.getString("rejected_date"));
							}
							lvform.setComments(rsApproverDsg.getString("Comments"));
							
							if(HRid!=null)
							{
								if( reqstatus.equalsIgnoreCase("Approved")){
								String hrdetails="select emp.EMP_FULLNAME,des.DSGSTXT from emp_official_info as emp,DESIGNATION as des where PERNR='"+HRid+"' and emp.DSGID=des.DSGID";
								
								ResultSet rs=ad.selectQuery(hrdetails);
								
								while(rs.next())
								{
									lvform.setApprover(rs.getString("EMP_FULLNAME"));
									 lvform.setAppDesig(rs.getString("DSGSTXT"));
								}
							}
							}
						
						}
						
						
						
						paralist.add(lvform);
					}
					
					
					
					request.setAttribute("appList", paralist);
					
				}
				if(reqType.equalsIgnoreCase("parallel"))
				{
					
		
					String getApproverDesig=" select priority, e.ApproverId,emp.EMP_FULLNAME,desg.DSGSTXT  from ESS_Approvers as e,emp_official_info as emp,DESIGNATION as desg " +
						" where employeeNumber='"+requesterNo+"' and  e.ApproverId=emp.PERNR and emp.DSGID=desg.DSGID and essType='Leave'"
						+ " union "
						+ " select priority, e.Parallel_Approver1,emp.EMP_FULLNAME,desg.DSGSTXT  from ESS_Approvers as e,emp_official_info as emp,DESIGNATION as desg " +
						" where employeeNumber='"+requesterNo+"' and  e.ApproverId=emp.PERNR and emp.DSGID=desg.DSGID and essType='Leave'"
						+ " union "
						+ " select priority, e.Parallel_Approver1,emp.EMP_FULLNAME,desg.DSGSTXT  from ESS_Approvers as e,emp_official_info as emp,DESIGNATION as desg " +
						" where employeeNumber='"+requesterNo+"' and  e.ApproverId=emp.PERNR and emp.DSGID=desg.DSGID and essType='Leave' "
						+ " union "
						+ " select 10 as priority , e.hr_no ,emp.EMP_FULLNAME,desg.DSGSTXT  from ESS_CANCEL_APPR as e,emp_official_info as emp,DESIGNATION as desg  "
						+ " where e.hr_no=emp.PERNR and emp.DSGID=desg.DSGID and e.location = '"+EmpLoc(Integer.toString(requesterNo))+"' "
						+ " order by priority  ";
					 
					ResultSet rsA=ad.selectQuery(getApproverDesig);
						while(rsA.next())
						{
							LeaveForm lvform=new LeaveForm();
							 lvform.setApprover(rsA.getString("EMP_FULLNAME"));	
							 lvform.setAppDesig(rsA.getString("DSGSTXT"));	
							String getdetails=" select all_R.Comments,desg.DSGSTXT,emp.EMP_FULLNAME,all_R.Req_Status,all_R.approved_date," +
									"all_R.rejected_date from 	All_Request as all_R,emp_official_info as emp, DESIGNATION as desg   " +
									" where all_R.Req_Id='"+reqId+"' and all_R.Req_Type='Permission' and ((emp.PERNR=all_R.Last_Approver) or " +
									"(emp.PERNR=all_R.Pending_Approver))  and (emp.DSGID=desg.DSGID) and((Last_Approver='"+rsA.getString("ApproverId")+"') or " +
									"(Pending_Approver='"+rsA.getString("ApproverId")+"'))  and Requester_Name='"+requesterNo+"'";
							
							ResultSet rsApproverDsg=ad.selectQuery(getdetails);
							
							while(rsApproverDsg.next())
							{
							
								String reqstatus=rsApproverDsg.getString("Req_Status");
								lvform.setStatus(rsApproverDsg.getString("Req_Status"));
								if(reqstatus.equalsIgnoreCase("Pending"))
								{
									
									 lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
									 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
									
								}
								if(reqstatus.equalsIgnoreCase("Approved"))
								{
								lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));
								 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
							   lvform.setApprovedDate(rsApproverDsg.getString("approved_date"));
								}
								
								if(reqstatus.equalsIgnoreCase("Rejected"))
								{
									  lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
									  lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
								     lvform.setApprovedDate(rsApproverDsg.getString("rejected_date"));
								}
								if(reqstatus.equalsIgnoreCase("Cancelled"))
								{
									  lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
									  lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
								     lvform.setApprovedDate(rsApproverDsg.getString("rejected_date"));
								}
								lvform.setComments(rsApproverDsg.getString("Comments"));
								
								
							
							}
							paralist.add(lvform);
						}
						
						
						
						request.setAttribute("appList", paralist);
						
					
					
					
					/*
					
					String getApproverDesig="  select 1 as ord ,all_R.Comments,desg.DSGSTXT,emp.EMP_FULLNAME,all_R.Req_Status,all_R.approved_date,all_R.rejected_date from " +
							"All_Request as all_R,emp_official_info as emp, DESIGNATION as desg    where all_R.Req_Id='"+reqId+"' and all_R.Req_Type='Permission' and " +
							"((emp.PERNR=all_R.Last_Approver) or (emp.PERNR=all_R.Pending_Approver))  and (emp.DSGID=desg.DSGID)"
							+ " union "
							+ " select 2 as ord ,isnull(all_R.Comments,''),desg.DSGSTXT,emp.EMP_FULLNAME,isnull(all_R.Req_Status,''),all_R.approved_date,all_R.rejected_date from emp_official_info emp, "
							+ " DESIGNATION desg ,ESS_CANCEL_APPR left outer join All_Request all_r on (all_r.Pending_Approver=ESS_CANCEL_APPR.HR_NO or all_r.Last_Approver=ESS_CANCEL_APPR.HR_NO) "
							+ " and all_r.Req_Id='"+reqId+"' and all_r.type='Permission' "
							+ " where Location='"+EmpLoc(empID)+"' and emp.PERNR=ESS_CANCEL_APPR.HR_NO and emp.DSGID=desg.DSGID  order by 1";
		
					    ResultSet rsApproverDsg=ad.selectQuery(getApproverDesig);
						while(rsApproverDsg.next())
						{
							LeaveForm lvform=new LeaveForm();
							String reqstatus=rsApproverDsg.getString("Req_Status");
							lvform.setStatus(rsApproverDsg.getString("Req_Status"));
							lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
							 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));	
							if(reqstatus.equalsIgnoreCase("Pending"))
							{
								
							 lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
							 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));	
								
							}
							if(reqstatus.equalsIgnoreCase("Approved"))
							{
							lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));
							 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
						   lvform.setApprovedDate(rsApproverDsg.getString("approved_date"));
							}
							
							if(reqstatus.equalsIgnoreCase("Rejected")||reqstatus.equalsIgnoreCase("Cancelled"))
							{
								  lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
								  lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
							     lvform.setApprovedDate(rsApproverDsg.getString("rejected_date"));
							}
							lvform.setComments(rsApproverDsg.getString("Comments"));
							
							
							paralist.add(lvform);
							
						}
				*/}
				request.setAttribute("appList", paralist);
			}
			if(existStatus==false){
			
			String getRepMgrDesig="select dept.DPTSTXT,desg.DSGSTXT,emp.EMP_FULLNAME from emp_official_info as emp,DEPARTMENT as dept,DESIGNATION as desg where " +
			" emp.PERNR='"+approverID+"' and emp.DPTID=dept.DPTID and emp.DSGID=desg.DSGID";
		ResultSet rsRepMgrDesig=ad.selectQuery(getRepMgrDesig);
		while(rsRepMgrDesig.next())
		{
			LeaveForm leaveForm2=new LeaveForm();
			leaveForm2.setApptype("Approver Manager");
		leaveForm2.setApproverID(approverID);
		reportMgrDesg=rsRepMgrDesig.getString("DSGSTXT");
		reportingMgrName=rsRepMgrDesig.getString("EMP_FULLNAME");
			leaveForm2.setAppDesig(reportMgrDesg);
			leaveForm2.setApproverName(reportingMgrName);
			
			approverList.add(leaveForm2);
		}
		request.setAttribute("appList", approverList);
		
					}
		
		if(filterBy.equalsIgnoreCase("Pending")){
		request.setAttribute("approveButton", "approveButton");
		request.setAttribute("rejectButton", "rejectButton");
		}
			
			if(filterBy.equalsIgnoreCase("All")){
				
				
				if(pendAppForm.getStatus().equalsIgnoreCase("Pending"))
				{
			request.setAttribute("approveButton", "approveButton");
			request.setAttribute("rejectButton", "rejectButton");
			} 
			}
		if(filterBy.equalsIgnoreCase("Rejected")){

		}
		
		
		//
		
		  int count =0 ;
			String sj = "select count(*) from ESS_CANCEL_APPR where Location ='"+EmpLoc(empID)+"' and hr_no = '"+user.getEmployeeNo()+"'  ";
		    ResultSet rsk = ad.selectQuery(sj);
		    if(rsk.next())
		    {
		    	count = rsk.getInt(1);
		    	
		    }
			
		    if(count == 1)
		    {
		    	  ArrayList llist = new ArrayList();
				    ArrayList punchlist = new ArrayList();
				    String sqlfromdate="";
				    
				    String from[]=pendAppForm.getDate().split("/");
				    sqlfromdate=from[2]+"-"+from[1]+"-"+from[0]; 
				    
				    
		//punch rtimings
				    
				    

					//Attendance

					SAPAttendenceDAO dao = new SAPAttendenceDAO();

					




						String s9 = " select emp_official_info.pernr,date,convert(varchar(11),date,106) as date1,left(DATENAME(WEEKDAY,date),3) as day,left(In_time,5) as intime,left(out_time,5) as outtime,"
								+ "left(status,2) as instatus,right(status,2) as outstatus,shift from Report_Daily_wise,emp_official_info where emp_official_info.PERNR=Report_Daily_wise.Pernr and emp_official_info.LOCID=Report_Daily_wise.Location and  emp_official_info.Pernr='"+empID+"' and date='"+sqlfromdate+"'  ";
						ResultSet rs9 = ad.selectQuery(s9);
						try {
							while(rs9.next())
							{
								
								SAPAttendenceForm help = new SAPAttendenceForm();
								help.setEmployeeNo(rs9.getString("pernr"));
								help.setDate(rs9.getString("date1"));
								help.setDay(rs9.getString("day"));
								help.setiNTIME(rs9.getString("intime"));
								help.setoUTTIME(rs9.getString("outtime"));
								help.setiNSTATUS(rs9.getString("instatus"));
								help.setoUTSTATUS(rs9.getString("outstatus"));
								help.setShift(rs9.getString("shift"));
								punchlist.add(help);
								
								
					    	}
						    	

						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						request.setAttribute("punchlist", punchlist);
				    
				    
					//Employee Late Count List
					String query1="select CONVERT(varchar(10),Start_date,103) as Startdate ,EMP_MANUAL_SWIPE. *,emp_official_info.EMP_FULLNAME,CONVERT(varchar(10),EMP_MANUAL_SWIPE.Created_date,103)+' '+ CONVERT(varchar(5),EMP_MANUAL_SWIPE.Created_date,108) as Created_date1"
							+ " from EMP_MANUAL_SWIPE,emp_official_info where EMP_MANUAL_SWIPE.Pernr=emp_official_info.pernr and EMP_MANUAL_SWIPE.pernr= '"+empID+"' and month(start_date) = month('"+sqlfromdate+"') "
									+ "and year(start_date) = year('"+sqlfromdate+"') order by date desc ";
					ResultSet r2sk = ad.selectQuery(query1);
					try {
						while(r2sk.next())
						{ 
							HRApprovalForm help1 = new HRApprovalForm();
							help1.setEmployeeno(r2sk.getString("pernr"));
							help1.setEmployeeName(r2sk.getString("EMP_FULLNAME"));
							help1.setStartDate(r2sk.getString("Startdate"));
							if(r2sk.getString("in_out").equalsIgnoreCase("I"))
								help1.setSwipe_Type("IN");	
							if(r2sk.getString("in_out").equalsIgnoreCase("O"))
							help1.setSwipe_Type("OUT");
							help1.setReason_Type(r2sk.getString("lost_entry_reason_Type"));
							help1.setTime(r2sk.getString("start"));
							help1.setRemarks(r2sk.getString("remarks"));
							help1.setDate(r2sk.getString("Created_date1"));
							llist.add(help1);

						}
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					request.setAttribute("llist", llist);
					
		    }
		
		return mapping.findForward("PermissionDetails");
			}
			
			
			if(reqType.equalsIgnoreCase("On Duty"))
			{
				
							
				String userid="";
				String HRid="";
			int requesterNo=Integer.parseInt(request.getParameter("RequesterNo"));
			String getOnDutyDetails="select * from OnDuty_details where request_no='"+reqId+"'";
			ResultSet rsDetails=ad.selectQuery(getOnDutyDetails);
			while(rsDetails.next())
			{
				userid=rsDetails.getString("user_id");
				pendAppForm.setRequestNo(reqId);
				pendAppForm.setOnDutyType(rsDetails.getString("onDuty_Type"));
				pendAppForm.setLocationId(rsDetails.getString("location"));
				pendAppForm.setStartDate(EMicroUtils.display(rsDetails.getDate("start_date")));
				pendAppForm.setStartTime(rsDetails.getString("startTime"));
				pendAppForm.setEndDate(EMicroUtils.display(rsDetails.getDate("end_date")));
				pendAppForm.setEndTime(rsDetails.getString("endTime"));
				pendAppForm.setDocumentName(rsDetails.getString("documents"));
				pendAppForm.setReason(rsDetails.getString("reason"));
				pendAppForm.setRequestDate(rsDetails.getString("submit_date"));
			}
			
			
			String gender="";
			String pernr="";
			String name="";
			String doj="";
			String dep="";
			String desg="";
			String getGender="select emp.PERNR,emp.EMP_FULLNAME,emp.SEX,emp.DOJ,dep.DPTSTXT,desg.DSGSTXT from emp_official_info emp,DEPARTMENT as dep,DESIGNATION as desg where emp.PERNR='"+userid+"' and dep.DPTID=emp.DPTID and desg.DSGID=emp.DSGID";
			ResultSet rsGender=ad.selectQuery(getGender);
			while(rsGender.next())
			{
				gender=rsGender.getString("SEX");
				pernr=rsGender.getString("PERNR");
				name=rsGender.getString("EMP_FULLNAME");
				doj=rsGender.getString("DOJ");
				dep=rsGender.getString("DPTSTXT");
				desg=rsGender.getString("DSGSTXT");
				
			}
			
			pendAppForm.setEmployeeNumber(pernr);
			pendAppForm.setEmployeeName(name);
			pendAppForm.setDepartment(dep);
			pendAppForm.setDesignation(desg);
			pendAppForm.setDate(doj);
			
			
			
			String sql1="select * from onDuty_emp_documents where request_no='"+reqId+"' ";
			ResultSet rs=ad.selectQuery(sql1);
			OnDutyForm ondutyForm1=null;
				ArrayList a1=new ArrayList();
				while(rs.next()) {
					ondutyForm1=new OnDutyForm();
					ondutyForm1.setFileName(rs.getString("file_name"));
					ondutyForm1.setId(rs.getString("id"));
					a1.add(ondutyForm1);
				}
				
				request.setAttribute("documentDetails", a1);
				LinkedList approverList=new LinkedList();
				String approverName="";
				String approverID="";
				String reportingMgrID="";
				String reportingMgrName="";
				String appDesig="";
				String reportMgrDesg="";
				String getApprovers="select APPMGR,RPTMGR  from emp_official_info  emp where " +
				"PERNR='"+requesterNo+"'  ";	
		ResultSet rsApprovers=ad.selectQuery(getApprovers);
		while(rsApprovers.next())
		{
			approverID=rsApprovers.getString("APPMGR");
			reportingMgrID=rsApprovers.getString("RPTMGR");
		}
		boolean existStatus=false;
		String reqType1="";
	
		ArrayList paralist=new ArrayList();
		String checkESSApproverList="select count(*),reqType from ESS_Approvers where employeeNumber='"+requesterNo+"' and essType='Leave' group by reqType";
		ResultSet rsCheckInEss=ad.selectQuery(checkESSApproverList);
		while(rsCheckInEss.next())
		{
			int number=rsCheckInEss.getInt(1);
			reqType=rsCheckInEss.getString("reqType");
			if(number==0)
			{
				existStatus=false;
			}else{
				existStatus=true;
			}
		}
		if(existStatus==true){
			if(reqType.equalsIgnoreCase("sequential"))
			{
			String getApproverDesig=" select e.ApproverId,emp.EMP_FULLNAME,desg.DSGSTXT  from ESS_Approvers as e,emp_official_info as emp,DESIGNATION as desg " +
		"where employeeNumber='"+requesterNo+"' and  e.ApproverId=emp.PERNR and emp.DSGID=desg.DSGID and essType='Leave' order by Priority";
			 
			ResultSet rsA=ad.selectQuery(getApproverDesig);
				while(rsA.next())
				{
					LeaveForm lvform=new LeaveForm();
					 lvform.setApprover(rsA.getString("EMP_FULLNAME"));	
					 lvform.setAppDesig(rsA.getString("DSGSTXT"));	
					String getdetails=" select all_R.Comments,desg.DSGSTXT,emp.EMP_FULLNAME,all_R.Hr_Id,all_R.Req_Status,all_R.approved_date," +
							"all_R.rejected_date from 	All_Request as all_R,emp_official_info as emp, DESIGNATION as desg   " +
							" where all_R.Req_Id='"+reqId+"' and all_R.Req_Type='On Duty' and ((emp.PERNR=all_R.Last_Approver) or " +
							"(emp.PERNR=all_R.Pending_Approver))  and (emp.DSGID=desg.DSGID) and((Last_Approver='"+rsA.getString("ApproverId")+"') or " +
							"(Pending_Approver='"+rsA.getString("ApproverId")+"'))  and Requester_Name='"+requesterNo+"'";
					
					ResultSet rsApproverDsg=ad.selectQuery(getdetails);
					
					while(rsApproverDsg.next())
					{
						HRid=rsApproverDsg.getString("Hr_Id");
					
						String reqstatus=rsApproverDsg.getString("Req_Status");
						lvform.setStatus(rsApproverDsg.getString("Req_Status"));
						if(reqstatus.equalsIgnoreCase("Pending"))
						{
							
							 lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
							 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
							
						}
						if(reqstatus.equalsIgnoreCase("Approved"))
						{
						lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));
						 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
					   lvform.setApprovedDate(rsApproverDsg.getString("approved_date"));
						}
						
						if(reqstatus.equalsIgnoreCase("Rejected"))
						{
							  lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
							  lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
						     lvform.setApprovedDate(rsApproverDsg.getString("rejected_date"));
						}
						if(reqstatus.equalsIgnoreCase("Cancelled"))
						{
							  lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
							  lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
						     lvform.setApprovedDate(rsApproverDsg.getString("rejected_date"));
						}
						lvform.setComments(rsApproverDsg.getString("Comments"));
						
						
						if(HRid!=null)
						{
							if( reqstatus.equalsIgnoreCase("Approved")){
							String hrdetails="select emp.EMP_FULLNAME,des.DSGSTXT from emp_official_info as emp,DESIGNATION as des where PERNR='"+HRid+"' and emp.DSGID=des.DSGID";
							
							ResultSet rs1=ad.selectQuery(hrdetails);
							
							while(rs1.next())
							{
								lvform.setApprover(rs1.getString("EMP_FULLNAME"));
								 lvform.setAppDesig(rs1.getString("DSGSTXT"));
							}
						}}
					}
					paralist.add(lvform);
				}
				
				
				
				request.setAttribute("onduty", paralist);
				
			}
			if(reqType.equalsIgnoreCase("parallel"))
			{
				
				String getApproverDesig="  select all_R.Comments,desg.DSGSTXT,emp.EMP_FULLNAME,all_R.Hr_Id,all_R.Req_Status,all_R.approved_date,all_R.rejected_date from " +
						"All_Request as all_R,emp_official_info as emp, DESIGNATION as desg    where all_R.Req_Id='"+reqId+"' and all_R.Req_Type='On Duty' and " +
						"((emp.PERNR=all_R.Last_Approver) or (emp.PERNR=all_R.Pending_Approver))  and (emp.DSGID=desg.DSGID) ";
				    ResultSet rsApproverDsg=ad.selectQuery(getApproverDesig);
					while(rsApproverDsg.next())
					{
						HRid=rsApproverDsg.getString("Hr_Id");
						LeaveForm lvform=new LeaveForm();
						String reqstatus=rsApproverDsg.getString("Req_Status");
						lvform.setStatus(rsApproverDsg.getString("Req_Status"));
						if(reqstatus.equalsIgnoreCase("Pending"))
						{
							
						 lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
						 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));	
							
						}
						if(reqstatus.equalsIgnoreCase("Approved"))
						{
						lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));
						 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
					   lvform.setApprovedDate(rsApproverDsg.getString("approved_date"));
						}
						
						if(reqstatus.equalsIgnoreCase("Rejected")||reqstatus.equalsIgnoreCase("Cancelled"))
						{
							  lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
							  lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
						     lvform.setApprovedDate(rsApproverDsg.getString("rejected_date"));
						}
						lvform.setComments(rsApproverDsg.getString("Comments"));
						
						if(HRid!=null)
						{
							if( reqstatus.equalsIgnoreCase("Approved")){
							String hrdetails="select emp.EMP_FULLNAME,des.DSGSTXT from emp_official_info as emp,DESIGNATION as des where PERNR='"+HRid+"' and emp.DSGID=des.DSGID";
							
							ResultSet rs2=ad.selectQuery(hrdetails);
							
							while(rs2.next())
							{
								lvform.setApprover(rs2.getString("EMP_FULLNAME"));
								 lvform.setAppDesig(rs2.getString("DSGSTXT"));
							}
						}
						}
						
						
						paralist.add(lvform);
						
					}
			}
			request.setAttribute("onduty", paralist);
		}
		if(existStatus==false){
		
		String getRepMgrDesig="select dept.DPTSTXT,desg.DSGSTXT,emp.EMP_FULLNAME from emp_official_info as emp,DEPARTMENT as dept,DESIGNATION as desg where " +
		" emp.PERNR='"+approverID+"' and emp.DPTID=dept.DPTID and emp.DSGID=desg.DSGID";
ResultSet rsRepMgrDesig=ad.selectQuery(getRepMgrDesig);
while(rsRepMgrDesig.next())
{
	LeaveForm leaveForm2=new LeaveForm();
	leaveForm2.setApptype("Approver Manager");
	leaveForm2.setApproverID(approverID);
	reportMgrDesg=rsRepMgrDesig.getString("DSGSTXT");
	reportingMgrName=rsRepMgrDesig.getString("EMP_FULLNAME");
	leaveForm2.setAppDesig(reportMgrDesg);
	leaveForm2.setApproverName(reportingMgrName);
	
	approverList.add(leaveForm2);
}
request.setAttribute("appList", approverList);

		}

if(filterBy.equalsIgnoreCase("Pending")){
	request.setAttribute("approveButton", "approveButton");
	request.setAttribute("rejectButton", "rejectButton");
}
if(filterBy.equalsIgnoreCase("Rejected")){
	//request.setAttribute("approveButton", "approveButton");
}
			return mapping.findForward("ondutyDetails");
			}
			
			
			if(reqType.equalsIgnoreCase("Customer Master"))
			{

				//rejected Status 
				String getRejectedStatus="select rejected_flag from CUSTOMER_MASTER_M where REQUEST_NO='"+reqId+"'";
				ResultSet rsRejected=ad.selectQuery(getRejectedStatus);
				while(rsRejected.next())
				{
					String rejected_flag=rsRejected.getString("rejected_flag");
					if(rejected_flag!=null)
					{
						if(rejected_flag.equalsIgnoreCase("yes"))
							request.setAttribute("rejectedFLag", "rejectedFLag");
					}
				}
				
				
				String location="";
				String matGroup="";
				String Customer_Type="";
				
				String getMatGroup="select Customer_Type from CUSTOMER_MASTER_M where REQUEST_NO='"+reqId+"' ";
			 	ResultSet rsMatGrup=ad.selectQuery(getMatGroup);
			 	while(rsMatGrup.next()){
			 		Customer_Type=rsMatGrup.getString("Customer_Type");
			 		
			 	}
			 	if(Customer_Type.equalsIgnoreCase("Exports"))
			 	{
			 		Customer_Type="Export";
			 	}   
			 	
				String userRole="";
				int checkStatus=0;
				String getUserRole="select Priority,Role from  Material_Approvers where Location='"+location+"' AND  Material_Type='"+reqType+"' AND Material_Group='"+Customer_Type+"' AND (Approver_Id='"+user.getEmployeeNo()+"' OR Parllel_Approver_1='"+user.getEmployeeNo()+"' OR Parllel_Approver_2='"+user.getEmployeeNo()+"') ";
				ResultSet rsUserRole=ad.selectQuery(getUserRole);
				while(rsUserRole.next())
				{
					checkStatus=1;
					userRole=rsUserRole.getString("Role");
				}
				pendAppForm.setUserRole(userRole);
				
				if(userRole.equalsIgnoreCase("User"))
				{
					String editRecord="select C.GSTIN_Number,C.ACCOUNT_GROUP_ID,c.REQUEST_NO,c.REQUEST_DATE,c.VIEW_TYPE,c.cutomer_code,c.Customer_Type,c.NAME, " +
				 	"c.ADDRESS1,c.ADDRESS2,c.ADDRESS3,c.ADDRESS4,c.IS_REGD_EXCISE_Customer,c.CITY,c.PINCODE,c.Attachments,c.LANDLINE_NO," +
				 	"c.MOBILE_NO,c.FAX_NO,c.EMAIL_ID,c.IS_REGD_EXCISE_VENDOR,c.LST_NO,c.TIN_NO,c.CST_NO,c.PAN_No,c.Service_Tax_Registration_No," +
				 	"c.ECC_No,c.Excise_Reg_No,c.Excise_Range,c.Excise_Division,c.DLNO1,c.DLNO2, SAP_CODE_NO,SAP_CODE_EXISTS,SAP_CREATION_DATE," +
				 	"SAP_CREATED_BY,REQUESTED_BY from CUSTOMER_MASTER_M as c  where REQUEST_NO='"+reqId+"'";
				 		
				 		
				 		
						ResultSet rsEditRecord=ad.selectQuery(editRecord);
						if(rsEditRecord.next())
						{
							
							pendAppForm.setRequestNumber(rsEditRecord.getString("REQUEST_NO"));
							pendAppForm.setGstinNo(rsEditRecord.getString("GSTIN_Number"));
							String reqDate=rsEditRecord.getString("REQUEST_DATE");
							String a[]=reqDate.split(" ");
							reqDate=a[0];
							String b[]=reqDate.split("-");
							
							reqDate=b[2]+"/"+b[1]+"/"+b[0];
							pendAppForm.setRequestDate(reqDate);
							
							if(rsEditRecord.getString("ACCOUNT_GROUP_ID").equalsIgnoreCase("IN"))
							{
								pendAppForm.setAccGroupId("Domestic");
							}
							if(rsEditRecord.getString("ACCOUNT_GROUP_ID").equalsIgnoreCase("IM"))
							{
								pendAppForm.setAccGroupId("Export Customer");
							}
							if(rsEditRecord.getString("ACCOUNT_GROUP_ID").equalsIgnoreCase("FS"))
							{
								pendAppForm.setAccGroupId("Field Staff");
							}
							if(rsEditRecord.getString("ACCOUNT_GROUP_ID").equalsIgnoreCase("7"))
							{
								pendAppForm.setAccGroupId("Plants");
							}
							
							pendAppForm.setSales("");
							pendAppForm.setAccounts("");
							String viewType=rsEditRecord.getString("VIEW_TYPE");
							if(viewType.equalsIgnoreCase("S"))
							{
								pendAppForm.setSales("Sales");
							}
							if(viewType.equalsIgnoreCase("A"))
							{
								pendAppForm.setAccounts("Accounts");
							}
							if(viewType.equalsIgnoreCase("3"))
							{
								pendAppForm.setSales("Sales");
								pendAppForm.setAccounts("Accounts");
							}
						
							
							pendAppForm.setDomestic("");
							pendAppForm.setExports("");
							
						    pendAppForm.setCustomerType(rsEditRecord.getString("Customer_Type"));
							pendAppForm.setCustomerName(rsEditRecord.getString("NAME"));
							pendAppForm.setAddress1(rsEditRecord.getString("ADDRESS1"));
							pendAppForm.setAddress2(rsEditRecord.getString("ADDRESS2"));
							pendAppForm.setAddress3(rsEditRecord.getString("ADDRESS3"));
							pendAppForm.setAddress4(rsEditRecord.getString("ADDRESS4"));
							pendAppForm.setCity(rsEditRecord.getString("CITY"));
							pendAppForm.setPincode(rsEditRecord.getString("PINCODE"));
							
						
							pendAppForm.setLandlineNo(rsEditRecord.getString("LANDLINE_NO"));
							pendAppForm.setMobileNo(rsEditRecord.getString("MOBILE_NO"));
							pendAppForm.setFaxNo(rsEditRecord.getString("FAX_NO"));
							pendAppForm.setEmailId(rsEditRecord.getString("EMAIL_ID"));
							
							String tdsStatus=rsEditRecord.getString("IS_REGD_EXCISE_Customer");
							if(tdsStatus.equalsIgnoreCase("1"))
							{
								pendAppForm.setTdsStatus("YES");
								request.setAttribute("setTdsState", "setTdsState");
							}
							if(tdsStatus.equalsIgnoreCase("0"))
								pendAppForm.setTdsStatus("No");
								
						
							pendAppForm.setListNumber(rsEditRecord.getString("LST_NO"));
							pendAppForm.setTinNumber(rsEditRecord.getString("TIN_NO"));
							pendAppForm.setCstNumber(rsEditRecord.getString("CST_NO"));
							pendAppForm.setPanNumber(rsEditRecord.getString("PAN_No"));
							pendAppForm.setServiceTaxNo(rsEditRecord.getString("Service_Tax_Registration_No"));
							String isRegdExciseVender=rsEditRecord.getString("IS_REGD_EXCISE_VENDOR");
							if(isRegdExciseVender.equalsIgnoreCase("1"))
							{
								pendAppForm.setIsRegdExciseVender("Yes");
								request.setAttribute("setRegdExciseVender", "setRegdExciseVender");
							}
							if(isRegdExciseVender.equalsIgnoreCase("0"))
							{
								pendAppForm.setIsRegdExciseVender("No");
								request.setAttribute("setRegdExciseVenderNotMandatory", "setRegdExciseVenderNotMandatory");
							}
							pendAppForm.setEccNo(rsEditRecord.getString("ECC_No"));
							pendAppForm.setExciseRegNo(rsEditRecord.getString("Excise_Reg_No"));
							pendAppForm.setExciseRange(rsEditRecord.getString("Excise_Range"));
							pendAppForm.setExciseDivision(rsEditRecord.getString("Excise_Division"));
							pendAppForm.setDlno1(rsEditRecord.getString("DLNO1"));
							pendAppForm.setDlno2(rsEditRecord.getString("DLNO2"));
						
						
							pendAppForm.setCutomerCode(rsEditRecord.getString("cutomer_code"));
							
							 String sapCodeno=rsEditRecord.getString("SAP_CODE_NO");  
								if(sapCodeno!=null){ 
									pendAppForm.setSapCodeNo(sapCodeno);		
							String sapCodeExist=rsEditRecord.getString("SAP_CODE_EXISTS");
							if(sapCodeExist.equalsIgnoreCase("1"))
							{
								pendAppForm.setSapCodeExists("True");
							}
							if(sapCodeExist.equalsIgnoreCase("0"))
								pendAppForm.setSapCodeExistsNo("On");
							String sapCreationDate=rsEditRecord.getString("SAP_CREATION_DATE");
							String sapDate[]=sapCreationDate.split(" ");
							sapCreationDate=sapDate[0];
							String sapCode[]=sapCreationDate.split("-");
							sapCreationDate=sapCode[2]+"/"+sapCode[1]+"/"+sapCode[0];
							pendAppForm.setSapCreationDate(sapCreationDate);
							pendAppForm.setSapCreatedBy(rsEditRecord.getString("SAP_CREATED_BY"));
							pendAppForm.setRequestedBy(rsEditRecord.getString("REQUESTED_BY"));
								}
							
							
							
							ArrayList fileList = new ArrayList();
							String uploadedFiles=rsEditRecord.getString("Attachments");
							if(uploadedFiles.equalsIgnoreCase(""))
							{
								
							}else{
							String v[] = uploadedFiles.split(",");
							int l = v.length;
								for (int i = 0; i < l; i++) 
								{
									CustomerMasterForm pendAppForm2=new CustomerMasterForm();
								int x=v[i].lastIndexOf("/");
								uploadedFiles=v[i].substring(x+1);		
								pendAppForm2.setFileList(uploadedFiles);
								pendAppForm2.setFilepath("jsp/EMicro Files/ESS/sapMasterRequest/Customer master files/UploadFiles/");
								fileList.add(pendAppForm2);
								}
							request.setAttribute("listName", fileList);
							}
							
							
							
								
								//currency
								String editRecord2="select cur.ISOCD from CUSTOMER_MASTER_M as c,Currency as cur where REQUEST_NO='"+reqId+"'" +
										" and cur.WAERS=c.CURRENCY_ID";
							 		
							 	
									ResultSet rsEditRecord2=ad.selectQuery(editRecord2);
									if(rsEditRecord2.next())
									{
										pendAppForm.setCurrencyId(rsEditRecord2.getString("ISOCD"));
									}
									
									//payment term
									
									String editRecord3="select pay.PAYMENT_TERM_NAME from CUSTOMER_MASTER_M as c,PAYMENT_TERM_M as pay " +
											"where REQUEST_NO='"+reqId+"' and pay.PAYMENT_TERM_ID=c.PAYMENT_TERM_ID";
								 		
								 		
								 		ResultSet rsEditRecord3=ad.selectQuery(editRecord3);
										if(rsEditRecord3.next())
										{
											pendAppForm.setPaymentTermID(rsEditRecord3.getString("PAYMENT_TERM_NAME"));
										}
										
										//acc clerk
										
										String editRecord4="select acccl.ACC_CLERK_DESC from CUSTOMER_MASTER_M as c,ACC_CLERK_M as acccl " +
												"where REQUEST_NO='"+reqId+"' and acccl.ACC_CLERK_ID=c.ACCOUNT_CLERK_ID";
									 		
									 		
									 		
											ResultSet rsEditRecord4=ad.selectQuery(editRecord4);
											if(rsEditRecord4.next())
											{
												pendAppForm.setAccountClerkId(rsEditRecord4.getString("ACC_CLERK_DESC"));
											}
											
											//tds code
											
											String editRecord5="select tds.TDS_SECTION_DESC from CUSTOMER_MASTER_M as c,TDS_SECTION_M as tds" +
													" where REQUEST_NO='"+reqId+"' and tds.TDS_SECTION_ID=c.TDS_CODE";
										 		
										 		
										 		
												ResultSet rsEditRecord5=ad.selectQuery(editRecord5);
												if(rsEditRecord5.next())
												{
													pendAppForm.setTdsCode(rsEditRecord5.getString("TDS_SECTION_DESC"));
													
												}
												
												//country
												String editRecord6="select cou.LANDX from CUSTOMER_MASTER_M as c ,Country as cou " +
														"where REQUEST_NO='"+reqId+"'and cou.LAND1=c.COUNTRY_ID ";
									 		
									 		
											ResultSet rsEditRecord6=ad.selectQuery(editRecord6);
											if(rsEditRecord6.next())
											{
												pendAppForm.setCountryId(rsEditRecord6.getString("LANDX"));
												
											}
											
											//state
											String editRecord7=" select sta.BEZEI  from CUSTOMER_MASTER_M as c,State as sta " +
													"where REQUEST_NO='"+reqId+"' and sta.BLAND=c.STATE";
								 		
								 								 		
										ResultSet rsEditRecord7=ad.selectQuery(editRecord7);
										if(rsEditRecord7.next())
										{
											pendAppForm.setState(rsEditRecord7.getString("BEZEI"));
											
										}
										
										//customer grp
										String editRecord8="select cust.C_GROUP_NAME from CUSTOMER_MASTER_M as c,Customer_Group as cust " +
												"where REQUEST_NO='"+reqId+"' and cust.C_GROUP_ID=c.Customer_Group";
							 		
							 							 		
									ResultSet rsEditRecord8=ad.selectQuery(editRecord8);
									if(rsEditRecord8.next())
									{
										pendAppForm.setCustomerGroup(rsEditRecord8.getString("C_GROUP_NAME"));
										
									}
									
									//price grp
									String editRecord9="select pri.P_GROUP_NAME from CUSTOMER_MASTER_M as c,PRICE_GROUP as pri " +
											"where REQUEST_NO='"+reqId+"'and pri.P_GROUP_ID=c.Price_Group";
						 		
						 						 		
								ResultSet rsEditRecord9=ad.selectQuery(editRecord9);
								if(rsEditRecord9.next())
								{
									pendAppForm.setPriceGroup(rsEditRecord9.getString("P_GROUP_NAME"));
									
								}
								//price list
								String editRecord10="select prili.P_LIST_NAME from CUSTOMER_MASTER_M as c,PRICE_LIST as  prili  " +
										"where REQUEST_NO='"+reqId+"'and  prili.P_List_ID=c.Price_List";
					 		
					 		
					 		ResultSet rsEditRecord10=ad.selectQuery(editRecord10);
							if(rsEditRecord10.next())
							{
								pendAppForm.setPriceList(rsEditRecord10.getString("P_LIST_NAME"));
								
							}
							
							//tax type
							String editRecord11="select tax.T_CLASS_NAME from CUSTOMER_MASTER_M as c,TAX_CLASS as tax" +
									" where REQUEST_NO='"+reqId+"'and  tax.T_CLASS_ID=c.Tax_Type";
				 		
				 		
				 		ResultSet rsEditRecord11=ad.selectQuery(editRecord11);
						if(rsEditRecord11.next())
						{
							pendAppForm.setTaxType(rsEditRecord11.getString("T_CLASS_NAME"));
							
						}												
																		
														
							
							
				 		
						}
					}
				else
				{
					ResultSet rs7 = ad.selectQuery("select PAYMENT_TERM_ID," +
					"PAYMENT_TERM_NAME from PAYMENT_TERM_M where ACTIVE='True' order by PAYMENT_TERM_NAME");
					ArrayList paymentTermList=new ArrayList();
					ArrayList paymentTermLabelList=new ArrayList();
					
					while(rs7.next()) {
						paymentTermList.add(rs7.getString("PAYMENT_TERM_ID"));
						paymentTermLabelList.add(rs7.getString("PAYMENT_TERM_ID")+"-"+rs7.getString("PAYMENT_TERM_NAME"));
					}
					pendAppForm.setPaymentTermList(paymentTermList);
					pendAppForm.setPaymentTermLabelList(paymentTermLabelList);
					
					ArrayList accountGroupList=new ArrayList();
					ArrayList accountGroupLabelList=new ArrayList();
				 	ResultSet rs1 = ad.selectQuery("select ACCOUNT_GROUP_ID,ACCOUNT_GROUP_NAME from ACCOUNT_GROUP_M where active='True'");
			ArrayList subLinkIdList = new ArrayList();
			ArrayList subLinkValueList = new ArrayList();
			while(rs1.next()) {
				accountGroupList.add(rs1.getString("ACCOUNT_GROUP_ID"));
				accountGroupLabelList.add(rs1.getString("ACCOUNT_GROUP_NAME"));
			}
			pendAppForm.setAccountGroupList(accountGroupList);
			pendAppForm.setAccountGroupLabelList(accountGroupLabelList);
						
					String getCountryDetails="select * from Country";
					LinkedList countryID=new LinkedList();
					LinkedList countryName=new LinkedList();
					ResultSet rsCountryDetails=ad.selectQuery(getCountryDetails);
					while(rsCountryDetails.next()){
						countryID.add(rsCountryDetails.getString("LAND1"));
						countryName.add(rsCountryDetails.getString("LAND1")+" - "+rsCountryDetails.getString("LANDX"));
					}
					pendAppForm.setCounID(countryID);
					pendAppForm.setCountryName(countryName);
					
					
					
					
					LinkedList currencyID=new LinkedList();
					LinkedList cureencyNames=new LinkedList();
					String geCurrencyDetails="select * from Currency";
					ResultSet rsCurrencyDetails=ad.selectQuery(geCurrencyDetails);
					while(rsCurrencyDetails.next())
					{
						currencyID.add(rsCurrencyDetails.getString("WAERS"));
						cureencyNames.add(rsCurrencyDetails.getString("WAERS")+" - "+rsCurrencyDetails.getString("ISOCD"));
					}
					pendAppForm.setCurrenIds(currencyID);
					pendAppForm.setCurrencys(cureencyNames);	
					
				LinkedList tdsID=new LinkedList();
				LinkedList tdsValue=new LinkedList();
				
				String getTDs="select * from TDS_SECTION_M where ACTIVE='True'";
				ResultSet rsTDs=ad.selectQuery(getTDs);
				while(rsTDs.next())
				{
					tdsID.add(rsTDs.getString("TDS_SECTION_ID"));
					tdsValue.add(rsTDs.getString("TDS_SECTION_DESC"));
				}
				
				pendAppForm.setTdsIds(tdsID);
				pendAppForm.setTdsCodes(tdsValue);

				
				LinkedList cusGroupID = new LinkedList();
				LinkedList cusGroupList = new LinkedList();
				ResultSet rss = ad.selectQuery("select C_GROUP_ID,C_GROUP_NAME from Customer_Group ");
				while(rss.next()) {
					cusGroupID.add(rss.getString("C_GROUP_ID"));
					cusGroupList.add(rss.getString("C_GROUP_NAME"));
				}
				pendAppForm.setCusGroupID(cusGroupID);
				pendAppForm.setCusGroupList(cusGroupList);	
				
				LinkedList priceGroupID = new LinkedList();
				LinkedList piceGroupList = new LinkedList();
				ResultSet rs2 = ad.selectQuery("select * from PRICE_GROUP ");
				while(rs2.next()) {
					priceGroupID.add(rs2.getString("P_GROUP_ID"));
					piceGroupList.add(rs2.getString("P_GROUP_NAME"));
				}
				pendAppForm.setPriceGroupID(priceGroupID);
				pendAppForm.setPiceGroupList(piceGroupList);	
				
				ResultSet rs8 = ad.selectQuery("select ACC_CLERK_ID," +
				"ACC_CLERK_DESC from ACC_CLERK_M where ACTIVE='True'");
				ArrayList accountClerkList=new ArrayList();
				ArrayList accountClerkLabelList=new ArrayList();
				
				while(rs8.next()) {
					accountClerkList.add(rs8.getString("ACC_CLERK_ID"));
					accountClerkLabelList.add(rs8.getString("ACC_CLERK_DESC"));
				}
				pendAppForm.setAccountClerkList(accountClerkList);
				pendAppForm.setAccountClerkLabelList(accountClerkLabelList);
				
				
				LinkedList priceListID = new LinkedList();
				LinkedList piceListValue = new LinkedList();
				ResultSet rs3 = ad.selectQuery("select * from PRICE_LIST ");
				while(rs3.next()) {
					priceListID.add(rs3.getString("P_List_ID"));
					piceListValue.add(rs3.getString("P_LIST_NAME"));
				}
				pendAppForm.setPriceListID(priceListID);
				pendAppForm.setPiceListValue(piceListValue);
				
				LinkedList taxTypeID = new LinkedList();
				LinkedList taxTypeValue = new LinkedList();
				ResultSet rs4 = ad.selectQuery("select * from TAX_CLASS ");
				while(rs4.next()) {
					taxTypeID.add(rs4.getString("T_CLASS_ID"));
					taxTypeValue.add(rs4.getString("T_CLASS_NAME"));
				}
				pendAppForm.setTaxTypeID(taxTypeID);
				pendAppForm.setTaxTypeValue(taxTypeValue);	
				
				
				
				
			
				
				
				
				// get material records
				
				EMicroUtils ut=new EMicroUtils();
			
				String editRecord="select * from CUSTOMER_MASTER_M where REQUEST_NO='"+reqId+"'";
				ResultSet rsEditRecord=ad.selectQuery(editRecord);
				
				while(rsEditRecord.next())
				{
					
					pendAppForm.setRequestNo(reqId);
					String reqDate=rsEditRecord.getString("REQUEST_DATE");
					String a[]=reqDate.split(" ");
					reqDate=a[0];
					String b[]=reqDate.split("-");
					reqDate=b[2]+"/"+b[1]+"/"+b[0];
					pendAppForm.setRequestDate(reqDate);
					pendAppForm.setAccGroupId(rsEditRecord.getString("ACCOUNT_GROUP_ID"));
					pendAppForm.setSales("");
					pendAppForm.setAccounts("");
					pendAppForm.setGstinNo(rsEditRecord.getString("GSTIN_Number"));
					String viewType=rsEditRecord.getString("VIEW_TYPE");
					if(viewType.equalsIgnoreCase("S"))
					{
						pendAppForm.setSales("On");
					}
					if(viewType.equalsIgnoreCase("A"))
					{
						pendAppForm.setAccounts("On");
					}
					if(viewType.equalsIgnoreCase("3"))
					{
						pendAppForm.setSales("On");
						pendAppForm.setAccounts("On");
					}
					
					pendAppForm.setDomestic("");
					pendAppForm.setExports("");
					
					String customertype=rsEditRecord.getString("Customer_Type");
					if(customertype.equalsIgnoreCase("Domestic"))
					{
						pendAppForm.setDomestic("On");
					}
					if(customertype.equalsIgnoreCase("Exports"))
					{
						pendAppForm.setExports("On");
					}
					pendAppForm.setCustomerName(rsEditRecord.getString("NAME"));
					pendAppForm.setAddress1(rsEditRecord.getString("ADDRESS1"));
					pendAppForm.setAddress2(rsEditRecord.getString("ADDRESS2"));
					pendAppForm.setAddress3(rsEditRecord.getString("ADDRESS3"));
					pendAppForm.setAddress4(rsEditRecord.getString("ADDRESS4"));
					pendAppForm.setCity(rsEditRecord.getString("CITY"));
					pendAppForm.setPincode(rsEditRecord.getString("PINCODE"));
					
					pendAppForm.setCountryId(rsEditRecord.getString("COUNTRY_ID"));
					
					
					
				
					pendAppForm.setState(rsEditRecord.getString("STATE"));
					pendAppForm.setLandlineNo(rsEditRecord.getString("LANDLINE_NO"));
					pendAppForm.setMobileNo(rsEditRecord.getString("MOBILE_NO"));
					pendAppForm.setFaxNo(rsEditRecord.getString("FAX_NO"));
					pendAppForm.setEmailId(rsEditRecord.getString("EMAIL_ID"));
					pendAppForm.setCustomerGroup(rsEditRecord.getString("Customer_Group"));
					pendAppForm.setPriceGroup(rsEditRecord.getString("Price_Group"));
					pendAppForm.setPriceList(rsEditRecord.getString("Price_List"));
					pendAppForm.setTaxType(rsEditRecord.getString("Tax_Type"));
					pendAppForm.setCurrencyId(rsEditRecord.getString("CURRENCY_ID"));
					String tdsStatus=rsEditRecord.getString("IS_REGD_EXCISE_Customer");
					if(tdsStatus.equalsIgnoreCase("1"))
					{
						pendAppForm.setTdsStatus("True");
						request.setAttribute("setTdsState", "setTdsState");
					}
					if(tdsStatus.equalsIgnoreCase("0"))
						pendAppForm.setTdsStatus("False");
						
					pendAppForm.setTdsCode(rsEditRecord.getString("TDS_CODE"));
					pendAppForm.setListNumber(rsEditRecord.getString("LST_NO"));
					pendAppForm.setTinNumber(rsEditRecord.getString("TIN_NO"));
					pendAppForm.setCstNumber(rsEditRecord.getString("CST_NO"));
					pendAppForm.setPanNumber(rsEditRecord.getString("PAN_No"));
					pendAppForm.setServiceTaxNo(rsEditRecord.getString("Service_Tax_Registration_No"));
					String isRegdExciseVender=rsEditRecord.getString("IS_REGD_EXCISE_VENDOR");
					if(isRegdExciseVender.equalsIgnoreCase("1"))
					{
						pendAppForm.setIsRegdExciseVender("True");
						request.setAttribute("setRegdExciseVender", "setRegdExciseVender");
					}
					if(isRegdExciseVender.equalsIgnoreCase("0"))
					{
						pendAppForm.setIsRegdExciseVender("False");
						request.setAttribute("setRegdExciseVenderNotMandatory", "setRegdExciseVenderNotMandatory");
					}
					pendAppForm.setEccNo(rsEditRecord.getString("ECC_No"));
					pendAppForm.setExciseRegNo(rsEditRecord.getString("Excise_Reg_No"));
					pendAppForm.setExciseRange(rsEditRecord.getString("Excise_Range"));
					pendAppForm.setExciseDivision(rsEditRecord.getString("Excise_Division"));
					pendAppForm.setDlno1(rsEditRecord.getString("DLNO1"));
					pendAppForm.setDlno2(rsEditRecord.getString("DLNO2"));
					pendAppForm.setPaymentTermID(rsEditRecord.getString("PAYMENT_TERM_ID"));
					pendAppForm.setAccountClerkId(rsEditRecord.getString("ACCOUNT_CLERK_ID"));
					pendAppForm.setCutomerCode(rsEditRecord.getString("cutomer_code"));
					
					String sapCodeno=rsEditRecord.getString("SAP_CODE_NO");
					if(sapCodeno!=null){
				pendAppForm.setSapCodeNo(sapCodeno);		
				String sapCodeExist=rsEditRecord.getString("SAP_CODE_EXISTS");
				if(sapCodeExist.equalsIgnoreCase("1"))
				{
					pendAppForm.setSapCodeExists("True");
				}
				if(sapCodeExist.equalsIgnoreCase("0"))
					pendAppForm.setSapCodeExistsNo("True");
				String sapCreationDate=rsEditRecord.getString("SAP_CREATION_DATE");
				String sapDate[]=sapCreationDate.split(" ");
				sapCreationDate=sapDate[0];
				String sapCode[]=sapCreationDate.split("-");
				sapCreationDate=sapCode[2]+"/"+sapCode[1]+"/"+sapCode[0];
				pendAppForm.setSapCreationDate(sapCreationDate);
				pendAppForm.setSapCreatedBy(rsEditRecord.getString("SAP_CREATED_BY"));
				pendAppForm.setRequestedBy(rsEditRecord.getString("REQUESTED_BY"));
					}
					
					
					
					ArrayList fileList = new ArrayList();
					String uploadedFiles=rsEditRecord.getString("Attachments");
					if(uploadedFiles.equalsIgnoreCase(""))
					{
						
					}try{
					String v[] = uploadedFiles.split(",");
					int l = v.length;
						for (int i = 0; i < l; i++) 
						{
							CustomerMasterForm pendAppForm2=new CustomerMasterForm();
						int x=v[i].lastIndexOf("/");
						uploadedFiles=v[i].substring(x+1);		
						pendAppForm2.setFileList(uploadedFiles);
						pendAppForm2.setFilepath("jsp/EMicro Files/ESS/sapMasterRequest/Customer master files/UploadFiles/");
						fileList.add(pendAppForm2);
						}
					request.setAttribute("listName", fileList);
					
				}
					catch (Exception e) {
						e.printStackTrace();
				
			}
			
				}
				
				
				
				LinkedList stateID=new LinkedList();
				LinkedList stateName=new LinkedList();
				
				String getStateDetails="select * from State where LAND1='"+pendAppForm.getCountryId()+"'";
				ResultSet rsState=ad.selectQuery(getStateDetails);
				while(rsState.next())
				{
					stateID.add(rsState.getString("BLAND"));
					stateName.add(rsState.getString("BEZEI"));
				}
					
				pendAppForm.setStateId(stateID);
				pendAppForm.setStates(stateName);
				request.setAttribute("diplayStates", "diplayStates");
				
				
				
				
				
				}
				
				if(filterBy.equalsIgnoreCase("Pending")){
					request.setAttribute("approveButton", "approveButton");
					request.setAttribute("rejectButton", "rejectButton");
				}
				//set ApproverDetails  
				checkStatus=0;
				int appStatus=0;
				LinkedList listApprers=new LinkedList();
				String getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
						"where mast.Location='"+location+"' AND  mast.Material_Type='"+reqType+"' AND Material_Group='"+Customer_Type+"' and mast.Approver_Id=emp.PERNR order by Priority";
				ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
				while(rsApprDetails.next())
				{
					checkStatus=1;
					ApprovalsForm apprvers=new ApprovalsForm();
					apprvers.setPriority(rsApprDetails.getString("Priority"));
					apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
					String empCode=rsApprDetails.getString("Approver_Id");
					String approveStatus="";
					String recordStatus="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date," +
					"all_r.Comments from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and " +
					"mast.Location='"+location+"' AND all_r.type='Customer Master' AND Material_Group='"+Customer_Type+"' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver " +
					"and (mast.Role='User' or mast.Role='Accounts' or mast.Role='Creator') and mast.Approver_Id=emp.PERNR  group by mast.Priority,mast.Priority," +
					"mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
					ResultSet rsAppInfo=ad.selectQuery(recordStatus);
					while(rsAppInfo.next())
					{
						
						apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
						approveStatus=rsAppInfo.getString("Req_Status");
						if(approveStatus.equalsIgnoreCase(""))
						{
							apprvers.setApproveStatus("In Process");
						}
						if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
						{
							String approveDate=rsAppInfo.getString("approved_date");
							String a[]=approveDate.split(" ");
							approveDate=a[0];
							String b[]=approveDate.split("-");
							approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
						apprvers.setDate(approveDate);
						}else{
							String rejectDate=	rsAppInfo.getString("rejected_date");
						
							String a[]=rejectDate.split(" ");
							rejectDate=a[0];
							String b[]=rejectDate.split("-");
							rejectDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
							apprvers.setDate(rejectDate);
								appStatus=1;
						}
						String comments=rsAppInfo.getString("Comments");
						if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
						{
							apprvers.setComments("");
						}else{
							apprvers.setComments(rsAppInfo.getString("Comments"));
							
						}
						
						
					}
					if(approveStatus.equalsIgnoreCase("") && appStatus==0)
					{
						apprvers.setApproveStatus("In Process");
						
					}
					apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
					listApprers.add(apprvers);
				}
				
				request.setAttribute("approverDetails", listApprers);
				
				if(userRole.equalsIgnoreCase("User"))
				{
				return mapping.findForward("customerMaster");
				}
				if(userRole.equalsIgnoreCase("Accounts"))
				{
				return mapping.findForward("customerMaster_Account");
				}
				if(userRole.equalsIgnoreCase("Creator"))
				{
					Date dNow = new Date( );
					 SimpleDateFormat ft = new SimpleDateFormat ("dd/MM/yyyy");
						String dateNow = ft.format(dNow);
						pendAppForm.setSapCreationDate(dateNow);
					pendAppForm.setSapCreatedBy(user.getEmployeeNo()+"-"+user.getFullName());
					
				return mapping.findForward("customerMaster_Creator");
				}
				
				
				
				 getMatGroup="select Customer_Type from CUSTOMER_MASTER_M where REQUEST_NO='"+reqId+"' ";
			  rsMatGrup=ad.selectQuery(getMatGroup);
			 	while(rsMatGrup.next()){
			 		Customer_Type=rsMatGrup.getString("Customer_Type");
			 		
			 	}
			 	if(Customer_Type.equalsIgnoreCase("Exports"))
			 	{
			 		Customer_Type="Export";
			 	}   
			 		
			 	
				 listApprers=new LinkedList();
				 getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
						"where mast.Location='' AND  mast.Material_Type='Customer Master' AND Material_Group='"+Customer_Type+"' and mast.Approver_Id=emp.PERNR order by Priority";
				 rsApprDetails=ad.selectQuery(getApprDetails);
				while(rsApprDetails.next())
				{
					checkStatus=1;
					ApprovalsForm apprvers=new ApprovalsForm();
					apprvers.setPriority(rsApprDetails.getString("Priority"));
					apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
					String empCode=rsApprDetails.getString("Approver_Id");
					String approveStatus="";
					String recordStatus="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date," +
					"all_r.Comments from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and " +
					"mast.Location='' AND all_r.type='Customer Master' AND Material_Group='"+Customer_Type+"' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver " +
					"and (mast.Role='User' or mast.Role='Accounts' or mast.Role='Creator') and mast.Approver_Id=emp.PERNR  group by mast.Priority,mast.Priority," +
					"mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
					ResultSet rsAppInfo=ad.selectQuery(recordStatus);
					while(rsAppInfo.next())
					{
						
						apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
						approveStatus=rsAppInfo.getString("Req_Status");
						if(approveStatus.equalsIgnoreCase(""))
						{
							apprvers.setApproveStatus("In Process");
						}
						if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
						{
							String approveDate=rsAppInfo.getString("approved_date");
							String a[]=approveDate.split(" ");
							approveDate=a[0];
							String b[]=approveDate.split("-");
							approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
						apprvers.setDate(approveDate);
						}else{
							String rejectDate=	rsAppInfo.getString("rejected_date");
							appStatus=1;
							String a[]=rejectDate.split(" ");
							rejectDate=a[0];
							String b[]=rejectDate.split("-");
							rejectDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
							apprvers.setDate(rejectDate);
						}
						String comments=rsAppInfo.getString("Comments");
						if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
						{
							apprvers.setComments("");
						}else{
							apprvers.setComments(rsAppInfo.getString("Comments"));
						}
						
						
					}
					if(approveStatus.equalsIgnoreCase(""))
					{
						apprvers.setApproveStatus("In Process");
					}
					apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
					listApprers.add(apprvers);
				}
				
				request.setAttribute("approverDetails", listApprers);
				
			
			
			}
			
			if(reqType.equalsIgnoreCase("Vendor Master")){
				
				//rejected Status 
				String getRejectedStatus="select rejected_flag from vendor_master_m where REQUEST_NO='"+reqId+"'";
				ResultSet rsRejected=ad.selectQuery(getRejectedStatus);
				while(rsRejected.next())
				{
					String rejected_flag=rsRejected.getString("rejected_flag");
					if(rejected_flag!=null)
					{
						if(rejected_flag.equalsIgnoreCase("yes"))
							request.setAttribute("rejectedFLag", "rejectedFLag");
					}
				}
				String matType="Vendor Master";
				String matGroup=request.getParameter("vendorType");
				String userRole="";
				int checkStatus=0;
				String location="";
				
				
				
			 	if(matGroup.equalsIgnoreCase("Import")){
			 		
			 	}else{
			 		matGroup="Local";
			 	}
				
				String getUserRole="select Priority,Role from  Material_Approvers where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' AND (Approver_Id='"+user.getEmployeeNo()+"' OR Parllel_Approver_1='"+user.getEmployeeNo()+"' OR Parllel_Approver_2='"+user.getEmployeeNo()+"') ";
				ResultSet rsUserRole=ad.selectQuery(getUserRole);
				while(rsUserRole.next())
				{
					checkStatus=1;
					userRole=rsUserRole.getString("Role");
				}
				pendAppForm.setUserRole(userRole);
				if(userRole.equalsIgnoreCase("User"))
				{
					String accountGroupID="";
					String getVendorDetails="select v.GSTIN_Number, v.REQUEST_NO,v.REQUEST_DATE,acc.ACCOUNT_GROUP_NAME,acccl.ACC_CLERK_DESC,v.VIEW_TYPE,v.Type_Of_Vendor," +
					"v.TITLE,v.NAME,v.ADDRESS1,v.ADDRESS2,v.ADDRESS3,v.ADDRESS4,v.CITY,v.PINCODE,v.LANDLINE_NO," +
					"v.MOBILE_NO,v.FAX_NO,v.EMAIL_ID,cur.ISOCD,rec.RECONCILIATION_ACCOUNT_NAME,  v.IS_ELIGIBLE_FOR_TDS,v.LST_NO,v.TIN_NO" +
					",v.CST_NO, v.IS_APPROVED_VENDOR,v.PAN_No,v.Service_Tax_Registration_No,v.IS_REGD_EXCISE_VENDOR," +
					"v.ECC_No,v.Excise_Reg_No,v.Excise_Range,v.Excise_Division,v.COMMISSIONERATE,SAP_CODE_NO,SAP_CODE_EXISTS,SAP_CREATION_DATE," +
					"SAP_CREATED_BY,REQUESTED_BY  from vendor_master_m as v ,ACCOUNT_GROUP_M as acc,ACC_CLERK_M as acccl ,Currency as cur," +
					"RECONCILIATION_ACCOUNT_M as rec  where REQUEST_NO='"+reqId+"' and acc.ACCOUNT_GROUP_ID=v.ACCOUNT_GROUP_ID and  " +
					" cur.WAERS=v.CURRENCY_ID  and rec.RECONCILIATION_ACCOUNT_ID=v.RECONCILATION_ACT_ID " +
					" and  acccl.ACC_CLERK_ID=v.ACCOUNT_CLERK_ID";
							
						
						
						ResultSet rs=ad.selectQuery(getVendorDetails);
						if(rs.next())
						{
							pendAppForm.setRequestNumber(rs.getString("REQUEST_NO"));
							
						    accountGroupID=rs.getString("ACCOUNT_GROUP_NAME");
						    accountGroupID=accountGroupID.replace(" ","");
							pendAppForm.setAccountGroupId(accountGroupID);
						     
							 String reqDate=rs.getString("REQUEST_DATE");
								String a[]=reqDate.split(" ");
								reqDate=a[0];
								String b[]=reqDate.split("-");
								reqDate=b[2]+"/"+b[1]+"/"+b[0];
								 pendAppForm.setRequestDate(reqDate);
							 
							 String viewType=rs.getString("VIEW_TYPE");
							 if(viewType.equalsIgnoreCase("1"))
							 {
							pendAppForm.setPurchaseView("Purchase View");
							 }
							 if(viewType.equalsIgnoreCase("2"))
							 {
							pendAppForm.setAccountView("Account View");
							 }
							 if(viewType.equalsIgnoreCase("3"))
							 {
									pendAppForm.setPurchaseView("Purchase View");
							pendAppForm.setAccountView("Account View");
							 }
							 pendAppForm.setGstinNo(rs.getString("GSTIN_Number"));
							 pendAppForm.setTitle(rs.getString("TITLE"));
							 pendAppForm.setName(rs.getString("NAME"));
							 pendAppForm.setAddress1(rs.getString("ADDRESS1"));
							pendAppForm.setAddress2(rs.getString("ADDRESS2"));
							 pendAppForm.setAddress3(rs.getString("ADDRESS3"));
							 pendAppForm.setAddress4(rs.getString("ADDRESS4"));
							pendAppForm.setCity(rs.getString("CITY"));
							 pendAppForm.setPinCode(rs.getString("PINCODE"));
						
							pendAppForm.setLandLineNo(rs.getString("LANDLINE_NO"));
							 pendAppForm.setMobileNo(rs.getString("MOBILE_NO"));
							 pendAppForm.setFaxNo(rs.getString("FAX_NO"));
							 pendAppForm.setEmailId(rs.getString("EMAIL_ID"));
							 pendAppForm.setCurrencyId(rs.getString("ISOCD"));
							 pendAppForm.setReConcillationActId(rs.getString("RECONCILIATION_ACCOUNT_NAME"));
							String elgTds=rs.getString("IS_ELIGIBLE_FOR_TDS");
							if(elgTds.equalsIgnoreCase("1"))
							{
								pendAppForm.setElgTds("YES");
							}
							if(elgTds.equalsIgnoreCase("0"))
							{
								pendAppForm.setElgTds("No");
							}
						
							 pendAppForm.setLstNo(rs.getString("LST_NO"));
							 pendAppForm.setTinNo(rs.getString("TIN_NO"));
							pendAppForm.setCstNo(rs.getString("CST_NO"));
							 pendAppForm.setPanNo(rs.getString("PAN_No"));
							 pendAppForm.setServiceTaxRegNo(rs.getString("Service_Tax_Registration_No"));
							 String isRegistVendor=rs.getString("IS_REGD_EXCISE_VENDOR");
							 	if(isRegistVendor.equalsIgnoreCase("1"))
								{
								 pendAppForm.setRegExciseVendor("Yes");
								 request.setAttribute("RegExciseVendor", "RegExciseVendor");
								}
								if(isRegistVendor.equalsIgnoreCase("0"))
								{
									
									
								pendAppForm.setRegExciseVendor("No");
								}
							 
							 pendAppForm.setEccNo(rs.getString("ECC_No"));
							 pendAppForm.setExciseRegNo(rs.getString("Excise_Reg_No"));
							 pendAppForm.setExciseRange(rs.getString("Excise_Range"));
							 pendAppForm.setCommissionerate(rs.getString("COMMISSIONERATE"));
							 pendAppForm.setExciseDivision(rs.getString("Excise_Division"));
							
							 pendAppForm.setAccountClerkId(rs.getString("ACC_CLERK_DESC"));
							 pendAppForm.setIsApprovedVendor(rs.getString("IS_APPROVED_VENDOR"));
							 String isApproveVendor=rs.getString("IS_APPROVED_VENDOR");
							if(isApproveVendor.equalsIgnoreCase("1"))
							{
								pendAppForm.setIsApprovedVendor("Yes");
							}	if(isApproveVendor.equalsIgnoreCase("0")){
								pendAppForm.setIsApprovedVendor("No");
							}
							 
						
						
							 String typeofVendor=rs.getString("Type_Of_Vendor");
							 if(typeofVendor.equalsIgnoreCase("I"))
								{												
								pendAppForm.setTypeOfVendor("IMPORTER");
								}
							 if(typeofVendor.equalsIgnoreCase("MD"))
								{												
								pendAppForm.setTypeOfVendor("DEPOT MANUFACTURER");
								}
							 if(typeofVendor.equalsIgnoreCase("M"))
								{												
								pendAppForm.setTypeOfVendor("MANUFACTURER");
								}
							 if(typeofVendor.equalsIgnoreCase("D"))
								{												
								pendAppForm.setTypeOfVendor("DEALER");
								}
							 if(typeofVendor.equalsIgnoreCase("FD"))
								{												
								pendAppForm.setTypeOfVendor("FIRST STAGE DEALER OF INDIGENOUS");
								}
							 if(typeofVendor.equalsIgnoreCase("SD"))
								{												
								pendAppForm.setTypeOfVendor("SECOND STAGE DEALER OF INDIGENOUS");
								}
							 String sapCodeno=rs.getString("SAP_CODE_NO");  
								if(sapCodeno!=null){ 
									pendAppForm.setSapCodeNo(sapCodeno);		
							String sapCodeExist=rs.getString("SAP_CODE_EXISTS");
							if(sapCodeExist.equalsIgnoreCase("1"))
							{
								pendAppForm.setSapCodeExists("True");
							}
							if(sapCodeExist.equalsIgnoreCase("0"))
								pendAppForm.setSapCodeExistsNo("True");
							String sapCreationDate=rs.getString("SAP_CREATION_DATE");
							String sapDate[]=sapCreationDate.split(" ");
							sapCreationDate=sapDate[0];
							String sapCode[]=sapCreationDate.split("-");
							sapCreationDate=sapCode[2]+"/"+sapCode[1]+"/"+sapCode[0];
							pendAppForm.setSapCreationDate(sapCreationDate);
							pendAppForm.setSapCreatedBy(rs.getString("SAP_CREATED_BY"));
							pendAppForm.setRequestedBy(rs.getString("REQUESTED_BY"));
								}
							
						}
						
						ArrayList listOfFiles=new ArrayList();
						String getUploadedFiles="select * from temp_vendor_documents where request_no='"+reqId+"'  ";
						ResultSet rsUploadFile=ad.selectQuery(getUploadedFiles);
						while(rsUploadFile.next())
						{
							VendorMasterRequestForm	vendorMasterRequestForm1=new VendorMasterRequestForm();
							vendorMasterRequestForm1.setFileName(rsUploadFile.getString("file_name"));
							vendorMasterRequestForm1.setFileId(rsUploadFile.getString("id"));
							vendorMasterRequestForm1.setFilepath("jsp/EMicro Files/ESS/sapMasterRequest/vendorDocuments/temp/"+rsUploadFile.getString("file_name"));
							listOfFiles.add(vendorMasterRequestForm1);
						}
						request.setAttribute("documentDetails", listOfFiles);
						
						//payment term
						String getVendorDetails4="select pay.PAYMENT_TERM_NAME from vendor_master_m as v,PAYMENT_TERM_M as pay	" +
								"where REQUEST_NO='"+reqId+"'and pay.PAYMENT_TERM_ID=v.PAYMENT_TERM_ID";
								
						ResultSet rs4=ad.selectQuery(getVendorDetails4);
						if(rs4.next())
						{
							pendAppForm.setPaymentTermId(rs4.getString("PAYMENT_TERM_NAME"));
						}
						//tds
						String getVendorDetails1="select tds.TDS_SECTION_DESC from vendor_master_m as v," +
								"TDS_SECTION_M as tds where REQUEST_NO='"+reqId+"' and tds.TDS_SECTION_ID=v.TDS_CODE";
								
						ResultSet rs1=ad.selectQuery(getVendorDetails1);
						if(rs1.next())
						{
							 pendAppForm.setTdsCode(rs1.getString("TDS_SECTION_DESC"));
						}
						
						//country
						String getVendorDetails2=" select cou.LANDX from vendor_master_m as v,Country as cou " +
								" where REQUEST_NO='"+reqId+"' and cou.LAND1=v.COUNTRY_ID ";
						
				ResultSet rs2=ad.selectQuery(getVendorDetails2);
				if(rs2.next())
				{
					pendAppForm.setCountry(rs2.getString("LANDX"));
				}
				//state
				String getVendorDetails3=" select sta.BEZEI from vendor_master_m as v,State as sta " +
						"where REQUEST_NO='"+reqId+"' and sta.BLAND=v.STATE";
				
		ResultSet rs3=ad.selectQuery(getVendorDetails3);
		if(rs3.next())
		{
			pendAppForm.setState(rs3.getString("BEZEI"));
		}
						
						
						
				}else{
				
					try{
						

						ArrayList accountGroupList=new ArrayList();
						ArrayList accountGroupLabelList=new ArrayList();
					 	ResultSet rs1 = ad.selectQuery("select ACCOUNT_GROUP_ID,ACCOUNT_GROUP_NAME from ACCOUNT_GROUP_M where active='True'");
				ArrayList subLinkIdList = new ArrayList();
				ArrayList subLinkValueList = new ArrayList();
				while(rs1.next()) {
					accountGroupList.add(rs1.getString("ACCOUNT_GROUP_ID"));
					accountGroupLabelList.add(rs1.getString("ACCOUNT_GROUP_NAME"));
				}
				pendAppForm.setAccountGroupList(accountGroupList);
				pendAppForm.setAccountGroupLabelList(accountGroupLabelList);
					 	 
					 	 
				ResultSet rs9 = ad.selectQuery("select * from Country");
				ArrayList countryList=new ArrayList();
				ArrayList countryLabelList=new ArrayList();
				
				while(rs9.next()) {
					countryList.add(rs9.getString("LAND1"));
					countryLabelList.add(rs9.getString("LAND1")+" - "+rs9.getString("LANDX"));
				}
				pendAppForm.setCountryList(countryList);
				pendAppForm.setCountryLabelList(countryLabelList);
				
				
				ResultSet rs5 = ad.selectQuery("select WAERS,ISOCD from Currency");
				ArrayList currencyList=new ArrayList();
				ArrayList currencyLabelList=new ArrayList();

				while(rs5.next()) {
					currencyList.add(rs5.getString("WAERS"));
					currencyLabelList.add(rs5.getString("ISOCD"));
				}
				pendAppForm.setCurrencyList(currencyList);
				pendAppForm.setCurrencyLabelList(currencyLabelList);
				
				
				ResultSet rs6 = ad.selectQuery("select RECONCILIATION_ACCOUNT_ID," +
						"RECONCILIATION_ACCOUNT_NAME from RECONCILIATION_ACCOUNT_M where ACTIVE='True' order by RECONCILIATION_ACCOUNT_ID");
				ArrayList reConcillationList=new ArrayList();
				ArrayList reConcillationLabelList=new ArrayList();
				
				
				while(rs6.next()) {
					reConcillationList.add(rs6.getString("RECONCILIATION_ACCOUNT_ID"));
					reConcillationLabelList.add(rs6.getString("RECONCILIATION_ACCOUNT_ID")+"-"+rs6.getString("RECONCILIATION_ACCOUNT_NAME"));
				}
				pendAppForm.setReConcillationList(reConcillationList);
				pendAppForm.setReConcillationLabelList(reConcillationLabelList);
				
				
				ResultSet rs7 = ad.selectQuery("select PAYMENT_TERM_ID," +
				"PAYMENT_TERM_NAME from PAYMENT_TERM_M where ACTIVE='True' order by PAYMENT_TERM_NAME");
				ArrayList paymentTermList=new ArrayList();
				ArrayList paymentTermLabelList=new ArrayList();
				
				while(rs7.next()) {
					paymentTermList.add(rs7.getString("PAYMENT_TERM_ID"));
					paymentTermLabelList.add(rs7.getString("PAYMENT_TERM_ID")+"-"+rs7.getString("PAYMENT_TERM_NAME"));
				}
				pendAppForm.setPaymentTermList(paymentTermList);
				pendAppForm.setPaymentTermLabelList(paymentTermLabelList);
				
				
				ResultSet rs8 = ad.selectQuery("select ACC_CLERK_ID," +
				"ACC_CLERK_DESC from ACC_CLERK_M where ACTIVE='True'");
				ArrayList accountClerkList=new ArrayList();
				ArrayList accountClerkLabelList=new ArrayList();
				
				while(rs8.next()) {
					accountClerkList.add(rs8.getString("ACC_CLERK_ID"));
					accountClerkLabelList.add(rs8.getString("ACC_CLERK_DESC"));
				}
				pendAppForm.setAccountClerkList(accountClerkList);
				pendAppForm.setAccountClerkLabelList(accountClerkLabelList);
				
				
				ResultSet rs11 = ad.selectQuery("select LOCID,LOCNAME from location");
				ArrayList locationList=new ArrayList();
				ArrayList locationLabelList=new ArrayList();
				
				while(rs11.next()) {
					locationList.add(rs11.getString("LOCID"));
					locationLabelList.add(rs11.getString("LOCID")+"-"+rs11.getString("LOCNAME"));
				}
				pendAppForm.setLocationIdList(locationList);
				pendAppForm.setLocationLabelList(locationLabelList);
				
				
				
				ResultSet rsTds = ad.selectQuery("select TDS_SECTION_ID,TDS_SECTION_DESC from TDS_SECTION_M where ACTIVE='True' ");
				ArrayList tdsIdList=new ArrayList();
				ArrayList tdsLabelList=new ArrayList();
				
				while(rsTds.next()) {
					tdsIdList.add(rsTds.getString("TDS_SECTION_ID"));
					tdsLabelList.add(rsTds.getString("TDS_SECTION_DESC"));
				}
				pendAppForm.setTdsIdList(tdsIdList);
				pendAppForm.setTdsLabelList(tdsLabelList);
				
				ArrayList venodreCode=new ArrayList();
				ArrayList vendorType=new ArrayList();
				ResultSet rsVendorType = ad.selectQuery("select V_CODE,V_LTXT from VENDOR_TYPE where active='True' ");
				while(rsVendorType.next()) {
					venodreCode.add(rsVendorType.getString("V_CODE"));
					vendorType.add(rsVendorType.getString("V_LTXT"));
				}
				
				pendAppForm.setRequestDate(EMicroUtils.getCurrentSysDate());
				
						String country="";
					
					String getVendorDetails="select * from vendor_master_m where REQUEST_NO='"+reqId+"'";
					ResultSet rs=ad.selectQuery(getVendorDetails);
					while(rs.next())
					{
						
						pendAppForm.setRequestNo(rs.getString("REQUEST_NO"));
						pendAppForm.setRequestNumber(rs.getString("REQUEST_NO"));
						pendAppForm.setLocationId(rs.getString("LOCATION_ID"));
					    String accountGroupID=rs.getString("ACCOUNT_GROUP_ID");
					    accountGroupID=accountGroupID.replace(" ","");
					    pendAppForm.setAccountGroupId(accountGroupID);
					    pendAppForm.setGstinNo(rs.getString("GSTIN_Number"));
						 String reqDate=rs.getString("REQUEST_DATE");
							String a[]=reqDate.split(" ");
							reqDate=a[0];
							String b[]=reqDate.split("-");
							reqDate=b[2]+"/"+b[1]+"/"+b[0];
							pendAppForm.setRequestDate(reqDate);
						 
						 String viewType=rs.getString("VIEW_TYPE");
						 if(viewType.equalsIgnoreCase("1"))
						 {
							 pendAppForm.setPurchaseView("On");

							 pendAppForm.setAccountView("Off");
						 }
						 if(viewType.equalsIgnoreCase("2")){
							 pendAppForm.setAccountView("On");
							 pendAppForm.setPurchaseView("Off");
						 }
						 if(viewType.equalsIgnoreCase("3")){
							 pendAppForm.setPurchaseView("On");
							 pendAppForm.setAccountView("On");
							 }
						 
						 pendAppForm.setTitle(rs.getString("TITLE").toUpperCase());
						 pendAppForm.setName(rs.getString("NAME").toUpperCase());
						 pendAppForm.setAddress1(rs.getString("ADDRESS1").toUpperCase());
						 pendAppForm.setAddress2(rs.getString("ADDRESS2").toUpperCase());
						 pendAppForm.setAddress3(rs.getString("ADDRESS3").toUpperCase());
						 pendAppForm.setAddress4(rs.getString("ADDRESS4").toUpperCase());
						 pendAppForm.setCity(rs.getString("CITY").toUpperCase());
						 pendAppForm.setPinCode(rs.getString("PINCODE").toUpperCase());
						 pendAppForm.setCountry(rs.getString("COUNTRY_ID"));
						 country=rs.getString("COUNTRY_ID");
						 pendAppForm.setState(rs.getString("STATE"));
						 request.setAttribute("States", "States");
						 pendAppForm.setLandLineNo(rs.getString("LANDLINE_NO"));
						 pendAppForm.setMobileNo(rs.getString("MOBILE_NO"));
						 pendAppForm.setFaxNo(rs.getString("FAX_NO"));
						 pendAppForm.setEmailId(rs.getString("EMAIL_ID"));
						 pendAppForm.setCurrencyId(rs.getString("CURRENCY_ID"));
						 pendAppForm.setReConcillationActId(rs.getString("RECONCILATION_ACT_ID"));
						String elgTds=rs.getString("IS_ELIGIBLE_FOR_TDS");
						if(elgTds.equalsIgnoreCase("1"))
						{
							pendAppForm.setElgTds("True");
						}
						if(elgTds.equalsIgnoreCase("0"))
						{
							pendAppForm.setElgTds("False");
						}
						pendAppForm.setTdsCode(rs.getString("TDS_CODE"));
						pendAppForm.setLstNo(rs.getString("LST_NO").toUpperCase());
						pendAppForm.setTinNo(rs.getString("TIN_NO").toUpperCase());
						pendAppForm.setCstNo(rs.getString("CST_NO").toUpperCase());
						pendAppForm.setPanNo(rs.getString("PAN_No").toUpperCase());
						 pendAppForm.setServiceTaxRegNo(rs.getString("Service_Tax_Registration_No").toUpperCase());
						 String isRegistVendor=rs.getString("IS_REGD_EXCISE_VENDOR");
						 	if(isRegistVendor.equalsIgnoreCase("1"))
							{
						 		pendAppForm.setRegExciseVendor("True");
							 request.setAttribute("RegExciseVendor", "RegExciseVendor");
							}
							if(isRegistVendor.equalsIgnoreCase("0"))
							{
								
								
								pendAppForm.setRegExciseVendor("False");
							}
						 
							pendAppForm.setEccNo(rs.getString("ECC_No").toUpperCase());
							pendAppForm.setExciseRegNo(rs.getString("Excise_Reg_No").toUpperCase());
							pendAppForm.setExciseRange(rs.getString("Excise_Range").toUpperCase());
							pendAppForm.setCommissionerate(rs.getString("COMMISSIONERATE").toUpperCase());
							pendAppForm.setExciseDivision(rs.getString("Excise_Division").toUpperCase());
							pendAppForm.setPaymentTermId(rs.getString("PAYMENT_TERM_ID"));
							pendAppForm.setAccountClerkId(rs.getString("ACCOUNT_CLERK_ID"));
						 pendAppForm.setIsApprovedVendor(rs.getString("IS_APPROVED_VENDOR"));
						 String isApproveVendor=rs.getString("IS_APPROVED_VENDOR");
						if(isApproveVendor.equalsIgnoreCase("1"))
						{
							pendAppForm.setIsApprovedVendor("True");
						}	if(isApproveVendor.equalsIgnoreCase("0")){
							pendAppForm.setIsApprovedVendor("False");
						}
						pendAppForm.setApproveType(rs.getString("Approve_Status"));
						pendAppForm.setTypeOfVendor(rs.getString("Type_Of_Vendor"));
						
						
						String sapCodeno=rs.getString("SAP_CODE_NO");
						if(sapCodeno!=null){
					pendAppForm.setSapCodeNo(sapCodeno);		
					String sapCodeExist=rs.getString("SAP_CODE_EXISTS");
					if(sapCodeExist.equalsIgnoreCase("1"))
					{
						pendAppForm.setSapCodeExists("True");
					}
					if(sapCodeExist.equalsIgnoreCase("0"))
						pendAppForm.setSapCodeExistsNo("True");
					String sapCreationDate=rs.getString("SAP_CREATION_DATE");
					String sapDate[]=sapCreationDate.split(" ");
					sapCreationDate=sapDate[0];
					String sapCode[]=sapCreationDate.split("-");
					sapCreationDate=sapCode[2]+"/"+sapCode[1]+"/"+sapCode[0];
					pendAppForm.setSapCreationDate(sapCreationDate);
					pendAppForm.setSapCreatedBy(rs.getString("SAP_CREATED_BY"));
					pendAppForm.setRequestedBy(rs.getString("REQUESTED_BY"));
						}
					}
					
					ResultSet rs4 = ad.selectQuery("select BLAND,BEZEI from State where LAND1='"+pendAppForm.getCountry()+"'");
					ArrayList stateList=new ArrayList();
					ArrayList stateLabelList=new ArrayList();
					
					while(rs4.next()) {
						stateList.add(rs4.getString("BLAND"));
						stateLabelList.add(rs4.getString("BEZEI"));
					}
					pendAppForm.setStateList(stateList);
					pendAppForm.setStateLabelList(stateLabelList);
					request.setAttribute("States", "States");
					
				
					ArrayList listOfFiles=new ArrayList();
					String getUploadedFiles="select * from temp_vendor_documents where request_no='"+reqId+"' ";
					ResultSet rsUploadFile=ad.selectQuery(getUploadedFiles);
					while(rsUploadFile.next())
					{
						VendorMasterRequestForm	pendAppForm1=new VendorMasterRequestForm();
						pendAppForm1.setFileName(rsUploadFile.getString("file_name"));
						pendAppForm1.setFileId(rsUploadFile.getString("id"));
						pendAppForm1.setFilepath("jsp/EMicro Files/ESS/sapMasterRequest/vendorDocuments/temp/"+rsUploadFile.getString("file_name"));
						listOfFiles.add(pendAppForm1);
					}
					request.setAttribute("documentDetails", listOfFiles);
					
					
						
					}catch (Exception e) {
					e.printStackTrace();
					}
					
					
				}
				
				if(filterBy.equalsIgnoreCase("Pending")){
					request.setAttribute("approveButton", "approveButton");
					request.setAttribute("rejectButton", "rejectButton");
				}
				//set ApproverDetails 
				if(matGroup.equalsIgnoreCase("Micro-Staff") || matGroup.equalsIgnoreCase("Domestic") || matGroup.equalsIgnoreCase("Loan-Licence") || matGroup.equalsIgnoreCase("Plants"))
				{
					matGroup="Local";
				}
				checkStatus=0;
				int appStatus=0;
				LinkedList listApprers=new LinkedList();
				String getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
				"where mast.Location='"+location+"' AND  mast.Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mast.Approver_Id=emp.PERNR order by Priority";
				ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
				while(rsApprDetails.next())
				{
					checkStatus=1;
					ApprovalsForm apprvers=new ApprovalsForm();
					apprvers.setPriority(rsApprDetails.getString("Priority"));
					apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
					String empCode=rsApprDetails.getString("Approver_Id");
					String approveStatus="";
					String recordStatus="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
					"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
					"mast.Material_Type='"+matType+"' and all_r.type='"+matType+"' AND Material_Group='"+matGroup+"' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
					"or mast.Role='Creator' ) and mast.Approver_Id=emp.PERNR  group by mast.Priority,mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status," +
					"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
					ResultSet rsAppInfo=ad.selectQuery(recordStatus);
					while(rsAppInfo.next())
					{
						
						apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
						approveStatus=rsAppInfo.getString("Req_Status");
						if(approveStatus.equalsIgnoreCase(""))
						{
							apprvers.setApproveStatus("In Process");
						}
						if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
						{
							String approveDate=	rsAppInfo.getString("approved_date");
							
							String a[]=approveDate.split(" ");
							approveDate=a[0];
							String b[]=approveDate.split("-");
							approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
							
							apprvers.setDate(approveDate);
						}else{
							String rejectDate=	rsAppInfo.getString("rejected_date");
							appStatus=1;
							String a[]=rejectDate.split(" ");
							rejectDate=a[0];
							String b[]=rejectDate.split("-");
							rejectDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
							apprvers.setDate(rejectDate);
							appStatus=1;
						}
						String comments=rsAppInfo.getString("Comments");
						if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
						{
							apprvers.setComments("");
						}else{
							apprvers.setComments(rsAppInfo.getString("Comments"));
						}
						
						
					}
					if(approveStatus.equalsIgnoreCase("") && appStatus==0)
					{
						apprvers.setApproveStatus("In Process");
					}
					apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
					listApprers.add(apprvers);
				}
				if(checkStatus==0)
				{
					getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
					"where mast.Location='"+location+"' AND  mast.Material_Type='"+matType+"' AND Material_Group='' and mast.Approver_Id=emp.PERNR order by Priority";
					rsApprDetails=ad.selectQuery(getApprDetails);
					while(rsApprDetails.next())
					{
						checkStatus=1;
						ApprovalsForm apprvers=new ApprovalsForm();
						apprvers.setPriority(rsApprDetails.getString("Priority"));
						apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
						String empCode=rsApprDetails.getString("Approver_Id");
						String approveStatus="";
						String recordStatus="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
						"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
						"mast.Material_Type='"+matType+"' AND Material_Group='' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
						"or mast.Role='Creator') and mast.Approver_Id=emp.PERNR  group by mast.Priority,mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status," +
						"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
						ResultSet rsAppInfo=ad.selectQuery(recordStatus);
						while(rsAppInfo.next())
						{
							apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
							approveStatus=rsAppInfo.getString("Req_Status");
							
							if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
							{
							String approveDate=	rsAppInfo.getString("approved_date");
							
							String a[]=approveDate.split(" ");
							approveDate=a[0];
							String b[]=approveDate.split("-");
							approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
							
							apprvers.setDate(approveDate);
							}else{
								String rejectDate=	rsAppInfo.getString("rejected_date");
								appStatus=1;
								String a[]=rejectDate.split(" ");
								rejectDate=a[0];
								String b[]=rejectDate.split("-");
								rejectDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
								apprvers.setDate(rejectDate);
							}
							String comments=rsAppInfo.getString("Comments");
							if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
							{
								apprvers.setComments("");
							}else{
								apprvers.setComments(rsAppInfo.getString("Comments"));
							}
						}
						if(approveStatus.equalsIgnoreCase("") && appStatus==0)
						{
							apprvers.setApproveStatus("In Process");
						}
						apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
						listApprers.add(apprvers);
				}
				}
				request.setAttribute("approverDetails", listApprers);
				
				if(userRole.equalsIgnoreCase("User"))
				{
				return mapping.findForward("VendorMaster");
				}
				if(userRole.equalsIgnoreCase("Accounts"))
				{
				return mapping.findForward("VendorMaster_Account");
				}
				if(userRole.equalsIgnoreCase("Creator"))
				{
					Date dNow = new Date( );
					 SimpleDateFormat ft = new SimpleDateFormat ("dd/MM/yyyy");
						String dateNow = ft.format(dNow);
						pendAppForm.setSapCreationDate(dateNow);
					pendAppForm.setSapCreatedBy(user.getEmployeeNo()+"-"+user.getFullName());
					
				return mapping.findForward("VendorMaster_Creator");
				}
				

				
				
				
			}
			
			if(reqType.equalsIgnoreCase("Code Extention")){
				
				//rejected Status 
				String getRejectedStatus="select rejected_flag from code_extenstion_request where REQUEST_NO='"+reqId+"'";
				ResultSet rsRejected=ad.selectQuery(getRejectedStatus);
				while(rsRejected.next())
				{
					String rejected_flag=rsRejected.getString("rejected_flag");
					if(rejected_flag!=null)
					{
						if(rejected_flag.equalsIgnoreCase("yes"))
							request.setAttribute("rejectedFLag", "rejectedFLag");
					}
				}
				String matType="Code Extention";
				String location="";
				String matGroup="";
				
				String matDetails="select loc.LOCATION_CODE from code_extenstion_request as mat,Location as loc  where mat.REQUEST_NO='"+reqId+"' and (mat.EXTENDED_TO_PLANT_1=loc.LOCATION_CODE or mat.PLANT_2=loc.LOCATION_CODE) ";
				ResultSet rsDetails=ad.selectQuery(matDetails);
				while(rsDetails.next())
				{
					location=rsDetails.getString("LOCATION_CODE");
					matType="Code Extention";
					
					
				}
				String userRole="";
				int checkStatus=0;
				String getUserRole="select Priority,Role from  Material_Approvers where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' AND (Approver_Id='"+user.getEmployeeNo()+"' OR Parllel_Approver_1='"+user.getEmployeeNo()+"' OR Parllel_Approver_2='"+user.getEmployeeNo()+"') ";
				ResultSet rsUserRole=ad.selectQuery(getUserRole);
				while(rsUserRole.next())
				{
					checkStatus=1;
					userRole=rsUserRole.getString("Role");
				}
				pendAppForm.setUserRole(userRole);
				if(userRole.equalsIgnoreCase("User"))
				{
					
					
					String reqtype=request.getParameter("planttype");
					 if(reqtype.equalsIgnoreCase("Plant"))
						{

							String getRecord="select  REQUEST_NO,REQUEST_DATE,TYPE,PLANT_1,loc1.LOCNAME as locn1,MATERIAL_CODE_1,EXTENDED_TO_PLANT_1 ," +
							"loc2.LOCNAME as locn2,STORAGE_LOCATION_ID_1,EXTENDED_STORAGE_LOCATION_1 from  code_extenstion_request as c,Location as loc1," +
							"Location  as loc2 where REQUEST_NO='"+reqId+"' and loc1.LOCATION_CODE=c.PLANT_1 and loc2.LOCATION_CODE=c.EXTENDED_TO_PLANT_1";
							
							ResultSet rs=ad.selectQuery(getRecord);
							while(rs.next())
							{
								pendAppForm.setRequestNumber(rs.getString("REQUEST_NO"));
								String reqDate=rs.getString("REQUEST_DATE");
								String a[]=reqDate.split(" ");
								reqDate=a[0];
								String b[]=reqDate.split("-");
								reqDate=b[2]+"/"+b[1]+"/"+b[0];
								pendAppForm.setRequestDate(reqDate);
								pendAppForm.setPlantType(rs.getString("TYPE"));
							
								pendAppForm.setMaterialCode1(rs.getString("MATERIAL_CODE_1"));
								pendAppForm.setPlant1(rs.getString("PLANT_1")+"-"+rs.getString("locn1"));
								pendAppForm.setStorageLocationId1(rs.getString("STORAGE_LOCATION_ID_1"));
								pendAppForm.setExtendToPlant1(rs.getString("EXTENDED_TO_PLANT_1")+"-"+rs.getString("locn2"));
								pendAppForm.setExtendToStorageLocation1(rs.getString("EXTENDED_STORAGE_LOCATION_1"));
								
							}
							request.setAttribute("plantMandatory", "plantMandatory");
							
						}
					 else{

						   
						  String getRecord="select  c.REQUEST_NO,c.REQUEST_DATE,c.TYPE,c.MATERIAL_CODE_2,c.FROM_STORAGE_LOCATION,c.PLANT_2,l.LOCNAME," +
						  "c.FROM_STORAGE_LOCATION,c.TO_STORAGE_LOCATION  from  code_extenstion_request as c,Location as l  where  REQUEST_NO='"+reqId+"' and l.LOCATION_CODE=c.PLANT_2";
							
							ResultSet rs=ad.selectQuery(getRecord);
							if(rs.next()){
								
								pendAppForm.setRequestNumber(rs.getString("REQUEST_NO"));
							String reqDate=rs.getString("REQUEST_DATE");
							String a[]=reqDate.split(" ");
							reqDate=a[0];
							String b[]=reqDate.split("-");
							reqDate=b[2]+"/"+b[1]+"/"+b[0];
							pendAppForm.setRequestDate(reqDate);
							pendAppForm.setPlantType(rs.getString("TYPE"));
							pendAppForm.setPlant2(rs.getString("PLANT_2")+"-"+rs.getString("LOCNAME"));
							pendAppForm.setMaterialCode2(rs.getString("MATERIAL_CODE_2"));
							pendAppForm.setFromStorageLocation(rs.getString("FROM_STORAGE_LOCATION"));
							pendAppForm.setToStorageLocation(rs.getString("TO_STORAGE_LOCATION"));
					   }
							request.setAttribute("storageMandatory", "storageMandatory");
							
					 }
					
				}else{
					
					ResultSet rs11 = ad.selectQuery("select LOCID," +
					"LOCNAMe,location_code from location");
					ArrayList locationList=new ArrayList();
					ArrayList locationLabelList=new ArrayList();
					
					while(rs11.next()) {
						locationList.add(rs11.getString("location_code"));
						locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAMe"));
					}
					pendAppForm.setLocationIdList(locationList);
					pendAppForm.setLocationLabelList(locationLabelList);
					
					LinkedList storageID=new LinkedList();
					LinkedList storageName=new LinkedList();
					String getStorageDetails="select * from STORAGE_LOCATION";
					ResultSet rsStrogeLocation=ad.selectQuery(getStorageDetails);
					while(rsStrogeLocation.next()){
						storageID.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID"));
						storageName.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID")+"-"+rsStrogeLocation.getString("STORAGE_LOCATION_NAME"));
					}
					pendAppForm.setStorageID(storageID);
					pendAppForm.setStorageIDName(storageName);
					
					String getRecord="select * from code_extenstion_request where REQUEST_NO='"+reqId+"'";
					ResultSet rs=ad.selectQuery(getRecord);
					while(rs.next())
					{

						pendAppForm.setRequestNumber(rs.getString("REQUEST_NO"));
						String reqDate=rs.getString("REQUEST_DATE");
						String a[]=reqDate.split(" ");
						reqDate=a[0];
						String b[]=reqDate.split("-");
						reqDate=b[2]+"/"+b[1]+"/"+b[0];
						pendAppForm.setRequestDate(reqDate);
						pendAppForm.setPlantType(rs.getString("TYPE"));
						String plantType=rs.getString("TYPE");
						if(plantType.equalsIgnoreCase("Plant"))
						{
							pendAppForm.setPlant1(rs.getString("PLANT_1"));
							pendAppForm.setMaterialCode1(rs.getString("MATERIAL_CODE_1"));
							pendAppForm.setStorageLocationId1(rs.getString("STORAGE_LOCATION_ID_1"));
							pendAppForm.setExtendToPlant1(rs.getString("EXTENDED_TO_PLANT_1"));
							pendAppForm.setExtendToStorageLocation1(rs.getString("EXTENDED_STORAGE_LOCATION_1"));
							request.setAttribute("plantMandatory", "plantMandatory");
						}
						else{
							
							String plant2=rs.getString("PLANT_2");
							plant2=plant2.replaceAll("\\W","");
							pendAppForm.setPlant2(plant2);
							pendAppForm.setMaterialCode2(rs.getString("MATERIAL_CODE_2"));
							pendAppForm.setFromStorageLocation(rs.getString("FROM_STORAGE_LOCATION"));
							pendAppForm.setToStorageLocation(rs.getString("TO_STORAGE_LOCATION"));
							request.setAttribute("storageMandatory", "storageMandatory");
						}
						
					
					}
					
					//creator
					
				}
				if(filterBy.equalsIgnoreCase("Pending")){
					request.setAttribute("approveButton", "approveButton");
					request.setAttribute("rejectButton", "rejectButton");
				}
				
				//set ApproverDetails 
				checkStatus=0;int appStatus=0;
				LinkedList listApprers=new LinkedList();
				String getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
						"where mast.Location='"+location+"' AND  mast.Material_Type='"+matType+"' AND Material_Group='' and mast.Approver_Id=emp.PERNR order by Priority";
				ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
				while(rsApprDetails.next())
				{
					checkStatus=1;
					ApprovalsForm apprvers=new ApprovalsForm();
					apprvers.setPriority(rsApprDetails.getString("Priority"));
					apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
					String empCode=rsApprDetails.getString("Approver_Id");
					String approveStatus="";
					String recordStatus="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date," +
					"all_r.Comments from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and " +
					"mast.Location='"+location+"' AND all_r.type='"+matType+"' AND Material_Group='' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver " +
					"and (mast.Role='User' or mast.Role='Accounts' or mast.Role='Creator') and mast.Approver_Id=emp.PERNR  group by mast.Priority,mast.Priority," +
					"mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
					ResultSet rsAppInfo=ad.selectQuery(recordStatus);
					while(rsAppInfo.next())
					{
						
						apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
						approveStatus=rsAppInfo.getString("Req_Status");
						if(approveStatus.equalsIgnoreCase(""))
						{
							apprvers.setApproveStatus("In Process");
						}
						if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
						{
						apprvers.setDate(rsAppInfo.getString("approved_date"));
						}else{
							apprvers.setDate(rsAppInfo.getString("rejected_date"));
							appStatus=1;
						}
						String comments=rsAppInfo.getString("Comments");
						if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
						{
							apprvers.setComments("");
						}else{
							apprvers.setComments(rsAppInfo.getString("Comments"));
						}
						
						
					}
					if(approveStatus.equalsIgnoreCase("") && appStatus==0)
					{
						apprvers.setApproveStatus("In Process");
					}
					apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
					listApprers.add(apprvers);
				}
				
				request.setAttribute("approverDetails", listApprers);
				
				if(userRole.equalsIgnoreCase("User"))
				{
				return mapping.findForward("CodeExtention");
				}
				
				if(userRole.equalsIgnoreCase("Creator"))
				{
					Date dNow = new Date( );
					 SimpleDateFormat ft = new SimpleDateFormat ("dd/MM/yyyy");
						String dateNow = ft.format(dNow);
						pendAppForm.setSapCreationDate(dateNow);
					pendAppForm.setSapCreatedBy(user.getEmployeeNo()+"-"+user.getFullName());
					
				return mapping.findForward("CodeExtention_Creator");
				}
			}
			
			
			if(reqType.equalsIgnoreCase("Service Master")){
				//rejected Status 
				String getRejectedStatus="select rejected_flag from SERVICE_MASTER where request_no='"+reqId+"'";
				ResultSet rsRejected=ad.selectQuery(getRejectedStatus);
				while(rsRejected.next())
				{
					String rejected_flag=rsRejected.getString("rejected_flag");
					if(rejected_flag!=null)
					{
						if(rejected_flag.equalsIgnoreCase("yes"))
							request.setAttribute("rejectedFLag", "rejectedFLag");
					}
				}
				
				String matType="";
				String location="";
				String matGroup="";
				String matDetails="select loc.LOCATION_CODE from SERVICE_MASTER as s,Location as loc  where s.REQUEST_NO='"+reqId+"' and s.plant_code=loc.LOCID";
				ResultSet rsDetails=ad.selectQuery(matDetails);
				if(rsDetails.next())
				{
					location=rsDetails.getString("LOCATION_CODE");
					matType="Service Master";
				}
				String userRole="";
				int checkStatus=0;
				String getUserRole="select Priority,Role from  Material_Approvers where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' AND (Approver_Id='"+user.getEmployeeNo()+"' OR Parllel_Approver_1='"+user.getEmployeeNo()+"' OR Parllel_Approver_2='"+user.getEmployeeNo()+"') ";
				ResultSet rsUserRole=ad.selectQuery(getUserRole);
				while(rsUserRole.next())
				{
					checkStatus=1;
					userRole=rsUserRole.getString("Role");
				}
				pendAppForm.setUserRole(userRole);
				if(userRole.equalsIgnoreCase("User"))
				{
					String query="select ser.SAC_Code,ser.request_date,loc.LOCNAME,ser.service_description,ser.detailed_desc,u.LTXT," +
	 				"pur.PURCHASE_GROUP_DESC,ser.service_catagory,se.STXT,ser.machine_name,ser.app_value,ser.justification," +
	 				"val.VALUATION_DESC,ser.attachment from SERVICE_MASTER as ser,Location as loc,UNIT_MESUREMENT as u," +
	 				"PURCHASE_GROUP as pur, SERVICE_GROUP as se,VALUATION_CLASS as val where REQUEST_NO='"+reqId+"' and	" +
	 				"loc.LOCID=ser.plant_code and u.UNIT_OF_MEAS_ID=ser.uom and pur.PURCHASE_GROUP_ID=ser.purchase_group " +
	 				"and se.group_id=ser.service_group and val.VALUATION_ID=ser.valuation_class";
					ResultSet rs=ad.selectQuery(query);
					if(rs.next()){

						pendAppForm.setRequestNo(reqId);
						pendAppForm.setRequestNumber(reqId);
						pendAppForm.setReqMaterialGroup("");
						pendAppForm.setLocationId(rs.getString("LOCNAME"));
						pendAppForm.setSacCode(rs.getString("SAC_Code"));
						
						pendAppForm.setPlantCode(rs.getString("LOCNAME"));
						pendAppForm.setRequestDate(rs.getString("request_date"));
				        pendAppForm.setServiceDescription(rs.getString("service_description"));
						pendAppForm.setDetailedServiceDescription(rs.getString("detailed_desc"));
						pendAppForm.setUom(rs.getString("LTXT"));
						pendAppForm.setPurchaseGroup(rs.getString("PURCHASE_GROUP_DESC"));
						String sercat=rs.getString("service_catagory");
						
						
						
						if(sercat.equalsIgnoreCase("ZITA"))
						{
							pendAppForm.setServiceCatagory("ZITA- AMC-IT");
							
						}
						if(sercat.equalsIgnoreCase("ZAMC"))
						{
							pendAppForm.setServiceCatagory("ZAMC- Annual maintainence");
							
						}
						if(sercat.equalsIgnoreCase("ZCLB"))
						{
							pendAppForm.setServiceCatagory("ZCLB- Calibration");
							
						}
						if(sercat.equalsIgnoreCase("ZCIV"))
						{
							pendAppForm.setServiceCatagory("ZCIV- Civil works");
							
						}
						if(sercat.equalsIgnoreCase("ZMNT"))
						{
							pendAppForm.setServiceCatagory("ZMNT- Maintainence");
							
						}
						if(sercat.equalsIgnoreCase("ZITM"))
						{
							pendAppForm.setServiceCatagory("ZITM-MAINAINENCE-IT");
							
						}
						if(sercat.equalsIgnoreCase("ZMKT"))
						{
							pendAppForm.setServiceCatagory("ZMKT- Marketing");
							
						}
						if(sercat.equalsIgnoreCase("ZTST"))
						{
							pendAppForm.setServiceCatagory("ZTST- Testing&Analysis");
							
						}
						if(sercat.equalsIgnoreCase("ZTRC"))
						{
							pendAppForm.setServiceCatagory("ZTRC- Training&Recruitment");
							
						}

						
						
						pendAppForm.setServiceGroup(rs.getString("STXT"));
						pendAppForm.setE_m_name(rs.getString("machine_name"));
						pendAppForm.setApp_amount(rs.getString("app_value"));
					
						pendAppForm.setJustification(rs.getString("justification"));
						pendAppForm.setValuationClass(rs.getString("VALUATION_DESC"));
						
							
																
					
					
					
					
					}
					
					
					
					String query_file="select file_name from service_documents where request_no='"+reqId+"'";
					ArrayList documentDetails=new ArrayList();
					ResultSet rs_file=ad.selectQuery(query_file);
					try{
					while(rs_file.next()){
						ApprovalsForm sf=new ApprovalsForm();
						sf.setSfile(rs_file.getString("file_name"));
						sf.setFilepath("jsp/EMicro Files/ESS/sapMasterRequest/serviceMaster/UploadedFiles/"+rs_file.getString("file_name")+"");
						documentDetails.add(sf);
					}
					request.setAttribute("documentDetails", documentDetails);
					}
					catch(Exception e){
						e.printStackTrace();
					}
					
					
				}else{
					
					
				
					LinkedList valuationClassID=new LinkedList();
					LinkedList valuationClassName=new LinkedList();
					String getValuation="select * from VALUATION_CLASS ";
					ResultSet rsValuation=ad.selectQuery(getValuation);
					while(rsValuation.next())
					{
						valuationClassID.add(rsValuation.getString("VALUATION_ID"));
						valuationClassName.add(rsValuation.getString("VALUATION_ID")+" - "+rsValuation.getString("VALUATION_DESC"));
					}
					pendAppForm.setValuationClassID(valuationClassID);
					pendAppForm.setValuationClassName(valuationClassName);
				
					ResultSet rs11 = ad.selectQuery("select * from location");
					ArrayList locationList=new ArrayList();
					ArrayList locationLabelList=new ArrayList();
					
					while(rs11.next()) {
						locationList.add(rs11.getString("LOCID"));
						locationLabelList.add(rs11.getString("LOCATION_CODE")+" - "+rs11.getString("LOCNAME"));
					}
					pendAppForm.setLocationIdList(locationList);
					pendAppForm.setLocationLabelList(locationLabelList);
					
					LinkedList unitOfMeasIdList=new LinkedList();
					LinkedList unitOfMeasIdValues=new LinkedList();
					
					String getunitMesurement="select * from UNIT_MESUREMENT";
					ResultSet rsUnit=ad.selectQuery(getunitMesurement);
					while(rsUnit.next())
					{
						unitOfMeasIdList.add(rsUnit.getString("UNIT_OF_MEAS_ID"));
						unitOfMeasIdValues.add(rsUnit.getString("UNIT_OF_MEAS_ID")+" - "+rsUnit.getString("LTXT"));
					}
					pendAppForm.setUnitOfMeasIdList(unitOfMeasIdList);
					pendAppForm.setUnitOfMeasIdValues(unitOfMeasIdValues);
					
					LinkedList puchaseGroupIdList=new LinkedList();
					LinkedList puchaseGroupIdValues=new LinkedList();
					
					String getPurchaseGroup="select * from PURCHASE_GROUP";
					ResultSet rsPurchaseGroup=ad.selectQuery(getPurchaseGroup);
					while(rsPurchaseGroup.next())
					{
						puchaseGroupIdList.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID"));
						puchaseGroupIdValues.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID")+" - "+rsPurchaseGroup.getString("PURCHASE_GROUP_DESC"));
					}
					pendAppForm.setPuchaseGroupIdList(puchaseGroupIdList);
					pendAppForm.setPuchaseGroupIdValues(puchaseGroupIdValues);
					
					LinkedList serviceGroupID=new LinkedList();
					LinkedList serviceGroupValues=new LinkedList();
					
					String getServiceGroup="select * from SERVICE_GROUP";
					ResultSet rsServiceGroup=ad.selectQuery(getServiceGroup);
					while(rsServiceGroup.next())
					{
						serviceGroupID.add(rsServiceGroup.getString("group_id"));
						serviceGroupValues.add(rsServiceGroup.getString("group_id")+" - "+rsServiceGroup.getString("STXT"));
					}
					pendAppForm.setServiceGroupID(serviceGroupID);
					pendAppForm.setServiceGroupValues(serviceGroupValues);
					
					
					
					LinkedList uid=new LinkedList();
					LinkedList uname=new LinkedList();
					String query2="select * from UNIT_MESUREMENT";
					ResultSet r1=ad.selectQuery(query2);
					try{
					while(r1.next()){
						ApprovalsForm sf=new ApprovalsForm();
						//uid.add(r1.getString("unit_of_meas_id"));
						sf.setU_id(r1.getString("UNIT_OF_MEAS_ID"));
						sf.setU_label((r1.getString("UNIT_OF_MEAS_ID")+"-"+r1.getString("LTXT")));
						uid.add(sf);
					}
					//sform.setUomId(uid);
					pendAppForm.setUomLabel(uid);
					}
					catch(Exception e){
						e.printStackTrace();
					}
					
					LinkedList p_label=new LinkedList();
					LinkedList p_id=new LinkedList();
					String query3="select * from PURCHASE_GROUP";
					ResultSet r2=ad.selectQuery(query3);
					try{
						while(r2.next()){
							ApprovalsForm sf=new ApprovalsForm();
							sf.setP_id((r2.getString("PURCHASE_GROUP_ID")));
						     sf.setP_all((r2.getString("PURCHASE_GROUP_ID")+"-"+r2.getString("PURCHASE_GROUP_DESC")));
							//p_label.add(sf);
						     p_id.add(sf);
						}
						
						pendAppForm.setPlabel(p_id);
						//sform.setPid(p_id);
					}
					catch(Exception e){
						e.printStackTrace();
					}
					LinkedList vid=new LinkedList();
					LinkedList vlabel=new LinkedList();
					String query4="select * from valuation_class";
					ResultSet r3=ad.selectQuery(query4);
					try{
						while(r3.next()){
							vid.add(r3.getString("VALUATION_ID"));
							vlabel.add(r3.getString("VALUATION_DESC"));
						}
						pendAppForm.setVid(vid);
						pendAppForm.setVlabel(vlabel);
					}
					catch(Exception e){
						e.printStackTrace();
					}
					LinkedList pl_id=new LinkedList();
					LinkedList pl_all=new LinkedList();
					String query5="select * from location";
					ResultSet r4=ad.selectQuery(query5);
					try{
						while(r4.next()){
							ApprovalsForm sf=new ApprovalsForm();
							pl_id.add(r4.getString("LOCATION_CODE"));
							pl_all.add(r4.getString("LOCATION_CODE")+"-"+r4.getString("LOCNAME"));
							pl_id.add(sf);
						}
						pendAppForm.setPcode(pl_id);
					}
					catch(Exception e){
						e.printStackTrace();
					}
					
					LinkedList sg_label=new LinkedList();
					String query6="select * from MATERIAL_GROUP";
					ResultSet r5=ad.selectQuery(query6);
					try{
						while(r5.next()){
							ApprovalsForm sf=new ApprovalsForm();
							sf.setService_id(r5.getString("material_group_id"));
							sf.setService_label(r5.getString("material_group_id")+"-"+r5.getString("STXT"));
							sg_label.add(sf);
						}
						pendAppForm.setSgroupLabel(sg_label);
					}
					catch(Exception e){
						e.printStackTrace();
					}
					String query_file="select file_name from service_documents where request_no='"+reqId+"'";
					ArrayList documentDetails=new ArrayList();
					ResultSet rs_file=ad.selectQuery(query_file);
					try{
					while(rs_file.next()){
						ApprovalsForm sf=new ApprovalsForm();
						sf.setSfile(rs_file.getString("file_name"));
						sf.setFilepath("jsp/EMicro Files/ESS/sapMasterRequest/serviceMaster/UploadedFiles/"+rs_file.getString("file_name")+"");
						documentDetails.add(sf);
					}
					
					
					}
					catch(Exception e){
						e.printStackTrace();
					}
					request.setAttribute("documentDetails", documentDetails);
					
					String query="select * from SERVICE_MASTER where REQUEST_NO="+reqId+"";
					System.out.println(query);
					try{
					ResultSet rs=ad.selectQuery(query);
					if(rs.next()){

						pendAppForm.setRequestNo(reqId);
						pendAppForm.setSacCode(rs.getString("SAC_Code"));
						pendAppForm.setRequestDate(rs.getString("request_date"));
						pendAppForm.setPlantCode(rs.getString("plant_code"));
						pendAppForm.setStorageLocation(rs.getString("storage_location"));
						pendAppForm.setServiceDescription(rs.getString("service_description"));
						pendAppForm.setDetailedServiceDescription(rs.getString("detailed_desc"));
						pendAppForm.setUom(rs.getString("uom"));
						pendAppForm.setPurchaseGroup(rs.getString("purchase_group"));
						pendAppForm.setServiceCatagory(rs.getString("service_catagory"));
						pendAppForm.setServiceGroup(rs.getString("service_group"));
						pendAppForm.setE_m_name(rs.getString("machine_name"));
						pendAppForm.setApp_amount(rs.getString("app_value"));
						pendAppForm.setWhereUsed(rs.getString("where_used"));
						pendAppForm.setPurpose(rs.getString("purpose"));
						pendAppForm.setJustification(rs.getString("justification"));
						pendAppForm.setValuationClass(rs.getString("valuation_class"));
						
						String sapCodeno=rs.getString("SAP_CODE_NO");
						if(sapCodeno!=null){
					pendAppForm.setSapCodeNo(sapCodeno);		
					String sapCodeExist=rs.getString("SAP_CODE_EXISTS");
					if(sapCodeExist.equalsIgnoreCase("1"))
					{
						pendAppForm.setSapCodeExists("True");
					}
					if(sapCodeExist.equalsIgnoreCase("0"))
						pendAppForm.setSapCodeExistsNo("True");
					String sapCreationDate=rs.getString("SAP_CREATION_DATE");
					String sapDate[]=sapCreationDate.split(" ");
					sapCreationDate=sapDate[0];
					String sapCode[]=sapCreationDate.split("-");
					sapCreationDate=sapCode[2]+"/"+sapCode[1]+"/"+sapCode[0];
					pendAppForm.setSapCreationDate(sapCreationDate);
					pendAppForm.setSapCreatedBy(rs.getString("SAP_CREATED_BY"));
					pendAppForm.setRequestedBy(rs.getString("REQUESTED_BY"));
						}
						//sform6.setMessage("Edit Data");
					}
					}catch (Exception e) {
						e.printStackTrace();
					}
				}
				
				if(filterBy.equalsIgnoreCase("Pending")){
					request.setAttribute("approveButton", "approveButton");
					request.setAttribute("rejectButton", "rejectButton");
				}
				
				
				
				
				
				//set ApproverDetails 
				checkStatus=0;int appStatus=0;
				LinkedList listApprers=new LinkedList();
				String getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
						"where mast.Location='"+location+"' AND  mast.Material_Type='"+matType+"' AND Material_Group='' and mast.Approver_Id=emp.PERNR order by Priority";
				ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
				while(rsApprDetails.next())
				{
					checkStatus=1;
					ApprovalsForm apprvers=new ApprovalsForm();
					apprvers.setPriority(rsApprDetails.getString("Priority"));
					apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
					String empCode=rsApprDetails.getString("Approver_Id");
					String approveStatus="";
					String recordStatus="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date," +
					"all_r.Comments from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and " +
					"mast.Location='"+location+"' AND all_r.type='"+matType+"' AND Material_Group='' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver " +
					"and (mast.Role='User' or mast.Role='Accounts' or mast.Role='Creator') and mast.Approver_Id=emp.PERNR  group by mast.Priority,mast.Priority," +
					"mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
					ResultSet rsAppInfo=ad.selectQuery(recordStatus);
					while(rsAppInfo.next())
					{
						
						apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
						approveStatus=rsAppInfo.getString("Req_Status");
						if(approveStatus.equalsIgnoreCase(""))
						{
							apprvers.setApproveStatus("In Process");
						}
						if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
						{
							String approveDate=rsAppInfo.getString("approved_date");
							String a[]=approveDate.split(" ");
							approveDate=a[0];
							String b[]=approveDate.split("-");
							approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
						apprvers.setDate(approveDate);
						}else{
							String rejectDate=	rsAppInfo.getString("rejected_date");
						
							String a[]=rejectDate.split(" ");
							rejectDate=a[0];
							String b[]=rejectDate.split("-");
							rejectDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
							apprvers.setDate(rejectDate);
								appStatus=1;
						}
						String comments=rsAppInfo.getString("Comments");
						if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
						{
							apprvers.setComments("");
						}else{
							apprvers.setComments(rsAppInfo.getString("Comments"));
						}
						
						
					}
					if(approveStatus.equalsIgnoreCase("") && appStatus==0)
					{
						apprvers.setApproveStatus("In Process");
					}
					apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
					listApprers.add(apprvers);
				}
				
				request.setAttribute("approverDetails", listApprers);
				
				if(userRole.equalsIgnoreCase("User"))
				{
				return mapping.findForward("ServiceMaster");
				}
				if(userRole.equalsIgnoreCase("Accounts"))
				{
				return mapping.findForward("ServiceMaster_Account");
				}
				if(userRole.equalsIgnoreCase("Creator"))
				{
					Date dNow = new Date( );
					 SimpleDateFormat ft = new SimpleDateFormat ("dd/MM/yyyy");
						String dateNow = ft.format(dNow);
						pendAppForm.setSapCreationDate(dateNow);
					pendAppForm.setSapCreatedBy(user.getEmployeeNo()+"-"+user.getFullName());
					
				return mapping.findForward("ServiceMaster_Creator");
				}
				
			}
			
			if(reqType.equalsIgnoreCase("Material Master")){/*
				String matType="";
				
				String location="";
				String matGroup="";
				String matDetails="select loc.LOCATION_CODE,mat.MATERIAL_GROUP_ID,mat.type from material_code_request as mat,Location as loc  where mat.REQUEST_NO='"+reqId+"' and mat.LOCATION_ID=loc.LOCID";
				ResultSet rsDetails=ad.selectQuery(matDetails);
				if(rsDetails.next())
				{
					location=rsDetails.getString("LOCATION_CODE");
					matGroup=rsDetails.getString("MATERIAL_GROUP_ID");
					matType=rsDetails.getString("type");
				}
				if(matType.equals("FG")||matType.equals("HAWA")){
					 matDetails="select loc.LOCATION_CODE,mat.Type,mat.CREATED_BY,mat.DOMESTIC_OR_EXPORTS from material_code_request as mat,Location as loc  where mat.REQUEST_NO='"+reqId+"' and mat.LOCATION_ID=loc.LOCID";
					 rsDetails=ad.selectQuery(matDetails);
					while(rsDetails.next())
					{
						
						matGroup=rsDetails.getString("DOMESTIC_OR_EXPORTS");
						if(matGroup.equals("D"))
				 			matGroup="Domestic";
						if(matGroup.equals("E"))
				 			matGroup="Export";
				 		if(matGroup.equals("V"))
				 			matGroup="V";
					}
				}
				String userRole="";
				int checkStatus=0;
				String getUserRole="select Priority,Role from  Material_Approvers where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' AND (Approver_Id='"+user.getEmployeeNo()+"' OR Parllel_Approver_1='"+user.getEmployeeNo()+"' OR Parllel_Approver_2='"+user.getEmployeeNo()+"') ";
				ResultSet rsUserRole=ad.selectQuery(getUserRole);
				while(rsUserRole.next())
				{
					checkStatus=1;
					userRole=rsUserRole.getString("Role");
				}
				if(checkStatus==0)
				{
					getUserRole="select Priority,Role from  Material_Approvers where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' AND (Approver_Id='"+user.getEmployeeNo()+"' OR Parllel_Approver_1='"+user.getEmployeeNo()+"' OR Parllel_Approver_2='"+user.getEmployeeNo()+"') ";
					rsUserRole=ad.selectQuery(getUserRole);
					while(rsUserRole.next())
					{
						userRole=rsUserRole.getString("Role");
					}
				}
				pendAppForm.setUserRole(userRole);
				
				//rejected Status 
				String getRejectedStatus="select rejected_flag from material_code_request where REQUEST_NO='"+reqId+"'";
				ResultSet rsRejected=ad.selectQuery(getRejectedStatus);
				while(rsRejected.next())
				{
					String rejected_flag=rsRejected.getString("rejected_flag");
					if(rejected_flag!=null)
					{
						if(rejected_flag.equalsIgnoreCase("y"))
							request.setAttribute("rejectedFLag", "rejectedFLag");
					}
				}
				
			
				if(matType.equalsIgnoreCase("ZCIV")||matType.equalsIgnoreCase("ZCON")||matType.equalsIgnoreCase("ZITC")||matType.equalsIgnoreCase("LC")
						||matType.equalsIgnoreCase("ZPFL")||matType.equalsIgnoreCase("ZSCR"))
			     {
					
					if(userRole.equalsIgnoreCase("User"))
					{
						String getFinishedProduct="select mat.REQUEST_NO,mat.MATERIAL_GROUP_ID,mat.REQUEST_DATE,loc.LOCNAME,loc.LOCATION_CODE,stLoc.STORAGE_LOCATION_NAME,stLoc.MAT_TYPE," +
						"mat.MATERIAL_SHORT_NAME, mat.MATERIAL_LONG_NAME,matGroup.STXT,uom.LTXT,pur.PURCHASE_GROUP_DESC,mat.is_asset,dep.DPTSTXT" +
						",mat.APPROXIMATE_VALUE, val.VALUATION_DESC,mat.DETAILED_JUSTIFICATION,	mat.DETAILED_SPECIFICATION,mat.rejected_flag from " +
						"material_code_request as mat,Location as loc,STORAGE_LOCATION as stLoc,MATERIAL_GROUP as matGroup , " +
						"UNIT_MESUREMENT AS uom ,PURCHASE_GROUP as pur ,VALUATION_CLASS as val ,DEPARTMENT as dep where REQUEST_NO='"+reqId+"' and	" +
						"loc.LOCID=mat.LOCATION_ID and stLoc.STORAGE_LOCATION_ID=mat.STORAGE_LOCATION_ID and matGroup.MATERIAL_GROUP_ID=mat.MATERIAL_GROUP_ID " +
						"and uom.UNIT_OF_MEAS_ID=mat.UNIT_OF_MEAS_ID and pur.PURCHASE_GROUP_ID=mat.PURCHASE_GROUP_ID and TYPE='"+matType+"' and val.VALUATION_ID=mat.VALUATION_CLASS" +
						" and dep.DPTID=mat.UTILIZING_DEPT";
				
				ResultSet rs=ad.selectQuery(getFinishedProduct);
				if(rs.next())
				{

					pendAppForm.setRequestNo(reqId);
					pendAppForm.setRequestNumber(reqId);
					pendAppForm.setReqMaterialGroup(rs.getString("MATERIAL_GROUP_ID"));
					pendAppForm.setLocationId(rs.getString("LOCATION_CODE")+"-"+rs.getString("LOCNAME"));
					pendAppForm.setRequestNumber(reqId);
					String reqDate=rs.getString("REQUEST_DATE");
					String a[]=reqDate.split(" ");
					reqDate=a[0];
					String b[]=reqDate.split("-");
					reqDate=b[2]+"/"+b[1]+"/"+b[0];
					pendAppForm.setRequestDate(reqDate);
				
					pendAppForm.setStorageLocationId(rs.getString("MAT_TYPE")+"-"+rs.getString("STORAGE_LOCATION_NAME"));
					pendAppForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME"));
					pendAppForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME"));
					pendAppForm.setMaterialGroupId(rs.getString("STXT"));
					pendAppForm.setPuchaseGroupId(rs.getString("PURCHASE_GROUP_DESC"));
					pendAppForm.setUnitOfMeasId(rs.getString("LTXT"));
					pendAppForm.setApproximateValue(rs.getString("APPROXIMATE_VALUE"));
					pendAppForm.setValuationClass(rs.getString("VALUATION_DESC"));
					pendAppForm.setUtilizingDept(rs.getString("DPTSTXT"));
					String isAsset=rs.getString("is_asset");
					if(isAsset.equalsIgnoreCase("1"))
					{
						pendAppForm.setIsAsset("YES");
					}
					if(isAsset.equalsIgnoreCase("0"))
						pendAppForm.setIsAsset("NO");
					pendAppForm.setDetailedJustification(rs.getString("DETAILED_JUSTIFICATION"));
					pendAppForm.setDetailedSpecification(rs.getString("DETAILED_SPECIFICATION"));
					
					String rejected_flag=rs.getString("rejected_flag");
					if(rejected_flag!=null)
					{
						if(rejected_flag.equalsIgnoreCase("y"))
							request.setAttribute("rejectedFLag", "rejectedFLag");
					}
			
				
				}
					}else{
						
						
						
						String getCountryDetails="select * from Country";
						LinkedList countryID=new LinkedList();
						LinkedList countryName=new LinkedList();
						ResultSet rsCountryDetails=ad.selectQuery(getCountryDetails);
						while(rsCountryDetails.next()){
							countryID.add(rsCountryDetails.getString("LAND1"));
							countryName.add(rsCountryDetails.getString("LANDX"));
						}
						pendAppForm.setCounID(countryID);
						pendAppForm.setCountryName(countryName);
						String materialType="";
						String valuationType="";
						String getvaluationType="select MATERIAL_TYPE_ID,VALUATION_CLASS from material_code_request where REQUEST_NO='"+reqId+"'";
						ResultSet rsValuationType=ad.selectQuery(getvaluationType);
						while(rsValuationType.next()){
							materialType=rsValuationType.getString("MATERIAL_TYPE_ID");
							valuationType=rsValuationType.getString("VALUATION_CLASS");
						}
						
						
						LinkedList storageID=new LinkedList();
						LinkedList storageName=new LinkedList();
						String getStorageDetails="select * from STORAGE_LOCATION where  MAT_TYPE='"+matType+"'";
						ResultSet rsStrogeLocation=ad.selectQuery(getStorageDetails);
						while(rsStrogeLocation.next()){
							storageID.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID"));
							storageName.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID")+" - "+rsStrogeLocation.getString("STORAGE_LOCATION_NAME"));
						}
						pendAppForm.setStorageID(storageID);
						pendAppForm.setStorageIDName(storageName);
						
						ResultSet rs11 = ad.selectQuery("select LOCID," +
						"LOCNAME,location_code from location");
						ArrayList locationList=new ArrayList();
						ArrayList locationLabelList=new ArrayList();
						
						while(rs11.next()) {
							locationList.add(rs11.getString("LOCID"));
							locationLabelList.add(rs11.getString("LOCATION_CODE")+" - "+rs11.getString("LOCNAME"));
						}
						pendAppForm.setLocationIdList(locationList);
						pendAppForm.setLocationLabelList(locationLabelList);
						
						LinkedList materTypeIDList=new LinkedList();
						LinkedList materialTypeIdValueList=new LinkedList();
						String getMaterials="select * from MATERIAL_TYPE";
						ResultSet rsMaterial=ad.selectQuery(getMaterials);
						while(rsMaterial.next())
						{
							materTypeIDList.add(rsMaterial.getString("id"));
							materialTypeIdValueList.add(rsMaterial.getString("MATERIAL_GROUP_ID")+" - "+rsMaterial.getString("M_DESC"));
						}
						pendAppForm.setMaterTypeIDList(materTypeIDList);
						pendAppForm.setMaterialTypeIdValueList(materialTypeIdValueList);
						
						LinkedList materGroupIDList=new LinkedList();
						LinkedList materialGroupIdValueList=new LinkedList();
						String getMaterialGroup="select * from MATERIAL_GROUP where MATERIAL_TYPE like '%"+matType+"%' order by STXT";
						ResultSet rsMaterialGroup=ad.selectQuery(getMaterialGroup);
						while(rsMaterialGroup.next())
						{
							materGroupIDList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID"));
							materialGroupIdValueList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID")+" - "+rsMaterialGroup.getString("STXT"));
						}
						pendAppForm.setMaterGroupIDList(materGroupIDList);
						pendAppForm.setMaterialGroupIdValueList(materialGroupIdValueList);
						
						
						LinkedList unitOfMeasIdList=new LinkedList();
						LinkedList unitOfMeasIdValues=new LinkedList();
						
						LinkedList deptID=new LinkedList();
						LinkedList deptName=new LinkedList();
						String getdepartment="select * from department";
						ResultSet rsdepartment=ad.selectQuery(getdepartment);
						while(rsdepartment.next()){
							deptID.add(rsdepartment.getInt("DPTID"));
							deptName.add(rsdepartment.getString("DPTSTXT"));
						}
						
						pendAppForm.setDeptId(deptID);
						pendAppForm.setDeptName(deptName);
						String getunitMesurement="select * from UNIT_MESUREMENT order by UNIT_OF_MEAS_ID";
						ResultSet rsUnit=ad.selectQuery(getunitMesurement);
						while(rsUnit.next())
						{
							unitOfMeasIdList.add(rsUnit.getString("UNIT_OF_MEAS_ID"));
							unitOfMeasIdValues.add(rsUnit.getString("UNIT_OF_MEAS_ID")+" - "+rsUnit.getString("LTXT"));
						}
						pendAppForm.setUnitOfMeasIdList(unitOfMeasIdList);
						pendAppForm.setUnitOfMeasIdValues(unitOfMeasIdValues);
						
						
						LinkedList valuationClassID=new LinkedList();
						LinkedList valuationClassName=new LinkedList();
						String getValuation="select * from VALUATION_CLASS where MAT_TYPE='"+matType+"'";
						ResultSet rsValuation=ad.selectQuery(getValuation);
						while(rsValuation.next())
						{
							valuationClassID.add(rsValuation.getString("VALUATION_ID"));
							valuationClassName.add(rsValuation.getString("VALUATION_ID")+" - "+rsValuation.getString("VALUATION_DESC"));
						}
						pendAppForm.setValuationClassID(valuationClassID);
						pendAppForm.setValuationClassName(valuationClassName);
						
						LinkedList puchaseGroupIdList=new LinkedList();
						LinkedList puchaseGroupIdValues=new LinkedList();
						
						String getPurchaseGroup="select * from PURCHASE_GROUP";
						ResultSet rsPurchaseGroup=ad.selectQuery(getPurchaseGroup);
						while(rsPurchaseGroup.next())
						{
							puchaseGroupIdList.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID"));
							puchaseGroupIdValues.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID")+" - "+rsPurchaseGroup.getString("PURCHASE_GROUP_DESC"));
						}
						pendAppForm.setPuchaseGroupIdList(puchaseGroupIdList);
						pendAppForm.setPuchaseGroupIdValues(puchaseGroupIdValues);
						
						String getFinishedProduct="select * from material_code_request where REQUEST_NO='"+reqId+"'";
						ResultSet rs=ad.selectQuery(getFinishedProduct);
						while(rs.next())
						{

							pendAppForm.setRequestNo(reqId);
							pendAppForm.setRequestNumber(reqId);
							pendAppForm.setReqMaterialGroup(rs.getString("MATERIAL_GROUP_ID"));
							
							String reqDate=rs.getString("REQUEST_DATE");
							String a[]=reqDate.split(" ");
							reqDate=a[0];
							String b[]=reqDate.split("-");
							reqDate=b[2]+"/"+b[1]+"/"+b[0];
							pendAppForm.setRequestDate(reqDate);
							pendAppForm.setLocationId(rs.getString("LOCATION_ID"));
							pendAppForm.setMaterialTypeId(rs.getString("MATERIAL_TYPE_ID"));
							pendAppForm.setStorageLocationId(rs.getString("STORAGE_LOCATION_ID"));
							pendAppForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME"));
							pendAppForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME"));
							pendAppForm.setMaterialGroupId(rs.getString("MATERIAL_GROUP_ID"));
							pendAppForm.setPuchaseGroupId(rs.getString("PURCHASE_GROUP_ID"));
							pendAppForm.setUnitOfMeasId(rs.getString("UNIT_OF_MEAS_ID"));
							pendAppForm.setApproximateValue(rs.getString("APPROXIMATE_VALUE"));
							pendAppForm.setValuationClass(rs.getString("VALUATION_CLASS"));
							masterForm.setMaterialUsedIn(rs.getString("MATERIAL_USED_IN"));
							String isEquipment=rs.getString("IS_EQUIPMENT");
							if(isEquipment.equalsIgnoreCase("1"))
							{
								masterForm.setIsEquipment("True");
							}
							if(isEquipment.equalsIgnoreCase("0"))
								masterForm.setIsEquipment("False");
							
							String isSpare=rs.getString("IS_SPARE");
							if(isSpare.equalsIgnoreCase("1"))
							{
								masterForm.setIsSpare("True");
							}
							if(isSpare.equalsIgnoreCase("0"))
								masterForm.setIsSpare("False");
							
							String isNew=rs.getString("IS_NEW");
							if(isNew.equalsIgnoreCase("1"))
							{
								masterForm.setIsNew("True");
							}
							if(isNew.equalsIgnoreCase("0"))
								masterForm.setIsNew("False");
							
							
							masterForm.setEquipmentName(rs.getString("EQUIPMENT_NAME"));
							masterForm.setPrNumber(rs.getString("PR_NUMBER"));
							masterForm.setPoNumber(rs.getString("PO_NUMBER"));
							pendAppForm.setUtilizingDept(rs.getString("UTILIZING_DEPT"));
							String isAsset=rs.getString("is_asset");
							if(isAsset.equalsIgnoreCase("1"))
							{
								pendAppForm.setIsAsset("1");
							}
							if(isAsset.equalsIgnoreCase("0"))
								pendAppForm.setIsAsset("0");
							pendAppForm.setDetailedJustification(rs.getString("DETAILED_JUSTIFICATION"));
							pendAppForm.setDetailedSpecification(rs.getString("DETAILED_SPECIFICATION"));
							pendAppForm.setPurposeID(rs.getString("PURPOSE_ID"));
							
							String sapCodeno=rs.getString("SAP_CODE_NO");
							if(sapCodeno!=null){
						pendAppForm.setSapCodeNo(sapCodeno);		
						String sapCodeExist=rs.getString("SAP_CODE_EXISTS");
						if(sapCodeExist.equalsIgnoreCase("1"))
						{
							pendAppForm.setSapCodeExists("On");
						}
						if(sapCodeExist.equalsIgnoreCase("0"))
							pendAppForm.setSapCodeExistsNo("On");
						String sapCreationDate=rs.getString("SAP_CREATION_DATE");
						String sapDate[]=sapCreationDate.split(" ");
						sapCreationDate=sapDate[0];
						String sapCode[]=sapCreationDate.split("-");
						sapCreationDate=sapCode[2]+"/"+sapCode[1]+"/"+sapCode[0];
						pendAppForm.setSapCreationDate(sapCreationDate);
						pendAppForm.setSapCreatedBy(rs.getString("SAP_CREATED_BY"));
						pendAppForm.setRequestedBy(rs.getString("REQUESTED_BY"));
							}
							
					 		

						
						}
						
					}
					
					if(filterBy.equalsIgnoreCase("Pending")){
    					request.setAttribute("approveButton", "approveButton");
    					request.setAttribute("rejectButton", "rejectButton");
    				}
    				
    				
    				
    				
    				
    				//set ApproverDetails 
    				checkStatus=0;int appStatus=0;
    				LinkedList listApprers=new LinkedList();
    				String getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
    				"where mast.Location='"+location+"' AND  mast.Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mast.Approver_Id=emp.PERNR order by Priority";
    				ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
    				while(rsApprDetails.next())
    				{
    					checkStatus=1;
    					ApprovalsForm apprvers=new ApprovalsForm();
    					apprvers.setPriority(rsApprDetails.getString("Priority"));
    					apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
    					String empCode=rsApprDetails.getString("Approver_Id");
    					String approveStatus="";
    					String recordStatus="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
    					"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
    					"mast.Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
    					"or mast.Role='Creator') and mast.Approver_Id=emp.PERNR  group by mast.Priority,mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status," +
    					"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
    					ResultSet rsAppInfo=ad.selectQuery(recordStatus);
    					while(rsAppInfo.next())
    					{
    						
    						apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
    						approveStatus=rsAppInfo.getString("Req_Status");
    						if(approveStatus.equalsIgnoreCase(""))
    						{
    							apprvers.setApproveStatus("In Process");
    						}
    						if(approveStatus.equalsIgnoreCase("Approved")|| approveStatus.equalsIgnoreCase("Completed"))
    						{
    						apprvers.setDate(rsAppInfo.getString("approved_date"));
    						}else{
    							apprvers.setDate(rsAppInfo.getString("rejected_date"));
    							appStatus=1;
    						}
    						String comments=rsAppInfo.getString("Comments");
    						if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
    						{
    							apprvers.setComments("");
    						}else{
    							apprvers.setComments(rsAppInfo.getString("Comments"));
    						}
    						
    						
    					}
    					if(approveStatus.equalsIgnoreCase("") && appStatus==0)
    					{
    						apprvers.setApproveStatus("In Process");
    					}
    					apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
    					listApprers.add(apprvers);
    				}
    				if(checkStatus==0)
    				{
    					getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
    					"where mast.Location='"+location+"' AND  mast.Material_Type='"+matType+"' AND Material_Group='' and mast.Approver_Id=emp.PERNR order by Priority";
    					rsApprDetails=ad.selectQuery(getApprDetails);
    					while(rsApprDetails.next())
    					{
    						checkStatus=1;
    						ApprovalsForm apprvers=new ApprovalsForm();
    						apprvers.setPriority(rsApprDetails.getString("Priority"));
    						apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
    						String empCode=rsApprDetails.getString("Approver_Id");
    						String approveStatus="";
    						String recordStatus="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
    						"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
    						"mast.Material_Type='"+matType+"' AND Material_Group='' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
    						"or mast.Role='Creator') and mast.Approver_Id=emp.PERNR  group by mast.Priority,mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status," +
    						"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
    						ResultSet rsAppInfo=ad.selectQuery(recordStatus);
    						while(rsAppInfo.next())
    						{
    							apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
    							approveStatus=rsAppInfo.getString("Req_Status");
    							
    							if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
    							{
    							String approveDate=	rsAppInfo.getString("approved_date");
    							
    							String a[]=approveDate.split(" ");
    							approveDate=a[0];
    							String b[]=approveDate.split("-");
    							approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
    							
    							apprvers.setDate(approveDate);
    							}else{
    								String rejectDate=	rsAppInfo.getString("rejected_date");
    								appStatus=1;
    								String a[]=rejectDate.split(" ");
    								rejectDate=a[0];
    								String b[]=rejectDate.split("-");
    								rejectDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
    								apprvers.setDate(rejectDate);
    							}
    							String comments=rsAppInfo.getString("Comments");
    							if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
    							{
    								apprvers.setComments("");
    							}else{
    								apprvers.setComments(rsAppInfo.getString("Comments"));
    							}
    						}
    						if(approveStatus.equalsIgnoreCase("") && appStatus==0)
    						{
    							apprvers.setApproveStatus("In Process");
    						}
    						apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
    						listApprers.add(apprvers);
    				}
    				}
    				request.setAttribute("approverDetails", listApprers);
    				
    				if(userRole.equalsIgnoreCase("User"))
    				{
    				return mapping.findForward("GeneralMaterial");
    				}
    				if(userRole.equalsIgnoreCase("Accounts"))
    				{
    				return mapping.findForward("GeneralMaterial_Account");
    				}
    				if(userRole.equalsIgnoreCase("Creator"))
    				{
    					Date dNow = new Date( );
    					 SimpleDateFormat ft = new SimpleDateFormat ("dd/MM/yyyy");
    						String dateNow = ft.format(dNow);
    						pendAppForm.setSapCreationDate(dateNow);
    					pendAppForm.setSapCreatedBy(user.getEmployeeNo()+"-"+user.getFullName());
    					
    				return mapping.findForward("GeneralMaterial_Creator");
    				}
					
					
					
			     }
				
				if(matType.equalsIgnoreCase("PPC"))
				{
					if(userRole.equalsIgnoreCase("User"))
					{

	  	  			 		
 		   			 		
	   			 		String getFinishedProduct="select mat.REQUEST_NO,mat.REQUEST_DATE,loc.LOCNAME,loc.LOCATION_CODE,stLoc.MAT_TYPE,stLoc.STORAGE_LOCATION_NAME," +
	   			 		"mat.MATERIAL_SHORT_NAME, mat.MATERIAL_LONG_NAME,matGroup.STXT,uom.LTXT,pur.PURCHASE_GROUP_DESC, div.DIV_DESC," +
	   			 		"mat.is_asset,mat.PURPOSE_ID,mat.IS_SAS_FORM_AVAILABLE,mat.APPROXIMATE_VALUE, val.VALUATION_DESC,mat.DETAILED_JUSTIFICATION," +
	   			 		"mat.DETAILED_SPECIFICATION from material_code_request as mat,Location as loc,STORAGE_LOCATION as stLoc,MATERIAL_GROUP as " +
	   			 		"matGroup , UNIT_MESUREMENT AS uom ,PURCHASE_GROUP as pur,DIVISION as div,VALUATION_CLASS as val where REQUEST_NO='"+reqId+"' and " +
	   			 		"loc.LOCID=mat.LOCATION_ID and stLoc.STORAGE_LOCATION_ID=mat.STORAGE_LOCATION_ID and matGroup.MATERIAL_GROUP_ID=mat.MATERIAL_GROUP_ID " +
	   			 		"and uom.UNIT_OF_MEAS_ID=mat.UNIT_OF_MEAS_ID and pur.PURCHASE_GROUP_ID=mat.PURCHASE_GROUP_ID and div.DIV_CODE=mat.DIVISION_ID  " +
	   			 		"and val.VALUATION_ID=mat.VALUATION_CLASS and Type='PPC'"; 
	   			 				
	   			 		ResultSet rs=ad.selectQuery(getFinishedProduct);
	   			 		
	   			 	
	   			 			while(rs.next())
	   					{
	   			 				String  str=rs.getString("STORAGE_LOCATION_NAME");
	   			 		 		if(str.equalsIgnoreCase("Printed Material")||str.equalsIgnoreCase("General Material")||str.equalsIgnoreCase("Complement store"))
	   			 		 		{	
	   			 		 			pendAppForm.setRequestNo(reqId);
	   								pendAppForm.setRequestNumber(reqId);
	   						String reqDate=rs.getString("REQUEST_DATE");
	   						String a[]=reqDate.split(" ");
	   						reqDate=a[0];
	   						String b[]=reqDate.split("-");
	   						reqDate=b[2]+"/"+b[1]+"/"+b[0];
	   						pendAppForm.setRequestDate(reqDate);
	   						pendAppForm.setLocationId(rs.getString("LOCATION_CODE")+"-"+rs.getString("LOCNAME"));
	   						
	   						pendAppForm.setStorageLocationId(rs.getString("MAT_TYPE")+"-"+rs.getString("STORAGE_LOCATION_NAME"));
	   				 		
	   						pendAppForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME"));
	   						pendAppForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME"));
	   						pendAppForm.setMaterialGroupId(rs.getString("STXT"));
	   						pendAppForm.setUnitOfMeasId(rs.getString("LTXT"));
	   						pendAppForm.setPuchaseGroupId(rs.getString("PURCHASE_GROUP_DESC"));
	   						pendAppForm.setDivisionId(rs.getString("DIV_DESC"));
	   						String isAsset=rs.getString("is_asset");
	   						if(isAsset.equalsIgnoreCase("1"))
	   						{
	   							pendAppForm.setIsAsset("YES");
	   						}
	   						if(isAsset.equalsIgnoreCase("0")){
	   							pendAppForm.setIsAsset("NO");
	   						}
	   						pendAppForm.setApproximateValue(rs.getString("APPROXIMATE_VALUE"));
	   						pendAppForm.setValuationClass(rs.getString("VALUATION_DESC"));
	   						pendAppForm.setDetailedJustification(rs.getString("DETAILED_JUSTIFICATION"));
	   						pendAppForm.setDetailedSpecification(rs.getString("DETAILED_SPECIFICATION"));
	   						
	   						String purposeId=rs.getString("PURPOSE_ID");
	   					    if(purposeId.equalsIgnoreCase("1"))
	   					    {
	   					    	pendAppForm.setPurposeID("Gift & Compliments");
	   					    	
	   					    }
	   					    if(purposeId.equalsIgnoreCase("2"))
	   					    {
	   					    	pendAppForm.setPurposeID("Propaganda & Promotional (KUDLU DEPOT)");
	   					    	
	   					    }
	   					    if(purposeId.equalsIgnoreCase("3"))
	   					    {
	   					    	pendAppForm.setPurposeID("Product Launch Exp");
	   					    	
	   					    }
	   					    if(purposeId.equalsIgnoreCase("4"))
	   					    {
	   					    	pendAppForm.setPurposeID("Sales Promotional (SAS)");
	   					    	
	   					    }
	   					    if(purposeId.equalsIgnoreCase("5"))
	   					    {
	   					    	pendAppForm.setPurposeID("Visual Ads,Literature");
	   					    	
	   					    }
	   						
	   					    if(purposeId.equalsIgnoreCase("6"))
	   					    {
	   					    	pendAppForm.setPurposeID("Conference,National & Regional");
	   					    	
	   					    }
	   					    if(purposeId.equalsIgnoreCase("7"))
	   					    {
	   					    	pendAppForm.setPurposeID("Incentive to Field Staff");
	   					    	
	   					    }
	   					    if(purposeId.equalsIgnoreCase("8"))
	   					    {
	   					    	pendAppForm.setPurposeID("Incentive to Stockist/Chemist");
	   					    	
	   					    }
	   					    if(purposeId.equalsIgnoreCase("9"))
	   					    {
	   					    	pendAppForm.setPurposeID("Travelling Lodging & Boarding Exp");
	   					    	
	   					    }
	   						
	   					   
	   						String isSAS=rs.getString("IS_SAS_FORM_AVAILABLE");
	   						
	   						if(isSAS.equalsIgnoreCase("1"))
	   						{
	   							pendAppForm.setIsSASFormAvailable("YES");
	   						}
	   						if(isSAS.equalsIgnoreCase("0")){
	   							pendAppForm.setIsSASFormAvailable("NO");
	   			 		
	   					}
	   						
	   			    
	   			 		
	   			     }
	   			 		 		}
	   			 		
					}else{
	
						
						String getCountryDetails="select * from Country";
						LinkedList countryID=new LinkedList();
						LinkedList countryName=new LinkedList();
						ResultSet rsCountryDetails=ad.selectQuery(getCountryDetails);
						while(rsCountryDetails.next()){
							countryID.add(rsCountryDetails.getString("LAND1"));
							countryName.add(rsCountryDetails.getString("LANDX"));
						}
						pendAppForm.setCounID(countryID);
						pendAppForm.setCountryName(countryName);
					
						
						ResultSet rs11 = ad.selectQuery("select * from location");
						ArrayList locationList=new ArrayList();
						ArrayList locationLabelList=new ArrayList();
						
						while(rs11.next()) {
							locationList.add(rs11.getString("LOCID"));
							locationLabelList.add(rs11.getString("LOCATION_CODE")+"-"+rs11.getString("LOCNAME"));
							
						}
						pendAppForm.setLocationIdList(locationList);
						pendAppForm.setLocationLabelList(locationLabelList);
						
						LinkedList divisonID=new LinkedList();
						LinkedList divisonName=new LinkedList();
						String getDivison="select * from DIVISION";
						ResultSet rsDivison=ad.selectQuery(getDivison);
						while(rsDivison.next())
						{
							divisonID.add(rsDivison.getString("DIV_CODE"));
							divisonName.add(rsDivison.getString("DIV_DESC"));
						}
						pendAppForm.setDivisonID(divisonID);
						pendAppForm.setDivisonName(divisonName);
						LinkedList materTypeIDList=new LinkedList();
						LinkedList materialTypeIdValueList=new LinkedList();
						String getMaterials="select * from MATERIAL_TYPE";
						ResultSet rsMaterial=ad.selectQuery(getMaterials);
						while(rsMaterial.next())
						{
							materTypeIDList.add(rsMaterial.getString("id"));
							materialTypeIdValueList.add(rsMaterial.getString("MATERIAL_GROUP_ID")+"-"+rsMaterial.getString("M_DESC"));
						}
						pendAppForm.setMaterTypeIDList(materTypeIDList);
						pendAppForm.setMaterialTypeIdValueList(materialTypeIdValueList);
						
						LinkedList materGroupIDList=new LinkedList();
						LinkedList materialGroupIdValueList=new LinkedList();
						String getMaterialGroup="select * from MATERIAL_GROUP where MATERIAL_TYPE like '%"+matType+"%' order by STXT";
						ResultSet rsMaterialGroup=ad.selectQuery(getMaterialGroup);
						while(rsMaterialGroup.next())
						{
							materGroupIDList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID"));
							materialGroupIdValueList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID")+"-"+rsMaterialGroup.getString("STXT"));
						}
						pendAppForm.setMaterGroupIDList(materGroupIDList);
						pendAppForm.setMaterialGroupIdValueList(materialGroupIdValueList);
						
						
						LinkedList unitOfMeasIdList=new LinkedList();
						LinkedList unitOfMeasIdValues=new LinkedList();
						
						String getunitMesurement="select * from UNIT_MESUREMENT";
						ResultSet rsUnit=ad.selectQuery(getunitMesurement);
						while(rsUnit.next())
						{
							unitOfMeasIdList.add(rsUnit.getString("UNIT_OF_MEAS_ID"));
							unitOfMeasIdValues.add(rsUnit.getString("UNIT_OF_MEAS_ID")+"-"+rsUnit.getString("LTXT"));
						}
						pendAppForm.setUnitOfMeasIdList(unitOfMeasIdList);
						pendAppForm.setUnitOfMeasIdValues(unitOfMeasIdValues);
						LinkedList storageID=new LinkedList();
						LinkedList storageName=new LinkedList();
						String getStorageDetails="select * from STORAGE_LOCATION where MAT_TYPE='PPC'";
						ResultSet rsStrogeLocation=ad.selectQuery(getStorageDetails);
						while(rsStrogeLocation.next()){
							storageID.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID"));
							storageName.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID")+"-"+rsStrogeLocation.getString("STORAGE_LOCATION_NAME"));
						}
						pendAppForm.setStorageID(storageID);
						pendAppForm.setStorageIDName(storageName);
						
						LinkedList puchaseGroupIdList=new LinkedList();
						LinkedList puchaseGroupIdValues=new LinkedList();
						
						String getPurchaseGroup="select * from PURCHASE_GROUP";
						ResultSet rsPurchaseGroup=ad.selectQuery(getPurchaseGroup);
						while(rsPurchaseGroup.next())
						{
							puchaseGroupIdList.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID"));
							puchaseGroupIdValues.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID")+"-"+rsPurchaseGroup.getString("PURCHASE_GROUP_DESC"));
						}
						pendAppForm.setPuchaseGroupIdList(puchaseGroupIdList);
						pendAppForm.setPuchaseGroupIdValues(puchaseGroupIdValues);
						
						LinkedList valuationClassID=new LinkedList();
						LinkedList valuationClassName=new LinkedList();
						
						String getValuation="select * from VALUATION_CLASS ";
						ResultSet rsValuation=ad.selectQuery(getValuation);
						while(rsValuation.next())
						{
							valuationClassID.add(rsValuation.getString("VALUATION_ID"));
							valuationClassName.add(rsValuation.getString("VALUATION_ID")+"-"+rsValuation.getString("VALUATION_DESC"));
						}
						pendAppForm.setValuationClassID(valuationClassID);
						pendAppForm.setValuationClassName(valuationClassName);
						
			// get material records
				
						String getFinishedProduct="select * from material_code_request where REQUEST_NO='"+reqId+"'";
						ResultSet rs=ad.selectQuery(getFinishedProduct);
						while(rs.next())
						{
							pendAppForm.setRequestNo(reqId);
							pendAppForm.setRequestNumber(reqId);
							String reqDate=rs.getString("REQUEST_DATE");
							String a[]=reqDate.split(" ");
							reqDate=a[0];
							String b[]=reqDate.split("-");
							reqDate=b[2]+"/"+b[1]+"/"+b[0];
							pendAppForm.setRequestDate(reqDate);
							pendAppForm.setLocationId(rs.getString("LOCATION_ID"));
							pendAppForm.setMaterialTypeId(rs.getString("MATERIAL_TYPE_ID"));
							pendAppForm.setStorageLocationId(rs.getString("STORAGE_LOCATION_ID"));
							pendAppForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME"));
							pendAppForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME"));
							pendAppForm.setMaterialGroupId(rs.getString("MATERIAL_GROUP_ID"));
							pendAppForm.setUnitOfMeasId(rs.getString("UNIT_OF_MEAS_ID"));
							pendAppForm.setPuchaseGroupId(rs.getString("PURCHASE_GROUP_ID"));
							pendAppForm.setDivisionId(rs.getString("DIVISION_ID"));
							String isAsset=rs.getString("is_asset");
							if(isAsset.equalsIgnoreCase("1"))
							{
								pendAppForm.setIsAsset("1");
							}
							if(isAsset.equalsIgnoreCase("0"))
								pendAppForm.setIsAsset("0");
							
							pendAppForm.setApproximateValue(rs.getString("APPROXIMATE_VALUE"));
							pendAppForm.setValuationClass(rs.getString("VALUATION_CLASS"));
							pendAppForm.setDetailedJustification(rs.getString("DETAILED_JUSTIFICATION"));
							pendAppForm.setDetailedSpecification(rs.getString("DETAILED_SPECIFICATION"));
							
							String purposeId=rs.getString("PURPOSE_ID");
							purposeId=purposeId.replace(" ","");
							pendAppForm.setPurposeID(purposeId);
							String isSAS=rs.getString("IS_SAS_FORM_AVAILABLE");
							
							if(isSAS.equalsIgnoreCase("1"))
							{
								pendAppForm.setIsSASFormAvailable("1");
							}
							if(isSAS.equalsIgnoreCase("0")){
								pendAppForm.setIsSASFormAvailable("0");}
							
							String sapCodeno=rs.getString("SAP_CODE_NO");
							if(sapCodeno!=null){
						pendAppForm.setSapCodeNo(sapCodeno);		
						String sapCodeExist=rs.getString("SAP_CODE_EXISTS");
						if(sapCodeExist.equalsIgnoreCase("1"))
						{
							pendAppForm.setSapCodeExists("On");
						}
						if(sapCodeExist.equalsIgnoreCase("0"))
							pendAppForm.setSapCodeExistsNo("On");
						String sapCreationDate=rs.getString("SAP_CREATION_DATE");
						String sapDate[]=sapCreationDate.split(" ");
						sapCreationDate=sapDate[0];
						String sapCode[]=sapCreationDate.split("-");
						sapCreationDate=sapCode[2]+"/"+sapCode[1]+"/"+sapCode[0];
						pendAppForm.setSapCreationDate(sapCreationDate);
						pendAppForm.setSapCreatedBy(rs.getString("SAP_CREATED_BY"));
						pendAppForm.setRequestedBy(rs.getString("REQUESTED_BY"));
							}
							
						}
						
						

					}
					
					if(filterBy.equalsIgnoreCase("Pending")){
    					request.setAttribute("approveButton", "approveButton");
    					request.setAttribute("rejectButton", "rejectButton");
    				}
    				
    				
    				
    				
    				
    				//set ApproverDetails 
    				checkStatus=0;int appStatus=0;
    				LinkedList listApprers=new LinkedList();
    				String getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
    				"where mast.Location='"+location+"' AND  mast.Material_Type='PPC' AND Material_Group='"+matGroup+"' and mast.Approver_Id=emp.PERNR order by Priority";
    				ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
    				while(rsApprDetails.next())
    				{
    					checkStatus=1;
    					ApprovalsForm apprvers=new ApprovalsForm();
    					apprvers.setPriority(rsApprDetails.getString("Priority"));
    					apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
    					String empCode=rsApprDetails.getString("Approver_Id");
    					String approveStatus="";
    					String recordStatus="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
    					"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
    					"mast.Material_Type='PPC' AND Material_Group='"+matGroup+"' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
    					"or mast.Role='Creator') and mast.Approver_Id=emp.PERNR  group by mast.Priority,mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status," +
    					"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
    					ResultSet rsAppInfo=ad.selectQuery(recordStatus);
    					while(rsAppInfo.next())
    					{
    						
    						apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
    						approveStatus=rsAppInfo.getString("Req_Status");
    						if(approveStatus.equalsIgnoreCase(""))
    						{
    							apprvers.setApproveStatus("In Process");
    						}
    						if(approveStatus.equalsIgnoreCase("Approved")|| approveStatus.equalsIgnoreCase("Completed"))
    						{
    						apprvers.setDate(rsAppInfo.getString("approved_date"));
    						}else{
    							apprvers.setDate(rsAppInfo.getString("rejected_date"));
    							appStatus=1;
    						}
    						String comments=rsAppInfo.getString("Comments");
    						if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
    						{
    							apprvers.setComments("");
    						}else{
    							apprvers.setComments(rsAppInfo.getString("Comments"));
    						}
    						
    						
    					}
    					if(approveStatus.equalsIgnoreCase("") && appStatus==0)
    					{
    						apprvers.setApproveStatus("In Process");
    					}
    					apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
    					listApprers.add(apprvers);
    				}
    				if(checkStatus==0)
    				{
    					getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
    					"where mast.Location='"+location+"' AND  mast.Material_Type='PPC' AND Material_Group='' and mast.Approver_Id=emp.PERNR order by Priority";
    					rsApprDetails=ad.selectQuery(getApprDetails);
    					while(rsApprDetails.next())
    					{
    						checkStatus=1;
    						ApprovalsForm apprvers=new ApprovalsForm();
    						apprvers.setPriority(rsApprDetails.getString("Priority"));
    						apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
    						String empCode=rsApprDetails.getString("Approver_Id");
    						String approveStatus="";
    						String recordStatus="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
    						"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
    						"mast.Material_Type='PPC' AND Material_Group='' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
    						"or mast.Role='Creator') and mast.Approver_Id=emp.PERNR  group by mast.Priority,mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status," +
    						"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
    						ResultSet rsAppInfo=ad.selectQuery(recordStatus);
    						while(rsAppInfo.next())
    						{
    							apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
    							approveStatus=rsAppInfo.getString("Req_Status");
    							
    							if(approveStatus.equalsIgnoreCase("Approved")|| approveStatus.equalsIgnoreCase("Completed"))
    							{
    							String approveDate=	rsAppInfo.getString("approved_date");
    							
    							String a[]=approveDate.split(" ");
    							approveDate=a[0];
    							String b[]=approveDate.split("-");
    							approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
    							
    							apprvers.setDate(approveDate);
    							}else{
    								String rejectDate=	rsAppInfo.getString("rejected_date");
    								appStatus=1;
    								String a[]=rejectDate.split(" ");
    								rejectDate=a[0];
    								String b[]=rejectDate.split("-");
    								rejectDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
    								apprvers.setDate(rejectDate);
    							}
    							String comments=rsAppInfo.getString("Comments");
    							if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
    							{
    								apprvers.setComments("");
    							}else{
    								apprvers.setComments(rsAppInfo.getString("Comments"));
    							}
    						}
    						if(approveStatus.equalsIgnoreCase("") && appStatus==0)
    						{
    							apprvers.setApproveStatus("In Process");
    						}
    						apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
    						listApprers.add(apprvers);
    				}
    				}
    				request.setAttribute("approverDetails", listApprers);
    				
    				if(userRole.equalsIgnoreCase("User"))
    				{
    				return mapping.findForward("ZPPCDetails");
    				}
    				if(userRole.equalsIgnoreCase("Accounts"))
    				{
    				return mapping.findForward("ZPPC_Account");
    				}
    				if(userRole.equalsIgnoreCase("Creator"))
    				{
    					Date dNow = new Date( );
    					 SimpleDateFormat ft = new SimpleDateFormat ("dd/MM/yyyy");
    						String dateNow = ft.format(dNow);
    						pendAppForm.setSapCreationDate(dateNow);
    					pendAppForm.setSapCreatedBy(user.getEmployeeNo()+"-"+user.getFullName());
    					
    				return mapping.findForward("ZPPC_Creator");
    				}
					
					
				}
				
				if(matType.equalsIgnoreCase("OSE"))
				{

					if(userRole.equalsIgnoreCase("User"))
					{
				 		
				 		
				 		String getFinishedProduct="select mat.REQUEST_NO,mat.REQUEST_DATE,mat.MATERIAL_GROUP_ID,loc.LOCNAME,loc.LOCATION_CODE,stLoc.MAT_TYPE,stLoc.STORAGE_LOCATION_NAME,mat.MATERIAL_SHORT_NAME," +
				 		" mat.MATERIAL_LONG_NAME,matGroup.STXT,uom.LTXT,pur.PURCHASE_GROUP_DESC,mat.IS_EQUIPMENT,mat.EQUIPMENT_NAME,mat.EQUIPMENT_MAKE," +
				 		"mat.Component_MAKE,mat.IS_SPARE,mat.OEM_PartNo,mat.IS_NEW_Equipment,mat.IS_NEW_Furniture,mat.IS_NEW_Facility,	mat.IS_Spare_required," +
				 		"mat.PO_NUMBER,mat.PR_NUMBER,dep.DPTSTXT,mat.APPROXIMATE_VALUE, val.VALUATION_DESC,mat.DETAILED_JUSTIFICATION,	mat.DETAILED_SPECIFICATION,mat.moc,mat.rating,mat.range,mat.DIMENSION,mat.PACK_SIZE,mat.equip_Intended" +
				 		" from material_code_request as mat,Location as loc,STORAGE_LOCATION as stLoc,MATERIAL_GROUP as matGroup , UNIT_MESUREMENT AS uom " +
				 		",PURCHASE_GROUP as pur ,VALUATION_CLASS as val ,DEPARTMENT as dep where REQUEST_NO='"+reqId+"' and	loc.LOCID=mat.LOCATION_ID and " +
				 		"stLoc.STORAGE_LOCATION_ID=mat.STORAGE_LOCATION_ID and matGroup.MATERIAL_GROUP_ID=mat.MATERIAL_GROUP_ID and uom.UNIT_OF_MEAS_ID=mat.UNIT_OF_MEAS_ID " +
				 		"and pur.PURCHASE_GROUP_ID=mat.PURCHASE_GROUP_ID and TYPE='OSE' and val.VALUATION_ID=mat.VALUATION_CLASS and dep.DPTID=mat.UTILIZING_DEPT";
						
				 		
				 		
				 		ResultSet rs=ad.selectQuery(getFinishedProduct);
						if(rs.next())
						{
							pendAppForm.setRequestNo(reqId);
							pendAppForm.setRequestNumber(reqId);
						
							pendAppForm.setReqMaterialGroup(rs.getString("MATERIAL_GROUP_ID"));
							pendAppForm.setLocationId(rs.getString("LOCATION_CODE")+"-"+rs.getString("LOCNAME"));
						
							String reqDate=rs.getString("REQUEST_DATE");
							String a[]=reqDate.split(" ");
							reqDate=a[0];
							String b[]=reqDate.split("-");
							reqDate=b[2]+"/"+b[1]+"/"+b[0];
							pendAppForm.setRequestDate(reqDate);
							pendAppForm.setLocationId(rs.getString("MAT_TYPE")+"-"+rs.getString("STORAGE_LOCATION_NAME"));
						
							pendAppForm.setStorageLocationId(rs.getString("STORAGE_LOCATION_NAME"));
							pendAppForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME"));
							pendAppForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME"));
							pendAppForm.setMaterialGroupId(rs.getString("STXT"));
							pendAppForm.setPuchaseGroupId(rs.getString("PURCHASE_GROUP_DESC"));
							pendAppForm.setUnitOfMeasId(rs.getString("LTXT"));
							pendAppForm.setApproximateValue(rs.getString("APPROXIMATE_VALUE"));
							pendAppForm.setValuationClass(rs.getString("VALUATION_DESC"));
						
							String isEquipment=rs.getString("IS_EQUIPMENT");
							if(isEquipment.equalsIgnoreCase("1"))
							{
								pendAppForm.setIsEquipment("Yes");
								
							}
							pendAppForm.setEquipmentName(rs.getString("EQUIPMENT_NAME"));
							pendAppForm.setEquipmentMake(rs.getString("EQUIPMENT_MAKE"));
							if(isEquipment.equalsIgnoreCase("0")){
								pendAppForm.setIsEquipment("No");
							
							}
							String isSpare=rs.getString("IS_SPARE");
							if(isSpare.equalsIgnoreCase("1"))
							{
								pendAppForm.setIsSpare("Yes");
							
							}
							pendAppForm.setComponentMake(rs.getString("Component_MAKE"));
							pendAppForm.setOemPartNo(rs.getString("OEM_PartNo"));
							if(isSpare.equalsIgnoreCase("0")){
								pendAppForm.setIsSpare("No");
							
								
							}
							pendAppForm.setMoc(rs.getString("moc")); 
							pendAppForm.setRating(rs.getString("rating"));
							pendAppForm.setRange(rs.getString("range"));
							String isNewEquipment=rs.getString("IS_NEW_Equipment");
							if(isNewEquipment.equalsIgnoreCase("1"))
							{
								pendAppForm.setIsNewEquipment("Yes");
								
							}
							if(isNewEquipment.equalsIgnoreCase("0"))
							{
								pendAppForm.setIsNewEquipment("No");
								
							}
							if(isNewEquipment.equalsIgnoreCase("2"))
							{
								pendAppForm.setIsNewEquipment("N/A");
								
							}
							String isNewfurniturt=rs.getString("IS_NEW_Furniture");
							if(isNewfurniturt.equalsIgnoreCase("1"))
							{
								pendAppForm.setIsItNewFurniture("Yes");
								
							}
							if(isNewfurniturt.equalsIgnoreCase("0"))
							{
								pendAppForm.setIsItNewFurniture("No");
								
							}
							if(isNewfurniturt.equalsIgnoreCase("2"))
							{
								pendAppForm.setIsItNewFurniture("N/A");
								
							}
							String isNewfacility=rs.getString("IS_NEW_Facility");
							if(isNewfacility.equalsIgnoreCase("1"))
							{
								pendAppForm.setIsItFacility("Yes");
								
							}
							if(isNewfacility.equalsIgnoreCase("0"))
							{
								pendAppForm.setIsItFacility("No");
								
							}
							if(isNewfacility.equalsIgnoreCase("2"))
							{
								pendAppForm.setIsItFacility("N/A");
								
							}
								
							String issparey=rs.getString("IS_Spare_required");
							if(issparey.equalsIgnoreCase("1"))
							{
								pendAppForm.setIsSpareNewEquipment("Yes");
								
							}
							if(issparey.equalsIgnoreCase("0"))
							{
								pendAppForm.setIsSpareNewEquipment("No");
								
							}					
							if(issparey.equalsIgnoreCase("2"))
							{
								pendAppForm.setIsSpareNewEquipment("N/A");
								
							}
						
							pendAppForm.setPrNumber(rs.getString("PR_NUMBER"));
							pendAppForm.setPoNumber(rs.getString("PO_NUMBER"));
							pendAppForm.setUtilizingDept(rs.getString("DPTSTXT"));
							pendAppForm.setDetailedJustification(rs.getString("DETAILED_JUSTIFICATION"));
							pendAppForm.setDetailedSpecification(rs.getString("DETAILED_SPECIFICATION"));
							pendAppForm.setDimension(rs.getString("DIMENSION"));
							pendAppForm.setPackSize(rs.getString("PACK_SIZE"));
							pendAppForm.setEquipIntendedFor(rs.getString("equip_Intended"));
						}
						}else{
							
							String getCountryDetails="select * from Country";
							LinkedList countryID=new LinkedList();
							LinkedList countryName=new LinkedList();
							ResultSet rsCountryDetails=ad.selectQuery(getCountryDetails);
							while(rsCountryDetails.next()){
								countryID.add(rsCountryDetails.getString("LAND1"));
								countryName.add(rsCountryDetails.getString("LANDX"));
							}
							pendAppForm.setCounID(countryID);
							pendAppForm.setCountryName(countryName);
							
							LinkedList deptID=new LinkedList();
							LinkedList deptName=new LinkedList();
							String getdepartment="select * from department";
							ResultSet rsdepartment=ad.selectQuery(getdepartment);
							while(rsdepartment.next()){
								deptID.add(rsdepartment.getInt("DPTID"));
								deptName.add(rsdepartment.getString("DPTSTXT"));
							}
							
							pendAppForm.setDeptId(deptID);
							pendAppForm.setDeptName(deptName);
							
							String materialType="";
							String valuationType="";
							String getvaluationType="select MATERIAL_TYPE_ID,VALUATION_CLASS from material_code_request where REQUEST_NO='"+reqId+"'";
							ResultSet rsValuationType=ad.selectQuery(getvaluationType);
							while(rsValuationType.next()){
								materialType=rsValuationType.getString("MATERIAL_TYPE_ID");
								valuationType=rsValuationType.getString("VALUATION_CLASS");
							}
							ResultSet rs11 = ad.selectQuery("select LOCID," +
							"LOCNAME,location_code from location");
							ArrayList locationList=new ArrayList();
							ArrayList locationLabelList=new ArrayList();
							
							while(rs11.next()) {
								locationList.add(rs11.getString("LOCID"));
								locationLabelList.add(rs11.getString("LOCATION_CODE")+"-"+rs11.getString("LOCNAME"));
							}
							pendAppForm.setLocationIdList(locationList);
							pendAppForm.setLocationLabelList(locationLabelList);
							
							LinkedList materTypeIDList=new LinkedList();
							LinkedList materialTypeIdValueList=new LinkedList();
							String getMaterials="select * from MATERIAL_TYPE where MATERIAL_GROUP_ID like '%"+matType+"%' order by MATERIAL_GROUP_ID";
							ResultSet rsMaterial=ad.selectQuery(getMaterials);
							while(rsMaterial.next())
							{
								materTypeIDList.add(rsMaterial.getString("id"));
								materialTypeIdValueList.add(rsMaterial.getString("MATERIAL_GROUP_ID")+"-"+rsMaterial.getString("M_DESC"));
							}
							pendAppForm.setMaterTypeIDList(materTypeIDList);
							pendAppForm.setMaterialTypeIdValueList(materialTypeIdValueList);
							
							LinkedList materGroupIDList=new LinkedList();
							LinkedList materialGroupIdValueList=new LinkedList();
							String getMaterialGroup="select * from MATERIAL_GROUP";
							ResultSet rsMaterialGroup=ad.selectQuery(getMaterialGroup);
							while(rsMaterialGroup.next())
							{
								materGroupIDList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID"));
								materialGroupIdValueList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID")+"-"+rsMaterialGroup.getString("STXT"));
							}
							pendAppForm.setMaterGroupIDList(materGroupIDList);
							pendAppForm.setMaterialGroupIdValueList(materialGroupIdValueList);
							
							
							LinkedList unitOfMeasIdList=new LinkedList();
							LinkedList unitOfMeasIdValues=new LinkedList();
							
							String getunitMesurement="select * from UNIT_MESUREMENT";
							ResultSet rsUnit=ad.selectQuery(getunitMesurement);
							while(rsUnit.next())
							{
								unitOfMeasIdList.add(rsUnit.getString("UNIT_OF_MEAS_ID"));
								unitOfMeasIdValues.add(rsUnit.getString("UNIT_OF_MEAS_ID")+" - "+rsUnit.getString("LTXT"));
							}
							pendAppForm.setUnitOfMeasIdList(unitOfMeasIdList);
							pendAppForm.setUnitOfMeasIdValues(unitOfMeasIdValues);
							LinkedList storageID=new LinkedList();
							LinkedList storageName=new LinkedList();
							String getStorageDetails="select * from STORAGE_LOCATION where MAT_TYPE='OSE'";
							ResultSet rsStrogeLocation=ad.selectQuery(getStorageDetails);
							while(rsStrogeLocation.next()){
								storageID.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID"));
								storageName.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID")+"-"+rsStrogeLocation.getString("STORAGE_LOCATION_NAME"));
							}
							pendAppForm.setStorageID(storageID);
							pendAppForm.setStorageIDName(storageName);
							
							LinkedList valuationClassID=new LinkedList();
							LinkedList valuationClassName=new LinkedList();
							String getValuation="select * from VALUATION_CLASS where MAT_TYPE='OSE'";
							ResultSet rsValuation=ad.selectQuery(getValuation);
							while(rsValuation.next())
							{
								valuationClassID.add(rsValuation.getString("VALUATION_ID"));
								valuationClassName.add(rsValuation.getString("VALUATION_ID")+"-"+rsValuation.getString("VALUATION_DESC"));
							}
							pendAppForm.setValuationClassID(valuationClassID);
							pendAppForm.setValuationClassName(valuationClassName);
							
							LinkedList puchaseGroupIdList=new LinkedList();
							LinkedList puchaseGroupIdValues=new LinkedList();
							
							String getPurchaseGroup="select * from PURCHASE_GROUP";
							ResultSet rsPurchaseGroup=ad.selectQuery(getPurchaseGroup);
							while(rsPurchaseGroup.next())
							{
								puchaseGroupIdList.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID"));
								puchaseGroupIdValues.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID")+"-"+rsPurchaseGroup.getString("PURCHASE_GROUP_DESC"));
							}
							pendAppForm.setPuchaseGroupIdList(puchaseGroupIdList);
							pendAppForm.setPuchaseGroupIdValues(puchaseGroupIdValues);
							
							String getFinishedProduct="select * from material_code_request where REQUEST_NO='"+reqId+"'";
							ResultSet rs=ad.selectQuery(getFinishedProduct);
							while(rs.next())
							{

								pendAppForm.setRequestNo(reqId);
								pendAppForm.setRequestNumber(reqId);
								pendAppForm.setReqMaterialGroup(rs.getString("MATERIAL_GROUP_ID"));
								String reqDate=rs.getString("REQUEST_DATE");
								String a[]=reqDate.split(" ");
								reqDate=a[0];
								String b[]=reqDate.split("-");
								reqDate=b[2]+"/"+b[1]+"/"+b[0];
								pendAppForm.setRequestDate(reqDate);
								pendAppForm.setLocationId(rs.getString("LOCATION_ID"));
								pendAppForm.setMaterialTypeId(rs.getString("MATERIAL_TYPE_ID"));
								pendAppForm.setStorageLocationId(rs.getString("STORAGE_LOCATION_ID"));
								pendAppForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME"));
								pendAppForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME"));
								pendAppForm.setMaterialGroupId(rs.getString("MATERIAL_GROUP_ID"));
								pendAppForm.setPuchaseGroupId(rs.getString("PURCHASE_GROUP_ID"));
								pendAppForm.setUnitOfMeasId(rs.getString("UNIT_OF_MEAS_ID"));
								pendAppForm.setApproximateValue(rs.getString("APPROXIMATE_VALUE"));
								pendAppForm.setValuationClass(rs.getString("VALUATION_CLASS"));
								pendAppForm.setMaterialUsedIn(rs.getString("MATERIAL_USED_IN"));
								String isEquipment=rs.getString("IS_EQUIPMENT");
								if(isEquipment.equalsIgnoreCase("1"))
								{
									pendAppForm.setIsEquipment("1");
									
								}
								pendAppForm.setEquipmentName(rs.getString("EQUIPMENT_NAME"));
								pendAppForm.setEquipmentMake(rs.getString("EQUIPMENT_MAKE"));
								if(isEquipment.equalsIgnoreCase("0")){
									pendAppForm.setIsEquipment("0");
								
								}
								String isSpare=rs.getString("IS_SPARE");
								if(isSpare.equalsIgnoreCase("1"))
								{
									pendAppForm.setIsSpare("1");
								
								}
								pendAppForm.setComponentMake(rs.getString("Component_MAKE"));
								pendAppForm.setOemPartNo(rs.getString("OEM_PartNo"));
								if(isSpare.equalsIgnoreCase("0")){
									pendAppForm.setIsSpare("0");
								
									
								}
								pendAppForm.setMoc(rs.getString("moc")); 
								pendAppForm.setRating(rs.getString("rating"));
								pendAppForm.setRange(rs.getString("range"));
								
								pendAppForm.setIsNewEquipment(rs.getString("IS_Equipment"));
								pendAppForm.setIsItNewFurniture(rs.getString("IS_NEW_Furniture"));
								pendAppForm.setIsItFacility(rs.getString("IS_NEW_Facility"));
								pendAppForm.setIsSpareNewEquipment(rs.getString("IS_Spare_required"));
								
								
								
								pendAppForm.setPrNumber(rs.getString("PR_NUMBER"));
								pendAppForm.setPoNumber(rs.getString("PO_NUMBER"));
								pendAppForm.setUtilizingDept(rs.getString("UTILIZING_DEPT"));
								pendAppForm.setDetailedJustification(rs.getString("DETAILED_JUSTIFICATION"));
								pendAppForm.setDetailedSpecification(rs.getString("DETAILED_SPECIFICATION"));
								pendAppForm.setDimension(rs.getString("DIMENSION"));
								pendAppForm.setPackSize(rs.getString("PACK_SIZE"));
								pendAppForm.setEquipIntendedFor(rs.getString("equip_Intended"));
								pendAppForm.setPurposeID(rs.getString("PURPOSE_ID"));
								pendAppForm.setSapCodeNo(rs.getString("SAP_CODE_NO"));
								String sapCodeno=rs.getString("SAP_CODE_NO");
									if(sapCodeno!=null){
								String sapCodeExist=rs.getString("SAP_CODE_EXISTS");
								pendAppForm.setSapCodeNo(sapCodeno);
								if(sapCodeExist.equalsIgnoreCase("1"))
								{
									pendAppForm.setSapCodeExists("On");
								}
								if(sapCodeExist.equalsIgnoreCase("0"))
									pendAppForm.setSapCodeExistsNo("On");
								String sapCreationDate=rs.getString("SAP_CREATION_DATE");
								String sapDate[]=sapCreationDate.split(" ");
								sapCreationDate=sapDate[0];
								String sapCode[]=sapCreationDate.split("-");
								sapCreationDate=sapCode[2]+"/"+sapCode[1]+"/"+sapCode[0];
								pendAppForm.setSapCreationDate(sapCreationDate);
								pendAppForm.setSapCreatedBy(rs.getString("SAP_CREATED_BY"));
								pendAppForm.setRequestedBy(rs.getString("REQUESTED_BY"));
									}
									
								

							
							}
							
						
					}
					
					if(filterBy.equalsIgnoreCase("Pending")){
						request.setAttribute("approveButton", "approveButton");
						request.setAttribute("rejectButton", "rejectButton");
					}
					
					
					
					
					
					//set ApproverDetails 
					checkStatus=0;int appStatus=0;
					LinkedList listApprers=new LinkedList();
					String getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
					"where mast.Location='"+location+"' AND  mast.Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mast.Approver_Id=emp.PERNR order by Priority";
					ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
					while(rsApprDetails.next())
					{
						checkStatus=1;
						ApprovalsForm apprvers=new ApprovalsForm();
						apprvers.setPriority(rsApprDetails.getString("Priority"));
						apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
						String empCode=rsApprDetails.getString("Approver_Id");
						String approveStatus="";
						String recordStatus="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
						"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
						"mast.Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
						"or mast.Role='Creator') and mast.Approver_Id=emp.PERNR  group by mast.Priority,mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status," +
						"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
						ResultSet rsAppInfo=ad.selectQuery(recordStatus);
						while(rsAppInfo.next())
						{
							
							apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
							approveStatus=rsAppInfo.getString("Req_Status");
							if(approveStatus.equalsIgnoreCase(""))
							{
								apprvers.setApproveStatus("In Process");
							}
							if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
							{
							apprvers.setDate(rsAppInfo.getString("approved_date"));
							}else{
								apprvers.setDate(rsAppInfo.getString("rejected_date"));
								appStatus=1;
							}
							String comments=rsAppInfo.getString("Comments");
							if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
							{
								apprvers.setComments("");
							}else{
								apprvers.setComments(rsAppInfo.getString("Comments"));
							}
							
							
						}
						if(approveStatus.equalsIgnoreCase("") && appStatus==0)
						{
							apprvers.setApproveStatus("In Process");
						}
						apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
						listApprers.add(apprvers);
					}
					if(checkStatus==0)
					{
						getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
						"where mast.Location='"+location+"' AND  mast.Material_Type='"+matType+"' AND Material_Group='' and mast.Approver_Id=emp.PERNR order by Priority";
						rsApprDetails=ad.selectQuery(getApprDetails);
						while(rsApprDetails.next())
						{
							checkStatus=1;
							ApprovalsForm apprvers=new ApprovalsForm();
							apprvers.setPriority(rsApprDetails.getString("Priority"));
							apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
							String empCode=rsApprDetails.getString("Approver_Id");
							String approveStatus="";
							String recordStatus="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
							"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
							"mast.Material_Type='"+matType+"' AND Material_Group='' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
							"or mast.Role='Creator') and mast.Approver_Id=emp.PERNR  group by mast.Priority,mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status," +
							"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
							ResultSet rsAppInfo=ad.selectQuery(recordStatus);
							while(rsAppInfo.next())
							{
								apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
								approveStatus=rsAppInfo.getString("Req_Status");
								
								if(approveStatus.equalsIgnoreCase("Approved")|| approveStatus.equalsIgnoreCase("Completed"))
								{
								String approveDate=	rsAppInfo.getString("approved_date");
								
								String a[]=approveDate.split(" ");
								approveDate=a[0];
								String b[]=approveDate.split("-");
								approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
								
								apprvers.setDate(approveDate);
								}else{
									String rejectDate=	rsAppInfo.getString("rejected_date");
									appStatus=1;
									String a[]=rejectDate.split(" ");
									rejectDate=a[0];
									String b[]=rejectDate.split("-");
									rejectDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
									apprvers.setDate(rejectDate);
								}
								String comments=rsAppInfo.getString("Comments");
								if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
								{
									apprvers.setComments("");
								}else{
									apprvers.setComments(rsAppInfo.getString("Comments"));
								}
							}
							if(approveStatus.equalsIgnoreCase("") && appStatus==0)
							{
								apprvers.setApproveStatus("In Process");
							}
							apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
							listApprers.add(apprvers);
					}
					}
					request.setAttribute("approverDetails", listApprers);
					if(matType.equalsIgnoreCase("OSE"))
					{
						if(userRole.equalsIgnoreCase("User"))
						{
						return mapping.findForward("ZPSRDetails");
						}
						if(userRole.equalsIgnoreCase("Accounts"))
						{
						return mapping.findForward("ZPSR_Account");
						}
						if(userRole.equalsIgnoreCase("Creator"))
						{
							Date dNow = new Date( );
							 SimpleDateFormat ft = new SimpleDateFormat ("dd/MM/yyyy");
								String dateNow = ft.format(dNow);
								pendAppForm.setSapCreationDate(dateNow);
							pendAppForm.setSapCreatedBy(user.getEmployeeNo()+"-"+user.getFullName());
							
						return mapping.findForward("ZPSR_Creator");
						}
					}
				}
				if(matType.equalsIgnoreCase("PM"))
				{

					if(userRole.equalsIgnoreCase("User"))
					{
						String getMaterial="select mat.REQUEST_NO,mat.Type,mat.MATERIAL_GROUP_ID,loc.LOCATION_CODE,loc.LOCATION_CODE,stLoc.MAT_TYPE,mat.MATERIAL_GROUP_ID,mat.REQUEST_DATE,loc.LOCNAME,stLoc.STORAGE_LOCATION_NAME,mat.MATERIAL_SHORT_NAME," +
						"mat.MATERIAL_LONG_NAME,matGroup.STXT,uom.LTXT,pur.PURCHASE_GROUP_DESC,mat.DUTY_ELEMENT,pacgrp.PACKING_MATERIAL_GROUP_NAME," +
						"mat.Type_Of_Material,mat.ARTWORK_NO,mat.IS_ARTWORK_REVISION,mat.EXISTING_SAP_ITEM_CODE,mat.IS_DMF_MATERIAL,dmf.DMF_GRADE_DESC," +
						"mat.COS_GRADE_AND_NO,mat.ADDITIONAL_TEST,mat.IS_VENDOR_SPECIFIC_MATERIAL,mat.MFGR_NAME,mat.SITE_OF_MANUFACTURE,cou.LANDX," +
						"mat.CUSTOMER_NAME,mat.TO_BE_USED_IN_PRODUCTS,mat.RETEST_DAYS,mat.RETEST_DAYS_TYPE,val.VALUATION_DESC," +
						"mat.APPROXIMATE_VALUE,mat.Attachements,SAP_CODE_NO,SAP_CODE_EXISTS,SAP_CREATION_DATE,SAP_CREATED_BY from material_code_request as mat,Location as loc,STORAGE_LOCATION as stLoc," +
						"MATERIAL_GROUP as matGroup ,UNIT_MESUREMENT AS uom,PURCHASE_GROUP as pur,PACKAGE_MATERIAL_GROUP as pacgrp,DMF_GRADE as dmf," +
						"Country as cou,VALUATION_CLASS as val where REQUEST_NO='"+reqId+"' " +
						"and loc.LOCID=mat.LOCATION_ID and stLoc.STORAGE_LOCATION_ID=mat.STORAGE_LOCATION_ID and matGroup.MATERIAL_GROUP_ID=mat.MATERIAL_GROUP_ID" +
						" and uom.UNIT_OF_MEAS_ID=mat.UNIT_OF_MEAS_ID and pur.PURCHASE_GROUP_ID=mat.PURCHASE_GROUP_ID  and pacgrp.PACKING_MATERIAL_GROUP_ID=mat.PACKING_MATERIAL_GROUP " +
						" and dmf.DMF_GRADE_ID=mat.DMF_GRADE_ID and cou.LAND1=mat.COUNTRY_ID  " +
						" and val.VALUATION_ID=mat.VALUATION_CLASS";
						
						ResultSet rs=ad.selectQuery(getMaterial);
						while(rs.next())
						{
							pendAppForm.setRequestNo(reqId);
							pendAppForm.setRequestNumber(reqId);
							pendAppForm.setReqMaterialGroup(rs.getString("MATERIAL_GROUP_ID"));
							matType=rs.getString("Type");
							matGroup=rs.getString("MATERIAL_GROUP_ID");
							location=rs.getString("LOCATION_CODE");
							String reqDate=rs.getString("REQUEST_DATE");
							String a[]=reqDate.split(" ");
							reqDate=a[0];
							String b[]=reqDate.split("-");
							reqDate=b[2]+"/"+b[1]+"/"+b[0];
							pendAppForm.setRequestDate(reqDate);
							pendAppForm.setLocationId(rs.getString("LOCATION_CODE")+"-"+rs.getString("LOCNAME"));
							pendAppForm.setStorageLocationId(rs.getString("MAT_TYPE")+"-"+rs.getString("STORAGE_LOCATION_NAME"));
						
							pendAppForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME"));
							pendAppForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME"));
							pendAppForm.setMaterialGroupId(rs.getString("STXT"));
							String isDMFMaterial=rs.getString("IS_DMF_MATERIAL");
							if(isDMFMaterial.equalsIgnoreCase("1"))
							{
								pendAppForm.setIsDMFMaterial("YES");
								request.setAttribute("dmfMandatory", "dmfMandatory");
								pendAppForm.setDmfGradeId(rs.getString("DMF_GRADE_DESC"));
								pendAppForm.setCosGradeNo(rs.getString("COS_GRADE_AND_NO"));
							}
							if(isDMFMaterial.equalsIgnoreCase("0")){
								pendAppForm.setIsDMFMaterial("NO");
								request.setAttribute("dmfNotMandatory", "dmfNotMandatory");
								pendAppForm.setDmfGradeId(rs.getString("DMF_GRADE_DESC"));
								pendAppForm.setCosGradeNo(rs.getString("COS_GRADE_AND_NO"));
							}
							pendAppForm.setAdditionalTest(rs.getString("ADDITIONAL_TEST"));
							
							pendAppForm.setCountryId(rs.getString("LANDX"));
							pendAppForm.setCustomerName(rs.getString("CUSTOMER_NAME"));
							pendAppForm.setToBeUsedInProducts(rs.getString("TO_BE_USED_IN_PRODUCTS"));
							String isVendorStatus=rs.getString("IS_VENDOR_SPECIFIC_MATERIAL");
							if(isVendorStatus.equalsIgnoreCase("1"))
							{
								pendAppForm.setIsVendorSpecificMaterial("YES");
								request.setAttribute("vedorMandatory", "vedorMandatory");
								pendAppForm.setMfgrName(rs.getString("MFGR_NAME"));
								pendAppForm.setSiteOfManufacture(rs.getString("SITE_OF_MANUFACTURE"));
							}
							if(isVendorStatus.equalsIgnoreCase("0"))
							{
								pendAppForm.setIsVendorSpecificMaterial("NO");
								request.setAttribute("vedorNotMandatory", "vedorNotMandatory");
							}
								pendAppForm.setMfgrName(rs.getString("MFGR_NAME"));
							pendAppForm.setSiteOfManufacture(rs.getString("SITE_OF_MANUFACTURE"));
							
							pendAppForm.setRetestDays(rs.getString("RETEST_DAYS"));
							pendAppForm.setRetestType(rs.getString("RETEST_DAYS_TYPE"));
							String dutyElement=rs.getString("DUTY_ELEMENT");
							if(dutyElement.equalsIgnoreCase("0"))
							{
								pendAppForm.setDutyElement("0-Indigenous Material with or without Cenvat");
							}
							if(dutyElement.equalsIgnoreCase("1"))
								pendAppForm.setDutyElement("1-Duty Exempted Packing Materials for Finished product");
							pendAppForm.setPackageMaterialGroup(rs.getString("PACKING_MATERIAL_GROUP_NAME"));
							pendAppForm.setTypeOfMaterial(rs.getString("Type_Of_Material"));
							String typeOfMaterial=rs.getString("Type_Of_Material");
							
							if(typeOfMaterial.equalsIgnoreCase("Printed Material"))
							{
								request.setAttribute("materialTypeMandatory", "materialTypeMandatory");
								pendAppForm.setArtworkNo(rs.getString("ARTWORK_NO"));
								String isARTWORKRevisionStatus=rs.getString("IS_ARTWORK_REVISION");
								if(isARTWORKRevisionStatus.equalsIgnoreCase("1"))
								{
									pendAppForm.setIsArtworkRevision("YES");
								}
								if(isARTWORKRevisionStatus.equalsIgnoreCase("0"))
									pendAppForm.setIsArtworkRevision("NO");
								
							}
							else
								request.setAttribute("materialTypeNotMandatory", "materialTypeNotMandatory");
							
							pendAppForm.setExistingSAPItemCode(rs.getString("EXISTING_SAP_ITEM_CODE"));
							pendAppForm.setApproximateValue(rs.getString("APPROXIMATE_VALUE"));
						
							
							ArrayList fileList = new ArrayList();
							String uploadedFiles=rs.getString("Attachements");
							pendAppForm.setUnitOfMeasId(rs.getString("LTXT"));
							pendAppForm.setValuationClass(rs.getString("VALUATION_DESC"));
							pendAppForm.setPuchaseGroupId(rs.getString("PURCHASE_GROUP_DESC"));
							if(uploadedFiles.equalsIgnoreCase(""))
							{
							}else{
							String v[] = uploadedFiles.split(",");
							int l = v.length;
							for (int i = 0; i < l; i++) 
							{
								PackageMaterialMasterForm pendAppForm2=new PackageMaterialMasterForm();
							int x=v[i].lastIndexOf("/");
							uploadedFiles=v[i].substring(x+1);		
							pendAppForm2.setFileList(uploadedFiles);
							pendAppForm2.setFilepath("jsp/EMicro Files/ESS/sapMasterRequest/PackageMaterial Files/UploadFiles/"+uploadedFiles+"");
							fileList.add(pendAppForm2);
							}
							request.setAttribute("listName", fileList);
							}
							String sapCodeno=rs.getString("SAP_CODE_NO");
							if(sapCodeno!=null)
							{
								pendAppForm.setSapCodeNo(rs.getString("SAP_CODE_NO"));
								String sapCodeExist=rs.getString("SAP_CODE_EXISTS");
								if(sapCodeExist.equalsIgnoreCase("1"))
								{
									pendAppForm.setSapCodeExists("Yes");
								}
								if(sapCodeExist.equalsIgnoreCase("0"))
									pendAppForm.setSapCodeExists("No");
								String createDate=rs.getString("SAP_CREATION_DATE");
								String a1[]=createDate.split(" ");
								createDate=a1[0];
								String b1[]=createDate.split("-");
								createDate=b1[2]+"/"+b1[1]+"/"+b1[0];
								pendAppForm.setSapCreationDate(createDate);
								pendAppForm.setSapCreatedBy(rs.getString("SAP_CREATED_BY"));
							}
						}
						
						//temp cond
						
						String getMaterial1="select tem.TEMP_CON_DESC from material_code_request as mat,TEMP_CONDITION as tem " +
								" where REQUEST_NO='"+reqId+"' and tem.TEMP_CON_ID=mat.TEMP_CONDITION ";
						
						ResultSet rs1=ad.selectQuery(getMaterial1);
						while(rs1.next())
						{
							pendAppForm.setTempCondition(rs1.getString("TEMP_CON_DESC"));
						}
						
						//STORAGE_CONDITION
						
						String getMaterial2="select stcon.LTXT from material_code_request as mat,STORAGE_CONDITION as stcon" +
								" where REQUEST_NO='"+reqId+"'  and stcon.STO_COND_CODE=mat.STORAGE_CONDITION";	
						
						ResultSet rs2=ad.selectQuery(getMaterial2);
						while(rs2.next())
						{
							pendAppForm.setStorageCondition(rs2.getString("LTXT"));
						}
						
				}
					else{	
				String getCountryDetails="select * from Country";
				LinkedList countryID=new LinkedList();
				LinkedList countryName=new LinkedList();
				ResultSet rsCountryDetails=ad.selectQuery(getCountryDetails);
				while(rsCountryDetails.next()){
					countryID.add(rsCountryDetails.getString("LAND1"));
					countryName.add(rsCountryDetails.getString("LAND1")+" - "+rsCountryDetails.getString("LANDX"));
				}
				pendAppForm.setCounID(countryID);
				pendAppForm.setCountryName(countryName);
				
				ResultSet rs11 = ad.selectQuery("select * from location");
				ArrayList locationList=new ArrayList();
				ArrayList locationLabelList=new ArrayList();
				
				while(rs11.next()) {
					locationList.add(rs11.getString("LOCID"));
					locationLabelList.add(rs11.getString("LOCATION_CODE")+" - "+rs11.getString("LOCNAME"));
				}
				pendAppForm.setLocationIdList(locationList);
				pendAppForm.setLocationLabelList(locationLabelList);
				
				
				LinkedList storageID=new LinkedList();
				LinkedList storageName=new LinkedList();
				String getStorageDetails="select * from STORAGE_LOCATION where MAT_TYPE='PM'";
				ResultSet rsStrogeLocation=ad.selectQuery(getStorageDetails);
				while(rsStrogeLocation.next()){
					storageID.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID"));
					storageName.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID")+" - "+rsStrogeLocation.getString("STORAGE_LOCATION_NAME"));
				}
				pendAppForm.setStorageID(storageID);
				pendAppForm.setStorageIDName(storageName);
				
				LinkedList materTypeIDList=new LinkedList();
				LinkedList materialTypeIdValueList=new LinkedList();
				String getMaterials="select * from MATERIAL_TYPE";
				ResultSet rsMaterial=ad.selectQuery(getMaterials);
				while(rsMaterial.next())
				{
					materTypeIDList.add(rsMaterial.getString("id"));
					materialTypeIdValueList.add(rsMaterial.getString("MATERIAL_GROUP_ID")+" - "+rsMaterial.getString("M_DESC"));
				}
				pendAppForm.setMaterTypeIDList(materTypeIDList);
				pendAppForm.setMaterialTypeIdValueList(materialTypeIdValueList);
				
				LinkedList materGroupIDList=new LinkedList();
				LinkedList materialGroupIdValueList=new LinkedList();
				
				String getMaterialGroup="select * from MATERIAL_GROUP where MATERIAL_TYPE like '%"+matType+"%' order by STXT";
				ResultSet rsMaterialGroup=ad.selectQuery(getMaterialGroup);
				while(rsMaterialGroup.next())
				{
					materGroupIDList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID"));
					materialGroupIdValueList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID")+" - "+rsMaterialGroup.getString("STXT"));
				}
				pendAppForm.setMaterGroupIDList(materGroupIDList);
				pendAppForm.setMaterialGroupIdValueList(materialGroupIdValueList);
				
				LinkedList unitOfMeasIdList=new LinkedList();
				LinkedList unitOfMeasIdValues=new LinkedList();
				
				String getunitMesurement="select * from UNIT_MESUREMENT";
				ResultSet rsUnit=ad.selectQuery(getunitMesurement);
				while(rsUnit.next())
				{
					unitOfMeasIdList.add(rsUnit.getString("UNIT_OF_MEAS_ID"));
					unitOfMeasIdValues.add(rsUnit.getString("UNIT_OF_MEAS_ID")+" - "+rsUnit.getString("LTXT"));
				}
				pendAppForm.setUnitOfMeasIdList(unitOfMeasIdList);
				pendAppForm.setUnitOfMeasIdValues(unitOfMeasIdValues);
				
				LinkedList puchaseGroupIdList=new LinkedList();
				LinkedList puchaseGroupIdValues=new LinkedList();
				
				String getPurchaseGroup="select * from PURCHASE_GROUP";
				ResultSet rsPurchaseGroup=ad.selectQuery(getPurchaseGroup);
				while(rsPurchaseGroup.next())
				{
					puchaseGroupIdList.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID"));
					puchaseGroupIdValues.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID")+" - "+rsPurchaseGroup.getString("PURCHASE_GROUP_DESC"));
				}
				pendAppForm.setPuchaseGroupIdList(puchaseGroupIdList);
				pendAppForm.setPuchaseGroupIdValues(puchaseGroupIdValues);
				
				LinkedList dmfGradeIDList=new LinkedList();
				LinkedList dmfGradeIDValueList=new LinkedList();
				
				String getDMFValues="select * from DMF_GRADE";
				ResultSet rsDMFValues=ad.selectQuery(getDMFValues);
				while(rsDMFValues.next())
				{
					dmfGradeIDList.add(rsDMFValues.getString("DMF_GRADE_ID"));
					dmfGradeIDValueList.add(rsDMFValues.getString("DMF_GRADE_ID")+" - "+rsDMFValues.getString("DMF_GRADE_DESC"));
				}
				pendAppForm.setDmfGradeIDList(dmfGradeIDList);
				pendAppForm.setDmfGradeIDValueList(dmfGradeIDValueList);
				
				LinkedList packageGroupID=new LinkedList();
				LinkedList packageGroupIDValue=new LinkedList();
				
				String getPackageGroup="select * from PACKAGE_MATERIAL_GROUP";
				ResultSet rsPackageGroup=ad.selectQuery(getPackageGroup);
				
				while(rsPackageGroup.next())
				{
					packageGroupID.add(rsPackageGroup.getString("PACKING_MATERIAL_GROUP_ID"));
					packageGroupIDValue.add(rsPackageGroup.getString("PACKING_MATERIAL_GROUP_ID")+" - "+rsPackageGroup.getString("PACKING_MATERIAL_GROUP_NAME"));
				}
				pendAppForm.setPackageGroupID(packageGroupID);
				pendAppForm.setPackageGroupIDValue(packageGroupIDValue);
				
				LinkedList valuationClassID=new LinkedList();
				LinkedList valuationClassName=new LinkedList();
				
				String getValuation="select * from VALUATION_CLASS where MAT_TYPE='PM'";
				ResultSet rsValuation=ad.selectQuery(getValuation);
				while(rsValuation.next())
				{
					valuationClassID.add(rsValuation.getString("VALUATION_ID"));
					valuationClassName.add(rsValuation.getString("VALUATION_ID")+" - "+rsValuation.getString("VALUATION_DESC"));
				}
				pendAppForm.setValuationClassID(valuationClassID);
				pendAppForm.setValuationClassName(valuationClassName);
				
				LinkedList tempIDList=new LinkedList();
				LinkedList temValueList=new LinkedList();
				String getTemp="select * from TEMP_CONDITION order by TEMP_CON_DESC";
				ResultSet rsTemp=ad.selectQuery(getTemp);
				while(rsTemp.next())
				{
					tempIDList.add(rsTemp.getString("TEMP_CON_ID"));
					temValueList.add(rsTemp.getString("TEMP_CON_ID")+" - "+rsTemp.getString("TEMP_CON_DESC"));
				}
				pendAppForm.setTempIDList(tempIDList);
				pendAppForm.setTemValueList(temValueList);
				
				LinkedList storageIDList=new LinkedList();
				LinkedList storageLocList=new LinkedList();
				String getStorageLoc="select * from STORAGE_CONDITION";
				ResultSet rsStorageLoc=ad.selectQuery(getStorageLoc);
				while(rsStorageLoc.next())
				{
					storageIDList.add(rsStorageLoc.getString("STO_COND_CODE"));
					storageLocList.add(rsStorageLoc.getString("STO_COND_CODE")+" - "+rsStorageLoc.getString("LTXT"));
				}
				pendAppForm.setStorageIDList(storageIDList);
				pendAppForm.setStorageLocList(storageLocList);
			// get material records
				
				String getMaterial="select * from material_code_request where REQUEST_NO='"+reqId+"'";
				ResultSet rs=ad.selectQuery(getMaterial);
				while(rs.next())
				{
					pendAppForm.setRequestNo(reqId);
					pendAppForm.setRequestNumber(reqId);
					String reqDate=rs.getString("REQUEST_DATE");
					String a[]=reqDate.split(" ");
					reqDate=a[0];
					String b[]=reqDate.split("-");
					reqDate=b[2]+"/"+b[1]+"/"+b[0];
					pendAppForm.setRequestDate(reqDate);
					pendAppForm.setLocationId(rs.getString("LOCATION_ID"));
					pendAppForm.setStorageLocationId(rs.getString("STORAGE_LOCATION_ID"));
				
					pendAppForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME"));
					pendAppForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME"));
					pendAppForm.setMaterialGroupId(rs.getString("MATERIAL_GROUP_ID"));
					String isDMFMaterial=rs.getString("IS_DMF_MATERIAL");
					if(isDMFMaterial.equalsIgnoreCase("1"))
					{
						pendAppForm.setIsDMFMaterial("1");
						request.setAttribute("dmfMandatory", "dmfMandatory");
						pendAppForm.setDmfGradeId(rs.getString("DMF_GRADE_ID"));
						pendAppForm.setCosGradeNo(rs.getString("COS_GRADE_AND_NO"));
					}
					if(isDMFMaterial.equalsIgnoreCase("0")){
						pendAppForm.setIsDMFMaterial("0");
						pendAppForm.setDmfGradeId(rs.getString("DMF_GRADE_ID"));
						pendAppForm.setCosGradeNo(rs.getString("COS_GRADE_AND_NO"));
						request.setAttribute("dmfNotMandatory", "dmfNotMandatory");
					}
					pendAppForm.setAdditionalTest(rs.getString("ADDITIONAL_TEST"));
					
					pendAppForm.setCountryId(rs.getString("COUNTRY_ID"));
					pendAppForm.setCustomerName(rs.getString("CUSTOMER_NAME"));
					pendAppForm.setToBeUsedInProducts(rs.getString("TO_BE_USED_IN_PRODUCTS"));
					String isVendorStatus=rs.getString("IS_VENDOR_SPECIFIC_MATERIAL");
					if(isVendorStatus.equalsIgnoreCase("1"))
					{
						pendAppForm.setIsVendorSpecificMaterial("1");
						request.setAttribute("vedorMandatory", "vedorMandatory");
						pendAppForm.setMfgrName(rs.getString("MFGR_NAME"));
						pendAppForm.setSiteOfManufacture(rs.getString("SITE_OF_MANUFACTURE"));
					}
					if(isVendorStatus.equalsIgnoreCase("0"))
					{
						pendAppForm.setIsVendorSpecificMaterial("0");
						request.setAttribute("vedorNotMandatory", "vedorNotMandatory");
					}
					pendAppForm.setMfgrName(rs.getString("MFGR_NAME"));
					pendAppForm.setSiteOfManufacture(rs.getString("SITE_OF_MANUFACTURE"));
					pendAppForm.setTempCondition(rs.getString("TEMP_CONDITION"));
					pendAppForm.setStorageCondition(rs.getString("STORAGE_CONDITION"));
					pendAppForm.setRetestDays(rs.getString("RETEST_DAYS"));
					pendAppForm.setRetestType(rs.getString("RETEST_DAYS_TYPE"));
	               pendAppForm.setDutyElement(rs.getString("DUTY_ELEMENT"));
					
					pendAppForm.setPackageMaterialGroup(rs.getString("PACKING_MATERIAL_GROUP"));
					pendAppForm.setTypeOfMaterial(rs.getString("Type_Of_Material"));
					String typeOfMaterial=rs.getString("Type_Of_Material");
					
					if(typeOfMaterial.equalsIgnoreCase("Printed Material"))
					{
						request.setAttribute("materialTypeMandatory", "materialTypeMandatory");
						pendAppForm.setArtworkNo(rs.getString("ARTWORK_NO"));
						String isARTWORKRevisionStatus=rs.getString("IS_ARTWORK_REVISION");
						if(isARTWORKRevisionStatus.equalsIgnoreCase("1"))
						{
							pendAppForm.setIsArtworkRevision("1");
						}
						if(isARTWORKRevisionStatus.equalsIgnoreCase("0"))
							pendAppForm.setIsArtworkRevision("0");
						
					}
					else
						request.setAttribute("materialTypeNotMandatory", "materialTypeNotMandatory");
					
					pendAppForm.setExistingSAPItemCode(rs.getString("EXISTING_SAP_ITEM_CODE"));
					pendAppForm.setApproximateValue(rs.getString("APPROXIMATE_VALUE"));
				
				
					ArrayList fileList = new ArrayList();
					String uploadedFiles=rs.getString("Attachements");
					pendAppForm.setUnitOfMeasId(rs.getString("UNIT_OF_MEAS_ID"));
					pendAppForm.setValuationClass(rs.getString("VALUATION_CLASS"));
					pendAppForm.setPuchaseGroupId(rs.getString("PURCHASE_GROUP_ID"));
					if(uploadedFiles.equalsIgnoreCase(""))
					{
					}else{
					String v[] = uploadedFiles.split(",");
					int l = v.length;
					for (int i = 0; i < l; i++) 
					{
						PackageMaterialMasterForm pendAppForm2=new PackageMaterialMasterForm();
					int x=v[i].lastIndexOf("/");
					uploadedFiles=v[i].substring(x+1);		
					pendAppForm2.setFileList(uploadedFiles);
					pendAppForm2.setFilepath("jsp/EMicro Files/ESS/sapMasterRequest/PackageMaterial Files/UploadFiles/"+uploadedFiles+"");
					fileList.add(pendAppForm2);
					}
					
					
					request.setAttribute("listName", fileList);
					}
					
					String sapCodeno=rs.getString("SAP_CODE_NO");
					if(sapCodeno!=null)
					{
						pendAppForm.setSapCodeNo(rs.getString("SAP_CODE_NO"));
						String sapCodeExist=rs.getString("SAP_CODE_EXISTS");
						pendAppForm.setSapCodeNo(sapCodeno);
						if(sapCodeExist.equalsIgnoreCase("1"))
						{
							pendAppForm.setSapCodeExists("On");
						}
						if(sapCodeExist.equalsIgnoreCase("0"))
							pendAppForm.setSapCodeExistsNo("On");
						
						String createDate=rs.getString("SAP_CREATION_DATE");
						String a1[]=createDate.split(" ");
						createDate=a1[0];
						String b1[]=createDate.split("-");
						createDate=b1[2]+"/"+b1[1]+"/"+b1[0];
						pendAppForm.setSapCreationDate(createDate);
						pendAppForm.setSapCreatedBy(rs.getString("SAP_CREATED_BY"));
					}
				
					
					
				
				}
					}
				if(filterBy.equalsIgnoreCase("Pending")){
					request.setAttribute("approveButton", "approveButton");
					request.setAttribute("rejectButton", "rejectButton");
				}
				
				
				
				
				
				//set ApproverDetails 
				checkStatus=0;int appStatus=0;
				LinkedList listApprers=new LinkedList();
				String getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
				"where mast.Location='"+location+"' AND  mast.Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mast.Approver_Id=emp.PERNR order by Priority";
				ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
				while(rsApprDetails.next())
				{
					checkStatus=1;
					ApprovalsForm apprvers=new ApprovalsForm();
					apprvers.setPriority(rsApprDetails.getString("Priority"));
					apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
					String empCode=rsApprDetails.getString("Approver_Id");
					String approveStatus="";
					String recordStatus="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
					"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
					"mast.Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
					"or mast.Role='Creator') and mast.Approver_Id=emp.PERNR  group by mast.Priority,mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status," +
					"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
					ResultSet rsAppInfo=ad.selectQuery(recordStatus);
					while(rsAppInfo.next())
					{
						
						apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
						approveStatus=rsAppInfo.getString("Req_Status");
						if(approveStatus.equalsIgnoreCase(""))
						{
							apprvers.setApproveStatus("In Process");
						}
						if(approveStatus.equalsIgnoreCase("Approved")|| approveStatus.equalsIgnoreCase("Completed"))
						{
						apprvers.setDate(rsAppInfo.getString("approved_date"));
						}else{
							apprvers.setDate(rsAppInfo.getString("rejected_date"));
							appStatus=1;
						}
						String comments=rsAppInfo.getString("Comments");
						if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
						{
							apprvers.setComments("");
						}else{
							apprvers.setComments(rsAppInfo.getString("Comments"));
						}
						
						
					}
					if(approveStatus.equalsIgnoreCase("") && appStatus==0)
					{
						apprvers.setApproveStatus("In Process");
					}
					apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
					listApprers.add(apprvers);
				}
				if(checkStatus==0)
				{
					getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
					"where mast.Location='"+location+"' AND  mast.Material_Type='"+matType+"' AND Material_Group='' and mast.Approver_Id=emp.PERNR order by Priority";
					rsApprDetails=ad.selectQuery(getApprDetails);
					while(rsApprDetails.next())
					{
						checkStatus=1;
						ApprovalsForm apprvers=new ApprovalsForm();
						apprvers.setPriority(rsApprDetails.getString("Priority"));
						apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
						String empCode=rsApprDetails.getString("Approver_Id");
						String approveStatus="";
						String recordStatus="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
						"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
						"mast.Material_Type='"+matType+"' AND Material_Group='' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
						"or mast.Role='Creator') and mast.Approver_Id=emp.PERNR  group by mast.Priority,mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status," +
						"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
						ResultSet rsAppInfo=ad.selectQuery(recordStatus);
						while(rsAppInfo.next())
						{
							apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
							approveStatus=rsAppInfo.getString("Req_Status");
							
							if(approveStatus.equalsIgnoreCase("Approved")|| approveStatus.equalsIgnoreCase("Completed"))
							{
							String approveDate=	rsAppInfo.getString("approved_date");
							
							String a[]=approveDate.split(" ");
							approveDate=a[0];
							String b[]=approveDate.split("-");
							approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
							
							apprvers.setDate(approveDate);
							}else{
								String rejectDate=	rsAppInfo.getString("rejected_date");
								appStatus=1;
								String a[]=rejectDate.split(" ");
								rejectDate=a[0];
								String b[]=rejectDate.split("-");
								rejectDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
								apprvers.setDate(rejectDate);
							}
							String comments=rsAppInfo.getString("Comments");
							if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
							{
								apprvers.setComments("");
							}else{
								apprvers.setComments(rsAppInfo.getString("Comments"));
							}
						}
						if(approveStatus.equalsIgnoreCase("") && appStatus==0)
						{
							apprvers.setApproveStatus("In Process");
						}
						apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
						listApprers.add(apprvers);
				}
				}
				request.setAttribute("approverDetails", listApprers);
				
				if(userRole.equalsIgnoreCase("User"))
				{
				return mapping.findForward("VERPDetails");
				}
				if(userRole.equalsIgnoreCase("Accounts"))
				{
				return mapping.findForward("VERP_Account");
				}
				if(userRole.equalsIgnoreCase("Creator"))
				{
					Date dNow = new Date( );
					 SimpleDateFormat ft = new SimpleDateFormat ("dd/MM/yyyy");
						String dateNow = ft.format(dNow);
						pendAppForm.setSapCreationDate(dateNow);
					pendAppForm.setSapCreatedBy(user.getEmployeeNo()+"-"+user.getFullName());
					
				return mapping.findForward("VERP_Creator");
				}
				
					
				}
				
				if(matType.equalsIgnoreCase("BULK")){
					if(filterBy.equalsIgnoreCase("Pending")){
						request.setAttribute("approveButton", "approveButton");
						request.setAttribute("rejectButton", "rejectButton");
					}
					if(userRole.equalsIgnoreCase("User"))
					{
						
						String getSemiFinished="select mat.REQUEST_NO,mat.Type,loc.LOCATION_CODE,loc.LOCATION_CODE,stLoc.MAT_TYPE,mat.MATERIAL_GROUP_ID,mat.REQUEST_DATE,loc.LOCNAME,stLoc.STORAGE_LOCATION_NAME,mat.MATERIAL_SHORT_NAME," +
		 				"mat.MATERIAL_LONG_NAME,matGroup.STXT,uom.LTXT,pac.PACK_SIZE_DESC,mat.CUSTOMER_NAME,mat.SHELF_LIFE," +
		 				"mat.SHELF_LIFE_TYPE,mat.RETEST_DAYS,mat.RETEST_DAYS_TYPE,mat.STANDARD_BATCH_SIZE,mat.BATCH_CODE ,mat.TARGET_WEIGHT," +
		 				"wei.W_UOM_DESC,val.VALUATION_DESC,SAP_CODE_NO,SAP_CODE_EXISTS,SAP_CREATION_DATE,SAP_CREATED_BY from material_code_request as mat,Location as loc,STORAGE_LOCATION as " +
		 				"stLoc,MATERIAL_GROUP as matGroup ,UNIT_MESUREMENT AS uom,PACK_SIZE as pac,WEIGHT_UOM as wei,VALUATION_CLASS" +
		 				" as val where REQUEST_NO='"+reqId+"' and loc.LOCID=mat.LOCATION_ID and stLoc.STORAGE_LOCATION_ID=mat.STORAGE_LOCATION_ID " +
		 				"and matGroup.MATERIAL_GROUP_ID=mat.MATERIAL_GROUP_ID and uom.UNIT_OF_MEAS_ID=mat.UNIT_OF_MEAS_ID	" +
		 				"and pac.PACK_SIZE_CODE=mat.PACK_SIZE and wei.W_UOM_CODE=mat.WEIGHT_UOM " +
		 				"and val.VALUATION_ID=mat.VALUATION_CLASS";
						ResultSet rs=ad.selectQuery(getSemiFinished);
						if(rs.next())
						{

							pendAppForm.setRequestNo(reqId);
							pendAppForm.setRequestNumber(reqId);
							pendAppForm.setReqMaterialGroup(rs.getString("MATERIAL_GROUP_ID"));
							String reqDate=rs.getString("REQUEST_DATE");
							String a[]=reqDate.split(" ");
							reqDate=a[0];
							String b[]=reqDate.split("-");
							reqDate=b[2]+"/"+b[1]+"/"+b[0];
							pendAppForm.setRequestDate(reqDate);
							pendAppForm.setLocationId(rs.getString("LOCATION_CODE")+"-"+rs.getString("LOCNAME"));
							pendAppForm.setStorageLocationId(rs.getString("MAT_TYPE")+"-"+rs.getString("STORAGE_LOCATION_NAME"));
							pendAppForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME"));
							pendAppForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME"));
							pendAppForm.setMaterialGroupId(rs.getString("STXT"));
							
							pendAppForm.setUnitOfMeasId(rs.getString("LTXT"));
							pendAppForm.setPackSize(rs.getString("PACK_SIZE_DESC"));
							pendAppForm.setCustomerName(rs.getString("CUSTOMER_NAME"));
							pendAppForm.setShelfLife(rs.getString("SHELF_LIFE"));
							pendAppForm.setShelfType(rs.getString("SHELF_LIFE_TYPE"));
							pendAppForm.setStandardBatchSize(rs.getString("STANDARD_BATCH_SIZE"));
							pendAppForm.setBatchCode(rs.getString("BATCH_CODE"));
					 		pendAppForm.setTargetWeight(rs.getString("TARGET_WEIGHT"));
					 		
					 		
					 		pendAppForm.setWeightUOM(rs.getString("W_UOM_DESC"));
					 		pendAppForm.setRetestDays(rs.getString("RETEST_DAYS"));
					 		pendAppForm.setRetestType(rs.getString("RETEST_DAYS_TYPE"));
					 		pendAppForm.setValuationClass(rs.getString("VALUATION_DESC"));
					 		
					 		
					 		request.setAttribute("semidetails", pendAppForm);
						}
						//country
						String editRecord1="select cou.LANDX from material_code_request as m ,Country as cou " +
								"where REQUEST_NO='"+reqId+"'and cou.LAND1=m.COUNTRY_ID ";
			 		
			 		
					ResultSet rs1=ad.selectQuery(editRecord1);
					if(rs1.next())
					{
						pendAppForm.setCountryId(rs1.getString("LANDX"));
						
					}
					}else{
						//creator semifinished
						
						String getCountryDetails="select * from Country";
						LinkedList countryID=new LinkedList();
						LinkedList countryName=new LinkedList();
						ResultSet rsCountryDetails=ad.selectQuery(getCountryDetails);
						while(rsCountryDetails.next()){
							countryID.add(rsCountryDetails.getString("LAND1"));
							countryName.add(rsCountryDetails.getString("LAND1")+" - "+rsCountryDetails.getString("LANDX"));
						}
						pendAppForm.setCounID(countryID);
						pendAppForm.setCountryName(countryName);
						
						LinkedList weightUOMID=new LinkedList();
						LinkedList weightUOMName=new LinkedList();
						String getweightUOM="select * from WEIGHT_UOM";
						ResultSet rsweightUOM=ad.selectQuery(getweightUOM);
						while(rsweightUOM.next())
						{
							weightUOMID.add(rsweightUOM.getString("W_UOM_CODE"));
							weightUOMName.add(rsweightUOM.getString("W_UOM_CODE")+" - "+rsweightUOM.getString("W_UOM_DESC"));
						}
						pendAppForm.setWeightUOMID(weightUOMID);
						pendAppForm.setWeightUOMName(weightUOMName);
						
						LinkedList packSizeID=new LinkedList();
						LinkedList packSizeName=new LinkedList();
						String getPackSize="select * from PACK_SIZE";
						ResultSet rsPackSize=ad.selectQuery(getPackSize);
						while(rsPackSize.next())
						{
							packSizeID.add(rsPackSize.getString("PACK_SIZE_CODE"));
							packSizeName.add(rsPackSize.getString("PACK_SIZE_DESC"));
						}
						pendAppForm.setPackSizeID(packSizeID);
						pendAppForm.setPackSizeName(packSizeName);
					
						LinkedList materTypeIDList=new LinkedList();
						LinkedList materialTypeIdValueList=new LinkedList();
						
						
						String getMaterials="select * from MATERIAL_TYPE ";
						ResultSet rsMaterial=ad.selectQuery(getMaterials);
						while(rsMaterial.next())
						{
							materTypeIDList.add(rsMaterial.getString("id"));
							materialTypeIdValueList.add(rsMaterial.getString("MATERIAL_GROUP_ID")+" - "+rsMaterial.getString("M_DESC"));
						}
						pendAppForm.setMaterTypeIDList(materTypeIDList);
						pendAppForm.setMaterialTypeIdValueList(materialTypeIdValueList);
						
						
						
						
						ResultSet rs11 = ad.selectQuery("select * from location");
						ArrayList locationList=new ArrayList();
						ArrayList locationLabelList=new ArrayList();
						
						while(rs11.next()) {
							locationList.add(rs11.getString("LOCID"));
							locationLabelList.add(rs11.getString("LOCATION_CODE")+" - "+rs11.getString("LOCNAME"));
						}
						pendAppForm.setLocationIdList(locationList);
						pendAppForm.setLocationLabelList(locationLabelList);
						LinkedList storageID=new LinkedList();
						LinkedList storageName=new LinkedList();
						String getStorageDetails="select * from STORAGE_LOCATION where  MAT_TYPE='BULK'";
						ResultSet rsStrogeLocation=ad.selectQuery(getStorageDetails);
						while(rsStrogeLocation.next()){
							storageID.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID"));
							storageName.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID")+" - "+rsStrogeLocation.getString("STORAGE_LOCATION_NAME"));
						}
						pendAppForm.setStorageID(storageID);
						pendAppForm.setStorageIDName(storageName);
						LinkedList materGroupIDList=new LinkedList();
						LinkedList materialGroupIdValueList=new LinkedList();
						
						String getMaterialGroup="select * from MATERIAL_GROUP where MATERIAL_TYPE like '%"+matType+"%' order by STXT";
						ResultSet rsMaterialGroup=ad.selectQuery(getMaterialGroup);
						while(rsMaterialGroup.next())
						{
							materGroupIDList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID"));
							materialGroupIdValueList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID")+" - "+rsMaterialGroup.getString("STXT"));
						}
						pendAppForm.setMaterGroupIDList(materGroupIDList);
						pendAppForm.setMaterialGroupIdValueList(materialGroupIdValueList);
						
						
						LinkedList unitOfMeasIdList=new LinkedList();
						LinkedList unitOfMeasIdValues=new LinkedList();
						
						String getunitMesurement="select * from UNIT_MESUREMENT";
						ResultSet rsUnit=ad.selectQuery(getunitMesurement);
						while(rsUnit.next())
						{
							unitOfMeasIdList.add(rsUnit.getString("UNIT_OF_MEAS_ID"));
							unitOfMeasIdValues.add(rsUnit.getString("UNIT_OF_MEAS_ID")+" - "+rsUnit.getString("LTXT"));
						}
						pendAppForm.setUnitOfMeasIdList(unitOfMeasIdList);
						pendAppForm.setUnitOfMeasIdValues(unitOfMeasIdValues);
						
						LinkedList valuationClassID=new LinkedList();
						LinkedList valuationClassName=new LinkedList();
						String getValuation="select * from VALUATION_CLASS where MAT_TYPE='BULK'";
						ResultSet rsValuation=ad.selectQuery(getValuation);
						while(rsValuation.next())
						{
							valuationClassID.add(rsValuation.getString("VALUATION_ID"));
							valuationClassName.add(rsValuation.getString("VALUATION_ID")+" - "+rsValuation.getString("VALUATION_DESC"));
						}
						pendAppForm.setValuationClassID(valuationClassID);
						pendAppForm.setValuationClassName(valuationClassName);
						String getSemiFinished="select * from material_code_request where REQUEST_NO='"+reqId+"'";
						ResultSet rs=ad.selectQuery(getSemiFinished);
						while(rs.next())
						{

							pendAppForm.setRequestNo(reqId);
							pendAppForm.setRequestNumber(reqId);
							String reqDate=rs.getString("REQUEST_DATE");
							String a[]=reqDate.split(" ");
							reqDate=a[0];
							String b[]=reqDate.split("-");
							reqDate=b[2]+"/"+b[1]+"/"+b[0];
							pendAppForm.setRequestDate(reqDate);
							
							pendAppForm.setLocationId(rs.getString("LOCATION_ID"));
							pendAppForm.setMaterialTypeId(rs.getString("MATERIAL_TYPE_ID"));
							pendAppForm.setStorageLocationId(rs.getString("STORAGE_LOCATION_ID"));
							pendAppForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME"));
							pendAppForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME"));
							pendAppForm.setMaterialGroupId(rs.getString("MATERIAL_GROUP_ID"));
							
							pendAppForm.setUnitOfMeasId(rs.getString("UNIT_OF_MEAS_ID"));
					 		pendAppForm.setPackSize(rs.getString("PACK_SIZE"));
					 		pendAppForm.setCountryId(rs.getString("COUNTRY_ID"));
					 		pendAppForm.setCustomerName(rs.getString("CUSTOMER_NAME"));
					 		pendAppForm.setShelfLife(rs.getString("SHELF_LIFE"));
					 		pendAppForm.setShelfType(rs.getString("SHELF_LIFE_TYPE"));
					 		pendAppForm.setStandardBatchSize(rs.getString("STANDARD_BATCH_SIZE"));
					 		pendAppForm.setBatchCode(rs.getString("BATCH_CODE"));
					 		pendAppForm.setTargetWeight(rs.getString("TARGET_WEIGHT"));
					 		pendAppForm.setProdInspMemo(rs.getString("PROD_INSP_MEMO"));
					 		
					 		pendAppForm.setWeightUOM(rs.getString("WEIGHT_UOM"));
					 		pendAppForm.setRetestDays(rs.getString("RETEST_DAYS"));
					 		pendAppForm.setValuationClass(rs.getString("VALUATION_CLASS"));
					 		
					 		String sapCodeno=rs.getString("SAP_CODE_NO");
							if(sapCodeno!=null)
							{
								pendAppForm.setSapCodeNo(rs.getString("SAP_CODE_NO"));
								String sapCodeExist=rs.getString("SAP_CODE_EXISTS");
								if(sapCodeExist.equalsIgnoreCase("1"))
								{
									pendAppForm.setSapCodeExists("On");
								}
								if(sapCodeExist.equalsIgnoreCase("0"))
									pendAppForm.setSapCodeExistsNo("On");
							
								String createDate=rs.getString("SAP_CREATION_DATE");
								String a1[]=createDate.split(" ");
								createDate=a1[0];
								String b1[]=createDate.split("-");
								createDate=b1[2]+"/"+b1[1]+"/"+b1[0];
								pendAppForm.setSapCreationDate(createDate);
								pendAppForm.setSapCreatedBy(rs.getString("SAP_CREATED_BY"));
							}
						
						}
						
					}
				
					if(filterBy.equalsIgnoreCase("Pending")){
						request.setAttribute("approveButton", "approveButton");
						request.setAttribute("rejectButton", "rejectButton");
					}
					
					//set ApproverDetails 
					checkStatus=0;int appStatus=0;
					LinkedList listApprers=new LinkedList();
					String getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
					"where mast.Location='"+location+"' AND  mast.Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mast.Approver_Id=emp.PERNR order by Priority";
					ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
					while(rsApprDetails.next())
					{
						checkStatus=1;
						ApprovalsForm apprvers=new ApprovalsForm();
						apprvers.setPriority(rsApprDetails.getString("Priority"));
						apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
						String empCode=rsApprDetails.getString("Approver_Id");
						String approveStatus="";
						String recordStatus="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
						"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
						"mast.Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
						"or mast.Role='Creator') and mast.Approver_Id=emp.PERNR  group by mast.Priority,mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status," +
						"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
						ResultSet rsAppInfo=ad.selectQuery(recordStatus);
						while(rsAppInfo.next())
						{
							
							apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
							approveStatus=rsAppInfo.getString("Req_Status");
							if(approveStatus.equalsIgnoreCase(""))
							{
								apprvers.setApproveStatus("In Process");
							}
							if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
							{
							apprvers.setDate(rsAppInfo.getString("approved_date"));
							}else{
								apprvers.setDate(rsAppInfo.getString("rejected_date"));
								appStatus=1;
							}
							String comments=rsAppInfo.getString("Comments");
							if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
							{
								apprvers.setComments("");
							}else{
								apprvers.setComments(rsAppInfo.getString("Comments"));
							}
							
							
						}
						if(approveStatus.equalsIgnoreCase("") && appStatus==0)
						{
							apprvers.setApproveStatus("In Process");
						}
						apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
						listApprers.add(apprvers);
					}
					if(checkStatus==0)
					{
						getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
						"where mast.Location='"+location+"' AND  mast.Material_Type='"+matType+"' AND Material_Group='' and mast.Approver_Id=emp.PERNR order by Priority";
						rsApprDetails=ad.selectQuery(getApprDetails);
						while(rsApprDetails.next())
						{
							checkStatus=1;
							ApprovalsForm apprvers=new ApprovalsForm();
							apprvers.setPriority(rsApprDetails.getString("Priority"));
							apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
							String empCode=rsApprDetails.getString("Approver_Id");
							String approveStatus="";
							String recordStatus="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
							"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
							"mast.Material_Type='"+matType+"' AND Material_Group='' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
							"or mast.Role='Creator') and mast.Approver_Id=emp.PERNR  group by mast.Priority,mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status," +
							"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
							ResultSet rsAppInfo=ad.selectQuery(recordStatus);
							while(rsAppInfo.next())
							{
								apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
								approveStatus=rsAppInfo.getString("Req_Status");
								
								if(approveStatus.equalsIgnoreCase("Approved")|| approveStatus.equalsIgnoreCase("Completed"))
								{
								String approveDate=	rsAppInfo.getString("approved_date");
								
								String a[]=approveDate.split(" ");
								approveDate=a[0];
								String b[]=approveDate.split("-");
								approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
								
								apprvers.setDate(approveDate);
								}else{
									String rejectDate=	rsAppInfo.getString("rejected_date");
									appStatus=1;
									String a[]=rejectDate.split(" ");
									rejectDate=a[0];
									String b[]=rejectDate.split("-");
									rejectDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
									apprvers.setDate(rejectDate);
								}
								String comments=rsAppInfo.getString("Comments");
								if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
								{
									apprvers.setComments("");
								}else{
									apprvers.setComments(rsAppInfo.getString("Comments"));
								}
							}
							if(approveStatus.equalsIgnoreCase("") && appStatus==0)
							{
								apprvers.setApproveStatus("In Process");
							}
							apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
							listApprers.add(apprvers);
					}
					}
					request.setAttribute("approverDetails", listApprers);
					if(userRole.equalsIgnoreCase("User"))
					{
					return mapping.findForward("HALBDetails");
					}
					if(userRole.equalsIgnoreCase("Accounts"))
					{
					return mapping.findForward("HALB_Account");
					}
					if(userRole.equalsIgnoreCase("Creator"))
					{
						Date dNow = new Date( );
						 SimpleDateFormat ft = new SimpleDateFormat ("dd/MM/yyyy");
							String dateNow = ft.format(dNow);
							pendAppForm.setSapCreationDate(dateNow);
						pendAppForm.setSapCreatedBy(user.getEmployeeNo()+"-"+user.getFullName());
						
					return mapping.findForward("HALB_Creator");
					}
				}
				if(matType.equalsIgnoreCase("FG") || matType.equalsIgnoreCase("HAWA") ){

					LinkedList finDetails=new LinkedList();
					if(userRole.equalsIgnoreCase("User"))
					{
						String getFinishedProduct="select mat.REQUEST_NO,mat.Type,loc.LOCATION_CODE,mat.MATERIAL_GROUP_ID,mat.REQUEST_DATE,loc.LOCNAME,mat.MANUFACTURED_AT," +
				 	  "mat.MATERIAL_SHORT_NAME, mat.MATERIAL_LONG_NAME,matGroup.STXT,uom.LTXT,mat.DOMESTIC_OR_EXPORTS,cou.LANDX,mat.CUSTOMER_NAME," +
				 	  "mat.SALEABLE_OR_SAMPLE,mat.SALES_PACK_ID,pac.P_TYPE_DESC,sal.S_UOM_DESC,div.DIV_DESC,the.THER_SEG_DESC,bran.BRAND_DESC, " +
				 	  "st.STRENGTH_DESC,gen.GEN_NAME_DESC,mat.GROSS_WEIGHT,mat.NET_WEIGHT,mat.DIMENSION," +
				 	  "mat.Material_Pricing,mat.SHELF_LIFE,mat.SHELF_LIFE_TYPE,mat.STANDARD_BATCH_SIZE,mat.BATCH_CODE ," +
				 	  "SAP_CODE_NO,SAP_CODE_EXISTS,SAP_CREATION_DATE,SAP_CREATED_BY from material_code_request as mat,Location as loc,MATERIAL_GROUP as matGroup ," +
				 	  "UNIT_MESUREMENT AS uom,Country as cou,PACK_TYPE as pac,SALES_UOM as sal,DIVISION as div,THERAPEUTIC_SEGMENT as the,BRAND as bran," +
				 	  "STRENGTH as st,GENERIC_NAME as gen " +
				 	  "where REQUEST_NO='"+reqId+"' and loc.LOCID=mat.LOCATION_ID  and " +
				 	  "cou.LAND1=mat.COUNTRY_ID and pac.P_TYPE_CODE=mat.PACK_TYPE_ID and sal.S_UOM_CODE=mat.SALES_UNIT_OF_MEAS_ID and " +
				 	  "uom.UNIT_OF_MEAS_ID=mat.UNIT_OF_MEAS_ID and matGroup.MATERIAL_GROUP_ID=mat.MATERIAL_GROUP_ID and div.DIV_CODE=mat.DIVISION_ID " +
				 	  "and the.THER_SEG_CODE=mat.THERAPEUTIC_SEGMENT_ID and bran.BRAND_CODE=mat.BRAND_ID and st.STRENGTH_CODE=mat.STRENGTH_ID" +
				 	  " and gen.GEN_NAME_CODE=mat.GENERIC_NAME    ";
						ResultSet rs=ad.selectQuery(getFinishedProduct);
						if(rs.next())
						{
							pendAppForm.setRequestNo(reqId);
							pendAppForm.setRequestNumber(reqId);
							pendAppForm.setReqMaterialGroup(rs.getString("MATERIAL_GROUP_ID"));
							matType=rs.getString("Type");
							matGroup=rs.getString("MATERIAL_GROUP_ID");
							location=rs.getString("LOCATION_CODE");
							String reqDate=rs.getString("REQUEST_DATE");
							String a[]=reqDate.split(" ");
							reqDate=a[0];
							String b[]=reqDate.split("-");
							reqDate=b[2]+"/"+b[1]+"/"+b[0];
							pendAppForm.setRequestDate(reqDate);
							pendAppForm.setLocationId(rs.getString("LOCATION_CODE")+"-"+rs.getString("LOCNAME"));
							
							
							String manufacturedAt=rs.getString("MANUFACTURED_AT");
							
							if(manufacturedAt.equalsIgnoreCase("Third Party"))
							{
								request.setAttribute("standardBathcNotMandatory", "standardBathcNotMandatory");
								request.setAttribute("manufactureMandatory", "manufactureMandatory");
							}
							else{
								request.setAttribute("standardBathcMandatory", "standardBathcMandatory");
								request.setAttribute("manufactureNotMandatory", "manufactureNotMandatory");
							}
							
							pendAppForm.setManufacturedAt(manufacturedAt);
						
							pendAppForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME"));
							pendAppForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME"));
							pendAppForm.setMaterialGroupId(rs.getString("STXT"));
							
							pendAppForm.setCountryId(rs.getString("LANDX"));
							pendAppForm.setCustomerName(rs.getString("CUSTOMER_NAME"));
							pendAppForm.setShelfLife(rs.getString("SHELF_LIFE"));
							pendAppForm.setShelfType(rs.getString("SHELF_LIFE_TYPE"));
							pendAppForm.setStandardBatchSize(rs.getString("STANDARD_BATCH_SIZE"));
							pendAppForm.setBatchCode(rs.getString("BATCH_CODE"));
							String salorsam=rs.getString("SALEABLE_OR_SAMPLE");
							if(salorsam.equalsIgnoreCase("1")){
								pendAppForm.setSaleableOrSample("Saleable");
								}
								if(salorsam.equalsIgnoreCase("2")){
									pendAppForm.setSaleableOrSample("Sample");
									}
							String domorexp=rs.getString("DOMESTIC_OR_EXPORTS");
							if(domorexp.equalsIgnoreCase("D")){
							pendAppForm.setDomesticOrExports("DOMESTIC");
							}
							if(domorexp.equalsIgnoreCase("E")){
								pendAppForm.setDomesticOrExports("EXPORTS");
								}
							if(domorexp.equalsIgnoreCase("V")){
								pendAppForm.setDomesticOrExports("Validation");
								}
							String salesPackId=rs.getString("SALES_PACK_ID");
							pendAppForm.setSalesPackId(rs.getString("SALES_PACK_ID"));
							pendAppForm.setPackTypeId(rs.getString("P_TYPE_DESC"));
							pendAppForm.setSalesUnitOfMeaseurement(rs.getString("S_UOM_DESC"));
							pendAppForm.setDivisionId(rs.getString("DIV_DESC"));
							pendAppForm.setTherapeuticSegmentID(rs.getString("THER_SEG_DESC"));
							pendAppForm.setBrandID(rs.getString("BRAND_DESC"));
							pendAppForm.setSrengthId(rs.getString("STRENGTH_DESC"));
							pendAppForm.setGenericName(rs.getString("GEN_NAME_DESC"));
							
							
							String matpri=rs.getString("Material_Pricing");
							if(matpri.equalsIgnoreCase("1")){
								pendAppForm.setMaterialPricing("Normal");
								}
							if(matpri.equalsIgnoreCase("2")){
								pendAppForm.setMaterialPricing("Spare parts");
								}
							if(matpri.equalsIgnoreCase("11")){
								pendAppForm.setMaterialPricing("Scheduled(Controled)");
								}
							if(matpri.equalsIgnoreCase("12")){
								pendAppForm.setMaterialPricing("Un-Scheduled(De-Con)");
								}
							if(matpri.equalsIgnoreCase("13")){
								pendAppForm.setMaterialPricing("PS / Promo (Micro)");
								}
							if(matpri.equalsIgnoreCase("14")){
								pendAppForm.setMaterialPricing("No MRP ED Extra(Mic)");
								}
							if(matpri.equalsIgnoreCase("15")){
								pendAppForm.setMaterialPricing("No MRP ED Incl (Mic)");
								}
							if(matpri.equalsIgnoreCase("16")){
								pendAppForm.setMaterialPricing("Scrap IT Extra (Mic)");
								}
							if(matpri.equalsIgnoreCase("17")){
								pendAppForm.setMaterialPricing("MRP(Con)-ED Exe(Mic)");
								}
							if(matpri.equalsIgnoreCase("18")){
								pendAppForm.setMaterialPricing("MRP(DeC)-ED Exe(Mic)");
								}
							if(matpri.equalsIgnoreCase("19")){
								pendAppForm.setMaterialPricing("No MRP-ED Exe(Mic)");
								}
							if(matpri.equalsIgnoreCase("20")){
								pendAppForm.setMaterialPricing("Food Prod(MRP)-Micro)");
								}
							if(matpri.equalsIgnoreCase("21")){
								pendAppForm.setMaterialPricing("Vet Prod (MRP)-Micr");
								}
							if(matpri.equalsIgnoreCase("22")){
								pendAppForm.setMaterialPricing("Generic Price Grp-Mi");
								}
							if(matpri.equalsIgnoreCase("23")){
								pendAppForm.setMaterialPricing("MRP(Vet)-ED Exe(Mic)");
								}
							if(matpri.equalsIgnoreCase("24")){
								pendAppForm.setMaterialPricing("P-to-P ED Extra(Mic)");
								}
							if(matpri.equalsIgnoreCase("25")){
								pendAppForm.setMaterialPricing("Cosm Prod(MRP)-Micro");
								}
							if(matpri.equalsIgnoreCase("26")){
								pendAppForm.setMaterialPricing("Scrap - ED Exe(Mic))");
								}
							if(matpri.equalsIgnoreCase("27")){
								pendAppForm.setMaterialPricing("Import Items PG");
								}
						
							pendAppForm.setGrossWeight(rs.getString("GROSS_WEIGHT"));
							pendAppForm.setNetWeight(rs.getString("NET_WEIGHT"));
							
							pendAppForm.setDimension(rs.getString("DIMENSION"));
							pendAppForm.setUnitOfMeasId(rs.getString("LTXT"));
						
							String sapCodeno=rs.getString("SAP_CODE_NO");
							if(sapCodeno!=null)
							{
								pendAppForm.setSapCodeNo(rs.getString("SAP_CODE_NO"));
								String sapCodeExist=rs.getString("SAP_CODE_EXISTS");
								if(sapCodeExist.equalsIgnoreCase("1"))
								{
									pendAppForm.setSapCodeExists("Yes");
								}
								if(sapCodeExist.equalsIgnoreCase("0"))
									pendAppForm.setSapCodeExists("No");
								String createDate=rs.getString("SAP_CREATION_DATE");
								String a1[]=createDate.split(" ");
								createDate=a1[0];
								String b1[]=createDate.split("-");
								createDate=b1[2]+"/"+b1[1]+"/"+b1[0];
								pendAppForm.setSapCreationDate(createDate);
								pendAppForm.setSapCreatedBy(rs.getString("SAP_CREATED_BY"));
							}
							}
						
						pendAppForm.setStorageLocationId("");
						pendAppForm.setWeightUOM("");
						pendAppForm.setValuationClass("");
							
				//storage location	
				String getStorageLoc="select s.STORAGE_LOCATION_ID,s.STORAGE_LOCATION_NAME from material_code_request m,STORAGE_LOCATION s where "
						+ "REQUEST_NO='"+reqId+"' and m.STORAGE_LOCATION_ID=s.STORAGE_LOCATION_ID";
				ResultSet rsStLoc=ad.selectQuery(getStorageLoc);
				if(rsStLoc.next()){
					pendAppForm.setStorageLocationId(rsStLoc.getString("STORAGE_LOCATION_ID")+"-"+rsStLoc.getString("STORAGE_LOCATION_NAME"));
				}
				//weight wom
				String getweight="select w.W_UOM_CODE,w.W_UOM_DESC from material_code_request m,WEIGHT_UOM w where REQUEST_NO='"+reqId+"' "
						+ "and m.WEIGHT_UOM=w.W_UOM_CODE";
				ResultSet rsWt=ad.selectQuery(getweight);
				if(rsWt.next()){
					pendAppForm.setWeightUOM(rsWt.getString("W_UOM_CODE")+"-"+rsWt.getString("W_UOM_DESC"));
				}
				String getValuation="select v.VALUATION_DESC from material_code_request m,VALUATION_CLASS v where REQUEST_NO='"+reqId+"' "
						+ "and m.VALUATION_CLASS=v.VALUATION_ID";
				ResultSet rsValu=ad.selectQuery(getValuation);
				if(rsValu.next()){
					pendAppForm.setValuationClass(rsValu.getString("VALUATION_DESC"));
				}
							//purchasegrp
				String getFinishedProduct1="select pur.PURCHASE_GROUP_DESC from material_code_request as mat,PURCHASE_GROUP as pur" +
				" where REQUEST_NO='"+reqId+"' and pur.PURCHASE_GROUP_ID=mat.PURCHASE_GROUP_ID";
				ResultSet rs1=ad.selectQuery(getFinishedProduct1);
				if(rs1.next())
				{
					pendAppForm.setPuchaseGroupId(rs1.getString("PURCHASE_GROUP_DESC"));
				}
					//tax type
					String editRecord11="select tax.T_CLASS_NAME from material_code_request as m,TAX_CLASS as tax" +
							" where REQUEST_NO='"+reqId+"'and  tax.T_CLASS_ID=m.Tax_Classification";
		 		
		 		
		 		ResultSet rsEditRecord11=ad.selectQuery(editRecord11);
				if(rsEditRecord11.next())
				{
					pendAppForm.setTaxClassification(rsEditRecord11.getString("T_CLASS_NAME"));
					
				}
				
						
				}
					else{
						
						pendAppForm.setMatType(matType);
						LinkedList packTypeID=new LinkedList();
						LinkedList packTypeName=new LinkedList();
						
						String getPackType="select * from PACK_TYPE";
						ResultSet rsPackType=ad.selectQuery(getPackType);
						while(rsPackType.next())
						{
							packTypeID.add(rsPackType.getString("P_TYPE_CODE"));
							packTypeName.add(rsPackType.getString("P_TYPE_CODE")+" - "+rsPackType.getString("P_TYPE_DESC"));
						}
						pendAppForm.setPackTypeID(packTypeID);
						pendAppForm.setPackTypeName(packTypeName);
					
						LinkedList packSizeID=new LinkedList();
						LinkedList packSizeName=new LinkedList();
						String getPackSize="select * from PACK_SIZE";
						ResultSet rsPackSize=ad.selectQuery(getPackSize);
						while(rsPackSize.next())
						{
							packSizeID.add(rsPackSize.getString("PACK_SIZE_CODE"));
							packSizeName.add(rsPackSize.getString("PACK_SIZE_CODE") );
						}
						pendAppForm.setPackSizeID(packSizeID);
						pendAppForm.setPackSizeName(packSizeName);
						
						LinkedList valuationClassID=new LinkedList();
						LinkedList valuationClassName=new LinkedList();
						String getValuation="select * from VALUATION_CLASS where MAT_TYPE='"+matType+"'";
						ResultSet rsValuation=ad.selectQuery(getValuation);
						while(rsValuation.next())
						{
							valuationClassID.add(rsValuation.getString("VALUATION_ID"));
							valuationClassName.add(rsValuation.getString("VALUATION_ID")+" - "+rsValuation.getString("VALUATION_DESC"));
						}
						pendAppForm.setValuationClassID(valuationClassID);
						pendAppForm.setValuationClassName(valuationClassName);
						
						LinkedList salesUOMID=new LinkedList();
						LinkedList salesUOMName=new LinkedList();
						String getSalesUOM="select * from SALES_UOM order by S_UOM_DESC";
						ResultSet rsSalesUOM=ad.selectQuery(getSalesUOM);
						while(rsSalesUOM.next())
						{
							salesUOMID.add(rsSalesUOM.getString("S_UOM_CODE"));
							packSizeName.add(rsSalesUOM.getString("S_UOM_CODE")+" - "+rsSalesUOM.getString("S_UOM_DESC"));
						}
						pendAppForm.setSalesUOMID(salesUOMID);
						pendAppForm.setSalesUOMName(salesUOMName);

						LinkedList divisonID=new LinkedList();
						LinkedList divisonName=new LinkedList();
						String getDivison="select * from DIVISION";
						ResultSet rsDivison=ad.selectQuery(getDivison);
						while(rsDivison.next())
						{
							divisonID.add(rsDivison.getString("DIV_CODE"));
							divisonName.add(rsDivison.getString("DIV_DESC"));
						}
						pendAppForm.setDivisonID(divisonID);
						pendAppForm.setDivisonName(divisonName);
						
						LinkedList therapeuticID=new LinkedList();
						LinkedList therapeuticName=new LinkedList();
						String getrstherapeutic="select * from THERAPEUTIC_SEGMENT";
						ResultSet rstherapeutic=ad.selectQuery(getrstherapeutic);
						while(rstherapeutic.next())
						{
							therapeuticID.add(rstherapeutic.getString("THER_SEG_CODE"));
							therapeuticName.add(rstherapeutic.getString("THER_SEG_DESC"));
						}
						pendAppForm.setTherapeuticID(therapeuticID);
						pendAppForm.setTherapeuticName(therapeuticName);
						
						LinkedList brandIDList=new LinkedList();
						LinkedList brandNameList=new LinkedList();
						String getBrand="select * from BRAND order by BRAND_DESC";
						ResultSet rsBrand=ad.selectQuery(getBrand);
						while(rsBrand.next())
						{
							brandIDList.add(rsBrand.getString("BRAND_CODE"));
							brandNameList.add(rsBrand.getString("BRAND_DESC"));
						}
						pendAppForm.setBrandIDList(brandIDList);
						pendAppForm.setBrandNameList(brandNameList);
						
						LinkedList strengthIDList=new LinkedList();
						LinkedList strengthNameList=new LinkedList();
						String getStrength="select * from STRENGTH";
						ResultSet rsStrength=ad.selectQuery(getStrength);
						while(rsStrength.next())
						{
							strengthIDList.add(rsStrength.getString("STRENGTH_CODE"));
							strengthNameList.add(rsStrength.getString("STRENGTH_DESC"));
						}
						pendAppForm.setStrengthIDList(strengthIDList);
						pendAppForm.setStrengthNameList(strengthNameList);
						
						LinkedList genericIDList=new LinkedList();
						LinkedList genericNameList=new LinkedList();
						String getGeneric="select * from GENERIC_NAME";
						ResultSet rsGeneric=ad.selectQuery(getGeneric);
						while(rsGeneric.next())
						{
							genericIDList.add(rsGeneric.getString("GEN_NAME_CODE"));
							genericNameList.add(rsGeneric.getString("GEN_NAME_DESC"));
						}
						pendAppForm.setGenericIDList(genericIDList);
						pendAppForm.setGenericNameList(genericNameList);
						
						LinkedList weightUOMID=new LinkedList();
						LinkedList weightUOMName=new LinkedList();
						String getweightUOM="select * from WEIGHT_UOM";
						ResultSet rsweightUOM=ad.selectQuery(getweightUOM);
						while(rsweightUOM.next())
						{
							weightUOMID.add(rsweightUOM.getString("W_UOM_CODE"));
							weightUOMName.add(rsweightUOM.getString("W_UOM_CODE")+" - "+rsweightUOM.getString("W_UOM_DESC"));
						}
						pendAppForm.setWeightUOMID(weightUOMID);
						pendAppForm.setWeightUOMName(weightUOMName);
						
						LinkedList puchaseGroupIdList=new LinkedList();
						LinkedList puchaseGroupIdValues=new LinkedList();
						
						String getPurchaseGroup="select * from PURCHASE_GROUP";
						ResultSet rsPurchaseGroup=ad.selectQuery(getPurchaseGroup);
						while(rsPurchaseGroup.next())
						{
							puchaseGroupIdList.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID"));
							puchaseGroupIdValues.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID")+" - "+rsPurchaseGroup.getString("PURCHASE_GROUP_DESC"));
						}
						pendAppForm.setPuchaseGroupIdList(puchaseGroupIdList);
						pendAppForm.setPuchaseGroupIdValues(puchaseGroupIdValues);
						
						
						
						LinkedList materTypeIDList=new LinkedList();
						LinkedList materialTypeIdValueList=new LinkedList();
						String materialTypeId=request.getParameter("materialType");

						String getMaterials="select * from MATERIAL_TYPE";
						ResultSet rsMaterial=ad.selectQuery(getMaterials);
						while(rsMaterial.next())
						{
							
							materTypeIDList.add(rsMaterial.getString("id"));
							materialTypeIdValueList.add(rsMaterial.getString("MATERIAL_GROUP_ID")+" - "+rsMaterial.getString("M_DESC"));
						}
						pendAppForm.setMaterTypeIDList(materTypeIDList);
						pendAppForm.setMaterialTypeIdValueList(materialTypeIdValueList);
						
						LinkedList storageID=new LinkedList();
						LinkedList storageName=new LinkedList();
						String getStorageDetails="select * from STORAGE_LOCATION where  MAT_TYPE='"+matType+"'";
						ResultSet rsStrogeLocation=ad.selectQuery(getStorageDetails);
						while(rsStrogeLocation.next()){
							storageID.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID"));
							storageName.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID")+" - "+rsStrogeLocation.getString("STORAGE_LOCATION_NAME"));
						}
						pendAppForm.setStorageID(storageID);
						pendAppForm.setStorageIDName(storageName);
						String getCountryDetails="select * from Country";
						LinkedList countryID=new LinkedList();
						LinkedList countryName=new LinkedList();
						ResultSet rsCountryDetails=ad.selectQuery(getCountryDetails);
						while(rsCountryDetails.next()){
							countryID.add(rsCountryDetails.getString("LAND1"));
							countryName.add(rsCountryDetails.getString("LAND1")+" - "+rsCountryDetails.getString("LANDX"));
						}
						pendAppForm.setCounID(countryID);
						pendAppForm.setCountryName(countryName);
						
						ResultSet rs11 = ad.selectQuery("select * from location");
						ArrayList locationList=new ArrayList();
						ArrayList locationLabelList=new ArrayList();
						
						while(rs11.next()) {
							locationList.add(rs11.getString("LOCID"));
							locationLabelList.add(rs11.getString("LOCATION_CODE")+" - "+rs11.getString("LOCNAME"));
						}
						pendAppForm.setLocationIdList(locationList);
						pendAppForm.setLocationLabelList(locationLabelList);
						
						LinkedList materGroupIDList=new LinkedList();
						LinkedList materialGroupIdValueList=new LinkedList();
						
						String getMaterialGroup="select * from MATERIAL_GROUP where MATERIAL_TYPE like '%"+matType+"%' order by STXT";
						ResultSet rsMaterialGroup=ad.selectQuery(getMaterialGroup);
						while(rsMaterialGroup.next())
						{
							materGroupIDList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID"));
							materialGroupIdValueList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID")+" - "+rsMaterialGroup.getString("STXT"));
						}
						pendAppForm.setMaterGroupIDList(materGroupIDList);
						pendAppForm.setMaterialGroupIdValueList(materialGroupIdValueList);
						
						
						
						LinkedList unitOfMeasIdList=new LinkedList();
						LinkedList unitOfMeasIdValues=new LinkedList();
						
						String getunitMesurement="select * from UNIT_MESUREMENT";
						ResultSet rsUnit=ad.selectQuery(getunitMesurement);
						while(rsUnit.next())
						{
							unitOfMeasIdList.add(rsUnit.getString("UNIT_OF_MEAS_ID"));
							unitOfMeasIdValues.add(rsUnit.getString("UNIT_OF_MEAS_ID")+" - "+rsUnit.getString("LTXT"));
						}
						pendAppForm.setUnitOfMeasIdList(unitOfMeasIdList);
						pendAppForm.setUnitOfMeasIdValues(unitOfMeasIdValues);
						
			// get material records
				
				String getFinishedProduct="select * from material_code_request where REQUEST_NO='"+reqId+"'";
				ResultSet rs=ad.selectQuery(getFinishedProduct);
				if(rs.next())
				{
					pendAppForm.setRequestNo(reqId);
					String reqDate=rs.getString("REQUEST_DATE");
					String a[]=reqDate.split(" ");
					reqDate=a[0];
					String b[]=reqDate.split("-");
					reqDate=b[2]+"/"+b[1]+"/"+b[0];
					pendAppForm.setRequestDate(reqDate);
					pendAppForm.setLocationId(rs.getString("LOCATION_ID"));
					pendAppForm.setMaterialTypeId(rs.getString("MATERIAL_TYPE_ID"));
					
					String manufacturedAt=rs.getString("MANUFACTURED_AT");
					
					if(manufacturedAt.equalsIgnoreCase("Third Party"))
					{
						request.setAttribute("standardBathcNotMandatory", "standardBathcNotMandatory");
						request.setAttribute("manufactureMandatory", "manufactureMandatory");
					}
					else{
						request.setAttribute("standardBathcMandatory", "standardBathcMandatory");
						request.setAttribute("manufactureNotMandatory", "manufactureNotMandatory");
					}
					
					pendAppForm.setManufacturedAt(manufacturedAt);
					pendAppForm.setStorageLocationId(rs.getString("STORAGE_LOCATION_ID"));
					pendAppForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME"));
					pendAppForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME"));
					pendAppForm.setMaterialGroupId(rs.getString("MATERIAL_GROUP_ID"));
					pendAppForm.setValuationClass(rs.getString("VALUATION_CLASS"));
					pendAppForm.setCountryId(rs.getString("COUNTRY_ID"));
					pendAppForm.setCustomerName(rs.getString("CUSTOMER_NAME"));
					pendAppForm.setShelfLife(rs.getString("SHELF_LIFE"));
					pendAppForm.setShelfType(rs.getString("SHELF_LIFE_TYPE"));
					pendAppForm.setStandardBatchSize(rs.getString("STANDARD_BATCH_SIZE"));
					pendAppForm.setBatchCode(rs.getString("BATCH_CODE"));
					pendAppForm.setSaleableOrSample(rs.getString("SALEABLE_OR_SAMPLE"));
					pendAppForm.setDomesticOrExports(rs.getString("DOMESTIC_OR_EXPORTS"));
					String salesPackId=rs.getString("SALES_PACK_ID");
					pendAppForm.setSalesPackId(rs.getString("SALES_PACK_ID"));
					pendAppForm.setPackTypeId(rs.getString("PACK_TYPE_ID"));
					pendAppForm.setSalesUnitOfMeaseurement(rs.getString("SALES_UNIT_OF_MEAS_ID"));
					pendAppForm.setDivisionId(rs.getString("DIVISION_ID"));
					pendAppForm.setTherapeuticSegmentID(rs.getString("THERAPEUTIC_SEGMENT_ID"));
					pendAppForm.setBrandID(rs.getString("BRAND_ID"));
					pendAppForm.setSrengthId(rs.getString("STRENGTH_ID"));
					pendAppForm.setGenericName(rs.getString("GENERIC_NAME"));
					pendAppForm.setProdInspMemo(rs.getString("PROD_INSP_MEMO"));
					pendAppForm.setTaxClassification(rs.getString("Tax_Classification"));
					pendAppForm.setMaterialPricing(rs.getString("Material_Pricing"));
					pendAppForm.setGrossWeight(rs.getString("GROSS_WEIGHT"));
					pendAppForm.setNetWeight(rs.getString("NET_WEIGHT"));
					pendAppForm.setWeightUOM(rs.getString("WEIGHT_UOM"));
					pendAppForm.setDimension(rs.getString("DIMENSION"));
					pendAppForm.setUnitOfMeasId(rs.getString("UNIT_OF_MEAS_ID"));
					pendAppForm.setPuchaseGroupId(rs.getString("PURCHASE_GROUP_ID"));
				
					String sapCodeno=rs.getString("SAP_CODE_NO");
					if(sapCodeno!=null)
					{
						pendAppForm.setSapCodeNo(rs.getString("SAP_CODE_NO"));
						String sapCodeExist=rs.getString("SAP_CODE_EXISTS");
						if(sapCodeExist.equalsIgnoreCase("1"))
						{
							pendAppForm.setSapCodeExists("On");
						}
						if(sapCodeExist.equalsIgnoreCase("0"))
							pendAppForm.setSapCodeExistsNo("On");
					
						String createDate=rs.getString("SAP_CREATION_DATE");
						String a1[]=createDate.split(" ");
						createDate=a1[0];
						String b1[]=createDate.split("-");
						createDate=b1[2]+"/"+b1[1]+"/"+b1[0];
						pendAppForm.setSapCreationDate(createDate);
						pendAppForm.setSapCreatedBy(rs.getString("SAP_CREATED_BY"));
					}
					
					
				}
					}
				if(filterBy.equalsIgnoreCase("Pending")){
					request.setAttribute("approveButton", "approveButton");
					request.setAttribute("rejectButton", "rejectButton");
				}
				
				
				 matDetails="select loc.LOCATION_CODE,mat.Type,mat.CREATED_BY,mat.DOMESTIC_OR_EXPORTS from material_code_request as mat,Location as loc  where mat.REQUEST_NO='"+reqId+"' and mat.LOCATION_ID=loc.LOCID";
				 rsDetails=ad.selectQuery(matDetails);
				while(rsDetails.next())
				{
					
					matGroup=rsDetails.getString("DOMESTIC_OR_EXPORTS");
					if(matGroup.equals("D"))
			 			matGroup="Domestic";
			 		else
			 			matGroup="Export";
				}
		 		
				//set ApproverDetails 
				checkStatus=0;int appStatus=0;
				LinkedList listApprers=new LinkedList();
				String getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
				"where mast.Location='"+location+"' AND  mast.Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mast.Approver_Id=emp.PERNR order by Priority";
				ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
				while(rsApprDetails.next())
				{
					checkStatus=1;
					ApprovalsForm apprvers=new ApprovalsForm();
					apprvers.setPriority(rsApprDetails.getString("Priority"));
					apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
					String empCode=rsApprDetails.getString("Approver_Id");
					String approveStatus="";
					String recordStatus="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
					"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
					"mast.Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
					"or mast.Role='Creator') and mast.Approver_Id=emp.PERNR  group by mast.Priority,mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status," +
					"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
					ResultSet rsAppInfo=ad.selectQuery(recordStatus);
					while(rsAppInfo.next())
					{
						
						apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
						approveStatus=rsAppInfo.getString("Req_Status");
						if(approveStatus.equalsIgnoreCase(""))
						{
							apprvers.setApproveStatus("In Process");
						}
						if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
						{
						apprvers.setDate(rsAppInfo.getString("approved_date"));
						}else{
							apprvers.setDate(rsAppInfo.getString("rejected_date"));
							appStatus=1;
						}
						String comments=rsAppInfo.getString("Comments");
						if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
						{
							apprvers.setComments("");
						}else{
							apprvers.setComments(rsAppInfo.getString("Comments"));
						}
						
						
					}
					if(approveStatus.equalsIgnoreCase("") && appStatus==0)
					{
						apprvers.setApproveStatus("In Process");
					}
					apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
					listApprers.add(apprvers);
				}
				if(checkStatus==0)
				{
					getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
					"where mast.Location='"+location+"' AND  mast.Material_Type='"+matType+"' AND Material_Group='' and mast.Approver_Id=emp.PERNR order by Priority";
					rsApprDetails=ad.selectQuery(getApprDetails);
					while(rsApprDetails.next())
					{
						checkStatus=1;
						ApprovalsForm apprvers=new ApprovalsForm();
						apprvers.setPriority(rsApprDetails.getString("Priority"));
						apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
						String empCode=rsApprDetails.getString("Approver_Id");
						String approveStatus="";
						String recordStatus="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
						"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
						"mast.Material_Type='"+matType+"' AND Material_Group='' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
						"or mast.Role='Creator') and mast.Approver_Id=emp.PERNR  group by mast.Priority,mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status," +
						"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
						ResultSet rsAppInfo=ad.selectQuery(recordStatus);
						while(rsAppInfo.next())
						{
							apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
							approveStatus=rsAppInfo.getString("Req_Status");
							
							if(approveStatus.equalsIgnoreCase("Approved")|| approveStatus.equalsIgnoreCase("Completed"))
							{
							String approveDate=	rsAppInfo.getString("approved_date");
							
							String a[]=approveDate.split(" ");
							approveDate=a[0];
							String b[]=approveDate.split("-");
							approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
							
							apprvers.setDate(approveDate);
							}else{
								String rejectDate=	rsAppInfo.getString("rejected_date");
								appStatus=1;
								String a[]=rejectDate.split(" ");
								rejectDate=a[0];
								String b[]=rejectDate.split("-");
								rejectDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
								apprvers.setDate(rejectDate);
							}
							String comments=rsAppInfo.getString("Comments");
							if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
							{
								apprvers.setComments("");
							}else{
								apprvers.setComments(rsAppInfo.getString("Comments"));
							}
						}
						if(approveStatus.equalsIgnoreCase("") && appStatus==0)
						{
							apprvers.setApproveStatus("In Process");
						}
						apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
						listApprers.add(apprvers);
				}
				}
				request.setAttribute("approverDetails", listApprers);
				
				if(userRole.equalsIgnoreCase("User"))
				{
				return mapping.findForward("finishedProduct");
				}
				if(userRole.equalsIgnoreCase("Accounts"))
				{
				return mapping.findForward("finishedProduct_Account");
				}
				if(userRole.equalsIgnoreCase("Creator"))
				{
					Date dNow = new Date( );
					 SimpleDateFormat ft = new SimpleDateFormat ("dd/MM/yyyy");
						String dateNow = ft.format(dNow);
						pendAppForm.setSapCreationDate(dateNow);
					pendAppForm.setSapCreatedBy(user.getEmployeeNo()+"-"+user.getFullName());
					
				return mapping.findForward("finishedProduct_Creator");
				}
				
				}
				if(matType.equalsIgnoreCase("RM"))
				{
				
					if(userRole.equalsIgnoreCase("User"))
					{
						
						
						String getMaterial="select  mat.REQUEST_NO,mat.REQUEST_DATE,loc.LOCNAME,loc.LOCATION_CODE,mat.MATERIAL_GROUP_ID,stLoc.STORAGE_LOCATION_NAME,stLoc.MAT_TYPE," +
						" mat.MATERIAL_SHORT_NAME,mat.MATERIAL_LONG_NAME,matGroup.STXT,uom.LTXT,pur.PURCHASE_GROUP_DESC, mat.PHARMACOP_NAME," +
						"mat.PHARMACOP_GRADE,mat.GENERIC_NAME,mat.SYNONYM,mat.PHARMACOP_SPECIFICATION,mat.DUTY_ELEMENT, mat.IS_DMF_MATERIAL," +
						"dmf.DMF_GRADE_DESC,mat.MATERIAL_GRADE,mat.COS_GRADE_AND_NO,mat.ADDITIONAL_TEST, mat.IS_VENDOR_SPECIFIC_MATERIAL," +
						"mat.MFGR_NAME,mat.SITE_OF_MANUFACTURE,cou.LANDX,mat.CUSTOMER_NAME, mat.TO_BE_USED_IN_PRODUCTS,mat.SHELF_LIFE,mat.SHELF_LIFE_TYPE," +
						"mat.RETEST_DAYS ,mat.RETEST_DAYS_TYPE,val.VALUATION_DESC,mat.APPROXIMATE_VALUE,mat.Attachements,SAP_CODE_NO,SAP_CODE_EXISTS, " +
						"SAP_CREATION_DATE,SAP_CREATED_BY,rejected_flag from material_code_request as mat,Location as loc,STORAGE_LOCATION as stLoc,MATERIAL_GROUP " +
						"as matGroup ,UNIT_MESUREMENT AS uom,PURCHASE_GROUP as pur,DMF_GRADE as dmf,Country as cou, VALUATION_CLASS as val " +
						" where REQUEST_NO='"+reqId+"' and loc.LOCID=mat.LOCATION_ID and stLoc.STORAGE_LOCATION_ID=mat.STORAGE_LOCATION_ID and " +
						"matGroup.MATERIAL_GROUP_ID=mat.MATERIAL_GROUP_ID and uom.UNIT_OF_MEAS_ID=mat.UNIT_OF_MEAS_ID and pur.PURCHASE_GROUP_ID=mat.PURCHASE_GROUP_ID " +
						"and dmf.DMF_GRADE_ID=mat.DMF_GRADE_ID and cou.LAND1=mat.COUNTRY_ID and val.VALUATION_ID=mat.VALUATION_CLASS";	
						ResultSet rs=ad.selectQuery(getMaterial);
						while(rs.next())
						{
							pendAppForm.setRequestNo(reqId);
							pendAppForm.setRequestNumber(reqId);
							pendAppForm.setReqMaterialGroup(rs.getString("MATERIAL_GROUP_ID"));
						String reqDate=rs.getString("REQUEST_DATE");
						String a[]=reqDate.split(" ");
						reqDate=a[0];
						String b[]=reqDate.split("-");
						reqDate=b[2]+"/"+b[1]+"/"+b[0];
						pendAppForm.setRequestDate(reqDate);
						pendAppForm.setLocationId(rs.getString("LOCATION_CODE")+"-"+rs.getString("LOCNAME"));
						pendAppForm.setStorageLocationId(rs.getString("MAT_TYPE")+"-"+rs.getString("STORAGE_LOCATION_NAME"));
						
						pendAppForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME")); 
						pendAppForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME"));
						pendAppForm.setMaterialGroupId(rs.getString("STXT"));
						pendAppForm.setPharmacopName(rs.getString("PHARMACOP_NAME"));
					    String pharmacopGrade=rs.getString("PHARMACOP_GRADE");
						pendAppForm.setPharmacopGrade(pharmacopGrade);
						
						pendAppForm.setGenericName(rs.getString("GENERIC_NAME"));
						pendAppForm.setSynonym(rs.getString("SYNONYM"));
						pendAppForm.setPharmacopSpecification(rs.getString("PHARMACOP_SPECIFICATION"));
						String isDMfMaterial=rs.getString("IS_DMF_MATERIAL");
						if(isDMfMaterial.equalsIgnoreCase("1"))
						{
							pendAppForm.setIsDMFMaterial("YES");
						
							pendAppForm.setDmfGradeId(rs.getString("DMF_GRADE_DESC"));
							pendAppForm.setMaterialGrade(rs.getString("MATERIAL_GRADE"));
							pendAppForm.setCosGradeNo(rs.getString("COS_GRADE_AND_NO"));
							
						}
						pendAppForm.setAdditionalTest(rs.getString("ADDITIONAL_TEST"));
						if(isDMfMaterial.equalsIgnoreCase("0"))
						{
							pendAppForm.setIsDMFMaterial("NO");
							pendAppForm.setDmfGradeId(rs.getString("DMF_GRADE_DESC"));
							pendAppForm.setMaterialGrade(rs.getString("MATERIAL_GRADE"));
							pendAppForm.setCosGradeNo(rs.getString("COS_GRADE_AND_NO"));
							
							
						}
						
						pendAppForm.setCountryId(rs.getString("LANDX"));
						pendAppForm.setCustomerName(rs.getString("CUSTOMER_NAME"));
						pendAppForm.setToBeUsedInProducts(rs.getString("TO_BE_USED_IN_PRODUCTS"));
						
						String isVendorStatus=rs.getString("IS_VENDOR_SPECIFIC_MATERIAL");
						if(isVendorStatus.equalsIgnoreCase("1"))
						{
							pendAppForm.setIsVendorSpecificMaterial("YES");
							pendAppForm.setMfgrName(rs.getString("MFGR_NAME"));
							pendAppForm.setSiteOfManufacture(rs.getString("SITE_OF_MANUFACTURE"));
						}
						if(isVendorStatus.equalsIgnoreCase("0"))
						{
							pendAppForm.setIsVendorSpecificMaterial("NO");
						}
						
						
						pendAppForm.setShelfLife(rs.getString("SHELF_LIFE"));
						String dutyElement=rs.getString("DUTY_ELEMENT");
						if(dutyElement.equalsIgnoreCase("0"))
						{
							pendAppForm.setDutyElement("0-Duty Exempted Raw Materials for Finished product");
						}
						if(dutyElement.equalsIgnoreCase("2")){
							pendAppForm.setDutyElement("2-Indigenous Material with or without Cenvat");
						}
						pendAppForm.setShelfLifeType(rs.getString("SHELF_LIFE_TYPE"));
						pendAppForm.setRetestDays(rs.getString("RETEST_DAYS"));
						pendAppForm.setRetestType(rs.getString("RETEST_DAYS_TYPE"));
						pendAppForm.setValuationClass(rs.getString("VALUATION_DESC"));
						pendAppForm.setApproximateValue(rs.getString("APPROXIMATE_VALUE"));
						pendAppForm.setUnitOfMeasId(rs.getString("LTXT"));
						pendAppForm.setPuchaseGroupId(rs.getString("PURCHASE_GROUP_DESC"));
					
					
						
						ArrayList fileList = new ArrayList();
						String uploadedFiles=rs.getString("Attachements");
						if(uploadedFiles.equalsIgnoreCase(""))
						{
							
						}else{
						String v[] = uploadedFiles.split(",");
						int l = v.length;
						for (int i = 0; i < l; i++) 
						{
							RawMaterialForm materialForm2=new RawMaterialForm();
							//String url=v[i];
							//materialForm2.setUrl(url);
						System.out.println(v[i]);
							materialForm2.setUploadFilePath(v[i]);
						int x=v[i].lastIndexOf("/");
						uploadedFiles=v[i].substring(x+1);		
						materialForm2.setFileList(uploadedFiles);
						
						fileList.add(materialForm2);
						}
						request.setAttribute("listName", fileList);
						
						String sapCodeno=rs.getString("SAP_CODE_NO");
						if(sapCodeno!=null)
						{
							pendAppForm.setSapCodeNo(rs.getString("SAP_CODE_NO"));
							String sapCodeExist=rs.getString("SAP_CODE_EXISTS");
							if(sapCodeExist.equalsIgnoreCase("1"))
							{
								pendAppForm.setSapCodeExists("Yes");
							}
							if(sapCodeExist.equalsIgnoreCase("0"))
								pendAppForm.setSapCodeExists("No");
							String createDate=rs.getString("SAP_CREATION_DATE");
							String a1[]=createDate.split(" ");
							createDate=a1[0];
							String b1[]=createDate.split("-");
							createDate=b1[2]+"/"+b1[1]+"/"+b1[0];
							pendAppForm.setSapCreationDate(createDate);
							pendAppForm.setSapCreatedBy(rs.getString("SAP_CREATED_BY"));
						}
						
						
					}
						String rejected_flag=rs.getString("rejected_flag");
						if(rejected_flag!=null)
						{
							if(rejected_flag.equalsIgnoreCase("y"))
								request.setAttribute("rejectedFLag", "rejectedFLag");
						}
					
					}
						String getMaterial1="select tem.TEMP_CON_DESC from material_code_request as mat,TEMP_CONDITION as tem " +
						" where REQUEST_NO='"+reqId+"' and tem.TEMP_CON_ID=mat.TEMP_CONDITION ";
				
				ResultSet rs1=ad.selectQuery(getMaterial1);
				while(rs1.next())
				{
					pendAppForm.setTempCondition(rs1.getString("TEMP_CON_DESC"));
				}
				
				//STORAGE_CONDITION
				
				String getMaterial2="select stcon.LTXT from material_code_request as mat,STORAGE_CONDITION as stcon" +
						" where REQUEST_NO='"+reqId+"'  and stcon.STO_COND_CODE=mat.STORAGE_CONDITION";	
				
				ResultSet rs2=ad.selectQuery(getMaterial2);
				while(rs2.next())
				{
					pendAppForm.setStorageCondition(rs2.getString("LTXT"));
				}
						
				}
					else{	
				String getCountryDetails="select * from Country";
				LinkedList countryID=new LinkedList();
				LinkedList countryName=new LinkedList();
				ResultSet rsCountryDetails=ad.selectQuery(getCountryDetails);
				while(rsCountryDetails.next()){
					countryID.add(rsCountryDetails.getString("LAND1"));
					countryName.add(rsCountryDetails.getString("LAND1")+" - "+rsCountryDetails.getString("LANDX"));
				}
				pendAppForm.setCounID(countryID);
				pendAppForm.setCountryName(countryName);
				
				ResultSet rs11 = ad.selectQuery("select * from location");
				ArrayList locationList=new ArrayList();
				ArrayList locationLabelList=new ArrayList();
				
				while(rs11.next()) {
					locationList.add(rs11.getString("LOCID"));
					locationLabelList.add(rs11.getString("LOCATION_CODE")+" - "+rs11.getString("LOCNAME"));
				}
				pendAppForm.setLocationIdList(locationList);
				pendAppForm.setLocationLabelList(locationLabelList);
				
				
				LinkedList storageID=new LinkedList();
				LinkedList storageName=new LinkedList();
				String getStorageDetails="select * from STORAGE_LOCATION where MAT_TYPE='RM'";
				ResultSet rsStrogeLocation=ad.selectQuery(getStorageDetails);
				while(rsStrogeLocation.next()){
					storageID.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID"));
					storageName.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID")+" - "+rsStrogeLocation.getString("STORAGE_LOCATION_NAME"));
				}
				pendAppForm.setStorageID(storageID);
				pendAppForm.setStorageIDName(storageName);
				
				LinkedList materTypeIDList=new LinkedList();
				LinkedList materialTypeIdValueList=new LinkedList();
				String getMaterials="select * from MATERIAL_TYPE";
				ResultSet rsMaterial=ad.selectQuery(getMaterials);
				while(rsMaterial.next())
				{
					materTypeIDList.add(rsMaterial.getString("id"));
					materialTypeIdValueList.add(rsMaterial.getString("MATERIAL_GROUP_ID")+" - "+rsMaterial.getString("M_DESC"));
				}
				pendAppForm.setMaterTypeIDList(materTypeIDList);
				pendAppForm.setMaterialTypeIdValueList(materialTypeIdValueList);
				
				LinkedList materGroupIDList=new LinkedList();
				LinkedList materialGroupIdValueList=new LinkedList();
				
				String getMaterialGroup="select * from MATERIAL_GROUP where MATERIAL_TYPE like '%"+matType+"%' order by STXT";
				ResultSet rsMaterialGroup=ad.selectQuery(getMaterialGroup);
				while(rsMaterialGroup.next())
				{
					materGroupIDList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID"));
					materialGroupIdValueList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID")+" - "+rsMaterialGroup.getString("STXT"));
				}
				pendAppForm.setMaterGroupIDList(materGroupIDList);
				pendAppForm.setMaterialGroupIdValueList(materialGroupIdValueList);
				
				LinkedList unitOfMeasIdList=new LinkedList();
				LinkedList unitOfMeasIdValues=new LinkedList();
				
				String getunitMesurement="select * from UNIT_MESUREMENT";
				ResultSet rsUnit=ad.selectQuery(getunitMesurement);
				while(rsUnit.next())
				{
					unitOfMeasIdList.add(rsUnit.getString("UNIT_OF_MEAS_ID"));
					unitOfMeasIdValues.add(rsUnit.getString("UNIT_OF_MEAS_ID")+" - "+rsUnit.getString("LTXT"));
				}
				pendAppForm.setUnitOfMeasIdList(unitOfMeasIdList);
				pendAppForm.setUnitOfMeasIdValues(unitOfMeasIdValues);
				
				LinkedList puchaseGroupIdList=new LinkedList();
				LinkedList puchaseGroupIdValues=new LinkedList();
				
				String getPurchaseGroup="select * from PURCHASE_GROUP";
				ResultSet rsPurchaseGroup=ad.selectQuery(getPurchaseGroup);
				while(rsPurchaseGroup.next())
				{
					puchaseGroupIdList.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID"));
					puchaseGroupIdValues.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID")+" - "+rsPurchaseGroup.getString("PURCHASE_GROUP_DESC"));
				}
				pendAppForm.setPuchaseGroupIdList(puchaseGroupIdList);
				pendAppForm.setPuchaseGroupIdValues(puchaseGroupIdValues);
				
				LinkedList dmfGradeIDList=new LinkedList();
				LinkedList dmfGradeIDValueList=new LinkedList();
				
				String getDMFValues="select * from DMF_GRADE";
				ResultSet rsDMFValues=ad.selectQuery(getDMFValues);
				while(rsDMFValues.next())
				{
					dmfGradeIDList.add(rsDMFValues.getString("DMF_GRADE_ID"));
					dmfGradeIDValueList.add(rsDMFValues.getString("DMF_GRADE_ID")+" - "+rsDMFValues.getString("DMF_GRADE_DESC"));
				}
				pendAppForm.setDmfGradeIDList(dmfGradeIDList);
				pendAppForm.setDmfGradeIDValueList(dmfGradeIDValueList);
				
				
				LinkedList valuationClassID=new LinkedList();
				LinkedList valuationClassName=new LinkedList();
				
				String getValuation="select * from VALUATION_CLASS where MAT_TYPE='RM'";
				ResultSet rsValuation=ad.selectQuery(getValuation);
				while(rsValuation.next())
				{
					valuationClassID.add(rsValuation.getString("VALUATION_ID"));
					valuationClassName.add(rsValuation.getString("VALUATION_ID")+" - "+rsValuation.getString("VALUATION_DESC"));
				}
				pendAppForm.setValuationClassID(valuationClassID);
				pendAppForm.setValuationClassName(valuationClassName);
				
				LinkedList tempIDList=new LinkedList();
				LinkedList temValueList=new LinkedList();
				String getTemp="select * from TEMP_CONDITION order by TEMP_CON_DESC";
				ResultSet rsTemp=ad.selectQuery(getTemp);
				while(rsTemp.next())
				{
					tempIDList.add(rsTemp.getString("TEMP_CON_ID"));
					temValueList.add(rsTemp.getString("TEMP_CON_ID")+" - "+rsTemp.getString("TEMP_CON_DESC"));
				}
				pendAppForm.setTempIDList(tempIDList);
				pendAppForm.setTemValueList(temValueList);
				
				LinkedList storageIDList=new LinkedList();
				LinkedList storageLocList=new LinkedList();
				String getStorageLoc="select * from STORAGE_CONDITION";
				ResultSet rsStorageLoc=ad.selectQuery(getStorageLoc);
				while(rsStorageLoc.next())
				{
					storageIDList.add(rsStorageLoc.getString("STO_COND_CODE"));
					storageLocList.add(rsStorageLoc.getString("STO_COND_CODE")+" - "+rsStorageLoc.getString("LTXT"));
				}
				pendAppForm.setStorageIDList(storageIDList);
				pendAppForm.setStorageLocList(storageLocList);
			// get material records
				
				String getMaterial="select * from material_code_request where REQUEST_NO='"+reqId+"'";
				ResultSet rs=ad.selectQuery(getMaterial);
				while(rs.next())
				{
					pendAppForm.setRequestNumber(reqId);
					String reqDate=rs.getString("REQUEST_DATE");
					String a[]=reqDate.split(" ");
					reqDate=a[0];
					String b[]=reqDate.split("-");
					reqDate=b[2]+"/"+b[1]+"/"+b[0];
					pendAppForm.setRequestDate(reqDate);
					pendAppForm.setLocationId(rs.getString("LOCATION_ID"));
					pendAppForm.setStorageLocationId(rs.getString("STORAGE_LOCATION_ID"));
					pendAppForm.setMaterialTypeId(rs.getString("MATERIAL_TYPE_ID"));
					pendAppForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME")); 
					pendAppForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME"));
					pendAppForm.setMaterialGroupId(rs.getString("MATERIAL_GROUP_ID"));
					pendAppForm.setPharmacopName(rs.getString("PHARMACOP_NAME"));
				String pharmacopGrade=rs.getString("PHARMACOP_GRADE");
				pendAppForm.setPharmacopGrade(pharmacopGrade);
					
				pendAppForm.setGenericName(rs.getString("GENERIC_NAME"));
				pendAppForm.setSynonym(rs.getString("SYNONYM"));
				pendAppForm.setPharmacopSpecification(rs.getString("PHARMACOP_SPECIFICATION"));
					String isDMfMaterial=rs.getString("IS_DMF_MATERIAL");
					if(isDMfMaterial.equalsIgnoreCase("1"))
					{
						pendAppForm.setIsDMFMaterial("1");
						pendAppForm.setDmfGradeId(rs.getString("DMF_GRADE_ID"));
						pendAppForm.setMaterialGrade(rs.getString("MATERIAL_GRADE"));
						pendAppForm.setCosGradeNo(rs.getString("COS_GRADE_AND_NO"));
						
					}
					pendAppForm.setAdditionalTest(rs.getString("ADDITIONAL_TEST"));
					if(isDMfMaterial.equalsIgnoreCase("0"))
					{
						pendAppForm.setIsDMFMaterial("0");
						pendAppForm.setDmfGradeId(rs.getString("DMF_GRADE_ID"));
						pendAppForm.setMaterialGrade(rs.getString("MATERIAL_GRADE"));
						pendAppForm.setCosGradeNo(rs.getString("COS_GRADE_AND_NO"));
						
					}
					
					pendAppForm.setCountryId(rs.getString("COUNTRY_ID"));
					pendAppForm.setCustomerName(rs.getString("CUSTOMER_NAME"));
					pendAppForm.setToBeUsedInProducts(rs.getString("TO_BE_USED_IN_PRODUCTS"));
					
					String isVendorStatus=rs.getString("IS_VENDOR_SPECIFIC_MATERIAL");
					if(isVendorStatus.equalsIgnoreCase("1"))
					{
						pendAppForm.setIsVendorSpecificMaterial("1");
						pendAppForm.setMfgrName(rs.getString("MFGR_NAME"));
						pendAppForm.setSiteOfManufacture(rs.getString("SITE_OF_MANUFACTURE"));
					}
					if(isVendorStatus.equalsIgnoreCase("0"))
					{
						pendAppForm.setIsVendorSpecificMaterial("0");
					}
					
					pendAppForm.setTempCondition(rs.getString("TEMP_CONDITION"));
					pendAppForm.setStorageCondition(rs.getString("STORAGE_CONDITION"));
					pendAppForm.setShelfLife(rs.getString("SHELF_LIFE"));
					String dutyElement=rs.getString("DUTY_ELEMENT");
					if(dutyElement.equalsIgnoreCase("0"))
					{
						pendAppForm.setDutyElement("0");
					}
					if(dutyElement.equalsIgnoreCase("2"))
						pendAppForm.setDutyElement("2");
					pendAppForm.setShelfLifeType(rs.getString("SHELF_LIFE_TYPE"));
					pendAppForm.setRetestDays(rs.getString("RETEST_DAYS"));
					pendAppForm.setRetestType(rs.getString("RETEST_DAYS_TYPE"));
					pendAppForm.setValuationClass(rs.getString("VALUATION_CLASS"));
					pendAppForm.setApproximateValue(rs.getString("APPROXIMATE_VALUE"));
					pendAppForm.setUnitOfMeasId(rs.getString("UNIT_OF_MEAS_ID"));
					pendAppForm.setPuchaseGroupId(rs.getString("PURCHASE_GROUP_ID"));
					pendAppForm.setRequestedBy(rs.getString("REQUESTED_BY"));
					
					ArrayList fileList = new ArrayList();
					String uploadedFiles=rs.getString("Attachements");
					if(uploadedFiles.equalsIgnoreCase(""))
					{
						
					}else{
					String v[] = uploadedFiles.split(",");
					int l = v.length;
					for (int i = 0; i < l; i++) 
					{
						RawMaterialForm pendAppForm2=new RawMaterialForm();
						//String url=v[i];
						//pendAppForm2.setUrl(url);
					System.out.println(v[i]);
						pendAppForm2.setUploadFilePath(v[i]);
					int x=v[i].lastIndexOf("/");
					uploadedFiles=v[i].substring(x+1);		
					pendAppForm2.setFileList(uploadedFiles);
					fileList.add(pendAppForm2);
					}
					request.setAttribute("listName", fileList);
					}
					
					String sapCodeno=rs.getString("SAP_CODE_NO");
					if(sapCodeno!=null)
					{
						pendAppForm.setSapCodeNo(rs.getString("SAP_CODE_NO"));
						String sapCodeExist=rs.getString("SAP_CODE_EXISTS");
						if(sapCodeExist.equalsIgnoreCase("1"))
						{
							pendAppForm.setSapCodeExists("On");
						}
						if(sapCodeExist.equalsIgnoreCase("0"))
							pendAppForm.setSapCodeExistsNo("On");
						
						String createDate=rs.getString("SAP_CREATION_DATE");
						String a1[]=createDate.split(" ");
						createDate=a1[0];
						String b1[]=createDate.split("-");
						createDate=b1[2]+"/"+b1[1]+"/"+b1[0];
						pendAppForm.setSapCreationDate(createDate);
						pendAppForm.setSapCreatedBy(rs.getString("SAP_CREATED_BY"));
					}
				
				}
					}
				if(filterBy.equalsIgnoreCase("Pending")){
					request.setAttribute("approveButton", "approveButton");
					request.setAttribute("rejectButton", "rejectButton");
				}
				
				
				
				
				
				//set ApproverDetails 
				checkStatus=0;int appStatus=0;
				LinkedList listApprers=new LinkedList();
				String getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
				"where mast.Location='"+location+"' AND  mast.Material_Type='RM' AND Material_Group='"+matGroup+"' and mast.Approver_Id=emp.PERNR order by Priority";
				ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
				while(rsApprDetails.next())
				{
					checkStatus=1;
					ApprovalsForm apprvers=new ApprovalsForm();
					apprvers.setPriority(rsApprDetails.getString("Priority"));
					apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
					String empCode=rsApprDetails.getString("Approver_Id");
					String approveStatus="";
					String recordStatus="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
					"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
					"mast.Material_Type='RM' AND Material_Group='"+matGroup+"' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
					"or mast.Role='Creator') and mast.Approver_Id=emp.PERNR  group by mast.Priority,mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status," +
					"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
					ResultSet rsAppInfo=ad.selectQuery(recordStatus);
					while(rsAppInfo.next())
					{
						
						apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
						approveStatus=rsAppInfo.getString("Req_Status");
						if(approveStatus.equalsIgnoreCase(""))
						{
							apprvers.setApproveStatus("In Process");
						}
						if(approveStatus.equalsIgnoreCase("Approved")|| approveStatus.equalsIgnoreCase("Completed"))
						{
						apprvers.setDate(rsAppInfo.getString("approved_date"));
						}else{
							apprvers.setDate(rsAppInfo.getString("rejected_date"));
							appStatus=1;
						}
						String comments=rsAppInfo.getString("Comments");
						if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
						{
							apprvers.setComments("");
						}else{
							apprvers.setComments(rsAppInfo.getString("Comments"));
						}
						
						
					}
					if(approveStatus.equalsIgnoreCase("") && appStatus==0)
					{
						apprvers.setApproveStatus("In Process");
					}
					apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
					listApprers.add(apprvers);
				}
				if(checkStatus==0)
				{
					getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
					"where mast.Location='"+location+"' AND  mast.Material_Type='RM' AND Material_Group='' and mast.Approver_Id=emp.PERNR order by Priority";
					rsApprDetails=ad.selectQuery(getApprDetails);
					while(rsApprDetails.next())
					{
						checkStatus=1;
						ApprovalsForm apprvers=new ApprovalsForm();
						apprvers.setPriority(rsApprDetails.getString("Priority"));
						apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
						String empCode=rsApprDetails.getString("Approver_Id");
						String approveStatus="";
						String recordStatus="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
						"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
						"mast.Material_Type='RM' AND Material_Group='' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
						"or mast.Role='Creator') and mast.Approver_Id=emp.PERNR  group by mast.Priority,mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status," +
						"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
						ResultSet rsAppInfo=ad.selectQuery(recordStatus);
						while(rsAppInfo.next())
						{
							apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
							approveStatus=rsAppInfo.getString("Req_Status");
							
							if(approveStatus.equalsIgnoreCase("Approved")|| approveStatus.equalsIgnoreCase("Completed"))
							{
							String approveDate=	rsAppInfo.getString("approved_date");
							
							String a[]=approveDate.split(" ");
							approveDate=a[0];
							String b[]=approveDate.split("-");
							approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
							
							apprvers.setDate(approveDate);
							}else{
								String rejectDate=	rsAppInfo.getString("rejected_date");
								
								String a[]=rejectDate.split(" ");
								rejectDate=a[0];
								String b[]=rejectDate.split("-");
								rejectDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
								apprvers.setDate(rejectDate);
							}
							String comments=rsAppInfo.getString("Comments");
							if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
							{
								apprvers.setComments("");
							}else{
								apprvers.setComments(rsAppInfo.getString("Comments"));
							}
						}
						if(approveStatus.equalsIgnoreCase("") && appStatus==0)
						{
							apprvers.setApproveStatus("In Process");
						}
						apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
						listApprers.add(apprvers);
				}
				}
				request.setAttribute("approverDetails", listApprers);
				
				if(userRole.equalsIgnoreCase("User"))
				{
				return mapping.findForward("ROHDetails");
				}
				if(userRole.equalsIgnoreCase("Accounts"))
				{
				return mapping.findForward("ROH_Account");
				}
				if(userRole.equalsIgnoreCase("Creator"))
				{
					Date dNow = new Date( );
					 SimpleDateFormat ft = new SimpleDateFormat ("dd/MM/yyyy");
						String dateNow = ft.format(dNow);
						pendAppForm.setSapCreationDate(dateNow);
					pendAppForm.setSapCreatedBy(user.getEmployeeNo()+"-"+user.getFullName());
					
				return mapping.findForward("ROH_Creator");
				}
			}
			*/}
			if(reqType.equalsIgnoreCase("Recruitment Request")){
				tName="Recruitment_Request";
				String pendingReq="select * from "+tName+" inner join All_Request on "+tName+".Req_Id = All_Request.Req_Id where  All_Request.Req_Id='"+reqId+"' and All_Request.Req_Type like '%"+reqType+"%'";
				//String pendingReq="select * from "+tName+" where Req_Id='"+reqId+"'";
				ResultSet rsGetReq=adMPM.selectQuery(pendingReq);
				while(rsGetReq.next()){
					pendAppForm.setRequestNo(reqId);
					pendAppForm.setRequestType(reqType);
					pendAppForm.setJobTitle(rsGetReq.getString("Job_Title"));
					pendAppForm.setDepartment(rsGetReq.getString("Department"));
					pendAppForm.setPrimaryLocation(rsGetReq.getString("PrimaryLocation"));
					pendAppForm.setTotalEmp(rsGetReq.getString("TotalEmp"));
					pendAppForm.setEmpStatus(rsGetReq.getString("EmpStatus"));
					pendAppForm.setRequestedBy(rsGetReq.getString("Requester_name"));
					pendAppForm.setJobDescription(rsGetReq.getString("JobDescription"));
					pendAppForm.setQualifications(rsGetReq.getString("Qualification"));
					pendAppForm.setExperience(rsGetReq.getString("Experience"));
					pendAppForm.setSaleryOffered(rsGetReq.getString("SalaryOffered"));
					String reqStatus = rsGetReq.getString("Req_Status");
					
					pendAppForm.setRemark(rsGetReq.getString("Comments"));
					if(rsGetReq.getString("Approved_Persons").contains(uName) || !reqStatus.equalsIgnoreCase("Pending")){
						request.setAttribute("approveRequest", "");
						request.setAttribute("uploadOpenings", "");
						if(reqStatus.equalsIgnoreCase("Rejected")){
							reqStatus = "Rejected";
						}
						reqStatus = "Approved";
						
					}
					else{
						request.setAttribute("approveRequest", "approve");
						request.setAttribute("uploadOpenings", "");
					}
					
					
					pendAppForm.setReqStatus(reqStatus);
					list.add(pendAppForm);
				}
			}
			else if(reqType.equalsIgnoreCase("Add Man Power")){
				tName="Man Power Matrix";
				String pendingReq="select * from Man_Power_Matrix inner join All_Request on Man_Power_Matrix.Req_Id = All_Request.Req_Id where  All_Request.Req_Id='"+reqId+"' and All_Request.Req_Type='Add Man Power'";
				//String pendingReq="select * from "+tName+" where Req_Id='"+reqId+"'";
				ResultSet rsGetReq=adMPM.selectQuery(pendingReq);
				while(rsGetReq.next()){
					pendAppForm.setRequestNo(reqId);
					pendAppForm.setRequestType(reqType);
					pendAppForm.setJobTitle(rsGetReq.getString("Job_Title"));
					pendAppForm.setDepartment(rsGetReq.getString("Department"));
					pendAppForm.setPrimaryLocation(rsGetReq.getString("City"));
					pendAppForm.setTotalEmp(rsGetReq.getString("Req_Man_Power"));
					pendAppForm.setSaleryOffered(rsGetReq.getString("Emp_Monthly_Salery"));
					pendAppForm.setRequestedBy(rsGetReq.getString("Requester_Name"));
					String reqStatus = rsGetReq.getString("Req_Status");
					
					pendAppForm.setRemark(rsGetReq.getString("Comments"));
					if(rsGetReq.getString("Approved_Persons").contains(uName) || !reqStatus.equalsIgnoreCase("Pending")){
						request.setAttribute("approveRequest", "");
						request.setAttribute("uploadOpenings", "");
						if(reqStatus.equalsIgnoreCase("Rejected")){
							reqStatus = "Rejected";
						}
						reqStatus = "Approved";
					}
					else{
						request.setAttribute("approveRequest", "approve");
						request.setAttribute("uploadOpenings", "");
					}
					pendAppForm.setReqStatus(reqStatus);
					list.add(pendAppForm);
				}
			}
			else if(reqType.equalsIgnoreCase("Leave")){request.setAttribute("header", "Leave/OnDuty For Approve");
			tName="leave_details";
			boolean existStatus=false;
			String HRid="";
			String empid="";
			LeaveForm lForm = new LeaveForm();
			String pendingReq="select * from "+tName+" inner join All_Request on "+tName+".Req_Id = All_Request.Req_Id where All_Request.Req_Id='"+reqId+"' and All_Request.Req_Type like '%"+reqType+"%'";
			//String pendingReq="select * from "+tName+" where Req_Id='"+reqId+"'";
			ResultSet rsGetReq=adMPM.selectQuery(pendingReq);
			while(rsGetReq.next()){
				LeaveAction lAction = new LeaveAction();
				String leaveType = lAction.getLeaveType(rsGetReq.getString("leave_type"));
				String  holidayType = lAction.getHolidayType(rsGetReq.getString("start_duration"));
				lForm.setLeaveType(leaveType);
				lForm.setHolidayType(holidayType);
				lForm.setEmployeeName(rsGetReq.getString("Requester_Name"));
				empid=rsGetReq.getString("Requester_Name");
				
				
				lForm.setStartDate(EMicroUtils.display1(rsGetReq.getDate("start_date")));
				
				String stDur=rsGetReq.getString("start_duration");
				if(stDur.equalsIgnoreCase("FD"))
					stDur="Full Day";
				if(stDur.equalsIgnoreCase("FH"))
					stDur="First Half";
				if(stDur.equalsIgnoreCase("FD"))
					stDur="Second Half";
				
				lForm.setStartDurationType(stDur);
				lForm.setEndDate(EMicroUtils.display1(rsGetReq.getDate("end_date")));
				
				String endDur=rsGetReq.getString("end_duration");
				if(endDur.equalsIgnoreCase("FD"))
					endDur="Full Day";
				if(endDur.equalsIgnoreCase("FH"))
					endDur="First Half";
				if(endDur.equalsIgnoreCase("FD"))
					endDur="Second Half";
				
				lForm.setEndDurationType(endDur);
				lForm.setNoOfDays(rsGetReq.getString("no_of_days"));
				lForm.setReason(rsGetReq.getString("reason"));
				lForm.setReasonType(rsGetReq.getString("reasonType"));
				
				String gender="";
				String pernr="";
				String name="";
				String doj="";
				String dep="";
				String desg="";
				String getGender="select emp.PERNR,emp.EMP_FULLNAME,emp.SEX,emp.DOJ,dep.DPTSTXT,desg.DSGSTXT from emp_official_info emp,DEPARTMENT as dep,DESIGNATION as desg where emp.PERNR='"+lForm.getEmployeeName()+"' and dep.DPTID=emp.DPTID and desg.DSGID=emp.DSGID";
				ResultSet rsGender=ad.selectQuery(getGender);
				while(rsGender.next())
				{
					gender=rsGender.getString("SEX");
					pernr=rsGender.getString("PERNR");
					name=rsGender.getString("EMP_FULLNAME");
					doj=rsGender.getString("DOJ");
					dep=rsGender.getString("DPTSTXT");
					desg=rsGender.getString("DSGSTXT");
					
				}
				
				lForm.setEmployeeNumber(pernr);
				lForm.setEmployeeName(name);
				lForm.setDepartment(dep);
				lForm.setDesignation(desg);
				lForm.setDoj(doj);
				
				LinkedList details = new LinkedList();
				details.add(lForm);
				request.setAttribute("details", details);
				pendAppForm.setRequestNo(reqId);
				pendAppForm.setRequestType(reqType);
				pendAppForm.setJobTitle(leaveType);
				pendAppForm.setEmpStatus(holidayType);
				pendAppForm.setRequestDate(rsGetReq.getString("submit_date"));
				pendAppForm.setDepartment(getDepartmentName(rsGetReq.getString("Requester_Id")));
				pendAppForm.setPrimaryLocation(getLocationName("plant",""+rsGetReq.getInt("plant_id")));
				String filepath="";
				ArrayList fileList = new ArrayList();
				String uploadedFiles=rsGetReq.getString("documents");
				if(uploadedFiles.equalsIgnoreCase(""))
				{
					
				}else{
				String v[] = uploadedFiles.split(",");
				int l = v.length;
				for (int i = 0; i < l; i++) 
				{
					LeaveForm pendAppForm1=new LeaveForm();
					filepath = "jsp/ess/leave/documents/";
					int x=v[i].lastIndexOf("/");
					uploadedFiles=v[i].substring(x+1);	
					pendAppForm1.setFileName(uploadedFiles);
					System.out.println(uploadedFiles);
					fileList.add(pendAppForm1);
				}
				request.setAttribute("fileList", fileList);
				
				}
				pendAppForm.setUrl(filepath);
				pendAppForm.setRequestedBy(rsGetReq.getString("Requester_Name"));
				String reqStatus = rsGetReq.getString("Req_Status");
				
				pendAppForm.setRemark(rsGetReq.getString("Comments"));
				if(rsGetReq.getString("Approved_Persons").contains(uName) || !reqStatus.equalsIgnoreCase("Pending")){
					request.setAttribute("approveRequest", "");
					request.setAttribute("uploadOpenings", "");
					if(reqStatus.equalsIgnoreCase("Rejected")){
						reqStatus = "Rejected";
					}
					
				}
				else{
					request.setAttribute("approveRequest", "approve");
					request.setAttribute("uploadOpenings", "");
				}
				pendAppForm.setReqStatus(reqStatus);
				
				if(filterBy.equalsIgnoreCase("Cancelled")){
				
				}
				
			
				if(filterBy.equalsIgnoreCase("Pending")){
					pendAppForm.setRemark("");
					request.setAttribute("commentField", "commentField");
					request.setAttribute("approveButton", "approveButton");
					request.setAttribute("rejectButton", "rejectButton");
				}
				if(filterBy.equalsIgnoreCase("Rejected")){
			
				}
				if(filterBy.equalsIgnoreCase("Approved")||reqStatus.equalsIgnoreCase("Approved")){
					
				}
				
				
				//list.add(pendAppForm);
				//leave approve timings
				
				String reqType1="";
			
			
				String checkESSApproverList="select count(*),reqType from ESS_Approvers where employeeNumber='"+lForm.getEmployeeNumber()+"' and essType='Leave' group by reqType";
				ResultSet rsCheckInEss=ad.selectQuery(checkESSApproverList);
				while(rsCheckInEss.next())
				{
					int number=rsCheckInEss.getInt(1);
					reqType=rsCheckInEss.getString("reqType");
					if(number==0)
					{
						existStatus=false;
					}else{
						existStatus=true;
					}
				}
				if(existStatus==true){
					
				}
			
	}
			
			LinkedList leaveReason=new LinkedList();
			LinkedList leaveDetReason=new LinkedList();
			
			String reason="select * from LEAVE_REASON";
			ResultSet a=ad.selectQuery(reason);
			try {
				while(a.next())
				{
			leaveReason.add(a.getString("Reason"));
			leaveDetReason.add(a.getString("Detailed_Reason"));
				}
				pendAppForm.setLeaveReason(leaveReason);
				pendAppForm.setLeaveDetReason(leaveDetReason);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			if(existStatus==true){
				ArrayList paralist=new ArrayList();
				if(reqType.equalsIgnoreCase("sequential"))
				{
					
					String getApproverDesig="";
					
					
					 getApproverDesig=" select e.ApproverId,emp.EMP_FULLNAME,desg.DSGSTXT  from ESS_Approvers as e,emp_official_info as emp,DESIGNATION as desg " +
			"where employeeNumber='"+lForm.getEmployeeNumber()+"' and  e.ApproverId=emp.PERNR and emp.DSGID=desg.DSGID and essType='Leave' order by Priority";
					
					
					
					
				ResultSet rsA=ad.selectQuery(getApproverDesig);
					while(rsA.next())
					{
						LeaveForm lvform=new LeaveForm();
						 lvform.setApprover(rsA.getString("EMP_FULLNAME"));	
						 lvform.setAppDesig(rsA.getString("DSGSTXT"));	
						 String getdetails="";
						
						
						
						 
						 getdetails=" select all_R.Comments,desg.DSGSTXT,emp.EMP_FULLNAME,all_R.Hr_Id,all_R.Req_Status,all_R.approved_date," +
								"all_R.rejected_date from 	All_Request as all_R,emp_official_info as emp, DESIGNATION as desg   " +
								" where all_R.Req_Id='"+reqId+"' and all_R.Req_Type='Leave' and ((emp.PERNR=all_R.Pending_Approver) or " +
								"(emp.PERNR=all_R.Last_Approver))  and (emp.DSGID=desg.DSGID) and((Last_Approver='"+rsA.getString("ApproverId")+"') or " +
								"(Pending_Approver='"+rsA.getString("ApproverId")+"'))  and Requester_Name='"+lForm.getEmployeeNumber()+"'";
						 
						 
						 
						ResultSet rsApproverDsg=ad.selectQuery(getdetails);
						
						while(rsApproverDsg.next())
						{
						    HRid=rsApproverDsg.getString("Hr_Id");
							String reqstatus=rsApproverDsg.getString("Req_Status");
							lvform.setStatus(rsApproverDsg.getString("Req_Status"));
							if(reqstatus.equalsIgnoreCase("Pending"))
							{
								
							
								
							}
							if(reqstatus.equalsIgnoreCase("Approved"))
							{
							lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));
							 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
						   lvform.setApprovedDate(rsApproverDsg.getString("approved_date"));
							}
							
							if(reqstatus.equalsIgnoreCase("Rejected"))
							{
								  lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
								  lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
							      lvform.setApprovedDate(rsApproverDsg.getString("rejected_date"));
							}
							if(reqstatus.equalsIgnoreCase("Cancelled"))
							{
								  lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
								  lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
							      lvform.setApprovedDate(rsApproverDsg.getString("rejected_date"));
							}
							lvform.setComments(rsApproverDsg.getString("Comments"));
							
							
							if(HRid!=null)
							{
								
								if( reqstatus.equalsIgnoreCase("Approved")){
								String hrdetails="select emp.EMP_FULLNAME,des.DSGSTXT from emp_official_info as emp,DESIGNATION as des where PERNR='"+HRid+"' and emp.DSGID=des.DSGID";
								
								ResultSet rs=ad.selectQuery(hrdetails);
								
								while(rs.next())
								{
									lvform.setApprover(rs.getString("EMP_FULLNAME"));
									 lvform.setAppDesig(rs.getString("DSGSTXT"));
								}
							}
							}
						
						}
						
						paralist.add(lvform);
						
						
					}
					
					
					
					request.setAttribute("parallelapprovers", paralist);
					
				}
				if(reqType.equalsIgnoreCase("parallel"))
				{
					
					String getApproverDesig="  select all_R.Comments,desg.DSGSTXT,emp.EMP_FULLNAME,all_R.Hr_Id,all_R.Req_Status,all_R.approved_date,all_R.rejected_date from " +
							"All_Request as all_R,emp_official_info as emp, DESIGNATION as desg    where all_R.Req_Id='"+reqId+"' and all_R.Req_Type='Leave' and " +
							"((emp.PERNR=all_R.Last_Approver) or (emp.PERNR=all_R.Pending_Approver))  and (emp.DSGID=desg.DSGID) ";
					    ResultSet rsApproverDsg=ad.selectQuery(getApproverDesig);
						while(rsApproverDsg.next())
						{
							
							HRid=rsApproverDsg.getString("Hr_Id");
							LeaveForm lvform=new LeaveForm();
							String reqstatus=rsApproverDsg.getString("Req_Status");
							lvform.setStatus(rsApproverDsg.getString("Req_Status"));
							if(reqstatus.equalsIgnoreCase("Pending"))
							{
								
							 lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
							 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));	
								
							}
							if(reqstatus.equalsIgnoreCase("Approved"))
							{
							lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));
							 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
						   lvform.setApprovedDate(rsApproverDsg.getString("approved_date"));
							}
							
							if(reqstatus.equalsIgnoreCase("Rejected")||reqstatus.equalsIgnoreCase("Cancelled"))
							{
								  lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
								  lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
							     lvform.setApprovedDate(rsApproverDsg.getString("rejected_date"));
							}
							lvform.setComments(rsApproverDsg.getString("Comments"));
							
							if(HRid!=null )
							{
								if( reqstatus.equalsIgnoreCase("Approved")){
								String hrdetails="select emp.EMP_FULLNAME,des.DSGSTXT from emp_official_info as emp,DESIGNATION as des where PERNR='"+HRid+"' and emp.DSGID=des.DSGID";
								
								ResultSet rs=ad.selectQuery(hrdetails);
								
								while(rs.next())
								{
									lvform.setApprover(rs.getString("EMP_FULLNAME"));
									 lvform.setAppDesig(rs.getString("DSGSTXT"));
								}
								
							}
							}
							
							paralist.add(lvform);
							
						}
						
						request.setAttribute("parallelapprovers", paralist);
			//list.add(pendAppForm);
			
		}
				request.setAttribute("leave", "leave");	
	
			}
			
			
			///Last 5 leavs
			int year=Calendar.getInstance().get(Calendar.YEAR);
			///Last 5 leavs
			LinkedList le=new LinkedList();
			int i=0;
			String last="select l.*,m.lv_type,convert(nvarchar(11),approved_date,103) as approveddate,convert(nvarchar(11),start_date,103) as fromdate,convert(nvarchar(11),end_date,103) as enddate from leave_details as l,lv_type_m as m  where id<'"+reqId+"' and user_id='"+empid+"' and Approvel_Status='Approved' and l.leave_type=m.lv_typeid  and year(start_date)='"+year+"' order by id desc ";
			ResultSet rsl=ad.selectQuery(last);
			while(rsl.next())
			{
				LeaveForm l=new LeaveForm();
				l.setLeaveType(rsl.getString("lv_type"));
				l.setStartDate(rsl.getString("fromdate"));
				l.setEndDate(rsl.getString("enddate"));
				l.setNoOfDays(rsl.getString("no_of_days"));
				l.setApprovedDate(rsl.getString("approveddate"));
				le.add(l);
				i++;
				if(i==5)
				{
					break;
				}
				
			}
			
			request.setAttribute("le", le);
			if(le.size()==0)
			{
				request.setAttribute("nole","nole");
			}
			
		
			///prev year availed leavs
			
			double prevcasualAvailedBal=0;
			double prevsickAvailedBal=0;
			double prevprevilegeAvailedBal=0;
			
			String getleave="select t.lv_opbal,t.lv_awtBal,t.lv_typeid,t.lv_availed,t.lv_clbal,m.lv_type from lv_type_d as t,lv_type_m as m where t.lv_empcode='"+empid+"' and t.lv_calyear='"+(year-1)+"' and t.lv_typeid=m.lv_typeid";
			ResultSet rsBalanc=ad.selectQuery(getleave);
		
			while(rsBalanc.next())
			{
				String lvType=rsBalanc.getString("lv_type");
				if(lvType.equalsIgnoreCase("CASUAL"))
				{
			
					prevcasualAvailedBal=rsBalanc.getFloat("lv_availed");
					
				}
				if(lvType.equalsIgnoreCase("SICK"))
				{
					
					prevsickAvailedBal=rsBalanc.getFloat("lv_availed");
					
				}
				if(lvType.equalsIgnoreCase("PRIVILEGE"))
				{
					
					prevprevilegeAvailedBal=rsBalanc.getFloat("lv_availed");
				
				}
				
				
			}
		
			double totopbal=0;
			double totavbal=0;
			double totclbal=0;
			double totawtbal=0;
			double totprevbal=0;
			
			String getleaveBalence="select t.lv_calyear,t.lv_opbal,t.lv_awtBal,t.lv_typeid,t.lv_availed,t.lv_clbal,m.lv_type from lv_type_d as t,lv_type_m as m where t.lv_empcode='"+empid+"' and t.lv_calyear='"+year+"' and t.lv_typeid=m.lv_typeid";
			ResultSet rsBalance=ad.selectQuery(getleaveBalence);
			ArrayList balList=new ArrayList();
			while(rsBalance.next())
			{
			 
				LeaveForm form2=new LeaveForm();
				form2.setLeaveType(rsBalance.getString("lv_type"));
				form2.setOpeningBalence(rsBalance.getFloat("lv_opbal"));
				form2.setAvalableBalence(rsBalance.getFloat("lv_availed"));
				form2.setNoOfDays(rsBalance.getString("lv_availed"));
				form2.setClosingBalence(rsBalance.getFloat("lv_clbal"));
			form2.setAwaitingBalence(rsBalance.getFloat("lv_awtBal"));
			
			
			
			String lvType=rsBalance.getString("lv_type");
			if(lvType.equalsIgnoreCase("CASUAL"))
			{
		
				form2.setCl(prevcasualAvailedBal);
				
			}
			if(lvType.equalsIgnoreCase("SICK"))
			{
				
				form2.setCl(prevsickAvailedBal);
				
			}
			if(lvType.equalsIgnoreCase("PRIVILEGE"))
			{
				
				form2.setCl(prevprevilegeAvailedBal);
			
			}
			
			
			 totopbal=totopbal+rsBalance.getFloat("lv_opbal");
			 totavbal=totavbal+rsBalance.getFloat("lv_availed");
			 totclbal=totclbal+rsBalance.getFloat("lv_clbal");
			 totawtbal=totawtbal+rsBalance.getFloat("lv_awtBal");
			 totprevbal=totprevbal+form2.getCl();
			
				balList.add(form2);
			}
			LeaveForm newf=new LeaveForm();
			newf.setLeaveType("Total");
			newf.setOpeningBalence((float)totopbal);
			newf.setAvalableBalence((float)totavbal);
			newf.setNoOfDays(Double.toString(totavbal));
			newf.setClosingBalence((float)totclbal);
			newf.setAwaitingBalence((float)totawtbal);
		    newf.setCl((float)totprevbal);
		balList.add(newf);
		
			pendAppForm.setMode(Integer.toString(year-1));
			request.setAttribute("LeaveBalenceList", balList);
		
			return mapping.findForward("leaveDetails");
			}
			
			else if(reqType.equalsIgnoreCase("On Duty")){
				request.setAttribute("header", "Leave/OnDuty For Approve");
				tName="OnDuty_details";
				LeaveForm lForm = new LeaveForm();
				String pendingReq="select * from "+tName+" inner join All_Request on "+tName+".request_no = All_Request.Req_Id where All_Request.Req_Id='"+reqId+"' and All_Request.Req_Type like '%"+reqType+"%'";
				//String pendingReq="select * from "+tName+" where Req_Id='"+reqId+"'";
				ResultSet rsGetReq=adMPM.selectQuery(pendingReq);
				while(rsGetReq.next()){
					lForm.setLeaveType(rsGetReq.getString("onDuty_type"));
					lForm.setHolidayType(rsGetReq.getString("duration"));
					lForm.setEmployeeName(rsGetReq.getString("Requester_Name"));
					lForm.setStartDate(EMicroUtils.display1(rsGetReq.getDate("start_date")));
					lForm.setNoOfDays(rsGetReq.getString("no_of_days"));
					lForm.setReason(rsGetReq.getString("reason"));
					LinkedList details = new LinkedList();
					details.add(lForm);
					request.setAttribute("details", details);
					pendAppForm.setRequestNo(reqId);
					pendAppForm.setRequestType(reqType);
					pendAppForm.setEmpStatus(rsGetReq.getString("duration"));
					pendAppForm.setJobTitle(rsGetReq.getString("onDuty_type"));
					pendAppForm.setDepartment(getDepartmentName(rsGetReq.getString("Requester_Id")));
					pendAppForm.setPrimaryLocation(getLocationName("user",rsGetReq.getString("Requester_Id")));
					pendAppForm.setRequestDate(rsGetReq.getString("submit_date"));
					
					String filepath="";
					ArrayList fileList = new ArrayList();
					String uploadedFiles=rsGetReq.getString("documents");
					if(uploadedFiles.equalsIgnoreCase(""))
					{
						
					}else{
					String v[] = uploadedFiles.split(",");
					int l = v.length;
					for (int i = 0; i < l; i++) 
					{
						filepath = "jsp/EMicro Files/ESS/On Duty/UploadFiles";
						int x=v[i].lastIndexOf("/");
						uploadedFiles=v[i].substring(x+1);	
						pendAppForm.setFileNameList(uploadedFiles);
						fileList.add(pendAppForm);
					}
					request.setAttribute("listName", fileList);
					}
					pendAppForm.setUrl(filepath);
					pendAppForm.setRequestedBy(rsGetReq.getString("Requester_Name"));
					String reqStatus = rsGetReq.getString("Req_Status");
					
					pendAppForm.setRemark(rsGetReq.getString("Comments"));
					if(rsGetReq.getString("Approved_Persons").contains(uName) || !reqStatus.equalsIgnoreCase("Pending")){
						request.setAttribute("approveRequest", "");
						request.setAttribute("uploadOpenings", "");
						if(reqStatus.equalsIgnoreCase("Rejected")){
							reqStatus = "Rejected";
						}
						else{
						reqStatus = "Approved";
						}
					}
					else{
						request.setAttribute("approveRequest", "approve");
						request.setAttribute("uploadOpenings", "");
					}
					pendAppForm.setReqStatus(reqStatus);
					list.add(pendAppForm);
				}
			}
			else if(reqType.contains("Vendor Master")){
				request.setAttribute("header", "Vendor Master Creation For Approve");
				tName="vendor_master_m";
				VendorMasterRequestForm vmForm= new VendorMasterRequestForm();
				String pendingReq="select * from "+tName+" inner join All_Request on "+tName+".REQUEST_NO = All_Request.Req_Id where All_Request.Req_Id='"+reqId+"' and All_Request.Req_Type like '%"+reqType+"%'";
				//String pendingReq="select * from "+tName+" where Req_Id='"+reqId+"'";
				ResultSet rsGetReq=adMPM.selectQuery(pendingReq);
				while(rsGetReq.next()){
					VendorMasterRequestAction vmAction = new VendorMasterRequestAction();
					vmForm = vmAction.setFormElements(rsGetReq);
					LinkedList details = new LinkedList();
					details.add(vmForm);
					request.setAttribute("details", details);
					pendAppForm.setRequestNo(reqId);
					pendAppForm.setRequestType(reqType);
					pendAppForm.setDepartment(getDepartmentName(rsGetReq.getString("Requester_Id")));
					pendAppForm.setPrimaryLocation(getLocationName("user",rsGetReq.getString("Requester_Id")));
					String documentNames="";
					String filepath="";
					String sql1="select * from vendor_documents where request_no='"+reqId+"'";
					
					ResultSet rs=adMPM.selectQuery(sql1);
					int count = 0;
					LinkedList fileList = new LinkedList();
					while(rs.next()) {
						documentNames = documentNames + rs.getString("file_name")+",";
						filepath = "jsp/EMicro Files/ESS/sapMasterRequest/vendorDocuments/temp/";
					}
					pendAppForm.setFileNameList(documentNames);
					fileList.add(pendAppForm);
					request.setAttribute("listName", fileList);
					
					pendAppForm.setSaleryOffered(documentNames);
					pendAppForm.setUrl(filepath);
					pendAppForm.setRequestedBy(rsGetReq.getString("Requester_Name"));
					String reqStatus = rsGetReq.getString("Req_Status");
					
					pendAppForm.setRemark(rsGetReq.getString("Comments"));
					if(rsGetReq.getString("Approved_Persons").contains(uName) || !reqStatus.equalsIgnoreCase("Pending")){
						request.setAttribute("approveRequest", "");
						request.setAttribute("uploadOpenings", "");
						if(reqStatus.equalsIgnoreCase("Rejected")){
							reqStatus = "Rejected";
						}
						reqStatus = "Approved";
					}
					else{
						request.setAttribute("approveRequest", "approve");
						request.setAttribute("uploadOpenings", "");
					}
					pendAppForm.setReqStatus(reqStatus);
					list.add(pendAppForm);
				}
			}
			else if(reqType.contains("Customer Master")){
				request.setAttribute("header", "Customer Master Creation For Approve");
				tName="CUSTOMER_MASTER_M";
				CustomerMasterForm cmForm=new CustomerMasterForm();
				String pendingReq="select * from "+tName+" inner join All_Request on "+tName+".REQUEST_NO = All_Request.Req_Id where All_Request.Req_Id='"+reqId+"' and All_Request.Req_Type like '%"+reqType+"%'";
				//String pendingReq="select * from "+tName+" where Req_Id='"+reqId+"'";
				ResultSet rsGetReq=adMPM.selectQuery(pendingReq);
				while(rsGetReq.next()){
					CustomerMasterAction cmAction = new CustomerMasterAction();
					cmForm = cmAction.setFormElements(rsGetReq);
					LinkedList details = new LinkedList();
					details.add(cmForm);
					request.setAttribute("details", details);
					pendAppForm.setRequestNo(reqId);
					pendAppForm.setRequestType(reqType);
					pendAppForm.setDepartment(getDepartmentName(rsGetReq.getString("Requester_Id")));
					pendAppForm.setPrimaryLocation(getLocationName("user",rsGetReq.getString("Requester_Id")));
					String documentNames="";
					String filepath="";
					String sql1="select * from UploadFiles_Masters where request_no='"+reqId+"'";
					int count = 0;
					LinkedList fileList = new LinkedList();
					ResultSet rs=adMPM.selectQuery(sql1);
					while(rs.next()) {
						documentNames = documentNames + rs.getString("file_name")+",";
						filepath = "jsp/EMicro Files/ESS/sapMasterRequest/Customer master files/UploadFiles/";
					}
					pendAppForm.setFileNameList(documentNames);
					fileList.add(pendAppForm);
					request.setAttribute("listName", fileList);
					pendAppForm.setUrl(filepath);
					pendAppForm.setRequestedBy(rsGetReq.getString("Requester_Name"));
					String reqStatus = rsGetReq.getString("Req_Status");
					
					pendAppForm.setRemark(rsGetReq.getString("Comments"));
					if(rsGetReq.getString("Approved_Persons").contains(uName) || !reqStatus.equalsIgnoreCase("Pending")){
						request.setAttribute("approveRequest", "");
						request.setAttribute("uploadOpenings", "");
						if(reqStatus.equalsIgnoreCase("Rejected")){
							reqStatus = "Rejected";
						}
						reqStatus = "Approved";
					}
					else{
						request.setAttribute("approveRequest", "approve");
						request.setAttribute("uploadOpenings", "");
					}
					pendAppForm.setReqStatus(reqStatus);
					list.add(pendAppForm);
				}
			}
			else if(reqType.equalsIgnoreCase("Feedback")){
				
			}
			else if(reqType.equalsIgnoreCase("Material Code Request")){
				RawMaterialForm rawmatForm = new RawMaterialForm();
				request.setAttribute("header", "Material Code Request For Approve");
				tName="material_code_request";
				String pendingReq="select * from "+tName+" inner join All_Request on "+tName+".REQUEST_NO = All_Request.Req_Id where All_Request.Req_Id='"+reqId+"' and All_Request.Req_Type like '%"+reqType+"%'";
				//String pendingReq="select * from "+tName+" where Req_Id='"+reqId+"'";
				ResultSet rsGetReq=adMPM.selectQuery(pendingReq);
				while(rsGetReq.next()){
					rawmatForm.setMaterialTypeId(rsGetReq.getString("Type"));
					rawmatForm.setMaterialShortName(rsGetReq.getString("MATERIAL_SHORT_NAME"));
					rawmatForm.setMaterialLongName(rsGetReq.getString("MATERIAL_LONG_NAME"));
					rawmatForm.setMaterialGroupId(rsGetReq.getString("MATERIAL_GROUP_ID"));
					rawmatForm.setUnitOfMeasId(rsGetReq.getString("SALES_UNIT_OF_MEAS_ID"));
					rawmatForm.setPuchaseGroupId(rsGetReq.getString("PURCHASE_GROUP_ID"));
					rawmatForm.setPharmacopName(rsGetReq.getString("PHARMACOP_NAME"));
					rawmatForm.setPharmacopGrade(rsGetReq.getString("PHARMACOP_GRADE"));
					rawmatForm.setGenericName(rsGetReq.getString("GENERIC_NAME"));
					rawmatForm.setSynonym(rsGetReq.getString("SYNONYM"));
					rawmatForm.setPharmacopSpecification(rsGetReq.getString("PHARMACOP_SPECIFICATION"));
					rawmatForm.setDutyElement(rsGetReq.getString("DUTY_ELEMENT"));
					rawmatForm.setIsDMFMaterial(rsGetReq.getString("IS_DMF_MATERIAL"));
					rawmatForm.setDmfGradeId(rsGetReq.getString("DMF_GRADE_ID"));
					rawmatForm.setMaterialGrade(rsGetReq.getString("MATERIAL_GRADE"));
					rawmatForm.setCosGradeNo(rsGetReq.getString("COS_GRADE_AND_NO"));
					rawmatForm.setAdditionalTest(rsGetReq.getString("ADDITIONAL_TEST"));
					rawmatForm.setIsVendorSpecificMaterial(rsGetReq.getString("IS_VENDOR_SPECIFIC_MATERIAL"));
					rawmatForm.setMfgrName(rsGetReq.getString("MFGR_NAME"));
					rawmatForm.setSiteOfManufacture(rsGetReq.getString("SITE_OF_MANUFACTURE"));
					rawmatForm.setCountryId(rsGetReq.getString("COUNTRY_ID"));
					rawmatForm.setCustomerName(rsGetReq.getString("CUSTOMER_NAME"));
					rawmatForm.setToBeUsedInProducts(rsGetReq.getString("TO_BE_USED_IN_PRODUCTS"));
					rawmatForm.setTempCondition(rsGetReq.getString("TEMP_CONDITION"));
					rawmatForm.setStorageCondition(rsGetReq.getString("STORAGE_CONDITION"));
					rawmatForm.setShelfLife(rsGetReq.getString("SHELF_LIFE"));
					rawmatForm.setRetestDays(rsGetReq.getString("RETEST_DAYS"));
					rawmatForm.setValuationClass(rsGetReq.getString("VALUATION_CLASS"));
					rawmatForm.setApproximateValue(rsGetReq.getString("APPROXIMATE_VALUE"));
					
					LinkedList details = new LinkedList();
					details.add(rawmatForm);
					request.setAttribute("details", details);
					pendAppForm.setRequestNo(reqId);
					
					pendAppForm.setRequestType(reqType);
					pendAppForm.setDepartment(getDepartmentName(rsGetReq.getString("Requester_Id")));
					pendAppForm.setPrimaryLocation(getLocationName("user",rsGetReq.getString("Requester_Id")));
					String documentNames="";
					String filepath="";
					ArrayList fileList = new ArrayList();
					String uploadedFiles=rsGetReq.getString("Attachements");
					if(uploadedFiles != null){
						if(uploadedFiles.equalsIgnoreCase("")){
							
						}
						
						else{
							String v[] = uploadedFiles.split(",");
							int l = v.length;
							for (int i = 0; i < l; i++) 
							{
								filepath = v[i];
								int x=v[i].lastIndexOf("/");
								uploadedFiles=v[i].substring(x+1);	
								pendAppForm.setFileNameList(uploadedFiles);
								fileList.add(pendAppForm);
							}
						}
					}
					request.setAttribute("listName", fileList);
					pendAppForm.setUrl(filepath);
					pendAppForm.setRequestedBy(rsGetReq.getString("Requester_Name"));
					String reqStatus = rsGetReq.getString("Req_Status");
					
					pendAppForm.setRemark(rsGetReq.getString("Comments"));
					if(rsGetReq.getString("Approved_Persons").contains(uName) || !reqStatus.equalsIgnoreCase("Pending")){
						request.setAttribute("approveRequest", "");
						request.setAttribute("uploadOpenings", "");
						if(reqStatus.equalsIgnoreCase("Rejected")){
							reqStatus = "Rejected";
						}
						reqStatus = "Approved";
					}
					else{
						String getCodeCreaterID="select count(*) from Approvers_Details where Type = 'Code Creater' and Approver_id = '"+uName+ "'";
						ResultSet codeRS=adMPM.selectQuery(getCodeCreaterID);
						int isCreater = 0;
						while(codeRS.next()){
							isCreater = codeRS.getInt(1);
						}
						if(isCreater != 0){
							request.setAttribute("codeCreation", "show");
						}
						else
						{
							request.setAttribute("approveRequest", "approve");
							request.setAttribute("uploadOpenings", "");
						}
					}
					
					pendAppForm.setReqStatus(reqStatus);
					/*list.add(pendAppForm);
					list.add(rawmatForm);*/
				}
			}
			else if(reqType.contains("Service Master")){//for service master
				request.setAttribute("header", "Service Master Creation For Approve");
				tName="SERVICE_MASTER";
				ServiceMasterRequestForm smForm=new ServiceMasterRequestForm();
				String pendingReq="select * from "+tName+" inner join All_Request on "+tName+".request_no = All_Request.Req_Id where All_Request.Req_Id='"+reqId+"' and All_Request.Req_Type like '%"+reqType+"%'";
				ResultSet rsGetReq=adMPM.selectQuery(pendingReq);
				while(rsGetReq.next()){
					ServiceMasterRequestAction smAction = new ServiceMasterRequestAction();
					smForm = smAction.setFormElements(rsGetReq);
					LinkedList details = new LinkedList();
					details.add(smForm);
					request.setAttribute("details", details);
					pendAppForm.setRequestNo(reqId);
					pendAppForm.setRequestType(reqType);
					pendAppForm.setDepartment(getDepartmentName(rsGetReq.getString("Requester_Id")));
					pendAppForm.setPrimaryLocation(getLocationName("user",rsGetReq.getString("Requester_Id")));
					String documentNames="";
					String filepath="";
					String sql1="select * from service_documents where request_no='"+reqId+"'";
					int count = 0;
					LinkedList fileList = new LinkedList();
					ResultSet rs=adMPM.selectQuery(sql1);
					while(rs.next()) {
						documentNames = documentNames + rs.getString("file_name")+",";
						filepath = "jsp/EMicro Files/ESS/sapMasterRequest/serviceMaster/UploadedFiles/";
					}
					pendAppForm.setFileNameList(documentNames);
					fileList.add(pendAppForm);
					request.setAttribute("listName", fileList);
					pendAppForm.setUrl(filepath);
					pendAppForm.setRequestedBy(rsGetReq.getString("Requester_Name"));
					String reqStatus = rsGetReq.getString("Req_Status");
					
					pendAppForm.setRemark(rsGetReq.getString("Comments"));
					if(rsGetReq.getString("Approved_Persons").contains(uName) || !reqStatus.equalsIgnoreCase("Pending")){
						request.setAttribute("approveRequest", "");
						request.setAttribute("uploadOpenings", "");
						if(reqStatus.equalsIgnoreCase("Rejected")){
							reqStatus = "Rejected";
						}
						reqStatus = "Approved";
					}
					else{
						request.setAttribute("approveRequest", "approve");
						request.setAttribute("uploadOpenings", "");
					}
					pendAppForm.setReqStatus(reqStatus);
					//list.add(pendAppForm);
				}
			}
			else if(reqType.equalsIgnoreCase("Permission")){
				request.setAttribute("header", "Permission For Approve");
				tName="Permission_details";
				PermissionForm permissionForm =new PermissionForm();
				String pendingReq="select * from "+tName+" inner join All_Request on "+tName+".request_no = All_Request.Req_Id where All_Request.Req_Id='"+reqId+"' and All_Request.Req_Type like '%"+reqType+"%'";
				//String pendingReq="select * from "+tName+" where Req_Id='"+reqId+"'";
				ResultSet rsGetReq=adMPM.selectQuery(pendingReq);
				while(rsGetReq.next()){
					permissionForm.setDate(rsGetReq.getString("date"));
					permissionForm.setStartTime(rsGetReq.getString("startTime"));
					permissionForm.setReason(rsGetReq.getString("reason"));
					LinkedList details = new LinkedList();
					details.add(permissionForm);
					request.setAttribute("details", details);
					pendAppForm.setRequestNo(reqId);
					pendAppForm.setRequestType(reqType);
					pendAppForm.setDepartment(getDepartmentName(rsGetReq.getString("Requester_Id")));
					pendAppForm.setPrimaryLocation(getLocationName("user",rsGetReq.getString("Requester_Id")));
					pendAppForm.setRequestDate(rsGetReq.getString("Req_Date"));
					String reqStatus = rsGetReq.getString("Req_Status");
					
					pendAppForm.setRemark(rsGetReq.getString("Comments"));
					if(rsGetReq.getString("Approved_Persons").contains(uName) || !reqStatus.equalsIgnoreCase("Pending")){
						request.setAttribute("approveRequest", "");
						request.setAttribute("uploadOpenings", "");
						if(reqStatus.equalsIgnoreCase("Rejected")){
							reqStatus = "Rejected";
						}
						reqStatus = "Approved";
					}
					else{
						request.setAttribute("approveRequest", "approve");
						request.setAttribute("uploadOpenings", "");
					}
					pendAppForm.setReqStatus(reqStatus);
					//list.add(pendAppForm);
				}
			}
			
		}
		catch (SQLException e) {
			System.out.println("exception @ upload request");
			e.printStackTrace();
		}
		catch (NullPointerException ne){
			System.out.println("exception @ upload request");
			ne.printStackTrace();
		}
		
		request.setAttribute("openRequest", "open");
		String openTab = request.getParameter("searchTxt");
		if(!openTab.equalsIgnoreCase("")){
			pendAppForm.setHeading("Search Results");
			pendAppForm.setSearchText(openTab);
		}
		request.setAttribute("listDetails", list);
		return mapping.findForward("displayRequest");
	}
	
	public ActionForward statusChangePermission(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
	{
		
		ApprovalsForm statusForm=(ApprovalsForm) form;
		EssDao ad=new EssDao();
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		if(user==null){
			request.setAttribute("message","Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		String reqId = request.getParameter("reqId");
		MainDao exeQry = new MainDao();
		String reqType = statusForm.getReqRequstType();
		statusForm.setRequestType(reqType);
		String reqStatus = request.getParameter("status");
		String filterBy=statusForm.getSelectedFilter();
		statusForm.setSelectedFilter(filterBy);
		statusForm.setReqRequstType(reqType);
		int totalRecords=statusForm.getTotalRecords();//21
		int startRecord=statusForm.getStartRecord();//11
		int endRecord=statusForm.getEndRecord();
		
		statusForm.setTotalRecords(totalRecords);
		statusForm.setStartRecord(startRecord);
		statusForm.setEndRecord(endRecord);

	
	
	try{
		Date dNow = new Date( );
		 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS");
		String dateNow = ft.format(dNow);
		String getLeaveDetails="select left(startTime,5)+' '+right(startTime,2) as startTime1,left(endTime,5)+' '+right(endTime,2) as endTime1, "
							+ "  * from Permission_details where request_no='"+reqId+"'"; 
		ResultSet rsLeave=ad.selectQuery(getLeaveDetails);
		String empID="";
		String submit_date="";
		String type ="";
		String swipetype ="";
		String c[] = null;
		
		String manualdate="";
		
		String inTime ="";
		String outTime="";
		while(rsLeave.next())
		{
			empID=rsLeave.getString("user_id");
			submit_date=rsLeave.getString("date");
			manualdate=rsLeave.getString("date");
			c=submit_date.split("-");
			submit_date=c[2]+"/"+c[1]+"/"+c[0];
			type = rsLeave.getString("type");
			inTime =rsLeave.getString("startTime1");
			outTime=rsLeave.getString("endTime1");
			 swipetype=rsLeave.getString("swipe_type");
		}
		if(reqStatus.equalsIgnoreCase("Approve")){
			boolean existStatus=false;
			boolean checkStatus=false;
			
			int priorityCout=0;
			int totalApproverCount=0;
			String dataFlowType=""; 
			String checkESSApproverList="select count(*) from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave'";
			ResultSet rsCheckInEss=ad.selectQuery(checkESSApproverList);
			while(rsCheckInEss.next())
			{
				int number=rsCheckInEss.getInt(1);
				totalApproverCount=rsCheckInEss.getInt(1);
				if(number==0)
				{
					existStatus=false;
				}else{
					existStatus=true;
				}
			}
			if(existStatus==true){
				String getDataFlowType="select * from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave' ";
				ResultSet rsDataFlowType=ad.selectQuery(getDataFlowType);
				while(rsDataFlowType.next())
				{
					dataFlowType=rsDataFlowType.getString("reqType");
				}
				if(dataFlowType.equalsIgnoreCase("sequential") )
				{
					int approverPriority=0;
					String approver="";
					String papprover1="";
					String papprover2="";
					
					String getApprPriority="select * from ESS_Approvers where employeeNumber='"+empID+"' and (ApproverId='"+user.getEmployeeNo()+"' or parallel_approver1='"+user.getEmployeeNo()+"' or parallel_approver2='"+user.getEmployeeNo()+"') and essType='Leave'";
					ResultSet rsApprPriority=ad.selectQuery(getApprPriority);
					if(rsApprPriority.next())
					{
						approverPriority=rsApprPriority.getInt("Priority");
						approver=rsApprPriority.getString("ApproverId");
						papprover1=rsApprPriority.getString("Parallel_Approver1");
						papprover2=rsApprPriority.getString("Parallel_Approver2");
					}
					
					
					
					if(papprover1==null )
					{
						papprover1="";
					}
					if(papprover2==null)
					{
						papprover2="";
					}
					
				    int count =0 ;
					String sj="";
				    if(!approver.equalsIgnoreCase(""))
					 sj = "select case when count(*) >1 then 1 else count(*) end from ESS_CANCEL_APPR where Location ='"+EmpLoc(empID)+"' and (hr_no = '"+approver+"' or  hr_no = '"+papprover1+"' or  hr_no = '"+papprover2+"')   ";
				    else
				    	 sj = "select case when count(*) >1 then 1 else count(*) end from ESS_CANCEL_APPR where Location ='"+EmpLoc(empID)+"' and hr_no = '"+user.getEmployeeNo()+"'   ";
				    	
				   
				    ResultSet rsk = ad.selectQuery(sj);
				    if(rsk.next())
				    {
				    	count = rsk.getInt(1);
				    }
					
				    
				    
				    	
				    	
				    
				    if(count == 1 && approverPriority>=0)
				    {

				    	
				    	
				    	
				    	String updateSql= " update All_Request set  actual_approver ='"+user.getEmployeeNo()+"', Approved_Persons=pending_approver, Last_approver=pending_approver,Pending_approver='',Comments=''," +
		                         		  " approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' and Pending_approver in (select hr_no from ESS_CANCEL_APPR where Location ='"+EmpLoc(empID)+"')"
		                         		  		+ " and Req_Type='Permission' ";
						int upd=ad.SqlExecuteUpdate(updateSql);
						
						
						String updateSql1= "update Permission_details set Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Approver_Status='1',approved_date='"+dateNow+"',rejected_date='' where request_no='"+reqId+"'";
						ad.SqlExecuteUpdate(updateSql1);
						
						
						if(!type.equalsIgnoreCase("Permission"))
						{
						///insert into manula entry
						String manualswipe="";
						String manualtype="";
						
						if(swipetype.equalsIgnoreCase("In"))
						{
							manualswipe="I";
						}
						else
						{
							manualswipe="O";
						}
						
						if(type.equalsIgnoreCase("late Coming"))
						{
							manualtype="Late";
						}
						else
						{
							manualtype=type;
						}
						
						String up="update EMP_MANUAL_SWIPE set Status_Flag=0 where pernr='"+empID+"' and Start_date='"+manualdate+"' and In_Out='"+manualswipe+"'";
					    int s1d= ad.SqlExecuteUpdate(up);
					    
					    String s ="insert into EMP_MANUAL_SWIPE(Pernr,Start_date,In_Out,Start,Lost_Entry_Reason_Type,Remarks,Date,Time,Username,Created_date,Status_Flag) "
					    		+ "values('"+empID+"','"+manualdate+"', '"+manualswipe+"','"+getrailwaytime(inTime)+"', '"+manualtype+"','User Request',getdate(),getdate(),'"+user.getEmployeeNo()+"',getdate(),'1')";
						
						int k = ad.SqlExecuteUpdate(s);
						
						String time= "";
						String time_Status="";
						if(swipetype .equalsIgnoreCase("In"))
						{
							
							
							time = "update EMP_IN_OUT set  day"+Integer.parseInt(c[2])+" ='"+getrailwaytime(inTime)+"' where year ='"+Integer.parseInt(c[0])+"'  "
						    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"' and in_out = 'I' ";
								 int s1 = ad.SqlExecuteUpdate(time);
								 
						if(type.equalsIgnoreCase("late") || type.equalsIgnoreCase("Missing") || type.equalsIgnoreCase("Forgot Swipe"))
						{
							
								 
							time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" ='PP'+RIGHT(day"+Integer.parseInt(c[2])+",2) where year ='"+Integer.parseInt(c[0])+"'  "
								    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
										 int s2 = ad.SqlExecuteUpdate(time_Status);	 
							
						}
						if(type.equalsIgnoreCase("early")|| type.equalsIgnoreCase("Personal"))
						{
							
						    
						    time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" ='PM'+RIGHT(day"+Integer.parseInt(c[2])+",2) where year ='"+Integer.parseInt(c[0])+"'  "
						    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
								 int s2 = ad.SqlExecuteUpdate(time_Status);
						}
						}
						else
							
						{
							
							time = "update EMP_IN_OUT set  day"+Integer.parseInt(c[2])+" ='"+getrailwaytime(inTime)+"' where year ='"+Integer.parseInt(c[0])+"'  "
						    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"' and in_out = 'O' ";
								 int s1 = ad.SqlExecuteUpdate(time);
							

							if(type.equalsIgnoreCase("late") || type.equalsIgnoreCase("Missing") || type.equalsIgnoreCase("Forgot Swipe"))
							{
								
									 
								time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" =LEFT(day"+Integer.parseInt(c[2])+",2)+'PP' where year ='"+Integer.parseInt(c[0])+"'  "
									    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
											 int s2 = ad.SqlExecuteUpdate(time_Status);	 
								
							}
							if(type.equalsIgnoreCase("early")|| type.equalsIgnoreCase("Personal"))
							{
								
							    
							    time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" =LEFT(day"+Integer.parseInt(c[2])+",2)+'PM' where year ='"+Integer.parseInt(c[0])+"'  "
							    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
									 int s2 = ad.SqlExecuteUpdate(time_Status);
							}
							
						}
						
						}
						existStatus=false;
				    }
				    
				  
				    if(count == 0 && approverPriority>0)
					    
				    {	
				    	
				    	if(totalApproverCount==approverPriority)
						{
					
						//last approver
						
						String nextApprover="";
						String getNextApprDetails="select top 1 * from ESS_CANCEL_APPR where Location ='"+EmpLoc(empID)+"' ";
			            ResultSet rsNextApprDetails=ad.selectQuery(getNextApprDetails);
			            while(rsNextApprDetails.next())
			            {
			            	nextApprover=rsNextApprDetails.getString("hr_no");
			            }
						existStatus=false;
						
						/* SimpleDateFormat ft1 = new SimpleDateFormat ("dd/MM/yyyy");
						 String submitDate = ft1.format(dNow);*/
						
						//check cancelled Record
						String updateSql= " update All_Request set  actual_approver ='"+user.getEmployeeNo()+"', Approved_Persons=pending_approver, Last_approver=pending_approver,Pending_approver='',Comments=''," +
	                   		  " approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' and Pending_approver='"+user.getEmployeeNo()+"' "
	                   		  		+ " and Req_Type='Permission'";
				int upd=ad.SqlExecuteUpdate(updateSql);
		                
		                String as="select * from ess_cancel_appr where Location='"+EmpLoc(empID)+"' ";
		        		ResultSet ads=ad.selectQuery(as);
		        		try {
		        			while(ads.next())
		        			{		
		        			
		        			String saveRecReq="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments) values (";
		    			saveRecReq = saveRecReq + "'"+reqId+"','Permission','"+empID+"','"+submit_date+"','Pending','','"+ads.getString("HR_NO")+"','','"+user.getEmployeeNo()+"','')";
		        			int p=ad.SqlExecuteUpdate(saveRecReq);
		        			
		        			EMailer email = new EMailer();
		    				
		    				String approvermail="";
		    				
		    				int	ij = email.sendMailToNextSequentialApprover(request, approvermail,reqId, "Permission",ads.getString("HR_NO"),empID);
		        			 
		        			}
		        		} catch (SQLException e) {
		        			// TODO Auto-generated catch block
		        			e.printStackTrace();
		        		}
					
					 
					
				    }
				    	else
						{
							String nextApprover="";
							String getNextApprDetails="select ApproverId from ESS_Approvers where employeeNumber='"+empID+"' and Priority='"+(approverPriority+1)+"' and essType='Leave'";
				            ResultSet rsNextApprDetails=ad.selectQuery(getNextApprDetails);
				            while(rsNextApprDetails.next())
				            {
				            	nextApprover=rsNextApprDetails.getString("ApproverId");
				            }
				            
				            
				         	
					    	String updateSql= " update All_Request set  actual_approver ='"+user.getEmployeeNo()+"', Approved_Persons=pending_approver, Last_approver=pending_approver,Pending_approver='',Comments=''," +
			                         		  " approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' and Pending_approver='"+user.getEmployeeNo()+"' "
			                         		  		+ " and Req_Type='Permission'";
							int upd=ad.SqlExecuteUpdate(updateSql);
				            
				            String saveRecReq="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments) values (";
			    			saveRecReq = saveRecReq + "'"+reqId+"','Permission','"+empID+"','"+submit_date+"','Pending','','"+nextApprover+"','','"+user.getEmployeeNo()+"','')";
			        			int p=ad.SqlExecuteUpdate(saveRecReq);
			        			
			        			EMailer email = new EMailer();
			    				
			    				String approvermail="";
			    				
			    				int	ij = email.sendMailToNextSequentialApprover(request, approvermail,reqId, "Permission",nextApprover,empID);
			        			 
			    				existStatus=false;
						}
				    }
					
				
			}
				if(dataFlowType.equalsIgnoreCase("parallel"))
				{

					

					int approverPriority=0;
					String approver="";
					String papprover1="";
					String papprover2="";
					
					String getApprPriority="select * from ESS_Approvers where employeeNumber='"+empID+"' and (ApproverId='"+user.getEmployeeNo()+"' or parallel_approver1='"+user.getEmployeeNo()+"' or parallel_approver2='"+user.getEmployeeNo()+"') and essType='Leave' and priority=1";
					ResultSet rsApprPriority=ad.selectQuery(getApprPriority);
					if(rsApprPriority.next())
					{
						approverPriority=rsApprPriority.getInt("Priority");
						approver=rsApprPriority.getString("ApproverId");
						papprover1=rsApprPriority.getString("Parallel_Approver1");
						papprover2=rsApprPriority.getString("Parallel_Approver2");
					}
					
					
				    int count =0 ;
					String sj="";
				    if(!approver.equalsIgnoreCase(""))
					 sj = "select case when count(*) >1 then 1 else count(*) end from ESS_CANCEL_APPR where Location ='"+EmpLoc(empID)+"' and (hr_no = '"+approver+"' or  hr_no = '"+papprover1+"' or  hr_no = '"+papprover2+"')   ";
				    else
				    	 sj = "select case when count(*) >1 then 1 else count(*) end from ESS_CANCEL_APPR where Location ='"+EmpLoc(empID)+"' and hr_no = '"+user.getEmployeeNo()+"'   ";
				    	
				   
				    ResultSet rsk = ad.selectQuery(sj);
				    if(rsk.next())
				    {
				    	count = rsk.getInt(1);
				    }
					
				    if(count == 1 && approverPriority==1)
				    {

				    	
				    	
				    	
				    	String updateSql= " update All_Request set  actual_approver ='"+user.getEmployeeNo()+"', Approved_Persons=pending_approver, Last_approver=pending_approver,Pending_approver='',Comments=''," +
		                         		  " approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' "
		                         		  		+ " and Req_Type='Permission'";
						int upd=ad.SqlExecuteUpdate(updateSql);
						
						
						String updateSql1= "update Permission_details set Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Approver_Status='1',approved_date='"+dateNow+"',rejected_date='' where request_no='"+reqId+"'";
						ad.SqlExecuteUpdate(updateSql1);
						
						if(!type.equalsIgnoreCase("Permission"))
						{
						
						///insert into manula entry
						String manualswipe="";
						String manualtype="";
						
						if(swipetype.equalsIgnoreCase("In"))
						{
							manualswipe="I";
						}
						else
						{
							manualswipe="O";
						}
						
						if(type.equalsIgnoreCase("late Coming"))
						{
							manualtype="Late";
						}
						else
						{
							manualtype=type;
						}
						
						String up="update EMP_MANUAL_SWIPE set Status_Flag=0 where pernr='"+empID+"' and Start_date='"+manualdate+"' and In_Out='"+manualswipe+"'";
					    int s1d= ad.SqlExecuteUpdate(up);
					    
					    String s ="insert into EMP_MANUAL_SWIPE(Pernr,Start_date,In_Out,Start,Lost_Entry_Reason_Type,Remarks,Date,Time,Username,Created_date,Status_Flag) "
					    		+ "values('"+empID+"','"+manualdate+"', '"+manualswipe+"','"+getrailwaytime(inTime)+"', '"+manualtype+"','User Request',getdate(),getdate(),'"+user.getEmployeeNo()+"',getdate(),'1')";
						
						int k = ad.SqlExecuteUpdate(s);
						
						String time= "";
						String time_Status="";
						if(swipetype .equalsIgnoreCase("In"))
						{
							
							
							time = "update EMP_IN_OUT set  day"+Integer.parseInt(c[2])+" ='"+getrailwaytime(inTime)+"' where year ='"+Integer.parseInt(c[0])+"'  "
						    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"' and in_out = 'I' ";
								 int s1 = ad.SqlExecuteUpdate(time);
								 
						if(type.equalsIgnoreCase("late") || type.equalsIgnoreCase("Missing") || type.equalsIgnoreCase("Forgot Swipe"))
						{
							
								 
							time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" ='PP'+RIGHT(day"+Integer.parseInt(c[2])+",2) where year ='"+Integer.parseInt(c[0])+"'  "
								    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
										 int s2 = ad.SqlExecuteUpdate(time_Status);	 
							
						}
						if(type.equalsIgnoreCase("early")|| type.equalsIgnoreCase("Personal"))
						{
							
						    
						    time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" ='PM'+RIGHT(day"+Integer.parseInt(c[2])+",2) where year ='"+Integer.parseInt(c[0])+"'  "
						    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
								 int s2 = ad.SqlExecuteUpdate(time_Status);
						}
						}
						else
							
						{
							
							time = "update EMP_IN_OUT set  day"+Integer.parseInt(c[2])+" ='"+getrailwaytime(inTime)+"' where year ='"+Integer.parseInt(c[0])+"'  "
						    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"' and in_out = 'O' ";
								 int s1 = ad.SqlExecuteUpdate(time);
							

							if(type.equalsIgnoreCase("late") || type.equalsIgnoreCase("Missing") || type.equalsIgnoreCase("Forgot Swipe"))
							{
								
									 
								time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" =LEFT(day"+Integer.parseInt(c[2])+",2)+'PP' where year ='"+Integer.parseInt(c[0])+"'  "
									    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
											 int s2 = ad.SqlExecuteUpdate(time_Status);	 
								
							}
							if(type.equalsIgnoreCase("early")|| type.equalsIgnoreCase("Personal"))
							{
								
							    
							    time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" =LEFT(day"+Integer.parseInt(c[2])+",2)+'PM' where year ='"+Integer.parseInt(c[0])+"'  "
							    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
									 int s2 = ad.SqlExecuteUpdate(time_Status);
							}
							
						}
						
						}
						existStatus=false;	
				    }
				    
				    if(count == 1 && approverPriority==0 )
				    {

				    	String updateSql= " update All_Request set  actual_approver ='"+user.getEmployeeNo()+"', Approved_Persons=pending_approver, Last_approver=pending_approver,Pending_approver='',Comments=''," +
		                         		  " approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' and Pending_approver in (select hr_no from ESS_CANCEL_APPR where Location ='"+EmpLoc(empID)+"')"
		                         		  		+ " and Req_Type='Permission'";
						int upd=ad.SqlExecuteUpdate(updateSql);
						
						
						
						
						  String updateSql1= "update Permission_details set Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Approver_Status='1',approved_date='"+dateNow+"',rejected_date='' where request_no='"+reqId+"'";
							ad.SqlExecuteUpdate(updateSql1);
							if(!type.equalsIgnoreCase("Permission"))
							{
							
							///insert into manula entry
							String manualswipe="";
							String manualtype="";
							
							if(swipetype.equalsIgnoreCase("In"))
							{
								manualswipe="I";
							}
							else
							{
								manualswipe="O";
							}
							
							if(type.equalsIgnoreCase("late Coming"))
							{
								manualtype="Late";
							}
							else
							{
								manualtype=type;
							}
							
							String up="update EMP_MANUAL_SWIPE set Status_Flag=0 where pernr='"+empID+"' and Start_date='"+manualdate+"' and In_Out='"+manualswipe+"'";
						    int s1d= ad.SqlExecuteUpdate(up);
						    
						    String s ="insert into EMP_MANUAL_SWIPE(Pernr,Start_date,In_Out,Start,Lost_Entry_Reason_Type,Remarks,Date,Time,Username,Created_date,Status_Flag) "
						    		+ "values('"+empID+"','"+manualdate+"', '"+manualswipe+"','"+getrailwaytime(inTime)+"', '"+manualtype+"','User Request',getdate(),getdate(),'"+user.getEmployeeNo()+"',getdate(),'1')";
							
							int k = ad.SqlExecuteUpdate(s);
						
						String time= "";
						String time_Status="";
						if(swipetype .equalsIgnoreCase("In"))
						{
							
							
							time = "update EMP_IN_OUT set  day"+Integer.parseInt(c[2])+" ='"+getrailwaytime(inTime)+"' where year ='"+Integer.parseInt(c[0])+"'  "
						    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"' and in_out = 'I' ";
								 int s1 = ad.SqlExecuteUpdate(time);
								 
						if(type.equalsIgnoreCase("late") || type.equalsIgnoreCase("Missing") || type.equalsIgnoreCase("Forgot Swipe"))
						{
							
								 
							time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" ='PP'+RIGHT(day"+Integer.parseInt(c[2])+",2) where year ='"+Integer.parseInt(c[0])+"'  "
								    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
										 int s2 = ad.SqlExecuteUpdate(time_Status);	 
							
						}
						if(type.equalsIgnoreCase("early")|| type.equalsIgnoreCase("Personal"))
						{
							
						    
						    time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" ='PM'+RIGHT(day"+Integer.parseInt(c[2])+",2) where year ='"+Integer.parseInt(c[0])+"'  "
						    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
								 int s2 = ad.SqlExecuteUpdate(time_Status);
						}
						}
						else
							
						{
							
							time = "update EMP_IN_OUT set  day"+Integer.parseInt(c[2])+" ='"+getrailwaytime(inTime)+"' where year ='"+Integer.parseInt(c[0])+"'  "
						    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"' and in_out = 'O' ";
								 int s1 = ad.SqlExecuteUpdate(time);
							

							if(type.equalsIgnoreCase("late") || type.equalsIgnoreCase("Missing") || type.equalsIgnoreCase("Forgot Swipe"))
							{
								
									 
								time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" =LEFT(day"+Integer.parseInt(c[2])+",2)+'PP' where year ='"+Integer.parseInt(c[0])+"'  "
									    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
											 int s2 = ad.SqlExecuteUpdate(time_Status);	 
								
							}
							if(type.equalsIgnoreCase("early")|| type.equalsIgnoreCase("Personal"))
							{
								
							    
							    time_Status= "update EMP_IN_OUT_STATUS set day"+Integer.parseInt(c[2])+" =LEFT(day"+Integer.parseInt(c[2])+",2)+'PM' where year ='"+Integer.parseInt(c[0])+"'  "
							    		+ "and month ='"+Integer.parseInt(c[1])+"'  and pernr= '"+empID+"'  ";
									 int s2 = ad.SqlExecuteUpdate(time_Status);
							}
							
						}}
						existStatus=false;
				    }
				    if(count == 0 && approverPriority==1)
					    
				    {	
					
						//last approver
						
						String nextApprover="";
						String getNextApprDetails="select top 1 * from ESS_CANCEL_APPR where Location ='"+EmpLoc(empID)+"' ";
			            ResultSet rsNextApprDetails=ad.selectQuery(getNextApprDetails);
			            while(rsNextApprDetails.next())
			            {
			            	nextApprover=rsNextApprDetails.getString("hr_no");
			            }
						existStatus=false;
						
				    	String updateSql= " update All_Request set  actual_approver ='"+user.getEmployeeNo()+"', Approved_Persons=pending_approver, Last_approver=pending_approver,Pending_approver='',Comments=''," +
	                   		  " approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' "
	                   		  		+ " and Req_Type='Permission'";
				int upd=ad.SqlExecuteUpdate(updateSql);
		                
		                String as="select * from ess_cancel_appr where Location='"+EmpLoc(empID)+"' ";
		        		ResultSet ads=ad.selectQuery(as);
		        		try {
		        			while(ads.next())
		        			{		
		        			
		        			String saveRecReq="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments) values (";
		    			saveRecReq = saveRecReq + "'"+reqId+"','Permission','"+empID+"','"+submit_date+"','Pending','','"+ads.getString("HR_NO")+"','','"+user.getEmployeeNo()+"','')";
		        			int p=ad.SqlExecuteUpdate(saveRecReq);
		        			
		        			EMailer email = new EMailer();
		    				
		    				String approvermail="";
		    				
		    				int	ij = email.sendMailToNextSequentialApprover(request, approvermail,reqId, "Permission",ads.getString("HR_NO"),empID);
		        			 
		        			}
		        		} catch (SQLException e) {
		        			// TODO Auto-generated catch block
		        			e.printStackTrace();
		        		}
					
					 
					
				    }
				
			
					
				
				}
			if(existStatus==false){
				statusForm.setMessage2("Request is approved successfully");}
			}
		
		}
		if(reqStatus.equalsIgnoreCase("Reject"))
		{
			boolean existStatus=false;
		boolean checkStatus=false;
		int priorityCout=0;
		int totalApproverCount=0;
		String dataFlowType=""; 
		String checkESSApproverList="select count(*) from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave'";
		ResultSet rsCheckInEss=ad.selectQuery(checkESSApproverList);
		while(rsCheckInEss.next())
		{
			int number=rsCheckInEss.getInt(1);
			totalApproverCount=rsCheckInEss.getInt(1);
			if(number==0)
			{
				existStatus=false;
			}else{
				existStatus=true;
			}
		}
		if(existStatus==true){
			String getDataFlowType="select * from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave' ";
			ResultSet rsDataFlowType=ad.selectQuery(getDataFlowType);
			while(rsDataFlowType.next())
			{
				dataFlowType=rsDataFlowType.getString("reqType");
			}
			if(dataFlowType.equalsIgnoreCase("sequential"))
			{
				int approverPriority=0;
				String getApprPriority="select Priority from ESS_Approvers where employeeNumber='"+empID+"' and ApproverId='"+user.getEmployeeNo()+"' and essType='Leave'";
				ResultSet rsApprPriority=ad.selectQuery(getApprPriority);
				while(rsApprPriority.next())
				{
					approverPriority=rsApprPriority.getInt("Priority");
				}
				if(totalApproverCount==approverPriority)
				{
					//last approver
					existStatus=false;
					//check cancelled Record
	                int cancelledCount=0;
	                String getCheckCancelled="select COUNT(*) from All_Request where Req_Id='"+reqId+"' and Req_Type='Permission' and Req_Status='Cancelled'";
	                ResultSet rsCheckCancel=ad.selectQuery(getCheckCancelled);
	                while(rsCheckCancel.next())
	                {
	                	cancelledCount=rsCheckCancel.getInt(1);
	                	if(cancelledCount>0)
	                	{
	                		existStatus=true;
	                		 String updateSql= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Comments='"+statusForm.getRemark()+"'," +
	                         "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected' where Req_Id='"+reqId+"' and Req_Type='Permission'";
							 int upd=ad.SqlExecuteUpdate(updateSql);
	   							 if(upd>0)
	   							 {
	   								request.setAttribute("statusMessage2", "statusMessage2");
	   								statusForm.setMessage2("Request No "+reqId+" already has been Cancelled");
	   							 }
	                	}
	                }
				}else{
				String nextApprover="";
				String getNextApprDetails="select ApproverId from ESS_Approvers where employeeNumber='"+empID+"' and Priority='"+(approverPriority+1)+"' and essType='Leave'";
	            ResultSet rsNextApprDetails=ad.selectQuery(getNextApprDetails);
	            while(rsNextApprDetails.next())
	            {
	            	nextApprover=rsNextApprDetails.getString("ApproverId");
	            }
	            
	            //check cancelled Record
	            int cancelledCount=0;
	            String getCheckCancelled="select COUNT(*) from All_Request where Req_Id='"+reqId+"' and Req_Type='Permission' and Req_Status='Cancelled'";
	            ResultSet rsCheckCancel=ad.selectQuery(getCheckCancelled);
	            while(rsCheckCancel.next())
	            {
	            	cancelledCount=rsCheckCancel.getInt(1);
	            	if(cancelledCount>0)
	            	{
	            		existStatus=true;
	            		 String updateSql= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Comments='"+statusForm.getRemark()+"'," +
	                     "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected' where Req_Id='"+reqId+"'  and Req_Type='Permission'";
						 int upd=ad.SqlExecuteUpdate(updateSql);
							 if(upd>0)
							 {
								request.setAttribute("statusMessage2", "statusMessage2");
								statusForm.setMessage2("Request No "+reqId+" already has been Cancelled");
							 }
	            	}
	            }
	            if(cancelledCount==0){
	            String updateSql= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Comments='"+statusForm.getRemark()+"'," +
	            "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected' where Req_Id='"+reqId+"'  and Req_Type='Permission'";
				 int upd=ad.SqlExecuteUpdate(updateSql);
				 request.setAttribute("statusMessage2", "statusMessage2");
				 statusForm.setMessage2("Request has been rejected");
				 
				 String updateSql1= "update Permission_details set Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Approver_Status='2',approved_date='',rejected_date='"+dateNow+"',comments='"+statusForm.getRemark()+"' where request_no='"+reqId+"'";
					int recordChange=ad.SqlExecuteUpdate(updateSql1);
					
			  }
				}
			}
			if(dataFlowType.equalsIgnoreCase("parallel"))
			{
				//check total Approve count
				int totalApproveCount=0;
				String getTotApprCount="select count(*) from All_Request where Req_Id='"+reqId+"' and Requester_Name='"+empID+"' and Req_Status='Approved' and Req_Type='Permission'";
				ResultSet rsTotApprCount=ad.selectQuery(getTotApprCount);
				while(rsTotApprCount.next())
				{
					totalApproveCount=rsTotApprCount.getInt(1);
				}
				if(totalApproveCount==0)
				{
					//check reject count 
					int totalRejectCount=0;
					String getTotRejectCount="select count(*) from All_Request where Req_Id='"+reqId+"' and Requester_Name='"+empID+"' and Req_Status='Rejected' and Req_Type='Permission'";
					ResultSet rsTotRejCount=ad.selectQuery(getTotRejectCount);
					while(rsTotRejCount.next())
					{
						totalRejectCount=rsTotRejCount.getInt(1);
					}
					getTotRejectCount="select count(*) from All_Request where Req_Id='"+reqId+"' and Requester_Name='"+empID+"' and Req_Status='Cancelled' and Req_Type='Permission'";
					 rsTotRejCount=ad.selectQuery(getTotRejectCount);
					while(rsTotRejCount.next())
					{
						totalRejectCount=totalRejectCount+rsTotRejCount.getInt(1);
					
					}
					if(totalRejectCount==0)
					{
					 String updateSql= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Comments='"+statusForm.getRemark()+"'," +
	                    "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected' where Req_Id='"+reqId+"'  and Req_Type='Permission'";
						 int upd=ad.SqlExecuteUpdate(updateSql);
							 if(upd>0)
							 {
								request.setAttribute("statusMessage2", "statusMessage2");
								statusForm.setMessage2("Request has been rejected");
							 }
					}
					if(totalRejectCount==2)
					{
						String updateSql= "update Permission_details set Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Approver_Status='2',approved_date='',rejected_date='"+dateNow+"',comments='"+statusForm.getRemark()+"' where request_no='"+reqId+"'";
						int recordChange=ad.SqlExecuteUpdate(updateSql);
						
						String updateSql1= "update All_Request set Req_Status='Rejected', Comments='"+statusForm.getRemark()+"',approved_date='',rejected_date='"+dateNow+"',Last_Approver='"+user.getEmployeeNo()+"',Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Pending_Approver='"+user.getEmployeeNo()+"'  and Req_Type='Permission'";;
						int upd2=ad.SqlExecuteUpdate(updateSql1);
						if(upd2>0){
							request.setAttribute("statusMessage", "statusMessage");
							statusForm.setMessage("This request already has been rejected");
						}
					}
					if(totalRejectCount==3)
					{
						String updateSql= "update Permission_details set Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Approver_Status='2',approved_date='',rejected_date='"+dateNow+"',comments='"+statusForm.getRemark()+"' where request_no='"+reqId+"'";
						int recordChange=ad.SqlExecuteUpdate(updateSql);
						
						String updateSql1= "update All_Request set Req_Status='Rejected', Comments='"+statusForm.getRemark()+"',approved_date='',rejected_date='"+dateNow+"',Last_Approver='"+user.getEmployeeNo()+"',Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Pending_Approver='"+user.getEmployeeNo()+"'  and Req_Type='Permission'";;
						int upd2=ad.SqlExecuteUpdate(updateSql1);
						if(upd2>0){
							request.setAttribute("statusMessage", "statusMessage");
							statusForm.setMessage("This request already has been rejected");
						}
					}
					if(totalRejectCount==1)
					{
						existStatus=false;
						
					}
					
				}if(totalApproveCount==1){
					//no one leave request is approved
					existStatus=false;
				}
				if(totalApproveCount==2)
				{
					//show message Approve
					String updateSql1= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Comments='"+statusForm.getRemark()+"'," +
	                "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected' where Req_Id='"+reqId+"' and Req_Type='Permission'";
					 int upd=ad.SqlExecuteUpdate(updateSql1);
						 if(upd>0)
						 {
							request.setAttribute("statusMessage2", "statusMessage2");
							statusForm.setMessage2("This  request already has been  approved");
						 }
				}
				if(totalApproveCount==3)
				{
					//show message Approve
					String updateSql1= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Comments='"+statusForm.getRemark()+"'," +
	                "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected' where Req_Id='"+reqId+"' and Req_Type='Permission'";
					 int upd=ad.SqlExecuteUpdate(updateSql1);
						 if(upd>0)
						 {
							request.setAttribute("statusMessage2", "statusMessage2");
							statusForm.setMessage2("This  request already has been  approved");
						 }
				}
			}
		}
		if(existStatus==false){
			String modifyRequest="update  All_Request set Last_Approver='"+user.getEmployeeNo()+"',Approved_Persons='"+user.getEmployeeNo()+"',Req_Status='Rejected',Pending_Approver='',approved_date='',rejected_date='"+dateNow+"' where Req_Type='Permission' and Req_Id='"+reqId+"' ";	
			int statusChange=ad.SqlExecuteUpdate(modifyRequest);
			
			String updateSql= "update Permission_details set Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Approver_Status='2',approved_date='',rejected_date='"+dateNow+"',comments='"+statusForm.getRemark()+"' where request_no='"+reqId+"'";
			int recordChange=ad.SqlExecuteUpdate(updateSql);
			if(statusChange>0 && recordChange>0)
		{
		statusForm.setMessage2("Request is rejected successfully");
		
		}
		}
			
		}
		//set permission values
		int requsterID=0;
		String getRequesterId="select * from All_Request where Req_Type='Permission' and Req_Id='"+reqId+"'";
		ResultSet rsRequesterID=ad.selectQuery(getRequesterId);
		while(rsRequesterID.next())
		{
			requsterID=rsRequesterID.getInt("Requester_Name");
		}
		
		String getOnDutyDetails="select *,CONVERT(varchar(10),Created_date,103)+' '+ CONVERT(varchar(5),Created_date,108) as Created_date1 from Permission_details where request_no='"+reqId+"'";
		ResultSet rsDetails=ad.selectQuery(getOnDutyDetails);
		while(rsDetails.next())
		{
			statusForm.setRequestNo(reqId);
			statusForm.setOnDutyType("Permission");
			String date = rsDetails.getString("date");
			String a[]=date.split(" ");
			date=a[0];
			String b[]=date.split("-");
			date=b[2]+"/"+b[1]+"/"+b[0];
			statusForm.setDate(date);
			statusForm.setStartTime(rsDetails.getString("startTime"));
			statusForm.setEndTime(rsDetails.getString("endTime"));
			statusForm.setReason(rsDetails.getString("reason"));
			statusForm.setType(rsDetails.getString("type"));
			statusForm.setRequestDate(rsDetails.getString("Created_date1"));
			statusForm.setSwipetype(rsDetails.getString("swipe_type"));
		
		}
		LinkedList approverList=new LinkedList();
		String approverName="";
		String approverID="";
		String reportingMgrID="";
		String reportingMgrName="";
		String appDesig="";
		String reportMgrDesg="";
		boolean existStatus=false;
		String reqType1="";
	
		ArrayList paralist=new ArrayList();
		String checkESSApproverList="select count(*),reqType from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave' group by reqType";
		ResultSet rsCheckInEss=ad.selectQuery(checkESSApproverList);
		while(rsCheckInEss.next())
		{
			int number=rsCheckInEss.getInt(1);
			reqType=rsCheckInEss.getString("reqType");
			if(number==0)
			{
				existStatus=false;
			}else{
				existStatus=true;
			}
		}
		if(existStatus==true){
			if(reqType.equalsIgnoreCase("sequential"))
			{
			String getApproverDesig=" select priority, e.ApproverId,emp.EMP_FULLNAME,desg.DSGSTXT  from ESS_Approvers as e,emp_official_info as emp,DESIGNATION as desg " +
				" where employeeNumber='"+empID+"' and  e.ApproverId=emp.PERNR and emp.DSGID=desg.DSGID and essType='Leave' "
				+ "union "
				+ " select 10 as priority , e.hr_no ,emp.EMP_FULLNAME,desg.DSGSTXT  from ESS_CANCEL_APPR as e,emp_official_info as emp,DESIGNATION as desg  "
				+ " where e.hr_no=emp.PERNR and emp.DSGID=desg.DSGID and e.location = '"+EmpLoc(empID)+"' "
				+ " order by priority  ";
			 
			ResultSet rsA=ad.selectQuery(getApproverDesig);
				while(rsA.next())
				{
					LeaveForm lvform=new LeaveForm();
					 lvform.setApprover(rsA.getString("EMP_FULLNAME"));	
					 lvform.setAppDesig(rsA.getString("DSGSTXT"));	
					String getdetails=" select all_R.Comments,desg.DSGSTXT,emp.EMP_FULLNAME,all_R.Req_Status,all_R.approved_date," +
							"all_R.rejected_date from 	All_Request as all_R,emp_official_info as emp, DESIGNATION as desg   " +
							" where all_R.Req_Id='"+reqId+"' and all_R.Req_Type='Permission' and ((emp.PERNR=all_R.Last_Approver) or " +
							"(emp.PERNR=all_R.Pending_Approver))  and (emp.DSGID=desg.DSGID) and((Last_Approver='"+rsA.getString("ApproverId")+"') or " +
							"(Pending_Approver='"+rsA.getString("ApproverId")+"'))  and Requester_Name='"+empID+"'";
					
					ResultSet rsApproverDsg=ad.selectQuery(getdetails);
					
					while(rsApproverDsg.next())
					{
					
						String reqstatus=rsApproverDsg.getString("Req_Status");
						lvform.setStatus(rsApproverDsg.getString("Req_Status"));
						if(reqstatus.equalsIgnoreCase("Pending"))
						{
							
							 lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
							 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
							
						}
						if(reqstatus.equalsIgnoreCase("Approved"))
						{
						lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));
						 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
					   lvform.setApprovedDate(rsApproverDsg.getString("approved_date"));
						}
						
						if(reqstatus.equalsIgnoreCase("Rejected"))
						{
							  lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
							  lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
						     lvform.setApprovedDate(rsApproverDsg.getString("rejected_date"));
						}
						if(reqstatus.equalsIgnoreCase("Cancelled"))
						{
							  lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
							  lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
						     lvform.setApprovedDate(rsApproverDsg.getString("rejected_date"));
						}
						lvform.setComments(rsApproverDsg.getString("Comments"));
						
						
					
					}
					paralist.add(lvform);
				}
				
				
				
				request.setAttribute("appList", paralist);
				
			}
			if(reqType.equalsIgnoreCase("parallel"))
			{
				

				String getApproverDesig=" select priority, e.ApproverId,emp.EMP_FULLNAME,desg.DSGSTXT  from ESS_Approvers as e,emp_official_info as emp,DESIGNATION as desg " +
					" where employeeNumber='"+empID+"' and  e.ApproverId=emp.PERNR and emp.DSGID=desg.DSGID and essType='Leave'"
					+ " union "
					+ " select priority, e.Parallel_Approver1,emp.EMP_FULLNAME,desg.DSGSTXT  from ESS_Approvers as e,emp_official_info as emp,DESIGNATION as desg " +
					" where employeeNumber='"+empID+"' and  e.ApproverId=emp.PERNR and emp.DSGID=desg.DSGID and essType='Leave'"
					+ " union "
					+ " select priority, e.Parallel_Approver1,emp.EMP_FULLNAME,desg.DSGSTXT  from ESS_Approvers as e,emp_official_info as emp,DESIGNATION as desg " +
					" where employeeNumber='"+empID+"' and  e.ApproverId=emp.PERNR and emp.DSGID=desg.DSGID and essType='Leave' "
					+ " union "
					+ " select 10 as priority , e.hr_no ,emp.EMP_FULLNAME,desg.DSGSTXT  from ESS_CANCEL_APPR as e,emp_official_info as emp,DESIGNATION as desg  "
					+ " where e.hr_no=emp.PERNR and emp.DSGID=desg.DSGID and e.location = '"+EmpLoc(empID)+"' "
					+ " order by priority  ";
				 
				ResultSet rsA=ad.selectQuery(getApproverDesig);
					while(rsA.next())
					{
						LeaveForm lvform=new LeaveForm();
						 lvform.setApprover(rsA.getString("EMP_FULLNAME"));	
						 lvform.setAppDesig(rsA.getString("DSGSTXT"));	
						String getdetails=" select all_R.Comments,desg.DSGSTXT,emp.EMP_FULLNAME,all_R.Req_Status,all_R.approved_date," +
								"all_R.rejected_date from 	All_Request as all_R,emp_official_info as emp, DESIGNATION as desg   " +
								" where all_R.Req_Id='"+reqId+"' and all_R.Req_Type='Permission' and ((emp.PERNR=all_R.Last_Approver) or " +
								"(emp.PERNR=all_R.Pending_Approver))  and (emp.DSGID=desg.DSGID) and((Last_Approver='"+rsA.getString("ApproverId")+"') or " +
								"(Pending_Approver='"+rsA.getString("ApproverId")+"'))  and Requester_Name='"+empID+"'";
						
						ResultSet rsApproverDsg=ad.selectQuery(getdetails);
						
						while(rsApproverDsg.next())
						{
						
							String reqstatus=rsApproverDsg.getString("Req_Status");
							lvform.setStatus(rsApproverDsg.getString("Req_Status"));
							if(reqstatus.equalsIgnoreCase("Pending"))
							{
								
								 lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
								 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
								
							}
							if(reqstatus.equalsIgnoreCase("Approved"))
							{
							lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));
							 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
						   lvform.setApprovedDate(rsApproverDsg.getString("approved_date"));
							}
							
							if(reqstatus.equalsIgnoreCase("Rejected"))
							{
								  lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
								  lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
							     lvform.setApprovedDate(rsApproverDsg.getString("rejected_date"));
							}
							if(reqstatus.equalsIgnoreCase("Cancelled"))
							{
								  lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
								  lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
							     lvform.setApprovedDate(rsApproverDsg.getString("rejected_date"));
							}
							lvform.setComments(rsApproverDsg.getString("Comments"));
							
							
						
						}
						paralist.add(lvform);
					}
					
					
					
					request.setAttribute("appList", paralist);
					
				
				
				
				/*
				
				String getApproverDesig="  select 1 as ord ,all_R.Comments,desg.DSGSTXT,emp.EMP_FULLNAME,all_R.Req_Status,all_R.approved_date,all_R.rejected_date from " +
						"All_Request as all_R,emp_official_info as emp, DESIGNATION as desg    where all_R.Req_Id='"+reqId+"' and all_R.Req_Type='Permission' and " +
						"((emp.PERNR=all_R.Last_Approver) or (emp.PERNR=all_R.Pending_Approver))  and (emp.DSGID=desg.DSGID)"
						+ " union "
						+ " select 2 as ord ,isnull(all_R.Comments,''),desg.DSGSTXT,emp.EMP_FULLNAME,isnull(all_R.Req_Status,''),all_R.approved_date,all_R.rejected_date from emp_official_info emp, "
						+ " DESIGNATION desg ,ESS_CANCEL_APPR left outer join All_Request all_r on (all_r.Pending_Approver=ESS_CANCEL_APPR.HR_NO or all_r.Last_Approver=ESS_CANCEL_APPR.HR_NO) "
						+ " and all_r.Req_Id='"+reqId+"' and all_r.type='Permission' "
						+ " where Location='"+EmpLoc(empID)+"' and emp.PERNR=ESS_CANCEL_APPR.HR_NO and emp.DSGID=desg.DSGID  order by 1";

				    ResultSet rsApproverDsg=ad.selectQuery(getApproverDesig);
					while(rsApproverDsg.next())
					{
						LeaveForm lvform=new LeaveForm();
						String reqstatus=rsApproverDsg.getString("Req_Status");
						lvform.setStatus(rsApproverDsg.getString("Req_Status"));
						lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
						 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));	
						if(reqstatus.equalsIgnoreCase("Pending"))
						{
							
						 lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
						 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));	
							
						}
						if(reqstatus.equalsIgnoreCase("Approved"))
						{
						lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));
						 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
					   lvform.setApprovedDate(rsApproverDsg.getString("approved_date"));
						}
						
						if(reqstatus.equalsIgnoreCase("Rejected")||reqstatus.equalsIgnoreCase("Cancelled"))
						{
							  lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
							  lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
						     lvform.setApprovedDate(rsApproverDsg.getString("rejected_date"));
						}
						lvform.setComments(rsApproverDsg.getString("Comments"));
						
						
						paralist.add(lvform);
						
					}
			*/}
			request.setAttribute("appList", paralist);
		}
		if(existStatus==false){
		
		String getRepMgrDesig="select dept.DPTSTXT,desg.DSGSTXT,emp.EMP_FULLNAME from emp_official_info as emp,DEPARTMENT as dept,DESIGNATION as desg where " +
		" emp.PERNR='"+approverID+"' and emp.DPTID=dept.DPTID and emp.DSGID=desg.DSGID";
ResultSet rsRepMgrDesig=ad.selectQuery(getRepMgrDesig);
while(rsRepMgrDesig.next())
{
	LeaveForm leaveForm2=new LeaveForm();
	leaveForm2.setApptype("Approver Manager");
	leaveForm2.setApproverID(approverID);
	reportMgrDesg=rsRepMgrDesig.getString("DSGSTXT");
	reportingMgrName=rsRepMgrDesig.getString("EMP_FULLNAME");
	leaveForm2.setAppDesig(reportMgrDesg);
	leaveForm2.setApproverName(reportingMgrName);
	
	approverList.add(leaveForm2);
}
request.setAttribute("appList", approverList);

		}

		
		
	
	
	//
	
	  int count =0 ;
		String sj = "select count(*) from ESS_CANCEL_APPR where Location ='"+EmpLoc(empID)+"' and hr_no = '"+user.getEmployeeNo()+"'  ";
	    ResultSet rsk = ad.selectQuery(sj);
	    if(rsk.next())
	    {
	    	count = rsk.getInt(1);
	    	
	    }
		
	    if(count == 1)
	    {
	    	  ArrayList llist = new ArrayList();
			    ArrayList punchlist = new ArrayList();
			    String sqlfromdate="";
			    
			    String from[]=statusForm.getDate().split("/");
			    sqlfromdate=from[2]+"-"+from[1]+"-"+from[0]; 
			    
			    
	//punch rtimings
			    
			    

				//Attendance

				SAPAttendenceDAO dao = new SAPAttendenceDAO();

				




					String s9 = " select emp_official_info.pernr,date,convert(varchar(11),date,106) as date1,left(DATENAME(WEEKDAY,date),3) as day,left(In_time,5) as intime,left(out_time,5) as outtime,"
							+ "left(status,2) as instatus,right(status,2) as outstatus,shift from Report_Daily_wise,emp_official_info where emp_official_info.PERNR=Report_Daily_wise.Pernr and emp_official_info.LOCID=Report_Daily_wise.Location and  emp_official_info.Pernr='"+empID+"' and date='"+sqlfromdate+"'  ";
					ResultSet rs9 = ad.selectQuery(s9);
					try {
						while(rs9.next())
						{
							
							SAPAttendenceForm help = new SAPAttendenceForm();
							help.setEmployeeNo(rs9.getString("pernr"));
							help.setDate(rs9.getString("date1"));
							help.setDay(rs9.getString("day"));
							help.setiNTIME(rs9.getString("intime"));
							help.setoUTTIME(rs9.getString("outtime"));
							help.setiNSTATUS(rs9.getString("instatus"));
							help.setoUTSTATUS(rs9.getString("outstatus"));
							help.setShift(rs9.getString("shift"));
							punchlist.add(help);
							
							
				    	}
					    	

					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					request.setAttribute("punchlist", punchlist);
			    
			    
				//Employee Late Count List
				String query1="select CONVERT(varchar(10),Start_date,103) as Startdate ,EMP_MANUAL_SWIPE. *,emp_official_info.EMP_FULLNAME,CONVERT(varchar(10),EMP_MANUAL_SWIPE.Created_date,103)+' '+ CONVERT(varchar(5),EMP_MANUAL_SWIPE.Created_date,108) as Created_date1"
						+ " from EMP_MANUAL_SWIPE,emp_official_info where EMP_MANUAL_SWIPE.Pernr=emp_official_info.pernr and EMP_MANUAL_SWIPE.pernr= '"+empID+"' and month(start_date) = month('"+sqlfromdate+"') "
								+ "and month(start_date) = month('"+sqlfromdate+"') order by date desc ";
				ResultSet r2sk = ad.selectQuery(query1);
				try {
					while(r2sk.next())
					{ 
						HRApprovalForm help1 = new HRApprovalForm();
						help1.setEmployeeno(r2sk.getString("pernr"));
						help1.setEmployeeName(r2sk.getString("EMP_FULLNAME"));
						help1.setStartDate(r2sk.getString("Startdate"));
						if(r2sk.getString("in_out").equalsIgnoreCase("I"))
							help1.setSwipe_Type("IN");	
						if(r2sk.getString("in_out").equalsIgnoreCase("O"))
						help1.setSwipe_Type("OUT");
						help1.setReason_Type(r2sk.getString("lost_entry_reason_Type"));
						help1.setTime(r2sk.getString("start"));
						help1.setRemarks(r2sk.getString("remarks"));
						help1.setDate(r2sk.getString("Created_date1"));
						llist.add(help1);

					}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				request.setAttribute("llist", llist);
				
	    }
	    
	}catch (Exception e) {
		e.printStackTrace();
	}

	
		
		return mapping.findForward("PermissionDetails");
	}
	public ActionForward statusChangeOnDuty(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
	{	ApprovalsForm statusForm=(ApprovalsForm) form;
	EssDao ad=new EssDao();
	HttpSession session=request.getSession();
	UserInfo user=(UserInfo)session.getAttribute("user");
	if(user==null){
		request.setAttribute("message","Session Expried! Try to Login again!");
		return mapping.findForward("displayiFrameSession");
	}
	String reqId = request.getParameter("reqId");
	MainDao exeQry = new MainDao();
	String reqType = statusForm.getReqRequstType();
	statusForm.setRequestType(reqType);
	String reqStatus = request.getParameter("status");
	String filterBy=statusForm.getSelectedFilter();
	statusForm.setSelectedFilter(filterBy);
statusForm.setReqRequstType(reqType);
int totalRecords=statusForm.getTotalRecords();//21
int startRecord=statusForm.getStartRecord();//11
int endRecord=statusForm.getEndRecord();	


statusForm.setTotalRecords(totalRecords);
statusForm.setStartRecord(startRecord);
statusForm.setEndRecord(endRecord);
String empID="";
String submit_date="";
try{
Date dNow = new Date( );
 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS");
String dateNow = ft.format(dNow);
String getLeaveDetails="select * from OnDuty_details where request_no='"+reqId+"'"; 
ResultSet rsLeave=ad.selectQuery(getLeaveDetails);
while(rsLeave.next())
{
	empID=rsLeave.getString("user_id");
	submit_date=rsLeave.getString("submit_date");
	
}
if(reqStatus.equalsIgnoreCase("Approve")){
	boolean existStatus=false;
	
	 dNow = new Date( );
	 ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS");
	 dateNow = ft.format(dNow);
	boolean checkStatus=false;
	

	
	
	int priorityCout=0;
	int totalApproverCount=0;
	String dataFlowType=""; 
	String checkESSApproverList="select count(*) from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave'";
	ResultSet rsCheckInEss=ad.selectQuery(checkESSApproverList);
	while(rsCheckInEss.next())
	{
		int number=rsCheckInEss.getInt(1);
		totalApproverCount=rsCheckInEss.getInt(1);
		if(number==0)
		{
			existStatus=false;
		}else{
			existStatus=true;
		}
	}
	if(existStatus==true){
		String getDataFlowType="select * from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave' ";
		ResultSet rsDataFlowType=ad.selectQuery(getDataFlowType);
		while(rsDataFlowType.next())
		{
			dataFlowType=rsDataFlowType.getString("reqType");
		}
		if(dataFlowType.equalsIgnoreCase("sequential"))
		{
			int approverPriority=0;
			String getApprPriority="select Priority from ESS_Approvers where employeeNumber='"+empID+"' and ApproverId='"+user.getEmployeeNo()+"' and essType='Leave'";
			ResultSet rsApprPriority=ad.selectQuery(getApprPriority);
			while(rsApprPriority.next())
			{
				approverPriority=rsApprPriority.getInt("Priority");
			}
			if(totalApproverCount==approverPriority)
			{
				//last approver
				existStatus=false;
				//check cancelled Record
                int cancelledCount=0;
                String getCheckCancelled="select COUNT(*) from All_Request where Req_Id='"+reqId+"' and Req_Type='On Duty' and Req_Status='Cancelled'";
                ResultSet rsCheckCancel=ad.selectQuery(getCheckCancelled);
                while(rsCheckCancel.next())
                {
                	cancelledCount=rsCheckCancel.getInt(1);
                	if(cancelledCount>0)
                	{
                		existStatus=true;
                		 String updateSql= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Comments='"+statusForm.getRemark()+"'," +
                         "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' and Pending_approver='"+user.getEmployeeNo()+"' and Req_Type='On Duty'";
						 int upd=ad.SqlExecuteUpdate(updateSql);
   							 if(upd>0)
   							 {
   								request.setAttribute("statusMessage2", "statusMessage2");
							statusForm.setMessage2("This Request already has been Cancelled");
   							 }
                	}
                }
			}else{
			String nextApprover="";
			String getNextApprDetails="select ApproverId from ESS_Approvers where employeeNumber='"+empID+"' and Priority='"+(approverPriority+1)+"' and essType='Leave'";
            ResultSet rsNextApprDetails=ad.selectQuery(getNextApprDetails);
            while(rsNextApprDetails.next())
            {
            	nextApprover=rsNextApprDetails.getString("ApproverId");
            }
            
            //check cancelled Record
            int cancelledCount=0;
            String getCheckCancelled="select COUNT(*) from All_Request where Req_Id='"+reqId+"' and Req_Type='On Duty' and Req_Status='Cancelled'";
            ResultSet rsCheckCancel=ad.selectQuery(getCheckCancelled);
            while(rsCheckCancel.next())
            {
            	cancelledCount=rsCheckCancel.getInt(1);
            	if(cancelledCount>0)
            	{
            		existStatus=true;
            		 String updateSql= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Comments='"+statusForm.getRemark()+"'," +
                     "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' and Pending_approver='"+user.getEmployeeNo()+"' and Req_Type='On Duty'";
					 int upd=ad.SqlExecuteUpdate(updateSql);
						 if(upd>0)
						 {
							request.setAttribute("statusMessage2", "statusMessage2");
						statusForm.setMessage2("This Request already has been Cancelled");
						 }
            	}
            }
            if(cancelledCount==0){
            String updateSql= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Comments='"+statusForm.getRemark()+"'," +
            "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' and Pending_approver='"+user.getEmployeeNo()+"' and Req_Type='On Duty'";
			 int upd=ad.SqlExecuteUpdate(updateSql);
			 request.setAttribute("statusMessage2", "statusMessage2");
				statusForm.setMessage2("Request has been approved");
				 if(upd>0)
				 {
					String saveRecReq="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments) values (";
					saveRecReq = saveRecReq + "'"+reqId+"','On Duty','"+empID+"','"+submit_date+"','Pending','','"+nextApprover+"','No','"+empID+"','')";
					 int i=ad.SqlExecuteUpdate(saveRecReq);
						ad.connClose();
					 EMailer email = new EMailer();
					 int j=email.sendMailToNextSequentialApprover(request, "", reqId, "On Duty",nextApprover,empID);
				 }
		  }
			}
		}
		if(dataFlowType.equalsIgnoreCase("parallel"))
		{
			String frstapp="";
			String par1app="";
			String par2app="";
			
			//Approvers
			String getNextApprDetails="select * from ESS_Approvers where employeeNumber='"+empID+"'  and essType='Leave'";
            ResultSet rsNextApprDetails=ad.selectQuery(getNextApprDetails);
            while(rsNextApprDetails.next())
            {
            	frstapp=rsNextApprDetails.getString("ApproverId");
            	par1app=rsNextApprDetails.getString("Parallel_Approver1");
            	par2app=rsNextApprDetails.getString("Parallel_Approver2");
            }
			
			
			//check total Approve count
			int totalApproveCount=0;
			String getTotApprCount="select count(*) from All_Request where Req_Id='"+reqId+"' and Requester_Name='"+empID+"' and Req_Status='Approved' and Req_Type='On Duty'";
			ResultSet rsTotApprCount=ad.selectQuery(getTotApprCount);
			while(rsTotApprCount.next())
			{
				totalApproveCount=rsTotApprCount.getInt(1);
			}
			if(totalApproveCount==0)
			{
				//check reject count 
				int totalRejectCount=0;
				String getTotRejectCount="select count(*) from All_Request where Req_Id='"+reqId+"' and Requester_Name='"+empID+"' and Req_Status='Rejected' and Req_Type='On Duty'";
				ResultSet rsTotRejCount=ad.selectQuery(getTotRejectCount);
				while(rsTotRejCount.next())
				{
					totalRejectCount=rsTotRejCount.getInt(1);
				}
				getTotRejectCount="select count(*) from All_Request where Req_Id='"+reqId+"' and Requester_Name='"+empID+"' and Req_Status='Cancelled' and Req_Type='On Duty'";
				 rsTotRejCount=ad.selectQuery(getTotRejectCount);
				while(rsTotRejCount.next())
				{
					
					totalRejectCount=totalRejectCount+rsTotRejCount.getInt(1);
				}
				if(totalRejectCount==0)
				{
				
					 String updateSql= "update All_Request set Approved_Persons='"+frstapp+"', Last_approver='"+frstapp+"',Pending_approver='',Comments='"+statusForm.getRemark()+"'," +
			                    "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Pending_approver='"+frstapp+"' and Req_Type='On Duty'";
								 int upd=ad.SqlExecuteUpdate(updateSql);
						 if(upd>0)
						 {
							request.setAttribute("statusMessage2", "statusMessage2");
						statusForm.setMessage2("Request has been approved");
						
						if(par1app==null)
						{
							par1app="";
						}
						
						if(par2app==null)
						{
							par2app="";
						}
						
						if(!par1app.equalsIgnoreCase(""))
						{
							 String updateSql1= "update All_Request set Approved_Persons='"+par1app+"', Last_approver='"+par1app+"',Pending_approver='',Comments='"+statusForm.getRemark()+"'," +
					                    "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Pending_approver='"+par1app+"' and Req_Type='On Duty'";
										 int upd1=ad.SqlExecuteUpdate(updateSql1);
						}
						
						if(!par2app.equalsIgnoreCase(""))
						{
							 String updateSql1= "update All_Request set Approved_Persons='"+par2app+"', Last_approver='"+par2app+"',Pending_approver='',Comments='"+statusForm.getRemark()+"'," +
					                    "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Pending_approver='"+par2app+"' and Req_Type='On Duty'";
										 int upd1=ad.SqlExecuteUpdate(updateSql1);
						}
						
						existStatus=false;
						
						 }
				}
				if(totalRejectCount==2)
				{
					String updateSql= "update OnDuty_details set Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',OnDuty_status='2',Approver_Status='Rejected',approved_date='',rejected_date='"+dateNow+"',comments='"+statusForm.getRemark()+"' where request_no='"+reqId+"'";
					int recordChange=ad.SqlExecuteUpdate(updateSql);
					
					String updateSql1= "update All_Request set Req_Status='Approved', Comments='"+statusForm.getRemark()+"',approved_date='"+dateNow+"',rejected_date='',Last_Approver='"+user.getEmployeeNo()+"',Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Pending_Approver='"+user.getEmployeeNo()+"'  and Req_Type='On Duty'";;
					int upd2=ad.SqlExecuteUpdate(updateSql1);
					if(upd2>0){
						request.setAttribute("statusMessage", "statusMessage");
						statusForm.setMessage("This request already has been rejected");
					}
				}
			}if(totalApproveCount==1){
				//no one leave request is approved
				existStatus=false;
			}
			if(totalApproveCount==2)
			{
				
				//show message Approve
				String updateSql1= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Comments='"+statusForm.getRemark()+"'," +
                "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' and Pending_approver='"+user.getEmployeeNo()+"' and Req_Type='On Duty'";
				 int upd=ad.SqlExecuteUpdate(updateSql1);
					 if(upd>0)
					 {
						request.setAttribute("statusMessage2", "statusMessage2");
					statusForm.setMessage2("This  request already has been  approved");
					 }
			}
		}
	}
	if(existStatus==false){
		
		String updateSql= "update OnDuty_details set Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',OnDuty_status='1',Approver_Status='Approved',approved_date='"+dateNow+"',rejected_date='',comments='"+statusForm.getRemark()+"' where request_no='"+reqId+"'";
		int recordChange=ad.SqlExecuteUpdate(updateSql);
	  String updateSql1= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='', Comments='"+statusForm.getRemark()+"',approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' and Pending_approver='"+user.getEmployeeNo()+"' and Req_Type='On Duty'";
		  int upd=ad.SqlExecuteUpdate(updateSql1);
		
		if(upd>0){
			request.setAttribute("statusMessage2", "statusMessage2");
			statusForm.setMessage2("Request has been approved");
		}
	}
	}
if(reqStatus.equalsIgnoreCase("Reject"))
{
	boolean existStatus=false;
	boolean checkStatus=false;
	int priorityCout=0;
	int totalApproverCount=0;
	String dataFlowType=""; 
	String checkESSApproverList="select count(*) from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave'";
	ResultSet rsCheckInEss=ad.selectQuery(checkESSApproverList);
	while(rsCheckInEss.next())
	{
		int number=rsCheckInEss.getInt(1);
		totalApproverCount=rsCheckInEss.getInt(1);
		if(number==0)
		{
			existStatus=false;
		}else{
			existStatus=true;
		}
	}
	if(existStatus==true){
		String getDataFlowType="select * from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave' ";
		ResultSet rsDataFlowType=ad.selectQuery(getDataFlowType);
		while(rsDataFlowType.next())
		{
			dataFlowType=rsDataFlowType.getString("reqType");
		}
		if(dataFlowType.equalsIgnoreCase("sequential"))
		{
			int approverPriority=0;
			String getApprPriority="select Priority from ESS_Approvers where employeeNumber='"+empID+"' and ApproverId='"+user.getEmployeeNo()+"' and essType='Leave'";
			ResultSet rsApprPriority=ad.selectQuery(getApprPriority);
			while(rsApprPriority.next())
			{
				approverPriority=rsApprPriority.getInt("Priority");
			}
			if(totalApproverCount==approverPriority)
			{
				//last approver
				existStatus=false;
				//check cancelled Record
                int cancelledCount=0;
                String getCheckCancelled="select COUNT(*) from All_Request where Req_Id='"+reqId+"' and Req_Type='On Duty' and Req_Status='Cancelled'";
                ResultSet rsCheckCancel=ad.selectQuery(getCheckCancelled);
                while(rsCheckCancel.next())
                {
                	cancelledCount=rsCheckCancel.getInt(1);
                	if(cancelledCount>0)
                	{
                		existStatus=true;
                		 String updateSql= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Comments='"+statusForm.getRemark()+"'," +
                         "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected' where Req_Id='"+reqId+"' and Pending_approver='"+user.getEmployeeNo()+"' and Req_Type='On Duty'";
						 int upd=ad.SqlExecuteUpdate(updateSql);
   							 if(upd>0)
   							 {
   								request.setAttribute("statusMessage2", "statusMessage2");
   								statusForm.setMessage2("Request No "+reqId+" already has been Cancelled");
   							 }
                	}
                }
			}else{
			String nextApprover="";
			String getNextApprDetails="select ApproverId from ESS_Approvers where employeeNumber='"+empID+"' and Priority='"+(approverPriority+1)+"' and essType='Leave'";
            ResultSet rsNextApprDetails=ad.selectQuery(getNextApprDetails);
            while(rsNextApprDetails.next())
            {
            	nextApprover=rsNextApprDetails.getString("ApproverId");
            }
            
            //check cancelled Record
            int cancelledCount=0;
            String getCheckCancelled="select COUNT(*) from All_Request where Req_Id='"+reqId+"' and Req_Type='On Duty' and Req_Status='Cancelled'";
            ResultSet rsCheckCancel=ad.selectQuery(getCheckCancelled);
            while(rsCheckCancel.next())
            {
            	cancelledCount=rsCheckCancel.getInt(1);
            	if(cancelledCount>0)
            	{
            		existStatus=true;
            		 String updateSql= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Comments='"+statusForm.getRemark()+"'," +
                     "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected' where Req_Id='"+reqId+"' and Pending_approver='"+user.getEmployeeNo()+"' and Req_Type='On Duty'";
					 int upd=ad.SqlExecuteUpdate(updateSql);
						 if(upd>0)
						 {
							request.setAttribute("statusMessage2", "statusMessage2");
							statusForm.setMessage2("Request No "+reqId+" already has been Cancelled");
						 }
            	}
            }
            if(cancelledCount==0){
            String updateSql= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Comments='"+statusForm.getRemark()+"'," +
            "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected' where Req_Id='"+reqId+"' and Pending_approver='"+user.getEmployeeNo()+"' and Req_Type='On Duty'";
			 int upd=ad.SqlExecuteUpdate(updateSql);
			 request.setAttribute("statusMessage2", "statusMessage2");
			 statusForm.setMessage2("Request has been rejected");
			 
			 String updateSql1= "update OnDuty_details set Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',OnDuty_status='2',Approver_Status='Rejected',approved_date='',rejected_date='"+dateNow+"',comments='"+statusForm.getRemark()+"' where request_no='"+reqId+"'";
				int recordChange=ad.SqlExecuteUpdate(updateSql1);
				
		  }
			}
		}
		if(dataFlowType.equalsIgnoreCase("parallel"))
		{
			
			String frstapp="";
			String par1app="";
			String par2app="";
			
			//Approvers
			String getNextApprDetails="select * from ESS_Approvers where employeeNumber='"+empID+"'  and essType='Leave'";
            ResultSet rsNextApprDetails=ad.selectQuery(getNextApprDetails);
            while(rsNextApprDetails.next())
            {
            	frstapp=rsNextApprDetails.getString("ApproverId");
            	par1app=rsNextApprDetails.getString("Parallel_Approver1");
            	par2app=rsNextApprDetails.getString("Parallel_Approver2");
            }
			
			//check total Approve count
			int totalApproveCount=0;
			String getTotApprCount="select count(*) from All_Request where Req_Id='"+reqId+"' and Requester_Name='"+empID+"' and Req_Status='Approved' and Req_Type='On Duty'";
			ResultSet rsTotApprCount=ad.selectQuery(getTotApprCount);
			while(rsTotApprCount.next())
			{
				totalApproveCount=rsTotApprCount.getInt(1);
			}
			if(totalApproveCount==0)
			{
				//check reject count 
				int totalRejectCount=0;
				String getTotRejectCount="select count(*) from All_Request where Req_Id='"+reqId+"' and Requester_Name='"+empID+"' and Req_Status='Rejected' and Req_Type='On Duty'";
				ResultSet rsTotRejCount=ad.selectQuery(getTotRejectCount);
				while(rsTotRejCount.next())
				{
					totalRejectCount=rsTotRejCount.getInt(1);
				}
				getTotRejectCount="select count(*) from All_Request where Req_Id='"+reqId+"' and Requester_Name='"+empID+"' and Req_Status='Cancelled' and Req_Type='On Duty'";
				 rsTotRejCount=ad.selectQuery(getTotRejectCount);
				while(rsTotRejCount.next())
				{
					totalRejectCount=totalRejectCount+rsTotRejCount.getInt(1);
				
				}
				if(totalRejectCount==0)
				{
					String updateSql= "update All_Request set Approved_Persons='"+frstapp+"', Last_approver='"+frstapp+"',Pending_approver='',Comments='"+statusForm.getRemark()+"'," +
		                    "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Pending_approver='"+frstapp+"' and Req_Type='On Duty'";
							 int upd=ad.SqlExecuteUpdate(updateSql);
						 if(upd>0)
						 {
							request.setAttribute("statusMessage2", "statusMessage2");
							statusForm.setMessage2("Request has been rejected");
							
							if(par1app==null)
							{
								par1app="";
							}
							
							if(par2app==null)
							{
								par2app="";
							}
							if(!par1app.equalsIgnoreCase(""))
							{
								 String updateSql1= "update All_Request set Approved_Persons='"+par1app+"', Last_approver='"+par1app+"',Pending_approver='',Comments='"+statusForm.getRemark()+"'," +
						                    "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Pending_approver='"+par1app+"' and Req_Type='On Duty'";
											 int upd1=ad.SqlExecuteUpdate(updateSql1);
							}
							
							if(!par2app.equalsIgnoreCase(""))
							{
								 String updateSql1= "update All_Request set Approved_Persons='"+par2app+"', Last_approver='"+par2app+"',Pending_approver='',Comments='"+statusForm.getRemark()+"'," +
						                    "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Pending_approver='"+par2app+"' and Req_Type='On Duty'";
											 int upd1=ad.SqlExecuteUpdate(updateSql1);
							}
							
							existStatus=false;
						 }
				}
				if(totalRejectCount==2)
				{
					String updateSql= "update OnDuty_details set Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',OnDuty_status='2',Approver_Status='Rejected',approved_date='',rejected_date='"+dateNow+"',comments='' where request_no='"+reqId+"'";
					int recordChange=ad.SqlExecuteUpdate(updateSql);
					
					String updateSql1= "update All_Request set Req_Status='Rejected', Comments='"+statusForm.getRemark()+"',approved_date='',rejected_date='"+dateNow+"',Last_Approver='"+user.getEmployeeNo()+"',Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Pending_Approver='"+user.getEmployeeNo()+"'  and Req_Type='On Duty'";;
					int upd2=ad.SqlExecuteUpdate(updateSql1);
					if(upd2>0){
						request.setAttribute("statusMessage", "statusMessage");
						statusForm.setMessage("This request already has been rejected");
					}
				}
				if(totalRejectCount==1)
				{
					existStatus=false;
					
				}
				
			}if(totalApproveCount==1){
				//no one leave request is approved
				existStatus=false;
			}
			if(totalApproveCount==2)
			{
				//show message Approve
				String updateSql1= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Comments='"+statusForm.getRemark()+"'," +
                "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected' where Req_Id='"+reqId+"' and Pending_approver='"+user.getEmployeeNo()+"' and Req_Type='On Duty'";
				 int upd=ad.SqlExecuteUpdate(updateSql1);
					 if(upd>0)
					 {
						request.setAttribute("statusMessage2", "statusMessage2");
						statusForm.setMessage2("This  request already has been  approved");
					 }
			}
		}
	}
	if(existStatus==false){
		String modifyRequest="update  All_Request set Last_Approver='"+user.getEmployeeNo()+"',Approved_Persons='"+user.getEmployeeNo()+"',Req_Status='Rejected',Pending_Approver='',approved_date='',Comments='"+statusForm.getRemark()+"',rejected_date='"+dateNow+"' where Req_Type='On Duty' and Req_Id='"+reqId+"' and Approved_Persons='"+user.getEmployeeNo()+"'";	
		int statusChange=ad.SqlExecuteUpdate(modifyRequest);
		
		String updateSql= "update OnDuty_details set Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',OnDuty_status='2',Approver_Status='Rejected',approved_date='',rejected_date='"+dateNow+"',comments='"+statusForm.getRemark()+"' where request_no='"+reqId+"'";
		int recordChange=ad.SqlExecuteUpdate(updateSql);
		if(statusChange>0 && recordChange>0)
	{
	statusForm.setMessage2("Request has been rejected.");
	
	}
	}
	
	
	
}


//set onduty values
int requsterID=0;
String getRequesterId="select * from All_Request where Req_Type='On Duty' and Req_Id='"+reqId+"'";
ResultSet rsRequesterID=ad.selectQuery(getRequesterId);
while(rsRequesterID.next())
{
	requsterID=rsRequesterID.getInt("Requester_Name");
}

String userid="";
String getOnDutyDetails="select * from OnDuty_details where request_no='"+reqId+"'";
ResultSet rsDetails=ad.selectQuery(getOnDutyDetails);
while(rsDetails.next())
{
	userid=rsDetails.getString("user_id");
	statusForm.setRequestNo(reqId);
	statusForm.setOnDutyType(rsDetails.getString("onDuty_Type"));
	statusForm.setLocationId(rsDetails.getString("location"));
	statusForm.setStartDate(EMicroUtils.display(rsDetails.getDate("start_date")));
	statusForm.setStartTime(rsDetails.getString("startTime"));
	statusForm.setEndDate(EMicroUtils.display(rsDetails.getDate("end_date")));
	statusForm.setEndTime(rsDetails.getString("endTime"));
	statusForm.setDocumentName(rsDetails.getString("documents"));
	statusForm.setReason(rsDetails.getString("reason"));
	statusForm.setRequestDate(rsDetails.getString("submit_date"));
}

String gender="";
String pernr="";
String name="";
String doj="";
String dep="";
String desg="";
String getGender="select emp.PERNR,emp.EMP_FULLNAME,emp.SEX,emp.DOJ,dep.DPTSTXT,desg.DSGSTXT from emp_official_info emp,DEPARTMENT as dep,DESIGNATION as desg where emp.PERNR='"+userid+"' and dep.DPTID=emp.DPTID and desg.DSGID=emp.DSGID";
ResultSet rsGender=ad.selectQuery(getGender);
while(rsGender.next())
{
	gender=rsGender.getString("SEX");
	pernr=rsGender.getString("PERNR");
	name=rsGender.getString("EMP_FULLNAME");
	doj=rsGender.getString("DOJ");
	dep=rsGender.getString("DPTSTXT");
	desg=rsGender.getString("DSGSTXT");
	
}

statusForm.setEmployeeNumber(pernr);
statusForm.setEmployeeName(name);
statusForm.setDepartment(dep);
statusForm.setDesignation(desg);
statusForm.setDate(doj);
String sql1="select * from onDuty_emp_documents where request_no='"+reqId+"' ";
ResultSet rs=ad.selectQuery(sql1);
OnDutyForm ondutyForm1=null;
	ArrayList a1=new ArrayList();
	while(rs.next()) {
		ondutyForm1=new OnDutyForm();
		ondutyForm1.setFileName(rs.getString("file_name"));
		ondutyForm1.setId(rs.getString("id"));
		a1.add(ondutyForm1);
	}
	
	request.setAttribute("documentDetails", a1);
	LinkedList approverList=new LinkedList();
	String approverName="";
	String approverID="";
	String reportingMgrID="";
	String reportingMgrName="";
	String appDesig="";
	String reportMgrDesg="";
	String getApprovers="select APPMGR,RPTMGR  from emp_official_info  emp where " +
	"PERNR='"+requsterID+"'  ";	
ResultSet rsApprovers=ad.selectQuery(getApprovers);
while(rsApprovers.next())
{
approverID=rsApprovers.getString("APPMGR");
reportingMgrID=rsApprovers.getString("RPTMGR");
}
boolean existStatus=false;
String reqType1="";

ArrayList paralist=new ArrayList();
String checkESSApproverList="select count(*),reqType from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave' group by reqType";
ResultSet rsCheckInEss=ad.selectQuery(checkESSApproverList);
while(rsCheckInEss.next())
{
int number=rsCheckInEss.getInt(1);
reqType=rsCheckInEss.getString("reqType");
if(number==0)
{
	existStatus=false;
}else{
	existStatus=true;
}
}
if(existStatus==true){
if(reqType.equalsIgnoreCase("sequential"))
{
String getApproverDesig=" select e.ApproverId,emp.EMP_FULLNAME,desg.DSGSTXT  from ESS_Approvers as e,emp_official_info as emp,DESIGNATION as desg " +
"where employeeNumber='"+empID+"' and  e.ApproverId=emp.PERNR and emp.DSGID=desg.DSGID and essType='Leave' order by Priority";
 
ResultSet rsA=ad.selectQuery(getApproverDesig);
	while(rsA.next())
	{
		LeaveForm lvform=new LeaveForm();
		 lvform.setApprover(rsA.getString("EMP_FULLNAME"));	
		 lvform.setAppDesig(rsA.getString("DSGSTXT"));	
		String getdetails=" select all_R.Comments,desg.DSGSTXT,emp.EMP_FULLNAME,all_R.Req_Status,all_R.approved_date," +
				"all_R.rejected_date from 	All_Request as all_R,emp_official_info as emp, DESIGNATION as desg   " +
				" where all_R.Req_Id='"+reqId+"' and all_R.Req_Type='On Duty' and ((emp.PERNR=all_R.Last_Approver) or " +
				"(emp.PERNR=all_R.Pending_Approver))  and (emp.DSGID=desg.DSGID) and((Last_Approver='"+rsA.getString("ApproverId")+"') or " +
				"(Pending_Approver='"+rsA.getString("ApproverId")+"'))  and Requester_Name='"+empID+"'";
		
		ResultSet rsApproverDsg=ad.selectQuery(getdetails);
		
		while(rsApproverDsg.next())
		{
		
			String reqstatus=rsApproverDsg.getString("Req_Status");
			lvform.setStatus(rsApproverDsg.getString("Req_Status"));
			if(reqstatus.equalsIgnoreCase("Pending"))
			{
				
				 lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
				 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
				
			}
			if(reqstatus.equalsIgnoreCase("Approved"))
			{
			lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));
			 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
		   lvform.setApprovedDate(rsApproverDsg.getString("approved_date"));
			}
			
			if(reqstatus.equalsIgnoreCase("Rejected"))
			{
				  lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
				  lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
			     lvform.setApprovedDate(rsApproverDsg.getString("rejected_date"));
			}
			if(reqstatus.equalsIgnoreCase("Cancelled"))
			{
				  lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
				  lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
			     lvform.setApprovedDate(rsApproverDsg.getString("rejected_date"));
			}
			lvform.setComments(rsApproverDsg.getString("Comments"));
			
			
		
		}
		paralist.add(lvform);
	}
	
	
	
	request.setAttribute("onduty", paralist);
	
}
if(reqType.equalsIgnoreCase("parallel"))
{
	
	String getApproverDesig="  select all_R.Comments,desg.DSGSTXT,emp.EMP_FULLNAME,all_R.Req_Status,all_R.approved_date,all_R.rejected_date from " +
			"All_Request as all_R,emp_official_info as emp, DESIGNATION as desg    where all_R.Req_Id='"+reqId+"' and all_R.Req_Type='On Duty' and " +
			"((emp.PERNR=all_R.Last_Approver) or (emp.PERNR=all_R.Pending_Approver))  and (emp.DSGID=desg.DSGID) ";
	    ResultSet rsApproverDsg=ad.selectQuery(getApproverDesig);
		while(rsApproverDsg.next())
		{
			LeaveForm lvform=new LeaveForm();
			String reqstatus=rsApproverDsg.getString("Req_Status");
			lvform.setStatus(rsApproverDsg.getString("Req_Status"));
			if(reqstatus.equalsIgnoreCase("Pending"))
			{
				
			 lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
			 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));	
				
			}
			if(reqstatus.equalsIgnoreCase("Approved"))
			{
			lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));
			 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
		   lvform.setApprovedDate(rsApproverDsg.getString("approved_date"));
			}
			
			if(reqstatus.equalsIgnoreCase("Rejected")||reqstatus.equalsIgnoreCase("Cancelled"))
			{
				  lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
				  lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
			     lvform.setApprovedDate(rsApproverDsg.getString("rejected_date"));
			}
			lvform.setComments(rsApproverDsg.getString("Comments"));
			
			
			paralist.add(lvform);
			
		}
}
request.setAttribute("onduty", paralist);
}
if(existStatus==false){




String getRepMgrDesig="select dept.DPTSTXT,desg.DSGSTXT,emp.EMP_FULLNAME from emp_official_info as emp,DEPARTMENT as dept,DESIGNATION as desg where " +
" emp.PERNR='"+approverID+"' and emp.DPTID=dept.DPTID and emp.DSGID=desg.DSGID";
ResultSet rsRepMgrDesig=ad.selectQuery(getRepMgrDesig);
while(rsRepMgrDesig.next())
{
LeaveForm leaveForm2=new LeaveForm();
leaveForm2.setApptype("Approver Manager");
leaveForm2.setApproverID(approverID);
reportMgrDesg=rsRepMgrDesig.getString("DSGSTXT");
reportingMgrName=rsRepMgrDesig.getString("EMP_FULLNAME");
leaveForm2.setAppDesig(reportMgrDesg);
leaveForm2.setApproverName(reportingMgrName);

approverList.add(leaveForm2);
}
request.setAttribute("appList", approverList);
}

}catch (Exception e) {
	e.printStackTrace();
}

	return mapping.findForward("ondutyDetails");
	}
	public ActionForward statusChangeForCustomerRequest(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
	{
		EssDao ad=new EssDao();
		LinkedList list = new LinkedList();
		
		ApprovalsForm statusForm=(ApprovalsForm) form;
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		if(user==null){
			request.setAttribute("message","Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		String reqId = request.getParameter("reqId");
		MainDao exeQry = new MainDao();
		String reqType = statusForm.getReqRequstType();
		statusForm.setRequestType(reqType);
		String reqStatus = request.getParameter("status");
		String filterBy=statusForm.getSelectedFilter();
		statusForm.setSelectedFilter(filterBy);
	statusForm.setReqRequstType(reqType);
	int totalRecords=statusForm.getTotalRecords();//21
	int startRecord=statusForm.getStartRecord();//11
	int endRecord=statusForm.getEndRecord();	
	
	
	statusForm.setTotalRecords(totalRecords);
	statusForm.setStartRecord(startRecord);
	statusForm.setEndRecord(endRecord);
		String comments = statusForm.getRemark();
		
		LinkedList reqDetails = new LinkedList();
		reqDetails.add(0, reqId);
		reqDetails.add(1, reqType);
		//User Informtion
		String lcode = user.getPlantId();
		int user_Id = user.getId();
		String uName = user.getUserName();
		String appName = uName;
		int rowCount= 0;
		System.out.println(reqType);
		//updateStatus("Approved", reqType,reqId);
		//get the total Approvers
		rowCount = getCount("Approvers_Details", reqType);
		//check and get next approver
		
		try{
		
				Date dNow = new Date( );
				 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS");
					String dateNow = ft.format(dNow);
				String location="";
				String matGroup="";
				String approver="";
				String parllelAppr1="";
				String parllelAppr2="";
				String reqDate="";
				String reqesterID="";
				String requestNo="";
				String matType="Customer Master";
				
				matGroup="";
				int priorityCout=0;
				int checkStatus=0;
				String userRole=statusForm.getUserRole();
		
				String Customer_Type="";
				String requestDt="";
				String getMatGroup="select Customer_Type,CREATED_BY,REQUEST_DATE from CUSTOMER_MASTER_M where REQUEST_NO='"+reqId+"' ";
			 	ResultSet rsMatGrup=ad.selectQuery(getMatGroup);
			 	while(rsMatGrup.next()){
			 		matGroup=rsMatGrup.getString("Customer_Type");
			 		reqesterID=rsMatGrup.getString("CREATED_BY");
			 		requestDt=rsMatGrup.getString("REQUEST_DATE");
			 	}
			 	if(matGroup.equalsIgnoreCase("Exports"))
			 	{
			 		matGroup="Export";
			 	}
				String test="";
				String getProrityCout="select max(Priority) from Material_Approvers where   Material_Type='"+matType+"' AND Material_Group='"+matGroup+"'";
				ResultSet rsCout=ad.selectQuery(getProrityCout);
				while(rsCout.next())
				{
					priorityCout=rsCout.getInt(1);
					test=rsCout.getString(1);
				}
				if(test==null){
					getProrityCout="select max(Priority) from Material_Approvers where    Material_Type='"+matType+"' AND Material_Group=''";
					rsCout=ad.selectQuery(getProrityCout);
					while(rsCout.next())
					{
						priorityCout=rsCout.getInt(1);
					}
				}
				
				checkStatus=0;
				int apprverPriority=0;
				String getApproverDetails="select * from Material_Approvers where    Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and (Approver_Id='"+user.getEmployeeNo()+"' or Parllel_Approver_1='"+user.getEmployeeNo()+"' or Parllel_Approver_2='"+user.getEmployeeNo()+"') ";
				ResultSet rsAppDet=ad.selectQuery(getApproverDetails);
				while(rsAppDet.next())
				{
					checkStatus=1;
					apprverPriority=rsAppDet.getInt("Priority");
					approver=rsAppDet.getString("Approver_Id");
					parllelAppr1=rsAppDet.getString("Parllel_Approver_1");
					parllelAppr2=rsAppDet.getString("Parllel_Approver_2");
				}
				if(checkStatus==0)
				{
					getApproverDetails="select * from Material_Approvers where   Material_Type='"+matType+"' AND Material_Group='' and (Approver_Id='"+user.getEmployeeNo()+"' or Parllel_Approver_1='"+user.getEmployeeNo()+"' or Parllel_Approver_2='"+user.getEmployeeNo()+"') ";
					rsAppDet=ad.selectQuery(getApproverDetails);
					while(rsAppDet.next())
					{
					
						apprverPriority=rsAppDet.getInt("Priority");
						approver=rsAppDet.getString("Approver_Id");
						parllelAppr1=rsAppDet.getString("Parllel_Approver_1");
						parllelAppr2=rsAppDet.getString("Parllel_Approver_2");
					}
				}
				
				if(reqStatus.equalsIgnoreCase("Approve")){
					

					if(priorityCout==apprverPriority)
					{
						//last approver creator
						String updateStatus="update All_Request set Req_Status='Completed',Comments='"+statusForm.getComments()+"',Last_Approver='"+approver+"'," +
						"Pending_Approver='',Approved_Persons='"+approver+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and type='Customer Master' and Pending_Approver='"+approver+"'";
					    int saveStatus=0;
					    saveStatus=ad.SqlExecuteUpdate(updateStatus);
					    
					    if(!(parllelAppr1.equalsIgnoreCase("")))
					    {
					    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Completed',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr1+"'," +
								"Pending_Approver='',Approved_Persons='"+parllelAppr1+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and type='Customer Master' and Pending_Approver='"+parllelAppr1+"'";
							    ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
					    }
					    if(!(parllelAppr2.equalsIgnoreCase("")))
					    {
					    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Completed',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr2+"'," +
								"Pending_Approver='',Approved_Persons='"+parllelAppr2+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and type='Customer Master' and Pending_Approver='"+parllelAppr2+"'";
							    ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
					    }	
					    if(saveStatus>0)
					    {
					    	statusForm.setMessage2("Code completed against request no. '"+reqId+"' successfull");
					    	
					    	EMailer email=new EMailer();
							String approvermail="";
							ad.connClose();
							email.sendMailToMaterialCodeRequester(request, approvermail, reqId, "Customer Master", user.getEmployeeNo(), reqesterID, "Approve");
				
					    	
					    	 String sapCreationDate=statusForm.getSapCreationDate();
							  String b[]=sapCreationDate.split("/");
							  sapCreationDate=b[2]+"-"+b[1]+"-"+b[0];
							  
							  String sapCodeExist="";
							  String sapCodeexistNo="";
							  
							  sapCodeExist=statusForm.getSapCodeExists();
							  sapCodeexistNo=statusForm.getSapCodeExistsNo();
							  if(sapCodeExist!=null){
								  statusForm.setSapCodeExists("true");
							  }
							  if(sapCodeexistNo!=null){
								  statusForm.setSapCodeExistsNo("true");
							  }
							  
							  
							  
							  String viewType="";
								String sales=null;
								String accounts=null;
								
								sales=statusForm.getSales();
								accounts=statusForm.getAccounts();
								
								if(sales!=null&& accounts!=null){
									
									viewType="3";
								}else{
								
								if(sales!=null)
								{
									
										viewType="S";
									
								}
									if(accounts!=null){
										
											viewType="A";
										
									}
									
									
								}
									System.out.println("View Type="+viewType);
								String customerType="";
								String domestic=null;
								String exports=null;
								domestic=statusForm.getDomestic();
								exports=statusForm.getExports();
							      if(domestic!=null)
							      {
										
											customerType="Domestic";
										
							      }
									if(exports!=null)
										
									{
										
											customerType="Exports";
										
									}
									
									  sapCodeExist=statusForm.getSapCodeExists();
									  sapCodeexistNo=statusForm.getSapCodeExistsNo();
									  if(sapCodeExist!=null){
										  statusForm.setSapCodeExists("true");
									  }
									  if(sapCodeexistNo!=null){
										  statusForm.setSapCodeExists("false");
									  }
							  
							  
							  
							  //
									  String query="update CUSTOMER_MASTER_M set ACCOUNT_GROUP_ID ='"+statusForm.getAccGroupId()+"',VIEW_TYPE='"+viewType+"',Customer_Type='"+customerType+"',NAME='"+statusForm.getCustomerName()+"',ADDRESS1='"+statusForm.getAddress1()+"',ADDRESS2='"+statusForm.getAddress2()+"'," +
									  "ADDRESS3='"+statusForm.getAddress3()+"',ADDRESS4='"+statusForm.getAddress4()+"',CITY='"+statusForm.getCity()+"',PINCODE='"+statusForm.getPincode()+"',COUNTRY_ID='"+statusForm.getCountryId()+"',STATE='"+statusForm.getState()+"',LANDLINE_NO='"+statusForm.getLandlineNo()+"',MOBILE_NO='"+statusForm.getMobileNo()+"',FAX_NO='"+statusForm.getFaxNo()+"',EMAIL_ID='"+statusForm.getEmailId()+"',Customer_Group='"+statusForm.getCustomerGroup()+"',Price_Group='"+statusForm.getPriceGroup()+"',Price_List='"+statusForm.getPriceList()+"'," +
									  "Tax_Type='"+statusForm.getTaxType()+"',CURRENCY_ID='"+statusForm.getCurrencyId()+"',IS_REGD_EXCISE_Customer='"+statusForm.getTdsStatus()+"',TDS_CODE='"+statusForm.getTdsCode()+"',LST_NO='"+statusForm.getListNumber()+"',TIN_NO='"+statusForm.getTinNumber()+"',CST_NO='"+statusForm.getCstNumber()+"',PAN_No='"+statusForm.getPanNumber()+"',Service_Tax_Registration_No='"+statusForm.getServiceTaxNo()+"',IS_REGD_EXCISE_VENDOR='"+statusForm.getIsRegdExciseVender()+"',ECC_No='"+statusForm.getEccNo()+"',Excise_Reg_No='"+statusForm.getExciseRegNo()+"'," +
									  "Excise_Range='"+statusForm.getExciseRange()+"',Excise_Division='"+statusForm.getExciseDivision()+"',DLNO1='"+statusForm.getDlno1()+"',DLNO2='"+statusForm.getDlno2()+"',PAYMENT_TERM_ID='"+statusForm.getPaymentTermID()+"',ACCOUNT_CLERK_ID='"+statusForm.getAccountClerkId()+"',Approve_Status='Completed',SAP_CODE_NO='"+statusForm.getSapCodeNo()+"',SAP_CODE_EXISTS='"+statusForm.getSapCodeExists()+"',SAP_CREATION_DATE='"+sapCreationDate+"'," +
									  "SAP_CREATED_BY='"+statusForm.getSapCreatedBy()+"',last_approver='"+user.getFullName()+"',pending_approver='No',rejected_flag='',GSTIN_Number='"+statusForm.getGstinNo()+"' where  REQUEST_NO='"+reqId+"'";
									  int updateMateStatus=ad.SqlExecuteUpdate(query);
									  
									  String saveInHistory="INSERT INTO CUSTOMER_MASTER_HISTORY(REQUEST_NO,REQUEST_DATE,ACCOUNT_GROUP_ID,VIEW_TYPE,Customer_Type,NAME,ADDRESS1,ADDRESS2," +
									  "ADDRESS3,ADDRESS4,CITY,PINCODE,COUNTRY_ID,STATE,LANDLINE_NO,MOBILE_NO,FAX_NO,EMAIL_ID,Customer_Group,Price_Group,Price_List," +
									  "Tax_Type,CURRENCY_ID,IS_REGD_EXCISE_Customer,TDS_CODE,LST_NO,TIN_NO,CST_NO,PAN_No,Service_Tax_Registration_No,IS_REGD_EXCISE_VENDOR,ECC_No,Excise_Reg_No," +
									  "Excise_Range,Excise_Division,DLNO1,DLNO2,PAYMENT_TERM_ID,ACCOUNT_CLERK_ID,CREATED_DATE,CREATED_BY,Attachments,Approve_Status,cutomer_code,role,GSTIN_Number) values('"+reqId+"','"+reqDate+"','"+statusForm.getAccGroupId()+"','"+viewType+"','"+customerType+"'," +
									  "'"+statusForm.getCustomerName()+"','"+statusForm.getAddress1()+"','"+statusForm.getAddress2()+"'," +
									  "'"+statusForm.getAddress3()+"','"+statusForm.getAddress4()+"','"+statusForm.getCity()+"','"+statusForm.getPincode()+"','"+statusForm.getCountryId()+"'," +
									  "'"+statusForm.getState()+"','"+statusForm.getLandlineNo()+"','"+statusForm.getMobileNo()+"','"+statusForm.getFaxNo()+"','"+statusForm.getEmailId()+"'," +
									  "'"+statusForm.getCustomerGroup()+"','"+statusForm.getPriceGroup()+"','"+statusForm.getPriceList()+"','"+statusForm.getTaxType()+"','"+statusForm.getCurrencyId()+"','"+statusForm.getTdsStatus()+"'," +
									  "'"+statusForm.getTdsCode()+"','"+statusForm.getListNumber()+"','"+statusForm.getTinNumber()+"','"+statusForm.getCstNumber()+"','"+statusForm.getPanNumber()+"'," +
									  "'"+statusForm.getServiceTaxNo()+"','"+statusForm.getIsRegdExciseVender()+"','"+statusForm.getEccNo()+"','"+statusForm.getExciseRegNo()+"','"+statusForm.getExciseRange()+"'," +
									  "'"+statusForm.getExciseDivision()+"','"+statusForm.getDlno1()+"','"+statusForm.getDlno2()+"','"+statusForm.getPaymentTermID()+"','"+statusForm.getAccountClerkId()+"','"+dateNow+"'," +
									  "'"+user.getEmployeeNo()+"','','Created','"+statusForm.getCutomerCode()+"','Creator','"+statusForm.getGstinNo()+"')";
									  ad.SqlExecuteUpdate(saveInHistory);
									  
									  if(statusForm.getSapCodeExists().equals("false")){
							//insert sap code
						String insertCode="insert into CUSTOMER_CODES(REQUEST_NO,ACCOUNT_GROUP_ID,SAP_CODE_NO,NAME,CITY,SAP_CREATION_DATE,REQUEST_DATE,COUNTRY_ID) "
								+ "values ('"+reqId+"','"+statusForm.getAccGroupId()+"','"+statusForm.getSapCodeNo()+"','"+statusForm.getCustomerName()+"','"+statusForm.getCity()+"','"+sapCreationDate+"','"+requestDt+"','"+statusForm.getCountryId()+"')";			  
							ad.SqlExecuteUpdate(insertCode);	
									  }
					    }
					}else{
					    String nextAppr="";
					    String nextPar1="";
					    String nextPar2="";
					    checkStatus=0;
						String getNextApprover="select Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and Priority='"+(apprverPriority+1)+"'";
						ResultSet rsNextApp=ad.selectQuery(getNextApprover);
						while(rsNextApp.next())
						{  
							checkStatus=1;
							nextAppr=rsNextApp.getString("Approver_Id");
							nextPar1=rsNextApp.getString("Parllel_Approver_1");
							nextPar2=rsNextApp.getString("Parllel_Approver_2");
						}
						if(checkStatus==0)
						{
							getNextApprover="select Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' and Priority='"+(apprverPriority+1)+"'";
							rsNextApp=ad.selectQuery(getNextApprover);
							while(rsNextApp.next())
							{  
								checkStatus=1;
								nextAppr=rsNextApp.getString("Approver_Id");
								nextPar1=rsNextApp.getString("Parllel_Approver_1");
								nextPar2=rsNextApp.getString("Parllel_Approver_2");
							}
						}
					String empNo=user.getEmployeeNo();
						if(empNo.equalsIgnoreCase(approver))
						{
							String updateStatus="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+user.getEmployeeNo()+"'," +
							"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and type='Customer Master'  and Pending_Approver='"+user.getEmployeeNo()+"'";
						    int saveStatus=0;
						    saveStatus=ad.SqlExecuteUpdate(updateStatus);
						    
						    
						    
						    if(!(parllelAppr1.equalsIgnoreCase("")))
						    {
						    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr1+"'," +
									"Pending_Approver='',Approved_Persons='"+parllelAppr1+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and type='Customer Master' and Pending_Approver='"+parllelAppr1+"'";
								    ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
						    }
						    if(!(parllelAppr2.equalsIgnoreCase("")))
						    {
						    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr2+"'," +
									"Pending_Approver='',Approved_Persons='"+parllelAppr2+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and type='Customer Master' and Pending_Approver='"+parllelAppr2+"'";
								    ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
						    }
						    if(saveStatus>0)
						    {
						    	 statusForm.setMessage2("Request Is Approved Successfully");
						    	 
						    	String recordStatus="select * from All_Request where Req_Id='"+reqId+"' and Approved_Persons='"+user.getEmployeeNo()+"'";
						    	ResultSet rsRecDet=ad.selectQuery(recordStatus);
						    	while(rsRecDet.next())
						    	{
						    		requestNo=rsRecDet.getString("Requester_Name");
						    		reqDate=rsRecDet.getString("Req_Date");
						    		reqesterID=rsRecDet.getString("Requester_Name");
						    	}
						    	
						    	
						    	System.out.println(userRole);
						    	if(userRole.equalsIgnoreCase("Accounts"))
						    	{
						    	//update valuation class
						    	String updateMaterial="update CUSTOMER_MASTER_M set last_approver='"+user.getFullName()+"',pending_approver='"+nextAppr+"' where REQUEST_NO='"+reqId+"'";
						    	int check=ad.SqlExecuteUpdate(updateMaterial);
						    	}
						    	
						    	//update last Approver and Pending Approver
						    	//GET pending approvers
						    	if(!(userRole.equalsIgnoreCase("Creator")))
						    	{
						    	checkStatus=0;
						    	String pendingApprovers="";
						    	String nextApprovers="";
								getNextApprover="select emp.EMP_FULLNAME,Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers as mat,emp_official_info AS emp where Location='"+location+"'" +
										" AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
								ResultSet rsPendignApp=ad.selectQuery(getNextApprover);
								while(rsPendignApp.next())
								{  
									checkStatus=1;
									pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
								}
								if(checkStatus==0)
								{
									getNextApprover="select Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from as mat,emp_official_info AS emp  Material_Approvers where Location='"+location+"'" +
									" AND  Material_Type='"+matType+"' AND Material_Group='' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
									rsPendignApp=ad.selectQuery(getNextApprover);
									while(rsPendignApp.next())
									{  
										checkStatus=1;
										pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
									}
								}
								if(!(pendingApprovers.equalsIgnoreCase(""))){
									pendingApprovers=pendingApprovers.substring(0, (pendingApprovers.length()-2));	
								}
								
								String updateMaterial="update CUSTOMER_MASTER_M set last_approver='"+user.getFullName()+"',pending_approver='"+pendingApprovers+"',Approve_Status='In Process' where REQUEST_NO='"+reqId+"'";
						    	int check=ad.SqlExecuteUpdate(updateMaterial);
						    	}
						    	// insert record to next approver
						    	String insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
						    	" values('"+reqId+"','Customer Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextAppr+"','No','"+reqesterID+"','','"+matType+"')";
						    	ad.SqlExecuteUpdate(insertAllRequest);
						    	EMailer email = new EMailer();
								String approvermail="";
						    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Customer Master", nextAppr, reqesterID);
						    	if(!(nextPar1.equalsIgnoreCase(""))){
						    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
							    	" values('"+reqId+"','Customer Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar1+"','No','"+reqesterID+"','','"+matType+"')";
							    	ad.SqlExecuteUpdate(insertAllRequest);
							    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Customer Master", nextPar1, reqesterID);
						    	}
						    	if(!(nextPar2.equalsIgnoreCase(""))){
						    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
							    	" values('"+reqId+"','Customer Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar2+"','No','"+reqesterID+"','','"+matType+"')";
							    	ad.SqlExecuteUpdate(insertAllRequest);
							    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Customer Master", nextPar2, reqesterID);
						    	}
						    }else{
						    	statusForm.setMessage("Error..Request Is Not Approved");
						    }
							
						}if(!(parllelAppr1.equalsIgnoreCase(""))){
							
							if(empNo.equalsIgnoreCase(parllelAppr1)){
								String updateStatus="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+user.getEmployeeNo()+"'," +
								"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and type='Customer Master' and Pending_Approver='"+user.getEmployeeNo()+"'";
							    int saveStatus=0;
							    saveStatus=ad.SqlExecuteUpdate(updateStatus);
							    
							    String updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+approver+"'," +
								"Pending_Approver='',Approved_Persons='"+approver+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and type='Customer Master' and Pending_Approver='"+approver+"'";
							    ad.SqlExecuteUpdate(updateStatusForApprover); 
							    
							    if(!(parllelAppr2.equalsIgnoreCase("")))
							    {
							    	  updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr2+"'," +
										"Pending_Approver='',Approved_Persons='"+parllelAppr2+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and type='Customer Master' and Pending_Approver='"+parllelAppr2+"'";
									    ad.SqlExecuteUpdate(updateStatusForApprover); 
							    }
							   
							    if(saveStatus>0)
							    {
							    	statusForm.setMessage2("Request Is Approved Successfully");
							    	String updateMaterial="update CUSTOMER_MASTER_M set Approve_Status='In Process' where REQUEST_NO='"+reqId+"'";
							    	int check=ad.SqlExecuteUpdate(updateMaterial);
							    	String recordStatus="select * from All_Request where Req_Id='"+reqId+"' and Approved_Persons='"+user.getEmployeeNo()+"'";
							    	ResultSet rsRecDet=ad.selectQuery(recordStatus);
							    	while(rsRecDet.next())
							    	{
							    		requestNo=rsRecDet.getString("Requester_Name");
							    		reqDate=rsRecDet.getString("Req_Date");
							    		reqesterID=rsRecDet.getString("Requester_Name");
							    	}
							    	
							    	// insert record to next approver
							    	String insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
							    	" values('"+reqId+"','Customer Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextAppr+"','No','"+reqesterID+"','','"+matType+"')";
							    	ad.SqlExecuteUpdate(insertAllRequest);
							    	EMailer email = new EMailer();
									String approvermail="";
							    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Customer Master", nextAppr, reqesterID);
							    	if(!(nextPar1.equalsIgnoreCase(""))){
							    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
								    	" values('"+reqId+"','Customer Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar1+"','No','"+reqesterID+"','','"+matType+"')";
								    	ad.SqlExecuteUpdate(insertAllRequest);
								    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Customer Master", nextPar1, reqesterID);
							    	}
							    	if(!(nextPar2.equalsIgnoreCase(""))){
							    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
								    	" values('"+reqId+"','Customer Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar2+"','No','"+reqesterID+"','','"+matType+"')";
								    	ad.SqlExecuteUpdate(insertAllRequest);
								    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Customer Master", nextPar2, reqesterID);
							    	}
							    }else{
							    	statusForm.setMessage("Error..Request Is Not Approved");
							    }
							}
						}
						if(!(parllelAppr2.equalsIgnoreCase(""))){

							
							if(empNo.equalsIgnoreCase(parllelAppr2)){
								String updateStatus="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+user.getEmployeeNo()+"'," +
								"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and type='Customer Master'  and Pending_Approver='"+user.getEmployeeNo()+"'";
							    int saveStatus=0;
							    saveStatus=ad.SqlExecuteUpdate(updateStatus);
							    String updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+approver+"'," +
								"Pending_Approver='',Approved_Persons='"+approver+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and type='Customer Master' and Pending_Approver='"+approver+"'";
							    ad.SqlExecuteUpdate(updateStatusForApprover); 
							    
							    if(!(parllelAppr1.equalsIgnoreCase("")))
							    {
							    	  updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr1+"'," +
										"Pending_Approver='',Approved_Persons='"+parllelAppr1+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and type='Customer Master' and Pending_Approver='"+parllelAppr1+"'";
									    ad.SqlExecuteUpdate(updateStatusForApprover); 
							    }
							    if(saveStatus>0)
							    {
							    	statusForm.setMessage2("Request Is Approved Successfully");
							    	String updateMaterial="update CUSTOMER_MASTER_M set Approve_Status='In Process' where REQUEST_NO='"+reqId+"'";
							    	int check=ad.SqlExecuteUpdate(updateMaterial);
							    	
							    	String recordStatus="select * from All_Request where Req_Id='"+reqId+"' and Approved_Persons='"+user.getEmployeeNo()+"'";
							    	ResultSet rsRecDet=ad.selectQuery(recordStatus);
							    	while(rsRecDet.next())
							    	{
							    		requestNo=rsRecDet.getString("Requester_Name");
							    		reqDate=rsRecDet.getString("Req_Date");
							    		reqesterID=rsRecDet.getString("Requester_Name");
							    	}
							    	
							    	// insert record to next approver
							    	String insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
							    	" values('"+reqId+"','Customer Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextAppr+"','No','"+reqesterID+"','','"+matType+"')";
							    	ad.SqlExecuteUpdate(insertAllRequest);
							    	EMailer email = new EMailer();
									String approvermail="";
							    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Customer Master", nextAppr, reqesterID);
							    	if(!(nextPar1.equalsIgnoreCase(""))){
							    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
								    	" values('"+reqId+"','Customer Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar1+"','No','"+reqesterID+"','','"+matType+"')";
								    	ad.SqlExecuteUpdate(insertAllRequest);
								    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Customer Master", nextPar1, reqesterID);
							    	}
							    	if(!(nextPar2.equalsIgnoreCase(""))){
							    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
								    	" values('"+reqId+"','Customer Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar2+"','No','"+reqesterID+"','','"+matType+"')";
								    	ad.SqlExecuteUpdate(insertAllRequest);
								    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Customer Master", nextPar2, reqesterID);
							    	}
							    	
							    	
							    }else{
							    	statusForm.setMessage("Error..Request Is Not Approved");
							    }
								
							}
						}
				     
					}
						
					//set reject buttons  	
						
				}else{

					String updateStatus="update All_Request set Req_Status='Rejected',Comments='"+statusForm.getComments()+"',Last_Approver='"+approver+"'," +
					"Pending_Approver='',Approved_Persons='"+approver+"',rejected_date='"+dateNow+"' where Req_Id='"+reqId+"' and type='Customer Master' and Pending_Approver='"+approver+"'";
				    int saveStatus=0;
				    saveStatus=ad.SqlExecuteUpdate(updateStatus);
				    if(!(parllelAppr1.equalsIgnoreCase("")))
				    {
				    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Rejected',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr1+"'," +
							"Pending_Approver='',Approved_Persons='"+parllelAppr1+"',rejected_date='"+dateNow+"' where Req_Id='"+reqId+"' and type='Customer Master'  and Pending_Approver='"+parllelAppr1+"'";
				    	 saveStatus=ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
				    }
				    if(!(parllelAppr2.equalsIgnoreCase("")))
				    {
				    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Rejected',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr2+"'," +
							"Pending_Approver='',Approved_Persons='"+parllelAppr2+"',rejected_date='"+dateNow+"' where Req_Id='"+reqId+"'  and type='Customer Master' and Pending_Approver='"+parllelAppr2+"'";
				    	 saveStatus=ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
				    }
					if(saveStatus>0){
						statusForm.setMessage2("Request has been rejected successfully");
						
						String updateMaterial="update CUSTOMER_MASTER_M set Approve_Status='Rejected',MODIFIED_BY='"+user.getEmployeeNo()+"',rejected_flag='',last_approver='"+user.getFullName()+"',pending_approver='No'  where request_no='"+reqId+"'";
						ad.SqlExecuteUpdate(updateMaterial);
						ad.connClose();
						EMailer email=new EMailer();
						String approvermail="";
						email.sendMailToMaterialCodeRequester(request, approvermail, reqId, "Customer Master", user.getEmployeeNo(), reqesterID, "Rejected");
					}
					if(priorityCout==apprverPriority){
						
						
				    	 String sapCreationDate=statusForm.getSapCreationDate();
						  String b[]=sapCreationDate.split("/");
						  sapCreationDate=b[2]+"-"+b[1]+"-"+b[0];
						  
						  String sapCodeExist="";
						  String sapCodeexistNo="";
						  
						  sapCodeExist=statusForm.getSapCodeExists();
						  sapCodeexistNo=statusForm.getSapCodeExistsNo();
						  if(sapCodeExist!=null){
							  statusForm.setSapCodeExists("true");
						  }
						  if(sapCodeexistNo!=null){
							  statusForm.setSapCodeExistsNo("true");
						  }
						
						  
						  //
						  String fileList="";
							String getUploadedFiles="select * from UploadFiles_Masters";
							ResultSet rs=ad.selectQuery(getUploadedFiles);
							while(rs.next())
							{
								fileList+="Master"+"/Customer Master"+"/UploadFiles"+"/"+rs.getString("file_name")+",";
							}
						  //
						  String query="update CUSTOMER_MASTER_M set ACCOUNT_GROUP_ID ='"+statusForm.getAccGroupId()+"',VIEW_TYPE='"+statusForm.getViewType()+"',Customer_Type='"+statusForm.getCustomerType()+"',NAME='"+statusForm.getCustomerName()+"',ADDRESS1='"+statusForm.getAddress1()+"',ADDRESS2='"+statusForm.getAddress2()+"'," +
							"ADDRESS3='"+statusForm.getAddress3()+"',ADDRESS4='"+statusForm.getAddress4()+"',CITY='"+statusForm.getCity()+"',PINCODE='"+statusForm.getPincode()+"',COUNTRY_ID='"+statusForm.getCountryId()+"',STATE='"+statusForm.getState()+"',LANDLINE_NO='"+statusForm.getLandlineNo()+"',MOBILE_NO='"+statusForm.getMobileNo()+"',FAX_NO='"+statusForm.getFaxNo()+"',EMAIL_ID='"+statusForm.getEmailId()+"',Customer_Group='"+statusForm.getCustomerGroup()+"',Price_Group='"+statusForm.getPriceGroup()+"',Price_List='"+statusForm.getPriceList()+"'," +
							"Tax_Type='"+statusForm.getTaxType()+"',CURRENCY_ID='"+statusForm.getCurrencyId()+"',IS_REGD_EXCISE_Customer='"+statusForm.getTdsStatus()+"',TDS_CODE='"+statusForm.getTdsCode()+"',LST_NO='"+statusForm.getListNumber()+"',TIN_NO='"+statusForm.getTinNumber()+"',CST_NO='"+statusForm.getCstNumber()+"',PAN_No='"+statusForm.getPanNumber()+"',Service_Tax_Registration_No='"+statusForm.getServiceTaxNo()+"',IS_REGD_EXCISE_VENDOR='"+statusForm.getIsRegdExciseVender()+"',ECC_No='"+statusForm.getEccNo()+"',Excise_Reg_No='"+statusForm.getExciseRegNo()+"'," +
					"Excise_Range='"+statusForm.getExciseRange()+"',Excise_Division='"+statusForm.getExciseDivision()+"',DLNO1='"+statusForm.getDlno1()+"',DLNO2='"+statusForm.getDlno2()+"',PAYMENT_TERM_ID='"+statusForm.getPaymentTermID()+"',ACCOUNT_CLERK_ID='"+statusForm.getAccountClerkId()+"',last_approver='"+user.getEmployeeNo()+"',pending_approver='No',GSTIN_Number='"+statusForm.getGstinNo()+"'  WHERE REQUEST_NO='"+reqId+"'";
						System.out.println(query);  
						  int updateMateStatus=ad.SqlExecuteUpdate(query);
						  
					}
					
				
				}
				//reset values
				if(userRole.equalsIgnoreCase("User"))
				{

					
					
					getMatGroup="select Customer_Type from CUSTOMER_MASTER_M where REQUEST_NO='"+reqId+"' ";
				 	 rsMatGrup=ad.selectQuery(getMatGroup);
				 	while(rsMatGrup.next()){
				 		Customer_Type=rsMatGrup.getString("Customer_Type");
				 		
				 	}
				 	if(Customer_Type.equalsIgnoreCase("Exports"))
				 	{
				 		Customer_Type="Export";
				 	}   
				 	
				
					checkStatus=0;
					String getUserRole="select Priority,Role from  Material_Approvers where Location='"+location+"' AND  Material_Type='"+reqType+"' AND Material_Group='"+Customer_Type+"' AND (Approver_Id='"+user.getEmployeeNo()+"' OR Parllel_Approver_1='"+user.getEmployeeNo()+"' OR Parllel_Approver_2='"+user.getEmployeeNo()+"') ";
					ResultSet rsUserRole=ad.selectQuery(getUserRole);
					while(rsUserRole.next())
					{
						checkStatus=1;
						userRole=rsUserRole.getString("Role");
					}
					statusForm.setUserRole(userRole);
					
					if(userRole.equalsIgnoreCase("User"))
					{
						String editRecord="select c.GSTIN_Number,c.REQUEST_NO,c.REQUEST_DATE,c.VIEW_TYPE,c.cutomer_code,c.Customer_Type,c.NAME, " +
					 	"c.ADDRESS1,c.ADDRESS2,c.ADDRESS3,c.ADDRESS4,c.IS_REGD_EXCISE_Customer,c.CITY,c.PINCODE,c.Attachments,c.LANDLINE_NO," +
					 	"c.MOBILE_NO,c.FAX_NO,c.EMAIL_ID,c.IS_REGD_EXCISE_VENDOR,c.LST_NO,c.TIN_NO,c.CST_NO,c.PAN_No,c.Service_Tax_Registration_No," +
					 	"c.ECC_No,c.Excise_Reg_No,c.Excise_Range,c.Excise_Division,c.DLNO1,c.DLNO2, SAP_CODE_NO,SAP_CODE_EXISTS,SAP_CREATION_DATE," +
					 	"SAP_CREATED_BY,REQUESTED_BY from CUSTOMER_MASTER_M as c  where REQUEST_NO='"+reqId+"'";
					 		
					 		
					 		
							ResultSet rsEditRecord=ad.selectQuery(editRecord);
							if(rsEditRecord.next())
							{
								statusForm.setGstinNo(rsEditRecord.getString("GSTIN_Number"));
								statusForm.setRequestNumber(rsEditRecord.getString("REQUEST_NO"));
								reqDate=rsEditRecord.getString("REQUEST_DATE");
								String a[]=reqDate.split(" ");
								reqDate=a[0];
								String b[]=reqDate.split("-");
								reqDate=b[2]+"/"+b[1]+"/"+b[0];
								statusForm.setRequestDate(reqDate);
								if(rsEditRecord.getString("ACCOUNT_GROUP_ID").equalsIgnoreCase("IN"))
								{
									statusForm.setAccGroupId("Domestic");
								}
								if(rsEditRecord.getString("ACCOUNT_GROUP_ID").equalsIgnoreCase("IM"))
								{
									statusForm.setAccGroupId("Export Customer");
								}
								if(rsEditRecord.getString("ACCOUNT_GROUP_ID").equalsIgnoreCase("FS"))
								{
									statusForm.setAccGroupId("Field Staff");
								}
								if(rsEditRecord.getString("ACCOUNT_GROUP_ID").equalsIgnoreCase("7"))
								{
									statusForm.setAccGroupId("Plants");
								}
								statusForm.setSales("");
								statusForm.setAccounts("");
								String viewType=rsEditRecord.getString("VIEW_TYPE");
								if(viewType.equalsIgnoreCase("S"))
								{
									statusForm.setSales("Sales");
								}
								if(viewType.equalsIgnoreCase("A"))
								{
									statusForm.setAccounts("Accounts");
								}
								if(viewType.equalsIgnoreCase("3"))
								{
									statusForm.setSales("Sales");
									statusForm.setAccounts("Accounts");
								}
							
								
								statusForm.setDomestic("");
								statusForm.setExports("");
								
								statusForm.setCustomerType(rsEditRecord.getString("Customer_Type"));
								statusForm.setCustomerName(rsEditRecord.getString("NAME"));
								statusForm.setAddress1(rsEditRecord.getString("ADDRESS1"));
								statusForm.setAddress2(rsEditRecord.getString("ADDRESS2"));
								statusForm.setAddress3(rsEditRecord.getString("ADDRESS3"));
								statusForm.setAddress4(rsEditRecord.getString("ADDRESS4"));
								statusForm.setCity(rsEditRecord.getString("CITY"));
								statusForm.setPincode(rsEditRecord.getString("PINCODE"));
								
							
								statusForm.setLandlineNo(rsEditRecord.getString("LANDLINE_NO"));
								statusForm.setMobileNo(rsEditRecord.getString("MOBILE_NO"));
								statusForm.setFaxNo(rsEditRecord.getString("FAX_NO"));
								statusForm.setEmailId(rsEditRecord.getString("EMAIL_ID"));
								
								String tdsStatus=rsEditRecord.getString("IS_REGD_EXCISE_Customer");
								if(tdsStatus.equalsIgnoreCase("1"))
								{
									statusForm.setTdsStatus("YES");
									request.setAttribute("setTdsState", "setTdsState");
								}
								if(tdsStatus.equalsIgnoreCase("0"))
									statusForm.setTdsStatus("No");
								statusForm.setListNumber(rsEditRecord.getString("LST_NO"));
								statusForm.setTinNumber(rsEditRecord.getString("TIN_NO"));
								statusForm.setCstNumber(rsEditRecord.getString("CST_NO"));
								statusForm.setPanNumber(rsEditRecord.getString("PAN_No"));
								statusForm.setServiceTaxNo(rsEditRecord.getString("Service_Tax_Registration_No"));
								String isRegdExciseVender=rsEditRecord.getString("IS_REGD_EXCISE_VENDOR");
								if(isRegdExciseVender.equalsIgnoreCase("1"))
								{
									statusForm.setIsRegdExciseVender("Yes");
									request.setAttribute("setRegdExciseVender", "setRegdExciseVender");
								}
								if(isRegdExciseVender.equalsIgnoreCase("0"))
								{
									statusForm.setIsRegdExciseVender("No");
									request.setAttribute("setRegdExciseVenderNotMandatory", "setRegdExciseVenderNotMandatory");
								}
								statusForm.setEccNo(rsEditRecord.getString("ECC_No"));
								statusForm.setExciseRegNo(rsEditRecord.getString("Excise_Reg_No"));
								statusForm.setExciseRange(rsEditRecord.getString("Excise_Range"));
								statusForm.setExciseDivision(rsEditRecord.getString("Excise_Division"));
								statusForm.setDlno1(rsEditRecord.getString("DLNO1"));
								statusForm.setDlno2(rsEditRecord.getString("DLNO2"));
							
							
								statusForm.setCutomerCode(rsEditRecord.getString("cutomer_code"));
								
								 String sapCodeno=rsEditRecord.getString("SAP_CODE_NO");  
									if(sapCodeno!=null){ 
										statusForm.setSapCodeNo(sapCodeno);		
								String sapCodeExist=rsEditRecord.getString("SAP_CODE_EXISTS");
								if(sapCodeExist.equalsIgnoreCase("1"))
								{
									statusForm.setSapCodeExists("True");
								}
								if(sapCodeExist.equalsIgnoreCase("0"))
									statusForm.setSapCodeExistsNo("True");
								String sapCreationDate=rsEditRecord.getString("SAP_CREATION_DATE");
								String sapDate[]=sapCreationDate.split(" ");
								sapCreationDate=sapDate[0];
								String sapCode[]=sapCreationDate.split("-");
								sapCreationDate=sapCode[2]+"/"+sapCode[1]+"/"+sapCode[0];
								statusForm.setSapCreationDate(sapCreationDate);
								statusForm.setSapCreatedBy(rsEditRecord.getString("SAP_CREATED_BY"));
								statusForm.setRequestedBy(rsEditRecord.getString("REQUESTED_BY"));
									}
								
								
								
								ArrayList fileList = new ArrayList();
								String uploadedFiles=rsEditRecord.getString("Attachments");
								if(uploadedFiles.equalsIgnoreCase(""))
								{
									
								}else{
								String v[] = uploadedFiles.split(",");
								int l = v.length;
									for (int i = 0; i < l; i++) 
									{
										CustomerMasterForm pendAppForm2=new CustomerMasterForm();
									int x=v[i].lastIndexOf("/");
									uploadedFiles=v[i].substring(x+1);		
									pendAppForm2.setFileList(uploadedFiles);
									pendAppForm2.setFilepath("jsp/EMicro Files/ESS/sapMasterRequest/Customer master files/UploadFiles/");
									fileList.add(pendAppForm2);
									}
								request.setAttribute("listName", fileList);
								}
								
								
								
									
									//currency
									String editRecord2="select cur.ISOCD from CUSTOMER_MASTER_M as c,Currency as cur where REQUEST_NO='"+reqId+"'" +
											" and cur.WAERS=c.CURRENCY_ID";
										ResultSet rsEditRecord2=ad.selectQuery(editRecord2);
										if(rsEditRecord2.next())
										{
											statusForm.setCurrencyId(rsEditRecord2.getString("ISOCD"));
										}
										
										//payment term
										
										String editRecord3="select pay.PAYMENT_TERM_NAME from CUSTOMER_MASTER_M as c,PAYMENT_TERM_M as pay " +
												"where REQUEST_NO='"+reqId+"' and pay.PAYMENT_TERM_ID=c.PAYMENT_TERM_ID";
									 		
									 		
									 		ResultSet rsEditRecord3=ad.selectQuery(editRecord3);
											if(rsEditRecord3.next())
											{
												statusForm.setPaymentTermID(rsEditRecord3.getString("PAYMENT_TERM_NAME"));
											}
											
											//acc clerk
											
											String editRecord4="select acccl.ACC_CLERK_DESC from CUSTOMER_MASTER_M as c,ACC_CLERK_M as acccl " +
													"where REQUEST_NO='"+reqId+"' and acccl.ACC_CLERK_ID=c.ACCOUNT_CLERK_ID";
										 		
										 		
										 		
												ResultSet rsEditRecord4=ad.selectQuery(editRecord4);
												if(rsEditRecord4.next())
												{
													statusForm.setAccountClerkId(rsEditRecord4.getString("ACC_CLERK_DESC"));
												}
												
												//tds code
												
												String editRecord5="select tds.TDS_SECTION_DESC from CUSTOMER_MASTER_M as c,TDS_SECTION_M as tds" +
														" where REQUEST_NO='"+reqId+"' and tds.TDS_SECTION_ID=c.TDS_CODE";
											 		
											 		
											 		
													ResultSet rsEditRecord5=ad.selectQuery(editRecord5);
													if(rsEditRecord5.next())
													{
														statusForm.setTdsCode(rsEditRecord5.getString("TDS_SECTION_DESC"));
														
													}
													
													//country
													String editRecord6="select cou.LANDX from CUSTOMER_MASTER_M as c ,Country as cou " +
															"where REQUEST_NO='"+reqId+"'and cou.LAND1=c.COUNTRY_ID ";
										 		
										 		
												ResultSet rsEditRecord6=ad.selectQuery(editRecord6);
												if(rsEditRecord6.next())
												{
													statusForm.setCountryId(rsEditRecord6.getString("LANDX"));
													
												}
												
												//state
												String editRecord7=" select sta.BEZEI  from CUSTOMER_MASTER_M as c,State as sta " +
														"where REQUEST_NO='"+reqId+"' and sta.BLAND=c.STATE";
									 		
									 								 		
											ResultSet rsEditRecord7=ad.selectQuery(editRecord7);
											if(rsEditRecord7.next())
											{
												statusForm.setState(rsEditRecord7.getString("BEZEI"));
												
											}
											
											//customer grp
											String editRecord8="select cust.C_GROUP_NAME from CUSTOMER_MASTER_M as c,Customer_Group as cust " +
													"where REQUEST_NO='"+reqId+"' and cust.C_GROUP_ID=c.Customer_Group";
								 		
								 							 		
										ResultSet rsEditRecord8=ad.selectQuery(editRecord8);
										if(rsEditRecord8.next())
										{
											statusForm.setCustomerGroup(rsEditRecord8.getString("C_GROUP_NAME"));
											
										}
										
										//price grp
										String editRecord9="select pri.P_GROUP_NAME from CUSTOMER_MASTER_M as c,PRICE_GROUP as pri " +
												"where REQUEST_NO='"+reqId+"'and pri.P_GROUP_ID=c.Price_Group";
							 		
							 						 		
									ResultSet rsEditRecord9=ad.selectQuery(editRecord9);
									if(rsEditRecord9.next())
									{
										statusForm.setPriceGroup(rsEditRecord9.getString("P_GROUP_NAME"));
										
									}
									//price list
									String editRecord10="select prili.P_LIST_NAME from CUSTOMER_MASTER_M as c,PRICE_LIST as  prili  " +
											"where REQUEST_NO='"+reqId+"'and  prili.P_List_ID=c.Price_List";
						 		
						 		
						 		ResultSet rsEditRecord10=ad.selectQuery(editRecord10);
								if(rsEditRecord10.next())
								{
									statusForm.setPriceList(rsEditRecord10.getString("P_LIST_NAME"));
									
								}
								
								//tax type
								String editRecord11="select tax.T_CLASS_NAME from CUSTOMER_MASTER_M as c,TAX_CLASS as tax" +
										" where REQUEST_NO='"+reqId+"'and  tax.T_CLASS_ID=c.Tax_Type";
					 		
					 		
					 		ResultSet rsEditRecord11=ad.selectQuery(editRecord11);
							if(rsEditRecord11.next())
							{
								statusForm.setTaxType(rsEditRecord11.getString("T_CLASS_NAME"));
								
							}												
																			
															
								
								
					 		
							}
						}
					else
					{
						ResultSet rs7 = ad.selectQuery("select PAYMENT_TERM_ID," +
						"PAYMENT_TERM_NAME from PAYMENT_TERM_M where ACTIVE='True' order by PAYMENT_TERM_NAME");
						ArrayList paymentTermList=new ArrayList();
						ArrayList paymentTermLabelList=new ArrayList();
						
						while(rs7.next()) {
							paymentTermList.add(rs7.getString("PAYMENT_TERM_ID"));
							paymentTermLabelList.add(rs7.getString("PAYMENT_TERM_ID")+"-"+rs7.getString("PAYMENT_TERM_NAME"));
						}
						statusForm.setPaymentTermList(paymentTermList);
						statusForm.setPaymentTermLabelList(paymentTermLabelList);
						
						ArrayList accountGroupList=new ArrayList();
						ArrayList accountGroupLabelList=new ArrayList();
					 	ResultSet rs1 = ad.selectQuery("select ACCOUNT_GROUP_ID,ACCOUNT_GROUP_NAME from ACCOUNT_GROUP_M where active='True'");
				ArrayList subLinkIdList = new ArrayList();
				ArrayList subLinkValueList = new ArrayList();
				while(rs1.next()) {
					accountGroupList.add(rs1.getString("ACCOUNT_GROUP_ID"));
					accountGroupLabelList.add(rs1.getString("ACCOUNT_GROUP_NAME"));
				}
				statusForm.setAccountGroupList(accountGroupList);
				statusForm.setAccountGroupLabelList(accountGroupLabelList);
							
						String getCountryDetails="select * from Country";
						LinkedList countryID=new LinkedList();
						LinkedList countryName=new LinkedList();
						ResultSet rsCountryDetails=ad.selectQuery(getCountryDetails);
						while(rsCountryDetails.next()){
							countryID.add(rsCountryDetails.getString("LAND1"));
							countryName.add(rsCountryDetails.getString("LAND1")+" - "+rsCountryDetails.getString("LANDX"));
						}
						statusForm.setCounID(countryID);
						statusForm.setCountryName(countryName);
						
						
						
						
						LinkedList currencyID=new LinkedList();
						LinkedList cureencyNames=new LinkedList();
						String geCurrencyDetails="select * from Currency";
						ResultSet rsCurrencyDetails=ad.selectQuery(geCurrencyDetails);
						while(rsCurrencyDetails.next())
						{
							currencyID.add(rsCurrencyDetails.getString("WAERS"));
							cureencyNames.add(rsCurrencyDetails.getString("WAERS")+" - "+rsCurrencyDetails.getString("ISOCD"));
						}
						statusForm.setCurrenIds(currencyID);
						statusForm.setCurrencys(cureencyNames);	
						
					LinkedList tdsID=new LinkedList();
					LinkedList tdsValue=new LinkedList();
					
					String getTDs="select * from TDS_SECTION_M where ACTIVE='True'";
					ResultSet rsTDs=ad.selectQuery(getTDs);
					while(rsTDs.next())
					{
						tdsID.add(rsTDs.getString("TDS_SECTION_ID"));
						tdsValue.add(rsTDs.getString("TDS_SECTION_DESC"));
					}
					
					statusForm.setTdsIds(tdsID);
					statusForm.setTdsCodes(tdsValue);

					
					LinkedList cusGroupID = new LinkedList();
					LinkedList cusGroupList = new LinkedList();
					ResultSet rss = ad.selectQuery("select C_GROUP_ID,C_GROUP_NAME from Customer_Group ");
					while(rss.next()) {
						cusGroupID.add(rss.getString("C_GROUP_ID"));
						cusGroupList.add(rss.getString("C_GROUP_NAME"));
					}
					statusForm.setCusGroupID(cusGroupID);
					statusForm.setCusGroupList(cusGroupList);	
					
					LinkedList priceGroupID = new LinkedList();
					LinkedList piceGroupList = new LinkedList();
					ResultSet rs2 = ad.selectQuery("select * from PRICE_GROUP ");
					while(rs2.next()) {
						priceGroupID.add(rs2.getString("P_GROUP_ID"));
						piceGroupList.add(rs2.getString("P_GROUP_NAME"));
					}
					statusForm.setPriceGroupID(priceGroupID);
					statusForm.setPiceGroupList(piceGroupList);	
					
					ResultSet rs8 = ad.selectQuery("select ACC_CLERK_ID," +
					"ACC_CLERK_DESC from ACC_CLERK_M where ACTIVE='True'");
					ArrayList accountClerkList=new ArrayList();
					ArrayList accountClerkLabelList=new ArrayList();
					
					while(rs8.next()) {
						accountClerkList.add(rs8.getString("ACC_CLERK_ID"));
						accountClerkLabelList.add(rs8.getString("ACC_CLERK_DESC"));
					}
					statusForm.setAccountClerkList(accountClerkList);
					statusForm.setAccountClerkLabelList(accountClerkLabelList);
					
					
					LinkedList priceListID = new LinkedList();
					LinkedList piceListValue = new LinkedList();
					ResultSet rs3 = ad.selectQuery("select * from PRICE_LIST ");
					while(rs3.next()) {
						priceListID.add(rs3.getString("P_List_ID"));
						piceListValue.add(rs3.getString("P_LIST_NAME"));
					}
					statusForm.setPriceListID(priceListID);
					statusForm.setPiceListValue(piceListValue);
					
					LinkedList taxTypeID = new LinkedList();
					LinkedList taxTypeValue = new LinkedList();
					ResultSet rs4 = ad.selectQuery("select * from TAX_CLASS ");
					while(rs4.next()) {
						taxTypeID.add(rs4.getString("T_CLASS_ID"));
						taxTypeValue.add(rs4.getString("T_CLASS_NAME"));
					}
					statusForm.setTaxTypeID(taxTypeID);
					statusForm.setTaxTypeValue(taxTypeValue);	
					
					
					
					
				
					
					
					
					// get material records
					
					EMicroUtils ut=new EMicroUtils();
				
					String editRecord="select * from CUSTOMER_MASTER_M where REQUEST_NO='"+reqId+"'";
					ResultSet rsEditRecord=ad.selectQuery(editRecord);
					
					while(rsEditRecord.next())
					{

						statusForm.setGstinNo(rsEditRecord.getString("GSTIN_Number"));
						statusForm.setRequestNo(reqId);
						reqDate=rsEditRecord.getString("REQUEST_DATE");
						String a[]=reqDate.split(" ");
						reqDate=a[0];
						String b[]=reqDate.split("-");
						reqDate=b[2]+"/"+b[1]+"/"+b[0];
						statusForm.setRequestDate(reqDate);
						statusForm.setAccGroupId(rsEditRecord.getString("ACCOUNT_GROUP_ID"));
						statusForm.setSales("");
						statusForm.setAccounts("");
						String viewType=rsEditRecord.getString("VIEW_TYPE");
						if(viewType.equalsIgnoreCase("S"))
						{
							statusForm.setSales("On");
						}
						if(viewType.equalsIgnoreCase("A"))
						{
							statusForm.setAccounts("On");
						}
						if(viewType.equalsIgnoreCase("3"))
						{
							statusForm.setSales("On");
							statusForm.setAccounts("On");
						}
						
						statusForm.setDomestic("");
						statusForm.setExports("");
						
						String customertype=rsEditRecord.getString("Customer_Type");
						if(customertype.equalsIgnoreCase("Domestic"))
						{
							statusForm.setDomestic("On");
						}
						if(customertype.equalsIgnoreCase("Exports"))
						{
							statusForm.setExports("On");
						}
						statusForm.setCustomerName(rsEditRecord.getString("NAME"));
						statusForm.setAddress1(rsEditRecord.getString("ADDRESS1"));
						statusForm.setAddress2(rsEditRecord.getString("ADDRESS2"));
						statusForm.setAddress3(rsEditRecord.getString("ADDRESS3"));
						statusForm.setAddress4(rsEditRecord.getString("ADDRESS4"));
						statusForm.setCity(rsEditRecord.getString("CITY"));
						statusForm.setPincode(rsEditRecord.getString("PINCODE"));
						
						statusForm.setCountryId(rsEditRecord.getString("COUNTRY_ID"));
						
						
						
					
						statusForm.setState(rsEditRecord.getString("STATE"));
						statusForm.setLandlineNo(rsEditRecord.getString("LANDLINE_NO"));
						statusForm.setMobileNo(rsEditRecord.getString("MOBILE_NO"));
						statusForm.setFaxNo(rsEditRecord.getString("FAX_NO"));
						statusForm.setEmailId(rsEditRecord.getString("EMAIL_ID"));
						statusForm.setCustomerGroup(rsEditRecord.getString("Customer_Group"));
						statusForm.setPriceGroup(rsEditRecord.getString("Price_Group"));
						statusForm.setPriceList(rsEditRecord.getString("Price_List"));
						statusForm.setTaxType(rsEditRecord.getString("Tax_Type"));
						statusForm.setCurrencyId(rsEditRecord.getString("CURRENCY_ID"));
						String tdsStatus=rsEditRecord.getString("IS_REGD_EXCISE_Customer");
						if(tdsStatus.equalsIgnoreCase("1"))
						{
							statusForm.setTdsStatus("True");
							request.setAttribute("setTdsState", "setTdsState");
						}
						if(tdsStatus.equalsIgnoreCase("0"))
							statusForm.setTdsStatus("False");
							
						statusForm.setTdsCode(rsEditRecord.getString("TDS_CODE"));
						statusForm.setListNumber(rsEditRecord.getString("LST_NO"));
						statusForm.setTinNumber(rsEditRecord.getString("TIN_NO"));
						statusForm.setCstNumber(rsEditRecord.getString("CST_NO"));
						statusForm.setPanNumber(rsEditRecord.getString("PAN_No"));
						statusForm.setServiceTaxNo(rsEditRecord.getString("Service_Tax_Registration_No"));
						String isRegdExciseVender=rsEditRecord.getString("IS_REGD_EXCISE_VENDOR");
						if(isRegdExciseVender.equalsIgnoreCase("1"))
						{
							statusForm.setIsRegdExciseVender("True");
							request.setAttribute("setRegdExciseVender", "setRegdExciseVender");
						}
						if(isRegdExciseVender.equalsIgnoreCase("0"))
						{
							statusForm.setIsRegdExciseVender("False");
							request.setAttribute("setRegdExciseVenderNotMandatory", "setRegdExciseVenderNotMandatory");
						}
						statusForm.setEccNo(rsEditRecord.getString("ECC_No"));
						statusForm.setExciseRegNo(rsEditRecord.getString("Excise_Reg_No"));
						statusForm.setExciseRange(rsEditRecord.getString("Excise_Range"));
						statusForm.setExciseDivision(rsEditRecord.getString("Excise_Division"));
						statusForm.setDlno1(rsEditRecord.getString("DLNO1"));
						statusForm.setDlno2(rsEditRecord.getString("DLNO2"));
						statusForm.setPaymentTermID(rsEditRecord.getString("PAYMENT_TERM_ID"));
						statusForm.setAccountClerkId(rsEditRecord.getString("ACCOUNT_CLERK_ID"));
						statusForm.setCutomerCode(rsEditRecord.getString("cutomer_code"));
						
						String sapCodeno=rsEditRecord.getString("SAP_CODE_NO");
						if(sapCodeno!=null){
							statusForm.setSapCodeNo(sapCodeno);		
					String sapCodeExist=rsEditRecord.getString("SAP_CODE_EXISTS");
					if(sapCodeExist.equalsIgnoreCase("1"))
					{
						statusForm.setSapCodeExists("True");
					}
					if(sapCodeExist.equalsIgnoreCase("0"))
						statusForm.setSapCodeExistsNo("True");
					String sapCreationDate=rsEditRecord.getString("SAP_CREATION_DATE");
					String sapDate[]=sapCreationDate.split(" ");
					sapCreationDate=sapDate[0];
					String sapCode[]=sapCreationDate.split("-");
					sapCreationDate=sapCode[2]+"/"+sapCode[1]+"/"+sapCode[0];
					statusForm.setSapCreationDate(sapCreationDate);
					statusForm.setSapCreatedBy(rsEditRecord.getString("SAP_CREATED_BY"));
					statusForm.setRequestedBy(rsEditRecord.getString("REQUESTED_BY"));
						}
						
						
						
						ArrayList fileList = new ArrayList();
						String uploadedFiles=rsEditRecord.getString("Attachments");
						if(uploadedFiles.equalsIgnoreCase(""))
						{
							
						}try{
						String v[] = uploadedFiles.split(",");
						int l = v.length;
							for (int i = 0; i < l; i++) 
							{
								CustomerMasterForm pendAppForm2=new CustomerMasterForm();
							int x=v[i].lastIndexOf("/");
							uploadedFiles=v[i].substring(x+1);		
							pendAppForm2.setFileList(uploadedFiles);
							pendAppForm2.setFilepath("jsp/EMicro Files/ESS/sapMasterRequest/Customer master files/UploadFiles/");
							fileList.add(pendAppForm2);
							}
						request.setAttribute("listName", fileList);
						
					}
						catch (Exception e) {
							e.printStackTrace();
					
				}
				
					}
					
					
					
					LinkedList stateID=new LinkedList();
					LinkedList stateName=new LinkedList();
					
					String getStateDetails="select * from State where LAND1='"+statusForm.getCountryId()+"'";
					ResultSet rsState=ad.selectQuery(getStateDetails);
					while(rsState.next())
					{
						stateID.add(rsState.getString("BLAND"));
						stateName.add(rsState.getString("BEZEI"));
					}
						
					statusForm.setStateId(stateID);
					statusForm.setStates(stateName);
					request.setAttribute("diplayStates", "diplayStates");
					
					
					
					
					
					}
					
					if(reqStatus.equalsIgnoreCase("Pending")){
						request.setAttribute("approveButton", "approveButton");
						request.setAttribute("rejectButton", "rejectButton");
					}
					//set ApproverDetails  
					checkStatus=0;
					int appStatus=0;
					LinkedList listApprers=new LinkedList();
					String getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
							"where mast.Location='"+location+"' AND  mast.Material_Type='"+reqType+"' AND Material_Group='"+Customer_Type+"' and mast.Approver_Id=emp.PERNR order by Priority";
					ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
					while(rsApprDetails.next())
					{
						checkStatus=1;
						ApprovalsForm apprvers=new ApprovalsForm();
						apprvers.setPriority(rsApprDetails.getString("Priority"));
						apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
						String empCode=rsApprDetails.getString("Approver_Id");
						String approveStatus="";
						String recordStatus="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date," +
						"all_r.Comments from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and " +
						"mast.Location='"+location+"' AND all_r.type='Customer Master' AND Material_Group='"+Customer_Type+"' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver " +
						"and (mast.Role='User' or mast.Role='Accounts' or mast.Role='Creator') and mast.Approver_Id=emp.PERNR  group by mast.Priority,mast.Priority," +
						"mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
						ResultSet rsAppInfo=ad.selectQuery(recordStatus);
						while(rsAppInfo.next())
						{
							
							apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
							approveStatus=rsAppInfo.getString("Req_Status");
							if(approveStatus.equalsIgnoreCase(""))
							{
								apprvers.setApproveStatus("In Process");
							}
							if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
							{
							apprvers.setDate(rsAppInfo.getString("approved_date"));
							}else{
								apprvers.setDate(rsAppInfo.getString("rejected_date"));
								appStatus=1;
							}
						 comments=rsAppInfo.getString("Comments");
							if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
							{
								apprvers.setComments("");
							}else{
								apprvers.setComments(rsAppInfo.getString("Comments"));
								
							}
							
							
						}
						if(approveStatus.equalsIgnoreCase("") && appStatus==0)
						{
							apprvers.setApproveStatus("In Process");
							
						}
						apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
						listApprers.add(apprvers);
					}
					
					request.setAttribute("approverDetails", listApprers);
					
					if(userRole.equalsIgnoreCase("User"))
					{
					return mapping.findForward("customerMaster");
					}
					if(userRole.equalsIgnoreCase("Accounts"))
					{
					return mapping.findForward("customerMaster_Account");
					}
					if(userRole.equalsIgnoreCase("Creator"))
					{
						 dNow = new Date( );
						ft = new SimpleDateFormat ("dd/MM/yyyy");
							 dateNow = ft.format(dNow);
							 statusForm.setSapCreationDate(dateNow);
							 statusForm.setSapCreatedBy(user.getEmployeeNo()+"-"+user.getFullName());
						
					return mapping.findForward("customerMaster_Creator");
					}
					
					
					
					 getMatGroup="select Customer_Type from CUSTOMER_MASTER_M where REQUEST_NO='"+reqId+"' ";
				  rsMatGrup=ad.selectQuery(getMatGroup);
				 	while(rsMatGrup.next()){
				 		Customer_Type=rsMatGrup.getString("Customer_Type");
				 		
				 	}
				 	if(Customer_Type.equalsIgnoreCase("Exports"))
				 	{
				 		Customer_Type="Export";
				 	}   
				 		
				 	
					 listApprers=new LinkedList();
					 getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
							"where mast.Location='' AND  mast.Material_Type='Customer Master' AND Material_Group='"+Customer_Type+"' and mast.Approver_Id=emp.PERNR order by Priority";
					 rsApprDetails=ad.selectQuery(getApprDetails);
					while(rsApprDetails.next())
					{
						checkStatus=1;
						ApprovalsForm apprvers=new ApprovalsForm();
						apprvers.setPriority(rsApprDetails.getString("Priority"));
						apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
						String empCode=rsApprDetails.getString("Approver_Id");
						String approveStatus="";
						String recordStatus="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date," +
						"all_r.Comments from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and " +
						"mast.Location='' AND all_r.type='Customer Master' AND Material_Group='"+Customer_Type+"' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver " +
						"and (mast.Role='User' or mast.Role='Accounts' or mast.Role='Creator') and mast.Approver_Id=emp.PERNR  group by mast.Priority,mast.Priority," +
						"mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
						ResultSet rsAppInfo=ad.selectQuery(recordStatus);
						while(rsAppInfo.next())
						{
							
							apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
							approveStatus=rsAppInfo.getString("Req_Status");
							if(approveStatus.equalsIgnoreCase(""))
							{
								apprvers.setApproveStatus("In Process");
							}
							if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
							{
							apprvers.setDate(rsAppInfo.getString("approved_date"));
							}else{
								apprvers.setDate(rsAppInfo.getString("rejected_date"));
							}
						comments=rsAppInfo.getString("Comments");
							if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
							{
								apprvers.setComments("");
							}else{
								apprvers.setComments(rsAppInfo.getString("Comments"));
							}
							
							
						}
						if(approveStatus.equalsIgnoreCase(""))
						{
							apprvers.setApproveStatus("In Process");
						}
						apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
						listApprers.add(apprvers);
					}
					
					request.setAttribute("approverDetails", listApprers);
					
					
				
				}else{
							String getCountryDetails="select * from Country";
							LinkedList countryID=new LinkedList();
							LinkedList countryName=new LinkedList();
							ResultSet rsCountryDetails=ad.selectQuery(getCountryDetails);
							while(rsCountryDetails.next()){
								countryID.add(rsCountryDetails.getString("LAND1"));
								countryName.add(rsCountryDetails.getString("LAND1")+" - "+rsCountryDetails.getString("LANDX"));
							}
							statusForm.setCounID(countryID);
							statusForm.setCountryName(countryName);
							
							
							LinkedList currencyID=new LinkedList();
							LinkedList cureencyNames=new LinkedList();
							String geCurrencyDetails="select * from Currency";
							ResultSet rsCurrencyDetails=ad.selectQuery(geCurrencyDetails);
							while(rsCurrencyDetails.next())
							{
								currencyID.add(rsCurrencyDetails.getString("WAERS"));
								cureencyNames.add(rsCurrencyDetails.getString("WAERS")+" - "+rsCurrencyDetails.getString("ISOCD"));
							}
							statusForm.setCurrenIds(currencyID);
							statusForm.setCurrencys(cureencyNames);	
							
						LinkedList tdsID=new LinkedList();
						LinkedList tdsValue=new LinkedList();
						
						String getTDs="select * from TDS_SECTION_M where ACTIVE='True'";
						ResultSet rsTDs=ad.selectQuery(getTDs);
						while(rsTDs.next())
						{
							tdsID.add(rsTDs.getString("TDS_SECTION_ID"));
							tdsValue.add(rsTDs.getString("TDS_SECTION_DESC"));
						}
						
						statusForm.setTdsIds(tdsID);
						statusForm.setTdsCodes(tdsValue);

						
						LinkedList cusGroupID = new LinkedList();
						LinkedList cusGroupList = new LinkedList();
						ResultSet rs1 = ad.selectQuery("select C_GROUP_ID,C_GROUP_NAME from Customer_Group ");
						while(rs1.next()) {
							cusGroupID.add(rs1.getString("C_GROUP_ID"));
							cusGroupList.add(rs1.getString("C_GROUP_NAME"));
						}
						statusForm.setCusGroupID(cusGroupID);
						statusForm.setCusGroupList(cusGroupList);	
						
						LinkedList priceGroupID = new LinkedList();
						LinkedList piceGroupList = new LinkedList();
						ResultSet rs2 = ad.selectQuery("select * from PRICE_GROUP ");
						while(rs2.next()) {
							priceGroupID.add(rs2.getString("P_GROUP_ID"));
							piceGroupList.add(rs2.getString("P_GROUP_NAME"));
						}
						statusForm.setPriceGroupID(priceGroupID);
						statusForm.setPiceGroupList(piceGroupList);	
						
						ResultSet rs8 = ad.selectQuery("select ACC_CLERK_ID," +
						"ACC_CLERK_DESC from ACC_CLERK_M where ACTIVE='True'");
						ArrayList accountClerkList=new ArrayList();
						ArrayList accountClerkLabelList=new ArrayList();
						
						while(rs8.next()) {
							accountClerkList.add(rs8.getString("ACC_CLERK_ID"));
							accountClerkLabelList.add(rs8.getString("ACC_CLERK_DESC"));
						}
						statusForm.setAccountClerkList(accountClerkList);
						statusForm.setAccountClerkLabelList(accountClerkLabelList);
						
						
						LinkedList priceListID = new LinkedList();
						LinkedList piceListValue = new LinkedList();
						ResultSet rs3 = ad.selectQuery("select * from PRICE_LIST ");
						while(rs3.next()) {
							priceListID.add(rs3.getString("P_List_ID"));
							piceListValue.add(rs3.getString("P_LIST_NAME"));
						}
						statusForm.setPriceListID(priceListID);
						statusForm.setPiceListValue(piceListValue);
						
						LinkedList taxTypeID = new LinkedList();
						LinkedList taxTypeValue = new LinkedList();
						ResultSet rs4 = ad.selectQuery("select * from TAX_CLASS ");
						while(rs4.next()) {
							taxTypeID.add(rs4.getString("T_CLASS_ID"));
							taxTypeValue.add(rs4.getString("T_CLASS_NAME"));
						}
						statusForm.setTaxTypeID(taxTypeID);
						statusForm.setTaxTypeValue(taxTypeValue);	
						
						
						
						// get material records
						
						EMicroUtils ut=new EMicroUtils();
					
						String editRecord="select * from CUSTOMER_MASTER_M where REQUEST_NO='"+reqId+"'";
						ResultSet rsEditRecord=ad.selectQuery(editRecord);
						
						while(rsEditRecord.next())
						{

							statusForm.setGstinNo(rsEditRecord.getString("GSTIN_Number"));
							statusForm.setRequestNo(reqId);
							 reqDate=rsEditRecord.getString("REQUEST_DATE");
							String a[]=reqDate.split(" ");
							reqDate=a[0];
							String b[]=reqDate.split("-");
							reqDate=b[2]+"/"+b[1]+"/"+b[0];
							statusForm.setRequestDate(reqDate);
							statusForm.setAccGroupId(rsEditRecord.getString("ACCOUNT_GROUP_ID"));
							statusForm.setSales("");
							statusForm.setAccounts("");
							String viewType=rsEditRecord.getString("VIEW_TYPE");
							if(viewType.equalsIgnoreCase("S"))
							{
								statusForm.setSales("On");
							}
							if(viewType.equalsIgnoreCase("A"))
							{
								statusForm.setAccounts("On");
							}
							if(viewType.equalsIgnoreCase("3"))
							{
								statusForm.setSales("On");
								statusForm.setAccounts("On");
							}
							
							statusForm.setDomestic("");
							statusForm.setExports("");
							
							String customertype=rsEditRecord.getString("Customer_Type");
							if(customertype.equalsIgnoreCase("Domestic"))
							{
								statusForm.setDomestic("On");
							}
							if(customertype.equalsIgnoreCase("Exports"))
							{
								statusForm.setExports("On");
							}
							statusForm.setCustomerName(rsEditRecord.getString("NAME"));
							statusForm.setAddress1(rsEditRecord.getString("ADDRESS1"));
							statusForm.setAddress2(rsEditRecord.getString("ADDRESS2"));
							statusForm.setAddress3(rsEditRecord.getString("ADDRESS3"));
							statusForm.setAddress4(rsEditRecord.getString("ADDRESS4"));
							statusForm.setCity(rsEditRecord.getString("CITY"));
							statusForm.setPincode(rsEditRecord.getString("PINCODE"));
							
							statusForm.setCountryId(rsEditRecord.getString("COUNTRY_ID"));
							
							
							
						
							statusForm.setState(rsEditRecord.getString("STATE"));
							statusForm.setLandlineNo(rsEditRecord.getString("LANDLINE_NO"));
							statusForm.setMobileNo(rsEditRecord.getString("MOBILE_NO"));
							statusForm.setFaxNo(rsEditRecord.getString("FAX_NO"));
							statusForm.setEmailId(rsEditRecord.getString("EMAIL_ID"));
							statusForm.setCustomerGroup(rsEditRecord.getString("Customer_Group"));
							statusForm.setPriceGroup(rsEditRecord.getString("Price_Group"));
							statusForm.setPriceList(rsEditRecord.getString("Price_List"));
							statusForm.setTaxType(rsEditRecord.getString("Tax_Type"));
							statusForm.setCurrencyId(rsEditRecord.getString("CURRENCY_ID"));
							String tdsStatus=rsEditRecord.getString("IS_REGD_EXCISE_Customer");
							if(tdsStatus.equalsIgnoreCase("1"))
							{
								statusForm.setTdsStatus("True");
								request.setAttribute("setTdsState", "setTdsState");
							}
							if(tdsStatus.equalsIgnoreCase("0"))
								statusForm.setTdsStatus("False");
								
							statusForm.setTdsCode(rsEditRecord.getString("TDS_CODE"));
							statusForm.setListNumber(rsEditRecord.getString("LST_NO"));
							statusForm.setTinNumber(rsEditRecord.getString("TIN_NO"));
							statusForm.setCstNumber(rsEditRecord.getString("CST_NO"));
							statusForm.setPanNumber(rsEditRecord.getString("PAN_No"));
							statusForm.setServiceTaxNo(rsEditRecord.getString("Service_Tax_Registration_No"));
							String isRegdExciseVender=rsEditRecord.getString("IS_REGD_EXCISE_VENDOR");
							if(isRegdExciseVender.equalsIgnoreCase("1"))
							{
								statusForm.setIsRegdExciseVender("True");
								request.setAttribute("setRegdExciseVender", "setRegdExciseVender");
							}
							if(isRegdExciseVender.equalsIgnoreCase("0"))
							{
								statusForm.setIsRegdExciseVender("False");
								request.setAttribute("setRegdExciseVenderNotMandatory", "setRegdExciseVenderNotMandatory");
							}
							statusForm.setEccNo(rsEditRecord.getString("ECC_No"));
							statusForm.setExciseRegNo(rsEditRecord.getString("Excise_Reg_No"));
							statusForm.setExciseRange(rsEditRecord.getString("Excise_Range"));
							statusForm.setExciseDivision(rsEditRecord.getString("Excise_Division"));
							statusForm.setDlno1(rsEditRecord.getString("DLNO1"));
							statusForm.setDlno2(rsEditRecord.getString("DLNO2"));
							statusForm.setPaymentTermID(rsEditRecord.getString("PAYMENT_TERM_ID"));
							statusForm.setAccountClerkId(rsEditRecord.getString("ACCOUNT_CLERK_ID"));
							statusForm.setCutomerCode(rsEditRecord.getString("cutomer_code"));
							
							String sapCodeno=rsEditRecord.getString("SAP_CODE_NO");
							if(sapCodeno!=null){
								statusForm.setSapCodeNo(sapCodeno);		
						String sapCodeExist=rsEditRecord.getString("SAP_CODE_EXISTS");
						if(sapCodeExist.equalsIgnoreCase("1"))
						{
							statusForm.setSapCodeExists("True");
						}
						if(sapCodeExist.equalsIgnoreCase("0"))
							statusForm.setSapCodeExistsNo("True");
						
					
						String sapCreationDate=rsEditRecord.getString("SAP_CREATION_DATE");
						String sapDate[]=sapCreationDate.split(" ");
						sapCreationDate=sapDate[0];
						String sapCode[]=sapCreationDate.split("-");
						sapCreationDate=sapCode[2]+"/"+sapCode[1]+"/"+sapCode[0];
						statusForm.setSapCreationDate(sapCreationDate);
						statusForm.setSapCreatedBy(rsEditRecord.getString("SAP_CREATED_BY"));
						statusForm.setRequestedBy(rsEditRecord.getString("REQUESTED_BY"));
							}
							
							
							
							ArrayList fileList = new ArrayList();
							String uploadedFiles=rsEditRecord.getString("Attachments");
							if(uploadedFiles.equalsIgnoreCase(""))
							{
								
							}try{
							String v[] = uploadedFiles.split(",");
							int l = v.length;
								for (int i = 0; i < l; i++) 
								{
									CustomerMasterForm pendAppForm2=new CustomerMasterForm();
								int x=v[i].lastIndexOf("/");
								uploadedFiles=v[i].substring(x+1);		
								pendAppForm2.setFileList(uploadedFiles);
								pendAppForm2.setFilepath("jsp/EMicro Files/ESS/sapMasterRequest/Customer master files/UploadFiles/"+uploadedFiles+"");
								fileList.add(pendAppForm2);
								}
							request.setAttribute("listName", fileList);
							
						}
							catch (Exception e) {
								e.printStackTrace();
						
					}
					
						}
						}
				
				statusForm.setUserRole(userRole);
				
				checkStatus=0;int appStatus=0;
				LinkedList listApprers=new LinkedList();
				String getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
				"where mast.Location='"+location+"' AND  mast.Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mast.Approver_Id=emp.PERNR order by Priority";
				ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
				while(rsApprDetails.next())
				{
					checkStatus=1;
					ApprovalsForm apprvers=new ApprovalsForm();
					apprvers.setPriority(rsApprDetails.getString("Priority"));
					apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
					String empCode=rsApprDetails.getString("Approver_Id");
					String approveStatus="";
					
					
					String recordStatus="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
					"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
					"all_r.type='"+matType+"' AND Material_Group='"+matGroup+"' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
					"or mast.Role='Creator') and mast.Approver_Id=emp.PERNR  group by mast.Priority,mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status," +
					"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
					ResultSet rsAppInfo=ad.selectQuery(recordStatus);
					while(rsAppInfo.next())
					{
						
						apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
						approveStatus=rsAppInfo.getString("Req_Status");
						if(approveStatus.equalsIgnoreCase(""))
						{
							apprvers.setApproveStatus("In Process");
						}
						if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
						{
							String approveDate=rsAppInfo.getString("approved_date");
							String a[]=approveDate.split(" ");
							approveDate=a[0];
							String b[]=approveDate.split("-");
							approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
						apprvers.setDate(approveDate);
						}else{
							String rejectDate=	rsAppInfo.getString("rejected_date");
						
							String a[]=rejectDate.split(" ");
							rejectDate=a[0];
							String b[]=rejectDate.split("-");
							rejectDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
							apprvers.setDate(rejectDate);
								appStatus=1;
						}
						comments=rsAppInfo.getString("Comments");
						if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
						{
							apprvers.setComments("");
						}else{
							apprvers.setComments(rsAppInfo.getString("Comments"));
						}
					}
					if(approveStatus.equalsIgnoreCase("") && appStatus==0)
					{
						apprvers.setApproveStatus("In Process");
					}
					apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
					listApprers.add(apprvers);
				}
				request.setAttribute("approverDetails", listApprers);
				if(userRole.equalsIgnoreCase("User"))
				{
				return mapping.findForward("customerMaster");
				}
				if(userRole.equalsIgnoreCase("Accounts"))
				{
				return mapping.findForward("customerMaster_Account");
				}
				if(userRole.equalsIgnoreCase("Creator"))
				{
			
					
				return mapping.findForward("customerMaster_Creator");
				}
				
			}
		
		
		catch(Exception se){
			System.out.println("Exception @ getting Approve");
			se.printStackTrace();
		}
		request.setAttribute("header", "Pending Request");
		request.setAttribute("listDetails", list);
		request.setAttribute("openRequest", "");
		String result=(String)session.getAttribute("result");
		System.out.println("result="+result);
		if(result==null||result==" ")
		session.setAttribute("result"," ");
		
		
		if(request.getParameter("id")!=null){
		
		request.setAttribute("MenuIcon", request.getParameter("id"));
		}
		
		statusForm.setRequestType(reqType);
		statusForm.setRequestNo(reqId);
		
		getSelectedRequestToApprove(mapping, form, request, response);
		return mapping.findForward("leaveDetails");
	}
	
	public ActionForward statusChangeForITRequest(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
	{
		String trans="";
		String ITstatus="";
		String chkdate="";
		String chkdate1="";
		EssDao ad=new EssDao();
		LinkedList list = new LinkedList();
        String forwardType="";
		ApprovalsForm help=(ApprovalsForm) form;
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		if(user==null){
			request.setAttribute("message","Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		String reqId = request.getParameter("reqId");
		MainDao exeQry = new MainDao();
		String reqType = help.getReqRequstType();
		help.setRequestType(reqType);
		String reqStatus = request.getParameter("status");
		String filterBy=help.getSelectedFilter();
		help.setSelectedFilter(filterBy);
		help.setReqRequstType(reqType);
		int totalRecords=help.getTotalRecords();//21
		int startRecord=help.getStartRecord();//11
		int endRecord=help.getEndRecord();	
		
	
		help.setTotalRecords(totalRecords);
		help.setStartRecord(startRecord);
		help.setEndRecord(endRecord);
			String comments = help.getRemark();
		
		LinkedList reqDetails = new LinkedList();
		reqDetails.add(0, reqId);
		reqDetails.add(1, reqType);
		//User Informtion
		String lcode = user.getPlantId();
		int user_Id = user.getId();
		String uName = user.getUserName();
		String appName = uName;
		int rowCount= 0;
		System.out.println(reqType);
		//updateStatus("Approved", reqType,reqId);
		//get the total Approvers
		rowCount = getCount("Approvers_Details", reqType);
		//check and get next approver
		
		ITMail email = new ITMail();
		
		if(reqType.equalsIgnoreCase("IT Request"))
		 {

			int i=0;
			int hodpresent=0;
			int hodpresentinIt=0;
			String HODPresentId="";
			String HODPresentname="";
			String itengineeridpar1="";
			String itengineeridpar2="";
			String itengineerid="";
			String itengineername="";
			String HOD="";
			boolean presenthod=false;
			String getNextApprover="";
	    	int checkStatus=0;
	    	String pendingApprovers="";
	    	String nextApprovers="";
	    	
			Date dNow = new Date( );
			 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS");
			String dateNow = ft.format(dNow);
			
			String requesterdetails="Select CONVERT(varchar(10),Req_date,103)+' '+ CONVERT(varchar(5),Req_date,108) as Req_date,* from IT_HELPDESK where Req_No='"+reqId+"'";
			ResultSet rsLeave=ad.selectQuery(requesterdetails);
			String empID="";
			String submit_date="";
			String ITType="";
			try{
			while(rsLeave.next())
			{
				empID=rsLeave.getString("Emp_No");
				submit_date=rsLeave.getString("Req_date");			
				ITType=rsLeave.getString("Req_type");
				
			}
			help.setRequestDate(submit_date);
			if(reqStatus.equalsIgnoreCase("Approve")){
				int approverPriority=0;
				String getApprPriority="select Priority from IT_Approvers where Req_Type='"+ITType+"' and Approver_ID='"+user.getEmployeeNo()+"' and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) ";
				ResultSet rsApprPriority=ad.selectQuery(getApprPriority);
				while(rsApprPriority.next())
				{
					approverPriority=rsApprPriority.getInt("Priority");
				}
				
				if(approverPriority==1)
				{
					if(ITType.equalsIgnoreCase("New IT Spares Request"))
					{
						String cat=help.getAssetcategory();
						String insertAduser="update IT_HELPDESK set Category='"+help.getAssetcategory()+"',reqbydate='"+help.getReqbydate()+"',"
								+ "suggmodel='"+help.getSuggestmodelname()+"',Apprxvalue='"+help.getApprxvalue()+"',purpose='"+help.getPurpose()+"'  where Req_No="+reqId+"";
										
								 i=ad.SqlExecuteUpdate(insertAduser);
					}
					if(ITType.equalsIgnoreCase("New IT Asset Request"))
					{
						
						String cat=help.getAssetcategory();
				 		String gxp="";
						String x=help.getGxpyes();
						String y=help.getGxpno();
						
						if(x==null)
						{
							gxp=help.getGxpno();
						}
						
						if(y==null)
						{
							gxp=help.getGxpyes();
						}
						
						
						String lan="";
						String a=help.getLanyes();
						String b=help.getLanno();
						
						if(a==null)
						{
							lan=help.getLanno();
						}
						
						if(b==null)
						{
							lan=help.getLanyes();
						}
						
						
						
						if(cat.equalsIgnoreCase("Desktop") ||cat.equalsIgnoreCase("Laptop"))
				 		{
						String insertAduser="update IT_HELPDESK set ADLoginName='"+help.getAdloginname()+"', Server_Address='"+help.getServer()+"' ,Category='"+help.getAssetcategory()+"',reqbydate='"+help.getReqbydate()+"',"
								+ "suggmodel='"+help.getSuggestmodelname()+"',gxp='"+gxp+"','Apprxvalue='"+help.getApprxvalue()+"',lan='"+lan+"',anysplreq='"+help.getAnysplreq()+"',purpose='"+help.getPurpose()+"'  where Req_No="+reqId+"";
										
								 i=ad.SqlExecuteUpdate(insertAduser);
				 		}
						
						if(cat.equalsIgnoreCase("Printer"))
				 		{
							String insertAduser="update IT_HELPDESK set ADLoginName='"+help.getAdloginname()+"', Server_Address='"+help.getServer()+"' ,Category='"+help.getAssetcategory()+"',reqbydate='"+help.getReqbydate()+"',"
							+ "suggmodel='"+help.getSuggestmodelname()+"',gxp='"+gxp+"',Apprxvalue='"+help.getApprxvalue() +"',lan='"+lan+"',anysplreq='"+help.getAnysplreq()+"',purpose='"+help.getPurpose()+"',typeofprinter='"+help.getTypeofprinter()+"',"
									+ "printvolpm='"+help.getPrintvolpermonth()+"',noofusers='"+help.getUsers()+"', suggmodelno='"+help.getSuggestmodelno() +"'  where Req_No="+reqId+"";
											
									 i=ad.SqlExecuteUpdate(insertAduser);
					 		}
							
					}
			if(ITType.equalsIgnoreCase("Active Directory User Creation")){
				String insertAduser="update IT_HELPDESK set Asset_Details='"+help.getAssetvalue()+"',ADLoginName='"+help.getAdloginname()+"', " +
				"Server_Address='"+help.getServer()+"' ,Req_Folder_access='"+help.getReqdfolderacces()+"',Reason='"+help.getReason()+"',Frst_Name='"+help.getFirstname()+"',Last_Name='"+help.getLastname()+"',Initials='"+help.getInitials()+"' where Req_No="+reqId+"";
						
				 i=ad.SqlExecuteUpdate(insertAduser);
				}
			
			if(ITType.equalsIgnoreCase("Active Directory User Deletion")){
				String insertAduser="update IT_HELPDESK set Asset_Details='"+help.getAssetvalue()+"',ADLoginName='"+help.getAdloginname()+"', " +
				"Server_Address='"+help.getServer()+"' ,Req_Folder_Deletion='"+help.getReqdfolderdeletion()+"',Delete_From='"+help.getDeletefrom()+"',Reason='"+help.getReason()+"' where Req_No="+reqId+"";
						
						 i=ad.SqlExecuteUpdate(insertAduser);
				}
			if(ITType.equalsIgnoreCase("Active Directory User Transfer")){
				String insertAduser="update IT_HELPDESK set Asset_Details='"+help.getAssetvalue()+"',ADLoginName='"+help.getAdloginname()+"', " +
				"From_Loc='"+help.getFromlocationId()+"',To_Loc='"+help.getTolocationId()+"',From_Dep='"+help.getFromdepartment()+"',To_Dep='"+help.getTodepartment()+"',Reason='"+help.getReason()+"' where Req_No="+reqId+"";
						
				 i=ad.SqlExecuteUpdate(insertAduser);
				}
		
			
			
			if(ITType.equalsIgnoreCase("Email ID Create Request"))
			{
				String outside="";
				String x=help.getOutsidecomyes();
				String y=help.getOutsidecomno();
				
				if(x==null)
				{
					outside=help.getOutsidecomno();
				}
				
				if(y==null)
				{
					outside=help.getOutsidecomyes();
				}
				
				String insertAduser="update IT_HELPDESK set ADLoginName='"+help.getAdloginname()+"',SuggestedEmailId='"+help.getSuggestedEmailId()+"', " +
			"comm_outside='"+outside+"',Is_He_Hod='"+help.getIsHeHod()+"',Enable_Web_access='"+help.getEnablewebAccess()+"'," +
			" Is_This_common_ID='"+help.getIsthisCommonId()+"',Reason='"+help.getReason()+"',TotalEmailIdInDepartment='"+help.getTotalmailIdDept()+"',TotalEmailIdInLocation='"+help.getTotalmailIdloc()+"',Frst_Name='"+help.getFirstname()+"',Last_Name='"+help.getLastname()+"',Middle_Name='"+help.getMiddname()+"' where Req_No="+reqId+" ";
	
				
				 i=ad.SqlExecuteUpdate(insertAduser);
			}
			if(ITType.equalsIgnoreCase("Email ID Change Request"))
			{
				String outside="";
				String x=help.getOutsidecomyes();
				String y=help.getOutsidecomno();
				
				if(x==null)
				{
					outside=help.getOutsidecomno();
				}
				
				if(y==null)
				{
					outside=help.getOutsidecomyes();
				}
				
				String insertAduser="update IT_HELPDESK set ADLoginName='"+help.getAdloginname()+"',From_EmailID='"+help.getFromemailId()+"',SuggestedEmailId='"+help.getSuggestedEmailId()+"', " +
				"comm_outside='"+outside+"',Transfer_Old_Emails='"+help.getTransferoldmail()+"',delete_old_email='"+help.getDeleteoldmails()+"',Is_He_Hod='"+help.getIsHeHod()+"',Enable_Web_access='"+help.getEnablewebAccess()+"'," +
				" Is_This_common_ID='"+help.getIsthisCommonId()+"',Reason='"+help.getReason()+"',TotalEmailIdInDepartment='"+help.getTotalmailIdDept()+"',TotalEmailIdInLocation='"+help.getTotalmailIdloc()+"' where Req_No="+reqId+" ";
		
				 i=ad.SqlExecuteUpdate(insertAduser);
				 
			}
			
			if(ITType.equalsIgnoreCase("Email ID Delete Request"))
			{
				String insertAduser="update IT_HELPDESK set ADLoginName='"+help.getAdloginname()+"',EmailID_Deleted='"+help.getEmailidDelete()+"', " +
				"Is_He_Hod='"+help.getIsHeHod()+"',Is_This_common_ID='"+help.getIsthisCommonId()+"',Delete_From='"+help.getDeletefrom()+"',Reason='"+help.getReason()+"',TotalEmailIdInDepartment='"+help.getTotalmailIdDept()+"',TotalEmailIdInLocation='"+help.getTotalmailIdloc()+"' where Req_No="+reqId+" ";
			
				 i=ad.SqlExecuteUpdate(insertAduser);
				 
			}
			
			if(ITType.equalsIgnoreCase("Internet Access Request"))
			{
				String insertAduser="update IT_HELPDESK set Asset_Details='"+help.getAssetvalue()+"',ADLoginName='"+help.getAdloginname()+"', " +
				"Reason='"+help.getReason()+"',InternetGroupCategory='"+help.getInternetgrp()+"' where Req_No="+reqId+"";
				
				
				 i=ad.SqlExecuteUpdate(insertAduser); 
			}
			if(ITType.equalsIgnoreCase("External Drives Access Request"))
			{
				String devicetype="";
				String a=help.getCdrom();
				String b=help.getUsb();
				
				if(a==null)
				{
				a="";
				}
				if(b==null)
				{
				b="";
				}
				
				
				 if(a.equalsIgnoreCase("CD/DVD_ROM") && b.equalsIgnoreCase("USB")){
					 devicetype="3";
				 }else{
					 if(a.equalsIgnoreCase("CD/DVD_ROM")){
						 devicetype="1";
					 }
					 if(b.equalsIgnoreCase("USB")){
						 devicetype="2";
					 }
				 }
				
				String insertAduser="update IT_HELPDESK set Asset_Details='"+help.getAssetvalue()+"',ADLoginName='"+help.getAdloginname()+"', " +
				"Device_type='"+devicetype+"',Access_type='"+help.getAccesstype()+"',Reason='"+help.getReason()+"' where Req_No="+reqId+"";
				
				
				 i=ad.SqlExecuteUpdate(insertAduser);
			}
			if(ITType.equalsIgnoreCase("FTP Access Request"))
			{
				
				
				String a[]=help.getAccesstypes();
				StringBuffer result = new StringBuffer();
				for (int j = 0; j < a.length; j++) {
				   result.append( a[j]+"," );
				}
				String ans = result.toString();
				ans=ans.substring(0, ans.length()-1);
				
				String insertAduser="update IT_HELPDESK set Asset_Details='"+help.getAssetvalue()+"',ADLoginName='"+help.getAdloginname()+"', " +
				" Server_Address='"+help.getServer()+"',Req_Folder_access='"+help.getRequiredfoldername()+"',Access_type='"+ans+"'," +
				"FrmRequiredDurationofAccess='"+help.getFrmdurationofaccess()+"',ToRequiredDurationofAccess='"+help.getTodurationofaccess()+"',Reason='"+help.getReason()+"',"
				+ "UserName='"+help.getUsername()+"',Password='"+help.getPassword()+"',RequiredDurationofAccess='"+help.getDurationofaccess()+"' where Req_No="+reqId+"";
				
				
				 i=ad.SqlExecuteUpdate(insertAduser);
			}
			
			if(ITType.equalsIgnoreCase("File Server Access Request"))
			{
				String insertAduser="update IT_HELPDESK set Asset_Details='"+help.getAssetvalue()+"',ADLoginName='"+help.getAdloginname()+"', " +
				"Server_Address='"+help.getServer()+"' ,Req_Folder_access='"+help.getRequiredfoldername()+"',Access_type='"+help.getAccesstype()+"',Reason='"+help.getReason()+"' where Req_No="+reqId+"";
				
				 i=ad.SqlExecuteUpdate(insertAduser);
			}
			
			
				}
			
				int upd=0;
				int upd1=0;
       //check ITHOD status
				
				String ithodstus="select IT_hod_status from IT_HELPDESK where Req_No='"+reqId+"' ";
				ResultSet result=ad.selectQuery(ithodstus);
				while(result.next())
				{
					ITstatus=result.getString("IT_hod_status");
				}
			
				if(ITstatus==null)
				{
			String updateSql= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Comments='"+help.getComments()+"'," +
            "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' and Pending_approver='"+user.getEmployeeNo()+"' and Req_Type='IT Request'";
			 upd=ad.SqlExecuteUpdate(updateSql);
				}
				
				else
				{
			
						String updateSql= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Comments='"+help.getComments()+"'," +
			            "approved_date='"+dateNow+"',rejected_date='',Req_Status='Completed' where Req_Id='"+reqId+"' and Pending_approver='"+user.getEmployeeNo()+"' and Req_Type='IT Request'";
						 upd1=ad.SqlExecuteUpdate(updateSql);	
					
				}
		
			
				if(upd1>0)
				{
					help.setMessage("Request Closed successfully ");
					help.setComments("");
				}
			
			if(upd>0)
			{
				
					
				help.setMessage("Request Approved successfully ");
				help.setComments("");
			}
				
				if(ITstatus==null)
				{
					//transaction table
					
					 trans="insert into IT_TRANSACTION_DETAILS(Req_No,Emp_No,Req_type,Approver_ID,Req_Status,Transaction_Date,ITEng_Status)" +
					" values('"+reqId+"','"+empID+"','"+ITType+"','"+user.getEmployeeNo()+"','Approved','"+dateNow+"','Open')";
				 	 i=ad.SqlExecuteUpdate(trans);

				 approverPriority=0;
				 getApprPriority="select Priority from IT_Approvers where Req_Type='"+ITType+"' and Approver_ID='"+user.getEmployeeNo()+"' and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  ";
				 rsApprPriority=ad.selectQuery(getApprPriority);
				while(rsApprPriority.next())
				{
					approverPriority=rsApprPriority.getInt("Priority");
				}
				
				//IT Engineer details
				 String chkIt="select it.Approver_ID,it.Parallel_Approver1,Parallel_Approver2,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp where Req_Type = '"+ITType+"' " +
				 "and Priority=1 and emp.PERNR=it.Approver_ID and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) ";
				 ResultSet rs3= ad.selectQuery(chkIt);
				 try {
					if(rs3.next())
					 {
						itengineerid=rs3.getString("Approver_ID");
						itengineername=rs3.getString("EMP_FULLNAME");
						itengineeridpar1=rs3.getString("Parallel_Approver1");
						itengineeridpar1=rs3.getString("Parallel_Approver2");
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				
				
					
					
					String getApproverID="select Priority,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp where Req_Type='"+ITType+"'" +
							" and emp.PERNR=it.Approver_ID and Priority>'"+approverPriority+"' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  order by Priority";				
					ResultSet approverRS=ad.selectQuery(getApproverID);
					try {
						while(approverRS.next()){
								int priority = approverRS.getInt("Priority");
								
								if(pendingApprovers.equalsIgnoreCase("")){
								pendingApprovers = approverRS.getString("EMP_FULLNAME")+",";
								}
								else{
									pendingApprovers = pendingApprovers +approverRS.getString("EMP_FULLNAME")+",";
								}
								
						}
						pendingApprovers=pendingApprovers+itengineername;
						
					} catch (SQLException e2) {
						
						e2.printStackTrace();
					}
					
							
				String maintable="update IT_HELPDESK set Req_Status='In Process',approved_date='"+dateNow+"',rejected_date='',Pending_approver='"+pendingApprovers+"',Last_approver='"+user.getFullName()+"' where Req_No='"+reqId+"' "	;

				 i=ad.SqlExecuteUpdate(maintable);
				 
				 try {
				 //Get It Approvers 
				int totalApproverCount=0;
				String getcount="select Count(*) from IT_Approvers where Req_Type='"+ITType+"' and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  ";
				ResultSet rsA=ad.selectQuery(getcount);
				while(rsA.next())
				{
					totalApproverCount=rsA.getInt(1);
				}
				 getApprPriority="select Priority from IT_Approvers where Req_Type='"+ITType+"' and Approver_ID='"+user.getEmployeeNo()+"' and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) ";
				 rsApprPriority=ad.selectQuery(getApprPriority);
				while(rsApprPriority.next())
				{
					approverPriority=rsApprPriority.getInt("Priority");
				}
				if((totalApproverCount==approverPriority)||ITType.equalsIgnoreCase("Active Directory User Creation")){
					//update user request  status
				 maintable="update IT_HELPDESK set IT_hod_status='YES',Req_Status='Approved',approved_date='"+dateNow+"',rejected_date='',Pending_approver='"+pendingApprovers+"',Last_approver='"+user.getFullName()+"' where Req_No='"+reqId+"' "	;
				 i=ad.SqlExecuteUpdate(maintable);
				 //insert again to IT engineer
				 String insert="insert into All_Request(Req_Id,Req_Type,Requester_Name,Req_Date,Req_Status,Last_Approver," +
					"Pending_Approver,Approved_Persons,Requester_Id,type) values('"+reqId+"','IT Request','"+empID+"'," +
					"'"+submit_date+"','Pending','','"+itengineerid +"','',"+empID+",'"+ITType+"')";
						 i=ad.SqlExecuteUpdate(insert);
							ad.connClose();
						 int j = email.sendMailToApprover(request, Integer.parseInt(reqId),ITType,itengineerid,"");
						if(itengineeridpar1!=null)
						{
							if(!itengineeridpar1.equalsIgnoreCase(""))
							
							{
								String insert1="insert into All_Request(Req_Id,Req_Type,Requester_Name,Req_Date,Req_Status,Last_Approver," +
										"Pending_Approver,Approved_Persons,Requester_Id,type) values('"+reqId+"','IT Request','"+empID+"'," +
										"'"+submit_date+"','Pending','','"+itengineeridpar1 +"','',"+empID+",'"+ITType+"')";
											 i=ad.SqlExecuteUpdate(insert1);
												ad.connClose();
											 int j1 = email.sendMailToApprover(request, Integer.parseInt(reqId),ITType,itengineeridpar1,"");
											
								
							}	
							
						}
						if(itengineeridpar2!=null)
						{
							if(!itengineeridpar2.equalsIgnoreCase(""))
							
							{
								String insert1="insert into All_Request(Req_Id,Req_Type,Requester_Name,Req_Date,Req_Status,Last_Approver," +
										"Pending_Approver,Approved_Persons,Requester_Id,type) values('"+reqId+"','IT Request','"+empID+"'," +
										"'"+submit_date+"','Pending','','"+itengineeridpar2 +"','',"+empID+",'"+ITType+"')";
											 i=ad.SqlExecuteUpdate(insert1);
												ad.connClose();
											 int j1 = email.sendMailToApprover(request, Integer.parseInt(reqId),ITType,itengineeridpar2,"");
											
								
							}	
							
						}
						 
						 //transaction table
							
						  trans="insert into IT_TRANSACTION_DETAILS(Req_No,Emp_No,Req_type,Approver_ID,Req_Status,Transaction_Date,ITEng_Status)" +
							" values('"+reqId+"','"+empID+"','"+ITType+"','"+itengineerid+"','Pending','"+dateNow+"','Open')";
						 	 i=ad.SqlExecuteUpdate(trans);
				 
						 	if(itengineeridpar1!=null)
							{
								if(!itengineeridpar1.equalsIgnoreCase(""))
								
								{
									trans="insert into IT_TRANSACTION_DETAILS(Req_No,Emp_No,Req_type,Approver_ID,Req_Status,Transaction_Date,ITEng_Status)" +
											" values('"+reqId+"','"+empID+"','"+ITType+"','"+itengineeridpar1+"','Pending','"+dateNow+"','Open')";
										 	 i=ad.SqlExecuteUpdate(trans);
								 
									
								}	
								
							}
						 	 
						 	if(itengineeridpar2!=null)
							{
								if(!itengineeridpar2.equalsIgnoreCase(""))
								
								{
									trans="insert into IT_TRANSACTION_DETAILS(Req_No,Emp_No,Req_type,Approver_ID,Req_Status,Transaction_Date,ITEng_Status)" +
											" values('"+reqId+"','"+empID+"','"+ITType+"','"+itengineeridpar2+"','Pending','"+dateNow+"','Open')";
										 	 i=ad.SqlExecuteUpdate(trans);
								 
									
								}	
								
							}
				}else{
					String nextApprover="";

						
						
						String nxt="select * from IT_Approvers where Req_Type = '"+ITType+"' and Priority='"+(approverPriority+1)+"' and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) ";
					
					 ResultSet rs= ad.selectQuery(nxt);
					
						while(rs.next())
						 {
							nextApprover=rs.getString("Approver_ID");
						 }
							
								
							String insert="insert into All_Request(Req_Id,Req_Type,Requester_Name,Req_Date,Req_Status,Last_Approver," +
							"Pending_Approver,Approved_Persons,Requester_Id,type) values('"+reqId+"','IT Request','"+empID+"'," +
							"'"+submit_date+"','Pending','','"+nextApprover+"','',"+empID+",'"+ITType+"')";
								
							 i=ad.SqlExecuteUpdate(insert);
								ad.connClose();
							 int j = email.sendMailToApprover(request, Integer.parseInt(reqId),ITType,nextApprover,"");
							 
							//transaction table
								
							  trans="insert into IT_TRANSACTION_DETAILS(Req_No,Emp_No,Req_type,Approver_ID,Req_Status,Transaction_Date,ITEng_Status)" +
								" values('"+reqId+"','"+empID+"','"+ITType+"','"+nextApprover+"','Pending','"+dateNow+"','Open')";
							 	 i=ad.SqlExecuteUpdate(trans);
					
				 
				}
				} catch (SQLException e) {
					e.printStackTrace();
				
				 }
				
				
				
			}
			 
				else
				{
					String maintable1="update IT_HELPDESK set ITEng_Status='Closed',Req_Status='Completed',approved_date='"+dateNow+"',rejected_date='',Pending_approver='No',Last_approver='"+user.getFullName()+"' where Req_No='"+reqId+"' "	;
					 i=ad.SqlExecuteUpdate(maintable1);
					 
					//transaction table
						
					  trans="insert into IT_TRANSACTION_DETAILS(Req_No,Emp_No,Req_type,Approver_ID,Req_Status,Transaction_Date,ITEng_Status)" +
						" values('"+reqId+"','"+empID+"','"+ITType+"','"+user.getEmployeeNo()+"','Approved','"+dateNow+"','Closed')";
					 	 i=ad.SqlExecuteUpdate(trans);
					 ad.connClose();
						
					 	 int j = email.sendMailToRequester(request, Integer.parseInt(reqId),ITType,user.getEmployeeNo(),"");
				}
			
			
			
			}
			else
			{
			
				String updateSql= "update All_Request set Approved_Persons='"+user.getEmployeeNo()+"', Last_approver='"+user.getEmployeeNo()+"',Pending_approver='',Comments='"+help.getComments()+"'," +
			     "approved_date='',rejected_date='"+dateNow+"',Req_Status='Rejected' where Req_Id='"+reqId+"' and Pending_approver='"+user.getEmployeeNo()+"' and Req_Type='IT Request'";
							 
							int upd=ad.SqlExecuteUpdate(updateSql);
							if(upd>0)
							{
                                 help.setMessage2("Request has been rejected Succesfully");
								request.setAttribute("statusMessage2", "statusMessage2");
								help.setComments("");
								String maintable="update IT_HELPDESK set Req_Status='Rejected',approved_date='',rejected_date='"+dateNow+"',Pending_approver='No',Last_approver='"+user.getFullName()+"' where Req_No='"+reqId+"' "	;

								 i=ad.SqlExecuteUpdate(maintable);
								
								 
								//transaction table
									
								  trans="insert into IT_TRANSACTION_DETAILS(Req_No,Emp_No,Req_type,Approver_ID,Req_Status,Transaction_Date,ITEng_Status)" +
									" values('"+reqId+"','"+empID+"','"+ITType+"','"+user.getEmployeeNo()+"','Rejected','"+dateNow+"','Open')";
								 	 i=ad.SqlExecuteUpdate(trans);
								 	 ad.connClose();
								 	 int j = email.sendMailToRequester(request, Integer.parseInt(reqId),ITType,user.getEmployeeNo(),"");
							
							}
			}
			
			
		}catch (Exception e) {
		e.printStackTrace();
		}
			
			int approverPriority=0;
			String getApprPriority="select Priority from IT_Approvers where Req_Type='"+ITType+"' and Approver_ID='"+user.getEmployeeNo()+"' and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) ";
			ResultSet rsApprPriority=ad.selectQuery(getApprPriority);
			try {
				while(rsApprPriority.next())
				{
					approverPriority=rsApprPriority.getInt("Priority");
				}
			} catch (SQLException e2) {
			
				e2.printStackTrace();
			}
			
			if(ITType.equalsIgnoreCase("New IT Spares Request"))
			{

				LinkedList newassetcreation=new LinkedList();
				String empno=user.getEmployeeNo();
				
				String data="select emp.PERNR,emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE " +
						"from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"+empID+"' and " +
						"dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";	
				ResultSet rs= ad.selectQuery(data);
				try {
					while(rs.next())
					{
						
					
						help.setRequestername(rs.getString("EMP_FULLNAME"));
						help.setRequesterdepartment(rs.getString("DPTSTXT"));
						help.setRequesterdesignation(rs.getString("DSGSTXT"));
						help.setExtno(rs.getString("TEL_EXTENS"));
						help.setIpPhoneno(rs.getString("IP_PHONE"));
						help.setLocation(rs.getString("LOCATION_CODE"));
						help.setEmpno(rs.getString("PERNR"));
						
					
						
					}
				} catch (SQLException e) {
				  e.printStackTrace();
				}
				String requester="";
				
				String data1=" select * from IT_HELPDESK where Req_No="+reqId+"";	
		ResultSet rs1= ad.selectQuery(data1);
		try {
			while(rs1.next())
			{
				help.setAssetvalue(rs1.getString("Asset_Details"));
				help.setAdloginname(rs1.getString("ADLoginName"));
				help.setServer(rs1.getString("Server_Address"));

				help.setReason(rs1.getString("Reason"));
				help.setHostname(rs1.getString("HostName"));
				help.setIPNumber(rs1.getString("IPAddress"));
				help.setReqPriority(rs1.getString("Req_Priority"));
				
				help.setAssetcategory(rs1.getString("Category"));
				help.setReqbydate(rs1.getString("reqbydate"));
				help.setSuggestmodelname(rs1.getString("suggmodel"));
				
				
				
			
				help.setSuggestmodelno(rs1.getString("suggmodelno"));
				help.setApprxvalue(rs1.getString("Apprxvalue"));
		

				help.setPurpose(rs1.getString("purpose"));
		
				
				String rmk=rs1.getString("Remarks");
				if(rmk!=null)
				{
					help.setRemarks(rs1.getString("Remarks"));
					request.setAttribute("Remark", "Remark");
				}
			}
		} catch (SQLException e) {
			  e.printStackTrace();
			}
		
					
		newassetcreation.add(help);
		request.setAttribute("newassetcreation", newassetcreation);	
		
		//Approver Details
		  checkStatus=0;
		LinkedList listApprers=new LinkedList();
		int jk=0;
		//HOD

		 hodpresent=0;
		 hodpresentinIt=0;
		 HODPresentId="";
		 HODPresentname="";
		 itengineerid="";
		 itengineername="";
		 HOD="";
			pendingApprovers="";
		
		 //chk if he has Hod
		 String chkhod="select count(*) from ESS_Approvers where employeeNumber='"+empID+"'  ";
		 ResultSet rs10= ad.selectQuery(chkhod);
		 try {
			while(rs10.next())
			 {
				 hodpresent=rs10.getInt(1);
			 }
		} catch (SQLException e1) {
			
			e1.printStackTrace();
		}
		
		//get hod details
		
	
		if(hodpresent>0){
		String gethod="select ess.ApproverId,emp.EMP_FULLNAME from ESS_Approvers  as ess,emp_official_info as emp  " +
				" where employeeNumber='"+empID+"'  and essType='Leave' and emp.PERNR=ess.ApproverId ";
		 ResultSet rs2= ad.selectQuery(gethod);
		 
		 try {
			if(rs2.next())
			 {
				HODPresentId=rs2.getString("ApproverId");
				HODPresentname=rs2.getString("EMP_FULLNAME");
			 }
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		}
		
		//chk if he is present in It approver
		 String chkhodinit="select count(*) from IT_Approvers where Approver_ID='"+HODPresentId+"' and Req_Type = '"+ITType+"'  and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))";
		 ResultSet rs11= ad.selectQuery(chkhodinit);
		 try {
			while(rs11.next())
			 {
				hodpresentinIt=rs11.getInt(1);
			 }
		} catch (SQLException e1) {
			
			e1.printStackTrace();
		}
		 
		// Plant head
			String plantheadid = "";
			String plantheadname = "";
			String plantheaddep = "";
			String plantheaddesg = "";
			String a="";
			String userx="select loc.LOCID from Location as loc,emp_official_info as emp where loc.LOCATION_CODE=emp.LOCID and emp.PERNR='"+requester+"' ";
			ResultSet userrs=ad.selectQuery(userx);
			try {
				while(userrs.next())
				 {				
					a=userrs.getString("LOCID");
				 }
			} catch (SQLException e2) {
				// TODO Auto-generated catch block
				e2.printStackTrace();
			}
			if (!a.equalsIgnoreCase("16")) {
				String plant = "select pl.Plant,pl.PERNR,emp.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from PLANT_HEAD pl,emp_official_info emp,DEPARTMENT dep,DESIGNATION desg where Plant=(select LOCATION_CODE from Location where LOCID='"
						+ a
						+ "') and emp.PERNR=pl.PERNR and dep.DPTID=emp.DPTID and desg.DSGID=emp.DSGID";
				ResultSet pl = ad.selectQuery(plant);
				try {
					while (pl.next()) {
						plantheadid = pl.getString("pernr");
						plantheadname = pl.getString("EMP_FULLNAME");
						plantheaddep = pl.getString("DPTSTXT");
						plantheaddesg = pl.getString("DSGSTXT");
					}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			if (plantheadid.equalsIgnoreCase("")) {

				if (hodpresent > 0 && hodpresentinIt == 0) {

					try {

						checkStatus = 1;
						ApprovalsForm apprvershod = new ApprovalsForm();
						apprvershod.setPriority("1");

						apprvershod.setEmployeeCode(HODPresentId);
						apprvershod.setEmployeeName(HODPresentname);

						String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
								+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
								+ reqId
								+ "' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
								+ empID
								+ "')) AND "
								+ "all_r.Last_Approver='"
								+ HODPresentId
								+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
								+ ITType
								+ "' and emp.PERNR=all_r.Last_Approver"
								+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

						ResultSet rsAppInfo = ad.selectQuery(recordStatus);
						if (rsAppInfo.next()) {
							apprvershod.setApproveStatus(rsAppInfo
									.getString("Req_Status"));
							String approveStatus = rsAppInfo
									.getString("Req_Status");
							if (approveStatus.equalsIgnoreCase("Approved")
									|| approveStatus
											.equalsIgnoreCase("Completed")) {
								apprvershod.setDate(rsAppInfo
										.getString("approved_date"));
							} else {
								apprvershod.setDate(rsAppInfo
										.getString("rejected_date"));
							}
							comments = "";
							comments = rsAppInfo.getString("Comments");
							if (comments == "null") {
								apprvershod.setComments("");
							} else {
								apprvershod.setComments(rsAppInfo
										.getString("Comments"));
							}
						}

						listApprers.add(apprvershod);
						jk = 1;
					}

					catch (SQLException e1) {

						e1.printStackTrace();
					}

				}
			}

			if (!plantheadid.equalsIgnoreCase("")) {

				try {

					checkStatus = 1;
					ApprovalsForm apprvershod = new ApprovalsForm();
					apprvershod.setPriority("1");

					apprvershod.setEmployeeCode(plantheadid);
					apprvershod.setEmployeeName(plantheadname);

					String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
							+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
							+ reqId
							+ "' and it.LOCATION_ID='"
							+ user.getPlantId()
							+ "' AND "
							+ "all_r.Last_Approver='"
							+ plantheadid
							+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
							+ ITType
							+ "' and emp.PERNR=all_r.Last_Approver"
							+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

					ResultSet rsAppInfo = ad.selectQuery(recordStatus);
					if (rsAppInfo.next()) {
						apprvershod.setApproveStatus(rsAppInfo
								.getString("Req_Status"));
						String approveStatus = rsAppInfo
								.getString("Req_Status");
						if (approveStatus.equalsIgnoreCase("Approved")
								|| approveStatus
										.equalsIgnoreCase("Created")) {
							apprvershod.setDate(rsAppInfo
									.getString("approved_date"));
						} else {
							apprvershod.setDate(rsAppInfo
									.getString("rejected_date"));
						}
						comments = "";
						comments = rsAppInfo.getString("Comments");
						if (comments == "null") {
							apprvershod.setComments("");
						} else {
							apprvershod.setComments(rsAppInfo
									.getString("Comments"));
						}
					}

					listApprers.add(apprvershod);
					jk = 1;
				}

				catch (SQLException e1) {

					e1.printStackTrace();
				}

			}

			String getApprDetails = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
					+ empID
					+ "'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"
					+ ITType
					+ "' group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
			ResultSet rsApprDetails = ad.selectQuery(getApprDetails);
			try {
				while (rsApprDetails.next()) {

					checkStatus = 1;
					ApprovalsForm apprvers = new ApprovalsForm();
					apprvers.setPriority(rsApprDetails
							.getString("Priority"));

					apprvers.setPriority(rsApprDetails
							.getString("Priority"));
					if (jk == 1) {

						apprvers.setPriority(Integer.toString(listApprers
								.size() + 1));
					}
					apprvers.setEmployeeCode(rsApprDetails
							.getString("Approver_Id"));
					String empCode = rsApprDetails.getString("Approver_Id");

					String recordStatus = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
							+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
							+ reqId
							+ "' "
							+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
							+ empID
							+ "')) AND all_r.Last_Approver='"
							+ empCode
							+ "' and it.Approver_Id=all_r.Last_Approver  and all_r.Req_Type='IT Request' and "
							+ "it.Req_Type='"
							+ ITType
							+ "' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
							+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";

					ResultSet rsAppInfo = ad.selectQuery(recordStatus);
					if (rsAppInfo.next()) {
						if (rsAppInfo.getInt("Priority") == 1) {
							chkdate = rsAppInfo.getString("approved_date");
							chkdate1 = rsAppInfo.getString("rejected_date");
						}
						apprvers.setApproveStatus(rsAppInfo
								.getString("Req_Status"));
						String approveStatus = rsAppInfo
								.getString("Req_Status");
						if (approveStatus.equalsIgnoreCase("Approved")
								|| approveStatus
										.equalsIgnoreCase("Completed")) {
							apprvers.setDate(rsAppInfo
									.getString("approved_date"));
						} else {
							apprvers.setDate(rsAppInfo
									.getString("rejected_date"));
						}
						comments = "";
						comments = rsAppInfo.getString("Comments");
						if (comments == "null") {
							apprvers.setComments("");
						} else {
							apprvers.setComments(rsAppInfo
									.getString("Comments"));
						}
					}
					apprvers.setEmployeeName(rsApprDetails
							.getString("EMP_FULLNAME"));

					listApprers.add(apprvers);

				}
				//IT ENGINEER DETAIlS
				
				
				String getApprDetails1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' and it.Priority=1    group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
				ResultSet rsApprDetails1=ad.selectQuery(getApprDetails1);
				
					while(rsApprDetails1.next())
					{
						checkStatus=1;
						ApprovalsForm apprvers=new ApprovalsForm();
						apprvers.setPriority(Integer.toString(listApprers.size()+1));
						
						apprvers.setEmployeeCode(rsApprDetails1.getString("Approver_Id"));
						String empCode1=rsApprDetails1.getString("Approver_Id");
						
						String recordStatus1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
								+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
								+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode1+"' and it.Approver_Id=all_r.Last_Approver and all_r.Req_Type='IT Request' and "
								+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
								+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
						
						ResultSet rsAppInfo1=ad.selectQuery(recordStatus1);
						if(rsAppInfo1.next())
						{
							
							String approveStatus=rsAppInfo1.getString("Req_Status");
							if(approveStatus.equalsIgnoreCase("Approved"))
							{
								recordStatus1=recordStatus1+" order by all_r.approved_date desc ";
								ResultSet rsAppInfo2=ad.selectQuery(recordStatus1);
								if(rsAppInfo2.next())
								{
									if(!chkdate.equalsIgnoreCase(rsAppInfo2.getString("approved_date")))
									{
										apprvers.setApproveStatus("Closed");
									apprvers.setDate(rsAppInfo2.getString("approved_date"));
									
								
								
								 comments="";
								comments=rsAppInfo2.getString("Comments");
								if(comments=="null" )
								{
									apprvers.setComments("");
								}else{
									apprvers.setComments(rsAppInfo2.getString("Comments"));
								}
								}
								}
							}else{
								
								recordStatus1=recordStatus1+" order by all_r.rejected_date desc ";
								ResultSet rsAppInfo3=ad.selectQuery(recordStatus1);
								if(rsAppInfo3.next())
								{
									if(!chkdate1.equalsIgnoreCase(rsAppInfo3.getString("rejected_date")))
									{
									apprvers.setDate(rsAppInfo3.getString("rejected_date"));
									}
								
								 comments="";
								comments=rsAppInfo3.getString("Comments");
								if(comments=="null" )
								{
									apprvers.setComments("");
								}else{
									apprvers.setComments(rsAppInfo3.getString("Comments"));
								}
								}
							}
							
						}
						apprvers.setEmployeeName(rsApprDetails1.getString("EMP_FULLNAME"));
				
					listApprers.add(apprvers);
					}
				
				request.setAttribute("approverDetails", listApprers);
			
		} 
		
			catch (SQLException e) {
			e.printStackTrace();
		}
		
		
		
		if(approverPriority==1)
		{
			
				forwardType="NewItspareformENG";
				
				
		}
		else{
		forwardType="NewItspareformAppr";
		}
			
			}
			
			if(ITType.equalsIgnoreCase("New IT Asset Request"))
			{

				LinkedList newassetcreation=new LinkedList();
				String empno=user.getEmployeeNo();
				
				String data="select emp.PERNR,emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE " +
						"from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"+empID+"' and " +
						"dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";	
				ResultSet rs= ad.selectQuery(data);
				try {
					while(rs.next())
					{
						
					
						help.setRequestername(rs.getString("EMP_FULLNAME"));
						help.setRequesterdepartment(rs.getString("DPTSTXT"));
						help.setRequesterdesignation(rs.getString("DSGSTXT"));
						help.setExtno(rs.getString("TEL_EXTENS"));
						help.setIpPhoneno(rs.getString("IP_PHONE"));
						help.setLocation(rs.getString("LOCATION_CODE"));
						help.setEmpno(rs.getString("PERNR"));
						
					
						
					}
				} catch (SQLException e) {
				  e.printStackTrace();
				}
				String requester="";
				String data1=" select * from IT_HELPDESK where Req_No="+reqId+"";	
		ResultSet rs1= ad.selectQuery(data1);
		try {
			while(rs1.next())
			{
				help.setAssetvalue(rs1.getString("Asset_Details"));
				help.setAdloginname(rs1.getString("ADLoginName"));
				help.setServer(rs1.getString("Server_Address"));
				help.setReqdfolderacces(rs1.getString("Req_Folder_access"));
				help.setReason(rs1.getString("Reason"));
				help.setHostname(rs1.getString("HostName"));
				help.setIPNumber(rs1.getString("IPAddress"));
				help.setReqPriority(rs1.getString("Req_Priority"));
				
				help.setAssetcategory(rs1.getString("Category"));
				help.setReqbydate(rs1.getString("reqbydate"));
				help.setSuggestmodelname(rs1.getString("suggmodel"));
				
				String gxp=rs1.getString("gxp");
				
				
				if(gxp.equalsIgnoreCase("Yes"))
				{
					help.setGxpyes("true");
				}
				
				if(gxp.equalsIgnoreCase("No"))
				{
					help.setGxpno("true");
				}
				
	
				
				
				
				String lan=rs1.getString("lan");
			
				
						if(lan.equalsIgnoreCase("Yes"))
						{
							help.setLanyes("true");
						}
						
						if(lan.equalsIgnoreCase("No"))
						{
							help.setLanno("true");
						}
				
				help.setTypeofprinter(rs1.getString("typeofprinter"));
				help.setUsers(rs1.getString("noofusers"));
				help.setPrintvolpermonth(rs1.getString("printvolpm"));
				help.setSuggestmodelno(rs1.getString("suggmodelno"));
				help.setApprxvalue(rs1.getString("Apprxvalue"));
		
			
				help.setAnysplreq(rs1.getString("anysplreq"));
				help.setPurpose(rs1.getString("purpose"));
		
				
				String rmk=rs1.getString("Remarks");
				if(rmk!=null)
				{
					help.setRemarks(rs1.getString("Remarks"));
					request.setAttribute("Remark", "Remark");
				}
			}
		} catch (SQLException e) {
			  e.printStackTrace();
			}
		
					
		newassetcreation.add(help);
		request.setAttribute("newassetcreation", newassetcreation);	
		
		//Approver Details
		 checkStatus=0;
		LinkedList listApprers=new LinkedList();
		int jk=0;
		//HOD

		hodpresent=0;
		 hodpresentinIt=0;
		 HODPresentId="";
		HODPresentname="";
		 itengineerid="";
		itengineername="";
		 HOD="";
			pendingApprovers="";
		
		 //chk if he has Hod
		 String chkhod="select count(*) from ESS_Approvers where employeeNumber='"+empID+"'  ";
		 ResultSet rs10= ad.selectQuery(chkhod);
		 try {
			while(rs10.next())
			 {
				 hodpresent=rs10.getInt(1);
			 }
		} catch (SQLException e1) {
			
			e1.printStackTrace();
		}
		
		//get hod details
		
	
		if(hodpresent>0){
		String gethod="select ess.ApproverId,emp.EMP_FULLNAME from ESS_Approvers  as ess,emp_official_info as emp  " +
				" where employeeNumber='"+empID+"'  and essType='Leave' and emp.PERNR=ess.ApproverId ";
		 ResultSet rs2= ad.selectQuery(gethod);
		 
		 try {
			if(rs2.next())
			 {
				HODPresentId=rs2.getString("ApproverId");
				HODPresentname=rs2.getString("EMP_FULLNAME");
			 }
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		}
		
		//chk if he is present in It approver
		 String chkhodinit="select count(*) from IT_Approvers where Approver_ID='"+HODPresentId+"' and Req_Type = '"+ITType+"'  and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))";
		 ResultSet rs11= ad.selectQuery(chkhodinit);
		 try {
			while(rs11.next())
			 {
				hodpresentinIt=rs11.getInt(1);
			 }
		} catch (SQLException e1) {
			
			e1.printStackTrace();
		}
		 
		// Plant head
			String plantheadid = "";
			String plantheadname = "";
			String plantheaddep = "";
			String plantheaddesg = "";
			String a="";
			String userx="select loc.LOCID from Location as loc,emp_official_info as emp where loc.LOCATION_CODE=emp.LOCID and emp.PERNR='"+requester+"' ";
			ResultSet userrs=ad.selectQuery(userx);
			try {
				while(userrs.next())
				 {				
					a=userrs.getString("LOCID");
				 }
			} catch (SQLException e2) {
				// TODO Auto-generated catch block
				e2.printStackTrace();
			}
			if (!a.equalsIgnoreCase("16")) {
				String plant = "select pl.Plant,pl.PERNR,emp.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from PLANT_HEAD pl,emp_official_info emp,DEPARTMENT dep,DESIGNATION desg where Plant=(select LOCATION_CODE from Location where LOCID='"
						+ a
						+ "') and emp.PERNR=pl.PERNR and dep.DPTID=emp.DPTID and desg.DSGID=emp.DSGID";
				ResultSet pl = ad.selectQuery(plant);
				try {
					while (pl.next()) {
						plantheadid = pl.getString("pernr");
						plantheadname = pl.getString("EMP_FULLNAME");
						plantheaddep = pl.getString("DPTSTXT");
						plantheaddesg = pl.getString("DSGSTXT");
					}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			if (plantheadid.equalsIgnoreCase("")) {

				if (hodpresent > 0 && hodpresentinIt == 0) {

					try {

						checkStatus = 1;
						ApprovalsForm apprvershod = new ApprovalsForm();
						apprvershod.setPriority("1");

						apprvershod.setEmployeeCode(HODPresentId);
						apprvershod.setEmployeeName(HODPresentname);

						String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
								+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
								+ reqId
								+ "' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
								+ empID
								+ "')) AND "
								+ "all_r.Last_Approver='"
								+ HODPresentId
								+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
								+ ITType
								+ "' and emp.PERNR=all_r.Last_Approver"
								+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

						ResultSet rsAppInfo = ad.selectQuery(recordStatus);
						if (rsAppInfo.next()) {
							apprvershod.setApproveStatus(rsAppInfo
									.getString("Req_Status"));
							String approveStatus = rsAppInfo
									.getString("Req_Status");
							if (approveStatus.equalsIgnoreCase("Approved")
									|| approveStatus
											.equalsIgnoreCase("Completed")) {
								apprvershod.setDate(rsAppInfo
										.getString("approved_date"));
							} else {
								apprvershod.setDate(rsAppInfo
										.getString("rejected_date"));
							}
							comments = "";
							comments = rsAppInfo.getString("Comments");
							if (comments == "null") {
								apprvershod.setComments("");
							} else {
								apprvershod.setComments(rsAppInfo
										.getString("Comments"));
							}
						}

						listApprers.add(apprvershod);
						jk = 1;
					}

					catch (SQLException e1) {

						e1.printStackTrace();
					}

				}
			}

			if (!plantheadid.equalsIgnoreCase("")) {

				try {

					checkStatus = 1;
					ApprovalsForm apprvershod = new ApprovalsForm();
					apprvershod.setPriority("1");

					apprvershod.setEmployeeCode(plantheadid);
					apprvershod.setEmployeeName(plantheadname);

					String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
							+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
							+ reqId
							+ "' and it.LOCATION_ID='"
							+ user.getPlantId()
							+ "' AND "
							+ "all_r.Last_Approver='"
							+ plantheadid
							+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
							+ ITType
							+ "' and emp.PERNR=all_r.Last_Approver"
							+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

					ResultSet rsAppInfo = ad.selectQuery(recordStatus);
					if (rsAppInfo.next()) {
						apprvershod.setApproveStatus(rsAppInfo
								.getString("Req_Status"));
						String approveStatus = rsAppInfo
								.getString("Req_Status");
						if (approveStatus.equalsIgnoreCase("Approved")
								|| approveStatus
										.equalsIgnoreCase("Created")) {
							apprvershod.setDate(rsAppInfo
									.getString("approved_date"));
						} else {
							apprvershod.setDate(rsAppInfo
									.getString("rejected_date"));
						}
						comments = "";
						comments = rsAppInfo.getString("Comments");
						if (comments == "null") {
							apprvershod.setComments("");
						} else {
							apprvershod.setComments(rsAppInfo
									.getString("Comments"));
						}
					}

					listApprers.add(apprvershod);
					jk = 1;
				}

				catch (SQLException e1) {

					e1.printStackTrace();
				}

			}

			String getApprDetails = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
					+ empID
					+ "'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"
					+ ITType
					+ "' group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
			ResultSet rsApprDetails = ad.selectQuery(getApprDetails);
			try {
				while (rsApprDetails.next()) {

					checkStatus = 1;
					ApprovalsForm apprvers = new ApprovalsForm();
					apprvers.setPriority(rsApprDetails
							.getString("Priority"));

					apprvers.setPriority(rsApprDetails
							.getString("Priority"));
					if (jk == 1) {

						apprvers.setPriority(Integer.toString(listApprers
								.size() + 1));
					}
					apprvers.setEmployeeCode(rsApprDetails
							.getString("Approver_Id"));
					String empCode = rsApprDetails.getString("Approver_Id");

					String recordStatus = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
							+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
							+ reqId
							+ "' "
							+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
							+ empID
							+ "')) AND all_r.Last_Approver='"
							+ empCode
							+ "' and it.Approver_Id=all_r.Last_Approver  and all_r.Req_Type='IT Request' and "
							+ "it.Req_Type='"
							+ ITType
							+ "' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
							+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";

					ResultSet rsAppInfo = ad.selectQuery(recordStatus);
					if (rsAppInfo.next()) {
						if (rsAppInfo.getInt("Priority") == 1) {
							chkdate = rsAppInfo.getString("approved_date");
							chkdate1 = rsAppInfo.getString("rejected_date");
						}
						apprvers.setApproveStatus(rsAppInfo
								.getString("Req_Status"));
						String approveStatus = rsAppInfo
								.getString("Req_Status");
						if (approveStatus.equalsIgnoreCase("Approved")
								|| approveStatus
										.equalsIgnoreCase("Completed")) {
							apprvers.setDate(rsAppInfo
									.getString("approved_date"));
						} else {
							apprvers.setDate(rsAppInfo
									.getString("rejected_date"));
						}
						comments = "";
						comments = rsAppInfo.getString("Comments");
						if (comments == "null") {
							apprvers.setComments("");
						} else {
							apprvers.setComments(rsAppInfo
									.getString("Comments"));
						}
					}
					apprvers.setEmployeeName(rsApprDetails
							.getString("EMP_FULLNAME"));

					listApprers.add(apprvers);

				}
				//IT ENGINEER DETAIlS
				
				
				String getApprDetails1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' and it.Priority=1    group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
				ResultSet rsApprDetails1=ad.selectQuery(getApprDetails1);
				
					while(rsApprDetails1.next())
					{
						checkStatus=1;
						ApprovalsForm apprvers=new ApprovalsForm();
						apprvers.setPriority(Integer.toString(listApprers.size()+1));
						
						apprvers.setEmployeeCode(rsApprDetails1.getString("Approver_Id"));
						String empCode1=rsApprDetails1.getString("Approver_Id");
						
						String recordStatus1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
								+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
								+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode1+"' and it.Approver_Id=all_r.Last_Approver and all_r.Req_Type='IT Request' and "
								+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
								+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
						
						ResultSet rsAppInfo1=ad.selectQuery(recordStatus1);
						if(rsAppInfo1.next())
						{
							
							String approveStatus=rsAppInfo1.getString("Req_Status");
							if(approveStatus.equalsIgnoreCase("Approved"))
							{
								recordStatus1=recordStatus1+" order by all_r.approved_date desc ";
								ResultSet rsAppInfo2=ad.selectQuery(recordStatus1);
								if(rsAppInfo2.next())
								{
									if(!chkdate.equalsIgnoreCase(rsAppInfo2.getString("approved_date")))
									{
										apprvers.setApproveStatus("Closed");
									apprvers.setDate(rsAppInfo2.getString("approved_date"));
									
								
								
								 comments="";
								comments=rsAppInfo2.getString("Comments");
								if(comments=="null" )
								{
									apprvers.setComments("");
								}else{
									apprvers.setComments(rsAppInfo2.getString("Comments"));
								}
								}
								}
							}else{
								
								recordStatus1=recordStatus1+" order by all_r.rejected_date desc ";
								ResultSet rsAppInfo3=ad.selectQuery(recordStatus1);
								if(rsAppInfo3.next())
								{
									if(!chkdate1.equalsIgnoreCase(rsAppInfo3.getString("rejected_date")))
									{
									apprvers.setDate(rsAppInfo3.getString("rejected_date"));
									}
								
								 comments="";
								comments=rsAppInfo3.getString("Comments");
								if(comments=="null" )
								{
									apprvers.setComments("");
								}else{
									apprvers.setComments(rsAppInfo3.getString("Comments"));
								}
								}
							}
							
						}
						apprvers.setEmployeeName(rsApprDetails1.getString("EMP_FULLNAME"));
				
					listApprers.add(apprvers);
					}
				
				request.setAttribute("approverDetails", listApprers);
			
		} 
		
			catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		
		if(approverPriority==1)
		{
			
				forwardType="NewItassetformENG";
				
				
		}
		else{
		forwardType="NewItassetformAppr";
		}
			
				
			}
			
			if(ITType.equalsIgnoreCase("Active Directory User Creation"))
			{
				LinkedList Adusercreation=new LinkedList();
				String empno=user.getEmployeeNo();
				
				String data="select emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE " +
						"from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"+empID+"' and " +
						"dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";	
				ResultSet rs= ad.selectQuery(data);
				try {
					while(rs.next())
					{
						
					
						help.setRequestername(rs.getString("EMP_FULLNAME"));
						help.setRequesterdepartment(rs.getString("DPTSTXT"));
						help.setRequesterdesignation(rs.getString("DSGSTXT"));
						help.setExtno(rs.getString("TEL_EXTENS"));
						help.setIpPhoneno(rs.getString("IP_PHONE"));
						help.setLocation(rs.getString("LOCATION_CODE"));
						
						
					
						
					}
				} catch (SQLException e) {
				  e.printStackTrace();
				}
				
				String data1=" select * from IT_HELPDESK where Req_No="+reqId+"";	
		ResultSet rs1= ad.selectQuery(data1);
		try {
			while(rs1.next())
			{
				help.setAssetvalue(rs1.getString("Asset_Details"));
				help.setAdloginname(rs1.getString("ADLoginName"));
				help.setServer(rs1.getString("Server_Address"));
				help.setReqdfolderacces(rs1.getString("Req_Folder_access"));
				help.setReason(rs1.getString("Reason"));
				help.setHostname(rs1.getString("HostName"));
				help.setIPNumber(rs1.getString("IPAddress"));
				help.setReqPriority(rs1.getString("Req_Priority"));
				
				help.setInitials(rs1.getString("Initials"));
				help.setFirstname(rs1.getString("Frst_Name"));
				help.setLastname(rs1.getString("Last_Name"));
				
				String rmk=rs1.getString("Remarks");
				if(rmk!=null)
				{
					help.setRemarks(rs1.getString("Remarks"));
					request.setAttribute("Remark", "Remark");
				}
			}
		} catch (SQLException e) {
			  e.printStackTrace();
			}
		
		Adusercreation.add(help);
		request.setAttribute("Adusercreation", Adusercreation);	
		
		//Approver Details
		  checkStatus=0;
		LinkedList listApprers=new LinkedList();
		int jk=0;
		//HOD

		 hodpresent=0;
		 hodpresentinIt=0;
		 HODPresentId="";
		 HODPresentname="";
		 itengineerid="";
		 itengineername="";
		 HOD="";
			pendingApprovers="";
		
		 //chk if he has Hod
		 String chkhod="select count(*) from ESS_Approvers where employeeNumber='"+empID+"'  ";
		 ResultSet rs10= ad.selectQuery(chkhod);
		 try {
			while(rs10.next())
			 {
				 hodpresent=rs10.getInt(1);
			 }
		} catch (SQLException e1) {
			
			e1.printStackTrace();
		}
		
		//get hod details
		
	
		if(hodpresent>0){
		String gethod="select ess.ApproverId,emp.EMP_FULLNAME from ESS_Approvers  as ess,emp_official_info as emp  " +
				" where employeeNumber='"+empID+"'  and essType='Leave' and emp.PERNR=ess.ApproverId ";
		 ResultSet rs2= ad.selectQuery(gethod);
		 
		 try {
			if(rs2.next())
			 {
			
				HODPresentId=rs2.getString("ApproverId");
				HODPresentname=rs2.getString("EMP_FULLNAME");
			 }
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		}
		
		//chk if he is present in It approver
		 String chkhodinit="select count(*) from IT_Approvers where Approver_ID='"+HODPresentId+"' and Req_Type = '"+ITType+"'  and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))";
		 ResultSet rs11= ad.selectQuery(chkhodinit);
		 try {
			while(rs11.next())
			 {
				hodpresentinIt=rs11.getInt(1);
			 }
		} catch (SQLException e1) {
			
			e1.printStackTrace();
		}
		 
			if(hodpresent>0 && hodpresentinIt==0 )
			{
				
				
				try {
					
						checkStatus=1;
						ApprovalsForm apprvershod=new ApprovalsForm();
						apprvershod.setPriority("1");
						
						apprvershod.setEmployeeCode(HODPresentId);
						apprvershod.setEmployeeName(HODPresentname);
						
						String recordStatus="select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
					+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND "
					+ "all_r.Last_Approver='"+HODPresentId+"' and all_r.Req_Type='IT Request' and it.Req_Type='"+ITType+"' and emp.PERNR=all_r.Last_Approver"
					+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";
						
						ResultSet rsAppInfo=ad.selectQuery(recordStatus);
						if(rsAppInfo.next())
						{
							apprvershod.setApproveStatus(rsAppInfo.getString("Req_Status"));
							String approveStatus=rsAppInfo.getString("Req_Status");
							if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
							{
								apprvershod.setDate(rsAppInfo.getString("approved_date"));
							}else{
								apprvershod.setDate(rsAppInfo.getString("rejected_date"));
							}
							 comments="";
							comments=rsAppInfo.getString("Comments");
							if(comments=="null" )
							{
								apprvershod.setComments("");
							}else{
								apprvershod.setComments(rsAppInfo.getString("Comments"));
							}
						}
						
						
						listApprers.add(apprvershod);
					 jk=1;
					}
				
				catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				
			}
		
		
	
		
		String getApprDetails="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
		ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
		try {
			while(rsApprDetails.next())
			{
				
				checkStatus=1;
				ApprovalsForm apprvers=new ApprovalsForm();
				apprvers.setPriority(rsApprDetails.getString("Priority"));
				
			
				
				apprvers.setPriority(rsApprDetails.getString("Priority"));
				if( jk==1)
				{
					apprvers.setPriority(Integer.toString(listApprers.size()+1));
				}
				apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
				String empCode=rsApprDetails.getString("Approver_Id");
				
				/*String recordStatus="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
						+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
						+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode+"' and it.Approver_Id=all_r.Last_Approver  and all_r.Req_Type='IT Request' and "
						+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
						+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
				
				ResultSet rsAppInfo=ad.selectQuery(recordStatus);
				if(rsAppInfo.next())
				{
					if(rsAppInfo.getInt("Priority")==1 )
					{
						 chkdate=rsAppInfo.getString("approved_date");
						 chkdate1=rsAppInfo.getString("rejected_date");
					}
					apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
					String approveStatus=rsAppInfo.getString("Req_Status");
					if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
					{
					apprvers.setDate(rsAppInfo.getString("approved_date"));
					}else{
						apprvers.setDate(rsAppInfo.getString("rejected_date"));
					}
					 comments="";
					comments=rsAppInfo.getString("Comments");
					if(comments=="null" )
					{
						apprvers.setComments("");
					}else{
						apprvers.setComments(rsAppInfo.getString("Comments"));
					}
				}
				apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
				
				listApprers.add(apprvers);
				*/
			}
				//IT ENGINEER DETAIlS
				
				
				String getApprDetails1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' and it.Priority=1    group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
				ResultSet rsApprDetails1=ad.selectQuery(getApprDetails1);
				
					while(rsApprDetails1.next())
					{
						checkStatus=1;
						ApprovalsForm apprvers=new ApprovalsForm();
						apprvers.setPriority(Integer.toString(listApprers.size()+1));
						
						apprvers.setEmployeeCode(rsApprDetails1.getString("Approver_Id"));
						String empCode1=rsApprDetails1.getString("Approver_Id");
						
						String recordStatus1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
								+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
								+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode1+"' and it.Approver_Id=all_r.Last_Approver and all_r.Req_Type='IT Request' and "
								+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
								+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
						
						ResultSet rsAppInfo1=ad.selectQuery(recordStatus1);
						if(rsAppInfo1.next())
						{
							
							String approveStatus=rsAppInfo1.getString("Req_Status");
							if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
							{
								recordStatus1=recordStatus1+" order by all_r.approved_date desc ";
								ResultSet rsAppInfo2=ad.selectQuery(recordStatus1);
								if(rsAppInfo2.next())
								{
									if(!chkdate.equalsIgnoreCase(rsAppInfo2.getString("approved_date")))
									{
										apprvers.setApproveStatus("Closed");
									apprvers.setDate(rsAppInfo2.getString("approved_date"));
									
								
								
								 comments="";
								comments=rsAppInfo2.getString("Comments");
								if(comments=="null" )
								{
									apprvers.setComments("");
								}else{
									apprvers.setComments(rsAppInfo2.getString("Comments"));
								}
								}
								}
							}else{
								
								recordStatus1=recordStatus1+" order by all_r.rejected_date desc ";
								ResultSet rsAppInfo3=ad.selectQuery(recordStatus1);
								if(rsAppInfo3.next())
								{
									if(!chkdate1.equalsIgnoreCase(rsAppInfo3.getString("rejected_date")))
									{
									apprvers.setDate(rsAppInfo3.getString("rejected_date"));
									}
									
								
								 comments="";
								comments=rsAppInfo3.getString("Comments");
								if(comments=="null" )
								{
									apprvers.setComments("");
								}else{
									apprvers.setComments(rsAppInfo3.getString("Comments"));
								}
								}
							}
							
						}
						apprvers.setEmployeeName(rsApprDetails1.getString("EMP_FULLNAME"));
				
					listApprers.add(apprvers);
					}
				
				request.setAttribute("approverDetails", listApprers);
			
		} 
		
			catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		
		if(approverPriority==1)
		{
			
			forwardType="AduserCreationformENG";
		}
		else{
		forwardType="AduserCreationformAppr";
		}
				
			}
			
			if(ITType.equalsIgnoreCase("Active Directory User Deletion"))
			{


				LinkedList AduserDeletion=new LinkedList();
				String empno=user.getEmployeeNo();
				
				String data="select emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE " +
						"from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"+empID+"' and " +
						"dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";	
				ResultSet rs= ad.selectQuery(data);
				try {
					while(rs.next())
					{
						
					
						help.setRequestername(rs.getString("EMP_FULLNAME"));
						help.setRequesterdepartment(rs.getString("DPTSTXT"));
						help.setRequesterdesignation(rs.getString("DSGSTXT"));
						help.setExtno(rs.getString("TEL_EXTENS"));
						help.setIpPhoneno(rs.getString("IP_PHONE"));
						help.setLocation(rs.getString("LOCATION_CODE"));
						
						
					
						
					}
				} catch (SQLException e) {
				  e.printStackTrace();
				}
				
				String data1=" select * from IT_HELPDESK where Req_No="+reqId+"";	
		ResultSet rs1= ad.selectQuery(data1);
		try {
			while(rs1.next())
			{
				help.setAssetvalue(rs1.getString("Asset_Details"));
				help.setAdloginname(rs1.getString("ADLoginName"));
				help.setServer(rs1.getString("Server_Address"));
				help.setReqdfolderdeletion(rs1.getString("Req_Folder_Deletion"));
				help.setDeletefrom(rs1.getString("Delete_From"));
				help.setReason(rs1.getString("Reason"));
				help.setHostname(rs1.getString("HostName"));
				help.setIPNumber(rs1.getString("IPAddress"));
				help.setReqPriority(rs1.getString("Req_Priority"));
				
				String rmk=rs1.getString("Remarks");
				if(rmk!=null)
				{
					help.setRemarks(rs1.getString("Remarks"));
					request.setAttribute("Remark", "Remark");
				}
				
				
			}
		} catch (SQLException e) {
			  e.printStackTrace();
			}
		
		
		AduserDeletion.add(help);
		request.setAttribute("AduserDeletion", AduserDeletion);	
		
		//Approver Details
		  checkStatus=0;
		LinkedList listApprers=new LinkedList();
		int jk=0;
		//HOD

		 hodpresent=0;
		 hodpresentinIt=0;
		 HODPresentId="";
		 HODPresentname="";
		 itengineerid="";
		 itengineername="";
		 HOD="";
			pendingApprovers="";
		
		 //chk if he has Hod
		 String chkhod="select count(*) from ESS_Approvers where employeeNumber='"+empID+"'  ";
		 ResultSet rs10= ad.selectQuery(chkhod);
		 try {
			while(rs10.next())
			 {
				 hodpresent=rs10.getInt(1);
			 }
		} catch (SQLException e1) {
			
			e1.printStackTrace();
		}
		
		//get hod details
		
	
		if(hodpresent>0){
		String gethod="select ess.ApproverId,emp.EMP_FULLNAME from ESS_Approvers  as ess,emp_official_info as emp  " +
				" where employeeNumber='"+empID+"'  and essType='Leave' and emp.PERNR=ess.ApproverId ";
		 ResultSet rs2= ad.selectQuery(gethod);
		 
		 try {
			if(rs2.next())
			 {
			
				HODPresentId=rs2.getString("ApproverId");
				HODPresentname=rs2.getString("EMP_FULLNAME");
			 }
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		}
		
		//chk if he is present in It approver
		 String chkhodinit="select count(*) from IT_Approvers where Approver_ID='"+HODPresentId+"' and Req_Type = '"+ITType+"'  and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))";
		 ResultSet rs11= ad.selectQuery(chkhodinit);
		 try {
			while(rs11.next())
			 {
				hodpresentinIt=rs11.getInt(1);
			 }
		} catch (SQLException e1) {
			
			e1.printStackTrace();
		}
		 
			if(hodpresent>0 && hodpresentinIt==0 )
			{
				
				
				try {
					
						checkStatus=1;
						ApprovalsForm apprvershod=new ApprovalsForm();
						apprvershod.setPriority("1");
						
						apprvershod.setEmployeeCode(HODPresentId);
						apprvershod.setEmployeeName(HODPresentname);
						
						String recordStatus="select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
					+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND "
					+ "all_r.Last_Approver='"+HODPresentId+"' and all_r.Req_Type='IT Request' and it.Req_Type='"+ITType+"' and emp.PERNR=all_r.Last_Approver"
					+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";
						
						ResultSet rsAppInfo=ad.selectQuery(recordStatus);
						if(rsAppInfo.next())
						{
							apprvershod.setApproveStatus(rsAppInfo.getString("Req_Status"));
							String approveStatus=rsAppInfo.getString("Req_Status");
							if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
							{
								apprvershod.setDate(rsAppInfo.getString("approved_date"));
							}else{
								apprvershod.setDate(rsAppInfo.getString("rejected_date"));
							}
							 comments="";
							comments=rsAppInfo.getString("Comments");
							if(comments=="null" )
							{
								apprvershod.setComments("");
							}else{
								apprvershod.setComments(rsAppInfo.getString("Comments"));
							}
						}
						
						
						listApprers.add(apprvershod);
					 jk=1;
					}
				
				catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				
			}
		
		
	
		
		String getApprDetails="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
		ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
		try {
			while(rsApprDetails.next())
			{
				
				checkStatus=1;
				ApprovalsForm apprvers=new ApprovalsForm();
				apprvers.setPriority(rsApprDetails.getString("Priority"));
				
			
			
				
				apprvers.setPriority(rsApprDetails.getString("Priority"));
				if(jk==1){
					
					apprvers.setPriority(Integer.toString(listApprers.size()+1));
				}
				apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
				String empCode=rsApprDetails.getString("Approver_Id");
				
				String recordStatus="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
						+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
						+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode+"' and it.Approver_Id=all_r.Last_Approver  and all_r.Req_Type='IT Request' and "
						+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
						+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
				
				ResultSet rsAppInfo=ad.selectQuery(recordStatus);
				if(rsAppInfo.next())
				{
					if(rsAppInfo.getInt("Priority")==1 )
					{
						 chkdate=rsAppInfo.getString("approved_date");
						 chkdate1=rsAppInfo.getString("rejected_date");
					}
					apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
					String approveStatus=rsAppInfo.getString("Req_Status");
					if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
					{
					apprvers.setDate(rsAppInfo.getString("approved_date"));
					}else{
						apprvers.setDate(rsAppInfo.getString("rejected_date"));
					}
					 comments="";
					comments=rsAppInfo.getString("Comments");
					if(comments=="null" )
					{
						apprvers.setComments("");
					}else{
						apprvers.setComments(rsAppInfo.getString("Comments"));
					}
				}
				apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
				
				listApprers.add(apprvers);
				
			}
				//IT ENGINEER DETAIlS
				
				
				String getApprDetails1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' and it.Priority=1    group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
				ResultSet rsApprDetails1=ad.selectQuery(getApprDetails1);
				
					while(rsApprDetails1.next())
					{
						checkStatus=1;
						ApprovalsForm apprvers=new ApprovalsForm();
						apprvers.setPriority(Integer.toString(listApprers.size()+1));
						
						apprvers.setEmployeeCode(rsApprDetails1.getString("Approver_Id"));
						String empCode1=rsApprDetails1.getString("Approver_Id");
						
						String recordStatus1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
								+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
								+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode1+"' and it.Approver_Id=all_r.Last_Approver and all_r.Req_Type='IT Request' and "
								+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
								+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
						
						ResultSet rsAppInfo1=ad.selectQuery(recordStatus1);
						if(rsAppInfo1.next())
						{
							
							String approveStatus=rsAppInfo1.getString("Req_Status");
							if(approveStatus.equalsIgnoreCase("Approved"))
							{
								recordStatus1=recordStatus1+" order by all_r.approved_date desc ";
								ResultSet rsAppInfo2=ad.selectQuery(recordStatus1);
								if(rsAppInfo2.next())
								{
									if(!chkdate.equalsIgnoreCase(rsAppInfo2.getString("approved_date")))
									{
										apprvers.setApproveStatus("Closed");
									apprvers.setDate(rsAppInfo2.getString("approved_date"));
									
								
								
								 comments="";
								comments=rsAppInfo2.getString("Comments");
								if(comments=="null" )
								{
									apprvers.setComments("");
								}else{
									apprvers.setComments(rsAppInfo2.getString("Comments"));
								}
								}
								}
							}else{
								
								recordStatus1=recordStatus1+" order by all_r.rejected_date desc ";
								ResultSet rsAppInfo3=ad.selectQuery(recordStatus1);
								if(rsAppInfo3.next())
								{
									if(!chkdate1.equalsIgnoreCase(rsAppInfo3.getString("rejected_date")))
									{
									apprvers.setDate(rsAppInfo3.getString("rejected_date"));
									}
									
								
								 comments="";
								comments=rsAppInfo3.getString("Comments");
								if(comments=="null" )
								{
									apprvers.setComments("");
								}else{
									apprvers.setComments(rsAppInfo3.getString("Comments"));
								}
								}
							}
							
						}
						apprvers.setEmployeeName(rsApprDetails1.getString("EMP_FULLNAME"));
				
					listApprers.add(apprvers);
					}
				
				request.setAttribute("approverDetails", listApprers);
			
		} 
		
			catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
				
				
		if(approverPriority==1)
		{
			forwardType="AduserDeletionformENG";
		}
		else{
		forwardType="AduserDeletionformAppr";
		}
			
				
			
				
			}
			
			if(ITType.equalsIgnoreCase("Active Directory User Transfer"))
			{
				LinkedList Adusertransfer=new LinkedList();
				String empno=user.getEmployeeNo();
				
				String data="select emp.PERNR,emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE " +
						"from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"+empID+"' and " +
						"dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";	
				ResultSet rs= ad.selectQuery(data);
				try {
					while(rs.next())
					{
						
					
						help.setRequestername(rs.getString("EMP_FULLNAME"));
						help.setRequesterdepartment(rs.getString("DPTSTXT"));
						help.setRequesterdesignation(rs.getString("DSGSTXT"));
						help.setExtno(rs.getString("TEL_EXTENS"));
						help.setIpPhoneno(rs.getString("IP_PHONE"));
						help.setLocation(rs.getString("LOCATION_CODE"));
						help.setEmpno(rs.getString("PERNR"));
						
					
						
					}
				} catch (SQLException e) {
				  e.printStackTrace();
				}
				
				String data1=" select * from IT_HELPDESK where Req_No="+reqId+"";	
		ResultSet rs1= ad.selectQuery(data1);
		try {
			while(rs1.next())
			{
				help.setAssetvalue(rs1.getString("Asset_Details"));
				help.setAdloginname(rs1.getString("ADLoginName"));
				help.setReason(rs1.getString("Reason"));
	
				help.setIPNumber(rs1.getString("IPAddress"));
				help.setFromlocationId(rs1.getString("From_Loc"));
				help.setTolocationId(rs1.getString("To_Loc"));
				help.setFromdepartment(rs1.getString("From_Dep"));
				help.setTodepartment(rs1.getString("To_Dep"));
				
				
				help.setReqPriority(rs1.getString("Req_Priority"));
				
				String rmk=rs1.getString("Remarks");
				if(rmk!=null)
				{
					help.setRemarks(rs1.getString("Remarks"));
					request.setAttribute("Remark", "Remark");
				}
			}
		} catch (SQLException e) {
			  e.printStackTrace();
			}
		
		
		ResultSet rs111 = ad.selectQuery("select LOCID," +
				"LOCNAME,location_code from location");
				ArrayList locationList=new ArrayList();
				ArrayList locationLabelList=new ArrayList();
					
				try {
					while(rs111.next()) {
						locationList.add(rs111.getString("location_code")+"-"+rs111.getString("LOCNAME"));
						locationLabelList.add(rs111.getString("location_code")+"-"+rs111.getString("LOCNAME"));
					}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				help.setLocationIdList(locationList);
				help.setLocationLabelList(locationLabelList);
				
				ArrayList deparmentList=new ArrayList();
				ResultSet rs12 =ad.selectQuery("select DPTSTXT from department order by DPTSTXT");
				try {
					while(rs12.next()){
						
						deparmentList.add(rs12.getString("DPTSTXT"));
					}
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				help.setDepartmentList(deparmentList);
		
		
					
		Adusertransfer.add(help);
		request.setAttribute("Adusertransfer", Adusertransfer);	
		
		//Approver Details
		 checkStatus=0;
		LinkedList listApprers=new LinkedList();
		int jk=0;
		//HOD

		 hodpresent=0;
		 hodpresentinIt=0;
		 HODPresentId="";
		HODPresentname="";
		 itengineerid="";
		 itengineername="";
		 HOD="";
			pendingApprovers="";
		
		 //chk if he has Hod
		 String chkhod="select count(*) from ESS_Approvers where employeeNumber='"+empID+"'  ";
		 ResultSet rs10= ad.selectQuery(chkhod);
		 try {
			while(rs10.next())
			 {
				 hodpresent=rs10.getInt(1);
			 }
		} catch (SQLException e1) {
			
			e1.printStackTrace();
		}
		
		//get hod details
		
	
		if(hodpresent>0){
		String gethod="select ess.ApproverId,emp.EMP_FULLNAME from ESS_Approvers  as ess,emp_official_info as emp  " +
				" where employeeNumber='"+empID+"'  and essType='Leave' and emp.PERNR=ess.ApproverId ";
		 ResultSet rs2= ad.selectQuery(gethod);
		 
		 try {
			if(rs2.next())
			 {
			
				HODPresentId=rs2.getString("ApproverId");
				HODPresentname=rs2.getString("EMP_FULLNAME");
			 }
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		}
		
		//chk if he is present in It approver
		 String chkhodinit="select count(*) from IT_Approvers where Approver_ID='"+HODPresentId+"' and Req_Type = '"+ITType+"'  and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))";
		 ResultSet rs11= ad.selectQuery(chkhodinit);
		 try {
			while(rs11.next())
			 {
				hodpresentinIt=rs11.getInt(1);
			 }
		} catch (SQLException e1) {
			
			e1.printStackTrace();
		}
		 
			if(hodpresent>0 && hodpresentinIt==0 )
			{
				
				
				try {
					
						checkStatus=1;
						ApprovalsForm apprvershod=new ApprovalsForm();
						apprvershod.setPriority("1");
						
						apprvershod.setEmployeeCode(HODPresentId);
						apprvershod.setEmployeeName(HODPresentname);
						
						String recordStatus="select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
					+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND "
					+ "all_r.Last_Approver='"+HODPresentId+"' and all_r.Req_Type='IT Request' and it.Req_Type='"+ITType+"' and emp.PERNR=all_r.Last_Approver"
					+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";
						
						ResultSet rsAppInfo=ad.selectQuery(recordStatus);
						if(rsAppInfo.next())
						{
							apprvershod.setApproveStatus(rsAppInfo.getString("Req_Status"));
							String approveStatus=rsAppInfo.getString("Req_Status");
							if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
							{
								apprvershod.setDate(rsAppInfo.getString("approved_date"));
							}else{
								apprvershod.setDate(rsAppInfo.getString("rejected_date"));
							}
							 comments="";
							comments=rsAppInfo.getString("Comments");
							if(comments=="null" )
							{
								apprvershod.setComments("");
							}else{
								apprvershod.setComments(rsAppInfo.getString("Comments"));
							}
						}
						
						
						listApprers.add(apprvershod);
					 jk=1;
					}
				
				catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				
			}
		
		
	
		
		
		String getApprDetails="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
		ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
		try {
			while(rsApprDetails.next())
			{
			
				checkStatus=1;
				ApprovalsForm apprvers=new ApprovalsForm();
				apprvers.setPriority(rsApprDetails.getString("Priority"));
				
				
				
				
			
				
				apprvers.setPriority(rsApprDetails.getString("Priority"));
				if(jk==1){
					
					apprvers.setPriority(Integer.toString(listApprers.size()+1));
				}
				apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
				String empCode=rsApprDetails.getString("Approver_Id");
				
				String recordStatus="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
						+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
						+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode+"' and it.Approver_Id=all_r.Last_Approver  and all_r.Req_Type='IT Request' and "
						+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
						+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
				
				ResultSet rsAppInfo=ad.selectQuery(recordStatus);
				if(rsAppInfo.next())
				{
					
					if(rsAppInfo.getInt("Priority")==1 )
					{
						 chkdate=rsAppInfo.getString("approved_date");
						 chkdate1=rsAppInfo.getString("rejected_date");
					}
					apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
					String approveStatus=rsAppInfo.getString("Req_Status");
					if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
					{
					apprvers.setDate(rsAppInfo.getString("approved_date"));
					}else{
						apprvers.setDate(rsAppInfo.getString("rejected_date"));
					}
					 comments="";
					comments=rsAppInfo.getString("Comments");
					if(comments=="null" )
					{
						apprvers.setComments("");
					}else{
						apprvers.setComments(rsAppInfo.getString("Comments"));
					}
				}
				apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
				
				listApprers.add(apprvers);
				
			}
				//IT ENGINEER DETAIlS
				
				
				String getApprDetails1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' and it.Priority=1    group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
				ResultSet rsApprDetails1=ad.selectQuery(getApprDetails1);
				
					while(rsApprDetails1.next())
					{
						checkStatus=1;
						ApprovalsForm apprvers=new ApprovalsForm();
						apprvers.setPriority(Integer.toString(listApprers.size()+1));
						
						apprvers.setEmployeeCode(rsApprDetails1.getString("Approver_Id"));
						String empCode1=rsApprDetails1.getString("Approver_Id");
						
						String recordStatus1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
								+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
								+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode1+"' and it.Approver_Id=all_r.Last_Approver and all_r.Req_Type='IT Request' and "
								+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
								+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
						
						ResultSet rsAppInfo1=ad.selectQuery(recordStatus1);
						if(rsAppInfo1.next())
						{
							
							String approveStatus=rsAppInfo1.getString("Req_Status");
							if(approveStatus.equalsIgnoreCase("Approved"))
							{
								recordStatus1=recordStatus1+" order by all_r.approved_date desc ";
								ResultSet rsAppInfo2=ad.selectQuery(recordStatus1);
								if(rsAppInfo2.next())
								{
									if(!chkdate.equalsIgnoreCase(rsAppInfo2.getString("approved_date")))
									{
										apprvers.setApproveStatus("Closed");
									apprvers.setDate(rsAppInfo2.getString("approved_date"));
									
								
								
								 comments="";
								comments=rsAppInfo2.getString("Comments");
								if(comments=="null" )
								{
									apprvers.setComments("");
								}else{
									apprvers.setComments(rsAppInfo2.getString("Comments"));
								}
								}
								}
							}else{
								
								recordStatus1=recordStatus1+" order by all_r.rejected_date desc ";
								ResultSet rsAppInfo3=ad.selectQuery(recordStatus1);
								if(rsAppInfo3.next())
								{
									if(!chkdate1.equalsIgnoreCase(rsAppInfo3.getString("rejected_date")))
									{
									apprvers.setDate(rsAppInfo3.getString("rejected_date"));
									}
								
								 comments="";
								comments=rsAppInfo3.getString("Comments");
								if(comments=="null" )
								{
									apprvers.setComments("");
								}else{
									apprvers.setComments(rsAppInfo3.getString("Comments"));
								}
								}
							}
							
						}
						apprvers.setEmployeeName(rsApprDetails1.getString("EMP_FULLNAME"));
				
					listApprers.add(apprvers);
					}
				
				request.setAttribute("approverDetails", listApprers);
			
		} 
		
			catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		
		if(approverPriority==1)
		{
		forwardType="AduserTransferformENG";
				
		}
		else{
		forwardType="AduserTransferformAppr";
		}
			
				
			}
			
			
			if(ITType.equalsIgnoreCase("Email ID Create Request"))
			{
				
				
				ArrayList desgList=new ArrayList();
				ArrayList desgLabelList=new ArrayList();
				ResultSet rs16 = ad.selectQuery("select dsgid," +
						"DSGLTXT from DESIGNATION order by DSGLTXT"); 
						try {
							while(rs16.next()) {
								desgList.add(rs16.getString("dsgid"));
								desgLabelList.add(rs16.getString("DSGLTXT"));
							}
							rs16.close();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							
							e.printStackTrace();
						}
						
						help.setDesgList(desgList);
						help.setDesgLabelList(desgLabelList);
				
				
				
				
				ArrayList deptList=new ArrayList();
								ArrayList deptLabelList=new ArrayList();
								ResultSet rs161 = ad.selectQuery("select dptid," +
										"DPTLTXT from DEPARTMENT order by DPTLTXT "); 
										try {
											while(rs161.next()) {
												deptList.add(rs161.getString("dptid"));
												deptLabelList.add(rs161.getString("DPTLTXT"));
											}
											rs16.close();
										} catch (SQLException e) {
											// TODO Auto-generated catch block
											e.printStackTrace();
										}
										
										help.setDeptList(deptList);
										help.setDeptLabelList(deptLabelList);
										
										
				LinkedList LotusIDCreation = new LinkedList();
				String empno = user.getEmployeeNo();

				String data = "select emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE "
						+ "from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"
						+ empID
						+ "' and "
						+ "dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";
				ResultSet rs = ad.selectQuery(data);
				try {
					while (rs.next()) {

						help.setRequestername(rs.getString("EMP_FULLNAME"));
						help.setRequesterdepartment(rs.getString("DPTSTXT"));
						help.setRequesterdesignation(rs.getString("DSGSTXT"));
						help.setExtno(rs.getString("TEL_EXTENS"));
						help.setIpPhoneno(rs.getString("IP_PHONE"));
						help.setLocation(rs.getString("LOCATION_CODE"));

					}
				} catch (SQLException e) {
					e.printStackTrace();
				} 
				String requester="";
                String raisedby="";
				String data1 = " select * from IT_HELPDESK where Req_No="
						+ reqId + "";
				ResultSet rs1 = ad.selectQuery(data1);
				try {
					while (rs1.next()) {
						requester=rs1.getString("Emp_No");
						
						raisedby=rs1.getString("raisedBy");
						
						if(!raisedby.equalsIgnoreCase(empID))
						{
						
						
						String da1 = "select emp.PERNR,emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE "
								+ "from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"
								+ raisedby
								+ "' and "
								+ "dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";
						ResultSet r1 = ad.selectQuery(da1);
						try {
							while (r1.next()) {

								help.setRequestedforname(r1
										.getString("EMP_FULLNAME"));
								help.setRequestedfordepartment(r1
										.getString("DPTSTXT"));
								help.setRequestedfordesignation(r1
										.getString("DSGSTXT"));						
								help.setRequestedforlocation(r1
										.getString("LOCATION_CODE"));
								

							}
						} catch (SQLException e) {
							e.printStackTrace();
						}
						
						request.setAttribute("showothr", "showothr");
						}
						
						help.setAdloginname(rs1.getString("ADLoginName"));
						help.setSuggestedEmailId(rs1
								.getString("SuggestedEmailId"));
						String x = rs1.getString("comm_outside");
						if (x.equalsIgnoreCase("Yes")) {
							help.setOutsidecomyes("true");
						}
						if (x.equalsIgnoreCase("No")) {
							help.setOutsidecomno("true");
						}
						help.setIsHeHod(rs1.getString("Is_He_Hod"));
						help.setIsthisCommonId(rs1
								.getString("Is_This_common_ID"));
						help.setEnablewebAccess(rs1
								.getString("Enable_Web_access"));
						help.setReason(rs1.getString("Reason"));
						help.setHostname(rs1.getString("HostName"));
						help.setIPNumber(rs1.getString("IPAddress"));
						help.setTotalmailIdDept(rs1
								.getInt("TotalEmailIdInDepartment"));
						help.setTotalmailIdloc(rs1
								.getInt("TotalEmailIdInLocation"));
						help.setReqPriority(rs1.getString("Req_Priority"));
						help.setFirstname(rs1.getString("Frst_Name"));
						help.setLastname(rs1.getString("Last_Name"));
						help.setMiddname(rs1.getString("Middle_Name"));
						help.setDesignation(rs1.getString("designation"));
						help.setDepartment(rs1.getString("department"));
						String newlyJoinined = rs1.getString("newly_Joinied");
						if (newlyJoinined.equals("Yes")) {
							help.setNewlyJoinedYes("true");
						} else {
							help.setNewlyJoinedNo("true");
						}
						help.setJoiningDate(rs1.getString("joining_date"));
						help.setTotalIDs(rs1.getString("Total_Mailids"));

						String rmk = rs1.getString("Remarks");
						if (rmk != null) {
							help.setRemarks(rs1.getString("Remarks"));
							request.setAttribute("Remark", "Remark");
						}
					}
				} catch (SQLException e) {
					e.printStackTrace();
				}

				LotusIDCreation.add(help);
				request.setAttribute("LotusIDCreation", LotusIDCreation);

				// Approver Details
				checkStatus = 0;
				LinkedList listApprers = new LinkedList();
				int jk = 0;
				// HOD

				hodpresent = 0;
				hodpresentinIt = 0;
				HODPresentId = "";
				HODPresentname = "";
				itengineerid = "";
				itengineername = "";
				HOD = "";
				pendingApprovers = "";

				// chk if he has Hod
				String chkhod = "select count(*) from ESS_Approvers where employeeNumber='"
						+ empID + "'  ";
				ResultSet rs10 = ad.selectQuery(chkhod);
				try {
					while (rs10.next()) {
						hodpresent = rs10.getInt(1);
					}
				} catch (SQLException e1) {

					e1.printStackTrace();
				}

				// get hod details

				if (hodpresent > 0) {
					String gethod = "select ess.ApproverId,emp.EMP_FULLNAME from ESS_Approvers  as ess,emp_official_info as emp  "
							+ " where employeeNumber='"
							+ empID
							+ "'  and essType='Leave' and emp.PERNR=ess.ApproverId ";
					ResultSet rs2 = ad.selectQuery(gethod);

					try {
						if (rs2.next()) {

							HODPresentId = rs2.getString("ApproverId");
							HODPresentname = rs2.getString("EMP_FULLNAME");
						}
					} catch (SQLException e) {

						e.printStackTrace();
					}
				}

				// chk if he is present in It approver
				String chkhodinit = "select count(*) from IT_Approvers where Approver_ID='"
						+ HODPresentId
						+ "' and Req_Type = '"
						+ ITType
						+ "'  and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
						+ empID + "'))";
				ResultSet rs11 = ad.selectQuery(chkhodinit);
				try {
					while (rs11.next()) {
						hodpresentinIt = rs11.getInt(1);
					}
				} catch (SQLException e1) {

					e1.printStackTrace();
				}

				// Plant head
				String plantheadid = "";
				String plantheadname = "";
				String plantheaddep = "";
				String plantheaddesg = "";
				String a="";
				String userx="select loc.LOCID from Location as loc,emp_official_info as emp where loc.LOCATION_CODE=emp.LOCID and emp.PERNR='"+requester+"' ";
				ResultSet userrs=ad.selectQuery(userx);
				try {
					while(userrs.next())
					 {				
						a=userrs.getString("LOCID");
					 }
				} catch (SQLException e2) {
					// TODO Auto-generated catch block
					e2.printStackTrace();
				}
				if (!a.equalsIgnoreCase("16")) {
					String plant = "select pl.Plant,pl.PERNR,emp.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from PLANT_HEAD pl,emp_official_info emp,DEPARTMENT dep,DESIGNATION desg where Plant=(select LOCATION_CODE from Location where LOCID='"
							+ a
							+ "') and emp.PERNR=pl.PERNR and dep.DPTID=emp.DPTID and desg.DSGID=emp.DSGID";
					ResultSet pl = ad.selectQuery(plant);
					try {
						while (pl.next()) {
							plantheadid = pl.getString("pernr");
							plantheadname = pl.getString("EMP_FULLNAME");
							plantheaddep = pl.getString("DPTSTXT");
							plantheaddesg = pl.getString("DSGSTXT");
						}
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				if (plantheadid.equalsIgnoreCase("")) {

					if (hodpresent > 0 && hodpresentinIt == 0) {

						try {

							checkStatus = 1;
							ApprovalsForm apprvershod = new ApprovalsForm();
							apprvershod.setPriority("1");

							apprvershod.setEmployeeCode(HODPresentId);
							apprvershod.setEmployeeName(HODPresentname);

							String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
									+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
									+ reqId
									+ "' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
									+ empID
									+ "')) AND "
									+ "all_r.Last_Approver='"
									+ HODPresentId
									+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
									+ ITType
									+ "' and emp.PERNR=all_r.Last_Approver"
									+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

							ResultSet rsAppInfo = ad.selectQuery(recordStatus);
							if (rsAppInfo.next()) {
								apprvershod.setApproveStatus(rsAppInfo
										.getString("Req_Status"));
								String approveStatus = rsAppInfo
										.getString("Req_Status");
								if (approveStatus.equalsIgnoreCase("Approved")
										|| approveStatus
												.equalsIgnoreCase("Completed")) {
									apprvershod.setDate(rsAppInfo
											.getString("approved_date"));
								} else {
									apprvershod.setDate(rsAppInfo
											.getString("rejected_date"));
								}
								comments = "";
								comments = rsAppInfo.getString("Comments");
								if (comments == "null") {
									apprvershod.setComments("");
								} else {
									apprvershod.setComments(rsAppInfo
											.getString("Comments"));
								}
							}

							listApprers.add(apprvershod);
							jk = 1;
						}

						catch (SQLException e1) {

							e1.printStackTrace();
						}

					}
				}

				if (!plantheadid.equalsIgnoreCase("")) {

					try {

						checkStatus = 1;
						ApprovalsForm apprvershod = new ApprovalsForm();
						apprvershod.setPriority("1");

						apprvershod.setEmployeeCode(plantheadid);
						apprvershod.setEmployeeName(plantheadname);

						String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
								+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
								+ reqId
								+ "' and it.LOCATION_ID='"
								+ user.getPlantId()
								+ "' AND "
								+ "all_r.Last_Approver='"
								+ plantheadid
								+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
								+ ITType
								+ "' and emp.PERNR=all_r.Last_Approver"
								+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

						ResultSet rsAppInfo = ad.selectQuery(recordStatus);
						if (rsAppInfo.next()) {
							apprvershod.setApproveStatus(rsAppInfo
									.getString("Req_Status"));
							String approveStatus = rsAppInfo
									.getString("Req_Status");
							if (approveStatus.equalsIgnoreCase("Approved")
									|| approveStatus
											.equalsIgnoreCase("Created")) {
								apprvershod.setDate(rsAppInfo
										.getString("approved_date"));
							} else {
								apprvershod.setDate(rsAppInfo
										.getString("rejected_date"));
							}
							comments = "";
							comments = rsAppInfo.getString("Comments");
							if (comments == "null") {
								apprvershod.setComments("");
							} else {
								apprvershod.setComments(rsAppInfo
										.getString("Comments"));
							}
						}

						listApprers.add(apprvershod);
						jk = 1;
					}

					catch (SQLException e1) {

						e1.printStackTrace();
					}

				}

				String getApprDetails = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
						+ empID
						+ "'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"
						+ ITType
						+ "' group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
				ResultSet rsApprDetails = ad.selectQuery(getApprDetails);
				try {
					while (rsApprDetails.next()) {

						checkStatus = 1;
						ApprovalsForm apprvers = new ApprovalsForm();
						apprvers.setPriority(rsApprDetails
								.getString("Priority"));

						apprvers.setPriority(rsApprDetails
								.getString("Priority"));
						if (jk == 1) {

							apprvers.setPriority(Integer.toString(listApprers
									.size() + 1));
						}
						apprvers.setEmployeeCode(rsApprDetails
								.getString("Approver_Id"));
						String empCode = rsApprDetails.getString("Approver_Id");

						String recordStatus = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
								+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
								+ reqId
								+ "' "
								+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
								+ empID
								+ "')) AND all_r.Last_Approver='"
								+ empCode
								+ "' and it.Approver_Id=all_r.Last_Approver  and all_r.Req_Type='IT Request' and "
								+ "it.Req_Type='"
								+ ITType
								+ "' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
								+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";

						ResultSet rsAppInfo = ad.selectQuery(recordStatus);
						if (rsAppInfo.next()) {
							if (rsAppInfo.getInt("Priority") == 1) {
								chkdate = rsAppInfo.getString("approved_date");
								chkdate1 = rsAppInfo.getString("rejected_date");
							}
							apprvers.setApproveStatus(rsAppInfo
									.getString("Req_Status"));
							String approveStatus = rsAppInfo
									.getString("Req_Status");
							if (approveStatus.equalsIgnoreCase("Approved")
									|| approveStatus
											.equalsIgnoreCase("Completed")) {
								apprvers.setDate(rsAppInfo
										.getString("approved_date"));
							} else {
								apprvers.setDate(rsAppInfo
										.getString("rejected_date"));
							}
							comments = "";
							comments = rsAppInfo.getString("Comments");
							if (comments == "null") {
								apprvers.setComments("");
							} else {
								apprvers.setComments(rsAppInfo
										.getString("Comments"));
							}
						}
						apprvers.setEmployeeName(rsApprDetails
								.getString("EMP_FULLNAME"));

						listApprers.add(apprvers);

					}
					// IT ENGINEER DETAIlS

					String getApprDetails1 = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
							+ empID
							+ "'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"
							+ ITType
							+ "' and it.Priority=1    group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
					ResultSet rsApprDetails1 = ad.selectQuery(getApprDetails1);

					while (rsApprDetails1.next()) {
						checkStatus = 1;
						ApprovalsForm apprvers = new ApprovalsForm();
						apprvers.setPriority(Integer.toString(listApprers
								.size() + 1));

						apprvers.setEmployeeCode(rsApprDetails1
								.getString("Approver_Id"));
						String empCode1 = rsApprDetails1
								.getString("Approver_Id");

						String recordStatus1 = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
								+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
								+ reqId
								+ "' "
								+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
								+ empID
								+ "')) AND all_r.Last_Approver='"
								+ empCode1
								+ "' and it.Approver_Id=all_r.Last_Approver and all_r.Req_Type='IT Request' and "
								+ "it.Req_Type='"
								+ ITType
								+ "' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
								+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";

						ResultSet rsAppInfo1 = ad.selectQuery(recordStatus1);
						if (rsAppInfo1.next()) {

							String approveStatus = rsAppInfo1
									.getString("Req_Status");
							if (approveStatus.equalsIgnoreCase("Approved")) {
								recordStatus1 = recordStatus1
										+ " order by all_r.approved_date desc ";
								ResultSet rsAppInfo2 = ad
										.selectQuery(recordStatus1);
								if (rsAppInfo2.next()) {
									if (!chkdate.equalsIgnoreCase(rsAppInfo2
											.getString("approved_date"))) {
										apprvers.setApproveStatus("Closed");
										apprvers.setDate(rsAppInfo2
												.getString("approved_date"));

										comments = "";
										comments = rsAppInfo2
												.getString("Comments");
										if (comments == "null") {
											apprvers.setComments("");
										} else {
											apprvers.setComments(rsAppInfo2
													.getString("Comments"));
										}
									}
								}
							} else {

								recordStatus1 = recordStatus1
										+ " order by all_r.rejected_date desc ";
								ResultSet rsAppInfo3 = ad
										.selectQuery(recordStatus1);
								if (rsAppInfo3.next()) {
									if (!chkdate1.equalsIgnoreCase(rsAppInfo3
											.getString("rejected_date"))) {
										apprvers.setDate(rsAppInfo3
												.getString("rejected_date"));
									}

									comments = "";
									comments = rsAppInfo3.getString("Comments");
									if (comments == "null") {
										apprvers.setComments("");
									} else {
										apprvers.setComments(rsAppInfo3
												.getString("Comments"));
									}
								}
							}

						}
						apprvers.setEmployeeName(rsApprDetails1
								.getString("EMP_FULLNAME"));

						listApprers.add(apprvers);
					}

					request.setAttribute("approverDetails", listApprers);

				}

				catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				if (approverPriority == 1) {
					forwardType = "LotusIDCreationENG";
				} else {
					forwardType = "LotusIDCreationAppr";
				}
			}
			
			
			if(ITType.equalsIgnoreCase("Email ID Change Request"))
			{

				LinkedList LotusIDChange=new LinkedList();
				String empno=user.getEmployeeNo();
				
				String data="select emp.PERNR,emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE " +
						"from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"+empID+"' and " +
						"dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";	
				ResultSet rs= ad.selectQuery(data);
				try {
					while(rs.next())
					{
						
						help.setRequestername(rs.getString("EMP_FULLNAME"));
						help.setRequesterdepartment(rs.getString("DPTSTXT"));
						help.setRequesterdesignation(rs.getString("DSGSTXT"));
						help.setExtno(rs.getString("TEL_EXTENS"));
						help.setIpPhoneno(rs.getString("IP_PHONE"));
						help.setLocation(rs.getString("LOCATION_CODE"));
					
						help.setEmpno(rs.getString("PERNR"));
						
					}
				} catch (SQLException e) {
				  e.printStackTrace();
				}
				String requester="";
				String data1=" select * from IT_HELPDESK where Req_No="+reqId+"";	
				ResultSet rs1= ad.selectQuery(data1);
				try {
					while(rs1.next())
					{
						requester=rs1.getString("Emp_No");
						help.setAdloginname(rs1.getString("ADLoginName"));
						help.setFromemailId(rs1.getString("From_EmailID"));
						String x=rs1.getString("comm_outside");
						if(x.equalsIgnoreCase("Yes"))
						{
							help.setOutsidecomyes("true");
						}
						if(x.equalsIgnoreCase("No"))
						{
							help.setOutsidecomno("true");
						}
						
						String  newlyJoinined=rs1.getString("newly_Joinied");
						if(newlyJoinined.equals("Yes")){
							help.setNewlyJoinedYes("true");
						}else{
							help.setNewlyJoinedNo("true");
						}
						
						help.setTotalIDs(rs1.getString("Total_Mailids"));
						help.setJoiningDate(rs1.getString("joining_date"));
						help.setFirstname(rs1.getString("Frst_Name"));
						help.setLastname(rs1.getString("Last_Name"));
						help.setMiddname(rs1.getString("Middle_Name"));
						
						help.setDeleteoldmails(rs1.getString("delete_old_email"));
						help.setSuggestedEmailId(rs1.getString("SuggestedEmailId"));
						help.setIsHeHod(rs1.getString("Is_He_Hod"));
						help.setTransferoldmail(rs1.getString("Transfer_Old_Emails"));
						help.setIsthisCommonId(rs1.getString("Is_This_common_ID"));
						help.setEnablewebAccess(rs1.getString("Enable_Web_access"));
						help.setReason(rs1.getString("Reason"));
						help.setHostname(rs1.getString("HostName"));
						help.setIPNumber(rs1.getString("IPAddress"));
						help.setTotalmailIdDept(rs1.getInt("TotalEmailIdInDepartment"));
						help.setTotalmailIdloc(rs1.getInt("TotalEmailIdInLocation"));
						help.setReqPriority(rs1.getString("Req_Priority"));
						
						String rmk=rs1.getString("Remarks");
						if(rmk!=null)
						{
							help.setRemarks(rs1.getString("Remarks"));
							request.setAttribute("Remark", "Remark");
						}
						
					}
				} catch (SQLException e) {
					  e.printStackTrace();
					}
				LotusIDChange.add(reqId);
				request.setAttribute("LotusIDChange", LotusIDChange);
				
				//Approver Details
				  checkStatus=0;
				LinkedList listApprers=new LinkedList();
				int jk=0;
				//HOD

				 hodpresent=0;
				 hodpresentinIt=0;
				 HODPresentId="";
				 HODPresentname="";
				 itengineerid="";
				 itengineername="";
				 HOD="";
					pendingApprovers="";
				
				 //chk if he has Hod
				 String chkhod="select count(*) from ESS_Approvers where employeeNumber='"+empID+"'  ";
				 ResultSet rs10= ad.selectQuery(chkhod);
				 try {
					while(rs10.next())
					 {
						 hodpresent=rs10.getInt(1);
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				
				//get hod details
				
			
				if(hodpresent>0){
				String gethod="select ess.ApproverId,emp.EMP_FULLNAME from ESS_Approvers  as ess,emp_official_info as emp  " +
						" where employeeNumber='"+empID+"'  and essType='Leave' and emp.PERNR=ess.ApproverId ";
				 ResultSet rs2= ad.selectQuery(gethod);
				 
				 try {
					if(rs2.next())
					 {
					
						HODPresentId=rs2.getString("ApproverId");
						HODPresentname=rs2.getString("EMP_FULLNAME");
					 }
				} catch (SQLException e) {
					
					e.printStackTrace();
				}
				}
				
				//chk if he is present in It approver
				 String chkhodinit="select count(*) from IT_Approvers where Approver_ID='"+HODPresentId+"' and Req_Type = '"+ITType+"'  and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))";
				 ResultSet rs11= ad.selectQuery(chkhodinit);
				 try {
					while(rs11.next())
					 {
						hodpresentinIt=rs11.getInt(1);
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				 
				//Plant head
					String plantheadid="";
					String plantheadname="";
					String plantheaddep="";
					String plantheaddesg="";
					String a="";
					String userx="select loc.LOCID from Location as loc,emp_official_info as emp where loc.LOCATION_CODE=emp.LOCID and emp.PERNR='"+requester+"' ";
					ResultSet userrs=ad.selectQuery(userx);
					try {
						while(userrs.next())
						 {				
							a=userrs.getString("LOCID");
						 }
					} catch (SQLException e2) {
						// TODO Auto-generated catch block
						e2.printStackTrace();
					}
					if(!a.equalsIgnoreCase("16"))
					{
						String plant ="select pl.Plant,pl.PERNR,emp.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from PLANT_HEAD pl,emp_official_info emp,DEPARTMENT dep,DESIGNATION desg where Plant=(select LOCATION_CODE from Location where LOCID='"+a+"') and emp.PERNR=pl.PERNR and dep.DPTID=emp.DPTID and desg.DSGID=emp.DSGID";
						ResultSet pl=ad.selectQuery(plant);
						try {
							while(pl.next())
							 {
								plantheadid=pl.getString("pernr");
								plantheadname=pl.getString("EMP_FULLNAME");
								plantheaddep=pl.getString("DPTSTXT");
								plantheaddesg=pl.getString("DSGSTXT");
							 }
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					if(plantheadid.equalsIgnoreCase(""))
					{
				 
					if(hodpresent>0 && hodpresentinIt==0 )
					{
						
						
						try {
							
								checkStatus=1;
								ApprovalsForm apprvershod=new ApprovalsForm();
								apprvershod.setPriority("1");
								
								apprvershod.setEmployeeCode(HODPresentId);
								apprvershod.setEmployeeName(HODPresentname);
								
								String recordStatus="select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
							+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND "
							+ "all_r.Last_Approver='"+HODPresentId+"' and all_r.Req_Type='IT Request' and it.Req_Type='"+ITType+"' and emp.PERNR=all_r.Last_Approver"
							+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";
								
								ResultSet rsAppInfo=ad.selectQuery(recordStatus);
								if(rsAppInfo.next())
								{
									apprvershod.setApproveStatus(rsAppInfo.getString("Req_Status"));
									String approveStatus=rsAppInfo.getString("Req_Status");
									if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
									{
										apprvershod.setDate(rsAppInfo.getString("approved_date"));
									}else{
										apprvershod.setDate(rsAppInfo.getString("rejected_date"));
									}
									 comments="";
									comments=rsAppInfo.getString("Comments");
									if(comments=="null" )
									{
										apprvershod.setComments("");
									}else{
										apprvershod.setComments(rsAppInfo.getString("Comments"));
									}
								}
								
								
								listApprers.add(apprvershod);
							 jk=1;
							}
						
						catch (SQLException e1) {
							
							e1.printStackTrace();
						}
						
					}
					}
					
					 if(!plantheadid.equalsIgnoreCase(""))
						{
							
							
							try {
								
									checkStatus=1;
									ApprovalsForm apprvershod=new ApprovalsForm();
									apprvershod.setPriority("1");
									
									apprvershod.setEmployeeCode(plantheadid);
									apprvershod.setEmployeeName(plantheadname);
									
									String recordStatus="select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
								+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and it.LOCATION_ID='"+user.getPlantId()+"' AND "
								+ "all_r.Last_Approver='"+plantheadid+"' and all_r.Req_Type='IT Request' and it.Req_Type='"+ITType+"' and emp.PERNR=all_r.Last_Approver"
								+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";
									
									ResultSet rsAppInfo=ad.selectQuery(recordStatus);
									if(rsAppInfo.next())
									{
										apprvershod.setApproveStatus(rsAppInfo.getString("Req_Status"));
										String approveStatus=rsAppInfo.getString("Req_Status");
										if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Created"))
										{
											apprvershod.setDate(rsAppInfo.getString("approved_date"));
										}else{
											apprvershod.setDate(rsAppInfo.getString("rejected_date"));
										}
										 comments="";
										comments=rsAppInfo.getString("Comments");
										if(comments=="null" )
										{
											apprvershod.setComments("");
										}else{
											apprvershod.setComments(rsAppInfo.getString("Comments"));
										}
									}
									
									
									listApprers.add(apprvershod);
								 jk=1;
								}
							
							catch (SQLException e1) {
								
								e1.printStackTrace();
							}
							
						}
			
				
				String getApprDetails="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
				ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
				try {
					while(rsApprDetails.next())
					{
						
						checkStatus=1;
						ApprovalsForm apprvers=new ApprovalsForm();
						apprvers.setPriority(rsApprDetails.getString("Priority"));
						
					
					
						
						apprvers.setPriority(rsApprDetails.getString("Priority"));
						if(jk==1){
							
							apprvers.setPriority(Integer.toString(listApprers.size()+1));
						}
						apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
						String empCode=rsApprDetails.getString("Approver_Id");
						
						String recordStatus="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
								+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
								+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode+"' and it.Approver_Id=all_r.Last_Approver  and all_r.Req_Type='IT Request' and "
								+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
								+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
						
						ResultSet rsAppInfo=ad.selectQuery(recordStatus);
						if(rsAppInfo.next())
						{
							if(rsAppInfo.getInt("Priority")==1 )
							{
								 chkdate=rsAppInfo.getString("approved_date");
								 chkdate1=rsAppInfo.getString("rejected_date");
							}
							apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
							String approveStatus=rsAppInfo.getString("Req_Status");
							if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
							{
							apprvers.setDate(rsAppInfo.getString("approved_date"));
							}else{
								apprvers.setDate(rsAppInfo.getString("rejected_date"));
							}
							 comments="";
							comments=rsAppInfo.getString("Comments");
							if(comments=="null" )
							{
								apprvers.setComments("");
							}else{
								apprvers.setComments(rsAppInfo.getString("Comments"));
							}
						}
						apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
						
						listApprers.add(apprvers);
						
					}
						//IT ENGINEER DETAIlS
						
						
						String getApprDetails1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' and it.Priority=1    group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
						ResultSet rsApprDetails1=ad.selectQuery(getApprDetails1);
						
							while(rsApprDetails1.next())
							{
								checkStatus=1;
								ApprovalsForm apprvers=new ApprovalsForm();
								apprvers.setPriority(Integer.toString(listApprers.size()+1));
								
								apprvers.setEmployeeCode(rsApprDetails1.getString("Approver_Id"));
								String empCode1=rsApprDetails1.getString("Approver_Id");
								
								String recordStatus1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
										+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
										+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode1+"' and it.Approver_Id=all_r.Last_Approver and all_r.Req_Type='IT Request' and "
										+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
										+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
								
								ResultSet rsAppInfo1=ad.selectQuery(recordStatus1);
								if(rsAppInfo1.next())
								{
									
									String approveStatus=rsAppInfo1.getString("Req_Status");
									if(approveStatus.equalsIgnoreCase("Approved"))
									{
										recordStatus1=recordStatus1+" order by all_r.approved_date desc ";
										ResultSet rsAppInfo2=ad.selectQuery(recordStatus1);
										if(rsAppInfo2.next())
										{
											if(!chkdate.equalsIgnoreCase(rsAppInfo2.getString("approved_date")))
											{
												apprvers.setApproveStatus("Closed");
											apprvers.setDate(rsAppInfo2.getString("approved_date"));
											
										
										
										 comments="";
										comments=rsAppInfo2.getString("Comments");
										if(comments=="null" )
										{
											apprvers.setComments("");
										}else{
											apprvers.setComments(rsAppInfo2.getString("Comments"));
										}
										}
										}
									}else{
										
										recordStatus1=recordStatus1+" order by all_r.rejected_date desc ";
										ResultSet rsAppInfo3=ad.selectQuery(recordStatus1);
										if(rsAppInfo3.next())
										{
											if(!chkdate1.equalsIgnoreCase(rsAppInfo3.getString("rejected_date")))
											{
											apprvers.setDate(rsAppInfo3.getString("rejected_date"));
											}
											
										
										 comments="";
										comments=rsAppInfo3.getString("Comments");
										if(comments=="null" )
										{
											apprvers.setComments("");
										}else{
											apprvers.setComments(rsAppInfo3.getString("Comments"));
										}
										}
									}
									
								}
								apprvers.setEmployeeName(rsApprDetails1.getString("EMP_FULLNAME"));
						
							listApprers.add(apprvers);
							}
						
						request.setAttribute("approverDetails", listApprers);
					
				} 
				
					catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				if(approverPriority==1)
				{
					forwardType="LotusIDChangeENG";
				}
				else{
				forwardType="LotusIDChangeAppr";
				}
			}
			
			if(ITType.equalsIgnoreCase("Email ID Delete Request"))
			{


				LinkedList LotusIDDeletion=new LinkedList();
				String empno=user.getEmployeeNo();
				
				String data="select emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE " +
						"from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"+empID+"' and " +
						"dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";	
				ResultSet rs= ad.selectQuery(data);
				try {
					while(rs.next())
					{
						
						
						help.setRequestername(rs.getString("EMP_FULLNAME"));
						help.setRequesterdepartment(rs.getString("DPTSTXT"));
						help.setRequesterdesignation(rs.getString("DSGSTXT"));
						help.setExtno(rs.getString("TEL_EXTENS"));
						help.setIpPhoneno(rs.getString("IP_PHONE"));
						help.setLocation(rs.getString("LOCATION_CODE"));
					
						
						
					}
				} catch (SQLException e) {
				  e.printStackTrace();
				}
				String requester="";
				String data1=" select * from IT_HELPDESK where Req_No="+reqId+"";	
				ResultSet rs1= ad.selectQuery(data1);
				try {
					while(rs1.next())
					{
						requester=rs1.getString("Emp_No");
						help.setAdloginname(rs1.getString("ADLoginName"));
						help.setSuggestedEmailId(rs1.getString("SuggestedEmailId"));
						help.setIsHeHod(rs1.getString("Is_He_Hod"));
						help.setIsthisCommonId(rs1.getString("Is_This_common_ID"));
						help.setEmailidDelete(rs1.getString("EmailID_Deleted"));
						help.setDeletefrom(rs1.getString("Delete_From"));
						help.setReason(rs1.getString("Reason"));
						help.setReqPriority(rs1.getString("Req_Priority"));
						help.setHostname(rs1.getString("HostName"));
						help.setIPNumber(rs1.getString("IPAddress"));
						help.setTotalmailIdDept(rs1.getInt("TotalEmailIdInDepartment"));
						help.setTotalmailIdloc(rs1.getInt("TotalEmailIdInLocation"));
						help.setForward_MailID(rs1.getString("forward_MailID"));
						help.setMailIDPath(rs1.getString("path"));
						String x=rs1.getString("deletedDB");
						if(x.equalsIgnoreCase("Yes"))
						{
							help.setDeletedDBYes("true");
						}
						if(x.equalsIgnoreCase("No"))
						{
							help.setDeletedDBNo("true");
						}
						
						String rmk=rs1.getString("Remarks");
						if(rmk!=null)
						{
							help.setRemarks(rs1.getString("Remarks"));
							request.setAttribute("Remark", "Remark");
						}
						
					}
				} catch (SQLException e) {
					  e.printStackTrace();
					}
				
				//Approver Details
				  checkStatus=0;
				LinkedList listApprers=new LinkedList();
				int jk=0;
				//HOD

				 hodpresent=0;
				 hodpresentinIt=0;
				 HODPresentId="";
				 HODPresentname="";
				 itengineerid="";
				 itengineername="";
				 HOD="";
					pendingApprovers="";
				
				 //chk if he has Hod
				 String chkhod="select count(*) from ESS_Approvers where employeeNumber='"+empID+"'  ";
				 ResultSet rs10= ad.selectQuery(chkhod);
				 try {
					while(rs10.next())
					 {
						 hodpresent=rs10.getInt(1);
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				
				//get hod details
				
			
				if(hodpresent>0){
				String gethod="select ess.ApproverId,emp.EMP_FULLNAME from ESS_Approvers  as ess,emp_official_info as emp  " +
						" where employeeNumber='"+empID+"'  and essType='Leave' and emp.PERNR=ess.ApproverId ";
				 ResultSet rs2= ad.selectQuery(gethod);
				 
				 try {
					if(rs2.next())
					 {
					
						HODPresentId=rs2.getString("ApproverId");
						HODPresentname=rs2.getString("EMP_FULLNAME");
					 }
				} catch (SQLException e) {
					
					e.printStackTrace();
				}
				}
				
				//chk if he is present in It approver
				 String chkhodinit="select count(*) from IT_Approvers where Approver_ID='"+HODPresentId+"' and Req_Type = '"+ITType+"'  and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))";
				 ResultSet rs11= ad.selectQuery(chkhodinit);
				 try {
					while(rs11.next())
					 {
						hodpresentinIt=rs11.getInt(1);
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				 
				//Plant head
					String plantheadid="";
					String plantheadname="";
					String plantheaddep="";
					String plantheaddesg="";
					String a="";
					String userx="select loc.LOCID from Location as loc,emp_official_info as emp where loc.LOCATION_CODE=emp.LOCID and emp.PERNR='"+requester+"' ";
					ResultSet userrs=ad.selectQuery(userx);
					try {
						while(userrs.next())
						 {				
							a=userrs.getString("LOCID");
						 }
					} catch (SQLException e2) {
						// TODO Auto-generated catch block
						e2.printStackTrace();
					}
					if(!a.equalsIgnoreCase("16"))
					{
						String plant ="select pl.Plant,pl.PERNR,emp.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from PLANT_HEAD pl,emp_official_info emp,DEPARTMENT dep,DESIGNATION desg where Plant=(select LOCATION_CODE from Location where LOCID='"+a+"') and emp.PERNR=pl.PERNR and dep.DPTID=emp.DPTID and desg.DSGID=emp.DSGID";
						ResultSet pl=ad.selectQuery(plant);
						try {
							while(pl.next())
							 {
								plantheadid=pl.getString("pernr");
								plantheadname=pl.getString("EMP_FULLNAME");
								plantheaddep=pl.getString("DPTSTXT");
								plantheaddesg=pl.getString("DSGSTXT");
							 }
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					if(plantheadid.equalsIgnoreCase(""))
					{
				 
					if(hodpresent>0 && hodpresentinIt==0 )
					{
						
						
						try {
							
								checkStatus=1;
								ApprovalsForm apprvershod=new ApprovalsForm();
								apprvershod.setPriority("1");
								
								apprvershod.setEmployeeCode(HODPresentId);
								apprvershod.setEmployeeName(HODPresentname);
								
								String recordStatus="select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
							+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND "
							+ "all_r.Last_Approver='"+HODPresentId+"' and all_r.Req_Type='IT Request' and it.Req_Type='"+ITType+"' and emp.PERNR=all_r.Last_Approver"
							+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";
								
								ResultSet rsAppInfo=ad.selectQuery(recordStatus);
								if(rsAppInfo.next())
								{
									apprvershod.setApproveStatus(rsAppInfo.getString("Req_Status"));
									String approveStatus=rsAppInfo.getString("Req_Status");
									if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
									{
										apprvershod.setDate(rsAppInfo.getString("approved_date"));
									}else{
										apprvershod.setDate(rsAppInfo.getString("rejected_date"));
									}
									 comments="";
									comments=rsAppInfo.getString("Comments");
									if(comments=="null" )
									{
										apprvershod.setComments("");
									}else{
										apprvershod.setComments(rsAppInfo.getString("Comments"));
									}
								}
								
								
								listApprers.add(apprvershod);
							 jk=1;
							}
						
						catch (SQLException e1) {
							
							e1.printStackTrace();
						}
						
					}
					}
					
					 if(!plantheadid.equalsIgnoreCase(""))
						{
							
							
							try {
								
									checkStatus=1;
									ApprovalsForm apprvershod=new ApprovalsForm();
									apprvershod.setPriority("1");
									
									apprvershod.setEmployeeCode(plantheadid);
									apprvershod.setEmployeeName(plantheadname);
									
									String recordStatus="select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
								+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and it.LOCATION_ID='"+user.getPlantId()+"' AND "
								+ "all_r.Last_Approver='"+plantheadid+"' and all_r.Req_Type='IT Request' and it.Req_Type='"+ITType+"' and emp.PERNR=all_r.Last_Approver"
								+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";
									
									ResultSet rsAppInfo=ad.selectQuery(recordStatus);
									if(rsAppInfo.next())
									{
										apprvershod.setApproveStatus(rsAppInfo.getString("Req_Status"));
										String approveStatus=rsAppInfo.getString("Req_Status");
										if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Created"))
										{
											apprvershod.setDate(rsAppInfo.getString("approved_date"));
										}else{
											apprvershod.setDate(rsAppInfo.getString("rejected_date"));
										}
										 comments="";
										comments=rsAppInfo.getString("Comments");
										if(comments=="null" )
										{
											apprvershod.setComments("");
										}else{
											apprvershod.setComments(rsAppInfo.getString("Comments"));
										}
									}
									
									
									listApprers.add(apprvershod);
								 jk=1;
								}
							
							catch (SQLException e1) {
								
								e1.printStackTrace();
							}
							
						}
			
				
				String getApprDetails="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
				ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
				try {
					while(rsApprDetails.next())
					{
						
						checkStatus=1;
						ApprovalsForm apprvers=new ApprovalsForm();
						apprvers.setPriority(rsApprDetails.getString("Priority"));
						
					
					
						
						apprvers.setPriority(rsApprDetails.getString("Priority"));
						if(jk==1){
							
							apprvers.setPriority(Integer.toString(listApprers.size()+1));
						}
						apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
						String empCode=rsApprDetails.getString("Approver_Id");
						
						String recordStatus="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
								+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
								+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode+"' and it.Approver_Id=all_r.Last_Approver  and all_r.Req_Type='IT Request' and "
								+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
								+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
						
						ResultSet rsAppInfo=ad.selectQuery(recordStatus);
						if(rsAppInfo.next())
						{
							if(rsAppInfo.getInt("Priority")==1 )
							{
								 chkdate=rsAppInfo.getString("approved_date");
								 chkdate1=rsAppInfo.getString("rejected_date");
							}
							apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
							String approveStatus=rsAppInfo.getString("Req_Status");
							if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
							{
							apprvers.setDate(rsAppInfo.getString("approved_date"));
							}else{
								apprvers.setDate(rsAppInfo.getString("rejected_date"));
							}
							 comments="";
							comments=rsAppInfo.getString("Comments");
							if(comments=="null" )
							{
								apprvers.setComments("");
							}else{
								apprvers.setComments(rsAppInfo.getString("Comments"));
							}
						}
						apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
						
						listApprers.add(apprvers);
						
					}
						//IT ENGINEER DETAIlS
						
						
						String getApprDetails1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' and it.Priority=1    group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
						ResultSet rsApprDetails1=ad.selectQuery(getApprDetails1);
						
							while(rsApprDetails1.next())
							{
								checkStatus=1;
								ApprovalsForm apprvers=new ApprovalsForm();
								apprvers.setPriority(Integer.toString(listApprers.size()+1));
								
								apprvers.setEmployeeCode(rsApprDetails1.getString("Approver_Id"));
								String empCode1=rsApprDetails1.getString("Approver_Id");
								
								String recordStatus1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
										+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
										+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode1+"' and it.Approver_Id=all_r.Last_Approver and all_r.Req_Type='IT Request' and "
										+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
										+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
								
								ResultSet rsAppInfo1=ad.selectQuery(recordStatus1);
								if(rsAppInfo1.next())
								{
									
									String approveStatus=rsAppInfo1.getString("Req_Status");
									if(approveStatus.equalsIgnoreCase("Approved"))
									{
										recordStatus1=recordStatus1+" order by all_r.approved_date desc ";
										ResultSet rsAppInfo2=ad.selectQuery(recordStatus1);
										if(rsAppInfo2.next())
										{
											if(!chkdate.equalsIgnoreCase(rsAppInfo2.getString("approved_date")))
											{
												apprvers.setApproveStatus("Closed");
											apprvers.setDate(rsAppInfo2.getString("approved_date"));
											
										
										
										 comments="";
										comments=rsAppInfo2.getString("Comments");
										if(comments=="null" )
										{
											apprvers.setComments("");
										}else{
											apprvers.setComments(rsAppInfo2.getString("Comments"));
										}
										}
										}
									}else{
										
										recordStatus1=recordStatus1+" order by all_r.rejected_date desc ";
										ResultSet rsAppInfo3=ad.selectQuery(recordStatus1);
										if(rsAppInfo3.next())
										{
											if(!chkdate1.equalsIgnoreCase(rsAppInfo3.getString("rejected_date")))
											{
											apprvers.setDate(rsAppInfo3.getString("rejected_date"));
											}
											
										
										 comments="";
										comments=rsAppInfo3.getString("Comments");
										if(comments=="null" )
										{
											apprvers.setComments("");
										}else{
											apprvers.setComments(rsAppInfo3.getString("Comments"));
										}
										}
									}
									
								}
								apprvers.setEmployeeName(rsApprDetails1.getString("EMP_FULLNAME"));
						
							listApprers.add(apprvers);
							}
						
						request.setAttribute("approverDetails", listApprers);
					
				} 
				
					catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				
				
				request.setAttribute("LotusIDDeletion", LotusIDDeletion);
				if(approverPriority==1)
				{
					forwardType="LotusIDDeleteENG";
				}
				else{
				forwardType="LotusIDDeleteAppr";
				}
			
				
			
			}
			
			
			
			
			if(ITType.equalsIgnoreCase("Internet Access Request"))
			{
				LinkedList internet=new LinkedList();
				String empno=user.getEmployeeNo();
				
				String data="select emp.PERNR,emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE " +
						"from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"+empID+"' and " +
						"dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";	
				ResultSet rs= ad.selectQuery(data);
				try {
					while(rs.next())
					{
					
						help.setRequestername(rs.getString("EMP_FULLNAME"));
						help.setRequesterdepartment(rs.getString("DPTSTXT"));
						help.setRequesterdesignation(rs.getString("DSGSTXT"));
						help.setExtno(rs.getString("TEL_EXTENS"));
						help.setIpPhoneno(rs.getString("IP_PHONE"));
						help.setLocation(rs.getString("LOCATION_CODE"));
					
						help.setEmpno(rs.getString("PERNR"));
						
					}
				} catch (SQLException e) {
				  e.printStackTrace();
				}
				
				String requester="";
				String data1=" select * from IT_HELPDESK where Req_No="+reqId+"";	
				ResultSet rs1= ad.selectQuery(data1);
				try {
					while(rs1.next())
					{
						requester=rs1.getString("Emp_No");
						help.setIsHeHod(rs1.getString("Is_He_Hod"));
						help.setAssetvalue(rs1.getString("Asset_Details"));
						help.setAdloginname(rs1.getString("ADLoginName"));
						help.setReason(rs1.getString("Reason"));
						help.setHostname(rs1.getString("HostName"));
						help.setIPNumber(rs1.getString("IPAddress"));
						help.setInternetgrp(rs1.getString("InternetGroupCategory"));
						help.setReqPriority(rs1.getString("Req_Priority"));
						
						String rmk=rs1.getString("Remarks");
						if(rmk!=null)
						{
							help.setRemarks(rs1.getString("Remarks"));
							request.setAttribute("Remark", "Remark");
						}
						
					}
				} catch (SQLException e) {
					  e.printStackTrace();
					}
						
				internet.add(help);
				request.setAttribute("Internet", internet);
				
				//Approver Details
				  checkStatus=0;
				LinkedList listApprers=new LinkedList();
				int jk=0;
				//HOD

				 hodpresent=0;
				 hodpresentinIt=0;
				 HODPresentId="";
				 HODPresentname="";
				 itengineerid="";
				 itengineername="";
				 HOD="";
					pendingApprovers="";
				
				 //chk if he has Hod
				 String chkhod="select count(*) from ESS_Approvers where employeeNumber='"+empID+"'  ";
				 ResultSet rs10= ad.selectQuery(chkhod);
				 try {
					while(rs10.next())
					 {
						 hodpresent=rs10.getInt(1);
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				
				//get hod details
				
			
				if(hodpresent>0){
				String gethod="select ess.ApproverId,emp.EMP_FULLNAME from ESS_Approvers  as ess,emp_official_info as emp  " +
						" where employeeNumber='"+empID+"'  and essType='Leave' and emp.PERNR=ess.ApproverId ";
				 ResultSet rs2= ad.selectQuery(gethod);
				 
				 try {
					if(rs2.next())
					 {
					
						HODPresentId=rs2.getString("ApproverId");
						HODPresentname=rs2.getString("EMP_FULLNAME");
					 }
				} catch (SQLException e) {
					
					e.printStackTrace();
				}
				}
				
				//chk if he is present in It approver
				 String chkhodinit="select count(*) from IT_Approvers where Approver_ID='"+HODPresentId+"' and Req_Type = '"+ITType+"'  and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))";
				 ResultSet rs11= ad.selectQuery(chkhodinit);
				 try {
					while(rs11.next())
					 {
						hodpresentinIt=rs11.getInt(1);
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				 
				// Plant head
					String plantheadid = "";
					String plantheadname = "";
					String plantheaddep = "";
					String plantheaddesg = "";
					String a="";
					String userx="select loc.LOCID from Location as loc,emp_official_info as emp where loc.LOCATION_CODE=emp.LOCID and emp.PERNR='"+requester+"' ";
					ResultSet userrs=ad.selectQuery(userx);
					try {
						while(userrs.next())
						 {				
							a=userrs.getString("LOCID");
						 }
					} catch (SQLException e2) {
						// TODO Auto-generated catch block
						e2.printStackTrace();
					}
					if (!a.equalsIgnoreCase("16")) {
						String plant = "select pl.Plant,pl.PERNR,emp.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from PLANT_HEAD pl,emp_official_info emp,DEPARTMENT dep,DESIGNATION desg where Plant=(select LOCATION_CODE from Location where LOCID='"
								+ a
								+ "') and emp.PERNR=pl.PERNR and dep.DPTID=emp.DPTID and desg.DSGID=emp.DSGID";
						ResultSet pl = ad.selectQuery(plant);
						try {
							while (pl.next()) {
								plantheadid = pl.getString("pernr");
								plantheadname = pl.getString("EMP_FULLNAME");
								plantheaddep = pl.getString("DPTSTXT");
								plantheaddesg = pl.getString("DSGSTXT");
							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					if (plantheadid.equalsIgnoreCase("")) {

						if (hodpresent > 0 && hodpresentinIt == 0) {

							try {

								checkStatus = 1;
								ApprovalsForm apprvershod = new ApprovalsForm();
								apprvershod.setPriority("1");

								apprvershod.setEmployeeCode(HODPresentId);
								apprvershod.setEmployeeName(HODPresentname);

								String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
										+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
										+ reqId
										+ "' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
										+ empID
										+ "')) AND "
										+ "all_r.Last_Approver='"
										+ HODPresentId
										+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
										+ ITType
										+ "' and emp.PERNR=all_r.Last_Approver"
										+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

								ResultSet rsAppInfo = ad.selectQuery(recordStatus);
								if (rsAppInfo.next()) {
									apprvershod.setApproveStatus(rsAppInfo
											.getString("Req_Status"));
									String approveStatus = rsAppInfo
											.getString("Req_Status");
									if (approveStatus.equalsIgnoreCase("Approved")
											|| approveStatus
													.equalsIgnoreCase("Completed")) {
										apprvershod.setDate(rsAppInfo
												.getString("approved_date"));
									} else {
										apprvershod.setDate(rsAppInfo
												.getString("rejected_date"));
									}
									comments = "";
									comments = rsAppInfo.getString("Comments");
									if (comments == "null") {
										apprvershod.setComments("");
									} else {
										apprvershod.setComments(rsAppInfo
												.getString("Comments"));
									}
								}

								listApprers.add(apprvershod);
								jk = 1;
							}

							catch (SQLException e1) {

								e1.printStackTrace();
							}

						}
					}

					if (!plantheadid.equalsIgnoreCase("")) {

						try {

							checkStatus = 1;
							ApprovalsForm apprvershod = new ApprovalsForm();
							apprvershod.setPriority("1");

							apprvershod.setEmployeeCode(plantheadid);
							apprvershod.setEmployeeName(plantheadname);

							String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
									+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
									+ reqId
									+ "' and it.LOCATION_ID='"
									+ user.getPlantId()
									+ "' AND "
									+ "all_r.Last_Approver='"
									+ plantheadid
									+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
									+ ITType
									+ "' and emp.PERNR=all_r.Last_Approver"
									+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

							ResultSet rsAppInfo = ad.selectQuery(recordStatus);
							if (rsAppInfo.next()) {
								apprvershod.setApproveStatus(rsAppInfo
										.getString("Req_Status"));
								String approveStatus = rsAppInfo
										.getString("Req_Status");
								if (approveStatus.equalsIgnoreCase("Approved")
										|| approveStatus
												.equalsIgnoreCase("Created")) {
									apprvershod.setDate(rsAppInfo
											.getString("approved_date"));
								} else {
									apprvershod.setDate(rsAppInfo
											.getString("rejected_date"));
								}
								comments = "";
								comments = rsAppInfo.getString("Comments");
								if (comments == "null") {
									apprvershod.setComments("");
								} else {
									apprvershod.setComments(rsAppInfo
											.getString("Comments"));
								}
							}

							listApprers.add(apprvershod);
							jk = 1;
						}

						catch (SQLException e1) {

							e1.printStackTrace();
						}

					}

					String getApprDetails = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
							+ empID
							+ "'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"
							+ ITType
							+ "' group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
					ResultSet rsApprDetails = ad.selectQuery(getApprDetails);
					try {
						while (rsApprDetails.next()) {

							checkStatus = 1;
							ApprovalsForm apprvers = new ApprovalsForm();
							apprvers.setPriority(rsApprDetails
									.getString("Priority"));

							apprvers.setPriority(rsApprDetails
									.getString("Priority"));
							if (jk == 1) {

								apprvers.setPriority(Integer.toString(listApprers
										.size() + 1));
							}
							apprvers.setEmployeeCode(rsApprDetails
									.getString("Approver_Id"));
							String empCode = rsApprDetails.getString("Approver_Id");

							String recordStatus = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
									+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
									+ reqId
									+ "' "
									+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
									+ empID
									+ "')) AND all_r.Last_Approver='"
									+ empCode
									+ "' and it.Approver_Id=all_r.Last_Approver  and all_r.Req_Type='IT Request' and "
									+ "it.Req_Type='"
									+ ITType
									+ "' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
									+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";

							ResultSet rsAppInfo = ad.selectQuery(recordStatus);
							if (rsAppInfo.next()) {
								if (rsAppInfo.getInt("Priority") == 1) {
									chkdate = rsAppInfo.getString("approved_date");
									chkdate1 = rsAppInfo.getString("rejected_date");
								}
								apprvers.setApproveStatus(rsAppInfo
										.getString("Req_Status"));
								String approveStatus = rsAppInfo
										.getString("Req_Status");
								if (approveStatus.equalsIgnoreCase("Approved")
										|| approveStatus
												.equalsIgnoreCase("Completed")) {
									apprvers.setDate(rsAppInfo
											.getString("approved_date"));
								} else {
									apprvers.setDate(rsAppInfo
											.getString("rejected_date"));
								}
								comments = "";
								comments = rsAppInfo.getString("Comments");
								if (comments == "null") {
									apprvers.setComments("");
								} else {
									apprvers.setComments(rsAppInfo
											.getString("Comments"));
								}
							}
							apprvers.setEmployeeName(rsApprDetails
									.getString("EMP_FULLNAME"));

							listApprers.add(apprvers);

						}
						//IT ENGINEER DETAIlS
						
						
						String getApprDetails1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' and it.Priority=1    group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
						ResultSet rsApprDetails1=ad.selectQuery(getApprDetails1);
						
							while(rsApprDetails1.next())
							{
								checkStatus=1;
								ApprovalsForm apprvers=new ApprovalsForm();
								apprvers.setPriority(Integer.toString(listApprers.size()+1));
								
								apprvers.setEmployeeCode(rsApprDetails1.getString("Approver_Id"));
								String empCode1=rsApprDetails1.getString("Approver_Id");
								
								String recordStatus1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
										+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
										+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode1+"' and it.Approver_Id=all_r.Last_Approver and all_r.Req_Type='IT Request' and "
										+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
										+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
								
								ResultSet rsAppInfo1=ad.selectQuery(recordStatus1);
								if(rsAppInfo1.next())
								{
									
									String approveStatus=rsAppInfo1.getString("Req_Status");
									if(approveStatus.equalsIgnoreCase("Approved"))
									{
										recordStatus1=recordStatus1+" order by all_r.approved_date desc ";
										ResultSet rsAppInfo2=ad.selectQuery(recordStatus1);
										if(rsAppInfo2.next())
										{
											if(!chkdate.equalsIgnoreCase(rsAppInfo2.getString("approved_date")))
											{
												apprvers.setApproveStatus("Closed");
											apprvers.setDate(rsAppInfo2.getString("approved_date"));
											
										
										
										 comments="";
										comments=rsAppInfo2.getString("Comments");
										if(comments=="null" )
										{
											apprvers.setComments("");
										}else{
											apprvers.setComments(rsAppInfo2.getString("Comments"));
										}
										}
										}
									}else{
										
										recordStatus1=recordStatus1+" order by all_r.rejected_date desc ";
										ResultSet rsAppInfo3=ad.selectQuery(recordStatus1);
										if(rsAppInfo3.next())
										{
											if(!chkdate1.equalsIgnoreCase(rsAppInfo3.getString("rejected_date")))
											{
											apprvers.setDate(rsAppInfo3.getString("rejected_date"));
											}
											
										
										 comments="";
										comments=rsAppInfo3.getString("Comments");
										if(comments=="null" )
										{
											apprvers.setComments("");
										}else{
											apprvers.setComments(rsAppInfo3.getString("Comments"));
										}
										}
									}
									
								}
								apprvers.setEmployeeName(rsApprDetails1.getString("EMP_FULLNAME"));
						
							listApprers.add(apprvers);
							}
						
						request.setAttribute("approverDetails", listApprers);
					
				} 
				
					catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				if(approverPriority==1)
				{
					forwardType="InternetENG";
				}
				else{
				forwardType="InternetAppr";
				}
			}
			
			if(ITType.equalsIgnoreCase("External Drives Access Request"))
			{
				LinkedList externaldrives=new LinkedList();
				String empno=user.getEmployeeNo();
				
				String data="select emp.PERNR,emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE " +
						"from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"+empID+"' and " +
						"dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";	
				ResultSet rs= ad.selectQuery(data);
				try {
					while(rs.next())
					{
						
						help.setRequestername(rs.getString("EMP_FULLNAME"));
						help.setRequesterdepartment(rs.getString("DPTSTXT"));
						help.setRequesterdesignation(rs.getString("DSGSTXT"));
						help.setExtno(rs.getString("TEL_EXTENS"));
						help.setIpPhoneno(rs.getString("IP_PHONE"));
						help.setLocation(rs.getString("LOCATION_CODE"));
						
						help.setEmpno(rs.getString("PERNR"));
						
						
					}
				} catch (SQLException e) {
				  e.printStackTrace();
				}
				
				String requester="";
				String data1=" select * from IT_HELPDESK where Req_No="+reqId+"";	
				ResultSet rs1= ad.selectQuery(data1);
				try {
					while(rs1.next())
					{
						requester=rs1.getString("Emp_No");
						help.setAdloginname(rs1.getString("ADLoginName"));
						help.setAssetvalue(rs1.getString("Asset_Details"));
						help.setAccesstype(rs1.getString("Access_type"));
						help.setReason(rs1.getString("Reason"));
						help.setHostname(rs1.getString("HostName"));
						help.setIPNumber(rs1.getString("IPAddress"));
						help.setReqPriority(rs1.getString("Req_Priority"));
						String device=rs1.getString("Device_type");
						if(device.equalsIgnoreCase("3"))
						{
							help.setCdrom("CD/DVD_ROM");
							help.setUsb("USB");
						}
						if(device.equalsIgnoreCase("1"))
						{
							help.setCdrom("CD/DVD_ROM");
							
						}
						if(device.equalsIgnoreCase("2"))
						{
							
							help.setUsb("USB");
						}
						
						String rmk=rs1.getString("Remarks");
						if(rmk!=null)
						{
							help.setRemarks(rs1.getString("Remarks"));
							request.setAttribute("Remark", "Remark");
						}
						
					}
				} catch (SQLException e) {
					  e.printStackTrace();
					}
				externaldrives.add(help);
				request.setAttribute("externaldrives", externaldrives);
				
				//Approver Details
				  checkStatus=0;
				LinkedList listApprers=new LinkedList();
				int jk=0;
				//HOD

				 hodpresent=0;
				 hodpresentinIt=0;
				 HODPresentId="";
				 HODPresentname="";
				 itengineerid="";
				 itengineername="";
				 HOD="";
					pendingApprovers="";
				
				 //chk if he has Hod
				 String chkhod="select count(*) from ESS_Approvers where employeeNumber='"+empID+"'  ";
				 ResultSet rs10= ad.selectQuery(chkhod);
				 try {
					while(rs10.next())
					 {
						 hodpresent=rs10.getInt(1);
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				
				//get hod details
				
			
				if(hodpresent>0){
				String gethod="select ess.ApproverId,emp.EMP_FULLNAME from ESS_Approvers  as ess,emp_official_info as emp  " +
						" where employeeNumber='"+empID+"'  and essType='Leave' and emp.PERNR=ess.ApproverId ";
				 ResultSet rs2= ad.selectQuery(gethod);
				 
				 try {
					if(rs2.next())
					 {
					
						HODPresentId=rs2.getString("ApproverId");
						HODPresentname=rs2.getString("EMP_FULLNAME");
					 }
				} catch (SQLException e) {
					
					e.printStackTrace();
				}
				}
				
				//chk if he is present in It approver
				 String chkhodinit="select count(*) from IT_Approvers where Approver_ID='"+HODPresentId+"' and Req_Type = '"+ITType+"'  and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))";
				 ResultSet rs11= ad.selectQuery(chkhodinit);
				 try {
					while(rs11.next())
					 {
						hodpresentinIt=rs11.getInt(1);
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				 
				// Plant head
					String plantheadid = "";
					String plantheadname = "";
					String plantheaddep = "";
					String plantheaddesg = "";
					String a="";
					String userx="select loc.LOCID from Location as loc,emp_official_info as emp where loc.LOCATION_CODE=emp.LOCID and emp.PERNR='"+requester+"' ";
					ResultSet userrs=ad.selectQuery(userx);
					try {
						while(userrs.next())
						 {				
							a=userrs.getString("LOCID");
						 }
					} catch (SQLException e2) {
						// TODO Auto-generated catch block
						e2.printStackTrace();
					}
					if (!a.equalsIgnoreCase("16")) {
						String plant = "select pl.Plant,pl.PERNR,emp.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from PLANT_HEAD pl,emp_official_info emp,DEPARTMENT dep,DESIGNATION desg where Plant=(select LOCATION_CODE from Location where LOCID='"
								+ a
								+ "') and emp.PERNR=pl.PERNR and dep.DPTID=emp.DPTID and desg.DSGID=emp.DSGID";
						ResultSet pl = ad.selectQuery(plant);
						try {
							while (pl.next()) {
								plantheadid = pl.getString("pernr");
								plantheadname = pl.getString("EMP_FULLNAME");
								plantheaddep = pl.getString("DPTSTXT");
								plantheaddesg = pl.getString("DSGSTXT");
							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					if (plantheadid.equalsIgnoreCase("")) {

						if (hodpresent > 0 && hodpresentinIt == 0) {

							try {

								checkStatus = 1;
								ApprovalsForm apprvershod = new ApprovalsForm();
								apprvershod.setPriority("1");

								apprvershod.setEmployeeCode(HODPresentId);
								apprvershod.setEmployeeName(HODPresentname);

								String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
										+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
										+ reqId
										+ "' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
										+ empID
										+ "')) AND "
										+ "all_r.Last_Approver='"
										+ HODPresentId
										+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
										+ ITType
										+ "' and emp.PERNR=all_r.Last_Approver"
										+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

								ResultSet rsAppInfo = ad.selectQuery(recordStatus);
								if (rsAppInfo.next()) {
									apprvershod.setApproveStatus(rsAppInfo
											.getString("Req_Status"));
									String approveStatus = rsAppInfo
											.getString("Req_Status");
									if (approveStatus.equalsIgnoreCase("Approved")
											|| approveStatus
													.equalsIgnoreCase("Completed")) {
										apprvershod.setDate(rsAppInfo
												.getString("approved_date"));
									} else {
										apprvershod.setDate(rsAppInfo
												.getString("rejected_date"));
									}
									comments = "";
									comments = rsAppInfo.getString("Comments");
									if (comments == "null") {
										apprvershod.setComments("");
									} else {
										apprvershod.setComments(rsAppInfo
												.getString("Comments"));
									}
								}

								listApprers.add(apprvershod);
								jk = 1;
							}

							catch (SQLException e1) {

								e1.printStackTrace();
							}

						}
					}

					if (!plantheadid.equalsIgnoreCase("")) {

						try {

							checkStatus = 1;
							ApprovalsForm apprvershod = new ApprovalsForm();
							apprvershod.setPriority("1");

							apprvershod.setEmployeeCode(plantheadid);
							apprvershod.setEmployeeName(plantheadname);

							String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
									+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
									+ reqId
									+ "' and it.LOCATION_ID='"
									+ user.getPlantId()
									+ "' AND "
									+ "all_r.Last_Approver='"
									+ plantheadid
									+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
									+ ITType
									+ "' and emp.PERNR=all_r.Last_Approver"
									+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

							ResultSet rsAppInfo = ad.selectQuery(recordStatus);
							if (rsAppInfo.next()) {
								apprvershod.setApproveStatus(rsAppInfo
										.getString("Req_Status"));
								String approveStatus = rsAppInfo
										.getString("Req_Status");
								if (approveStatus.equalsIgnoreCase("Approved")
										|| approveStatus
												.equalsIgnoreCase("Created")) {
									apprvershod.setDate(rsAppInfo
											.getString("approved_date"));
								} else {
									apprvershod.setDate(rsAppInfo
											.getString("rejected_date"));
								}
								comments = "";
								comments = rsAppInfo.getString("Comments");
								if (comments == "null") {
									apprvershod.setComments("");
								} else {
									apprvershod.setComments(rsAppInfo
											.getString("Comments"));
								}
							}

							listApprers.add(apprvershod);
							jk = 1;
						}

						catch (SQLException e1) {

							e1.printStackTrace();
						}

					}

					String getApprDetails = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
							+ empID
							+ "'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"
							+ ITType
							+ "' group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
					ResultSet rsApprDetails = ad.selectQuery(getApprDetails);
					try {
						while (rsApprDetails.next()) {

							checkStatus = 1;
							ApprovalsForm apprvers = new ApprovalsForm();
							apprvers.setPriority(rsApprDetails
									.getString("Priority"));

							apprvers.setPriority(rsApprDetails
									.getString("Priority"));
							if (jk == 1) {

								apprvers.setPriority(Integer.toString(listApprers
										.size() + 1));
							}
							apprvers.setEmployeeCode(rsApprDetails
									.getString("Approver_Id"));
							String empCode = rsApprDetails.getString("Approver_Id");

							String recordStatus = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
									+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
									+ reqId
									+ "' "
									+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
									+ empID
									+ "')) AND all_r.Last_Approver='"
									+ empCode
									+ "' and it.Approver_Id=all_r.Last_Approver  and all_r.Req_Type='IT Request' and "
									+ "it.Req_Type='"
									+ ITType
									+ "' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
									+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";

							ResultSet rsAppInfo = ad.selectQuery(recordStatus);
							if (rsAppInfo.next()) {
								if (rsAppInfo.getInt("Priority") == 1) {
									chkdate = rsAppInfo.getString("approved_date");
									chkdate1 = rsAppInfo.getString("rejected_date");
								}
								apprvers.setApproveStatus(rsAppInfo
										.getString("Req_Status"));
								String approveStatus = rsAppInfo
										.getString("Req_Status");
								if (approveStatus.equalsIgnoreCase("Approved")
										|| approveStatus
												.equalsIgnoreCase("Completed")) {
									apprvers.setDate(rsAppInfo
											.getString("approved_date"));
								} else {
									apprvers.setDate(rsAppInfo
											.getString("rejected_date"));
								}
								comments = "";
								comments = rsAppInfo.getString("Comments");
								if (comments == "null") {
									apprvers.setComments("");
								} else {
									apprvers.setComments(rsAppInfo
											.getString("Comments"));
								}
							}
							apprvers.setEmployeeName(rsApprDetails
									.getString("EMP_FULLNAME"));

							listApprers.add(apprvers);

						}
						//IT ENGINEER DETAIlS
						
						
						String getApprDetails1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' and it.Priority=1    group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
						ResultSet rsApprDetails1=ad.selectQuery(getApprDetails1);
						
							while(rsApprDetails1.next())
							{
								checkStatus=1;
								ApprovalsForm apprvers=new ApprovalsForm();
								apprvers.setPriority(Integer.toString(listApprers.size()+1));
								
								apprvers.setEmployeeCode(rsApprDetails1.getString("Approver_Id"));
								String empCode1=rsApprDetails1.getString("Approver_Id");
								
								String recordStatus1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
										+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
										+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode1+"' and it.Approver_Id=all_r.Last_Approver and all_r.Req_Type='IT Request' and "
										+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
										+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
								
								ResultSet rsAppInfo1=ad.selectQuery(recordStatus1);
								if(rsAppInfo1.next())
								{
									
									String approveStatus=rsAppInfo1.getString("Req_Status");
									if(approveStatus.equalsIgnoreCase("Approved"))
									{
										recordStatus1=recordStatus1+" order by all_r.approved_date desc ";
										ResultSet rsAppInfo2=ad.selectQuery(recordStatus1);
										if(rsAppInfo2.next())
										{
											if(!chkdate.equalsIgnoreCase(rsAppInfo2.getString("approved_date")))
											{
												apprvers.setApproveStatus("Closed");
											apprvers.setDate(rsAppInfo2.getString("approved_date"));
											
										
										
										 comments="";
										comments=rsAppInfo2.getString("Comments");
										if(comments=="null" )
										{
											apprvers.setComments("");
										}else{
											apprvers.setComments(rsAppInfo2.getString("Comments"));
										}
										}
										}
									}else{
										
										recordStatus1=recordStatus1+" order by all_r.rejected_date desc ";
										ResultSet rsAppInfo3=ad.selectQuery(recordStatus1);
										if(rsAppInfo3.next())
										{
											if(!chkdate1.equalsIgnoreCase(rsAppInfo3.getString("rejected_date")))
											{
											apprvers.setDate(rsAppInfo3.getString("rejected_date"));
											}
											
										
										 comments="";
										comments=rsAppInfo3.getString("Comments");
										if(comments=="null" )
										{
											apprvers.setComments("");
										}else{
											apprvers.setComments(rsAppInfo3.getString("Comments"));
										}
										}
									}
									
								}
								apprvers.setEmployeeName(rsApprDetails1.getString("EMP_FULLNAME"));
						
							listApprers.add(apprvers);
							}
						
						request.setAttribute("approverDetails", listApprers);
					
				} 
				
					catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				if(approverPriority==1)
				{
					forwardType="externaldrivesENG";
				}
				else{
				forwardType="externaldrivesAppr";
				}
			}
			
			if(ITType.equalsIgnoreCase("FTP Access Request"))
			{
				LinkedList ftp=new LinkedList();
				String empno=user.getEmployeeNo();
				
				String data="select emp.PERNR,emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE " +
						"from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"+empID+"' and " +
						"dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";	
				ResultSet rs= ad.selectQuery(data);
				try {
					while(rs.next())
					{
						
						help.setRequestername(rs.getString("EMP_FULLNAME"));
						help.setRequesterdepartment(rs.getString("DPTSTXT"));
						help.setRequesterdesignation(rs.getString("DSGSTXT"));
						help.setExtno(rs.getString("TEL_EXTENS"));
						help.setIpPhoneno(rs.getString("IP_PHONE"));
						help.setLocation(rs.getString("LOCATION_CODE"));
						
						help.setEmpno(rs.getString("PERNR"));
						
					}
				} catch (SQLException e) {
				  e.printStackTrace();
				}
				String requester="";
				String data1=" select * from IT_HELPDESK where Req_No="+reqId+"";	
				ResultSet rs1= ad.selectQuery(data1);
				try {
					while(rs1.next())
					{
						requester=rs1.getString("Emp_No");
						help.setAdloginname(rs1.getString("ADLoginName"));
						help.setAssetvalue(rs1.getString("Asset_Details"));
						help.setRequiredfoldername(rs1.getString("Req_Folder_access"));
						help.setServer(rs1.getString("Server_Address"));
						help.setAccesstype(rs1.getString("Access_type"));
						help.setFrmdurationofaccess(rs1.getString("FrmRequiredDurationofAccess"));
						help.setTodurationofaccess(rs1.getString("ToRequiredDurationofAccess"));
						help.setReason(rs1.getString("Reason"));
						help.setHostname(rs1.getString("HostName"));
						help.setIPNumber(rs1.getString("IPAddress"));
						help.setUsername(rs1.getString("UserName"));
						help.setPassword(rs1.getString("Password"));
						help.setReqPriority(rs1.getString("Req_Priority"));
						help.setDurationofaccess(rs1.getString("RequiredDurationofAccess"));
						
						String rmk=rs1.getString("Remarks");
						if(rmk!=null)
						{
							help.setRemarks(rs1.getString("Remarks"));
							request.setAttribute("Remark", "Remark");
						}
						
					}
				} catch (SQLException e) {
					  e.printStackTrace();
					}
				ftp.add(help);
				request.setAttribute("ftp", ftp);
				
				//Approver Details
				  checkStatus=0;
				LinkedList listApprers=new LinkedList();
				int jk=0;
				//HOD

				 hodpresent=0;
				 hodpresentinIt=0;
				 HODPresentId="";
				 HODPresentname="";
				 itengineerid="";
				 itengineername="";
				 HOD="";
					pendingApprovers="";
				
				 //chk if he has Hod
				 String chkhod="select count(*) from ESS_Approvers where employeeNumber='"+empID+"'  ";
				 ResultSet rs10= ad.selectQuery(chkhod);
				 try {
					while(rs10.next())
					 {
						 hodpresent=rs10.getInt(1);
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				
				//get hod details
				
			
				if(hodpresent>0){
				String gethod="select ess.ApproverId,emp.EMP_FULLNAME from ESS_Approvers  as ess,emp_official_info as emp  " +
						" where employeeNumber='"+empID+"'  and essType='Leave' and emp.PERNR=ess.ApproverId ";
				 ResultSet rs2= ad.selectQuery(gethod);
				 
				 try {
					if(rs2.next())
					 {
					
						HODPresentId=rs2.getString("ApproverId");
						HODPresentname=rs2.getString("EMP_FULLNAME");
					 }
				} catch (SQLException e) {
					
					e.printStackTrace();
				}
				}
				
				//chk if he is present in It approver
				 String chkhodinit="select count(*) from IT_Approvers where Approver_ID='"+HODPresentId+"' and Req_Type = '"+ITType+"'  and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))";
				 ResultSet rs11= ad.selectQuery(chkhodinit);
				 try {
					while(rs11.next())
					 {
						hodpresentinIt=rs11.getInt(1);
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				 
				// Plant head
					String plantheadid = "";
					String plantheadname = "";
					String plantheaddep = "";
					String plantheaddesg = "";
					String a="";
					String userx="select loc.LOCID from Location as loc,emp_official_info as emp where loc.LOCATION_CODE=emp.LOCID and emp.PERNR='"+requester+"' ";
					ResultSet userrs=ad.selectQuery(userx);
					try {
						while(userrs.next())
						 {				
							a=userrs.getString("LOCID");
						 }
					} catch (SQLException e2) {
						// TODO Auto-generated catch block
						e2.printStackTrace();
					}
					if (!a.equalsIgnoreCase("16")) {
						String plant = "select pl.Plant,pl.PERNR,emp.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from PLANT_HEAD pl,emp_official_info emp,DEPARTMENT dep,DESIGNATION desg where Plant=(select LOCATION_CODE from Location where LOCID='"
								+ a
								+ "') and emp.PERNR=pl.PERNR and dep.DPTID=emp.DPTID and desg.DSGID=emp.DSGID";
						ResultSet pl = ad.selectQuery(plant);
						try {
							while (pl.next()) {
								plantheadid = pl.getString("pernr");
								plantheadname = pl.getString("EMP_FULLNAME");
								plantheaddep = pl.getString("DPTSTXT");
								plantheaddesg = pl.getString("DSGSTXT");
							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					if (plantheadid.equalsIgnoreCase("")) {

						if (hodpresent > 0 && hodpresentinIt == 0) {

							try {

								checkStatus = 1;
								ApprovalsForm apprvershod = new ApprovalsForm();
								apprvershod.setPriority("1");

								apprvershod.setEmployeeCode(HODPresentId);
								apprvershod.setEmployeeName(HODPresentname);

								String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
										+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
										+ reqId
										+ "' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
										+ empID
										+ "')) AND "
										+ "all_r.Last_Approver='"
										+ HODPresentId
										+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
										+ ITType
										+ "' and emp.PERNR=all_r.Last_Approver"
										+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

								ResultSet rsAppInfo = ad.selectQuery(recordStatus);
								if (rsAppInfo.next()) {
									apprvershod.setApproveStatus(rsAppInfo
											.getString("Req_Status"));
									String approveStatus = rsAppInfo
											.getString("Req_Status");
									if (approveStatus.equalsIgnoreCase("Approved")
											|| approveStatus
													.equalsIgnoreCase("Completed")) {
										apprvershod.setDate(rsAppInfo
												.getString("approved_date"));
									} else {
										apprvershod.setDate(rsAppInfo
												.getString("rejected_date"));
									}
									comments = "";
									comments = rsAppInfo.getString("Comments");
									if (comments == "null") {
										apprvershod.setComments("");
									} else {
										apprvershod.setComments(rsAppInfo
												.getString("Comments"));
									}
								}

								listApprers.add(apprvershod);
								jk = 1;
							}

							catch (SQLException e1) {

								e1.printStackTrace();
							}

						}
					}

					if (!plantheadid.equalsIgnoreCase("")) {

						try {

							checkStatus = 1;
							ApprovalsForm apprvershod = new ApprovalsForm();
							apprvershod.setPriority("1");

							apprvershod.setEmployeeCode(plantheadid);
							apprvershod.setEmployeeName(plantheadname);

							String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
									+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
									+ reqId
									+ "' and it.LOCATION_ID='"
									+ user.getPlantId()
									+ "' AND "
									+ "all_r.Last_Approver='"
									+ plantheadid
									+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
									+ ITType
									+ "' and emp.PERNR=all_r.Last_Approver"
									+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

							ResultSet rsAppInfo = ad.selectQuery(recordStatus);
							if (rsAppInfo.next()) {
								apprvershod.setApproveStatus(rsAppInfo
										.getString("Req_Status"));
								String approveStatus = rsAppInfo
										.getString("Req_Status");
								if (approveStatus.equalsIgnoreCase("Approved")
										|| approveStatus
												.equalsIgnoreCase("Created")) {
									apprvershod.setDate(rsAppInfo
											.getString("approved_date"));
								} else {
									apprvershod.setDate(rsAppInfo
											.getString("rejected_date"));
								}
								comments = "";
								comments = rsAppInfo.getString("Comments");
								if (comments == "null") {
									apprvershod.setComments("");
								} else {
									apprvershod.setComments(rsAppInfo
											.getString("Comments"));
								}
							}

							listApprers.add(apprvershod);
							jk = 1;
						}

						catch (SQLException e1) {

							e1.printStackTrace();
						}

					}

					String getApprDetails = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
							+ empID
							+ "'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"
							+ ITType
							+ "' group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
					ResultSet rsApprDetails = ad.selectQuery(getApprDetails);
					try {
						while (rsApprDetails.next()) {

							checkStatus = 1;
							ApprovalsForm apprvers = new ApprovalsForm();
							apprvers.setPriority(rsApprDetails
									.getString("Priority"));

							apprvers.setPriority(rsApprDetails
									.getString("Priority"));
							if (jk == 1) {

								apprvers.setPriority(Integer.toString(listApprers
										.size() + 1));
							}
							apprvers.setEmployeeCode(rsApprDetails
									.getString("Approver_Id"));
							String empCode = rsApprDetails.getString("Approver_Id");

							String recordStatus = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
									+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
									+ reqId
									+ "' "
									+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
									+ empID
									+ "')) AND all_r.Last_Approver='"
									+ empCode
									+ "' and it.Approver_Id=all_r.Last_Approver  and all_r.Req_Type='IT Request' and "
									+ "it.Req_Type='"
									+ ITType
									+ "' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
									+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";

							ResultSet rsAppInfo = ad.selectQuery(recordStatus);
							if (rsAppInfo.next()) {
								if (rsAppInfo.getInt("Priority") == 1) {
									chkdate = rsAppInfo.getString("approved_date");
									chkdate1 = rsAppInfo.getString("rejected_date");
								}
								apprvers.setApproveStatus(rsAppInfo
										.getString("Req_Status"));
								String approveStatus = rsAppInfo
										.getString("Req_Status");
								if (approveStatus.equalsIgnoreCase("Approved")
										|| approveStatus
												.equalsIgnoreCase("Completed")) {
									apprvers.setDate(rsAppInfo
											.getString("approved_date"));
								} else {
									apprvers.setDate(rsAppInfo
											.getString("rejected_date"));
								}
								comments = "";
								comments = rsAppInfo.getString("Comments");
								if (comments == "null") {
									apprvers.setComments("");
								} else {
									apprvers.setComments(rsAppInfo
											.getString("Comments"));
								}
							}
							apprvers.setEmployeeName(rsApprDetails
									.getString("EMP_FULLNAME"));

							listApprers.add(apprvers);

						}
						//IT ENGINEER DETAIlS
						
						
						String getApprDetails1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' and it.Priority=1    group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
						ResultSet rsApprDetails1=ad.selectQuery(getApprDetails1);
						
							while(rsApprDetails1.next())
							{
								checkStatus=1;
								ApprovalsForm apprvers=new ApprovalsForm();
								apprvers.setPriority(Integer.toString(listApprers.size()+1));
								
								apprvers.setEmployeeCode(rsApprDetails1.getString("Approver_Id"));
								String empCode1=rsApprDetails1.getString("Approver_Id");
								
								String recordStatus1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
										+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
										+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode1+"' and it.Approver_Id=all_r.Last_Approver and all_r.Req_Type='IT Request' and "
										+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
										+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
								
								ResultSet rsAppInfo1=ad.selectQuery(recordStatus1);
								if(rsAppInfo1.next())
								{
									
									String approveStatus=rsAppInfo1.getString("Req_Status");
									if(approveStatus.equalsIgnoreCase("Approved"))
									{
										recordStatus1=recordStatus1+" order by all_r.approved_date desc ";
										ResultSet rsAppInfo2=ad.selectQuery(recordStatus1);
										if(rsAppInfo2.next())
										{
											if(!chkdate.equalsIgnoreCase(rsAppInfo2.getString("approved_date")))
											{
												apprvers.setApproveStatus("Closed");
											apprvers.setDate(rsAppInfo2.getString("approved_date"));
											
										
										
										 comments="";
										comments=rsAppInfo2.getString("Comments");
										if(comments=="null" )
										{
											apprvers.setComments("");
										}else{
											apprvers.setComments(rsAppInfo2.getString("Comments"));
										}
										}
										}
									}else{
										
										recordStatus1=recordStatus1+" order by all_r.rejected_date desc ";
										ResultSet rsAppInfo3=ad.selectQuery(recordStatus1);
										if(rsAppInfo3.next())
										{
											if(!chkdate1.equalsIgnoreCase(rsAppInfo3.getString("rejected_date")))
											{
											apprvers.setDate(rsAppInfo3.getString("rejected_date"));
											}
											
										
										 comments="";
										comments=rsAppInfo3.getString("Comments");
										if(comments=="null" )
										{
											apprvers.setComments("");
										}else{
											apprvers.setComments(rsAppInfo3.getString("Comments"));
										}
										}
									}
									
								}
								apprvers.setEmployeeName(rsApprDetails1.getString("EMP_FULLNAME"));
						
							listApprers.add(apprvers);
							}
						
						request.setAttribute("approverDetails", listApprers);
					
				} 
				
					catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				if(approverPriority==1)
				{
					forwardType="ftpENG";
				}
				else{
				forwardType="ftpAppr";
				}
			}
			
			if(ITType.equalsIgnoreCase("File Server Access Request"))
			{
				LinkedList folder=new LinkedList();
				String empno=user.getEmployeeNo();
				
				String data="select emp.PERNR,emp.EMP_FULLNAME,emp.EMAIL_ID,emp.IP_PHONE,emp.TEL_EXTENS,dep.DPTSTXT,des.DSGSTXT,loc.LOCATION_CODE " +
						"from emp_official_info as emp,DEPARTMENT as dep,DESIGNATION as des ,Location as loc where PERNR='"+empID+"' and " +
						"dep.DPTID=emp.DPTID and des.DSGID=emp.DSGID and loc.LOCATION_CODE=emp.LOCID";	
				ResultSet rs= ad.selectQuery(data);
				try {
					while(rs.next())
					{
						
						help.setRequestername(rs.getString("EMP_FULLNAME"));
						help.setRequesterdepartment(rs.getString("DPTSTXT"));
						help.setRequesterdesignation(rs.getString("DSGSTXT"));
						help.setExtno(rs.getString("TEL_EXTENS"));
						help.setIpPhoneno(rs.getString("IP_PHONE"));
						help.setLocation(rs.getString("LOCATION_CODE"));
						
						help.setEmpno(rs.getString("PERNR"));
						
					}
				} catch (SQLException e) {
				  e.printStackTrace();
				}
				
				String requester="";
				String data1=" select * from IT_HELPDESK where Req_No="+reqId+"";	
				ResultSet rs1= ad.selectQuery(data1);
				try {
					while(rs1.next())
					{
						requester=rs1.getString("Emp_No");
						help.setFromlocationId(rs1.getString("From_Loc"));
						help.setAssetvalue(rs1.getString("Asset_Details"));
						help.setAdloginname(rs1.getString("ADLoginName"));
						help.setAccesstype(rs1.getString("Access_type"));
						help.setRequiredfoldername(rs1.getString("Req_Folder_access"));
						help.setServer(rs1.getString("Server_Address"));
						help.setReason(rs1.getString("Reason"));
						help.setHostname(rs1.getString("HostName"));
						help.setIPNumber(rs1.getString("IPAddress"));
						help.setReqPriority(rs1.getString("Req_Priority"));
						
						String rmk=rs1.getString("Remarks");
						if(rmk!=null)
						{
							help.setRemarks(rs1.getString("Remarks"));
							request.setAttribute("Remark", "Remark");
						}
					}
				} catch (SQLException e) {
					  e.printStackTrace();
					}
				
				
				ResultSet rs111 = ad.selectQuery("select LOCID," +
						"LOCNAME,location_code from location");
						ArrayList locationList=new ArrayList();
						ArrayList locationLabelList=new ArrayList();
							
						try {
							while(rs111.next()) {
								locationList.add(rs111.getString("location_code")+"-"+rs111.getString("LOCNAME"));
								locationLabelList.add(rs111.getString("location_code")+"-"+rs111.getString("LOCNAME"));
							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						help.setLocationIdList(locationList);
						help.setLocationLabelList(locationLabelList);
						
						ArrayList deparmentList=new ArrayList();
						ResultSet rs12 =ad.selectQuery("select DPTSTXT from department order by DPTSTXT");
						try {
							while(rs12.next()){
								
								deparmentList.add(rs12.getString("DPTSTXT"));
							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
					  		e.printStackTrace();
						}
						
						help.setDepartmentList(deparmentList);
				
				
				
				
				folder.add(help);
				request.setAttribute("folder", folder);
				
				//Approver Details
				  checkStatus=0;
				LinkedList listApprers=new LinkedList();
				int jk=0;
				//HOD

				 hodpresent=0;
				 hodpresentinIt=0;
				 HODPresentId="";
				 HODPresentname="";
				 itengineerid="";
				 itengineername="";
				 HOD="";
					pendingApprovers="";
				
				 //chk if he has Hod
				 String chkhod="select count(*) from ESS_Approvers where employeeNumber='"+empID+"'  ";
				 ResultSet rs10= ad.selectQuery(chkhod);
				 try {
					while(rs10.next())
					 {
						 hodpresent=rs10.getInt(1);
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				
				//get hod details
				
			
				if(hodpresent>0){
				String gethod="select ess.ApproverId,emp.EMP_FULLNAME from ESS_Approvers  as ess,emp_official_info as emp  " +
						" where employeeNumber='"+empID+"'  and essType='Leave' and emp.PERNR=ess.ApproverId ";
				 ResultSet rs2= ad.selectQuery(gethod);
				 
				 try {
					if(rs2.next())
					 {
					
						HODPresentId=rs2.getString("ApproverId");
						HODPresentname=rs2.getString("EMP_FULLNAME");
					 }
				} catch (SQLException e) {
					
					e.printStackTrace();
				}
				}
				
				//chk if he is present in It approver
				 String chkhodinit="select count(*) from IT_Approvers where Approver_ID='"+HODPresentId+"' and Req_Type = '"+ITType+"'  and LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))";
				 ResultSet rs11= ad.selectQuery(chkhodinit);
				 try {
					while(rs11.next())
					 {
						hodpresentinIt=rs11.getInt(1);
					 }
				} catch (SQLException e1) {
					
					e1.printStackTrace();
				}
				 
				// Plant head
					String plantheadid = "";
					String plantheadname = "";
					String plantheaddep = "";
					String plantheaddesg = "";
					String a="";
					String userx="select loc.LOCID from Location as loc,emp_official_info as emp where loc.LOCATION_CODE=emp.LOCID and emp.PERNR='"+requester+"' ";
					ResultSet userrs=ad.selectQuery(userx);
					try {
						while(userrs.next())
						 {				
							a=userrs.getString("LOCID");
						 }
					} catch (SQLException e2) {
						// TODO Auto-generated catch block
						e2.printStackTrace();
					}
					if (!a.equalsIgnoreCase("16")) {
						String plant = "select pl.Plant,pl.PERNR,emp.EMP_FULLNAME,dep.DPTSTXT,desg.DSGSTXT from PLANT_HEAD pl,emp_official_info emp,DEPARTMENT dep,DESIGNATION desg where Plant=(select LOCATION_CODE from Location where LOCID='"
								+ a
								+ "') and emp.PERNR=pl.PERNR and dep.DPTID=emp.DPTID and desg.DSGID=emp.DSGID";
						ResultSet pl = ad.selectQuery(plant);
						try {
							while (pl.next()) {
								plantheadid = pl.getString("pernr");
								plantheadname = pl.getString("EMP_FULLNAME");
								plantheaddep = pl.getString("DPTSTXT");
								plantheaddesg = pl.getString("DSGSTXT");
							}
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
					if (plantheadid.equalsIgnoreCase("")) {

						if (hodpresent > 0 && hodpresentinIt == 0) {

							try {

								checkStatus = 1;
								ApprovalsForm apprvershod = new ApprovalsForm();
								apprvershod.setPriority("1");

								apprvershod.setEmployeeCode(HODPresentId);
								apprvershod.setEmployeeName(HODPresentname);

								String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
										+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
										+ reqId
										+ "' and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
										+ empID
										+ "')) AND "
										+ "all_r.Last_Approver='"
										+ HODPresentId
										+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
										+ ITType
										+ "' and emp.PERNR=all_r.Last_Approver"
										+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

								ResultSet rsAppInfo = ad.selectQuery(recordStatus);
								if (rsAppInfo.next()) {
									apprvershod.setApproveStatus(rsAppInfo
											.getString("Req_Status"));
									String approveStatus = rsAppInfo
											.getString("Req_Status");
									if (approveStatus.equalsIgnoreCase("Approved")
											|| approveStatus
													.equalsIgnoreCase("Completed")) {
										apprvershod.setDate(rsAppInfo
												.getString("approved_date"));
									} else {
										apprvershod.setDate(rsAppInfo
												.getString("rejected_date"));
									}
									comments = "";
									comments = rsAppInfo.getString("Comments");
									if (comments == "null") {
										apprvershod.setComments("");
									} else {
										apprvershod.setComments(rsAppInfo
												.getString("Comments"));
									}
								}

								listApprers.add(apprvershod);
								jk = 1;
							}

							catch (SQLException e1) {

								e1.printStackTrace();
							}

						}
					}

					if (!plantheadid.equalsIgnoreCase("")) {

						try {

							checkStatus = 1;
							ApprovalsForm apprvershod = new ApprovalsForm();
							apprvershod.setPriority("1");

							apprvershod.setEmployeeCode(plantheadid);
							apprvershod.setEmployeeName(plantheadname);

							String recordStatus = "select emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments"
									+ " from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
									+ reqId
									+ "' and it.LOCATION_ID='"
									+ user.getPlantId()
									+ "' AND "
									+ "all_r.Last_Approver='"
									+ plantheadid
									+ "' and all_r.Req_Type='IT Request' and it.Req_Type='"
									+ ITType
									+ "' and emp.PERNR=all_r.Last_Approver"
									+ " group by emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date, all_r.Comments   HAVING count(*) > 0";

							ResultSet rsAppInfo = ad.selectQuery(recordStatus);
							if (rsAppInfo.next()) {
								apprvershod.setApproveStatus(rsAppInfo
										.getString("Req_Status"));
								String approveStatus = rsAppInfo
										.getString("Req_Status");
								if (approveStatus.equalsIgnoreCase("Approved")
										|| approveStatus
												.equalsIgnoreCase("Created")) {
									apprvershod.setDate(rsAppInfo
											.getString("approved_date"));
								} else {
									apprvershod.setDate(rsAppInfo
											.getString("rejected_date"));
								}
								comments = "";
								comments = rsAppInfo.getString("Comments");
								if (comments == "null") {
									apprvershod.setComments("");
								} else {
									apprvershod.setComments(rsAppInfo
											.getString("Comments"));
								}
							}

							listApprers.add(apprvershod);
							jk = 1;
						}

						catch (SQLException e1) {

							e1.printStackTrace();
						}

					}

					String getApprDetails = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
							+ empID
							+ "'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"
							+ ITType
							+ "' group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
					ResultSet rsApprDetails = ad.selectQuery(getApprDetails);
					try {
						while (rsApprDetails.next()) {

							checkStatus = 1;
							ApprovalsForm apprvers = new ApprovalsForm();
							apprvers.setPriority(rsApprDetails
									.getString("Priority"));

							apprvers.setPriority(rsApprDetails
									.getString("Priority"));
							if (jk == 1) {

								apprvers.setPriority(Integer.toString(listApprers
										.size() + 1));
							}
							apprvers.setEmployeeCode(rsApprDetails
									.getString("Approver_Id"));
							String empCode = rsApprDetails.getString("Approver_Id");

							String recordStatus = "select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
									+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"
									+ reqId
									+ "' "
									+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"
									+ empID
									+ "')) AND all_r.Last_Approver='"
									+ empCode
									+ "' and it.Approver_Id=all_r.Last_Approver  and all_r.Req_Type='IT Request' and "
									+ "it.Req_Type='"
									+ ITType
									+ "' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
									+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";

							ResultSet rsAppInfo = ad.selectQuery(recordStatus);
							if (rsAppInfo.next()) {
								if (rsAppInfo.getInt("Priority") == 1) {
									chkdate = rsAppInfo.getString("approved_date");
									chkdate1 = rsAppInfo.getString("rejected_date");
								}
								apprvers.setApproveStatus(rsAppInfo
										.getString("Req_Status"));
								String approveStatus = rsAppInfo
										.getString("Req_Status");
								if (approveStatus.equalsIgnoreCase("Approved")
										|| approveStatus
												.equalsIgnoreCase("Completed")) {
									apprvers.setDate(rsAppInfo
											.getString("approved_date"));
								} else {
									apprvers.setDate(rsAppInfo
											.getString("rejected_date"));
								}
								comments = "";
								comments = rsAppInfo.getString("Comments");
								if (comments == "null") {
									apprvers.setComments("");
								} else {
									apprvers.setComments(rsAppInfo
											.getString("Comments"));
								}
							}
							apprvers.setEmployeeName(rsApprDetails
									.getString("EMP_FULLNAME"));

							listApprers.add(apprvers);

						}
						//IT ENGINEER DETAIlS
						
						
						String getApprDetails1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME from IT_Approvers as it,emp_official_info as emp 	where it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"'))  and it.Approver_Id=emp.PERNR  and it.Req_Type='"+ITType+"' and it.Priority=1    group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME order by Priority";
						ResultSet rsApprDetails1=ad.selectQuery(getApprDetails1);
						
							while(rsApprDetails1.next())
							{
								checkStatus=1;
								ApprovalsForm apprvers=new ApprovalsForm();
								apprvers.setPriority(Integer.toString(listApprers.size()+1));
								
								apprvers.setEmployeeCode(rsApprDetails1.getString("Approver_Id"));
								String empCode1=rsApprDetails1.getString("Approver_Id");
								
								String recordStatus1="select it.Priority,it.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,"
										+ "all_r.Comments from IT_Approvers as it,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' "
										+ "and it.LOCATION_ID=(select LOCID from Location where LOCATION_CODE=(select LOCID from emp_official_info where PERNR='"+empID+"')) AND all_r.Last_Approver='"+empCode1+"' and it.Approver_Id=all_r.Last_Approver and all_r.Req_Type='IT Request' and "
										+ "it.Req_Type='"+ITType+"' and it.Approver_Id=emp.PERNR  group by it.Priority,it.Approver_Id,emp.EMP_FULLNAME,"
										+ "all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments   HAVING count(*) > 0";
								
								ResultSet rsAppInfo1=ad.selectQuery(recordStatus1);
								if(rsAppInfo1.next())
								{
									
									String approveStatus=rsAppInfo1.getString("Req_Status");
									if(approveStatus.equalsIgnoreCase("Approved"))
									{
										recordStatus1=recordStatus1+" order by all_r.approved_date desc ";
										ResultSet rsAppInfo2=ad.selectQuery(recordStatus1);
										if(rsAppInfo2.next())
										{
											if(!chkdate.equalsIgnoreCase(rsAppInfo2.getString("approved_date")))
											{
												apprvers.setApproveStatus("Closed");
											apprvers.setDate(rsAppInfo2.getString("approved_date"));
											
										
										
										 comments="";
										comments=rsAppInfo2.getString("Comments");
										if(comments=="null" )
										{
											apprvers.setComments("");
										}else{
											apprvers.setComments(rsAppInfo2.getString("Comments"));
										}
										}
										}
									}else{
										
										recordStatus1=recordStatus1+" order by all_r.rejected_date desc ";
										ResultSet rsAppInfo3=ad.selectQuery(recordStatus1);
										if(rsAppInfo3.next())
										{
											if(!chkdate1.equalsIgnoreCase(rsAppInfo3.getString("rejected_date")))
											{
											apprvers.setDate(rsAppInfo3.getString("rejected_date"));
											}
											
										
										 comments="";
										comments=rsAppInfo3.getString("Comments");
										if(comments=="null" )
										{
											apprvers.setComments("");
										}else{
											apprvers.setComments(rsAppInfo3.getString("Comments"));
										}
										}
									}
									
								}
								apprvers.setEmployeeName(rsApprDetails1.getString("EMP_FULLNAME"));
						
							listApprers.add(apprvers);
							}
						
						request.setAttribute("approverDetails", listApprers);
					
				} 
				
					catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				if(approverPriority==1)
				{
					forwardType="folderENG";
				}
				else{
				forwardType="folderAppr";
				}
			}
		
		
	 
			
		 }
		
		
		return mapping.findForward(forwardType);
		}
	
	public ActionForward statusChangeForVendorMaster(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response){
		EssDao ad=new EssDao();
		LinkedList list = new LinkedList();
		
		ApprovalsForm statusForm=(ApprovalsForm) form;
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		if(user==null){
			request.setAttribute("message","Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		String reqId = request.getParameter("reqId");
		MainDao exeQry = new MainDao();
		String reqType = statusForm.getReqRequstType();
		statusForm.setRequestType(reqType);
		String reqStatus = request.getParameter("status");
		String filterBy=statusForm.getSelectedFilter();
		statusForm.setSelectedFilter(filterBy);
	statusForm.setReqRequstType(reqType);
	int totalRecords=statusForm.getTotalRecords();//21
	int startRecord=statusForm.getStartRecord();//11
	int endRecord=statusForm.getEndRecord();	
	
	
	statusForm.setTotalRecords(totalRecords);
	statusForm.setStartRecord(startRecord);
	statusForm.setEndRecord(endRecord);
		String comments = statusForm.getRemark();
		
		LinkedList reqDetails = new LinkedList();
		reqDetails.add(0, reqId);
		reqDetails.add(1, reqType);
		//User Informtion
		String lcode = user.getPlantId();
		int user_Id = user.getId();
		String uName = user.getUserName();
		String appName = uName;
		int rowCount= 0;
		System.out.println(reqType);
		//updateStatus("Approved", reqType,reqId);
		//get the total Approvers
		rowCount = getCount("Approvers_Details", reqType);
		//check and get next approver
		
try{
		Date dNow = new Date( );
		 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS");
			String dateNow = ft.format(dNow);
		String location="";
		String matGroup="";
		String approver="";
		String parllelAppr1="";
		String parllelAppr2="";
		String reqDate="";
		String reqesterID="";
		String requestNo="";
		String matType="Vendor Master";
		
		matGroup="";
		String test="";
		int priorityCout=0;
		int checkStatus=0;
		String userRole=statusForm.getUserRole();
		String requestDt="";
		String getMatGroup="select acc.ACCOUNT_GROUP_NAME,v.CREATED_BY,v.REQUEST_DATE from vendor_master_m as v,ACCOUNT_GROUP_M as acc where v.REQUEST_NO='"+reqId+"' and  v.ACCOUNT_GROUP_ID=acc.ACCOUNT_GROUP_ID ";
	 	ResultSet rsMatGrup=ad.selectQuery(getMatGroup);
	 	while(rsMatGrup.next()){
	 		matGroup=rsMatGrup.getString("ACCOUNT_GROUP_NAME");
	 		reqesterID=rsMatGrup.getString("CREATED_BY");
	 		requestDt=rsMatGrup.getString("REQUEST_DATE");
	 	}
	 	if(matGroup.equalsIgnoreCase("Import"))
	 	{
	 		
	 	}else{
	 		matGroup="Local";
	 	}
		String getProrityCout="select max(Priority) from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"'";
		ResultSet rsCout=ad.selectQuery(getProrityCout);
		while(rsCout.next())
		{
			priorityCout=rsCout.getInt(1);
			test=rsCout.getString(1);
		}
		if(test==null){
			getProrityCout="select max(Priority) from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group=''";
			rsCout=ad.selectQuery(getProrityCout);
			while(rsCout.next())
			{
				priorityCout=rsCout.getInt(1);
			}
		}
		
		checkStatus=0;
		int apprverPriority=0;
		String getApproverDetails="select * from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and (Approver_Id='"+user.getEmployeeNo()+"' or Parllel_Approver_1='"+user.getEmployeeNo()+"' or Parllel_Approver_2='"+user.getEmployeeNo()+"') ";
		ResultSet rsAppDet=ad.selectQuery(getApproverDetails);
		while(rsAppDet.next())
		{
			checkStatus=1;
			apprverPriority=rsAppDet.getInt("Priority");
			approver=rsAppDet.getString("Approver_Id");
			parllelAppr1=rsAppDet.getString("Parllel_Approver_1");
			parllelAppr2=rsAppDet.getString("Parllel_Approver_2");
		}
		if(checkStatus==0)
		{
			getApproverDetails="select * from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' and (Approver_Id='"+user.getEmployeeNo()+"' or Parllel_Approver_1='"+user.getEmployeeNo()+"' or Parllel_Approver_2='"+user.getEmployeeNo()+"') ";
			rsAppDet=ad.selectQuery(getApproverDetails);
			while(rsAppDet.next())
			{
			
				apprverPriority=rsAppDet.getInt("Priority");
				approver=rsAppDet.getString("Approver_Id");
				parllelAppr1=rsAppDet.getString("Parllel_Approver_1");
				parllelAppr2=rsAppDet.getString("Parllel_Approver_2");
			}
		}
		
		 
		
		if(reqStatus.equalsIgnoreCase("Approve")){
			if(priorityCout==apprverPriority)
			{
				//last approver creator
				String updateStatus="update All_Request set Req_Status='Completed',Comments='"+statusForm.getComments()+"',Last_Approver='"+approver+"'," +
				"Pending_Approver='',Approved_Persons='"+approver+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and type='Vendor Master' and Pending_Approver='"+approver+"'";
			    int saveStatus=0;
			    saveStatus=ad.SqlExecuteUpdate(updateStatus);
			    
			    if(!(parllelAppr1.equalsIgnoreCase("")))
			    {
			    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Completed',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr1+"'," +
						"Pending_Approver='',Approved_Persons='"+parllelAppr1+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and type='Vendor Master' and Pending_Approver='"+parllelAppr1+"'";
					    ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
			    }
			    if(!(parllelAppr2.equalsIgnoreCase("")))
			    {
			    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Completed',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr2+"'," +
						"Pending_Approver='',Approved_Persons='"+parllelAppr2+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and  type='Vendor Master' and  Pending_Approver='"+parllelAppr2+"'";
					    ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
			    }	
			    if(saveStatus>0)
			    {
			    	
			    	
			    	statusForm.setMessage2("Code completed against request no. '"+reqId+"' successfull");
			    	 ad.connClose();
			    	EMailer email=new EMailer();
					String approvermail="";
					email.sendMailToMaterialCodeRequester(request, approvermail, reqId, "Vendor Master", user.getEmployeeNo(), reqesterID, "Approve");
		
			    	String purchaseView=null;
					 String accountView=null;
					 purchaseView=request.getParameter("purchase");
					 
					 accountView=request.getParameter("accountView");
					 
					 
					
					 
					 if(purchaseView.equalsIgnoreCase("true") && accountView.equalsIgnoreCase("true")){
					 	 purchaseView="3";
					 }else{
						 if(purchaseView.equalsIgnoreCase("true")){
						 	 purchaseView="1";
						 }
						 if(accountView.equalsIgnoreCase("true")){
						 	 purchaseView="2";
						 }
					 }
					 
					 String name=statusForm.getName();
					 String address1=statusForm.getAddress1();
					 String address2=statusForm.getAddress2();
					 String address3=statusForm.getAddress3();
					 String address4=statusForm.getAddress4();
					 String city=statusForm.getCity();
					 String pinCode=statusForm.getPinCode();
					 String country=statusForm.getCountry();
					 String state=statusForm.getState();
					 String landLineNo=statusForm.getLandLineNo();
					 String mobileNo=statusForm.getMobileNo();
					 String faxNo=statusForm.getFaxNo();
					 String emailId=statusForm.getEmailId();
					 String currencyId=statusForm.getCurrencyId();
					 String reConcillationActId=statusForm.getReConcillationActId();
					 String elgTds=statusForm.getElgTds();
					 String tdsCode=statusForm.getTdsCode();
					 String lstNo=statusForm.getLstNo();
					 String tinNo=statusForm.getTinNo();
					 String cstNo=statusForm.getCstNo();
					 String panNo=statusForm.getPanNo();
					 String serviceTaxRegNo=statusForm.getServiceTaxRegNo();
					 String regExciseVendor=statusForm.getRegExciseVendor();
					 String eccNo=statusForm.getEccNo();
					 String exciseRegNo=statusForm.getExciseRegNo();
					 String exciseRange=statusForm.getExciseRange();
					 String exciseDivision=statusForm.getExciseDivision();
					 String paymentTermId=statusForm.getPaymentTermId();
					 String accountClerkId=statusForm.getAccountClerkId();
					 String isApprovedVendor=statusForm.getIsApprovedVendor();
					 
					 String typeDetails=statusForm.getTypeDetails();
			    	
			    	 String sapCreationDate=statusForm.getSapCreationDate();
					  String b[]=sapCreationDate.split("/");
					  sapCreationDate=b[2]+"-"+b[1]+"-"+b[0];
					  
					  String sapCodeExist="";
					  String sapCodeexistNo="";
					  
					  sapCodeExist=statusForm.getSapCodeExists();
					  sapCodeexistNo=statusForm.getSapCodeExistsNo();
					  if(sapCodeExist!=null){
						  statusForm.setSapCodeExists("true");
					  }
					  if(sapCodeexistNo!=null){
						  statusForm.setSapCodeExists("false");
					  }
					  
					  //
					  
					 
						 
					  String updateVendorMaster="update vendor_master_m  set LOCATION_ID='"+statusForm.getLocationId()+"',ACCOUNT_GROUP_ID='"+statusForm.getAccountGroupId()+"'" +
				 		",VIEW_TYPE='"+purchaseView+"',TITLE='"+statusForm.getTitle()+"',NAME='"+name+"',ADDRESS1='"+address1+"',ADDRESS2='"+address2+"',ADDRESS3='"+address3+"',ADDRESS4='"+address4+"',CITY='"+city+"',PINCODE='"+pinCode+"',COUNTRY_ID='"+country+"',STATE='"+state+"'"+
				 		",LANDLINE_NO='"+landLineNo+"',MOBILE_NO='"+mobileNo+"',FAX_NO='"+faxNo+"',EMAIL_ID='"+emailId+"',CURRENCY_ID='"+currencyId+"',RECONCILATION_ACT_ID='"+reConcillationActId+"'"+
				 		",IS_ELIGIBLE_FOR_TDS='"+elgTds+"',TDS_CODE='"+tdsCode+"',LST_NO='"+lstNo+"',TIN_NO='"+tinNo+"',CST_NO='"+cstNo+"',PAN_No='"+panNo+"',Service_Tax_Registration_No='"+serviceTaxRegNo+"'," +
				 		"IS_REGD_EXCISE_VENDOR='"+regExciseVendor+"',ECC_No='"+eccNo+"',Excise_Reg_No='"+exciseRegNo+"',Excise_Range='"+exciseRange+"',Excise_Division='"+exciseDivision+"'," +
				 		"PAYMENT_TERM_ID='"+paymentTermId+"',ACCOUNT_CLERK_ID='"+accountClerkId+"',IS_APPROVED_VENDOR='"+isApprovedVendor+"',MODIFIED_DATE='"+dateNow+"',MODIFIED_BY='"+user.getEmployeeNo()+"',COMMISSIONERATE='"+statusForm.getCommissionerate()+"',Type_Of_Vendor='"+statusForm.getTypeOfVendor()+"'" +
				 				",Approve_Status='Completed',SAP_CODE_NO='"+statusForm.getSapCodeNo()+"',SAP_CODE_EXISTS='"+statusForm.getSapCodeExists()+"',SAP_CREATION_DATE='"+sapCreationDate+"',SAP_CREATED_BY='"+statusForm.getSapCreatedBy()+"',last_approver='"+user.getFullName()+"',pending_approver='No',rejected_flag='',GSTIN_Number='"+statusForm.getGstinNo()+"'  where REQUEST_NO='"+reqId+"'";
					  int updateMateStatus=ad.SqlExecuteUpdate(updateVendorMaster);
					  
					  String saveInHistory="insert into vendor_master_history(REQUEST_NO,REQUEST_DATE,LOCATION_ID,ACCOUNT_GROUP_ID,VIEW_TYPE,TITLE,NAME,ADDRESS1,"
							  + "ADDRESS2,ADDRESS3,ADDRESS4,CITY,PINCODE,COUNTRY_ID,STATE,LANDLINE_NO,MOBILE_NO,FAX_NO,EMAIL_ID,CURRENCY_ID,RECONCILATION_ACT_ID,IS_ELIGIBLE_FOR_TDS,"
							  + "TDS_CODE,LST_NO,TIN_NO,CST_NO,PAN_No,Service_Tax_Registration_No,IS_REGD_EXCISE_VENDOR,ECC_No,Excise_Reg_No,Excise_Range,Excise_Division,PAYMENT_TERM_ID,"
							  + "ACCOUNT_CLERK_ID,IS_APPROVED_VENDOR,CREATED_DATE,CREATED_BY,COMMISSIONERATE,Type_Of_Vendor,Approve_Status,REQUESTED_BY,role,GSTIN_Number)"+
							  "values('"+reqId+"','"+sapCreationDate+"','"+statusForm.getLocationId()+"','"+statusForm.getAccountGroupId()+"','"+purchaseView+"','"+statusForm.getTitle()+"','"+name+"'," +
							  "'"+address1+"','"+address2+"','"+address3+"','"+address4+"','"+city+"','"+pinCode+"','"+country+"','"+state+"','"+landLineNo+"','"+mobileNo+"','"+faxNo+"','"+emailId+"'," +
							  "'"+currencyId+"','"+reConcillationActId+"','"+elgTds+"','"+tdsCode+"','"+lstNo+"','"+tinNo+"','"+cstNo+"','"+panNo+"','"+serviceTaxRegNo+"','"+regExciseVendor+"'," +
							  "'"+eccNo+"','"+exciseRegNo+"','"+exciseRange+"','"+exciseDivision+"','"+paymentTermId+"','"+accountClerkId+"','"+isApprovedVendor+"','"+dateNow+"','"+user.getEmployeeNo()+"',"
							  + "'"+statusForm.getCommissionerate()+"','"+statusForm.getTypeOfVendor()+"','Created','"+user.getEmployeeNo()+"','Creator','"+statusForm.getGstinNo()+"')";
							  ad.SqlExecuteUpdate(saveInHistory);
					  
					  if(statusForm.getSapCodeExists().equals("false")){
					  //insert vendor codes
					 String query="insert into VENDOR_CODES(REQUEST_NO,ACCOUNT_GROUP_ID,SAP_CODE_NO,NAME,CITY,SAP_CREATION_DATE,REQUEST_DATE,COUNTRY_ID) "
					 + "values('"+reqId+"','"+statusForm.getAccountGroupId()+"','"+statusForm.getSapCodeNo()+"','"+name+"','"+city+"','"+sapCreationDate+"','"+requestDt+"','"+country+"')";
					ad.SqlExecuteUpdate(query);
					  }
			    }
			}
			else{

			    String nextAppr="";
			    String nextPar1="";
			    String nextPar2="";
			    checkStatus=0;
				String getNextApprover="select Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and Priority='"+(apprverPriority+1)+"'";
				ResultSet rsNextApp=ad.selectQuery(getNextApprover);
				while(rsNextApp.next())
				{  
					checkStatus=1;
					nextAppr=rsNextApp.getString("Approver_Id");
					nextPar1=rsNextApp.getString("Parllel_Approver_1");
					nextPar2=rsNextApp.getString("Parllel_Approver_2");
				}
				if(checkStatus==0)
				{
					getNextApprover="select Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' and Priority='"+(apprverPriority+1)+"'";
					rsNextApp=ad.selectQuery(getNextApprover);
					while(rsNextApp.next())
					{  
						checkStatus=1;
						nextAppr=rsNextApp.getString("Approver_Id");
						nextPar1=rsNextApp.getString("Parllel_Approver_1");
						nextPar2=rsNextApp.getString("Parllel_Approver_2");
					}
				}
			String empNo=user.getEmployeeNo();
				if(empNo.equalsIgnoreCase(approver))
				{
					String updateStatus="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+user.getEmployeeNo()+"'," +
					"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and type='Vendor Master' and Pending_Approver='"+user.getEmployeeNo()+"'";
				    int saveStatus=0;
				    saveStatus=ad.SqlExecuteUpdate(updateStatus);
				    
				    if(!(parllelAppr1.equalsIgnoreCase("")))
				    {
				    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr1+"'," +
							"Pending_Approver='',Approved_Persons='"+parllelAppr1+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and and type='Vendor Master' Pending_Approver='"+parllelAppr1+"'";
						    ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
				    }
				    if(!(parllelAppr2.equalsIgnoreCase("")))
				    {
				    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr2+"'," +
							"Pending_Approver='',Approved_Persons='"+parllelAppr2+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and type='Vendor Master' and Pending_Approver='"+parllelAppr2+"'";
						    ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
				    }
				    if(saveStatus>0)
				    {
				    	 statusForm.setMessage2("Request Is Approved Successfully");
				    	 
				    	
				    	 
				    	String recordStatus="select * from All_Request where Req_Id='"+reqId+"' and Approved_Persons='"+user.getEmployeeNo()+"'";
				    	ResultSet rsRecDet=ad.selectQuery(recordStatus);
				    	while(rsRecDet.next())
				    	{
				    		requestNo=rsRecDet.getString("Requester_Name");
				    		reqDate=rsRecDet.getString("Req_Date");
				    		reqesterID=rsRecDet.getString("Requester_Name");
				    	}
				    	 ad.connClose();
				    	
				    	System.out.println(userRole);
				    	if(userRole.equalsIgnoreCase("Accounts"))
				    	{
				    	//update valuation class
				    	String updateMaterial="update vendor_master_m set last_approver='"+user.getFullName()+"',pending_approver='"+nextAppr+"' where REQUEST_NO='"+reqId+"'";
				    	int check=ad.SqlExecuteUpdate(updateMaterial);
				    	
				    		
				    		
				    	}
				    	
				    	//update last Approver and Pending Approver
				    	//GET pending approvers
				    	if(!(userRole.equalsIgnoreCase("Creator")))
				    	{
				    	checkStatus=0;
				    	String pendingApprovers="";
				    	String nextApprovers="";
						getNextApprover="select emp.EMP_FULLNAME,Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers as mat,emp_official_info AS emp " +
								" where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
						ResultSet rsPendignApp=ad.selectQuery(getNextApprover);
						while(rsPendignApp.next())
						{  
							checkStatus=1;
							pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
						}
						if(checkStatus==0)
						{
							getNextApprover="select emp.EMP_FULLNAME,Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers as mat,emp_official_info AS emp " +
									" where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
							rsPendignApp=ad.selectQuery(getNextApprover);
							while(rsPendignApp.next())
							{  
								checkStatus=1;
								pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
							}
						}
						if(!(pendingApprovers.equalsIgnoreCase(""))){
							pendingApprovers=pendingApprovers.substring(0, (pendingApprovers.length()-2));	
						}
						
						String updateMaterial="update vendor_master_m set last_approver='"+user.getFullName()+"',pending_approver='"+pendingApprovers+"',Approve_Status='In Process' where REQUEST_NO='"+reqId+"'";
				    	int check=ad.SqlExecuteUpdate(updateMaterial);
				    	}
				    	// insert record to next approver
				    	String insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
				    	" values('"+reqId+"','Vendor Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextAppr+"','No','"+reqesterID+"','','"+matType+"')";
				    	ad.SqlExecuteUpdate(insertAllRequest);
				    	 EMailer email = new EMailer();
							String approvermail="";
					    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Vendor Master", nextAppr, reqesterID);
				    	if(!(nextPar1.equalsIgnoreCase(""))){
				    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
					    	" values('"+reqId+"','Vendor Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar1+"','No','"+reqesterID+"','','"+matType+"')";
					    	ad.SqlExecuteUpdate(insertAllRequest);
					    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Vendor Master", nextPar1, reqesterID);
				    	}
				    	if(!(nextPar2.equalsIgnoreCase(""))){
				    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
					    	" values('"+reqId+"','Vendor Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar2+"','No','"+reqesterID+"','','"+matType+"')";
					    	ad.SqlExecuteUpdate(insertAllRequest);
					    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Vendor Master", nextPar2, reqesterID);
					    
				    	}
				    	
				    }else{
				    	statusForm.setMessage("Error..Request Is Not Approved");
				    }
					
				}if(!(parllelAppr1.equalsIgnoreCase(""))){
					
					if(empNo.equalsIgnoreCase(parllelAppr1)){
						String updateStatus="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+user.getEmployeeNo()+"'," +
						"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and type='Vendor Master' and Pending_Approver='"+user.getEmployeeNo()+"'";
					    int saveStatus=0;
					    saveStatus=ad.SqlExecuteUpdate(updateStatus);
					    
					    String updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+approver+"'," +
						"Pending_Approver='',Approved_Persons='"+approver+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and type='Vendor Master' and Pending_Approver='"+approver+"'";
					    ad.SqlExecuteUpdate(updateStatusForApprover); 
					    
					    if(!(parllelAppr2.equalsIgnoreCase("")))
					    {
					    	  updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr2+"'," +
								"Pending_Approver='',Approved_Persons='"+parllelAppr2+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and type='Vendor Master' and Pending_Approver='"+parllelAppr2+"'";
							    ad.SqlExecuteUpdate(updateStatusForApprover); 
					    }
					   
					    if(saveStatus>0)
					    {
					    	statusForm.setMessage2("Request Is Approved Successfully");
					    	String updateMaterial="update vendor_master_m set Approve_Status='In Process' where REQUEST_NO='"+reqId+"'";
					    	int check=ad.SqlExecuteUpdate(updateMaterial);
					    	String recordStatus="select * from All_Request where Req_Id='"+reqId+"' and Approved_Persons='"+user.getEmployeeNo()+"'";
					    	ResultSet rsRecDet=ad.selectQuery(recordStatus);
					    	while(rsRecDet.next())
					    	{
					    		requestNo=rsRecDet.getString("Requester_Name");
					    		reqDate=rsRecDet.getString("Req_Date");
					    		reqesterID=rsRecDet.getString("Requester_Name");
					    	}
					    	
					    	// insert record to next approver
					    	String insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
					    	" values('"+reqId+"','Vendor Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextAppr+"','No','"+reqesterID+"','','"+matType+"')";
					    	ad.SqlExecuteUpdate(insertAllRequest);
					    	 EMailer email = new EMailer();
					    	 String approvermail="";
					    	 email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Vendor Master", nextAppr, reqesterID);
					    	if(!(nextPar1.equalsIgnoreCase(""))){
					    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
						    	" values('"+reqId+"','Vendor Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar1+"','No','"+reqesterID+"','','"+matType+"')";
						    	ad.SqlExecuteUpdate(insertAllRequest);
						    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Vendor Master", nextPar1, reqesterID);
					    	}
					    	if(!(nextPar2.equalsIgnoreCase(""))){
					    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
						    	" values('"+reqId+"','Vendor Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar2+"','No','"+reqesterID+"','','"+matType+"')";
						    	ad.SqlExecuteUpdate(insertAllRequest);
						    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Vendor Master", nextPar2, reqesterID);
					    	}
					    	
					    	
					    }else{
					    	statusForm.setMessage("Error..Request Is Not Approved");
					    }
						
					}
					
					
				}
				if(!(parllelAppr2.equalsIgnoreCase(""))){

					
					if(empNo.equalsIgnoreCase(parllelAppr2)){
						String updateStatus="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+user.getEmployeeNo()+"'," +
						"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and type='Vendor Master' and Pending_Approver='"+user.getEmployeeNo()+"'";
					    int saveStatus=0;
					    saveStatus=ad.SqlExecuteUpdate(updateStatus);
					    String updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+approver+"'," +
						"Pending_Approver='',Approved_Persons='"+approver+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and type='Vendor Master' and Pending_Approver='"+approver+"'";
					    ad.SqlExecuteUpdate(updateStatusForApprover); 
					    
					    if(!(parllelAppr1.equalsIgnoreCase("")))
					    {
					    	  updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr1+"'," +
								"Pending_Approver='',Approved_Persons='"+parllelAppr1+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and type='Vendor Master' and Pending_Approver='"+parllelAppr1+"'";
							    ad.SqlExecuteUpdate(updateStatusForApprover); 
					    }
					    if(saveStatus>0)
					    {
					    	String updateMaterial="update vendor_master_m set Approve_Status='In Process' where REQUEST_NO='"+reqId+"'";
					    	int check=ad.SqlExecuteUpdate(updateMaterial);
					    	
					    	String recordStatus="select * from All_Request where Req_Id='"+reqId+"' and Approved_Persons='"+user.getEmployeeNo()+"'";
					    	ResultSet rsRecDet=ad.selectQuery(recordStatus);
					    	while(rsRecDet.next())
					    	{
					    		requestNo=rsRecDet.getString("Requester_Name");
					    		reqDate=rsRecDet.getString("Req_Date");
					    		reqesterID=rsRecDet.getString("Requester_Name");
					    	}
					    	
					    	// insert record to next approver
					    	String insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
					    	" values('"+reqId+"','Vendor Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextAppr+"','No','"+reqesterID+"','','"+matType+"')";
					    	ad.SqlExecuteUpdate(insertAllRequest);
					    	 EMailer email = new EMailer();
					    	 String approvermail="";
					    	 email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Vendor Master", nextAppr, reqesterID);
					    	if(!(nextPar1.equalsIgnoreCase(""))){
					    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
						    	" values('"+reqId+"','Vendor Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar1+"','No','"+reqesterID+"','','"+matType+"')";
						    	ad.SqlExecuteUpdate(insertAllRequest);
						    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Vendor Master", nextPar1, reqesterID);
					    	}
					    	if(!(nextPar2.equalsIgnoreCase(""))){
					    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
						    	" values('"+reqId+"','Vendor Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar2+"','No','"+reqesterID+"','','"+matType+"')";
						    	ad.SqlExecuteUpdate(insertAllRequest);
						    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Material Code Request", nextPar2, reqesterID);
					    	}
					    	
					    	
					    }else{
					    	statusForm.setMessage("Error..Request Is Not Approved");
					    }
						
					}
				}
		     
			
			}
		}else{


			String updateStatus="update All_Request set Req_Status='Rejected',Comments='"+statusForm.getComments()+"',Last_Approver='"+approver+"'," +
			"Pending_Approver='',Approved_Persons='"+approver+"',rejected_date='"+dateNow+"' where Req_Id='"+reqId+"' and type='Vendor Master' and Pending_Approver='"+approver+"'";
		    int saveStatus=0;
		    saveStatus=ad.SqlExecuteUpdate(updateStatus);
		    if(!(parllelAppr1.equalsIgnoreCase("")))
		    {
		    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Rejected',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr1+"'," +
					"Pending_Approver='',Approved_Persons='"+parllelAppr1+"',rejected_date='"+dateNow+"' where Req_Id='"+reqId+"' and type='Vendor Master' and Pending_Approver='"+parllelAppr1+"'";
		    	 saveStatus=ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
		    }
		    if(!(parllelAppr2.equalsIgnoreCase("")))
		    {
		    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Rejected',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr2+"'," +
					"Pending_Approver='',Approved_Persons='"+parllelAppr2+"',rejected_date='"+dateNow+"' where Req_Id='"+reqId+"' and type='Vendor Master' and Pending_Approver='"+parllelAppr2+"'";
		    	 saveStatus=ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
		    }
			if(saveStatus>0){
				statusForm.setMessage2("Request has been rejected successfully");
				
				
				String updateMaterial="update vendor_master_m set Approve_Status='Rejected',MODIFIED_BY='"+user.getEmployeeNo()+"',rejected_flag=''  where request_no='"+reqId+"'";
				ad.SqlExecuteUpdate(updateMaterial);
				 ad.connClose();
				EMailer email=new EMailer();
				String approvermail="";
				email.sendMailToMaterialCodeRequester(request, approvermail, reqId, "Vendor Master", user.getEmployeeNo(), reqesterID, "Rejected");
			}
			if(priorityCout==apprverPriority){
				
				
				String purchaseView=null;
				 String accountView=null;
				 purchaseView=request.getParameter("purchase");
				 
				 accountView=request.getParameter("accountView");
				 
				 
				
				 
				 if(purchaseView.equalsIgnoreCase("true") && accountView.equalsIgnoreCase("true")){
				 	 purchaseView="3";
				 }else{
					 if(purchaseView.equalsIgnoreCase("true")){
					 	 purchaseView="1";
					 }
					 if(accountView.equalsIgnoreCase("true")){
					 	 purchaseView="2";
					 }
				 }
				 
				 String name=statusForm.getName();
				 String address1=statusForm.getAddress1();
				 String address2=statusForm.getAddress2();
				 String address3=statusForm.getAddress3();
				 String address4=statusForm.getAddress4();
				 String city=statusForm.getCity();
				 String pinCode=statusForm.getPinCode();
				 String country=statusForm.getCountry();
				 String state=statusForm.getState();
				 String landLineNo=statusForm.getLandLineNo();
				 String mobileNo=statusForm.getMobileNo();
				 String faxNo=statusForm.getFaxNo();
				 String emailId=statusForm.getEmailId();
				 String currencyId=statusForm.getCurrencyId();
				 String reConcillationActId=statusForm.getReConcillationActId();
				 String elgTds=statusForm.getElgTds();
				 String tdsCode=statusForm.getTdsCode();
				 String lstNo=statusForm.getLstNo();
				 String tinNo=statusForm.getTinNo();
				 String cstNo=statusForm.getCstNo();
				 String panNo=statusForm.getPanNo();
				 String serviceTaxRegNo=statusForm.getServiceTaxRegNo();
				 String regExciseVendor=statusForm.getRegExciseVendor();
				 String eccNo=statusForm.getEccNo();
				 String exciseRegNo=statusForm.getExciseRegNo();
				 String exciseRange=statusForm.getExciseRange();
				 String exciseDivision=statusForm.getExciseDivision();
				 String paymentTermId=statusForm.getPaymentTermId();
				 String accountClerkId=statusForm.getAccountClerkId();
				 String isApprovedVendor=statusForm.getIsApprovedVendor();
				 
				 String typeDetails=statusForm.getTypeDetails();
				 String sapCreationDate="";
				String sapcodeNo=statusForm.getSapCodeNo();
				if(sapcodeNo!=null)
				{
		    sapCreationDate=statusForm.getSapCreationDate();
				  String b[]=sapCreationDate.split("/");
				  sapCreationDate=b[2]+"-"+b[1]+"-"+b[0];
				  
				  String sapCodeExist="";
				  String sapCodeexistNo="";
				  
				  sapCodeExist=statusForm.getSapCodeExists();
				  sapCodeexistNo=statusForm.getSapCodeExistsNo();
				  if(sapCodeExist!=null){
					  statusForm.setSapCodeExists("true");
				  }
				  if(sapCodeexistNo!=null){
					  statusForm.setSapCodeExistsNo("true");
				  }
				
				} 
				  //
				  
				  String updateVendorMaster="update vendor_master_m  set LOCATION_ID='"+statusForm.getLocationId()+"',ACCOUNT_GROUP_ID='"+statusForm.getAccountGroupId()+"'" +
			 		",VIEW_TYPE='"+purchaseView+"',TITLE='"+statusForm.getTitle()+"',NAME='"+name+"',ADDRESS1='"+address1+"',ADDRESS2='"+address2+"',ADDRESS3='"+address3+"',ADDRESS4='"+address4+"',CITY='"+city+"',PINCODE='"+pinCode+"',COUNTRY_ID='"+country+"',STATE='"+state+"'"+
			 		",LANDLINE_NO='"+landLineNo+"',MOBILE_NO='"+mobileNo+"',FAX_NO='"+faxNo+"',EMAIL_ID='"+emailId+"',CURRENCY_ID='"+currencyId+"',RECONCILATION_ACT_ID='"+reConcillationActId+"'"+
			 		",IS_ELIGIBLE_FOR_TDS='"+elgTds+"',TDS_CODE='"+tdsCode+"',LST_NO='"+lstNo+"',TIN_NO='"+tinNo+"',CST_NO='"+cstNo+"',PAN_No='"+panNo+"',Service_Tax_Registration_No='"+serviceTaxRegNo+"'," +
			 		"IS_REGD_EXCISE_VENDOR='"+regExciseVendor+"',ECC_No='"+eccNo+"',Excise_Reg_No='"+exciseRegNo+"',Excise_Range='"+exciseRange+"',Excise_Division='"+exciseDivision+"'," +
			 		"PAYMENT_TERM_ID='"+paymentTermId+"',ACCOUNT_CLERK_ID='"+accountClerkId+"',IS_APPROVED_VENDOR='"+isApprovedVendor+"',MODIFIED_DATE='"+dateNow+"',MODIFIED_BY='"+user.getEmployeeNo()+"',COMMISSIONERATE='"+statusForm.getCommissionerate()+"',Type_Of_Vendor='"+statusForm.getTypeOfVendor()+"'" +
			 				",last_approver='"+user.getFullName()+"',pending_approver='No',GSTIN_Number='"+statusForm.getGstinNo()+"'  where REQUEST_NO='"+reqId+"'";
				  int updateMateStatus=ad.SqlExecuteUpdate(updateVendorMaster);
				System.out.println(updateMateStatus);
			}
			
		
		
		}
		
		//set vendor values
		if(userRole.equalsIgnoreCase("User"))
		{
			String accountGroupID="";
			String getVendorDetails="select v.GSTIN_Number,v.REQUEST_NO,v.REQUEST_DATE,acc.ACCOUNT_GROUP_NAME,acccl.ACC_CLERK_DESC,v.VIEW_TYPE,v.Type_Of_Vendor," +
			"v.TITLE,v.NAME,v.ADDRESS1,v.ADDRESS2,v.ADDRESS3,v.ADDRESS4,v.CITY,v.PINCODE,v.LANDLINE_NO," +
			"v.MOBILE_NO,v.FAX_NO,v.EMAIL_ID,cur.ISOCD,rec.RECONCILIATION_ACCOUNT_NAME,  v.IS_ELIGIBLE_FOR_TDS,v.LST_NO,v.TIN_NO" +
			",v.CST_NO, v.IS_APPROVED_VENDOR,v.PAN_No,v.Service_Tax_Registration_No,v.IS_REGD_EXCISE_VENDOR," +
			"v.ECC_No,v.Excise_Reg_No,v.Excise_Range,v.Excise_Division,v.COMMISSIONERATE,SAP_CODE_NO,SAP_CODE_EXISTS,SAP_CREATION_DATE," +
			"SAP_CREATED_BY,REQUESTED_BY  from vendor_master_m as v ,ACCOUNT_GROUP_M as acc,ACC_CLERK_M as acccl ,Currency as cur," +
			"RECONCILIATION_ACCOUNT_M as rec  where REQUEST_NO='"+reqId+"' and acc.ACCOUNT_GROUP_ID=v.ACCOUNT_GROUP_ID and  " +
			" cur.WAERS=v.CURRENCY_ID  and rec.RECONCILIATION_ACCOUNT_ID=v.RECONCILATION_ACT_ID " +
			" and  acccl.ACC_CLERK_ID=v.ACCOUNT_CLERK_ID";
					
				
				
				ResultSet rs=ad.selectQuery(getVendorDetails);
				if(rs.next())
				{
					statusForm.setRequestNumber(rs.getString("REQUEST_NO"));
					
				    accountGroupID=rs.getString("ACCOUNT_GROUP_NAME");
				    accountGroupID=accountGroupID.replace(" ","");
					statusForm.setAccountGroupId(accountGroupID);
				     
					  reqDate=rs.getString("REQUEST_DATE");
						String a[]=reqDate.split(" ");
						reqDate=a[0];
						String b[]=reqDate.split("-");
						reqDate=b[2]+"/"+b[1]+"/"+b[0];
						 statusForm.setRequestDate(reqDate);
					 
					 String viewType=rs.getString("VIEW_TYPE");
					 if(viewType.equalsIgnoreCase("1"))
					 {
					statusForm.setPurchaseView("Purchase View");
					 }
					 if(viewType.equalsIgnoreCase("2"))
					 {
					statusForm.setAccountView("Account View");
					 }
					 if(viewType.equalsIgnoreCase("3"))
					 {
							statusForm.setPurchaseView("Purchase View");
					statusForm.setAccountView("Account View");
					 }

					 statusForm.setTitle(rs.getString("TITLE"));
					 statusForm.setGstinNo(rs.getString("GSTIN_Number"));
					 statusForm.setName(rs.getString("NAME"));
					 statusForm.setAddress1(rs.getString("ADDRESS1"));
					statusForm.setAddress2(rs.getString("ADDRESS2"));
					 statusForm.setAddress3(rs.getString("ADDRESS3"));
					 statusForm.setAddress4(rs.getString("ADDRESS4"));
					statusForm.setCity(rs.getString("CITY"));
					 statusForm.setPinCode(rs.getString("PINCODE"));
				
					statusForm.setLandLineNo(rs.getString("LANDLINE_NO"));
					 statusForm.setMobileNo(rs.getString("MOBILE_NO"));
					 statusForm.setFaxNo(rs.getString("FAX_NO"));
					 statusForm.setEmailId(rs.getString("EMAIL_ID"));
					 statusForm.setCurrencyId(rs.getString("ISOCD"));
					 statusForm.setReConcillationActId(rs.getString("RECONCILIATION_ACCOUNT_NAME"));
					String elgTds=rs.getString("IS_ELIGIBLE_FOR_TDS");
					if(elgTds.equalsIgnoreCase("1"))
					{
						statusForm.setElgTds("YES");
					}
					if(elgTds.equalsIgnoreCase("0"))
					{
						statusForm.setElgTds("No");
					}
				
					 statusForm.setLstNo(rs.getString("LST_NO"));
					 statusForm.setTinNo(rs.getString("TIN_NO"));
					statusForm.setCstNo(rs.getString("CST_NO"));
					 statusForm.setPanNo(rs.getString("PAN_No"));
					 statusForm.setServiceTaxRegNo(rs.getString("Service_Tax_Registration_No"));
					 String isRegistVendor=rs.getString("IS_REGD_EXCISE_VENDOR");
					 	if(isRegistVendor.equalsIgnoreCase("1"))
						{
						 statusForm.setRegExciseVendor("Yes");
						 request.setAttribute("RegExciseVendor", "RegExciseVendor");
						}
						if(isRegistVendor.equalsIgnoreCase("0"))
						{
							
							
						statusForm.setRegExciseVendor("No");
						}
					 
					 statusForm.setEccNo(rs.getString("ECC_No"));
					 statusForm.setExciseRegNo(rs.getString("Excise_Reg_No"));
					 statusForm.setExciseRange(rs.getString("Excise_Range"));
					 statusForm.setCommissionerate(rs.getString("COMMISSIONERATE"));
					 statusForm.setExciseDivision(rs.getString("Excise_Division"));
					 statusForm.setAccountClerkId(rs.getString("ACC_CLERK_DESC"));
					 statusForm.setIsApprovedVendor(rs.getString("IS_APPROVED_VENDOR"));
					 String isApproveVendor=rs.getString("IS_APPROVED_VENDOR");
					if(isApproveVendor.equalsIgnoreCase("1"))
					{
						statusForm.setIsApprovedVendor("Yes");
					}	if(isApproveVendor.equalsIgnoreCase("0")){
						statusForm.setIsApprovedVendor("No");
					}
					 
				
				
					 String typeofVendor=rs.getString("Type_Of_Vendor");
					 if(typeofVendor.equalsIgnoreCase("I"))
						{												
						statusForm.setTypeOfVendor("IMPORTER");
						}
					 if(typeofVendor.equalsIgnoreCase("MD"))
						{												
						statusForm.setTypeOfVendor("DEPOT MANUFACTURER");
						}
					 if(typeofVendor.equalsIgnoreCase("M"))
						{												
						statusForm.setTypeOfVendor("MANUFACTURER");
						}
					 if(typeofVendor.equalsIgnoreCase("D"))
						{												
						statusForm.setTypeOfVendor("DEALER");
						}
					 if(typeofVendor.equalsIgnoreCase("FD"))
						{												
						statusForm.setTypeOfVendor("FIRST STAGE DEALER OF INDIGENOUS");
						}
					 if(typeofVendor.equalsIgnoreCase("SD"))
						{												
						statusForm.setTypeOfVendor("SECOND STAGE DEALER OF INDIGENOUS");
						}
					 String sapCodeno=rs.getString("SAP_CODE_NO");  
						if(sapCodeno!=null){ 
							statusForm.setSapCodeNo(sapCodeno);		
					String sapCodeExist=rs.getString("SAP_CODE_EXISTS");
					if(sapCodeExist.equalsIgnoreCase("1"))
					{
						statusForm.setSapCodeExists("True");
					}
					if(sapCodeExist.equalsIgnoreCase("0"))
						statusForm.setSapCodeExistsNo("True");
					String sapCreationDate=rs.getString("SAP_CREATION_DATE");
					String sapDate[]=sapCreationDate.split(" ");
					sapCreationDate=sapDate[0];
					String sapCode[]=sapCreationDate.split("-");
					sapCreationDate=sapCode[2]+"/"+sapCode[1]+"/"+sapCode[0];
					statusForm.setSapCreationDate(sapCreationDate);
					statusForm.setSapCreatedBy(rs.getString("SAP_CREATED_BY"));
					statusForm.setRequestedBy(rs.getString("REQUESTED_BY"));
						}
					
				}
				
				ArrayList listOfFiles=new ArrayList();
				String getUploadedFiles="select * from temp_vendor_documents where request_no='"+reqId+"'  ";
				ResultSet rsUploadFile=ad.selectQuery(getUploadedFiles);
				while(rsUploadFile.next())
				{
					VendorMasterRequestForm	vendorMasterRequestForm1=new VendorMasterRequestForm();
					vendorMasterRequestForm1.setFileName(rsUploadFile.getString("file_name"));
					vendorMasterRequestForm1.setFileId(rsUploadFile.getString("id"));
					vendorMasterRequestForm1.setFilepath("jsp/EMicro Files/ESS/sapMasterRequest/vendorDocuments/temp/"+rsUploadFile.getString("file_name"));
					listOfFiles.add(vendorMasterRequestForm1);
				}
				request.setAttribute("documentDetails", listOfFiles);
				
				//payment term
				String getVendorDetails4="select pay.PAYMENT_TERM_NAME from vendor_master_m as v,PAYMENT_TERM_M as pay	" +
						"where REQUEST_NO='"+reqId+"'and pay.PAYMENT_TERM_ID=v.PAYMENT_TERM_ID";
						
				ResultSet rs4=ad.selectQuery(getVendorDetails4);
				if(rs4.next())
				{
					statusForm.setPaymentTermId(rs4.getString("PAYMENT_TERM_NAME"));
				}
				
				//tds
				String getVendorDetails1="select tds.TDS_SECTION_DESC from vendor_master_m as v," +
						"TDS_SECTION_M as tds where REQUEST_NO='"+reqId+"' and tds.TDS_SECTION_ID=v.TDS_CODE";
						
				ResultSet rs1=ad.selectQuery(getVendorDetails1);
				if(rs1.next())
				{
					 statusForm.setTdsCode(rs1.getString("TDS_SECTION_DESC"));
				}
				
				//country
				String getVendorDetails2=" select cou.LANDX from vendor_master_m as v,Country as cou " +
						" where REQUEST_NO='"+reqId+"' and cou.LAND1=v.COUNTRY_ID ";
				
		ResultSet rs2=ad.selectQuery(getVendorDetails2);
		if(rs2.next())
		{
			statusForm.setCountry(rs2.getString("LANDX"));
		}
		//state
		String getVendorDetails3=" select sta.BEZEI from vendor_master_m as v,State as sta " +
				"where REQUEST_NO='"+reqId+"' and sta.BLAND=v.STATE";
		
ResultSet rs3=ad.selectQuery(getVendorDetails3);
if(rs3.next())
{
	statusForm.setState(rs3.getString("BEZEI"));
}
				
				
				
		}else{

			
			try{
				

				ArrayList accountGroupList=new ArrayList();
				ArrayList accountGroupLabelList=new ArrayList();
			 	ResultSet rs1 = ad.selectQuery("select ACCOUNT_GROUP_ID,ACCOUNT_GROUP_NAME from ACCOUNT_GROUP_M where active='True'");
		ArrayList subLinkIdList = new ArrayList();
		ArrayList subLinkValueList = new ArrayList();
		while(rs1.next()) {
			accountGroupList.add(rs1.getString("ACCOUNT_GROUP_ID"));
			accountGroupLabelList.add(rs1.getString("ACCOUNT_GROUP_NAME"));
		}
		statusForm.setAccountGroupList(accountGroupList);
		statusForm.setAccountGroupLabelList(accountGroupLabelList);
			 	 
			 	 
		ResultSet rs9 = ad.selectQuery("select * from Country");
		ArrayList countryList=new ArrayList();
		ArrayList countryLabelList=new ArrayList();
		
		while(rs9.next()) {
			countryList.add(rs9.getString("LAND1"));
			countryLabelList.add(rs9.getString("LAND1")+" - "+rs9.getString("LANDX"));
		}
		statusForm.setCountryList(countryList);
		statusForm.setCountryLabelList(countryLabelList);
		
		
		ResultSet rs5 = ad.selectQuery("select WAERS,ISOCD from Currency");
		ArrayList currencyList=new ArrayList();
		ArrayList currencyLabelList=new ArrayList();

		while(rs5.next()) {
			currencyList.add(rs5.getString("WAERS"));
			currencyLabelList.add(rs5.getString("ISOCD"));
		}
		statusForm.setCurrencyList(currencyList);
		statusForm.setCurrencyLabelList(currencyLabelList);
		
		
		ResultSet rs6 = ad.selectQuery("select RECONCILIATION_ACCOUNT_ID," +
				"RECONCILIATION_ACCOUNT_NAME from RECONCILIATION_ACCOUNT_M where ACTIVE='True' order by RECONCILIATION_ACCOUNT_ID");
		ArrayList reConcillationList=new ArrayList();
		ArrayList reConcillationLabelList=new ArrayList();
		
		
		while(rs6.next()) {
			reConcillationList.add(rs6.getString("RECONCILIATION_ACCOUNT_ID"));
			reConcillationLabelList.add(rs6.getString("RECONCILIATION_ACCOUNT_ID")+"-"+rs6.getString("RECONCILIATION_ACCOUNT_NAME"));
		}
		statusForm.setReConcillationList(reConcillationList);
		statusForm.setReConcillationLabelList(reConcillationLabelList);
		
		
		ResultSet rs7 = ad.selectQuery("select PAYMENT_TERM_ID," +
		"PAYMENT_TERM_NAME from PAYMENT_TERM_M where ACTIVE='True' order by PAYMENT_TERM_NAME");
		ArrayList paymentTermList=new ArrayList();
		ArrayList paymentTermLabelList=new ArrayList();
		
		while(rs7.next()) {
			paymentTermList.add(rs7.getString("PAYMENT_TERM_ID"));
			paymentTermLabelList.add(rs7.getString("PAYMENT_TERM_ID")+"-"+rs7.getString("PAYMENT_TERM_NAME"));
		}
		statusForm.setPaymentTermList(paymentTermList);
		statusForm.setPaymentTermLabelList(paymentTermLabelList);
		
		
		ResultSet rs8 = ad.selectQuery("select ACC_CLERK_ID," +
		"ACC_CLERK_DESC from ACC_CLERK_M where ACTIVE='True'");
		ArrayList accountClerkList=new ArrayList();
		ArrayList accountClerkLabelList=new ArrayList();
		
		while(rs8.next()) {
			accountClerkList.add(rs8.getString("ACC_CLERK_ID"));
			accountClerkLabelList.add(rs8.getString("ACC_CLERK_DESC"));
		}
		statusForm.setAccountClerkList(accountClerkList);
		statusForm.setAccountClerkLabelList(accountClerkLabelList);
		
		
		ResultSet rs11 = ad.selectQuery("select LOCID,LOCNAME from location");
		ArrayList locationList=new ArrayList();
		ArrayList locationLabelList=new ArrayList();
		
		while(rs11.next()) {
			locationList.add(rs11.getString("LOCID"));
			locationLabelList.add(rs11.getString("LOCID")+"-"+rs11.getString("LOCNAME"));
		}
		statusForm.setLocationIdList(locationList);
		statusForm.setLocationLabelList(locationLabelList);
		
		
		
		ResultSet rsTds = ad.selectQuery("select TDS_SECTION_ID,TDS_SECTION_DESC from TDS_SECTION_M where ACTIVE='True' ");
		ArrayList tdsIdList=new ArrayList();
		ArrayList tdsLabelList=new ArrayList();
		
		while(rsTds.next()) {
			tdsIdList.add(rsTds.getString("TDS_SECTION_ID"));
			tdsLabelList.add(rsTds.getString("TDS_SECTION_DESC"));
		}
		statusForm.setTdsIdList(tdsIdList);
		statusForm.setTdsLabelList(tdsLabelList);
		
		ArrayList venodreCode=new ArrayList();
		ArrayList vendorType=new ArrayList();
		ResultSet rsVendorType = ad.selectQuery("select V_CODE,V_LTXT from VENDOR_TYPE where active='True' ");
		while(rsVendorType.next()) {
			venodreCode.add(rsVendorType.getString("V_CODE"));
			vendorType.add(rsVendorType.getString("V_LTXT"));
		}
		
		statusForm.setRequestDate(EMicroUtils.getCurrentSysDate());
		
			
		
			String getVendorDetails="select * from vendor_master_m where REQUEST_NO='"+reqId+"'";
			ResultSet rs=ad.selectQuery(getVendorDetails);
			while(rs.next())
			{
				
				statusForm.setRequestNumber(rs.getString("REQUEST_NO"));
				
				statusForm.setLocationId(rs.getString("LOCATION_ID"));
			    String accountGroupID=rs.getString("ACCOUNT_GROUP_ID");
			    accountGroupID=accountGroupID.replace(" ","");
			    statusForm.setAccountGroupId(accountGroupID);
			     
				reqDate=rs.getString("REQUEST_DATE");
					String a[]=reqDate.split(" ");
					reqDate=a[0];
					String b[]=reqDate.split("-");
					reqDate=b[2]+"/"+b[1]+"/"+b[0];
					statusForm.setRequestDate(reqDate);
				 
				 String viewType=rs.getString("VIEW_TYPE");
				 if(viewType.equalsIgnoreCase("1"))
				 {
					 statusForm.setPurchaseView("On");

					 statusForm.setAccountView("Off");
				 }
				 if(viewType.equalsIgnoreCase("2")){
					 statusForm.setAccountView("On");
					 statusForm.setPurchaseView("Off");
				 }
				 if(viewType.equalsIgnoreCase("3")){
					 statusForm.setPurchaseView("On");
					 statusForm.setAccountView("On");
					 }
				 statusForm.setTitle(rs.getString("TITLE"));
				 statusForm.setGstinNo(rs.getString("GSTIN_Number"));
				 statusForm.setName(rs.getString("NAME"));
				 statusForm.setAddress1(rs.getString("ADDRESS1"));
				 statusForm.setAddress2(rs.getString("ADDRESS2"));
				 statusForm.setAddress3(rs.getString("ADDRESS3"));
				 statusForm.setAddress4(rs.getString("ADDRESS4"));
				 statusForm.setCity(rs.getString("CITY"));
				 statusForm.setPinCode(rs.getString("PINCODE"));
				 statusForm.setCountry(rs.getString("COUNTRY_ID"));
				String country=rs.getString("COUNTRY_ID");
				 statusForm.setState(rs.getString("STATE"));
				 request.setAttribute("States", "States");
				 statusForm.setLandLineNo(rs.getString("LANDLINE_NO"));
				 statusForm.setMobileNo(rs.getString("MOBILE_NO"));
				 statusForm.setFaxNo(rs.getString("FAX_NO"));
				 statusForm.setEmailId(rs.getString("EMAIL_ID"));
				 statusForm.setCurrencyId(rs.getString("CURRENCY_ID"));
				 statusForm.setReConcillationActId(rs.getString("RECONCILATION_ACT_ID"));
				String elgTds=rs.getString("IS_ELIGIBLE_FOR_TDS");
				if(elgTds.equalsIgnoreCase("1"))
				{
					statusForm.setElgTds("True");
				}
				if(elgTds.equalsIgnoreCase("0"))
				{
					statusForm.setElgTds("False");
				}
				statusForm.setTdsCode(rs.getString("TDS_CODE"));
				statusForm.setLstNo(rs.getString("LST_NO"));
				statusForm.setTinNo(rs.getString("TIN_NO"));
				statusForm.setCstNo(rs.getString("CST_NO"));
				statusForm.setPanNo(rs.getString("PAN_No"));
				statusForm.setServiceTaxRegNo(rs.getString("Service_Tax_Registration_No"));
				 String isRegistVendor=rs.getString("IS_REGD_EXCISE_VENDOR");
				 	if(isRegistVendor.equalsIgnoreCase("1"))
					{
				 		statusForm.setRegExciseVendor("True");
					 request.setAttribute("RegExciseVendor", "RegExciseVendor");
					}
					if(isRegistVendor.equalsIgnoreCase("0"))
					{
						
						
						statusForm.setRegExciseVendor("False");
					}
				 
					statusForm.setEccNo(rs.getString("ECC_No"));
					statusForm.setExciseRegNo(rs.getString("Excise_Reg_No"));
					statusForm.setExciseRange(rs.getString("Excise_Range"));
					statusForm.setCommissionerate(rs.getString("COMMISSIONERATE"));
					statusForm.setExciseDivision(rs.getString("Excise_Division"));
					statusForm.setPaymentTermId(rs.getString("PAYMENT_TERM_ID"));
					statusForm.setAccountClerkId(rs.getString("ACCOUNT_CLERK_ID"));
					statusForm.setIsApprovedVendor(rs.getString("IS_APPROVED_VENDOR"));
				 String isApproveVendor=rs.getString("IS_APPROVED_VENDOR");
				if(isApproveVendor.equalsIgnoreCase("1"))
				{
					statusForm.setIsApprovedVendor("True");
				}	if(isApproveVendor.equalsIgnoreCase("0")){
					statusForm.setIsApprovedVendor("False");
				}
				statusForm.setApproveType(rs.getString("Approve_Status"));
				statusForm.setTypeOfVendor(rs.getString("Type_Of_Vendor"));
			}
			
			ArrayList listOfFiles=new ArrayList();
			String getUploadedFiles="select * from temp_vendor_documents where request_no='"+reqId+"'  ";
			ResultSet rsUploadFile=ad.selectQuery(getUploadedFiles);
			while(rsUploadFile.next())
			{
				VendorMasterRequestForm	vendorMasterRequestForm1=new VendorMasterRequestForm();
				vendorMasterRequestForm1.setFileName(rsUploadFile.getString("file_name"));
				vendorMasterRequestForm1.setFileId(rsUploadFile.getString("id"));
				vendorMasterRequestForm1.setFilepath("jsp/EMicro Files/ESS/sapMasterRequest/vendorDocuments/temp/"+rsUploadFile.getString("file_name"));
				listOfFiles.add(vendorMasterRequestForm1);
			}
			request.setAttribute("documentDetails", listOfFiles);
			
			
			ResultSet rs4 = ad.selectQuery("select BLAND,BEZEI from State where LAND1='"+statusForm.getCountry()+"'");
			ArrayList stateList=new ArrayList();
			ArrayList stateLabelList=new ArrayList();
			
			while(rs4.next()) {
				stateList.add(rs4.getString("BLAND"));
				stateLabelList.add(rs4.getString("BEZEI"));
			}
			statusForm.setStateList(stateList);
			statusForm.setStateLabelList(stateLabelList);
			request.setAttribute("States", "States");
			
		
		
			
			
				
			}catch (Exception e) {
			e.printStackTrace();
			}
			
			
		
		}
  
		
		//
		
		//set ApproverDetails 
		checkStatus=0;int appStatus=0;
		LinkedList listApprers=new LinkedList();
		String getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
		"where mast.Location='"+location+"' AND  mast.Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mast.Approver_Id=emp.PERNR order by Priority";
		ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
		while(rsApprDetails.next())
		{
			checkStatus=1;
			ApprovalsForm apprvers=new ApprovalsForm();
			apprvers.setPriority(rsApprDetails.getString("Priority"));
			apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
			String empCode=rsApprDetails.getString("Approver_Id");
			String approveStatus="";
			String recordStatus="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
			"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
			"mast.Material_Type='"+matType+"' and all_r.type='"+matType+"' AND Material_Group='"+matGroup+"' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
			"or mast.Role='Creator') and mast.Approver_Id=emp.PERNR  group by mast.Priority,mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status," +
			"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
			ResultSet rsAppInfo=ad.selectQuery(recordStatus);
			while(rsAppInfo.next())
			{
				
				apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
				approveStatus=rsAppInfo.getString("Req_Status");
				if(approveStatus.equalsIgnoreCase(""))
				{
					apprvers.setApproveStatus("In Process");
				}
				if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
				{
					String approveDate=	rsAppInfo.getString("approved_date");
					
					String a[]=approveDate.split(" ");
					approveDate=a[0];
					String b[]=approveDate.split("-");
					approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
					
					apprvers.setDate(approveDate);
				}else{
					String rejectDate=	rsAppInfo.getString("rejected_date");
					
					String a[]=rejectDate.split(" ");
					rejectDate=a[0];
					String b[]=rejectDate.split("-");
					rejectDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
					apprvers.setDate(rejectDate);
					appStatus=1;
				}
			 comments=rsAppInfo.getString("Comments");
				if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
				{
					apprvers.setComments("");
				}else{
					apprvers.setComments(rsAppInfo.getString("Comments"));
				}
				
				
			}
			if(approveStatus.equalsIgnoreCase("") && appStatus==0)
			{
				apprvers.setApproveStatus("In Process");
			}
			apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
			listApprers.add(apprvers);
		}
		if(checkStatus==0)
		{
			getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
			"where mast.Location='"+location+"' AND  mast.Material_Type='"+matType+"' AND Material_Group='' and mast.Approver_Id=emp.PERNR order by Priority";
			rsApprDetails=ad.selectQuery(getApprDetails);
			while(rsApprDetails.next())
			{
				checkStatus=1;
				ApprovalsForm apprvers=new ApprovalsForm();
				apprvers.setPriority(rsApprDetails.getString("Priority"));
				apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
				String empCode=rsApprDetails.getString("Approver_Id");
				String approveStatus="";
				String recordStatus="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
				"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
				"mast.Material_Type='"+matType+"' AND Material_Group='' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
				"or mast.Role='Creator') and mast.Approver_Id=emp.PERNR  group by mast.Priority,mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status," +
				"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
				ResultSet rsAppInfo=ad.selectQuery(recordStatus);
				while(rsAppInfo.next())
				{
					apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
					approveStatus=rsAppInfo.getString("Req_Status");
					
					if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
					{
					String approveDate=	rsAppInfo.getString("approved_date");
					
					String a[]=approveDate.split(" ");
					approveDate=a[0];
					String b[]=approveDate.split("-");
					approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
					
					apprvers.setDate(approveDate);
					}else{
						String rejectDate=	rsAppInfo.getString("rejected_date");
						
						String a[]=rejectDate.split(" ");
						rejectDate=a[0];
						String b[]=rejectDate.split("-");
						rejectDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
						apprvers.setDate(rejectDate);
					}
					 comments=rsAppInfo.getString("Comments");
					if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
					{
						apprvers.setComments("");
					}else{
						apprvers.setComments(rsAppInfo.getString("Comments"));
					}
				}
				if(approveStatus.equalsIgnoreCase("") && appStatus==0)
				{
					apprvers.setApproveStatus("In Process");
				}
				apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
				listApprers.add(apprvers);
		}
		}
		request.setAttribute("approverDetails", listApprers);
		
		if(userRole.equalsIgnoreCase("User"))
		{
		return mapping.findForward("VendorMaster");
		}
		if(userRole.equalsIgnoreCase("Accounts"))
		{
		return mapping.findForward("VendorMaster_Account");
		}
		if(userRole.equalsIgnoreCase("Creator"))
		{
			dNow = new Date( );
			 ft = new SimpleDateFormat ("dd/MM/yyyy");
				 dateNow = ft.format(dNow);
				 statusForm.setSapCreationDate(dateNow);
				 statusForm.setSapCreatedBy(user.getEmployeeNo()+"-"+user.getFullName());
			
		return mapping.findForward("VendorMaster_Creator");
		}
		
}catch (Exception e) {
	e.printStackTrace();
}
	
		
		return mapping.findForward("leaveDetails");
	}
	
	public ActionForward statusChangeForServiceRequest(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response){
		EssDao ad=new EssDao();
		LinkedList list = new LinkedList();
		
		ApprovalsForm statusForm=(ApprovalsForm) form;
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		if(user==null){
			request.setAttribute("message","Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		String reqId = request.getParameter("reqId");
		MainDao exeQry = new MainDao();
		String reqType = statusForm.getReqRequstType();
		statusForm.setRequestType(reqType);
		String reqStatus = request.getParameter("status");
		String filterBy=statusForm.getSelectedFilter();
		statusForm.setSelectedFilter(filterBy);
	statusForm.setReqRequstType(reqType);
	int totalRecords=statusForm.getTotalRecords();//21
	int startRecord=statusForm.getStartRecord();//11
	int endRecord=statusForm.getEndRecord();	
	
	
	statusForm.setTotalRecords(totalRecords);
	statusForm.setStartRecord(startRecord);
	statusForm.setEndRecord(endRecord);
		String comments = statusForm.getRemark();
		
		LinkedList reqDetails = new LinkedList();
		reqDetails.add(0, reqId);
		reqDetails.add(1, reqType);
		//User Informtion
		String lcode = user.getPlantId();
		int user_Id = user.getId();
		String uName = user.getUserName();
		String appName = uName;
		int rowCount= 0;
		System.out.println(reqType);
		//updateStatus("Approved", reqType,reqId);
		//get the total Approvers
		rowCount = getCount("Approvers_Details", reqType);
		try{
		if(reqType.equalsIgnoreCase("Service Master")){
			Date dNow = new Date( );
			 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS");
				String dateNow = ft.format(dNow);
			String location="";
			String matGroup="";
			String approver="";
			String parllelAppr1="";
			String parllelAppr2="";
			String reqDate="";
			String reqesterID="";
			String requestNo="";
			String matType="";
			
			matGroup="";
			int priorityCout=0;
			int checkStatus=0;
			String userRole=statusForm.getUserRole();
			String locationID="";
			String matDetails="select loc.LOCATION_CODE,mat.plant_code from SERVICE_MASTER as mat,Location as loc  where mat.REQUEST_NO='"+reqId+"' and mat.plant_code=loc.LOCID";
			ResultSet rsDetails=ad.selectQuery(matDetails);
			while(rsDetails.next())
			{
				locationID=rsDetails.getString("plant_code");
				location=rsDetails.getString("LOCATION_CODE");
				matType="Service Master";
			}
			String test="";
			String getProrityCout="select max(Priority) from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"'";
			ResultSet rsCout=ad.selectQuery(getProrityCout);
			while(rsCout.next())
			{
				priorityCout=rsCout.getInt(1);
				test=rsCout.getString(1);
			}
			if(test==null){
				getProrityCout="select max(Priority) from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group=''";
				rsCout=ad.selectQuery(getProrityCout);
				while(rsCout.next())
				{
					priorityCout=rsCout.getInt(1);
				}
			}
			
			checkStatus=0;
			int apprverPriority=0;
			String getApproverDetails="select * from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and (Approver_Id='"+user.getEmployeeNo()+"' or Parllel_Approver_1='"+user.getEmployeeNo()+"' or Parllel_Approver_2='"+user.getEmployeeNo()+"') ";
			ResultSet rsAppDet=ad.selectQuery(getApproverDetails);
			while(rsAppDet.next())
			{
				checkStatus=1;
				apprverPriority=rsAppDet.getInt("Priority");
				approver=rsAppDet.getString("Approver_Id");
				parllelAppr1=rsAppDet.getString("Parllel_Approver_1");
				parllelAppr2=rsAppDet.getString("Parllel_Approver_2");
			}
			if(checkStatus==0)
			{
				getApproverDetails="select * from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' and (Approver_Id='"+user.getEmployeeNo()+"' or Parllel_Approver_1='"+user.getEmployeeNo()+"' or Parllel_Approver_2='"+user.getEmployeeNo()+"') ";
				rsAppDet=ad.selectQuery(getApproverDetails);
				while(rsAppDet.next())
				{
				
					apprverPriority=rsAppDet.getInt("Priority");
					approver=rsAppDet.getString("Approver_Id");
					parllelAppr1=rsAppDet.getString("Parllel_Approver_1");
					parllelAppr2=rsAppDet.getString("Parllel_Approver_2");
				}
			}
			
			if(reqStatus.equalsIgnoreCase("Approve")){
			

				if(priorityCout==apprverPriority)
				{
					//last approver creator
					String updateStatus="update All_Request set Req_Status='Completed',Comments='"+statusForm.getComments()+"',Last_Approver='"+approver+"'," +
					"Pending_Approver='',Approved_Persons='"+approver+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Service Master' and Pending_Approver='"+approver+"'";
				    int saveStatus=0;
				    saveStatus=ad.SqlExecuteUpdate(updateStatus);
				    
				    if(!(parllelAppr1.equalsIgnoreCase("")))
				    {
				    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Completed',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr1+"'," +
							"Pending_Approver='',Approved_Persons='"+parllelAppr1+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Service Master' and Pending_Approver='"+parllelAppr1+"'";
						    ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
				    }
				    if(!(parllelAppr2.equalsIgnoreCase("")))
				    {
				    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Completed',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr2+"'," +
							"Pending_Approver='',Approved_Persons='"+parllelAppr2+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Service Master' and Pending_Approver='"+parllelAppr2+"'";
						    ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
				    }	
				    if(saveStatus>0)
				    {
				    	
				    	String recordStatus="select * from All_Request where Req_Id='"+reqId+"' and Approved_Persons='"+user.getEmployeeNo()+"'";
				    	ResultSet rsRecDet=ad.selectQuery(recordStatus);
				    	while(rsRecDet.next())
				    	{
				    		requestNo=rsRecDet.getString("Requester_Name");
				    		reqDate=rsRecDet.getString("Req_Date");
				    		reqesterID=rsRecDet.getString("Requester_Name");
				    	}
				    	statusForm.setMessage2("Code completed against request no. '"+reqId+"' successfull");
				    	EMailer email=new EMailer();
						String approvermail="";
						//email.sendMailToMaterialCodeRequester(request, approvermail, reqId, "Service Master", user.getEmployeeNo(), reqesterID, "Approved");
				    	 String sapCreationDate=statusForm.getSapCreationDate();
						  String b[]=sapCreationDate.split("/");
						  sapCreationDate=b[2]+"-"+b[1]+"-"+b[0];
						  
						  String sapCodeExist="";
						  String sapCodeexistNo="";
						  
						  sapCodeExist=statusForm.getSapCodeExists();
						  sapCodeexistNo=statusForm.getSapCodeExistsNo();
						  if(sapCodeExist!=null){
							  statusForm.setSapCodeExists("true");
						  }
						  if(sapCodeexistNo!=null){
							  statusForm.setSapCodeExists("false");
						  }
						  
						  //
						  String query="UPDATE SERVICE_MASTER SET STORAGE_LOCATION='"+statusForm.getStorageLocation()+"'" +
								  ",SERVICE_DESCRIPTION='"+statusForm.getServiceDescription()+"',DETAILED_DESC='"+statusForm.getDetailedServiceDescription()+"'," +
								  "UOM='"+statusForm.getUom()+"',PURCHASE_GROUP='"+statusForm.getPurchaseGroup()+"',SERVICE_CATAGORY='"+statusForm.getServiceCatagory()+"'" +
								  ",SERVICE_GROUP='"+statusForm.getServiceGroup()+"',MACHINE_NAME='"+statusForm.getE_m_name()+"',APP_VALUE='"+statusForm.getApp_amount()+"'" +
								  ",WHERE_USED='"+statusForm.getWhereUsed()+"',PURPOSE='"+statusForm.getPurpose()+"',JUSTIFICATION='"+statusForm.getJustification()+"'," +
								  "VALUATION_CLASS='"+statusForm.getValuationClass()+"',app_satus='Completed',SAP_CODE_NO='"+statusForm.getSapCodeNo()+"',SAP_CODE_EXISTS='"+statusForm.getSapCodeExists()+"',SAP_CREATION_DATE='"+sapCreationDate+"',SAP_CREATED_BY='"+statusForm.getSapCreatedBy()+"',last_approver='"+user.getFullName()+"',pending_approver='No',rejected_flag='',SAC_Code='"+statusForm.getSacCode()+"' WHERE REQUEST_NO="+reqId+"";
								  int updateMateStatus=ad.SqlExecuteUpdate(query);
								  
									email.sendMailToMaterialCodeRequester(request, approvermail, reqId, "Service Master", user.getEmployeeNo(), reqesterID, "Approved");
					  String currentdate=EMicroUtils.getCurrentSysDate();
					  String a[]=currentdate.split("/");
					  currentdate=a[2]+"-"+a[1]+"-"+a[0]; 
						  String saveinHistory="INSERT INTO SERVICE_MASTER_HISTORY(PLANT_CODE,request_date,STORAGE_LOCATION,SERVICE_DESCRIPTION,DETAILED_DESC," +
								  "UOM,PURCHASE_GROUP,SERVICE_CATAGORY,SERVICE_GROUP,MACHINE_NAME,APP_VALUE,WHERE_USED,PURPOSE,JUSTIFICATION,Attachment," +
								  "VALUATION_CLASS,APP_SATUS,REQUEST_NO,CREATED_DATE,CREATED_BY,Role,SAC_Code)VALUES('"+locationID+"','"+statusForm.getRequestDate()+"','"+statusForm.getStorageLocation()+"','"+statusForm.getServiceDescription()+"'," +
								  "'"+statusForm.getDetailedServiceDescription()+"','"+statusForm.getUom()+"','"+statusForm.getPurchaseGroup()+"','"+statusForm.getServiceCatagory()+"',"+
								  "'"+statusForm.getServiceGroup()+"','"+statusForm.getE_m_name()+"','"+statusForm.getApp_amount()+"','"+statusForm.getWhereUsed()+"','"+statusForm.getPurpose()+"','"+statusForm.getJustification()+"'," +
								  "'"+statusForm.getSfile()+"','"+statusForm.getValuationClass()+"','Created','"+reqId+"','"+currentdate+"','"+user.getEmployeeNo()+"','Creator','"+statusForm.getSacCode()+"')";
								  ad.SqlExecuteUpdate(saveinHistory);	  
						  String requestDate="";
						  String getRequestDt="select * from SERVICE_MASTER where REQUEST_NO='"+reqId+"'"	;	
			ResultSet rsReqDt=ad.selectQuery(getRequestDt);
			while(rsReqDt.next()){
				requestDate=rsReqDt.getString("request_date");
			}
			 if(statusForm.getSapCodeExists().equals("false")){				  
		String insertSAPCode="INSERT INTO SERVICE_CODES (request_no,service_description,detailed_desc,"
		+ "justification,SAP_CODE_NO,SAP_CREATION_DATE,request_date,service_catagory) values('"+reqId+"',"
		+ "'"+statusForm.getServiceDescription()+"','"+statusForm.getDetailedServiceDescription()+"','"+statusForm.getJustification()+"',"
		+ "'"+statusForm.getSapCodeNo()+"','"+sapCreationDate+"','"+requestDate+"','"+statusForm.getServiceCatagory()+"')";
		ad.selectQuery(insertSAPCode);
			 }
						
				    }
				}else{
				    String nextAppr="";
				    String nextPar1="";
				    String nextPar2="";
				    checkStatus=0;
					String getNextApprover="select Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and Priority='"+(apprverPriority+1)+"'";
					ResultSet rsNextApp=ad.selectQuery(getNextApprover);
					while(rsNextApp.next())
					{  
						checkStatus=1;
						nextAppr=rsNextApp.getString("Approver_Id");
						nextPar1=rsNextApp.getString("Parllel_Approver_1");
						nextPar2=rsNextApp.getString("Parllel_Approver_2");
					}
					if(checkStatus==0)
					{
						getNextApprover="select Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' and Priority='"+(apprverPriority+1)+"'";
						rsNextApp=ad.selectQuery(getNextApprover);
						while(rsNextApp.next())
						{  
							checkStatus=1;
							nextAppr=rsNextApp.getString("Approver_Id");
							nextPar1=rsNextApp.getString("Parllel_Approver_1");
							nextPar2=rsNextApp.getString("Parllel_Approver_2");
						}
					}
				String empNo=user.getEmployeeNo();
					if(empNo.equalsIgnoreCase(approver))
					{
						String updateStatus="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+user.getEmployeeNo()+"'," +
						"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Service Master' and Pending_Approver='"+user.getEmployeeNo()+"'";
					    int saveStatus=0;
					    saveStatus=ad.SqlExecuteUpdate(updateStatus);
					    
					    if(!(parllelAppr1.equalsIgnoreCase("")))
					    {
					    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr1+"'," +
								"Pending_Approver='',Approved_Persons='"+parllelAppr1+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Service Master' and Pending_Approver='"+parllelAppr1+"'";
							    ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
					    }
					    if(!(parllelAppr2.equalsIgnoreCase("")))
					    {
					    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr2+"'," +
								"Pending_Approver='',Approved_Persons='"+parllelAppr2+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Service Master' and Pending_Approver='"+parllelAppr2+"'";
							    ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
					    }
					    if(saveStatus>0)
					    {
					    	 statusForm.setMessage2("Request Is Approved Successfully");
					    	 
					    	String recordStatus="select * from All_Request where Req_Id='"+reqId+"' and Approved_Persons='"+user.getEmployeeNo()+"'";
					    	ResultSet rsRecDet=ad.selectQuery(recordStatus);
					    	while(rsRecDet.next())
					    	{
					    		requestNo=rsRecDet.getString("Requester_Name");
					    		reqDate=rsRecDet.getString("Req_Date");
					    		reqesterID=rsRecDet.getString("Requester_Name");
					    	}
					    	System.out.println(userRole);
					    	if(userRole.equalsIgnoreCase("Accounts"))
					    	{
					    	//update valuation class
					    	String updateMaterial="update SERVICE_MASTER set VALUATION_CLASS='"+statusForm.getValuationClass()+"',last_approver='"+user.getFullName()+"',pending_approver='"+nextAppr+"',app_satus='In Process' where REQUEST_NO='"+reqId+"'";
					    	int check=ad.SqlExecuteUpdate(updateMaterial);
					    	
					    		
					    		
					    	}
					    	
					    	//update last Approver and Pending Approver
					    	//GET pending approvers
					    	if(!(userRole.equalsIgnoreCase("Creator")))
					    	{
					    	checkStatus=0;
					    	String pendingApprovers="";
					    	String nextApprovers="";
					    	getNextApprover="select emp.EMP_FULLNAME, Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers as mat,emp_official_info AS emp where " +
							"Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
					ResultSet rsPendignApp=ad.selectQuery(getNextApprover);
					while(rsPendignApp.next())
					{  
						checkStatus=1;
						pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
					}
					if(checkStatus==0)
					{
						getNextApprover="select emp.EMP_FULLNAME, Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers as mat,emp_official_info AS emp where " +
								"Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
						rsPendignApp=ad.selectQuery(getNextApprover);
						while(rsPendignApp.next())
						{  
							checkStatus=1;
							pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
						}
					}
							if(!(pendingApprovers.equalsIgnoreCase(""))){
								pendingApprovers=pendingApprovers.substring(0, (pendingApprovers.length()-2));	
							}
							
							String updateMaterial="update SERVICE_MASTER set last_approver='"+user.getFullName()+"',pending_approver='"+pendingApprovers+"',app_satus='In Process' where REQUEST_NO='"+reqId+"'";
					    	int check=ad.SqlExecuteUpdate(updateMaterial);
					    	}
					    	// insert record to next approver
					    	String insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
					    	" values('"+reqId+"','Service Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextAppr+"','No','"+reqesterID+"','','"+matType+"')";
					    	ad.SqlExecuteUpdate(insertAllRequest);
					    	ad.connClose();
					    	
					    	EMailer email = new EMailer();
							String approvermail="";
							 email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Service Master", nextAppr, reqesterID);
					    	if(!(nextPar1.equalsIgnoreCase(""))){
					    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
						    	" values('"+reqId+"','Service Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar1+"','No','"+reqesterID+"','','"+matType+"')";
						    	ad.SqlExecuteUpdate(insertAllRequest);
						    	ad.connClose();
						    	 email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Service Master", nextPar1, reqesterID);
					    	}
					    	if(!(nextPar2.equalsIgnoreCase(""))){
					    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
						    	" values('"+reqId+"','Service Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar2+"','No','"+reqesterID+"','','"+matType+"')";
						    	ad.SqlExecuteUpdate(insertAllRequest);
						    	ad.connClose();
						    	 email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Service Master", nextPar2, reqesterID);
					    	}
					    	
					    }else{
					    	statusForm.setMessage("Error..Request Is Not Approved");
					    }
						
					}if(!(parllelAppr1.equalsIgnoreCase(""))){
						
						if(empNo.equalsIgnoreCase(parllelAppr1)){
							String updateStatus="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+user.getEmployeeNo()+"'," +
							"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Service Master' and Pending_Approver='"+user.getEmployeeNo()+"'";
						    int saveStatus=0;
						    saveStatus=ad.SqlExecuteUpdate(updateStatus);
						    
						    String updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+approver+"'," +
							"Pending_Approver='',Approved_Persons='"+approver+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Service Master' and Pending_Approver='"+approver+"'";
						    ad.SqlExecuteUpdate(updateStatusForApprover); 
						    
						    if(!(parllelAppr2.equalsIgnoreCase("")))
						    {
						    	  updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr2+"'," +
									"Pending_Approver='',Approved_Persons='"+parllelAppr2+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Service Master' and Pending_Approver='"+parllelAppr2+"'";
								    ad.SqlExecuteUpdate(updateStatusForApprover); 
						    }
						   
						    if(saveStatus>0)
						    {
						    	statusForm.setMessage2("Request Is Approved Successfully");
						    	String updateMaterial="update SERVICE_MASTER set app_satus='In Process' where REQUEST_NO='"+reqId+"'";
						    	int check=ad.SqlExecuteUpdate(updateMaterial);
						    	
						    	String recordStatus="select * from All_Request where Req_Id='"+reqId+"' and Approved_Persons='"+user.getEmployeeNo()+"'";
						    	ResultSet rsRecDet=ad.selectQuery(recordStatus);
						    	while(rsRecDet.next())
						    	{
						    		requestNo=rsRecDet.getString("Requester_Name");
						    		reqDate=rsRecDet.getString("Req_Date");
						    		reqesterID=rsRecDet.getString("Requester_Name");
						    	}
						    	
						    	// insert record to next approver
						    	String insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
						    	" values('"+reqId+"','Service Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextAppr+"','No','"+reqesterID+"','','"+matType+"')";
						    	ad.SqlExecuteUpdate(insertAllRequest);
						    	EMailer email = new EMailer();
								String approvermail="";
								 email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Service Master", nextAppr, reqesterID);
						    	if(!(nextPar1.equalsIgnoreCase(""))){
						    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
							    	" values('"+reqId+"','Service Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar1+"','No','"+reqesterID+"','','"+matType+"')";
							    	ad.SqlExecuteUpdate(insertAllRequest);
							    	
							    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Service Master", nextPar1, reqesterID);
						    	}
						    	if(!(nextPar2.equalsIgnoreCase(""))){
						    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
							    	" values('"+reqId+"','Service Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar2+"','No','"+reqesterID+"','','"+matType+"')";
							    	ad.SqlExecuteUpdate(insertAllRequest);
							    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Service Master", nextPar2, reqesterID);
						    	}
						    	
						    	
						    }else{
						    	statusForm.setMessage("Error..Request Is Not Approved");
						    }
							
						}
						
						
					}
					if(!(parllelAppr2.equalsIgnoreCase(""))){

						
						if(empNo.equalsIgnoreCase(parllelAppr2)){
							String updateStatus="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+user.getEmployeeNo()+"'," +
							"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Service Master' and Pending_Approver='"+user.getEmployeeNo()+"'";
						    int saveStatus=0;
						    saveStatus=ad.SqlExecuteUpdate(updateStatus);
						    String updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+approver+"'," +
							"Pending_Approver='',Approved_Persons='"+approver+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Service Master' and Pending_Approver='"+approver+"'";
						    ad.SqlExecuteUpdate(updateStatusForApprover); 
						    
						    if(!(parllelAppr1.equalsIgnoreCase("")))
						    {
						    	  updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr1+"'," +
									"Pending_Approver='',Approved_Persons='"+parllelAppr1+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Service Master' and Pending_Approver='"+parllelAppr1+"'";
								    ad.SqlExecuteUpdate(updateStatusForApprover); 
						    }
						    if(saveStatus>0)
						    {
						    	String updateMaterial="update SERVICE_MASTER set app_satus='In Process' where REQUEST_NO='"+reqId+"'";
						    	int check=ad.SqlExecuteUpdate(updateMaterial);
						    	
						    	String recordStatus="select * from All_Request where Req_Id='"+reqId+"' and Approved_Persons='"+user.getEmployeeNo()+"'";
						    	ResultSet rsRecDet=ad.selectQuery(recordStatus);
						    	while(rsRecDet.next())
						    	{
						    		requestNo=rsRecDet.getString("Requester_Name");
						    		reqDate=rsRecDet.getString("Req_Date");
						    		reqesterID=rsRecDet.getString("Requester_Name");
						    	}
						    	
						    	// insert record to next approver
						    	String insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
						    	" values('"+reqId+"','Service Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextAppr+"','No','"+reqesterID+"','','"+matType+"')";
						    	ad.SqlExecuteUpdate(insertAllRequest);
						    	EMailer email = new EMailer();
								String approvermail="";
								 email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Service Master", nextAppr, reqesterID);
						    	if(!(nextPar1.equalsIgnoreCase(""))){
						    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
							    	" values('"+reqId+"','Service Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar1+"','No','"+reqesterID+"','','"+matType+"')";
							    	ad.SqlExecuteUpdate(insertAllRequest);
							    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Service Master", nextPar1, reqesterID);
						    	}
						    	if(!(nextPar2.equalsIgnoreCase(""))){
						    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
							    	" values('"+reqId+"','Service Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar2+"','No','"+reqesterID+"','','"+matType+"')";
							    	ad.SqlExecuteUpdate(insertAllRequest);
							    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Service Master", nextPar2, reqesterID);
						    	}
						    	
						    	
						    }else{
						    	statusForm.setMessage("Error..Request Is Not Approved");
						    }
							
						}
					}
			     
				}
					
				//set reject buttons  	
					
				
					
			
					
				
				
				
			}else{

				String updateStatus="update All_Request set Req_Status='Rejected',Comments='"+statusForm.getComments()+"',Last_Approver='"+approver+"'," +
				"Pending_Approver='',Approved_Persons='"+approver+"',rejected_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Service Master' and Pending_Approver='"+approver+"'";
			    int saveStatus=0;
			    saveStatus=ad.SqlExecuteUpdate(updateStatus);
			    if(!(parllelAppr1.equalsIgnoreCase("")))
			    {
			    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Rejected',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr1+"'," +
						"Pending_Approver='',Approved_Persons='"+parllelAppr1+"',rejected_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Service Master' and Pending_Approver='"+parllelAppr1+"'";
			    	 saveStatus=ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
			    }
			    if(!(parllelAppr2.equalsIgnoreCase("")))
			    {
			    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Rejected',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr2+"'," +
						"Pending_Approver='',Approved_Persons='"+parllelAppr2+"',rejected_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Service Master' and Pending_Approver='"+parllelAppr2+"'";
			    	 saveStatus=ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
			    }
				if(saveStatus>0){
					statusForm.setMessage2("Request has been rejected successfully");
					
					String recordStatus="select * from All_Request where Req_Id='"+reqId+"' and Approved_Persons='"+user.getEmployeeNo()+"'";
			    	ResultSet rsRecDet=ad.selectQuery(recordStatus);
			    	while(rsRecDet.next())
			    	{
			    		requestNo=rsRecDet.getString("Requester_Name");
			    		reqDate=rsRecDet.getString("Req_Date");
			    		reqesterID=rsRecDet.getString("Requester_Name");
			    	}
					
					
					String updateMaterial="update SERVICE_MASTER set app_satus='Rejected',rejected_flag='',last_approver='"+user.getFullName()+"',pending_approver='No'  where request_no='"+reqId+"'";
					ad.SqlExecuteUpdate(updateMaterial);
					 ad.connClose();
					EMailer email=new EMailer();
					String approvermail="";
					email.sendMailToMaterialCodeRequester(request, approvermail, reqId, "Service Master", user.getEmployeeNo(), reqesterID, "Rejected");
			
				}
				if(priorityCout==apprverPriority){
					
					
			    	 String sapCreationDate=statusForm.getSapCreationDate();
					  String b[]=sapCreationDate.split("/");
					  sapCreationDate=b[2]+"-"+b[1]+"-"+b[0];
					  
					  String sapCodeExist="";
					  String sapCodeexistNo="";
					  
					  sapCodeExist=statusForm.getSapCodeExists();
					  sapCodeexistNo=statusForm.getSapCodeExistsNo();
					  if(sapCodeExist!=null){
						  statusForm.setSapCodeExists("true");
					  }
					  if(sapCodeexistNo!=null){
						  statusForm.setSapCodeExists("false");
					  }
					
					  
					  //
					  String query="UPDATE SERVICE_MASTER SET STORAGE_LOCATION='"+statusForm.getStorageLocation()+"'" +
						",SERVICE_DESCRIPTION='"+statusForm.getServiceDescription()+"',DETAILED_DESC='"+statusForm.getDetailedServiceDescription()+"'," +
				"UOM='"+statusForm.getUom()+"',PURCHASE_GROUP='"+statusForm.getPurchaseGroup()+"',SERVICE_CATAGORY='"+statusForm.getServiceCatagory()+"'" +
						",SERVICE_GROUP='"+statusForm.getServiceGroup()+"',MACHINE_NAME='"+statusForm.getE_m_name()+"',APP_VALUE='"+statusForm.getApp_amount()+"'" +
								",WHERE_USED='"+statusForm.getWhereUsed()+"',PURPOSE='"+statusForm.getPurpose()+"',JUSTIFICATION='"+statusForm.getJustification()+"'," +
							"VALUATION_CLASS='"+statusForm.getValuationClass()+"',APP_SATUS='Rejected',last_approver='"+user.getFullName()+"',pending_approver='No' WHERE REQUEST_NO="+reqId+"";
					  int updateMateStatus=ad.SqlExecuteUpdate(query);
					
				}
				
			
			}
			//reset values
			if(userRole.equalsIgnoreCase("User"))
			{

				String query="select ser.SAC_Code,ser.request_date,loc.LOCNAME,ser.service_description,ser.detailed_desc,u.LTXT," +
				"pur.PURCHASE_GROUP_DESC,ser.service_catagory,se.STXT,ser.machine_name,ser.app_value,ser.justification," +
				"val.VALUATION_DESC,ser.attachment from SERVICE_MASTER as ser,Location as loc,UNIT_MESUREMENT as u," +
				"PURCHASE_GROUP as pur, SERVICE_GROUP as se,VALUATION_CLASS as val where REQUEST_NO='"+reqId+"' and	" +
				"loc.LOCID=ser.plant_code and u.UNIT_OF_MEAS_ID=ser.uom and pur.PURCHASE_GROUP_ID=ser.purchase_group " +
				"and se.group_id=ser.service_group and val.VALUATION_ID=ser.valuation_class";
				ResultSet rs=ad.selectQuery(query);
				if(rs.next()){

					statusForm.setSacCode(rs.getString("SAC_Code"));
					statusForm.setRequestNo(reqId);
					statusForm.setRequestNumber(reqId);
					statusForm.setReqMaterialGroup("");
					statusForm.setLocationId(rs.getString("LOCNAME"));
					statusForm.setPlantCode(rs.getString("LOCNAME"));
					statusForm.setRequestDate(rs.getString("request_date"));
					statusForm.setServiceDescription(rs.getString("service_description"));
					statusForm.setDetailedServiceDescription(rs.getString("detailed_desc"));
					statusForm.setUom(rs.getString("LTXT"));
					statusForm.setPurchaseGroup(rs.getString("PURCHASE_GROUP_DESC"));
					String sercat=rs.getString("service_catagory");
					
					
					
					if(sercat.equalsIgnoreCase("ZITA"))
					{
						statusForm.setServiceCatagory("ZITA- AMC-IT");
						
					}
					if(sercat.equalsIgnoreCase("ZAMC"))
					{
						statusForm.setServiceCatagory("ZAMC- Annual maintainence");
						
					}
					if(sercat.equalsIgnoreCase("ZCLB"))
					{
						statusForm.setServiceCatagory("ZCLB- Calibration");
						
					}
					if(sercat.equalsIgnoreCase("ZCIV"))
					{
						statusForm.setServiceCatagory("ZCIV- Civil works");
						
					}
					if(sercat.equalsIgnoreCase("ZMNT"))
					{
						statusForm.setServiceCatagory("ZMNT- Maintainence");
						
					}
					if(sercat.equalsIgnoreCase("ZITM"))
					{
						statusForm.setServiceCatagory("ZITM-MAINAINENCE-IT");
						
					}
					if(sercat.equalsIgnoreCase("ZMKT"))
					{
						statusForm.setServiceCatagory("ZMKT- Marketing");
						
					}
					if(sercat.equalsIgnoreCase("ZTST"))
					{
						statusForm.setServiceCatagory("ZTST- Testing&Analysis");
						
					}
					if(sercat.equalsIgnoreCase("ZTRC"))
					{
						statusForm.setServiceCatagory("ZTRC- Training&Recruitment");
						
					}

					
					
					statusForm.setServiceGroup(rs.getString("STXT"));
					statusForm.setE_m_name(rs.getString("machine_name"));
					statusForm.setApp_amount(rs.getString("app_value"));
				
					statusForm.setJustification(rs.getString("justification"));
					statusForm.setValuationClass(rs.getString("VALUATION_DESC"));
					
						
															
				
				
			
				
				}
				
				String query_file="select file_name from service_documents where request_no='"+reqId+"'";
				ArrayList documentDetails=new ArrayList();
				ResultSet rs_file=ad.selectQuery(query_file);
				try{
				while(rs_file.next()){
					ApprovalsForm sf=new ApprovalsForm();
					sf.setSfile(rs_file.getString("file_name"));
					sf.setFilepath("jsp/EMicro Files/ESS/sapMasterRequest/serviceMaster/UploadedFiles/"+rs_file.getString("file_name")+"");
					documentDetails.add(sf);
				}
				request.setAttribute("documentDetails", documentDetails);
				}
				catch(Exception e){
					e.printStackTrace();
				}
				
				
			
				
			}else{

				LinkedList valuationClassID=new LinkedList();
				LinkedList valuationClassName=new LinkedList();
				String getValuation="select * from VALUATION_CLASS ";
				ResultSet rsValuation=ad.selectQuery(getValuation);
				while(rsValuation.next())
				{
					valuationClassID.add(rsValuation.getString("VALUATION_ID"));
					valuationClassName.add(rsValuation.getString("VALUATION_ID")+" - "+rsValuation.getString("VALUATION_DESC"));
				}
				statusForm.setValuationClassID(valuationClassID);
				statusForm.setValuationClassName(valuationClassName);
			
				ResultSet rs11 = ad.selectQuery("select * from location");
				ArrayList locationList=new ArrayList();
				ArrayList locationLabelList=new ArrayList();
				
				while(rs11.next()) {
					locationList.add(rs11.getString("LOCID"));
					locationLabelList.add(rs11.getString("LOCATION_CODE")+" - "+rs11.getString("LOCNAME"));
				}
				statusForm.setLocationIdList(locationList);
				statusForm.setLocationLabelList(locationLabelList);
				
				LinkedList unitOfMeasIdList=new LinkedList();
				LinkedList unitOfMeasIdValues=new LinkedList();
				
				String getunitMesurement="select * from UNIT_MESUREMENT";
				ResultSet rsUnit=ad.selectQuery(getunitMesurement);
				while(rsUnit.next())
				{
					unitOfMeasIdList.add(rsUnit.getString("UNIT_OF_MEAS_ID"));
					unitOfMeasIdValues.add(rsUnit.getString("UNIT_OF_MEAS_ID")+" - "+rsUnit.getString("LTXT"));
				}
				statusForm.setUnitOfMeasIdList(unitOfMeasIdList);
				statusForm.setUnitOfMeasIdValues(unitOfMeasIdValues);
				
				LinkedList puchaseGroupIdList=new LinkedList();
				LinkedList puchaseGroupIdValues=new LinkedList();
				
				String getPurchaseGroup="select * from PURCHASE_GROUP";
				ResultSet rsPurchaseGroup=ad.selectQuery(getPurchaseGroup);
				while(rsPurchaseGroup.next())
				{
					puchaseGroupIdList.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID"));
					puchaseGroupIdValues.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID")+" - "+rsPurchaseGroup.getString("PURCHASE_GROUP_DESC"));
				}
				statusForm.setPuchaseGroupIdList(puchaseGroupIdList);
				statusForm.setPuchaseGroupIdValues(puchaseGroupIdValues);
				
				LinkedList serviceGroupID=new LinkedList();
				LinkedList serviceGroupValues=new LinkedList();
				
				String getServiceGroup="select * from SERVICE_GROUP";
				ResultSet rsServiceGroup=ad.selectQuery(getServiceGroup);
				while(rsServiceGroup.next())
				{
					serviceGroupID.add(rsServiceGroup.getString("group_id"));
					serviceGroupValues.add(rsServiceGroup.getString("group_id")+" - "+rsServiceGroup.getString("STXT"));
				}
				statusForm.setServiceGroupID(serviceGroupID);
				statusForm.setServiceGroupValues(serviceGroupValues);
				
				
				
				LinkedList uid=new LinkedList();
				LinkedList uname=new LinkedList();
				String query2="select * from UNIT_MESUREMENT";
				ResultSet r1=ad.selectQuery(query2);
				try{
				while(r1.next()){
					ApprovalsForm sf=new ApprovalsForm();
					//uid.add(r1.getString("unit_of_meas_id"));
					sf.setU_id(r1.getString("UNIT_OF_MEAS_ID"));
					sf.setU_label((r1.getString("UNIT_OF_MEAS_ID")+"-"+r1.getString("LTXT")));
					uid.add(sf);
				}
				//sform.setUomId(uid);
				statusForm.setUomLabel(uid);
				}
				catch(Exception e){
					e.printStackTrace();
				}
				
				LinkedList p_label=new LinkedList();
				LinkedList p_id=new LinkedList();
				String query3="select * from PURCHASE_GROUP";
				ResultSet r2=ad.selectQuery(query3);
				try{
					while(r2.next()){
						ApprovalsForm sf=new ApprovalsForm();
						sf.setP_id((r2.getString("PURCHASE_GROUP_ID")));
					     sf.setP_all((r2.getString("PURCHASE_GROUP_ID")+"-"+r2.getString("PURCHASE_GROUP_DESC")));
						//p_label.add(sf);
					     p_id.add(sf);
					}
					
					statusForm.setPlabel(p_id);
					//sform.setPid(p_id);
				}
				catch(Exception e){
					e.printStackTrace();
				}
				LinkedList vid=new LinkedList();
				LinkedList vlabel=new LinkedList();
				String query4="select * from valuation_class";
				ResultSet r3=ad.selectQuery(query4);
				try{
					while(r3.next()){
						vid.add(r3.getString("VALUATION_ID"));
						vlabel.add(r3.getString("VALUATION_DESC"));
					}
					statusForm.setVid(vid);
					statusForm.setVlabel(vlabel);
				}
				catch(Exception e){
					e.printStackTrace();
				}
				LinkedList pl_id=new LinkedList();
				LinkedList pl_all=new LinkedList();
				String query5="select * from location";
				ResultSet r4=ad.selectQuery(query5);
				try{
					while(r4.next()){
						ApprovalsForm sf=new ApprovalsForm();
						pl_id.add(r4.getString("LOCATION_CODE"));
						pl_all.add(r4.getString("LOCATION_CODE")+"-"+r4.getString("LOCNAME"));
						pl_id.add(sf);
					}
					statusForm.setPcode(pl_id);
				}
				catch(Exception e){
					e.printStackTrace();
				}
				
				LinkedList sg_label=new LinkedList();
				String query6="select * from MATERIAL_GROUP";
				ResultSet r5=ad.selectQuery(query6);
				try{
					while(r5.next()){
						ApprovalsForm sf=new ApprovalsForm();
						sf.setService_id(r5.getString("material_group_id"));
						sf.setService_label(r5.getString("material_group_id")+"-"+r5.getString("STXT"));
						sg_label.add(sf);
					}
					statusForm.setSgroupLabel(sg_label);
				}
				catch(Exception e){
					e.printStackTrace();
				}
				String query_file="select file_name from service_documents where request_no='"+reqId+"'";
				ArrayList documentDetails=new ArrayList();
				ResultSet rs_file=ad.selectQuery(query_file);
				try{
				while(rs_file.next()){
					ApprovalsForm sf=new ApprovalsForm();
					sf.setSfile(rs_file.getString("file_name"));
					sf.setFilepath("jsp/EMicro Files/ESS/sapMasterRequest/serviceMaster/UploadedFiles/"+rs_file.getString("file_name")+"");
					documentDetails.add(sf);
				}
				
				
				}
				catch(Exception e){
					e.printStackTrace();
				}
				request.setAttribute("documentDetails", documentDetails);
				
				String query="select * from SERVICE_MASTER where REQUEST_NO="+reqId+"";
				System.out.println(query);
				try{
				ResultSet rs=ad.selectQuery(query);
				if(rs.next()){

					statusForm.setRequestNo(reqId);
					
					statusForm.setSacCode(rs.getString("SAC_Code"));
					statusForm.setPlantCode(rs.getString("plant_code"));
					statusForm.setStorageLocation(rs.getString("storage_location"));
					statusForm.setServiceDescription(rs.getString("service_description"));
					statusForm.setDetailedServiceDescription(rs.getString("detailed_desc"));
					statusForm.setUom(rs.getString("uom"));
					statusForm.setPurchaseGroup(rs.getString("purchase_group"));
					statusForm.setServiceCatagory(rs.getString("service_catagory"));
					statusForm.setServiceGroup(rs.getString("service_group"));
					statusForm.setE_m_name(rs.getString("machine_name"));
					statusForm.setApp_amount(rs.getString("app_value"));
					statusForm.setWhereUsed(rs.getString("where_used"));
					statusForm.setPurpose(rs.getString("purpose"));
					statusForm.setJustification(rs.getString("justification"));
					statusForm.setValuationClass(rs.getString("valuation_class"));
					String sapCodeno=rs.getString("SAP_CODE_NO");
					if(sapCodeno!=null){
						statusForm.setSapCodeNo(sapCodeno);
				String sapCodeExist=rs.getString("SAP_CODE_EXISTS");
				if(sapCodeExist.equalsIgnoreCase("1"))
				{
					statusForm.setSapCodeExists("True");
				}
				if(sapCodeExist.equalsIgnoreCase("0"))
					statusForm.setSapCodeExists("False");
				String sapCreationDate=rs.getString("SAP_CREATION_DATE");
				String sapDate[]=sapCreationDate.split(" ");
				sapCreationDate=sapDate[0];
				String sapCode[]=sapCreationDate.split("-");
				sapCreationDate=sapCode[2]+"/"+sapCode[1]+"/"+sapCode[0];
				statusForm.setSapCreationDate(sapCreationDate);
				statusForm.setSapCreatedBy(rs.getString("SAP_CREATED_BY"));
				statusForm.setRequestedBy(rs.getString("REQUESTED_BY"));
					}
				}
				}catch (Exception e) {
					e.printStackTrace();
				}
			
			}
			
			statusForm.setUserRole(userRole);
			
			checkStatus=0;int appStatus=0;
			LinkedList listApprers=new LinkedList();
			String getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
			"where mast.Location='"+location+"' AND  mast.Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mast.Approver_Id=emp.PERNR order by Priority";
			ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
			while(rsApprDetails.next())
			{
				checkStatus=1;
				ApprovalsForm apprvers=new ApprovalsForm();
				apprvers.setPriority(rsApprDetails.getString("Priority"));
				apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
				String empCode=rsApprDetails.getString("Approver_Id");
				String approveStatus="";
				
				
				String recordStatus="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
				"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
				"all_r.type='"+matType+"' AND Material_Group='"+matGroup+"' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
				"or mast.Role='Creator') and mast.Approver_Id=emp.PERNR  group by mast.Priority,mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status," +
				"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
				ResultSet rsAppInfo=ad.selectQuery(recordStatus);
				while(rsAppInfo.next())
				{
					
					apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
					approveStatus=rsAppInfo.getString("Req_Status");
					if(approveStatus.equalsIgnoreCase(""))
					{
						apprvers.setApproveStatus("In Process");
					}
					if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
					{
						String approveDate=rsAppInfo.getString("approved_date");
						String a[]=approveDate.split(" ");
						approveDate=a[0];
						String b[]=approveDate.split("-");
						approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
					apprvers.setDate(approveDate);
					}else{
						String rejectDate=	rsAppInfo.getString("rejected_date");
					
						String a[]=rejectDate.split(" ");
						rejectDate=a[0];
						String b[]=rejectDate.split("-");
						rejectDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
						apprvers.setDate(rejectDate);
							appStatus=1;
					}
					comments=rsAppInfo.getString("Comments");
					if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
					{
						apprvers.setComments("");
					}else{
						apprvers.setComments(rsAppInfo.getString("Comments"));
					}
				}
				if(approveStatus.equalsIgnoreCase("") && appStatus==0)
				{
					apprvers.setApproveStatus("In Process");
				}
				apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
				listApprers.add(apprvers);
			}
			request.setAttribute("approverDetails", listApprers);
			if(userRole.equalsIgnoreCase("User"))
			{
			return mapping.findForward("ServiceMaster");
			}
			if(userRole.equalsIgnoreCase("Accounts"))
			{
			return mapping.findForward("ServiceMaster_Account");
			}
			if(userRole.equalsIgnoreCase("Creator"))
			{
				dNow = new Date( );
				 ft = new SimpleDateFormat ("dd/MM/yyyy");
					 dateNow = ft.format(dNow);
					 statusForm.setSapCreationDate(dateNow);
					 statusForm.setSapCreatedBy(user.getEmployeeNo()+"-"+user.getFullName());
				
			return mapping.findForward("ServiceMaster_Creator");
			}
			
		}
		
		request.setAttribute("header", "Pending Request");
		request.setAttribute("listDetails", list);
		request.setAttribute("openRequest", "");
		String result=(String)session.getAttribute("result");
		System.out.println("result="+result);
		if(result==null||result==" ")
		session.setAttribute("result"," ");
		
		
		if(request.getParameter("id")!=null){
		
		request.setAttribute("MenuIcon", request.getParameter("id"));
		}
		
		statusForm.setRequestType(reqType);
		statusForm.setRequestNo(reqId);
		
		getSelectedRequestToApprove(mapping, form, request, response);
		
		}catch(Exception e){
			e.printStackTrace();
		}
		return mapping.findForward("ServiceMaster_Creator");
	}
	
	public ActionForward statusChangeForRequest(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response){
		EssDao ad=new EssDao();
		LinkedList list = new LinkedList();
		
		ApprovalsForm statusForm=(ApprovalsForm) form;
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		if(user==null){
			request.setAttribute("message","Session Expried! Try to Login again!");
			return mapping.findForward("displayiFrameSession");
		}
		String reqId = request.getParameter("reqId");
		MainDao exeQry = new MainDao();
		String reqType = statusForm.getReqRequstType();
		statusForm.setRequestType(reqType);
		String reqStatus = request.getParameter("status");
		String filterBy=statusForm.getSelectedFilter();
		statusForm.setSelectedFilter(filterBy);
	statusForm.setReqRequstType(reqType);
	int totalRecords=statusForm.getTotalRecords();//21
	int startRecord=statusForm.getStartRecord();//11
	int endRecord=statusForm.getEndRecord();	
	
	
	statusForm.setTotalRecords(totalRecords);
	statusForm.setStartRecord(startRecord);
	statusForm.setEndRecord(endRecord);
		String comments = statusForm.getRemark();
		
		LinkedList reqDetails = new LinkedList();
		reqDetails.add(0, reqId);
		reqDetails.add(1, reqType);
		//User Informtion
		String lcode = user.getPlantId();
		int user_Id = user.getId();
		String uName = user.getUserName();
		String appName = uName;
		int rowCount= 0;
		System.out.println(reqType);
		//updateStatus("Approved", reqType,reqId);
		//get the total Approvers
		rowCount = getCount("Approvers_Details", reqType);
		//check and get next approver
		
		try{
			
			if(reqType.equalsIgnoreCase("Vendor Master")){}
			if(reqType.equalsIgnoreCase("Code Extention")){
				Date dNow = new Date( );
				 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS");
					String dateNow = ft.format(dNow);
				String location="";
				String matGroup="";
				String approver="";
				String parllelAppr1="";
				String parllelAppr2="";
				String reqDate="";
				String reqesterID="";
				String requestNo="";
				String matType="";
				
				matGroup="";
				int priorityCout=0;
				int checkStatus=0;
				String userRole=statusForm.getUserRole();
				String matDetails="select loc.LOCATION_CODE,mat.CREATED_BY from code_extenstion_request as mat,Location as loc  where mat.REQUEST_NO='"+reqId+"' and (mat.EXTENDED_TO_PLANT_1=loc.LOCATION_CODE or mat.PLANT_2=loc.LOCATION_CODE) ";
				ResultSet rsDetails=ad.selectQuery(matDetails);
				while(rsDetails.next())
				{
					location=rsDetails.getString("LOCATION_CODE");
					matType="Code Extention";
					reqesterID=rsDetails.getString("CREATED_BY");
				}
				String test="";
				String getProrityCout="select max(Priority) from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"'";
				ResultSet rsCout=ad.selectQuery(getProrityCout);
				while(rsCout.next())
				{
					priorityCout=rsCout.getInt(1);
					test=rsCout.getString(1);
				}
				
				if(test==null){
					getProrityCout="select max(Priority) from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group=''";
					rsCout=ad.selectQuery(getProrityCout);
					while(rsCout.next())
					{
						priorityCout=rsCout.getInt(1);
					}
				}
				
				checkStatus=0;
				int apprverPriority=0;
				String getApproverDetails="select * from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and (Approver_Id='"+user.getEmployeeNo()+"' or Parllel_Approver_1='"+user.getEmployeeNo()+"' or Parllel_Approver_2='"+user.getEmployeeNo()+"') ";
				ResultSet rsAppDet=ad.selectQuery(getApproverDetails);
				while(rsAppDet.next())
				{
					checkStatus=1;
					apprverPriority=rsAppDet.getInt("Priority");
					approver=rsAppDet.getString("Approver_Id");
					parllelAppr1=rsAppDet.getString("Parllel_Approver_1");
					parllelAppr2=rsAppDet.getString("Parllel_Approver_2");
				}
				if(checkStatus==0)
				{
					getApproverDetails="select * from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' and (Approver_Id='"+user.getEmployeeNo()+"' or Parllel_Approver_1='"+user.getEmployeeNo()+"' or Parllel_Approver_2='"+user.getEmployeeNo()+"') ";
					rsAppDet=ad.selectQuery(getApproverDetails);
					while(rsAppDet.next())
					{
					
						apprverPriority=rsAppDet.getInt("Priority");
						approver=rsAppDet.getString("Approver_Id");
						parllelAppr1=rsAppDet.getString("Parllel_Approver_1");
						parllelAppr2=rsAppDet.getString("Parllel_Approver_2");
					}
				}
				if(reqStatus.equalsIgnoreCase("Approve")){
					

					

					if(priorityCout==apprverPriority)
					{
						//last approver creator
						String updateStatus="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+approver+"'," +
						"Pending_Approver='',Approved_Persons='"+approver+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Code Extention' and Pending_Approver='"+approver+"'";
					    int saveStatus=0;
					    saveStatus=ad.SqlExecuteUpdate(updateStatus);
					    
					    if(!(parllelAppr1.equalsIgnoreCase("")))
					    {
					    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr1+"'," +
								"Pending_Approver='',Approved_Persons='"+parllelAppr1+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Code Extention' and Pending_Approver='"+parllelAppr1+"'";
							    ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
					    }
					    if(!(parllelAppr2.equalsIgnoreCase("")))
					    {
					    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr2+"'," +
								"Pending_Approver='',Approved_Persons='"+parllelAppr2+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Code Extention' and Pending_Approver='"+parllelAppr2+"'";
							    ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
					    }	
					    if(saveStatus>0)
					    {
					    	statusForm.setMessage2("Request Approved Successfully");
							  //update query
							  String updateRecord="update code_extenstion_request set MODIFIED_DATE='"+dateNow+"',MODIFIED_BY='"+user.getEmployeeNo()+"',APPROVE_TYPE='Approved',last_approver='"+user.getFullName()+"',pending_approver='No',rejected_flag='' where REQUEST_NO='"+reqId+"'";
	    				int i=0;
	    				i=ad.SqlExecuteUpdate(updateRecord);
	    				EMailer email = new EMailer();
						String approvermail="";
						email.sendMailToMaterialCodeRequester(request, approvermail, reqId, "Code Extension", user.getEmployeeNo(), reqesterID, "Approved");
							  /*String plantType="";
		                        String getPlantType="select Type from code_extenstion_request where REQUEST_NO='"+reqId+"'";
		                        ResultSet rsPlantType=ad.selectQuery(getPlantType);
		                        while(rsPlantType.next())
		                        {
		                        	plantType=rsPlantType.getString("Type");
		                        }
		                        if(plantType.equalsIgnoreCase("Plant"))	{
		                        	statusForm.setPlant2("");
		                        	statusForm.setMaterialCode2("");
		                        	statusForm.setFromStorageLocation("");
		                        	statusForm.setToStorageLocation("");
		            			}else{
		            				statusForm.setPlant1("");
		            				statusForm.setMaterialCode1("");
		            				statusForm.setExtendToPlant1("");
		            				statusForm.setStorageLocationId1("");
		            				statusForm.setExtendToStorageLocation1("");
		            			}
		                        
		                        if(plantType.equalsIgnoreCase("Plant"))	{
		                        	String updateRecord="update code_extenstion_request set PLANT_1='"+statusForm.getPlant1()+"',MATERIAL_CODE_1='"+statusForm.getMaterialCode1()+"',EXTENDED_TO_PLANT_1='"+statusForm.getExtendToPlant1()+"',STORAGE_LOCATION_ID_1='"+statusForm.getStorageLocationId1()+"',EXTENDED_STORAGE_LOCATION_1='"+statusForm.getExtendToStorageLocation1()+"'," +
									"PLANT_2='"+statusForm.getPlant2()+"',MATERIAL_CODE_2='"+statusForm.getMaterialCode2()+"',FROM_STORAGE_LOCATION='"+statusForm.getFromStorageLocation()+"',TO_STORAGE_LOCATION='"+statusForm.getToStorageLocation()+"',MODIFIED_DATE='"+dateNow+"',MODIFIED_BY='"+user.getId()+"',APPROVE_TYPE='Approved',last_approver='"+user.getEmployeeNo()+"',pending_approver='No' where REQUEST_NO='"+reqId+"'";
							int i=0;
							i=ad.SqlExecuteUpdate(updateRecord);
						
		                        }else{
		                        	String updateRecord="update code_extenstion_request set TYPE='"+statusForm.getPlantType()+"',PLANT_1='"+statusForm.getPlant1()+"',MATERIAL_CODE_1='"+statusForm.getMaterialCode1()+"',EXTENDED_TO_PLANT_1='"+statusForm.getExtendToPlant1()+"',STORAGE_LOCATION_ID_1='"+statusForm.getStorageLocationId1()+"',EXTENDED_STORAGE_LOCATION_1='"+statusForm.getExtendToStorageLocation1()+"'," +
		    						"PLANT_2='"+statusForm.getPlant2()+"',MATERIAL_CODE_2='"+statusForm.getMaterialCode2()+"',FROM_STORAGE_LOCATION='"+statusForm.getFromStorageLocation()+"',TO_STORAGE_LOCATION='"+statusForm.getToStorageLocation()+"',MODIFIED_DATE='"+dateNow+"',MODIFIED_BY='"+user.getId()+"',APPROVE_TYPE='Approved',last_approver='"+user.getEmployeeNo()+"',pending_approver='No' where REQUEST_NO='"+reqId+"'";
		    				int i=0;
		    				i=ad.SqlExecuteUpdate(updateRecord);
		    				
		                        }*/
							 
							
						
							
						 
							
					    }
					}else{
					    String nextAppr="";
					    String nextPar1="";
					    String nextPar2="";
					    checkStatus=0;
						String getNextApprover="select Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and Priority='"+(apprverPriority+1)+"'";
						ResultSet rsNextApp=ad.selectQuery(getNextApprover);
						while(rsNextApp.next())
						{  
							checkStatus=1;
							nextAppr=rsNextApp.getString("Approver_Id");
							nextPar1=rsNextApp.getString("Parllel_Approver_1");
							nextPar2=rsNextApp.getString("Parllel_Approver_2");
						}
						if(checkStatus==0)
						{
							getNextApprover="select Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' and Priority='"+(apprverPriority+1)+"'";
							rsNextApp=ad.selectQuery(getNextApprover);
							while(rsNextApp.next())
							{  
								checkStatus=1;
								nextAppr=rsNextApp.getString("Approver_Id");
								nextPar1=rsNextApp.getString("Parllel_Approver_1");
								nextPar2=rsNextApp.getString("Parllel_Approver_2");
							}
						}
					String empNo=user.getEmployeeNo();
						if(empNo.equalsIgnoreCase(approver))
						{
							String updateStatus="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+user.getEmployeeNo()+"'," +
							"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Code Extention' and Pending_Approver='"+user.getEmployeeNo()+"'";
						    int saveStatus=0;
						    saveStatus=ad.SqlExecuteUpdate(updateStatus);
						    
						    if(!(parllelAppr1.equalsIgnoreCase("")))
						    {
						    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr1+"'," +
									"Pending_Approver='',Approved_Persons='"+parllelAppr1+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Code Extention' and Pending_Approver='"+parllelAppr1+"'";
								    ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
						    }
						    if(!(parllelAppr2.equalsIgnoreCase("")))
						    {
						    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr2+"'," +
									"Pending_Approver='',Approved_Persons='"+parllelAppr2+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Code Extention' and Pending_Approver='"+parllelAppr2+"'";
								    ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
						    }
						    if(saveStatus>0)
						    {
						    	 statusForm.setMessage2("Request Is Approved Successfully");
						    	 
						    	String recordStatus="select * from All_Request where Req_Id='"+reqId+"' and Approved_Persons='"+user.getEmployeeNo()+"'";
						    	ResultSet rsRecDet=ad.selectQuery(recordStatus);
						    	while(rsRecDet.next())
						    	{
						    		requestNo=rsRecDet.getString("Requester_Name");
						    		reqDate=rsRecDet.getString("Req_Date");
						    		reqesterID=rsRecDet.getString("Requester_Name");
						    	}
						    	System.out.println(userRole);
						    	
						    	
						    	//update last Approver and Pending Approver
						    	//GET pending approvers
						    	
						    	if(!(userRole.equalsIgnoreCase("Creator")))
						    	{
						    	checkStatus=0;
						    	String pendingApprovers="";
						    	String nextApprovers="";
								getNextApprover="select emp.EMP_FULLNAME, Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers as mat,emp_official_info AS emp where " +
										"Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
								ResultSet rsPendignApp=ad.selectQuery(getNextApprover);
								while(rsPendignApp.next())
								{  
									checkStatus=1;
									pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
								}
								if(checkStatus==0)
								{
									getNextApprover="select emp.EMP_FULLNAME, Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers as mat,emp_official_info AS emp where " +
											"Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
									rsPendignApp=ad.selectQuery(getNextApprover);
									while(rsPendignApp.next())
									{  
										checkStatus=1;
										pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
									}
								}
								if(!(pendingApprovers.equalsIgnoreCase(""))){
									pendingApprovers=pendingApprovers.substring(0, (pendingApprovers.length()-2));	
								}
								
								String updateMaterial="update code_extenstion_request set last_approver='"+user.getFullName()+"',pending_approver='"+pendingApprovers+"' where REQUEST_NO='"+reqId+"'";
						    	int check=ad.SqlExecuteUpdate(updateMaterial);
						    	}
						    	// insert record to next approver
						    	String insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
						    	" values('"+reqId+"','Code Extention','"+requestNo+"','"+reqDate+"','Pending','No','"+nextAppr+"','No','"+reqesterID+"','','"+matType+"')";
						    	ad.SqlExecuteUpdate(insertAllRequest);
						    	EMailer email = new EMailer();
								String approvermail="";
								email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Code Extension", nextAppr, reqesterID);
						    	
						    	if(!(nextPar1.equalsIgnoreCase(""))){
						    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
							    	" values('"+reqId+"','Code Extention','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar1+"','No','"+reqesterID+"','','"+matType+"')";
							    	ad.SqlExecuteUpdate(insertAllRequest);
							    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Code Extension", nextPar1, reqesterID);
						    	}
						    	if(!(nextPar2.equalsIgnoreCase(""))){
						    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
							    	" values('"+reqId+"','Code Extention','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar2+"','No','"+reqesterID+"','','"+matType+"')";
							    	ad.SqlExecuteUpdate(insertAllRequest);
							    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Code Extension", nextPar2, reqesterID);
						    	}
						    	
						    }else{
						    	statusForm.setMessage("Error..Request Is Not Approved");
						    }
							
						}if(!(parllelAppr1.equalsIgnoreCase(""))){
							
							if(empNo.equalsIgnoreCase(parllelAppr1)){
								String updateStatus="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+user.getEmployeeNo()+"'," +
								"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Code Extention' and Pending_Approver='"+user.getEmployeeNo()+"'";
							    int saveStatus=0;
							    saveStatus=ad.SqlExecuteUpdate(updateStatus);
							    
							    String updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+approver+"'," +
								"Pending_Approver='',Approved_Persons='"+approver+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Code Extention' and Pending_Approver='"+approver+"'";
							    ad.SqlExecuteUpdate(updateStatusForApprover); 
							    
							    if(!(parllelAppr2.equalsIgnoreCase("")))
							    {
							    	  updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr2+"'," +
										"Pending_Approver='',Approved_Persons='"+parllelAppr2+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Code Extention' and Pending_Approver='"+parllelAppr2+"'";
									    ad.SqlExecuteUpdate(updateStatusForApprover); 
							    }
							   
							    if(saveStatus>0)
							    {
							    	statusForm.setMessage2("Request Is Approved Successfully");
							    	String recordStatus="select * from All_Request where Req_Id='"+reqId+"' and Approved_Persons='"+user.getEmployeeNo()+"'";
							    	ResultSet rsRecDet=ad.selectQuery(recordStatus);
							    	while(rsRecDet.next())
							    	{
							    		requestNo=rsRecDet.getString("Requester_Name");
							    		reqDate=rsRecDet.getString("Req_Date");
							    		reqesterID=rsRecDet.getString("Requester_Name");
							    	}
							    	
							    	// insert record to next approver
							    	String insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
							    	" values('"+reqId+"','Code Extention','"+requestNo+"','"+reqDate+"','Pending','No','"+nextAppr+"','No','"+reqesterID+"','','"+matType+"')";
							    	ad.SqlExecuteUpdate(insertAllRequest);
							    	EMailer email = new EMailer();
							    	String approvermail="";
							    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Code Extension", nextAppr, reqesterID);

							    	if(!(nextPar1.equalsIgnoreCase(""))){
							    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
								    	" values('"+reqId+"','Code Extention','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar1+"','No','"+reqesterID+"','','"+matType+"')";
								    	ad.SqlExecuteUpdate(insertAllRequest);
								    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Code Extension", nextPar1, reqesterID);
							    	}
							    	if(!(nextPar2.equalsIgnoreCase(""))){
							    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
								    	" values('"+reqId+"','Code Extention','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar2+"','No','"+reqesterID+"','','"+matType+"')";
								    	ad.SqlExecuteUpdate(insertAllRequest);
								    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Code Extension", nextPar2, reqesterID);
							    	}
							    	
							    	
							    }else{
							    	statusForm.setMessage("Error..Request Is Not Approved");
							    }
								
							}
							
							
						}
						if(!(parllelAppr2.equalsIgnoreCase(""))){

							
							if(empNo.equalsIgnoreCase(parllelAppr2)){
								String updateStatus="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+user.getEmployeeNo()+"'," +
								"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Code Extention' and Pending_Approver='"+user.getEmployeeNo()+"'";
							    int saveStatus=0;
							    saveStatus=ad.SqlExecuteUpdate(updateStatus);
							    String updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+approver+"'," +
								"Pending_Approver='',Approved_Persons='"+approver+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Code Extention' and Pending_Approver='"+approver+"'";
							    ad.SqlExecuteUpdate(updateStatusForApprover); 
							    
							    if(!(parllelAppr1.equalsIgnoreCase("")))
							    {
							    	  updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr1+"'," +
										"Pending_Approver='',Approved_Persons='"+parllelAppr1+"',approved_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Code Extention' and Pending_Approver='"+parllelAppr1+"'";
									    ad.SqlExecuteUpdate(updateStatusForApprover); 
							    }
							    if(saveStatus>0)
							    {
							    	 
							    	String recordStatus="select * from All_Request where Req_Id='"+reqId+"' and Approved_Persons='"+user.getEmployeeNo()+"'";
							    	ResultSet rsRecDet=ad.selectQuery(recordStatus);
							    	while(rsRecDet.next())
							    	{
							    		requestNo=rsRecDet.getString("Requester_Name");
							    		reqDate=rsRecDet.getString("Req_Date");
							    		reqesterID=rsRecDet.getString("Requester_Name");
							    	}
							    	
							    	// insert record to next approver
							    	String insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
							    	" values('"+reqId+"','Code Extention','"+requestNo+"','"+reqDate+"','Pending','No','"+nextAppr+"','No','"+reqesterID+"','','"+matType+"')";
							    	ad.SqlExecuteUpdate(insertAllRequest);
							    	EMailer email = new EMailer();
							    	String approvermail="";
							    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Code Extension", nextAppr, reqesterID);

							    	if(!(nextPar1.equalsIgnoreCase(""))){
							    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
								    	" values('"+reqId+"','Code Extention','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar1+"','No','"+reqesterID+"','','"+matType+"')";
								    	ad.SqlExecuteUpdate(insertAllRequest);
								    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Code Extension", nextPar1, reqesterID);
							    	}
							    	if(!(nextPar2.equalsIgnoreCase(""))){
							    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
								    	" values('"+reqId+"','Code Extention','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar2+"','No','"+reqesterID+"','','"+matType+"')";
								    	ad.SqlExecuteUpdate(insertAllRequest);
								    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Code Extension", nextPar2, reqesterID);
							    	}
							    	
							    	
							    }else{
							    	statusForm.setMessage("Error..Request Is Not Approved");
							    }
								
							}
						}
				     
					}
						
					//set reject buttons  	
				}else{

					String updateStatus="update All_Request set Req_Status='Rejected',Comments='"+statusForm.getComments()+"',Last_Approver='"+approver+"'," +
					"Pending_Approver='',Approved_Persons='"+approver+"',rejected_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Code Extention' and Pending_Approver='"+approver+"'";
				    int saveStatus=0;
				    saveStatus=ad.SqlExecuteUpdate(updateStatus);
				    if(!(parllelAppr1.equalsIgnoreCase("")))
				    {
				    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Rejected',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr1+"'," +
							"Pending_Approver='',Approved_Persons='"+parllelAppr1+"',rejected_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Code Extention' and Pending_Approver='"+parllelAppr1+"'";
				    	 saveStatus=ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
				    }
				    if(!(parllelAppr2.equalsIgnoreCase("")))
				    {
				    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Rejected',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr2+"'," +
							"Pending_Approver='',Approved_Persons='"+parllelAppr2+"',rejected_date='"+dateNow+"' where Req_Id='"+reqId+"' and Req_Type='Code Extention' and Pending_Approver='"+parllelAppr2+"'";
				    	 saveStatus=ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
				    }
					if(saveStatus>0){
						statusForm.setMessage2("Request has been rejected successfully");
						
						EMailer email=new EMailer();
						String approvermail="";
						email.sendMailToMaterialCodeRequester(request, approvermail, reqId, "Code Extension", user.getEmployeeNo(), reqesterID, "Rejected");
						
						String updateMaterial="update code_extenstion_request set APPROVE_TYPE='Rejected',MODIFIED_BY='"+user.getEmployeeNo()+"',rejected_flag='',last_approver='"+user.getFullName()+"',pending_approver='No'  where request_no='"+reqId+"'";
						ad.SqlExecuteUpdate(updateMaterial);
						
					}
					if(priorityCout==apprverPriority){
						
						  String sapCodeExist="";
						  String sapCodeexistNo="";
						  
						  sapCodeExist=statusForm.getSapCodeExists();
						  sapCodeexistNo=statusForm.getSapCodeExistsNo();
						  if(sapCodeExist!=null){
							  statusForm.setSapCodeExists("true");
						  }
						  if(sapCodeexistNo!=null){
							  statusForm.setSapCodeExistsNo("true");
						  }
						
						  
						  //
						  String updateRecord="update code_extenstion_request set MODIFIED_DATE='"+dateNow+"',MODIFIED_BY='"+user.getEmployeeNo()+"',APPROVE_TYPE='Rejected',last_approver='"+user.getFullName()+"',pending_approver='No',rejected_flag='' where REQUEST_NO='"+reqId+"'";
		    				int i=0;
		    				i=ad.SqlExecuteUpdate(updateRecord);
						  
						  
                      /*  String plantType="";
                        String getPlantType="select Type from code_extenstion_request where REQUEST_NO='"+reqId+"'";
                        ResultSet rsPlantType=ad.selectQuery(getPlantType);
                        while(rsPlantType.next())
                        {
                        	plantType=rsPlantType.getString("Type");
                        }
                        if(plantType.equalsIgnoreCase("Plant"))	{
                        	statusForm.setPlant2("");
                        	statusForm.setMaterialCode2("");
                        	statusForm.setFromStorageLocation("");
                        	statusForm.setToStorageLocation("");
            			}else{
            				statusForm.setPlant1("");
            				statusForm.setMaterialCode1("");
            				statusForm.setExtendToPlant1("");
            				statusForm.setStorageLocationId1("");
            				statusForm.setExtendToStorageLocation1("");
            			}
                        
                        if(plantType.equalsIgnoreCase("Plant"))	{
                        	String updateRecord="update code_extenstion_request set PLANT_1='"+statusForm.getPlant1()+"',MATERIAL_CODE_1='"+statusForm.getMaterialCode1()+"',EXTENDED_TO_PLANT_1='"+statusForm.getExtendToPlant1()+"',STORAGE_LOCATION_ID_1='"+statusForm.getStorageLocationId1()+"',EXTENDED_STORAGE_LOCATION_1='"+statusForm.getExtendToStorageLocation1()+"'," +
							"PLANT_2='"+statusForm.getPlant2()+"',MATERIAL_CODE_2='"+statusForm.getMaterialCode2()+"',FROM_STORAGE_LOCATION='"+statusForm.getFromStorageLocation()+"',TO_STORAGE_LOCATION='"+statusForm.getToStorageLocation()+"',MODIFIED_DATE='"+dateNow+"',MODIFIED_BY='"+user.getId()+"',APPROVE_TYPE='Rejected',last_approver='"+user.getEmployeeNo()+"',pending_approver='No' where REQUEST_NO='"+reqId+"'";
					int i=0;
					i=ad.SqlExecuteUpdate(updateRecord);
				
                        }else{
                        	String updateRecord="update code_extenstion_request set TYPE='"+statusForm.getPlantType()+"',PLANT_1='"+statusForm.getPlant1()+"',MATERIAL_CODE_1='"+statusForm.getMaterialCode1()+"',EXTENDED_TO_PLANT_1='"+statusForm.getExtendToPlant1()+"',STORAGE_LOCATION_ID_1='"+statusForm.getStorageLocationId1()+"',EXTENDED_STORAGE_LOCATION_1='"+statusForm.getExtendToStorageLocation1()+"'," +
    						"PLANT_2='"+statusForm.getPlant2()+"',MATERIAL_CODE_2='"+statusForm.getMaterialCode2()+"',FROM_STORAGE_LOCATION='"+statusForm.getFromStorageLocation()+"',TO_STORAGE_LOCATION='"+statusForm.getToStorageLocation()+"',MODIFIED_DATE='"+dateNow+"',MODIFIED_BY='"+user.getId()+"',APPROVE_TYPE='Rejected',last_approver='"+user.getEmployeeNo()+"',pending_approver='No' where REQUEST_NO='"+reqId+"'";
    				int i=0;
    				i=ad.SqlExecuteUpdate(updateRecord);
    				
                        }*/

						
					}
					
				
				}
				
				if(userRole.equalsIgnoreCase("user"))
				{

					String plantType="";
                    String getPlantType="select Type from code_extenstion_request where REQUEST_NO='"+reqId+"'";
                    ResultSet rsPlantType=ad.selectQuery(getPlantType);
                    while(rsPlantType.next())
                    {
                    	plantType=rsPlantType.getString("Type");
                    }
					
					
					
					
					 if(plantType.equalsIgnoreCase("Plant"))
						{

							String getRecord="select  REQUEST_NO,REQUEST_DATE,TYPE,PLANT_1,loc1.LOCNAME as locn1,MATERIAL_CODE_1,EXTENDED_TO_PLANT_1 ," +
							"loc2.LOCNAME as locn2,STORAGE_LOCATION_ID_1,EXTENDED_STORAGE_LOCATION_1 from  code_extenstion_request as c,Location as loc1," +
							"Location  as loc2 where REQUEST_NO='"+reqId+"' and loc1.LOCATION_CODE=c.PLANT_1 and loc2.LOCATION_CODE=c.EXTENDED_TO_PLANT_1";
							
							ResultSet rs=ad.selectQuery(getRecord);
							while(rs.next())
							{
								statusForm.setRequestNumber(rs.getString("REQUEST_NO"));
								 reqDate=rs.getString("REQUEST_DATE");
								String a[]=reqDate.split(" ");
								reqDate=a[0];
								String b[]=reqDate.split("-");
								reqDate=b[2]+"/"+b[1]+"/"+b[0];
								statusForm.setRequestDate(reqDate);
								statusForm.setPlantType(rs.getString("TYPE"));
							
								statusForm.setMaterialCode1(rs.getString("MATERIAL_CODE_1"));
								statusForm.setPlant1(rs.getString("PLANT_1")+"-"+rs.getString("locn1"));
								statusForm.setStorageLocationId1(rs.getString("STORAGE_LOCATION_ID_1"));
								statusForm.setExtendToPlant1(rs.getString("EXTENDED_TO_PLANT_1")+"-"+rs.getString("locn2"));
								statusForm.setExtendToStorageLocation1(rs.getString("EXTENDED_STORAGE_LOCATION_1"));
								
							}
							request.setAttribute("plantMandatory", "plantMandatory");
							
						}
					 else{

						   
						 String getRecord="select  c.REQUEST_NO,c.REQUEST_DATE,c.TYPE,c.MATERIAL_CODE_2,c.FROM_STORAGE_LOCATION,c.PLANT_2,l.LOCNAME," +
						  "c.FROM_STORAGE_LOCATION,c.TO_STORAGE_LOCATION  from  code_extenstion_request as c,Location as l  where  REQUEST_NO='"+reqId+"' and l.LOCATION_CODE=c.PLANT_2";		
							ResultSet rs=ad.selectQuery(getRecord);
							if(rs.next()){
								
								statusForm.setRequestNumber(rs.getString("REQUEST_NO"));
						reqDate=rs.getString("REQUEST_DATE");
							String a[]=reqDate.split(" ");
							reqDate=a[0];
							String b[]=reqDate.split("-");
							reqDate=b[2]+"/"+b[1]+"/"+b[0];
							statusForm.setRequestDate(reqDate);
							statusForm.setPlantType(rs.getString("TYPE"));
							statusForm.setPlant2(rs.getString("PLANT_2")+"-"+rs.getString("LOCNAME"));
							statusForm.setMaterialCode2(rs.getString("MATERIAL_CODE_2"));
							statusForm.setFromStorageLocation(rs.getString("FROM_STORAGE_LOCATION"));
							statusForm.setToStorageLocation(rs.getString("TO_STORAGE_LOCATION"));
					   }
							request.setAttribute("storageMandatory", "storageMandatory");
							
					 }
					 
					
				
				}else{
					
					ResultSet rs11 = ad.selectQuery("select LOCID," +
					"LOCNAMe,location_code from location");
					ArrayList locationList=new ArrayList();
					ArrayList locationLabelList=new ArrayList();
					
					while(rs11.next()) {
						locationList.add(rs11.getString("location_code"));
						locationLabelList.add(rs11.getString("location_code")+"-"+rs11.getString("LOCNAMe"));
					}
					statusForm.setLocationIdList(locationList);
					statusForm.setLocationLabelList(locationLabelList);
					
					LinkedList storageID=new LinkedList();
					LinkedList storageName=new LinkedList();
					String getStorageDetails="select * from STORAGE_LOCATION";
					ResultSet rsStrogeLocation=ad.selectQuery(getStorageDetails);
					while(rsStrogeLocation.next()){
						storageID.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID"));
						storageName.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID")+"-"+rsStrogeLocation.getString("STORAGE_LOCATION_NAME"));
					}
					statusForm.setStorageID(storageID);
					statusForm.setStorageIDName(storageName);

					
					String getRecord="select * from code_extenstion_request where REQUEST_NO='"+reqId+"'";
					ResultSet rs=ad.selectQuery(getRecord);
					while(rs.next())
					{

						statusForm.setRequestNumber(rs.getString("REQUEST_NO"));
						reqDate=rs.getString("REQUEST_DATE");
						String a[]=reqDate.split(" ");
						reqDate=a[0];
						String b[]=reqDate.split("-");
						reqDate=b[2]+"/"+b[1]+"/"+b[0];
						statusForm.setRequestDate(reqDate);
						statusForm.setPlantType(rs.getString("TYPE"));
						String plantType=rs.getString("TYPE");
						if(plantType.equalsIgnoreCase("Plant"))
						{
							statusForm.setPlant1(rs.getString("PLANT_1"));
							statusForm.setMaterialCode1(rs.getString("MATERIAL_CODE_1"));
							statusForm.setStorageLocationId1(rs.getString("STORAGE_LOCATION_ID_1"));
							statusForm.setExtendToPlant1(rs.getString("EXTENDED_TO_PLANT_1"));
							statusForm.setExtendToStorageLocation1(rs.getString("EXTENDED_STORAGE_LOCATION_1"));
							
							request.setAttribute("plantMandatory", "plantMandatory");
						}
						else{
							
							String plant2=rs.getString("PLANT_2");
							plant2=plant2.replaceAll("\\W","");
							statusForm.setPlant2(plant2);
							statusForm.setMaterialCode2(rs.getString("MATERIAL_CODE_2"));
							statusForm.setFromStorageLocation(rs.getString("FROM_STORAGE_LOCATION"));
							statusForm.setToStorageLocation(rs.getString("TO_STORAGE_LOCATION"));
							request.setAttribute("storageMandatory", "storageMandatory");
						}
						
					
					}
					
					//creator
					
				
					
					
				}
				
				statusForm.setUserRole(userRole);
				
				checkStatus=0;int appStatus=0;
				LinkedList listApprers=new LinkedList();
				String getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
				"where mast.Location='"+location+"' AND  mast.Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mast.Approver_Id=emp.PERNR order by Priority";
				ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
				while(rsApprDetails.next())
				{
					checkStatus=1;
					ApprovalsForm apprvers=new ApprovalsForm();
					apprvers.setPriority(rsApprDetails.getString("Priority"));
					apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
					String empCode=rsApprDetails.getString("Approver_Id");
					String approveStatus="";
					
					
					String recordStatus="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
					"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
					"all_r.type='"+matType+"' AND Material_Group='"+matGroup+"' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
					"or mast.Role='Creator') and mast.Approver_Id=emp.PERNR  group by mast.Priority,mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME,all_r.Req_Status," +
					"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
					ResultSet rsAppInfo=ad.selectQuery(recordStatus);
					while(rsAppInfo.next())
					{
						
						apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
						approveStatus=rsAppInfo.getString("Req_Status");
						if(approveStatus.equalsIgnoreCase(""))
						{
							apprvers.setApproveStatus("In Process");
						}
						if(approveStatus.equalsIgnoreCase("Approved"))
						{
						apprvers.setDate(rsAppInfo.getString("approved_date"));
						}else{
							apprvers.setDate(rsAppInfo.getString("rejected_date"));	appStatus=1;
						}
						comments=rsAppInfo.getString("Comments");
						if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
						{
							apprvers.setComments("");
						}else{
							apprvers.setComments(rsAppInfo.getString("Comments"));
						}
					}
					if(approveStatus.equalsIgnoreCase("") && appStatus==0)
					{
						apprvers.setApproveStatus("In Process");
					}
					apprvers.setEmployeeName(rsApprDetails.getString("EMP_FULLNAME"));
					listApprers.add(apprvers);
				}
				request.setAttribute("approverDetails", listApprers);
				if(userRole.equalsIgnoreCase("User"))
				{
				return mapping.findForward("CodeExtention");
				}
				
				if(userRole.equalsIgnoreCase("Creator"))
				{
					dNow = new Date( );
					 ft = new SimpleDateFormat ("dd/MM/yyyy");
						 dateNow = ft.format(dNow);
						 statusForm.setSapCreationDate(dateNow);
						 statusForm.setSapCreatedBy(user.getEmployeeNo()+"-"+user.getFullName());
					
				return mapping.findForward("CodeExtention_Creator");
				}
				
			}
			if(reqType.equalsIgnoreCase("Material Master"))
			{
				Date dNow = new Date( );
				 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS");
					String dateNow = ft.format(dNow);
				String location="";
				String locationID="";
				String matGroup="";
				String approver="";
				String parllelAppr1="";
				String parllelAppr2="";
				String reqDate="";
				String reqesterID="";
				String requestNo="";
				String matType="";
				String requesterID="";
				String reqstdDate="";
				String matgrp="";
				
				matGroup=request.getParameter("matGroup");
				int priorityCout=0;
				int checkStatus=0;
				String userRole=statusForm.getUserRole();
				String matDetails="select loc.LOCATION_CODE,mat.Type,mat.CREATED_BY,mat.LOCATION_ID,mat.REQUEST_DATE from material_code_request as mat,Location as loc  where mat.REQUEST_NO='"+reqId+"' and mat.LOCATION_ID=loc.LOCID";
				ResultSet rsDetails=ad.selectQuery(matDetails);
				while(rsDetails.next())
				{
					location=rsDetails.getString("LOCATION_CODE");
					reqstdDate=rsDetails.getString("REQUEST_DATE");
					matType=rsDetails.getString("Type");
					requesterID=rsDetails.getString("CREATED_BY");
					locationID=rsDetails.getString("LOCATION_ID");
					
				}
				if(matType.equals("FG")||matType.equals("HAWA")){
					 matDetails="select loc.LOCATION_CODE,mat.Type,mat.CREATED_BY,mat.DOMESTIC_OR_EXPORTS from material_code_request as mat,Location as loc  where mat.REQUEST_NO='"+reqId+"' and mat.LOCATION_ID=loc.LOCID";
					 rsDetails=ad.selectQuery(matDetails);
					while(rsDetails.next())
					{
					
						matGroup=rsDetails.getString("DOMESTIC_OR_EXPORTS");
						 matgrp=matGroup;
						if(matGroup.equals("D"))
				 			matGroup="Domestic";
						if(matGroup.equals("E"))
				 			matGroup="Export";
				 		if(matGroup.equals("V"))
				 			matGroup="V";
					}
				}
					
				String test="";
				String getProrityCout="select max(Priority) from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"'";
				ResultSet rsCout=ad.selectQuery(getProrityCout);
				while(rsCout.next())
				{
					priorityCout=rsCout.getInt(1);
					test=rsCout.getString(1);
				}
				if(test==null){
					getProrityCout="select max(Priority) from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group=''";
					rsCout=ad.selectQuery(getProrityCout);
					while(rsCout.next())
					{
						priorityCout=rsCout.getInt(1);
					}
				}
				
				checkStatus=0;
				int apprverPriority=0;
				String getApproverDetails="select * from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and (Approver_Id='"+user.getEmployeeNo()+"' or Parllel_Approver_1='"+user.getEmployeeNo()+"' or Parllel_Approver_2='"+user.getEmployeeNo()+"') ";
				ResultSet rsAppDet=ad.selectQuery(getApproverDetails);
				while(rsAppDet.next())
				{
					checkStatus=1;
					apprverPriority=rsAppDet.getInt("Priority");
					approver=rsAppDet.getString("Approver_Id");
					parllelAppr1=rsAppDet.getString("Parllel_Approver_1");
					parllelAppr2=rsAppDet.getString("Parllel_Approver_2");
				}
				if(checkStatus==0)
				{
					getApproverDetails="select * from Material_Approvers where  Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' and (Approver_Id='"+user.getEmployeeNo()+"' or Parllel_Approver_1='"+user.getEmployeeNo()+"' or Parllel_Approver_2='"+user.getEmployeeNo()+"') ";
					rsAppDet=ad.selectQuery(getApproverDetails);
					while(rsAppDet.next())
					{
					
						apprverPriority=rsAppDet.getInt("Priority");
						approver=rsAppDet.getString("Approver_Id");
						parllelAppr1=rsAppDet.getString("Parllel_Approver_1");
						parllelAppr2=rsAppDet.getString("Parllel_Approver_2");
					}
				}
				if(reqStatus.equalsIgnoreCase("Approve")){
				if(priorityCout==apprverPriority)
				{
					//last approver creator
					String updateStatus="update All_Request set Req_Status='Completed',Comments='"+statusForm.getComments()+"',Last_Approver='"+approver+"'," +
					"Pending_Approver='',Approved_Persons='"+approver+"',approved_date='"+dateNow+"',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Req_Type='Material Master' and Pending_Approver='"+approver+"'";
				    int saveStatus=0;
				    saveStatus=ad.SqlExecuteUpdate(updateStatus);
				    
				    if(!(parllelAppr1.equalsIgnoreCase("")))
				    {
				    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Completed',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr1+"'," +
							"Pending_Approver='',Approved_Persons='"+parllelAppr1+"',approved_date='"+dateNow+"',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Req_Type='Material Master' and Pending_Approver='"+parllelAppr1+"'";
						    ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
				    }
				    if(!(parllelAppr2.equalsIgnoreCase("")))
				    {
				    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Completed',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr2+"'," +
							"Pending_Approver='',Approved_Persons='"+parllelAppr2+"',approved_date='"+dateNow+"',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Req_Type='Material Master' and Pending_Approver='"+parllelAppr2+"'";
						    ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
				    }	
				    if(saveStatus>0)
				    {
				    	statusForm.setMessage2("Code completed against request no. '"+reqId+"' successfull");
				    	 String sapCreationDate=statusForm.getSapCreationDate();
						  String b[]=sapCreationDate.split("/");
						  sapCreationDate=b[2]+"-"+b[1]+"-"+b[0];
						  
						  String sapCodeExist="";
						  String sapCodeexistNo="";
						  
						  sapCodeExist=statusForm.getSapCodeExists();
						  sapCodeexistNo=statusForm.getSapCodeExistsNo();
						  if(sapCodeExist!=null){
							  statusForm.setSapCodeExists("1");
						  }
						  if(sapCodeexistNo!=null){
							  statusForm.setSapCodeExists("0");
						  }
						  
						  if(matType.equalsIgnoreCase("ZCIV")||matType.equalsIgnoreCase("ZCON")||matType.equalsIgnoreCase("ZITC")||matType.equalsIgnoreCase("LC")
									||matType.equalsIgnoreCase("ZPFL")||matType.equalsIgnoreCase("ZSCR"))
						     {
						  
						  String updateGeneralMaterial="update material_code_request set STORAGE_LOCATION_ID='"+statusForm.getStorageLocationId()+"',MATERIAL_SHORT_NAME='"+statusForm.getMaterialShortName()+"',MATERIAL_LONG_NAME='"+statusForm.getMaterialLongName()+"'," +
							"PURCHASE_GROUP_ID='"+statusForm.getPuchaseGroupId()+"',UNIT_OF_MEAS_ID='"+statusForm.getUnitOfMeasId()+"',APPROXIMATE_VALUE='"+statusForm.getApproximateValue()+"',VALUATION_CLASS='"+statusForm.getValuationClass()+"',DETAILED_JUSTIFICATION='"+statusForm.getDetailedJustification()+"',DETAILED_SPECIFICATION='"+statusForm.getDetailedJustification()+"',PURPOSE_ID='"+statusForm.getPurposeID()+"'," +
							"REQUESTED_BY='"+statusForm.getRequestedBy()+"',MODIFIED_DATE='"+dateNow+"'," +
									"MODIFIED_BY='"+user.getEmployeeNo()+"',SAP_CODE_NO='"+statusForm.getSapCodeNo()+"',SAP_CODE_EXISTS='"+statusForm.getSapCodeExists()+"',SAP_CREATION_DATE='"+sapCreationDate+"',SAP_CREATED_BY='"+statusForm.getSapCreatedBy()+"',Approve_Type='Completed',last_approver='"+user.getFullName()+"',pending_approver='No',rejected_flag='',HSN_Code='"+statusForm.getHsnCode()+"' where REQUEST_NO='"+reqId+"'";	 
						  int updateMateStatus=ad.SqlExecuteUpdate(updateGeneralMaterial);
						  
						  String saveInHistory="insert into material_code_request_history(REQUEST_NO,REQUEST_DATE,LOCATION_ID,MATERIAL_TYPE_ID,STORAGE_LOCATION_ID,MATERIAL_SHORT_NAME,MATERIAL_LONG_NAME," +
									"MATERIAL_GROUP_ID,PURCHASE_GROUP_ID,UNIT_OF_MEAS_ID,APPROXIMATE_VALUE,VALUATION_CLASS,is_asset,UTILIZING_DEPT,DETAILED_JUSTIFICATION,DETAILED_SPECIFICATION,PURPOSE_ID," +
									"CREATED_DATE,CREATED_BY,Type,Approve_Type,URL,Role,HSN_Code) values('"+statusForm.getRequestNo()+"','"+reqDate+"','"+locationID+"','"+statusForm.getMaterialTypeId()+"'," +
									"'"+statusForm.getStorageLocationId()+"','"+statusForm.getMaterialShortName()+"','"+statusForm.getMaterialLongName()+"','"+matGroup+"','"+statusForm.getPuchaseGroupId()+"','"+statusForm.getUnitOfMeasId()+"','"+statusForm.getApproximateValue()+"'," +
									"'"+statusForm.getValuationClass()+"','"+statusForm.getIsAsset()+"','"+statusForm.getUtilizingDept()+"','"+statusForm.getDetailedJustification()+"','"+statusForm.getDetailedSpecification()+"'," +
									"'"+statusForm.getPurposeID()+"','"+dateNow+"','"+user.getEmployeeNo()+"','"+matType+"','Created','','Creator','"+statusForm.getHsnCode()+"')";
						  updateMateStatus=ad.SqlExecuteUpdate(saveInHistory);
						  
						     }
						  if(matType.equalsIgnoreCase("OSE"))
						  {
							  String updateGeneralMaterial="update material_code_request set " +
								 "STORAGE_LOCATION_ID='"+statusForm.getStorageLocationId()+"',MATERIAL_SHORT_NAME='"+statusForm.getMaterialShortName()+"',MATERIAL_LONG_NAME='"+statusForm.getMaterialLongName()+"'," +
								"PURCHASE_GROUP_ID='"+statusForm.getPuchaseGroupId()+"',UNIT_OF_MEAS_ID='"+statusForm.getUnitOfMeasId()+"'," +
								"APPROXIMATE_VALUE='"+statusForm.getApproximateValue()+"',VALUATION_CLASS='"+statusForm.getValuationClass()+"',MATERIAL_USED_IN='"+statusForm.getMaterialUsedIn()+"'," +
								"IS_EQUIPMENT='"+statusForm.getIsEquipment()+"',IS_SPARE='"+statusForm.getIsSpare()+"',IS_NEW_Equipment='"+statusForm.getIsNewEquipment()+"',IS_NEW_Furniture='"+statusForm.getIsItNewFurniture()+"'," +
										"IS_NEW_Facility='"+statusForm.getIsNewEquipment()+"',IS_Spare_required='"+statusForm.getIsSpareNewEquipment()+"',EQUIPMENT_NAME='"+statusForm.getEquipmentName()+"',EQUIPMENT_MAKE='"+statusForm.getEquipmentMake()+"',Component_MAKE='"+statusForm.getComponentMake()+"',OEM_PartNo='"+statusForm.getOemPartNo()+"'," +
								"PR_NUMBER='"+statusForm.getPrNumber()+"',PO_NUMBER='"+statusForm.getPoNumber()+"',UTILIZING_DEPT='"+statusForm.getUtilizingDept()+"',DETAILED_JUSTIFICATION='"+statusForm.getDetailedJustification()+"',DETAILED_SPECIFICATION='"+statusForm.getDetailedJustification()+"',PURPOSE_ID='"+statusForm.getPurposeID()+"',DIMENSION='"+statusForm.getDimension()+"',PACK_SIZE='"+statusForm.getPackSize()+"',equip_Intended='"+statusForm.getEquipIntendedFor()+"'," +
								"REQUESTED_BY='"+statusForm.getRequestedBy()+"',MODIFIED_DATE='"+dateNow+"',MODIFIED_BY='"+user.getEmployeeNo()+"', SAP_CODE_NO='"+statusForm.getSapCodeNo()+"',SAP_CODE_EXISTS='"+statusForm.getSapCodeExists()+"',SAP_CREATION_DATE='"+sapCreationDate+"',SAP_CREATED_BY='"+statusForm.getSapCreatedBy()+"',Approve_Type='Completed',last_approver='"+user.getFullName()+"',pending_approver='No',rejected_flag='',HSN_Code='"+statusForm.getHsnCode()+"' where REQUEST_NO='"+reqId+"'";	 
								
							  int updateMateStatus=ad.SqlExecuteUpdate(updateGeneralMaterial);
							  System.out.println(updateMateStatus);
					            
							  String saveInHistory="insert into material_code_request_history(REQUEST_NO,REQUEST_DATE,LOCATION_ID,MATERIAL_TYPE_ID,STORAGE_LOCATION_ID,MATERIAL_SHORT_NAME,MATERIAL_LONG_NAME," +
								"MATERIAL_GROUP_ID,PURCHASE_GROUP_ID,UNIT_OF_MEAS_ID,APPROXIMATE_VALUE,VALUATION_CLASS,MATERIAL_USED_IN,IS_EQUIPMENT,IS_SPARE,IS_NEW_Equipment,IS_NEW_Furniture,IS_NEW_Facility,IS_Spare_required," +
								"EQUIPMENT_NAME,EQUIPMENT_MAKE,Component_MAKE,OEM_PartNo,PR_NUMBER,PO_NUMBER,UTILIZING_DEPT,DETAILED_JUSTIFICATION,DETAILED_SPECIFICATION,PURPOSE_ID,CREATED_DATE,CREATED_BY,Type,Approve_Type,URL,moc,rating,range,DIMENSION,PACK_SIZE,equip_Intended,Role,HSN_Code)" +
								" values('"+statusForm.getRequestNo()+"','"+reqDate+"','"+locationID+"','"+statusForm.getMaterialTypeId()+"'," +
								"'"+statusForm.getStorageLocationId()+"','"+statusForm.getMaterialShortName()+"','"+statusForm.getMaterialLongName()+"','"+matGroup+"'," +
								"'"+statusForm.getPuchaseGroupId()+"','"+statusForm.getUnitOfMeasId()+"','"+statusForm.getApproximateValue()+"'," +
								"'"+statusForm.getValuationClass()+"','"+statusForm.getMaterialUsedIn()+"','"+statusForm.getIsEquipment()+"','"+statusForm.getIsSpare()+"','"+statusForm.getIsNewEquipment()+"','"+statusForm.getIsItNewFurniture()+"','"+statusForm.getIsItFacility()+"','"+statusForm.getIsSpareNewEquipment()+"'," +
								"'"+statusForm.getEquipmentName()+"','"+statusForm.getEquipmentMake()+"','"+statusForm.getComponentMake()+"','"+statusForm.getOemPartNo()+"','"+statusForm.getPrNumber()+"','"+statusForm.getPoNumber()+"','"+statusForm.getUtilizingDept()+"','"+statusForm.getDetailedJustification()+"'," +
								"'"+statusForm.getDetailedSpecification()+"','"+statusForm.getPurposeID()+"','"+dateNow+"','"+user.getEmployeeNo()+"','OSE','Created','','"+statusForm.getMoc()+"','"+statusForm.getRating()+"','"+statusForm.getRange()+"','"+statusForm.getDimension()+"','"+statusForm.getPackSize()+"','"+statusForm.getEquipIntendedFor()+"','Creator','"+statusForm.getHsnCode()+"')";					
								ad.SqlExecuteUpdate(saveInHistory); 
								
						  }
						  
						  if(matType.equalsIgnoreCase("PPC"))
						  {
							  String updatQuery="update material_code_request set LOCATION_ID='"+statusForm.getLocationId()+"',MATERIAL_TYPE_ID='"+statusForm.getMaterialTypeId()+"',STORAGE_LOCATION_ID='"+statusForm.getStorageLocationId()+"',MATERIAL_SHORT_NAME='"+statusForm.getMaterialShortName()+"'," +
								"MATERIAL_LONG_NAME='"+statusForm.getMaterialLongName()+"',MATERIAL_GROUP_ID='"+statusForm.getMaterialGroupId()+"',DIVISION_ID='"+statusForm.getDivisionId()+"',UNIT_OF_MEAS_ID='"+statusForm.getUnitOfMeasId()+"',PURCHASE_GROUP_ID='"+statusForm.getPuchaseGroupId()+"',is_asset='"+statusForm.getIsAsset()+"',APPROXIMATE_VALUE='"+statusForm.getApproximateValue()+"'," +
								"VALUATION_CLASS='"+statusForm.getValuationClass()+"',DETAILED_JUSTIFICATION='"+statusForm.getDetailedJustification()+"',DETAILED_SPECIFICATION='"+statusForm.getDetailedSpecification()+"',PURPOSE_ID='"+statusForm.getPurposeID()+"',IS_SAS_FORM_AVAILABLE='"+statusForm.getIsSASFormAvailable()+"'," +
								"MODIFIED_DATE='"+dateNow+"',MODIFIED_BY='"+user.getEmployeeNo()+"', SAP_CODE_NO='"+statusForm.getSapCodeNo()+"',SAP_CODE_EXISTS='"+statusForm.getSapCodeExists()+"',SAP_CREATION_DATE='"+sapCreationDate+"',SAP_CREATED_BY='"+statusForm.getSapCreatedBy()+"',Approve_Type='Completed',last_approver='"+user.getFullName()+"',pending_approver='No',rejected_flag='',HSN_Code='"+statusForm.getHsnCode()+"' where REQUEST_NO='"+reqId+"'";
											 
							  int updateMateStatus=ad.SqlExecuteUpdate(updatQuery);
							  
							  String savePromotionalHistory="insert into material_code_request_history(REQUEST_NO,REQUEST_DATE,LOCATION_ID,MATERIAL_TYPE_ID,STORAGE_LOCATION_ID,MATERIAL_SHORT_NAME," +
										"MATERIAL_LONG_NAME,MATERIAL_GROUP_ID,DIVISION_ID,UNIT_OF_MEAS_ID,PURCHASE_GROUP_ID,is_asset,APPROXIMATE_VALUE,VALUATION_CLASS,DETAILED_JUSTIFICATION,DETAILED_SPECIFICATION,PURPOSE_ID,IS_SAS_FORM_AVAILABLE," +
										"CREATED_DATE,CREATED_BY,Type,Approve_Type,URL,Role,HSN_Code) values('"+reqId+"','"+reqDate+"'," +
								"'"+statusForm.getLocationId()+"','12','"+statusForm.getStorageLocationId()+"','"+statusForm.getMaterialShortName()+"','"+statusForm.getMaterialLongName()+"','"+matGroup+"','"+statusForm.getDivisionId()+"','"+statusForm.getUnitOfMeasId()+"','"+statusForm.getPuchaseGroupId()+"','"+statusForm.getIsAsset()+"'," +
								"'"+statusForm.getApproximateValue()+"','"+statusForm.getValuationClass()+"','"+statusForm.getDetailedJustification()+"','"+statusForm.getDetailedSpecification()+"','"+statusForm.getPurposeID()+"','"+statusForm.getIsSASFormAvailable()+"'," +
								"'"+dateNow+"','"+user.getEmployeeNo()+"','PPC','Created','','Creator','"+statusForm.getHsnCode()+"')";
								ad.SqlExecuteUpdate(savePromotionalHistory);
								
						  }
						  
						  if(matType.equalsIgnoreCase("BULK"))
						  {
							  String updateSemiFinished="update material_code_request set STORAGE_LOCATION_ID='"+statusForm.getStorageLocationId()+"',MATERIAL_SHORT_NAME='"+statusForm.getMaterialShortName()+"',MATERIAL_LONG_NAME='"+statusForm.getMaterialLongName()+"'," +
						 		"UNIT_OF_MEAS_ID='"+statusForm.getUnitOfMeasId()+"',COUNTRY_ID='"+statusForm.getCountryId()+"',CUSTOMER_NAME='"+statusForm.getCustomerName()+"',SHELF_LIFE='"+statusForm.getShelfLife()+"',SHELF_LIFE_TYPE='"+statusForm.getShelfType()+"',STANDARD_BATCH_SIZE='"+statusForm.getStandardBatchSize()+"',BATCH_CODE='"+statusForm.getBatchCode()+"',TARGET_WEIGHT='"+statusForm.getTargetWeight()+"',PROD_INSP_MEMO='"+statusForm.getProdInspMemo()+"'," +
						 		"WEIGHT_UOM='"+statusForm.getWeightUOM()+"',RETEST_DAYS='"+statusForm.getRetestDays()+"',RETEST_DAYS_TYPE='"+statusForm.getRetestType()+"',VALUATION_CLASS='"+statusForm.getValuationClass()+"',MODIFIED_DATE='"+dateNow+"'," +
						 		"MODIFIED_BY='"+user.getEmployeeNo()+"',PACK_SIZE='"+statusForm.getPackSize()+"',SAP_CODE_NO='"+statusForm.getSapCodeNo()+"',SAP_CODE_EXISTS='"+statusForm.getSapCodeExists()+"',SAP_CREATION_DATE='"+sapCreationDate+"',SAP_CREATED_BY='"+statusForm.getSapCreatedBy()+"',Approve_Type='Completed',last_approver='"+user.getFullName()+"',pending_approver='No',rejected_flag='' where REQUEST_NO='"+statusForm.getRequestNo()+"'";
							  int updateMateStatus=ad.SqlExecuteUpdate(updateSemiFinished);
							  
							  String inserHistyrySemiFinished="insert into material_code_request_history(REQUEST_NO,REQUEST_DATE,LOCATION_ID,MATERIAL_TYPE_ID,STORAGE_LOCATION_ID,MATERIAL_SHORT_NAME,MATERIAL_LONG_NAME," +
										"MATERIAL_GROUP_ID,UNIT_OF_MEAS_ID,COUNTRY_ID,CUSTOMER_NAME,SHELF_LIFE,SHELF_LIFE_TYPE,STANDARD_BATCH_SIZE,BATCH_CODE,TARGET_WEIGHT,PROD_INSP_MEMO,WEIGHT_UOM,RETEST_DAYS,RETEST_DAYS_TYPE," +
										"VALUATION_CLASS,CREATED_DATE,CREATED_BY,Type,Approve_Type,URL,PACK_SIZE,Role) " +
										"values('"+reqId+"','"+reqstdDate+"','"+locationID+"','"+statusForm.getMaterialTypeId()+"','"+statusForm.getStorageLocationId()+"','"+statusForm.getMaterialShortName()+"','"+statusForm.getMaterialLongName()+"','"+matGroup+"'," +
										"'"+statusForm.getUnitOfMeasId()+"','"+statusForm.getCountryId()+"','"+statusForm.getCustomerName()+"','"+statusForm.getShelfLife()+"','"+statusForm.getShelfType()+"','"+statusForm.getStandardBatchSize()+"','"+statusForm.getBatchCode()+"','"+statusForm.getTargetWeight()+"','"+statusForm.getProdInspMemo()+"'," +
										"'"+statusForm.getWeightUOM()+"','"+statusForm.getRetestDays()+"','"+statusForm.getRetestType()+"','"+statusForm.getValuationClass()+"','"+dateNow+"','"+user.getEmployeeNo()+"','BULK','Created','','"+statusForm.getPackSize()+"','Creator')";
		                              int j=0;
										j=ad.SqlExecuteUpdate(inserHistyrySemiFinished);
						  }
						  if(matType.equalsIgnoreCase("PM"))
							{
					 String updatQuery="update material_code_request set STORAGE_LOCATION_ID='"+statusForm.getStorageLocationId()+"',MATERIAL_TYPE_ID='"+statusForm.getMaterialTypeId()+"',MATERIAL_SHORT_NAME='"+statusForm.getMaterialShortName()+"',MATERIAL_LONG_NAME='"+statusForm.getMaterialLongName()+"'" +
					",MATERIAL_GROUP_ID='"+statusForm.getMaterialGroupId()+"',IS_DMF_MATERIAL='"+statusForm.getIsDMFMaterial()+"',DMF_GRADE_ID='"+statusForm.getDmfGradeId()+"',COS_GRADE_AND_NO='"+statusForm.getCosGradeNo()+"',ADDITIONAL_TEST='"+statusForm.getAdditionalTest()+"',COUNTRY_ID='"+statusForm.getCountryId()+"',CUSTOMER_NAME='"+statusForm.getCustomerName()+"'," +
					"TO_BE_USED_IN_PRODUCTS='"+statusForm.getToBeUsedInProducts()+"'" +",IS_VENDOR_SPECIFIC_MATERIAL='"+statusForm.getIsVendorSpecificMaterial()+"',MFGR_NAME='"+statusForm.getMfgrName()+"',SITE_OF_MANUFACTURE='"+statusForm.getSiteOfManufacture()+"',TEMP_CONDITION='"+statusForm.getTempCondition()+"',STORAGE_CONDITION='"+statusForm.getStorageCondition()+"'," +
					"RETEST_DAYS='"+statusForm.getRetestDays()+"',RETEST_DAYS_TYPE='"+statusForm.getRetestType()+"',DUTY_ELEMENT='"+statusForm.getDutyElement()+"',PACKING_MATERIAL_GROUP='"+statusForm.getPackageMaterialGroup()+"',Type_Of_Material='"+statusForm.getTypeOfMaterial()+"',IS_ARTWORK_REVISION='"+statusForm.getIsArtworkRevision()+"' ,EXISTING_SAP_ITEM_CODE='"+statusForm.getExistingSAPItemCode()+"'" +
					" ,APPROXIMATE_VALUE='"+statusForm.getApproximateValue()+"',ARTWORK_NO='"+statusForm.getArtworkNo()+"',UNIT_OF_MEAS_ID='"+statusForm.getUnitOfMeasId()+"',VALUATION_CLASS='"+statusForm.getValuationClass()+"'," +
					"PURCHASE_GROUP_ID='"+statusForm.getPuchaseGroupId()+"',MODIFIED_DATE='"+dateNow+"',MODIFIED_BY='"+user.getEmployeeNo()+"'," +
					"SAP_CODE_NO='"+statusForm.getSapCodeNo()+"',SAP_CODE_EXISTS='"+statusForm.getSapCodeExists()+"',SAP_CREATION_DATE='"+sapCreationDate+"',SAP_CREATED_BY='"+statusForm.getSapCreatedBy()+"',Approve_Type='Completed',last_approver='"+user.getFullName()+"',pending_approver='No',rejected_flag='',Storage='"+statusForm.getStorage()+"',HSN_Code='"+statusForm.getHsnCode()+"' where REQUEST_NO='"+reqId+"'";
								 
			    		
			    		int updateMateStatus=ad.SqlExecuteUpdate(updatQuery);
			    		
			    		String insertHistryQuery="insert into material_code_request_history(REQUEST_NO,REQUEST_DATE,LOCATION_ID,STORAGE_LOCATION_ID,MATERIAL_TYPE_ID,MATERIAL_SHORT_NAME,MATERIAL_LONG_NAME" +
								",MATERIAL_GROUP_ID,IS_DMF_MATERIAL,DMF_GRADE_ID,COS_GRADE_AND_NO,ADDITIONAL_TEST,COUNTRY_ID,CUSTOMER_NAME,TO_BE_USED_IN_PRODUCTS" +
								",IS_VENDOR_SPECIFIC_MATERIAL,MFGR_NAME,SITE_OF_MANUFACTURE,TEMP_CONDITION,STORAGE_CONDITION,RETEST_DAYS,RETEST_DAYS_TYPE,DUTY_ELEMENT,PACKING_MATERIAL_GROUP,Type_Of_Material,IS_ARTWORK_REVISION ,EXISTING_SAP_ITEM_CODE" +
								" ,APPROXIMATE_VALUE,REQUESTED_BY,CREATED_DATE,CREATED_BY,Attachements,Type,ARTWORK_NO,UNIT_OF_MEAS_ID,VALUATION_CLASS,PURCHASE_GROUP_ID,Approve_Type,URL,REPORT_URL,Role,HSN_Code)" +
								" values('"+reqId+"','"+reqstdDate+"','"+locationID+"','"+statusForm.getStorageLocationId()+"','2','"+statusForm.getMaterialShortName()+"'" +
								",'"+statusForm.getMaterialLongName()+"','"+matGroup+"','"+statusForm.getIsDMFMaterial()+"','"+statusForm.getDmfGradeId()+"','"+statusForm.getCosGradeNo()+"'" +
								",'"+statusForm.getAdditionalTest()+"','"+statusForm.getCountryId()+"','"+statusForm.getCustomerName()+"','"+statusForm.getToBeUsedInProducts()+"','"+statusForm.getIsVendorSpecificMaterial()+"','"+statusForm.getMfgrName()+"','"+statusForm.getSiteOfManufacture()+"','"+statusForm.getTempCondition()+"','"+statusForm.getStorageCondition()+"'" +
								",'"+statusForm.getRetestDays()+"','"+statusForm.getRetestType()+"','"+statusForm.getDutyElement()+"','"+statusForm.getPackageMaterialGroup()+"','"+statusForm.getTypeOfMaterial()+"','"+statusForm.getIsArtworkRevision()+"','"+statusForm.getExistingSAPItemCode()+"','"+statusForm.getApproximateValue()+"'" +
								",'"+user.getEmployeeNo()+"','"+dateNow+"','"+user.getEmployeeNo()+"','','PM','"+statusForm.getArtworkNo()+"','"+statusForm.getUnitOfMeasId()+"','"+statusForm.getValuationClass()+"','"+statusForm.getPuchaseGroupId()+"','Created','','','Creator','"+statusForm.getHsnCode()+"') ";	
								int j=0;
						    	j=ad.SqlExecuteUpdate(insertHistryQuery);
			           
				       }
					  if(matType.equalsIgnoreCase("FG") ||matType.equalsIgnoreCase("HAWA"))
						{
						  String updateFinishedProduct="update material_code_request set MANUFACTURED_AT='"+statusForm.getManufacturedAt()+"',STORAGE_LOCATION_ID='"+statusForm.getStorageLocationId()+"',MATERIAL_SHORT_NAME='"+statusForm.getMaterialShortName()+"',MATERIAL_LONG_NAME='"+statusForm.getMaterialLongName()+"'" +
							",MATERIAL_GROUP_ID='"+statusForm.getMaterialGroupId()+"',VALUATION_CLASS='"+statusForm.getValuationClass()+"',COUNTRY_ID='"+statusForm.getCountryId()+"',CUSTOMER_NAME='"+statusForm.getCustomerName()+"',SHELF_LIFE='"+statusForm.getShelfLife()+"',SHELF_LIFE_TYPE='"+statusForm.getShelfType()+"',STANDARD_BATCH_SIZE='"+statusForm.getStandardBatchSize()+"',BATCH_CODE='"+statusForm.getBatchCode()+"',SALEABLE_OR_SAMPLE='"+statusForm.getSaleableOrSample()+"',DOMESTIC_OR_EXPORTS='"+statusForm.getDomesticOrExports()+"',SALES_PACK_ID='"+statusForm.getSalesPackId()+"',PACK_TYPE_ID='"+statusForm.getPackTypeId()+"',SALES_UNIT_OF_MEAS_ID='"+statusForm.getSalesUnitOfMeaseurement()+"',DIVISION_ID='"+statusForm.getDivisionId()+"',THERAPEUTIC_SEGMENT_ID='"+statusForm.getTherapeuticSegmentID()+"'," +
							"BRAND_ID='"+statusForm.getBrandID()+"',STRENGTH_ID='"+statusForm.getSrengthId()+"',GENERIC_NAME='"+statusForm.getGenericName()+"',PROD_INSP_MEMO='"+statusForm.getProdInspMemo()+"',GROSS_WEIGHT='"+statusForm.getGrossWeight()+"',NET_WEIGHT='"+statusForm.getNetWeight()+"',WEIGHT_UOM='"+statusForm.getWeightUOM()+"',DIMENSION='"+statusForm.getDimension()+"',UNIT_OF_MEAS_ID='"+statusForm.getUnitOfMeasId()+"',PURCHASE_GROUP_ID='"+statusForm.getPuchaseGroupId()+"'," +
							" MODIFIED_DATE='"+dateNow+"',MODIFIED_BY='"+user.getEmployeeNo()+"',SAP_CODE_NO='"+statusForm.getSapCodeNo()+"',SAP_CODE_EXISTS='"+statusForm.getSapCodeExists()+"',SAP_CREATION_DATE='"+sapCreationDate+"',SAP_CREATED_BY='"+statusForm.getSapCreatedBy()+"',Approve_Type='Completed',last_approver='"+user.getFullName()+"',pending_approver='No',rejected_flag='',Storage='"+statusForm.getStorage()+"',HSN_Code='"+statusForm.getHsnCode()+"' where REQUEST_NO='"+reqId+"'";	 
						  int updateMateStatus=ad.SqlExecuteUpdate(updateFinishedProduct);
						  
						  String updateFinishedProduct1="update material_code_request set SAP_CODE_NO='"+statusForm.getSapCodeNo()+"',SAP_CODE_EXISTS='"+statusForm.getSapCodeExists()+"',SAP_CREATION_DATE='"+sapCreationDate+"',SAP_CREATED_BY='"+statusForm.getSapCreatedBy()+"',Approve_Type='Completed',last_approver='"+user.getFullName()+"',pending_approver='No',rejected_flag='' where REQUEST_NO='"+reqId+"' ";
						  updateMateStatus=ad.SqlExecuteUpdate(updateFinishedProduct1);
						  
						  
						  
						  String saveFinishedProduct="insert into material_code_request_history(REQUEST_NO,REQUEST_DATE,LOCATION_ID,MATERIAL_TYPE_ID,MANUFACTURED_AT,STORAGE_LOCATION_ID,MATERIAL_SHORT_NAME,MATERIAL_LONG_NAME" +
								  ",MATERIAL_GROUP_ID,VALUATION_CLASS,COUNTRY_ID,CUSTOMER_NAME,SHELF_LIFE,SHELF_LIFE_TYPE,STANDARD_BATCH_SIZE,BATCH_CODE,SALEABLE_OR_SAMPLE,DOMESTIC_OR_EXPORTS,SALES_PACK_ID,PACK_TYPE_ID,SALES_UNIT_OF_MEAS_ID,DIVISION_ID,THERAPEUTIC_SEGMENT_ID," +
								  "BRAND_ID,STRENGTH_ID,GENERIC_NAME,PROD_INSP_MEMO,GROSS_WEIGHT,NET_WEIGHT,WEIGHT_UOM,DIMENSION,UNIT_OF_MEAS_ID,PURCHASE_GROUP_ID,CREATED_DATE,CREATED_BY," +
								  "Type,Approve_Type,URL,Tax_Classification,Material_Pricing,Role,HSN_Code) values('"+reqId+"','"+reqstdDate+"','"+locationID+"','"+statusForm.getMaterialTypeId()+"','"+statusForm.getManufacturedAt()+"','"+statusForm.getStorageLocationId()+"','"+statusForm.getMaterialShortName()+"','"+statusForm.getMaterialLongName()+"','"+statusForm.getMaterialGroupId()+"','"+statusForm.getValuationClass()+"','"+statusForm.getCountryId()+"'" +
								  ",'"+statusForm.getCustomerName()+"','"+statusForm.getShelfLife()+"','"+statusForm.getShelfType()+"','"+statusForm.getStandardBatchSize()+"','"+statusForm.getBatchCode()+"','"+statusForm.getSaleableOrSample()+"','"+matgrp+"','"+statusForm.getSalesPackId()+"','"+statusForm.getPackTypeId()+"','"+statusForm.getSalesUnitOfMeaseurement()+"','"+statusForm.getDivisionId()+"','"+statusForm.getTherapeuticSegmentID()+"','"+statusForm.getBrandID()+"'" +
								  ",'"+statusForm.getSrengthId()+"','"+statusForm.getGenericName()+"','"+statusForm.getProdInspMemo()+"','"+statusForm.getGrossWeight()+"','"+statusForm.getNetWeight()+"','"+statusForm.getWeightUOM()+"','"+statusForm.getDimension()+"','"+statusForm.getUnitOfMeasId()+"','"+statusForm.getPuchaseGroupId()+"','"+dateNow+"','"+user.getEmployeeNo()+"','"+matType+"','Submited','','"+statusForm.getTaxClassification()+"','"+statusForm.getMaterialPricing()+"','Creator','"+statusForm.getHsnCode()+"')";
								  int j=0;
								  j=ad.SqlExecuteUpdate(saveFinishedProduct);
						}
						if(matType.equalsIgnoreCase("RM"))
						{
			    		String updatQuery="update material_code_request set  STORAGE_LOCATION_ID='"+statusForm.getStorageLocationId()+"',MATERIAL_SHORT_NAME='"+statusForm.getMaterialShortName()+"'," +
						"MATERIAL_LONG_NAME='"+statusForm.getMaterialLongName()+"',MATERIAL_GROUP_ID='"+statusForm.getMaterialGroupId()+"',PHARMACOP_NAME='"+statusForm.getPharmacopName()+"',PHARMACOP_GRADE='"+statusForm.getPharmacopGrade()+"',GENERIC_NAME='"+statusForm.getGenericName()+"',SYNONYM='"+statusForm.getSynonym()+"',PHARMACOP_SPECIFICATION='"+statusForm.getPharmacopSpecification()+"'" +
						",IS_DMF_MATERIAL='"+statusForm.getIsDMFMaterial()+"',DMF_GRADE_ID='"+statusForm.getDmfGradeId()+"',MATERIAL_GRADE='"+statusForm.getMaterialGrade()+"',COS_GRADE_AND_NO='"+statusForm.getCosGradeNo()+"',ADDITIONAL_TEST='"+statusForm.getAdditionalTest()+"',COUNTRY_ID='"+statusForm.getCountryId()+"',CUSTOMER_NAME='"+statusForm.getCustomerName()+"'" +
						",TO_BE_USED_IN_PRODUCTS='"+statusForm.getToBeUsedInProducts()+"',IS_VENDOR_SPECIFIC_MATERIAL='"+statusForm.getIsVendorSpecificMaterial()+"',MFGR_NAME='"+statusForm.getMfgrName()+"',SITE_OF_MANUFACTURE='"+statusForm.getSiteOfManufacture()+"',TEMP_CONDITION='"+statusForm.getTempCondition()+"',STORAGE_CONDITION='"+statusForm.getStorageCondition()+"',SHELF_LIFE='"+statusForm.getShelfLife()+"',SHELF_LIFE_TYPE='"+statusForm.getShelfLifeType()+"',DUTY_ELEMENT='"+statusForm.getDutyElement()+"'" +
						",RETEST_DAYS='"+statusForm.getRetestDays()+"',RETEST_DAYS_TYPE='"+statusForm.getRetestType()+"',VALUATION_CLASS='"+statusForm.getValuationClass()+"',APPROXIMATE_VALUE='"+statusForm.getApproximateValue()+"',UNIT_OF_MEAS_ID='"+statusForm.getUnitOfMeasId()+"',PURCHASE_GROUP_ID='"+statusForm.getPuchaseGroupId()+"'" +
						",MODIFIED_DATE='"+dateNow+"',MODIFIED_BY='"+user.getEmployeeNo()+"',SAP_CODE_NO='"+statusForm.getSapCodeNo()+"',SAP_CODE_EXISTS='"+statusForm.getSapCodeExists()+"',SAP_CREATION_DATE='"+sapCreationDate+"',SAP_CREATED_BY='"+statusForm.getSapCreatedBy()+"',Approve_Type='Completed',last_approver='"+user.getFullName()+"',pending_approver='No',rejected_flag='',Storage='"+statusForm.getStorage()+"',HSN_Code='"+statusForm.getHsnCode()+"' where REQUEST_NO='"+reqId+"'";
			            int updateMateStatus=ad.SqlExecuteUpdate(updatQuery);
			            
			            String	insertHistryQuery="INSERT INTO material_code_request_history(REQUEST_NO,REQUEST_DATE,LOCATION_ID,STORAGE_LOCATION_ID,MATERIAL_TYPE_ID,MATERIAL_SHORT_NAME," +
			            		"MATERIAL_LONG_NAME,MATERIAL_GROUP_ID,PHARMACOP_NAME,PHARMACOP_GRADE,GENERIC_NAME,SYNONYM,PHARMACOP_SPECIFICATION" +
			            		",IS_DMF_MATERIAL,DMF_GRADE_ID,MATERIAL_GRADE,COS_GRADE_AND_NO,ADDITIONAL_TEST,COUNTRY_ID,CUSTOMER_NAME" +
			            		",TO_BE_USED_IN_PRODUCTS,IS_VENDOR_SPECIFIC_MATERIAL,MFGR_NAME,SITE_OF_MANUFACTURE,TEMP_CONDITION,STORAGE_CONDITION,SHELF_LIFE,SHELF_LIFE_TYPE,DUTY_ELEMENT" +
			            		",RETEST_DAYS,RETEST_DAYS_TYPE,VALUATION_CLASS,APPROXIMATE_VALUE,UNIT_OF_MEAS_ID,PURCHASE_GROUP_ID " +
			            		",CREATED_DATE,CREATED_BY,Attachements,Type,Approve_Type,URL,REPORT_URL,Role,HSN_Code) values('"+reqId+"','"+reqstdDate+"'," +
			            		"'"+locationID+"','"+statusForm.getStorageLocationId()+"','"+statusForm.getMaterialTypeId()+"','"+statusForm.getMaterialShortName()+"'," +
			            		"'"+statusForm.getMaterialLongName()+"','"+matGroup+"','"+statusForm.getPharmacopName()+"','"+statusForm.getPharmacopGrade()+"','"+statusForm.getGenericName()+"','"+statusForm.getSynonym()+"','"+statusForm.getPharmacopSpecification()+"'" +
			            		",'"+statusForm.getIsDMFMaterial()+"','"+statusForm.getDmfGradeId()+"','"+statusForm.getMaterialGrade()+"','"+statusForm.getCosGradeNo()+"','"+statusForm.getAdditionalTest()+"','"+statusForm.getCountryId()+"','"+statusForm.getCustomerName()+"'" +
			            		",'"+statusForm.getToBeUsedInProducts()+"','"+statusForm.getIsVendorSpecificMaterial()+"','"+statusForm.getMfgrName()+"','"+statusForm.getSiteOfManufacture()+"','"+statusForm.getTempCondition()+"','"+statusForm.getStorageCondition()+"','"+statusForm.getShelfLife()+"',"
			            		+ "'"+statusForm.getShelfLifeType()+"','"+statusForm.getDutyElement()+"','"+statusForm.getRetestDays()+"','"+statusForm.getRetestType()+"','"+statusForm.getValuationClass()+"','"+statusForm.getApproximateValue()+"','"+statusForm.getUnitOfMeasId()+"','"+statusForm.getPuchaseGroupId()+"','"+dateNow+"','"+user.getEmployeeNo()+"','','RM','Created','','','Creator','"+statusForm.getHsnCode()+"')";
			            		int j=0;
			            		   j=ad.SqlExecuteUpdate(insertHistryQuery);
						}
						
						//save data in material code search table
						String getSapCode="select l.LOCATION_CODE,MATERIAL_TYPE_ID,mg.STXT,STORAGE_LOCATION_ID,MATERIAL_SHORT_NAME,MATERIAL_LONG_NAME," +
						"SAP_CODE_NO,APPROXIMATE_VALUE,UNIT_OF_MEAS_ID,SAP_CREATION_DATE,REQUEST_DATE from material_code_request AS m,MATERIAL_GROUP as mg,Location as l " +
						"where REQUEST_NO='"+reqId+"' and mg.MATERIAL_GROUP_ID=m.MATERIAL_GROUP_ID and l.LOCID=m.LOCATION_ID";
						ResultSet rsSapCode=ad.selectQuery(getSapCode);
						while(rsSapCode.next()){
							String  locationName=rsSapCode.getString("LOCATION_CODE");
							String materialType=rsSapCode.getString("MATERIAL_TYPE_ID");
							String materialGroup=rsSapCode.getString("STXT");
							String storageLocation=rsSapCode.getString("STORAGE_LOCATION_ID");
							String materialShortname=rsSapCode.getString("MATERIAL_SHORT_NAME");
							String materialLongname=rsSapCode.getString("MATERIAL_LONG_NAME");
							String unitOfMesurement=rsSapCode.getString("UNIT_OF_MEAS_ID");
							String approximatevalue=rsSapCode.getString("APPROXIMATE_VALUE");
							String sapCodeNo=rsSapCode.getString("SAP_CODE_NO");
							String sapcreationdate=rsSapCode.getString("SAP_CREATION_DATE");
							String requestedDate=rsSapCode.getString("REQUEST_DATE");
							if(statusForm.getSapCodeExists().equals("0")){
						String saveData="INSERT INTO Material_Code_Search(LOCATION_ID,MATERIAL_TYPE,MATERIAL_GROUP,STORAGE_LOC,SAP_CODE_NO," +
						"MATERIAL_SHORT_NAME,MATERIAL_LONG_NAME,UNIT_OF_MEAS_ID,APPROXIMATE_PRICE,SAP_CREATION_DATE,CREATED_DATE) " +
						"VALUES('"+locationName+"','"+materialType+"','"+materialGroup+"','"+storageLocation+"','"+sapCodeNo+"','"+materialShortname+"'," +
						"'"+materialLongname+"','"+unitOfMesurement+"','"+approximatevalue+"','"+sapcreationdate+"','"+requestedDate+"')";
						int a=ad.SqlExecuteUpdate(saveData);
						System.out.println(a);
						}
						}
						 ad.connClose();
						
						EMailer email=new EMailer();
						String approvermail="";
						email.sendMailToMaterialCodeRequester(request, approvermail, reqId, "Material Code Request", user.getEmployeeNo(), requesterID, reqStatus);
				    }
				}//end of creator
				else{
				    String nextAppr="";
				    String nextPar1="";
				    String nextPar2="";
				    checkStatus=0;
					String getNextApprover="select Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and Priority='"+(apprverPriority+1)+"'";
					ResultSet rsNextApp=ad.selectQuery(getNextApprover);
					while(rsNextApp.next())
					{  
						checkStatus=1;
						nextAppr=rsNextApp.getString("Approver_Id");
						nextPar1=rsNextApp.getString("Parllel_Approver_1");
						nextPar2=rsNextApp.getString("Parllel_Approver_2");
					}
					if(checkStatus==0)
					{
						getNextApprover="select Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers where Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' and Priority='"+(apprverPriority+1)+"'";
						rsNextApp=ad.selectQuery(getNextApprover);
						while(rsNextApp.next())
						{  
							checkStatus=1;
							nextAppr=rsNextApp.getString("Approver_Id");
							nextPar1=rsNextApp.getString("Parllel_Approver_1");
							nextPar2=rsNextApp.getString("Parllel_Approver_2");
						}
					}
				String empNo=user.getEmployeeNo();
					if(empNo.equalsIgnoreCase(approver))
					{
						String updateStatus="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+user.getEmployeeNo()+"'," +
						"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',approved_date='"+dateNow+"',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Req_Type='Material Master' and Pending_Approver='"+user.getEmployeeNo()+"'";
					    int saveStatus=0;
					    saveStatus=ad.SqlExecuteUpdate(updateStatus);
					    
					    if(!(parllelAppr1.equalsIgnoreCase("")))
					    {
					    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr1+"'," +
								"Pending_Approver='',Approved_Persons='"+parllelAppr1+"',approved_date='"+dateNow+"',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Req_Type='Material Master' and Pending_Approver='"+parllelAppr1+"'";
							    ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
					    }
					    if(!(parllelAppr2.equalsIgnoreCase("")))
					    {
					    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr2+"'," +
								"Pending_Approver='',Approved_Persons='"+parllelAppr2+"',approved_date='"+dateNow+"',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Req_Type='Material Master' and Pending_Approver='"+parllelAppr2+"'";
							    ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
					    }
					    if(saveStatus>0)
					    {
					    	 statusForm.setMessage2("Request Is Approved Successfully");
					    	 
					    	String recordStatus="select * from All_Request where Req_Id='"+reqId+"' and Approved_Persons='"+user.getEmployeeNo()+"'";
					    	ResultSet rsRecDet=ad.selectQuery(recordStatus);
					    	while(rsRecDet.next())
					    	{
					    		requestNo=rsRecDet.getString("Requester_Name");
					    		reqDate=rsRecDet.getString("Req_Date");
					    		reqesterID=rsRecDet.getString("Requester_Name");
					    	}
					    	System.out.println(userRole);
					    	if(userRole.equalsIgnoreCase("Accounts"))
					    	{
					    	//update valuation class
					    	String updateMaterial="update material_code_request set VALUATION_CLASS='"+statusForm.getValuationClass()+"',last_approver='"+user.getFullName()+"',pending_approver='"+nextAppr+"' where REQUEST_NO='"+reqId+"'";
					    	int check=ad.SqlExecuteUpdate(updateMaterial);
					    	
					    		
					    		
					    	}
					    	if(userRole.equalsIgnoreCase("Creator"))
					    	{
					    		 String sapCreationDate=statusForm.getSapCreationDate();
								  String b[]=sapCreationDate.split("/");
								  sapCreationDate=b[2]+"-"+b[1]+"-"+b[0];
					    	
					    		String updatQuery="update material_code_request set  STORAGE_LOCATION_ID='"+statusForm.getStorageLocationId()+"',MATERIAL_SHORT_NAME='"+statusForm.getMaterialShortName()+"'," +
								"MATERIAL_LONG_NAME='"+statusForm.getMaterialLongName()+"',MATERIAL_GROUP_ID='"+statusForm.getMaterialGroupId()+"',PHARMACOP_NAME='"+statusForm.getPharmacopName()+"',PHARMACOP_GRADE='"+statusForm.getPharmacopGrade()+"',GENERIC_NAME='"+statusForm.getGenericName()+"',SYNONYM='"+statusForm.getSynonym()+"',PHARMACOP_SPECIFICATION='"+statusForm.getPharmacopSpecification()+"'" +
								",IS_DMF_MATERIAL='"+statusForm.getIsDMFMaterial()+"',DMF_GRADE_ID='"+statusForm.getDmfGradeId()+"',MATERIAL_GRADE='"+statusForm.getMaterialGrade()+"',COS_GRADE_AND_NO='"+statusForm.getCosGradeNo()+"',ADDITIONAL_TEST='"+statusForm.getAdditionalTest()+"',COUNTRY_ID='"+statusForm.getCountryId()+"',CUSTOMER_NAME='"+statusForm.getCustomerName()+"'" +
								",TO_BE_USED_IN_PRODUCTS='"+statusForm.getToBeUsedInProducts()+"',IS_VENDOR_SPECIFIC_MATERIAL='"+statusForm.getIsVendorSpecificMaterial()+"',MFGR_NAME='"+statusForm.getMfgrName()+"',SITE_OF_MANUFACTURE='"+statusForm.getSiteOfManufacture()+"',TEMP_CONDITION='"+statusForm.getTempCondition()+"',STORAGE_CONDITION='"+statusForm.getStorageCondition()+"',SHELF_LIFE='"+statusForm.getShelfLife()+"',SHELF_LIFE_TYPE='"+statusForm.getShelfLifeType()+"',DUTY_ELEMENT='"+statusForm.getDutyElement()+"'" +
								",RETEST_DAYS='"+statusForm.getRetestDays()+"',RETEST_DAYS_TYPE='"+statusForm.getRetestType()+"',VALUATION_CLASS='"+statusForm.getValuationClass()+"',APPROXIMATE_VALUE='"+statusForm.getApproximateValue()+"',UNIT_OF_MEAS_ID='"+statusForm.getUnitOfMeasId()+"',PURCHASE_GROUP_ID='"+statusForm.getPuchaseGroupId()+"'" +
								",MODIFIED_DATE='"+dateNow+"',MODIFIED_BY='"+user.getEmployeeNo()+"',SAP_CODE_NO='"+statusForm.getSapCodeNo()+"',SAP_CODE_EXISTS='"+statusForm.getSapCodeExists()+"',SAP_CREATION_DATE='"+sapCreationDate+"',SAP_CREATED_BY='"+statusForm.getSapCreatedBy()+"',last_approver='"+user.getFullName()+"',pending_approver='No',HSN_Code='"+statusForm.getHsnCode()+"' where REQUEST_NO='"+reqId+"'";
					    	}
					    	
					    	//update last Approver and Pending Approver
					    	//GET pending approvers
					    	if(matType.equals("FG")||matType.equals("HAWA")){
					    	 matDetails="select loc.LOCATION_CODE,mat.Type,mat.CREATED_BY,mat.DOMESTIC_OR_EXPORTS from material_code_request as mat,Location as loc  where mat.REQUEST_NO='"+reqId+"' and mat.LOCATION_ID=loc.LOCID";
							 rsDetails=ad.selectQuery(matDetails);
							while(rsDetails.next())
							{
								
								matGroup=rsDetails.getString("DOMESTIC_OR_EXPORTS");
							}
					 		if(matGroup.equals("D"))
					 			matGroup="Domestic";
					 		if(matGroup.equals("E"))
					 			matGroup="Export";
					 		if(matGroup.equals("V"))
					 			matGroup="V";
					    }
					    	if(!(userRole.equalsIgnoreCase("Creator")))
					    	{
					    	checkStatus=0;
					    	String pendingApprovers="";
					    	String nextApprovers="";
					    	getNextApprover="select emp.EMP_FULLNAME, Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers as mat,emp_official_info AS emp where " +
							"Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
					ResultSet rsPendignApp=ad.selectQuery(getNextApprover);
					while(rsPendignApp.next())
					{  
						checkStatus=1;
						pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
					}
					if(checkStatus==0)
					{
						getNextApprover="select emp.EMP_FULLNAME, Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers as mat,emp_official_info AS emp where " +
								"Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
						rsPendignApp=ad.selectQuery(getNextApprover);
						while(rsPendignApp.next())
						{  
							checkStatus=1;
							pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
						}
					}
							if(!(pendingApprovers.equalsIgnoreCase(""))){
								pendingApprovers=pendingApprovers.substring(0, (pendingApprovers.length()-2));	
							}
							
							String updateMaterial="update material_code_request set last_approver='"+user.getFullName()+"',pending_approver='"+pendingApprovers+"',Approve_Type='In Process' where REQUEST_NO='"+reqId+"'";
					    	int check=ad.SqlExecuteUpdate(updateMaterial);
					    	}
					    	// insert record to next approver
					    	String insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
					    	" values('"+reqId+"','Material Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextAppr+"','No','"+reqesterID+"','','"+matType+"')";
					    	ad.SqlExecuteUpdate(insertAllRequest);
					    	ad.connClose();
					    	EMailer email = new EMailer();
							String approvermail="";
							 email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Material Code Request", nextAppr, reqesterID);
					   
					    	if(!(nextPar1.equalsIgnoreCase(""))){
					    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
						    	" values('"+reqId+"','Material Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar1+"','No','"+reqesterID+"','','"+matType+"')";
						    	ad.SqlExecuteUpdate(insertAllRequest);
						    	ad.connClose();
						    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Material Code Request", nextPar1, reqesterID);
					 
					    	}
					    	if(!(nextPar2.equalsIgnoreCase(""))){
					    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
						    	" values('"+reqId+"','Material Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar2+"','No','"+reqesterID+"','','"+matType+"')";
						    	ad.SqlExecuteUpdate(insertAllRequest);
						    	ad.connClose();
						    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Material Code Request", nextPar2, reqesterID);
					    
					    	}
					    	
					    }else{
					    	statusForm.setMessage("Error..Request Is Not Approved");
					    }
						
					}if(!(parllelAppr1.equalsIgnoreCase(""))){
						
						if(empNo.equalsIgnoreCase(parllelAppr1))
						{
							String updateStatus="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+user.getEmployeeNo()+"'," +
							"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',approved_date='"+dateNow+"',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Req_Type='Material Master' and Pending_Approver='"+user.getEmployeeNo()+"'";
						    int saveStatus=0;
						    saveStatus=ad.SqlExecuteUpdate(updateStatus);
						    
						    String updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+approver+"'," +
							"Pending_Approver='',Approved_Persons='"+approver+"',approved_date='"+dateNow+"',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Req_Type='Material Master' and Pending_Approver='"+approver+"'";
						    ad.SqlExecuteUpdate(updateStatusForApprover); 
						    
						    if(!(parllelAppr2.equalsIgnoreCase("")))
						    {
						    	  updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr2+"'," +
									"Pending_Approver='',Approved_Persons='"+parllelAppr2+"',approved_date='"+dateNow+"',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Req_Type='Material Master' and Pending_Approver='"+parllelAppr2+"'";
								    ad.SqlExecuteUpdate(updateStatusForApprover); 
						    }
						   
						    if(saveStatus>0)
						    {
						    	statusForm.setMessage2("Request Is Approved Successfully");
						    	checkStatus=0;
						    	String pendingApprovers="";
						    	String nextApprovers="";
						    	getNextApprover="select emp.EMP_FULLNAME, Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers as mat,emp_official_info AS emp where " +
								"Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
						ResultSet rsPendignApp=ad.selectQuery(getNextApprover);
						while(rsPendignApp.next())
						{  
							checkStatus=1;
							pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
						}
						if(checkStatus==0)
						{
							getNextApprover="select emp.EMP_FULLNAME, Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers as mat,emp_official_info AS emp where " +
									"Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
							rsPendignApp=ad.selectQuery(getNextApprover);
							while(rsPendignApp.next())
							{  
								checkStatus=1;
								pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
							}
						}
								if(!(pendingApprovers.equalsIgnoreCase(""))){
									pendingApprovers=pendingApprovers.substring(0, (pendingApprovers.length()-2));	
								}
								
								//LAST APPNAME;
								String LastAppname="";
								String approvername="Select EMP_FULLNAME from  emp_official_info where pernr='"+approver+"'";
								ResultSet rsapprovername=ad.selectQuery(approvername);
								while(rsapprovername.next())
								{  
									LastAppname=rsapprovername.getString("EMP_FULLNAME");
								}
						    	
						    	String updateMaterial="update material_code_request set last_approver='"+LastAppname+"',pending_approver='"+pendingApprovers+"',Approve_Type='In Process' where REQUEST_NO='"+reqId+"'";
						    	int check=ad.SqlExecuteUpdate(updateMaterial);
						    	
						    	
						    	String recordStatus="select * from All_Request where Req_Id='"+reqId+"' and Approved_Persons='"+user.getEmployeeNo()+"'";
						    	ResultSet rsRecDet=ad.selectQuery(recordStatus);
						    	while(rsRecDet.next())
						    	{
						    		requestNo=rsRecDet.getString("Requester_Name");
						    		reqDate=rsRecDet.getString("Req_Date");
						    		reqesterID=rsRecDet.getString("Requester_Name");
						    	}
						    	
						    	// insert record to next approver
						    	String insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
						    	" values('"+reqId+"','Material Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextAppr+"','No','"+reqesterID+"','','"+matType+"')";
						    	ad.SqlExecuteUpdate(insertAllRequest);
						    	EMailer email = new EMailer();
						    	String approvermail="";
						    	 email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Material Code Request", nextAppr, reqesterID);
						    	if(!(nextPar1.equalsIgnoreCase(""))){
						    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
							    	" values('"+reqId+"','Material Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar1+"','No','"+reqesterID+"','','"+matType+"')";
							    	ad.SqlExecuteUpdate(insertAllRequest);
							    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Material Code Request", nextPar1, reqesterID);
						    	}
						    	if(!(nextPar2.equalsIgnoreCase(""))){
						    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
							    	" values('"+reqId+"','Material Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar2+"','No','"+reqesterID+"','','"+matType+"')";
							    	ad.SqlExecuteUpdate(insertAllRequest);
							    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Material Code Request", nextPar2, reqesterID);
						    	}
						    	
						    	
						    }else{
						    	statusForm.setMessage("Error..Request Is Not Approved");
						    }
							
						}
						
						
					}
					if(!(parllelAppr2.equalsIgnoreCase(""))){

						
						if(empNo.equalsIgnoreCase(parllelAppr2)){
							String updateStatus="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+user.getEmployeeNo()+"'," +
							"Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',approved_date='"+dateNow+"',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Req_Type='Material Master' and Pending_Approver='"+user.getEmployeeNo()+"'";
						    int saveStatus=0;
						    saveStatus=ad.SqlExecuteUpdate(updateStatus);
						    String updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+approver+"'," +
							"Pending_Approver='',Approved_Persons='"+approver+"',approved_date='"+dateNow+"',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Req_Type='Material Master' and Pending_Approver='"+approver+"'";
						    ad.SqlExecuteUpdate(updateStatusForApprover); 
						    
						    if(!(parllelAppr1.equalsIgnoreCase("")))
						    {
						    	  updateStatusForApprover="update All_Request set Req_Status='Approved',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr1+"'," +
									"Pending_Approver='',Approved_Persons='"+parllelAppr1+"',approved_date='"+dateNow+"',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Req_Type='Material Master' and Pending_Approver='"+parllelAppr1+"'";
								    ad.SqlExecuteUpdate(updateStatusForApprover); 
						    }
						    if(saveStatus>0)
						    {
						    	statusForm.setMessage2("Request Is Approved Successfully");
						    	
						    	checkStatus=0;
						    	String pendingApprovers="";
						    	String nextApprovers="";
						    	getNextApprover="select emp.EMP_FULLNAME, Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers as mat,emp_official_info AS emp where " +
								"Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
						ResultSet rsPendignApp=ad.selectQuery(getNextApprover);
						while(rsPendignApp.next())
						{  
							checkStatus=1;
							pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
						}
						if(checkStatus==0)
						{
							getNextApprover="select emp.EMP_FULLNAME, Approver_Id,Parllel_Approver_1,Parllel_Approver_2 from  Material_Approvers as mat,emp_official_info AS emp where " +
									"Location='"+location+"' AND  Material_Type='"+matType+"' AND Material_Group='' and mat.Approver_Id=emp.PERNR and Priority>'"+apprverPriority+"' order by Priority";
							rsPendignApp=ad.selectQuery(getNextApprover);
							while(rsPendignApp.next())
							{  
								checkStatus=1;
								pendingApprovers=pendingApprovers+rsPendignApp.getString("EMP_FULLNAME")+" , ";
							}
						}
								if(!(pendingApprovers.equalsIgnoreCase(""))){
									pendingApprovers=pendingApprovers.substring(0, (pendingApprovers.length()-2));	
								}
								
								//LAST APPNAME;
								String LastAppname="";
								String approvername="Select EMP_FULLNAME from  emp_official_info where pernr='"+approver+"'";
								ResultSet rsapprovername=ad.selectQuery(approvername);
								while(rsapprovername.next())
								{  
									LastAppname=rsapprovername.getString("EMP_FULLNAME");
								}
						    	
						    	String updateMaterial="update material_code_request set last_approver='"+LastAppname+"',pending_approver='"+pendingApprovers+"',Approve_Type='In Process' where REQUEST_NO='"+reqId+"'";
						    	int check=ad.SqlExecuteUpdate(updateMaterial);
						    	 
						    	String recordStatus="select * from All_Request where Req_Id='"+reqId+"' and Approved_Persons='"+user.getEmployeeNo()+"'";
						    	ResultSet rsRecDet=ad.selectQuery(recordStatus);
						    	while(rsRecDet.next())
						    	{
						    		requestNo=rsRecDet.getString("Requester_Name");
						    		reqDate=rsRecDet.getString("Req_Date");
						    		reqesterID=rsRecDet.getString("Requester_Name");
						    	}
						    	
						    	// insert record to next approver
						    	String insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
						    	" values('"+reqId+"','Material Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextAppr+"','No','"+reqesterID+"','','"+matType+"')";
						    	ad.SqlExecuteUpdate(insertAllRequest);
						    	EMailer email = new EMailer();
						    	String approvermail="";
						    	 email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Material Code Request", nextAppr, reqesterID);
						    	if(!(nextPar1.equalsIgnoreCase(""))){
						    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
							    	" values('"+reqId+"','Material Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar1+"','No','"+reqesterID+"','','"+matType+"')";
							    	ad.SqlExecuteUpdate(insertAllRequest);
							    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Material Code Request", nextPar1, reqesterID);
						    	}
						    	if(!(nextPar2.equalsIgnoreCase(""))){
						    		 insertAllRequest="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments,type)" +
							    	" values('"+reqId+"','Material Master','"+requestNo+"','"+reqDate+"','Pending','No','"+nextPar2+"','No','"+reqesterID+"','','"+matType+"')";
							    	ad.SqlExecuteUpdate(insertAllRequest);
							    	email.sendMailToNextSequentialApprover(request, approvermail, reqId, "Material Code Request", nextPar2, reqesterID);
						    	}
						    	
						    	
						    }else{
						    	statusForm.setMessage("Error..Request Is Not Approved");
						    }
							
						}
					}
			     
				}
					
				//set reject buttons  	
					
				
					
					
					
				}//material reject
				else{
					String updateStatus="update All_Request set Req_Status='Rejected',Comments='"+statusForm.getComments()+"',Last_Approver='"+approver+"'," +
					"Pending_Approver='',Approved_Persons='"+approver+"',rejected_date='"+dateNow+"',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Req_Type='Material Master' and Pending_Approver='"+approver+"'";
				    int saveStatus=0;
				    saveStatus=ad.SqlExecuteUpdate(updateStatus);
				    if(!(parllelAppr1.equalsIgnoreCase("")))
				    {
				    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Rejected',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr1+"'," +
							"Pending_Approver='',Approved_Persons='"+parllelAppr1+"',rejected_date='"+dateNow+"',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Req_Type='Material Master' and Pending_Approver='"+parllelAppr1+"'";
				    	 saveStatus=ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
				    }
				    if(!(parllelAppr2.equalsIgnoreCase("")))
				    {
				    	 String  updateStatusForparllelAppr="update All_Request set Req_Status='Rejected',Comments='"+statusForm.getComments()+"',Last_Approver='"+parllelAppr2+"'," +
							"Pending_Approver='',Approved_Persons='"+parllelAppr2+"',rejected_date='"+dateNow+"',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Req_Type='Material Master' and Pending_Approver='"+parllelAppr2+"'";
				    	 saveStatus=ad.SqlExecuteUpdate(updateStatusForparllelAppr); 
				    }
					
						statusForm.setMessage2("Request has been rejected successfully");
						
						String updateMaterial="update material_code_request set Approve_Type='Rejected',MODIFIED_BY='"+user.getEmployeeNo()+"',rejected_flag='',last_approver='"+user.getFullName()+"',pending_approver='No'  where REQUEST_NO='"+reqId+"'";
						ad.SqlExecuteUpdate(updateMaterial);
						 ad.connClose();
						EMailer email=new EMailer();
						String approvermail="";
						email.sendMailToMaterialCodeRequester(request, approvermail, reqId, "Material Code Request", user.getEmployeeNo(), requesterID, "Rejected");
				 
						
					
					if(priorityCout==apprverPriority){
						
						
				    	 String sapCreationDate=statusForm.getSapCreationDate();
						  String b[]=sapCreationDate.split("/");
						  sapCreationDate=b[2]+"-"+b[1]+"-"+b[0];
						  
						  String sapCodeExist="";
						  String sapCodeexistNo="";
						  
						  sapCodeExist=statusForm.getSapCodeExists();
						  sapCodeexistNo=statusForm.getSapCodeExistsNo();
						  if(sapCodeExist!=null){
							  statusForm.setSapCodeExists("true");
						  }
						  if(sapCodeexistNo!=null){
							  statusForm.setSapCodeExists("false");
						  }
						  if(matType.equalsIgnoreCase("ZCIV")||matType.equalsIgnoreCase("ZCON")||matType.equalsIgnoreCase("ZITC")||matType.equalsIgnoreCase("LC")
									||matType.equalsIgnoreCase("ZPFL")||matType.equalsIgnoreCase("ZSCR"))
						     {
						  
						  String updateGeneralMaterial="update material_code_request set STORAGE_LOCATION_ID='"+statusForm.getStorageLocationId()+"',MATERIAL_SHORT_NAME='"+statusForm.getMaterialShortName()+"',MATERIAL_LONG_NAME='"+statusForm.getMaterialLongName()+"'," +
							"PURCHASE_GROUP_ID='"+statusForm.getPuchaseGroupId()+"',UNIT_OF_MEAS_ID='"+statusForm.getUnitOfMeasId()+"',APPROXIMATE_VALUE='"+statusForm.getApproximateValue()+"',VALUATION_CLASS='"+statusForm.getValuationClass()+"',DETAILED_JUSTIFICATION='"+statusForm.getDetailedJustification()+"',DETAILED_SPECIFICATION='"+statusForm.getDetailedJustification()+"',PURPOSE_ID='"+statusForm.getPurposeID()+"'," +
							"REQUESTED_BY='"+statusForm.getRequestedBy()+"',MODIFIED_DATE='"+dateNow+"'," +
									"MODIFIED_BY='"+user.getEmployeeNo()+"',last_approver='"+user.getFullName()+"',pending_approver='No' where REQUEST_NO='"+reqId+"'";	 
						  int updateMateStatus=ad.SqlExecuteUpdate(updateGeneralMaterial);
						  System.out.println(updateMateStatus);
						     }
						  if(matType.equalsIgnoreCase("OSE"))
						  {
							  String updateGeneralMaterial="update material_code_request set " +
								 "STORAGE_LOCATION_ID='"+statusForm.getStorageLocationId()+"',MATERIAL_SHORT_NAME='"+statusForm.getMaterialShortName()+"',MATERIAL_LONG_NAME='"+statusForm.getMaterialLongName()+"'," +
								"PURCHASE_GROUP_ID='"+statusForm.getPuchaseGroupId()+"',UNIT_OF_MEAS_ID='"+statusForm.getUnitOfMeasId()+"'," +
								"APPROXIMATE_VALUE='"+statusForm.getApproximateValue()+"',VALUATION_CLASS='"+statusForm.getValuationClass()+"',MATERIAL_USED_IN='"+statusForm.getMaterialUsedIn()+"'," +
								"IS_EQUIPMENT='"+statusForm.getIsEquipment()+"',IS_SPARE='"+statusForm.getIsSpare()+"',IS_NEW_Equipment='"+statusForm.getIsNewEquipment()+"',IS_NEW_Furniture='"+statusForm.getIsItNewFurniture()+"'," +
										"IS_NEW_Facility='"+statusForm.getIsNewEquipment()+"',IS_Spare_required='"+statusForm.getIsSpareNewEquipment()+"',EQUIPMENT_NAME='"+statusForm.getEquipmentName()+"',EQUIPMENT_MAKE='"+statusForm.getEquipmentMake()+"',Component_MAKE='"+statusForm.getComponentMake()+"',OEM_PartNo='"+statusForm.getOemPartNo()+"'," +
								"PR_NUMBER='"+statusForm.getPrNumber()+"',PO_NUMBER='"+statusForm.getPoNumber()+"',UTILIZING_DEPT='"+statusForm.getUtilizingDept()+"',DETAILED_JUSTIFICATION='"+statusForm.getDetailedJustification()+"',DETAILED_SPECIFICATION='"+statusForm.getDetailedJustification()+"',PURPOSE_ID='"+statusForm.getPurposeID()+"'," +
								"REQUESTED_BY='"+statusForm.getRequestedBy()+"',MODIFIED_DATE='"+dateNow+"',MODIFIED_BY='"+user.getEmployeeNo()+"',last_approver='"+user.getFullName()+"',pending_approver='No' where REQUEST_NO='"+reqId+"'";	 
								
							  int updateMateStatus=ad.SqlExecuteUpdate(updateGeneralMaterial);
							  System.out.println(updateMateStatus);
					            
						  }
						  if(matType.equalsIgnoreCase("PPC"))
						  {
							  String updatQuery="update material_code_request set STORAGE_LOCATION_ID='"+statusForm.getStorageLocationId()+"',MATERIAL_SHORT_NAME='"+statusForm.getMaterialShortName()+"'," +
								"MATERIAL_LONG_NAME='"+statusForm.getMaterialLongName()+"',MATERIAL_GROUP_ID='"+statusForm.getMaterialGroupId()+"',DIVISION_ID='"+statusForm.getDivisionId()+"',UNIT_OF_MEAS_ID='"+statusForm.getUnitOfMeasId()+"',PURCHASE_GROUP_ID='"+statusForm.getPuchaseGroupId()+"',is_asset='"+statusForm.getIsAsset()+"',APPROXIMATE_VALUE='"+statusForm.getApproximateValue()+"'," +
								"VALUATION_CLASS='"+statusForm.getValuationClass()+"',DETAILED_JUSTIFICATION='"+statusForm.getDetailedJustification()+"',DETAILED_SPECIFICATION='"+statusForm.getDetailedSpecification()+"',PURPOSE_ID='"+statusForm.getPurposeID()+"',IS_SAS_FORM_AVAILABLE='"+statusForm.getIsSASFormAvailable()+"'," +
								"MODIFIED_DATE='"+dateNow+"',MODIFIED_BY='"+user.getEmployeeNo()+"',last_approver='"+user.getFullName()+"',pending_approver='No' where REQUEST_NO='"+reqId+"'";
											 
							  int updateMateStatus=ad.SqlExecuteUpdate(updatQuery);
						  }
						  if(matType.equalsIgnoreCase("PM"))
							{
					 String updatQuery="update material_code_request set STORAGE_LOCATION_ID='"+statusForm.getStorageLocationId()+"',MATERIAL_SHORT_NAME='"+statusForm.getMaterialShortName()+"',MATERIAL_LONG_NAME='"+statusForm.getMaterialLongName()+"'" +
					",MATERIAL_GROUP_ID='"+statusForm.getMaterialGroupId()+"',IS_DMF_MATERIAL='"+statusForm.getIsDMFMaterial()+"',DMF_GRADE_ID='"+statusForm.getDmfGradeId()+"',COS_GRADE_AND_NO='"+statusForm.getCosGradeNo()+"',ADDITIONAL_TEST='"+statusForm.getAdditionalTest()+"',COUNTRY_ID='"+statusForm.getCountryId()+"',CUSTOMER_NAME='"+statusForm.getCustomerName()+"'," +
					"TO_BE_USED_IN_PRODUCTS='"+statusForm.getToBeUsedInProducts()+"'" +",IS_VENDOR_SPECIFIC_MATERIAL='"+statusForm.getIsVendorSpecificMaterial()+"',MFGR_NAME='"+statusForm.getMfgrName()+"',SITE_OF_MANUFACTURE='"+statusForm.getSiteOfManufacture()+"',TEMP_CONDITION='"+statusForm.getTempCondition()+"',STORAGE_CONDITION='"+statusForm.getStorageCondition()+"'," +
					"RETEST_DAYS='"+statusForm.getRetestDays()+"',RETEST_DAYS_TYPE='"+statusForm.getRetestType()+"',DUTY_ELEMENT='"+statusForm.getDutyElement()+"',PACKING_MATERIAL_GROUP='"+statusForm.getPackageMaterialGroup()+"',Type_Of_Material='"+statusForm.getTypeOfMaterial()+"',IS_ARTWORK_REVISION='"+statusForm.getIsArtworkRevision()+"' ,EXISTING_SAP_ITEM_CODE='"+statusForm.getExistingSAPItemCode()+"'" +
					" ,APPROXIMATE_VALUE='"+statusForm.getApproximateValue()+"',ARTWORK_NO='"+statusForm.getArtworkNo()+"',UNIT_OF_MEAS_ID='"+statusForm.getUnitOfMeasId()+"',VALUATION_CLASS='"+statusForm.getValuationClass()+"'," +
					"PURCHASE_GROUP_ID='"+statusForm.getPuchaseGroupId()+"',MODIFIED_DATE='"+dateNow+"',MODIFIED_BY='"+user.getEmployeeNo()+"',last_approver='"+user.getFullName()+"',pending_approver='No' where REQUEST_NO='"+reqId+"'";

					 int updateMateStatus=ad.SqlExecuteUpdate(updatQuery);	 
			    		System.out.println(updateMateStatus);
			    	
				       }
						  
						  if(matType.equalsIgnoreCase("FG") ||matType.equalsIgnoreCase("HAWA"))
							{
							  String updateFinishedProduct="update material_code_request set MANUFACTURED_AT='"+statusForm+"',STORAGE_LOCATION_ID='"+statusForm.getStorageLocationId()+"',MATERIAL_SHORT_NAME='"+statusForm.getMaterialShortName()+"',MATERIAL_LONG_NAME='"+statusForm.getMaterialLongName()+"'" +
								",MATERIAL_GROUP_ID='"+statusForm.getMaterialGroupId()+"',VALUATION_CLASS='"+statusForm.getValuationClass()+"',COUNTRY_ID='"+statusForm.getCountryId()+"',CUSTOMER_NAME='"+statusForm.getCustomerName()+"',SHELF_LIFE='"+statusForm.getShelfLife()+"',SHELF_LIFE_TYPE='"+statusForm.getShelfType()+"',STANDARD_BATCH_SIZE='"+statusForm.getStandardBatchSize()+"',BATCH_CODE='"+statusForm.getBatchCode()+"',SALEABLE_OR_SAMPLE='"+statusForm.getSaleableOrSample()+"',DOMESTIC_OR_EXPORTS='"+statusForm.getDomesticOrExports()+"',SALES_PACK_ID='"+statusForm.getSalesPackId()+"',PACK_TYPE_ID='"+statusForm.getPackTypeId()+"',SALES_UNIT_OF_MEAS_ID='"+statusForm.getSalesUnitOfMeaseurement()+"',DIVISION_ID='"+statusForm.getDivisionId()+"',THERAPEUTIC_SEGMENT_ID='"+statusForm.getTherapeuticSegmentID()+"'," +
								"BRAND_ID='"+statusForm.getBrandID()+"',STRENGTH_ID='"+statusForm.getSrengthId()+"',GENERIC_NAME='"+statusForm.getGenericName()+"',PROD_INSP_MEMO='"+statusForm.getProdInspMemo()+"',GROSS_WEIGHT='"+statusForm.getGrossWeight()+"',NET_WEIGHT='"+statusForm.getNetWeight()+"',WEIGHT_UOM='"+statusForm.getWeightUOM()+"',DIMENSION='"+statusForm.getDimension()+"',UNIT_OF_MEAS_ID='"+statusForm.getUnitOfMeasId()+"',PURCHASE_GROUP_ID='"+statusForm.getPuchaseGroupId()+"'," +
								" MODIFIED_DATE='"+dateNow+"',MODIFIED_BY='"+user.getEmployeeNo()+"',last_approver='"+user.getFullName()+"',pending_approver='No' where REQUEST_NO='"+reqId+"'";	 
							  int updateMateStatus=ad.SqlExecuteUpdate(updateFinishedProduct);
							}
						  if(matType.equalsIgnoreCase("BULK"))
						  {
							  String updateSemiFinished="update material_code_request set STORAGE_LOCATION_ID='"+statusForm.getStorageLocationId()+"',MATERIAL_SHORT_NAME='"+statusForm.getMaterialShortName()+"',MATERIAL_LONG_NAME='"+statusForm.getMaterialLongName()+"'," +
						 		"UNIT_OF_MEAS_ID='"+statusForm.getUnitOfMeasId()+"',COUNTRY_ID='"+statusForm.getCountryId()+"',CUSTOMER_NAME='"+statusForm.getCustomerName()+"',SHELF_LIFE='"+statusForm.getShelfLife()+"',SHELF_LIFE_TYPE='"+statusForm.getShelfType()+"',STANDARD_BATCH_SIZE='"+statusForm.getStandardBatchSize()+"',BATCH_CODE='"+statusForm.getBatchCode()+"',TARGET_WEIGHT='"+statusForm.getTargetWeight()+"',PROD_INSP_MEMO='"+statusForm.getProdInspMemo()+"'," +
						 		"WEIGHT_UOM='"+statusForm.getWeightUOM()+"',RETEST_DAYS='"+statusForm.getRetestDays()+"',RETEST_DAYS_TYPE='"+statusForm.getRetestType()+"',VALUATION_CLASS='"+statusForm.getValuationClass()+"',MODIFIED_DATE='"+dateNow+"'," +
						 		"MODIFIED_BY='"+user.getEmployeeNo()+"',PACK_SIZE='"+statusForm.getPackSize()+"',last_approver='"+user.getFullName()+"',pending_approver='No' where REQUEST_NO='"+reqId+"'";
							  int updateMateStatus=ad.SqlExecuteUpdate(updateSemiFinished);
						  }
							if(matType.equalsIgnoreCase("RM"))
							{	 
					String updatQuery="update material_code_request set  STORAGE_LOCATION_ID='"+statusForm.getStorageLocationId()+"',MATERIAL_SHORT_NAME='"+statusForm.getMaterialShortName()+"'," +
					"MATERIAL_LONG_NAME='"+statusForm.getMaterialLongName()+"',MATERIAL_GROUP_ID='"+statusForm.getMaterialGroupId()+"',PHARMACOP_NAME='"+statusForm.getPharmacopName()+"',PHARMACOP_GRADE='"+statusForm.getPharmacopGrade()+"',GENERIC_NAME='"+statusForm.getGenericName()+"',SYNONYM='"+statusForm.getSynonym()+"',PHARMACOP_SPECIFICATION='"+statusForm.getPharmacopSpecification()+"'" +
					",IS_DMF_MATERIAL='"+statusForm.getIsDMFMaterial()+"',DMF_GRADE_ID='"+statusForm.getDmfGradeId()+"',MATERIAL_GRADE='"+statusForm.getMaterialGrade()+"',COS_GRADE_AND_NO='"+statusForm.getCosGradeNo()+"',ADDITIONAL_TEST='"+statusForm.getAdditionalTest()+"',COUNTRY_ID='"+statusForm.getCountryId()+"',CUSTOMER_NAME='"+statusForm.getCustomerName()+"'" +
					",TO_BE_USED_IN_PRODUCTS='"+statusForm.getToBeUsedInProducts()+"',IS_VENDOR_SPECIFIC_MATERIAL='"+statusForm.getIsVendorSpecificMaterial()+"',MFGR_NAME='"+statusForm.getMfgrName()+"',SITE_OF_MANUFACTURE='"+statusForm.getSiteOfManufacture()+"',TEMP_CONDITION='"+statusForm.getTempCondition()+"',STORAGE_CONDITION='"+statusForm.getStorageCondition()+"',SHELF_LIFE='"+statusForm.getShelfLife()+"',SHELF_LIFE_TYPE='"+statusForm.getShelfLifeType()+"',DUTY_ELEMENT='"+statusForm.getDutyElement()+"'" +
					",RETEST_DAYS='"+statusForm.getRetestDays()+"',RETEST_DAYS_TYPE='"+statusForm.getRetestType()+"',VALUATION_CLASS='"+statusForm.getValuationClass()+"',APPROXIMATE_VALUE='"+statusForm.getApproximateValue()+"',UNIT_OF_MEAS_ID='"+statusForm.getUnitOfMeasId()+"',PURCHASE_GROUP_ID='"+statusForm.getPuchaseGroupId()+"'" +
					",MODIFIED_DATE='"+dateNow+"',MODIFIED_BY='"+user.getEmployeeNo()+"',last_approver='"+user.getFullName()+"',pending_approver='No' where REQUEST_NO='"+reqId+"'";
					  
		    		
		            int updateMateStatus=ad.SqlExecuteUpdate(updatQuery);
							}
					}
					
				}
				//default masters
				
				if(matType.equalsIgnoreCase("ZCIV")||matType.equalsIgnoreCase("ZCON")||matType.equalsIgnoreCase("ZITC")||matType.equalsIgnoreCase("LC")
						||matType.equalsIgnoreCase("ZPFL")||matType.equalsIgnoreCase("ZSCR"))
			     {
					

					
					if(userRole.equalsIgnoreCase("User"))
					{
						String getFinishedProduct="select mat.HSN_Code, mat.REQUEST_NO,mat.MATERIAL_GROUP_ID,mat.REQUEST_DATE,loc.LOCNAME,loc.LOCATION_CODE,stLoc.MAT_TYPE,stLoc.STORAGE_LOCATION_NAME," +
						"mat.MATERIAL_SHORT_NAME, mat.MATERIAL_LONG_NAME,matGroup.STXT,uom.LTXT,pur.PURCHASE_GROUP_DESC,mat.is_asset,dep.DPTSTXT" +
						",mat.APPROXIMATE_VALUE, val.VALUATION_DESC,mat.DETAILED_JUSTIFICATION,	mat.DETAILED_SPECIFICATION from " +
						"material_code_request as mat,Location as loc,STORAGE_LOCATION as stLoc,MATERIAL_GROUP as matGroup , " +
						"UNIT_MESUREMENT AS uom ,PURCHASE_GROUP as pur ,VALUATION_CLASS as val ,DEPARTMENT as dep where REQUEST_NO='"+reqId+"' and	" +
						"loc.LOCID=mat.LOCATION_ID and stLoc.STORAGE_LOCATION_ID=mat.STORAGE_LOCATION_ID and matGroup.MATERIAL_GROUP_ID=mat.MATERIAL_GROUP_ID " +
						"and uom.UNIT_OF_MEAS_ID=mat.UNIT_OF_MEAS_ID and pur.PURCHASE_GROUP_ID=mat.PURCHASE_GROUP_ID and TYPE='"+matType+"' and val.VALUATION_ID=mat.VALUATION_CLASS" +
						" and dep.DPTID=mat.UTILIZING_DEPT";
				
				ResultSet rs=ad.selectQuery(getFinishedProduct);
				if(rs.next())
				{

					statusForm.setRequestNo(reqId);
					statusForm.setRequestNumber(reqId);
					statusForm.setReqMaterialGroup(rs.getString("MATERIAL_GROUP_ID"));
					statusForm.setLocationId(rs.getString("LOCATION_CODE")+"-"+rs.getString("LOCNAME"));
					statusForm.setRequestNumber(reqId);
					reqDate=rs.getString("REQUEST_DATE");
					String a[]=reqDate.split(" ");
					reqDate=a[0];
					String b[]=reqDate.split("-");
					reqDate=b[2]+"/"+b[1]+"/"+b[0];
					statusForm.setRequestDate(reqDate);
					statusForm.setHsnCode(rs.getString("HSN_Code"));
				
					statusForm.setStorageLocationId(rs.getString("MAT_TYPE")+"-"+rs.getString("STORAGE_LOCATION_NAME"));
					statusForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME"));
					statusForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME"));
					statusForm.setMaterialGroupId(rs.getString("STXT"));
					statusForm.setPuchaseGroupId(rs.getString("PURCHASE_GROUP_DESC"));
					statusForm.setUnitOfMeasId(rs.getString("LTXT"));
					statusForm.setApproximateValue(rs.getString("APPROXIMATE_VALUE"));
					statusForm.setValuationClass(rs.getString("VALUATION_DESC"));
					statusForm.setUtilizingDept(rs.getString("DPTSTXT"));
					String isAsset=rs.getString("is_asset");
					if(isAsset.equalsIgnoreCase("1"))
					{
						statusForm.setIsAsset("YES");
					}
					if(isAsset.equalsIgnoreCase("0"))
						statusForm.setIsAsset("NO");
					statusForm.setDetailedJustification(rs.getString("DETAILED_JUSTIFICATION"));
					statusForm.setDetailedSpecification(rs.getString("DETAILED_SPECIFICATION"));
					
					
			
				
				}
					}else{
						
						String getCountryDetails="select * from Country";
						LinkedList countryID=new LinkedList();
						LinkedList countryName=new LinkedList();
						ResultSet rsCountryDetails=ad.selectQuery(getCountryDetails);
						while(rsCountryDetails.next()){
							countryID.add(rsCountryDetails.getString("LAND1"));
							countryName.add(rsCountryDetails.getString("LANDX"));
						}
						statusForm.setCounID(countryID);
						statusForm.setCountryName(countryName);
						String materialType="";
						String valuationType="";
						String getvaluationType="select MATERIAL_TYPE_ID,VALUATION_CLASS from material_code_request where REQUEST_NO='"+reqId+"'";
						ResultSet rsValuationType=ad.selectQuery(getvaluationType);
						while(rsValuationType.next()){
							materialType=rsValuationType.getString("MATERIAL_TYPE_ID");
							valuationType=rsValuationType.getString("VALUATION_CLASS");
						}
						
						
						LinkedList storageID=new LinkedList();
						LinkedList storageName=new LinkedList();
						String getStorageDetails="select * from STORAGE_LOCATION where  MAT_TYPE='"+matType+"'";
						ResultSet rsStrogeLocation=ad.selectQuery(getStorageDetails);
						while(rsStrogeLocation.next()){
							storageID.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID"));
							storageName.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID")+" - "+rsStrogeLocation.getString("STORAGE_LOCATION_NAME"));
						}
						statusForm.setStorageID(storageID);
						statusForm.setStorageIDName(storageName);
						
						ResultSet rs11 = ad.selectQuery("select LOCID," +
						"LOCNAME,location_code from location");
						ArrayList locationList=new ArrayList();
						ArrayList locationLabelList=new ArrayList();
						
						while(rs11.next()) {
							locationList.add(rs11.getString("LOCID"));
							locationLabelList.add(rs11.getString("LOCATION_CODE")+" - "+rs11.getString("LOCNAME"));
						}
						statusForm.setLocationIdList(locationList);
						statusForm.setLocationLabelList(locationLabelList);
						
						LinkedList materTypeIDList=new LinkedList();
						LinkedList materialTypeIdValueList=new LinkedList();
						String getMaterials="select * from MATERIAL_TYPE";
						ResultSet rsMaterial=ad.selectQuery(getMaterials);
						while(rsMaterial.next())
						{
							materTypeIDList.add(rsMaterial.getString("id"));
							materialTypeIdValueList.add(rsMaterial.getString("MATERIAL_GROUP_ID")+" - "+rsMaterial.getString("M_DESC"));
						}
						statusForm.setMaterTypeIDList(materTypeIDList);
						statusForm.setMaterialTypeIdValueList(materialTypeIdValueList);
						
						LinkedList materGroupIDList=new LinkedList();
						LinkedList materialGroupIdValueList=new LinkedList();
						String getMaterialGroup="select * from MATERIAL_GROUP where MATERIAL_TYPE like '%"+matType+"%' order by STXT";
						ResultSet rsMaterialGroup=ad.selectQuery(getMaterialGroup);
						while(rsMaterialGroup.next())
						{
							materGroupIDList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID"));
							materialGroupIdValueList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID")+" - "+rsMaterialGroup.getString("STXT"));
						}
						statusForm.setMaterGroupIDList(materGroupIDList);
						statusForm.setMaterialGroupIdValueList(materialGroupIdValueList);
						
						
						LinkedList unitOfMeasIdList=new LinkedList();
						LinkedList unitOfMeasIdValues=new LinkedList();
						
						LinkedList deptID=new LinkedList();
						LinkedList deptName=new LinkedList();
						String getdepartment="select * from department";
						ResultSet rsdepartment=ad.selectQuery(getdepartment);
						while(rsdepartment.next()){
							deptID.add(rsdepartment.getInt("DPTID"));
							deptName.add(rsdepartment.getString("DPTSTXT"));
						}
						
						statusForm.setDeptId(deptID);
						statusForm.setDeptName(deptName);
						String getunitMesurement="select * from UNIT_MESUREMENT order by UNIT_OF_MEAS_ID";
						ResultSet rsUnit=ad.selectQuery(getunitMesurement);
						while(rsUnit.next())
						{
							unitOfMeasIdList.add(rsUnit.getString("UNIT_OF_MEAS_ID"));
							unitOfMeasIdValues.add(rsUnit.getString("UNIT_OF_MEAS_ID")+" - "+rsUnit.getString("LTXT"));
						}
						statusForm.setUnitOfMeasIdList(unitOfMeasIdList);
						statusForm.setUnitOfMeasIdValues(unitOfMeasIdValues);
						
						
						LinkedList valuationClassID=new LinkedList();
						LinkedList valuationClassName=new LinkedList();
						String getValuation="select * from VALUATION_CLASS where MAT_TYPE='"+matType+"'";
						ResultSet rsValuation=ad.selectQuery(getValuation);
						while(rsValuation.next())
						{
							valuationClassID.add(rsValuation.getString("VALUATION_ID"));
							valuationClassName.add(rsValuation.getString("VALUATION_ID")+" - "+rsValuation.getString("VALUATION_DESC"));
						}
						statusForm.setValuationClassID(valuationClassID);
						statusForm.setValuationClassName(valuationClassName);
						
						LinkedList puchaseGroupIdList=new LinkedList();
						LinkedList puchaseGroupIdValues=new LinkedList();
						
						String getPurchaseGroup="select * from PURCHASE_GROUP";
						ResultSet rsPurchaseGroup=ad.selectQuery(getPurchaseGroup);
						while(rsPurchaseGroup.next())
						{
							puchaseGroupIdList.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID"));
							puchaseGroupIdValues.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID")+" - "+rsPurchaseGroup.getString("PURCHASE_GROUP_DESC"));
						}
						statusForm.setPuchaseGroupIdList(puchaseGroupIdList);
						statusForm.setPuchaseGroupIdValues(puchaseGroupIdValues);
						
						String getFinishedProduct="select * from material_code_request where REQUEST_NO='"+reqId+"'";
						ResultSet rs=ad.selectQuery(getFinishedProduct);
						while(rs.next())
						{

							statusForm.setRequestNo(reqId);
							statusForm.setRequestNumber(reqId);
							statusForm.setReqMaterialGroup(rs.getString("MATERIAL_GROUP_ID"));
							
							reqDate=rs.getString("REQUEST_DATE");
							String a[]=reqDate.split(" ");
							reqDate=a[0];
							String b[]=reqDate.split("-");
							reqDate=b[2]+"/"+b[1]+"/"+b[0];
							statusForm.setRequestDate(reqDate);
							statusForm.setHsnCode(rs.getString("HSN_Code"));
							statusForm.setLocationId(rs.getString("LOCATION_ID"));
							statusForm.setMaterialTypeId(rs.getString("MATERIAL_TYPE_ID"));
							statusForm.setStorageLocationId(rs.getString("STORAGE_LOCATION_ID"));
							statusForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME"));
							statusForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME"));
							statusForm.setMaterialGroupId(rs.getString("MATERIAL_GROUP_ID"));
							statusForm.setPuchaseGroupId(rs.getString("PURCHASE_GROUP_ID"));
							statusForm.setUnitOfMeasId(rs.getString("UNIT_OF_MEAS_ID"));
							statusForm.setApproximateValue(rs.getString("APPROXIMATE_VALUE"));
							statusForm.setValuationClass(rs.getString("VALUATION_CLASS"));
					/*		pendAppForm.setMaterialUsedIn(rs.getString("MATERIAL_USED_IN"));
							String isEquipment=rs.getString("IS_EQUIPMENT");
							if(isEquipment.equalsIgnoreCase("1"))
							{
								pendAppForm.setIsEquipment("True");
							}
							if(isEquipment.equalsIgnoreCase("0"))
								pendAppForm.setIsEquipment("False");
							
							String isSpare=rs.getString("IS_SPARE");
							if(isSpare.equalsIgnoreCase("1"))
							{
								pendAppForm.setIsSpare("True");
							}
							if(isSpare.equalsIgnoreCase("0"))
								pendAppForm.setIsSpare("False");
							
							String isNew=rs.getString("IS_NEW");
							if(isNew.equalsIgnoreCase("1"))
							{
								pendAppForm.setIsNew("True");
							}
							if(isNew.equalsIgnoreCase("0"))
								pendAppForm.setIsNew("False");
							
							
							pendAppForm.setEquipmentName(rs.getString("EQUIPMENT_NAME"));
							pendAppForm.setPrNumber(rs.getString("PR_NUMBER"));
							pendAppForm.setPoNumber(rs.getString("PO_NUMBER"));*/
							statusForm.setUtilizingDept(rs.getString("UTILIZING_DEPT"));
							String isAsset=rs.getString("is_asset");
							if(isAsset.equalsIgnoreCase("1"))
							{
								statusForm.setIsAsset("1");
							}
							if(isAsset.equalsIgnoreCase("0"))
								statusForm.setIsAsset("0");
							statusForm.setDetailedJustification(rs.getString("DETAILED_JUSTIFICATION"));
							statusForm.setDetailedSpecification(rs.getString("DETAILED_SPECIFICATION"));
							statusForm.setPurposeID(rs.getString("PURPOSE_ID"));
							statusForm.setSapCodeNo(rs.getString("SAP_CODE_NO"));
							
							
							String sapCodeno=rs.getString("SAP_CODE_NO");
							if(sapCodeno!=null){
								statusForm.setSapCodeNo(sapCodeno);
						String sapCodeExist=rs.getString("SAP_CODE_EXISTS");
						if(sapCodeExist.equalsIgnoreCase("1"))
						{
							statusForm.setSapCodeExists("On");
						}
						if(sapCodeExist.equalsIgnoreCase("0"))
							statusForm.setSapCodeExistsNo("On");
						String sapCreationDate=rs.getString("SAP_CREATION_DATE");
						String sapDate[]=sapCreationDate.split(" ");
						sapCreationDate=sapDate[0];
						String sapCode[]=sapCreationDate.split("-");
						sapCreationDate=sapCode[2]+"/"+sapCode[1]+"/"+sapCode[0];
						statusForm.setSapCreationDate(sapCreationDate);
						statusForm.setSapCreatedBy(rs.getString("SAP_CREATED_BY"));
						statusForm.setRequestedBy(rs.getString("REQUESTED_BY"));
							}

						
						}
						
					}
					
					
    				
    				
    				
    				
    				
					//set ApproverDetails 
    				checkStatus=0;int appStatus=0;
    				LinkedList listApprers=new LinkedList();
    				String getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
    				"where mast.Location='"+location+"' AND  mast.Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mast.Approver_Id=emp.PERNR order by Priority";
    				ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
    				while(rsApprDetails.next())
    				{
    					checkStatus=1;
    					ApprovalsForm apprvers=new ApprovalsForm();
    					apprvers.setPriority(rsApprDetails.getString("Priority"));
    					apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
    					String empCode=rsApprDetails.getString("Approver_Id");
    					String approveStatus="";
    					String actualapprover="";
    					boolean data=false;
    					String recordStatus="select mast.Priority,mast.Approver_Id,mast.Parllel_Approver_1,mast.Parllel_Approver_2,all_r.Actual_Approver,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
    					"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
    					"mast.Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
    					"or mast.Role='Creator') and mast.Approver_Id=emp.PERNR  group by mast.Priority,mast.Priority,mast.Approver_Id,mast.Parllel_Approver_1,mast.Parllel_Approver_2,all_r.Actual_Approver,emp.EMP_FULLNAME,all_r.Req_Status," +
    					"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
    					ResultSet rsAppInfo=ad.selectQuery(recordStatus);
    					while(rsAppInfo.next())
    					{
    						actualapprover=rsAppInfo.getString("Actual_Approver");
							if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Approver_Id")))
							{
								apprvers.setEmployeeCode(rsAppInfo.getString("Approver_Id"));
								data=true;
							}
							if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Parllel_Approver_1")))
							{
								apprvers.setEmployeeCode(rsAppInfo.getString("Parllel_Approver_1"));
								data=true;
							}
							if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Parllel_Approver_2")))
							{
								apprvers.setEmployeeCode(rsAppInfo.getString("Parllel_Approver_2"));
								data=true;
							}
    						apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
    						approveStatus=rsAppInfo.getString("Req_Status");
    						if(approveStatus.equalsIgnoreCase(""))
    						{
    							apprvers.setApproveStatus("In Process");
    						}
    						if(approveStatus.equalsIgnoreCase("Approved")|| approveStatus.equalsIgnoreCase("Completed"))
    						{
    						apprvers.setDate(rsAppInfo.getString("approved_date"));
    						}else{
    							apprvers.setDate(rsAppInfo.getString("rejected_date"));
    							appStatus=1;
    						}
    						 comments=rsAppInfo.getString("Comments");
    						if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
    						{
    							apprvers.setComments("");
    						}else{
    							apprvers.setComments(rsAppInfo.getString("Comments"));
    						}
    						
    						
    					}
    					if(approveStatus.equalsIgnoreCase("") && appStatus==0)
    					{
    						apprvers.setApproveStatus("In Process");
    					}
    					String pernr="";

    					if(data==true)
    					{
    						pernr=actualapprover;
    					}
    					else
    					{
    						pernr=rsApprDetails.getString("Approver_Id");
    					}						
    				
    						
    						
    					String name="select EMP_FULLNAME from emp_official_info where PERNR='"+pernr+"'";
    					ResultSet rsname=ad.selectQuery(name);
    					if(rsname.next())
    					{
    						apprvers.setEmployeeName(rsname.getString("EMP_FULLNAME"));
    					}
    					listApprers.add(apprvers);
    				}
    				if(checkStatus==0)
    				{
    					getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
    					"where mast.Location='"+location+"' AND  mast.Material_Type='"+matType+"' AND Material_Group='' and mast.Approver_Id=emp.PERNR order by Priority";
    					rsApprDetails=ad.selectQuery(getApprDetails);
    					while(rsApprDetails.next())
    					{
    						checkStatus=1;
    						ApprovalsForm apprvers=new ApprovalsForm();
    						apprvers.setPriority(rsApprDetails.getString("Priority"));
    						apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
    						String empCode=rsApprDetails.getString("Approver_Id");
    						String approveStatus="";
    						String actualapprover="";
    						boolean data=false;
    						String recordStatus="select mast.Priority,mast.Approver_Id,mast.Parllel_Approver_1,mast.Parllel_Approver_2,all_r.Actual_Approver,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
    						"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
    						"mast.Material_Type='"+matType+"' AND Material_Group='' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
    						"or mast.Role='Creator') and mast.Approver_Id=emp.PERNR  group by mast.Priority,mast.Priority,mast.Approver_Id,mast.Parllel_Approver_1,mast.Parllel_Approver_2,all_r.Actual_Approver,emp.EMP_FULLNAME,all_r.Req_Status," +
    						"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
    						ResultSet rsAppInfo=ad.selectQuery(recordStatus);
    						while(rsAppInfo.next())
    						{
    							
    							actualapprover=rsAppInfo.getString("Actual_Approver");
    							if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Approver_Id")))
    							{
    								apprvers.setEmployeeCode(rsAppInfo.getString("Approver_Id"));
    								data=true;
    							}
    							if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Parllel_Approver_1")))
    							{
    								apprvers.setEmployeeCode(rsAppInfo.getString("Parllel_Approver_1"));
    								data=true;
    							}
    							if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Parllel_Approver_2")))
    							{
    								apprvers.setEmployeeCode(rsAppInfo.getString("Parllel_Approver_2"));
    								data=true;
    							}
    							apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
    							approveStatus=rsAppInfo.getString("Req_Status");
    							
    							if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
    							{
    							String approveDate=	rsAppInfo.getString("approved_date");
    							
    							String a[]=approveDate.split(" ");
    							approveDate=a[0];
    							String b[]=approveDate.split("-");
    							approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
    							
    							apprvers.setDate(approveDate);
    							}else{
    								String rejectDate=	rsAppInfo.getString("rejected_date");
    								appStatus=1;
    								String a[]=rejectDate.split(" ");
    								rejectDate=a[0];
    								String b[]=rejectDate.split("-");
    								rejectDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
    								apprvers.setDate(rejectDate);
    							}
    							 comments=rsAppInfo.getString("Comments");
    							if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
    							{
    								apprvers.setComments("");
    							}else{
    								apprvers.setComments(rsAppInfo.getString("Comments"));
    							}
    						}
    						if(approveStatus.equalsIgnoreCase("") && appStatus==0)
    						{
    							apprvers.setApproveStatus("In Process");
    						}
    						String pernr="";

    						if(data==true)
        					{
        						pernr=actualapprover;
        					}
        					else
        					{
        						pernr=rsApprDetails.getString("Approver_Id");
        					}						
    							
    							
    						String name="select EMP_FULLNAME from emp_official_info where PERNR='"+pernr+"'";
    						ResultSet rsname=ad.selectQuery(name);
    						if(rsname.next())
    						{
    							apprvers.setEmployeeName(rsname.getString("EMP_FULLNAME"));
    						}
    						listApprers.add(apprvers);
    				}
    				}
    				request.setAttribute("approverDetails", listApprers);
    				
					
			     
					
			     }
				
				if(matType.equalsIgnoreCase("PPC"))
				{
					if(userRole.equalsIgnoreCase("User"))
					{
						String getFinishedProduct="select mat.HSN_Code,mat.BRAND_ID,mat.REQUEST_NO,mat.REQUEST_DATE,loc.LOCNAME,loc.LOCATION_CODE,stLoc.MAT_TYPE,stLoc.STORAGE_LOCATION_NAME," +
	   			 		"mat.MATERIAL_SHORT_NAME, mat.MATERIAL_LONG_NAME,matGroup.STXT,uom.LTXT,pur.PURCHASE_GROUP_DESC, div.DIV_DESC," +
	   			 		"mat.is_asset,mat.PURPOSE_ID,mat.IS_SAS_FORM_AVAILABLE,mat.APPROXIMATE_VALUE, val.VALUATION_DESC,mat.DETAILED_JUSTIFICATION," +
	   			 		"mat.DETAILED_SPECIFICATION from material_code_request as mat,Location as loc,STORAGE_LOCATION as stLoc,MATERIAL_GROUP as " +
	   			 		"matGroup , UNIT_MESUREMENT AS uom ,PURCHASE_GROUP as pur,DIVISION as div,VALUATION_CLASS as val where REQUEST_NO='"+reqId+"' and " +
	   			 		"loc.LOCID=mat.LOCATION_ID and stLoc.STORAGE_LOCATION_ID=mat.STORAGE_LOCATION_ID and matGroup.MATERIAL_GROUP_ID=mat.MATERIAL_GROUP_ID " +
	   			 		"and uom.UNIT_OF_MEAS_ID=mat.UNIT_OF_MEAS_ID and pur.PURCHASE_GROUP_ID=mat.PURCHASE_GROUP_ID and div.DIV_CODE=mat.DIVISION_ID  " +
	   			 		"and val.VALUATION_ID=mat.VALUATION_CLASS and Type='PPC'"; 
	   			 				
	   			 		ResultSet rs=ad.selectQuery(getFinishedProduct);
	   			 		
	   			 	
	   			 			while(rs.next())
	   					{

	   			 				String  str=rs.getString("STORAGE_LOCATION_NAME");
	   			 		 		if(str.equalsIgnoreCase("Printed Material")||str.equalsIgnoreCase("General Material")||str.equalsIgnoreCase("Complement store"))
	   			 		 		{	
	   			 		 		statusForm.setRequestNo(reqId);
	   			 		 	statusForm.setRequestNumber(reqId);
	   						 reqDate=rs.getString("REQUEST_DATE");
	   						String a[]=reqDate.split(" ");
	   						reqDate=a[0];
	   						String b[]=reqDate.split("-");
	   						reqDate=b[2]+"/"+b[1]+"/"+b[0];
	   						statusForm.setRequestDate(reqDate);
	   						statusForm.setLocationId(rs.getString("LOCATION_CODE")+"-"+rs.getString("LOCNAME"));
	   						
	   						statusForm.setHsnCode(rs.getString("HSN_Code"));
	   						statusForm.setStorageLocationId(rs.getString("MAT_TYPE")+"-"+rs.getString("STORAGE_LOCATION_NAME"));
	   						statusForm.setBrandID(rs.getString("BRAND_ID"));
	   						statusForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME"));
	   						statusForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME"));
	   						statusForm.setMaterialGroupId(rs.getString("STXT"));
	   						statusForm.setUnitOfMeasId(rs.getString("LTXT"));
	   						statusForm.setPuchaseGroupId(rs.getString("PURCHASE_GROUP_DESC"));
	   						statusForm.setDivisionId(rs.getString("DIV_DESC"));
	   						String isAsset=rs.getString("is_asset");
	   						if(isAsset.equalsIgnoreCase("1"))
	   						{
	   							statusForm.setIsAsset("YES");
	   						}
	   						if(isAsset.equalsIgnoreCase("0")){
	   							statusForm.setIsAsset("NO");
	   						}
	   						statusForm.setApproximateValue(rs.getString("APPROXIMATE_VALUE"));
	   						statusForm.setValuationClass(rs.getString("VALUATION_DESC"));
	   						statusForm.setDetailedJustification(rs.getString("DETAILED_JUSTIFICATION"));
	   						statusForm.setDetailedSpecification(rs.getString("DETAILED_SPECIFICATION"));
	   						
	   						String purposeId=rs.getString("PURPOSE_ID");
	   					    if(purposeId.equalsIgnoreCase("1"))
	   					    {
	   					    	statusForm.setPurposeID("Gift & Compliments");
	   					    	
	   					    }
	   					    if(purposeId.equalsIgnoreCase("2"))
	   					    {
	   					    	statusForm.setPurposeID("Propaganda & Promotional (KUDLU DEPOT)");
	   					    	
	   					    }
	   					    if(purposeId.equalsIgnoreCase("3"))
	   					    {
	   					    	statusForm.setPurposeID("Product Launch Exp");
	   					    	
	   					    }
	   					    if(purposeId.equalsIgnoreCase("4"))
	   					    {
	   					    	statusForm.setPurposeID("Sales Promotional (SAS)");
	   					    	
	   					    }
	   					    if(purposeId.equalsIgnoreCase("5"))
	   					    {
	   					    	statusForm.setPurposeID("Visual Ads,Literature");
	   					    	
	   					    }
	   						
	   					    if(purposeId.equalsIgnoreCase("6"))
	   					    {
	   					    	statusForm.setPurposeID("Conference,National & Regional");
	   					    	
	   					    }
	   					    if(purposeId.equalsIgnoreCase("7"))
	   					    {
	   					    	statusForm.setPurposeID("Incentive to Field Staff");
	   					    	
	   					    }
	   					    if(purposeId.equalsIgnoreCase("8"))
	   					    {
	   					    	statusForm.setPurposeID("Incentive to Stockist/Chemist");
	   					    	
	   					    }
	   					    if(purposeId.equalsIgnoreCase("9"))
	   					    {
	   					    	statusForm.setPurposeID("Travelling Lodging & Boarding Exp");
	   					    	
	   					    }
	   						
	   					   
	   						String isSAS=rs.getString("IS_SAS_FORM_AVAILABLE");
	   						
	   						if(isSAS.equalsIgnoreCase("1"))
	   						{
	   							statusForm.setIsSASFormAvailable("YES");
	   						}
	   						if(isSAS.equalsIgnoreCase("0")){
	   							statusForm.setIsSASFormAvailable("NO");
	   			 		
	   					}
	   			 		
	   			     }
	   					}
					}else{

						LinkedList brandIDList=new LinkedList();
						LinkedList brandNameList=new LinkedList();
						String getBrand="select * from BRAND order by BRAND_DESC";
						ResultSet rsBrand=ad.selectQuery(getBrand);
						while(rsBrand.next())
						{
							brandIDList.add(rsBrand.getString("BRAND_CODE"));
							brandNameList.add(rsBrand.getString("BRAND_DESC"));
						}
						statusForm.setBrandIDList(brandIDList);
						statusForm.setBrandNameList(brandNameList);
	
						
						String getCountryDetails="select * from Country";
						LinkedList countryID=new LinkedList();
						LinkedList countryName=new LinkedList();
						ResultSet rsCountryDetails=ad.selectQuery(getCountryDetails);
						while(rsCountryDetails.next()){
							countryID.add(rsCountryDetails.getString("LAND1"));
							countryName.add(rsCountryDetails.getString("LANDX"));
						}
						statusForm.setCounID(countryID);
						statusForm.setCountryName(countryName);
					
						
						ResultSet rs11 = ad.selectQuery("select * from location");
						ArrayList locationList=new ArrayList();
						ArrayList locationLabelList=new ArrayList();
						
						while(rs11.next()) {
							locationList.add(rs11.getString("LOCID"));
							locationLabelList.add(rs11.getString("LOCATION_CODE")+"-"+rs11.getString("LOCNAME"));
							
						}
						statusForm.setLocationIdList(locationList);
						statusForm.setLocationLabelList(locationLabelList);
						
						LinkedList divisonID=new LinkedList();
						LinkedList divisonName=new LinkedList();
						String getDivison="select * from DIVISION";
						ResultSet rsDivison=ad.selectQuery(getDivison);
						while(rsDivison.next())
						{
							divisonID.add(rsDivison.getString("DIV_CODE"));
							divisonName.add(rsDivison.getString("DIV_DESC"));
						}
						statusForm.setDivisonID(divisonID);
						statusForm.setDivisonName(divisonName);
						LinkedList materTypeIDList=new LinkedList();
						LinkedList materialTypeIdValueList=new LinkedList();
						String getMaterials="select * from MATERIAL_TYPE";
						ResultSet rsMaterial=ad.selectQuery(getMaterials);
						while(rsMaterial.next())
						{
							materTypeIDList.add(rsMaterial.getString("id"));
							materialTypeIdValueList.add(rsMaterial.getString("MATERIAL_GROUP_ID")+"-"+rsMaterial.getString("M_DESC"));
						}
						statusForm.setMaterTypeIDList(materTypeIDList);
						statusForm.setMaterialTypeIdValueList(materialTypeIdValueList);
						
						LinkedList materGroupIDList=new LinkedList();
						LinkedList materialGroupIdValueList=new LinkedList();
						String getMaterialGroup="select * from MATERIAL_GROUP where MATERIAL_TYPE like '%"+matType+"%' order by STXT";
						ResultSet rsMaterialGroup=ad.selectQuery(getMaterialGroup);
						while(rsMaterialGroup.next())
						{
							materGroupIDList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID"));
							materialGroupIdValueList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID")+"-"+rsMaterialGroup.getString("STXT"));
						}
						statusForm.setMaterGroupIDList(materGroupIDList);
						statusForm.setMaterialGroupIdValueList(materialGroupIdValueList);
						
						
						LinkedList unitOfMeasIdList=new LinkedList();
						LinkedList unitOfMeasIdValues=new LinkedList();
						
						String getunitMesurement="select * from UNIT_MESUREMENT";
						ResultSet rsUnit=ad.selectQuery(getunitMesurement);
						while(rsUnit.next())
						{
							unitOfMeasIdList.add(rsUnit.getString("UNIT_OF_MEAS_ID"));
							unitOfMeasIdValues.add(rsUnit.getString("UNIT_OF_MEAS_ID")+"-"+rsUnit.getString("LTXT"));
						}
						statusForm.setUnitOfMeasIdList(unitOfMeasIdList);
						statusForm.setUnitOfMeasIdValues(unitOfMeasIdValues);
						LinkedList storageID=new LinkedList();
						LinkedList storageName=new LinkedList();
						String getStorageDetails="select * from STORAGE_LOCATION where MAT_TYPE='PPC'";
						ResultSet rsStrogeLocation=ad.selectQuery(getStorageDetails);
						while(rsStrogeLocation.next()){
							storageID.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID"));
							storageName.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID")+"-"+rsStrogeLocation.getString("STORAGE_LOCATION_NAME"));
						}
						statusForm.setStorageID(storageID);
						statusForm.setStorageIDName(storageName);
						
						LinkedList puchaseGroupIdList=new LinkedList();
						LinkedList puchaseGroupIdValues=new LinkedList();
						
						String getPurchaseGroup="select * from PURCHASE_GROUP";
						ResultSet rsPurchaseGroup=ad.selectQuery(getPurchaseGroup);
						while(rsPurchaseGroup.next())
						{
							puchaseGroupIdList.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID"));
							puchaseGroupIdValues.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID")+"-"+rsPurchaseGroup.getString("PURCHASE_GROUP_DESC"));
						}
						statusForm.setPuchaseGroupIdList(puchaseGroupIdList);
						statusForm.setPuchaseGroupIdValues(puchaseGroupIdValues);
						
						LinkedList valuationClassID=new LinkedList();
						LinkedList valuationClassName=new LinkedList();
						
						String getValuation="select * from VALUATION_CLASS where MAT_TYPE='PPC'";
						ResultSet rsValuation=ad.selectQuery(getValuation);
						while(rsValuation.next())
						{
							valuationClassID.add(rsValuation.getString("VALUATION_ID"));
							valuationClassName.add(rsValuation.getString("VALUATION_ID")+"-"+rsValuation.getString("VALUATION_DESC"));
						}
						statusForm.setValuationClassID(valuationClassID);
						statusForm.setValuationClassName(valuationClassName);
						
			// get material records
				
						String getFinishedProduct="select * from material_code_request where REQUEST_NO='"+reqId+"'";
						ResultSet rs=ad.selectQuery(getFinishedProduct);
						while(rs.next())
						{
							statusForm.setHsnCode(rs.getString("HSN_Code"));
							statusForm.setBrandID(rs.getString("BRAND_ID"));
							statusForm.setRequestNo(reqId);
							statusForm.setRequestNumber(reqId);
							 reqDate=rs.getString("REQUEST_DATE");
							String a[]=reqDate.split(" ");
							reqDate=a[0];
							String b[]=reqDate.split("-");
							reqDate=b[2]+"/"+b[1]+"/"+b[0];
							statusForm.setRequestDate(reqDate);
							statusForm.setLocationId(rs.getString("LOCATION_ID"));
							statusForm.setMaterialTypeId(rs.getString("MATERIAL_TYPE_ID"));
							statusForm.setStorageLocationId(rs.getString("STORAGE_LOCATION_ID"));
							statusForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME"));
							statusForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME"));
							statusForm.setMaterialGroupId(rs.getString("MATERIAL_GROUP_ID"));
							statusForm.setUnitOfMeasId(rs.getString("UNIT_OF_MEAS_ID"));
							statusForm.setPuchaseGroupId(rs.getString("PURCHASE_GROUP_ID"));
							statusForm.setDivisionId(rs.getString("DIVISION_ID"));
							String isAsset=rs.getString("is_asset");
							if(isAsset.equalsIgnoreCase("1"))
							{
								statusForm.setIsAsset("1");
							}
							if(isAsset.equalsIgnoreCase("0"))
								statusForm.setIsAsset("0");
							
							statusForm.setApproximateValue(rs.getString("APPROXIMATE_VALUE"));
							statusForm.setValuationClass(rs.getString("VALUATION_CLASS"));
							statusForm.setDetailedJustification(rs.getString("DETAILED_JUSTIFICATION"));
							statusForm.setDetailedSpecification(rs.getString("DETAILED_SPECIFICATION"));
							
							String purposeId=rs.getString("PURPOSE_ID");
							purposeId=purposeId.replace(" ","");
							statusForm.setPurposeID(purposeId);
							String isSAS=rs.getString("IS_SAS_FORM_AVAILABLE");
							
							if(isSAS.equalsIgnoreCase("1"))
							{
								statusForm.setIsSASFormAvailable("1");
							}
							if(isSAS.equalsIgnoreCase("0"))
								statusForm.setIsSASFormAvailable("0");
							
							statusForm.setSapCodeNo(rs.getString("SAP_CODE_NO"));
							
							
							String sapCodeno=rs.getString("SAP_CODE_NO");
								if(sapCodeno!=null){
									statusForm.setSapCodeNo(sapCodeno);
							String sapCodeExist=rs.getString("SAP_CODE_EXISTS");
							if(sapCodeExist.equalsIgnoreCase("1"))
							{
								statusForm.setSapCodeExists("On");
							}
							if(sapCodeExist.equalsIgnoreCase("0"))
								statusForm.setSapCodeExistsNo("On");

							String sapCreationDate=rs.getString("SAP_CREATION_DATE");
							String sapDate[]=sapCreationDate.split(" ");
							sapCreationDate=sapDate[0];
							String sapCode[]=sapCreationDate.split("-");
							sapCreationDate=sapCode[2]+"/"+sapCode[1]+"/"+sapCode[0];
							statusForm.setSapCreationDate(sapCreationDate);
							statusForm.setSapCreatedBy(rs.getString("SAP_CREATED_BY"));
							statusForm.setRequestedBy(rs.getString("REQUESTED_BY"));
						}
						}
                    
					
					}
				}
				
				
				if(matType.equalsIgnoreCase("OSE"))
				{
					if(userRole.equalsIgnoreCase("User"))
					{

				 		
				 		
				 		String getFinishedProduct="select mat.HSN_Code,mat.REQUEST_NO,mat.REQUEST_DATE,mat.MATERIAL_GROUP_ID,loc.LOCNAME,loc.LOCATION_CODE,stLoc.MAT_TYPE,stLoc.STORAGE_LOCATION_NAME,mat.MATERIAL_SHORT_NAME," +
				 		" mat.MATERIAL_LONG_NAME,matGroup.STXT,uom.LTXT,pur.PURCHASE_GROUP_DESC,mat.IS_EQUIPMENT,mat.EQUIPMENT_NAME,mat.EQUIPMENT_MAKE," +
				 		"mat.Component_MAKE,mat.IS_SPARE,mat.OEM_PartNo,mat.IS_NEW_Equipment,mat.IS_NEW_Furniture,mat.IS_NEW_Facility,	mat.IS_Spare_required," +
				 		"mat.PO_NUMBER,mat.PR_NUMBER,dep.DPTSTXT,mat.APPROXIMATE_VALUE, val.VALUATION_DESC,mat.DETAILED_JUSTIFICATION,	mat.DETAILED_SPECIFICATION,mat.moc,mat.rating,mat.range,mat.DIMENSION,mat.PACK_SIZE,mat.equip_Intended" +
				 		" from material_code_request as mat,Location as loc,STORAGE_LOCATION as stLoc,MATERIAL_GROUP as matGroup , UNIT_MESUREMENT AS uom " +
				 		",PURCHASE_GROUP as pur ,VALUATION_CLASS as val ,DEPARTMENT as dep where REQUEST_NO='"+reqId+"' and	loc.LOCID=mat.LOCATION_ID and " +
				 		"stLoc.STORAGE_LOCATION_ID=mat.STORAGE_LOCATION_ID and matGroup.MATERIAL_GROUP_ID=mat.MATERIAL_GROUP_ID and uom.UNIT_OF_MEAS_ID=mat.UNIT_OF_MEAS_ID " +
				 		"and pur.PURCHASE_GROUP_ID=mat.PURCHASE_GROUP_ID and TYPE='OSE' and val.VALUATION_ID=mat.VALUATION_CLASS and dep.DPTID=mat.UTILIZING_DEPT";
						
				 		
				 		
				 		ResultSet rs=ad.selectQuery(getFinishedProduct);
						if(rs.next())
						{
							statusForm.setRequestNo(reqId);
							statusForm.setRequestNumber(reqId);
							statusForm.setReqMaterialGroup(rs.getString("MATERIAL_GROUP_ID"));
							reqDate=rs.getString("REQUEST_DATE");
							String a[]=reqDate.split(" ");
							reqDate=a[0];
							String b[]=reqDate.split("-");
							reqDate=b[2]+"/"+b[1]+"/"+b[0];
							statusForm.setRequestDate(reqDate);
							statusForm.setLocationId(rs.getString("LOCATION_CODE")+"-"+rs.getString("LOCNAME"));
						
							statusForm.setHsnCode(rs.getString("HSN_Code"));
							statusForm.setStorageLocationId(rs.getString("MAT_TYPE")+"-"+rs.getString("STORAGE_LOCATION_NAME"));
							statusForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME"));
							statusForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME"));
							statusForm.setMaterialGroupId(rs.getString("STXT"));
							statusForm.setPuchaseGroupId(rs.getString("PURCHASE_GROUP_DESC"));
							statusForm.setUnitOfMeasId(rs.getString("LTXT"));
							statusForm.setApproximateValue(rs.getString("APPROXIMATE_VALUE"));
							statusForm.setValuationClass(rs.getString("VALUATION_DESC"));
						
							String isEquipment=rs.getString("IS_EQUIPMENT");
							if(isEquipment.equalsIgnoreCase("1"))
							{
								statusForm.setIsEquipment("Yes");
								
							}
							statusForm.setEquipmentName(rs.getString("EQUIPMENT_NAME"));
							statusForm.setEquipmentMake(rs.getString("EQUIPMENT_MAKE"));
							if(isEquipment.equalsIgnoreCase("0")){
								statusForm.setIsEquipment("No");
							
							}
							String isSpare=rs.getString("IS_SPARE");
							if(isSpare.equalsIgnoreCase("1"))
							{
								statusForm.setIsSpare("Yes");
							
							}
							statusForm.setComponentMake(rs.getString("Component_MAKE"));
							statusForm.setOemPartNo(rs.getString("OEM_PartNo"));
							if(isSpare.equalsIgnoreCase("0")){
								statusForm.setIsSpare("No");
							
								
							}
							statusForm.setMoc(rs.getString("moc")); 
							statusForm.setRating(rs.getString("rating"));
							statusForm.setRange(rs.getString("range"));
							String isNewEquipment=rs.getString("IS_NEW_Equipment");
							if(isNewEquipment.equalsIgnoreCase("1"))
							{
								statusForm.setIsNewEquipment("Yes");
								
							}
							if(isNewEquipment.equalsIgnoreCase("0"))
							{
								statusForm.setIsNewEquipment("No");
								
							}
							if(isNewEquipment.equalsIgnoreCase("2"))
							{
								statusForm.setIsNewEquipment("N/A");
								
							}
							String isNewfurniturt=rs.getString("IS_NEW_Furniture");
							if(isNewfurniturt.equalsIgnoreCase("1"))
							{
								statusForm.setIsItNewFurniture("Yes");
								
							}
							if(isNewfurniturt.equalsIgnoreCase("0"))
							{
								statusForm.setIsItNewFurniture("No");
								
							}
							if(isNewfurniturt.equalsIgnoreCase("2"))
							{
								statusForm.setIsItNewFurniture("N/A");
								
							}
							String isNewfacility=rs.getString("IS_NEW_Facility");
							if(isNewfacility.equalsIgnoreCase("1"))
							{
								statusForm.setIsItFacility("Yes");
								
							}
							if(isNewfacility.equalsIgnoreCase("0"))
							{
								statusForm.setIsItFacility("No");
								
							}
							if(isNewfacility.equalsIgnoreCase("2"))
							{
								statusForm.setIsItFacility("N/A");
								
							}
								
							String issparey=rs.getString("IS_Spare_required");
							if(issparey.equalsIgnoreCase("1"))
							{
								statusForm.setIsSpareNewEquipment("Yes");
								
							}
							if(issparey.equalsIgnoreCase("0"))
							{
								statusForm.setIsSpareNewEquipment("No");
								
							}					
							statusForm.setPrNumber(rs.getString("PR_NUMBER"));
							statusForm.setPoNumber(rs.getString("PO_NUMBER"));
							statusForm.setUtilizingDept(rs.getString("DPTSTXT"));
							statusForm.setDetailedJustification(rs.getString("DETAILED_JUSTIFICATION"));
							statusForm.setDetailedSpecification(rs.getString("DETAILED_SPECIFICATION"));
							statusForm.setDimension(rs.getString("DIMENSION"));
							statusForm.setPackSize(rs.getString("PACK_SIZE"));
							statusForm.setEquipIntendedFor(rs.getString("equip_Intended"));
					
						}
						
					}else{

						
						String getCountryDetails="select * from Country";
						LinkedList countryID=new LinkedList();
						LinkedList countryName=new LinkedList();
						ResultSet rsCountryDetails=ad.selectQuery(getCountryDetails);
						while(rsCountryDetails.next()){
							countryID.add(rsCountryDetails.getString("LAND1"));
							countryName.add(rsCountryDetails.getString("LANDX"));
						}
						statusForm.setCounID(countryID);
						statusForm.setCountryName(countryName);
						
						LinkedList deptID=new LinkedList();
						LinkedList deptName=new LinkedList();
						String getdepartment="select * from department";
						ResultSet rsdepartment=ad.selectQuery(getdepartment);
						while(rsdepartment.next()){
							deptID.add(rsdepartment.getInt("DPTID"));
							deptName.add(rsdepartment.getString("DPTSTXT"));
						}
						
						statusForm.setDeptId(deptID);
						statusForm.setDeptName(deptName);
						
						String materialType="";
						String valuationType="";
						String getvaluationType="select MATERIAL_TYPE_ID,VALUATION_CLASS from material_code_request where REQUEST_NO='"+reqId+"'";
						ResultSet rsValuationType=ad.selectQuery(getvaluationType);
						while(rsValuationType.next()){
							materialType=rsValuationType.getString("MATERIAL_TYPE_ID");
							valuationType=rsValuationType.getString("VALUATION_CLASS");
						}
						ResultSet rs11 = ad.selectQuery("select LOCID," +
						"LOCNAME,location_code from location");
						ArrayList locationList=new ArrayList();
						ArrayList locationLabelList=new ArrayList();
						
						while(rs11.next()) {
							locationList.add(rs11.getString("LOCID"));
							locationLabelList.add(rs11.getString("LOCATION_CODE")+"-"+rs11.getString("LOCNAME"));
						}
						statusForm.setLocationIdList(locationList);
						statusForm.setLocationLabelList(locationLabelList);
						
						LinkedList materTypeIDList=new LinkedList();
						LinkedList materialTypeIdValueList=new LinkedList();
						String getMaterials="select * from MATERIAL_TYPE";
						ResultSet rsMaterial=ad.selectQuery(getMaterials);
						while(rsMaterial.next())
						{
							materTypeIDList.add(rsMaterial.getString("id"));
							materialTypeIdValueList.add(rsMaterial.getString("MATERIAL_GROUP_ID")+"-"+rsMaterial.getString("M_DESC"));
						}
						statusForm.setMaterTypeIDList(materTypeIDList);
						statusForm.setMaterialTypeIdValueList(materialTypeIdValueList);
						
						LinkedList materGroupIDList=new LinkedList();
						LinkedList materialGroupIdValueList=new LinkedList();
						String getMaterialGroup="select * from MATERIAL_GROUP where MATERIAL_TYPE like '%"+matType+"%' order by STXT";
						ResultSet rsMaterialGroup=ad.selectQuery(getMaterialGroup);
						while(rsMaterialGroup.next())
						{
							materGroupIDList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID"));
							materialGroupIdValueList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID")+"-"+rsMaterialGroup.getString("STXT"));
						}
						statusForm.setMaterGroupIDList(materGroupIDList);
						statusForm.setMaterialGroupIdValueList(materialGroupIdValueList);
						
						
						LinkedList unitOfMeasIdList=new LinkedList();
						LinkedList unitOfMeasIdValues=new LinkedList();
						
						String getunitMesurement="select * from UNIT_MESUREMENT";
						ResultSet rsUnit=ad.selectQuery(getunitMesurement);
						while(rsUnit.next())
						{
							unitOfMeasIdList.add(rsUnit.getString("UNIT_OF_MEAS_ID"));
							unitOfMeasIdValues.add(rsUnit.getString("UNIT_OF_MEAS_ID")+" - "+rsUnit.getString("LTXT"));
						}
						statusForm.setUnitOfMeasIdList(unitOfMeasIdList);
						statusForm.setUnitOfMeasIdValues(unitOfMeasIdValues);
						LinkedList storageID=new LinkedList();
						LinkedList storageName=new LinkedList();
						String getStorageDetails="select * from STORAGE_LOCATION where MAT_TYPE='OSE'";
						ResultSet rsStrogeLocation=ad.selectQuery(getStorageDetails);
						while(rsStrogeLocation.next()){
							storageID.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID"));
							storageName.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID")+"-"+rsStrogeLocation.getString("STORAGE_LOCATION_NAME"));
						}
						statusForm.setStorageID(storageID);
						statusForm.setStorageIDName(storageName);
						
						LinkedList valuationClassID=new LinkedList();
						LinkedList valuationClassName=new LinkedList();
						String getValuation="select * from VALUATION_CLASS ";
						ResultSet rsValuation=ad.selectQuery(getValuation);
						while(rsValuation.next())
						{
							valuationClassID.add(rsValuation.getString("VALUATION_ID"));
							valuationClassName.add(rsValuation.getString("VALUATION_ID")+"-"+rsValuation.getString("VALUATION_DESC"));
						}
						statusForm.setValuationClassID(valuationClassID);
						statusForm.setValuationClassName(valuationClassName);
						
						LinkedList puchaseGroupIdList=new LinkedList();
						LinkedList puchaseGroupIdValues=new LinkedList();
						
						String getPurchaseGroup="select * from PURCHASE_GROUP";
						ResultSet rsPurchaseGroup=ad.selectQuery(getPurchaseGroup);
						while(rsPurchaseGroup.next())
						{
							puchaseGroupIdList.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID"));
							puchaseGroupIdValues.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID")+"-"+rsPurchaseGroup.getString("PURCHASE_GROUP_DESC"));
						}
						statusForm.setPuchaseGroupIdList(puchaseGroupIdList);
						statusForm.setPuchaseGroupIdValues(puchaseGroupIdValues);
						
						String getFinishedProduct="select * from material_code_request where REQUEST_NO='"+reqId+"'";
						ResultSet rs=ad.selectQuery(getFinishedProduct);
						while(rs.next())
						{

							statusForm.setHsnCode(rs.getString("HSN_Code"));
							statusForm.setRequestNo(reqId);
							statusForm.setRequestNumber(reqId);
							reqDate=rs.getString("REQUEST_DATE");
							String a[]=reqDate.split(" ");
							reqDate=a[0];
							String b[]=reqDate.split("-");
							reqDate=b[2]+"/"+b[1]+"/"+b[0];
							statusForm.setRequestDate(reqDate);
							statusForm.setLocationId(rs.getString("LOCATION_ID"));
							statusForm.setMaterialTypeId(rs.getString("MATERIAL_TYPE_ID"));
							statusForm.setStorageLocationId(rs.getString("STORAGE_LOCATION_ID"));
							statusForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME"));
							statusForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME"));
							statusForm.setMaterialGroupId(rs.getString("MATERIAL_GROUP_ID"));
							statusForm.setPuchaseGroupId(rs.getString("PURCHASE_GROUP_ID"));
							statusForm.setUnitOfMeasId(rs.getString("UNIT_OF_MEAS_ID"));
							statusForm.setApproximateValue(rs.getString("APPROXIMATE_VALUE"));
							statusForm.setValuationClass(rs.getString("VALUATION_CLASS"));
							statusForm.setMaterialUsedIn(rs.getString("MATERIAL_USED_IN"));
							String isEquipment=rs.getString("IS_EQUIPMENT");
							if(isEquipment.equalsIgnoreCase("1"))
							{
								statusForm.setIsEquipment("1");
								
							}
							statusForm.setEquipmentName(rs.getString("EQUIPMENT_NAME"));
							statusForm.setEquipmentMake(rs.getString("EQUIPMENT_MAKE"));
							if(isEquipment.equalsIgnoreCase("0")){
								statusForm.setIsEquipment("0");
							
							}
							String isSpare=rs.getString("IS_SPARE");
							if(isSpare.equalsIgnoreCase("1"))
							{
								statusForm.setIsSpare("1");
							
							}
							statusForm.setComponentMake(rs.getString("Component_MAKE"));
							statusForm.setOemPartNo(rs.getString("OEM_PartNo"));
							if(isSpare.equalsIgnoreCase("0")){
								statusForm.setIsSpare("0");
							
								
							}
							
							statusForm.setMoc(rs.getString("moc")); 
							statusForm.setRating(rs.getString("rating"));
							statusForm.setRange(rs.getString("range"));
							statusForm.setIsNewEquipment(rs.getString("IS_NEW_Equipment"));
							statusForm.setIsItNewFurniture(rs.getString("IS_NEW_Furniture"));
							statusForm.setIsItFacility(rs.getString("IS_NEW_Facility"));
							statusForm.setIsSpareNewEquipment(rs.getString("IS_Spare_required"));
							
							
							
							statusForm.setPrNumber(rs.getString("PR_NUMBER"));
							statusForm.setPoNumber(rs.getString("PO_NUMBER"));
							statusForm.setUtilizingDept(rs.getString("UTILIZING_DEPT"));
							statusForm.setDetailedJustification(rs.getString("DETAILED_JUSTIFICATION"));
							statusForm.setDetailedSpecification(rs.getString("DETAILED_SPECIFICATION"));
							statusForm.setDimension(rs.getString("DIMENSION"));
							statusForm.setPackSize(rs.getString("PACK_SIZE"));
							statusForm.setEquipIntendedFor(rs.getString("equip_Intended"));
							statusForm.setPurposeID(rs.getString("PURPOSE_ID"));
							statusForm.setSapCodeNo(rs.getString("SAP_CODE_NO"));
							String sapCodeno=rs.getString("SAP_CODE_NO");
								if(sapCodeno!=null){
									statusForm.setSapCodeNo(sapCodeno);
							String sapCodeExist=rs.getString("SAP_CODE_EXISTS");
							if(sapCodeExist.equalsIgnoreCase("1"))
							{
								statusForm.setSapCodeExists("On");
							}
							if(sapCodeExist.equalsIgnoreCase("0"))
								statusForm.setSapCodeExistsNo("On");

							String sapCreationDate=rs.getString("SAP_CREATION_DATE");
							String sapDate[]=sapCreationDate.split(" ");
							sapCreationDate=sapDate[0];
							String sapCode[]=sapCreationDate.split("-");
							sapCreationDate=sapCode[2]+"/"+sapCode[1]+"/"+sapCode[0];
							statusForm.setSapCreationDate(sapCreationDate);
							statusForm.setSapCreatedBy(rs.getString("SAP_CREATED_BY"));
							statusForm.setRequestedBy(rs.getString("REQUESTED_BY"));
								}
								
							

						
						}
						//end of default values ZPSR
					
				
					}
				}
				
				if(matType.equalsIgnoreCase("BULK")){

					if(userRole.equalsIgnoreCase("User"))
					{
						
						String getSemiFinished="select mat.REQUEST_NO,mat.Type,loc.LOCATION_CODE,stLoc.MAT_TYPE,mat.MATERIAL_GROUP_ID,mat.REQUEST_DATE,loc.LOCNAME,stLoc.STORAGE_LOCATION_NAME,mat.MATERIAL_SHORT_NAME," +
		 				"mat.MATERIAL_LONG_NAME,matGroup.STXT,uom.LTXT,pac.PACK_SIZE_DESC,mat.CUSTOMER_NAME,mat.SHELF_LIFE," +
		 				"mat.SHELF_LIFE_TYPE,mat.RETEST_DAYS,mat.RETEST_DAYS_TYPE,mat.STANDARD_BATCH_SIZE,mat.BATCH_CODE ,mat.TARGET_WEIGHT," +
		 				"wei.W_UOM_DESC,val.VALUATION_DESC,SAP_CODE_NO,SAP_CODE_EXISTS,SAP_CREATION_DATE,SAP_CREATED_BY from material_code_request as mat,Location as loc,STORAGE_LOCATION as " +
		 				"stLoc,MATERIAL_GROUP as matGroup ,UNIT_MESUREMENT AS uom,PACK_SIZE as pac,WEIGHT_UOM as wei,VALUATION_CLASS" +
		 				" as val where REQUEST_NO='"+reqId+"' and loc.LOCID=mat.LOCATION_ID and stLoc.STORAGE_LOCATION_ID=mat.STORAGE_LOCATION_ID " +
		 				"and matGroup.MATERIAL_GROUP_ID=mat.MATERIAL_GROUP_ID and uom.UNIT_OF_MEAS_ID=mat.UNIT_OF_MEAS_ID	" +
		 				"and pac.PACK_SIZE_CODE=mat.PACK_SIZE and wei.W_UOM_CODE=mat.WEIGHT_UOM " +
		 				"and val.VALUATION_ID=mat.VALUATION_CLASS";
						ResultSet rs=ad.selectQuery(getSemiFinished);
						if(rs.next())
						{

							statusForm.setRequestNo(reqId);
							statusForm.setRequestNumber(reqId);
							statusForm.setReqMaterialGroup(rs.getString("MATERIAL_GROUP_ID"));
							reqDate=rs.getString("REQUEST_DATE");
							String a[]=reqDate.split(" ");
							reqDate=a[0];
							String b[]=reqDate.split("-");
							reqDate=b[2]+"/"+b[1]+"/"+b[0];
							statusForm.setRequestDate(reqDate);
							
							statusForm.setLocationId(rs.getString("LOCATION_CODE")+"-"+rs.getString("LOCNAME"));
							
							statusForm.setStorageLocationId(rs.getString("MAT_TYPE")+"-"+rs.getString("STORAGE_LOCATION_NAME"));
							statusForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME"));
							statusForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME"));
							statusForm.setMaterialGroupId(rs.getString("STXT"));
							
							statusForm.setUnitOfMeasId(rs.getString("LTXT"));
							statusForm.setPackSize(rs.getString("PACK_SIZE_DESC"));
							statusForm.setCustomerName(rs.getString("CUSTOMER_NAME"));
							statusForm.setShelfLife(rs.getString("SHELF_LIFE"));
							statusForm.setShelfType(rs.getString("SHELF_LIFE_TYPE"));
							statusForm.setStandardBatchSize(rs.getString("STANDARD_BATCH_SIZE"));
							statusForm.setBatchCode(rs.getString("BATCH_CODE"));
							statusForm.setTargetWeight(rs.getString("TARGET_WEIGHT"));
					 		
					 		
							statusForm.setWeightUOM(rs.getString("W_UOM_DESC"));
							statusForm.setRetestDays(rs.getString("RETEST_DAYS"));
							statusForm.setRetestType(rs.getString("RETEST_DAYS_TYPE"));
							statusForm.setValuationClass(rs.getString("VALUATION_DESC"));
					 		
					 		
					 
						}
						//country
						String editRecord1="select cou.LANDX from material_code_request as m ,Country as cou " +
								"where REQUEST_NO='"+reqId+"'and cou.LAND1=m.COUNTRY_ID ";
			 		
			 		
					ResultSet rs1=ad.selectQuery(editRecord1);
					if(rs1.next())
					{
						statusForm.setCountryId(rs1.getString("LANDX"));
						
					}
					}else{
						//creator semifinished
						
						String getCountryDetails="select * from Country";
						LinkedList countryID=new LinkedList();
						LinkedList countryName=new LinkedList();
						ResultSet rsCountryDetails=ad.selectQuery(getCountryDetails);
						while(rsCountryDetails.next()){
							countryID.add(rsCountryDetails.getString("LAND1"));
							countryName.add(rsCountryDetails.getString("LAND1")+" - "+rsCountryDetails.getString("LANDX"));
						}
						statusForm.setCounID(countryID);
						statusForm.setCountryName(countryName);
						
						LinkedList weightUOMID=new LinkedList();
						LinkedList weightUOMName=new LinkedList();
						String getweightUOM="select * from WEIGHT_UOM";
						ResultSet rsweightUOM=ad.selectQuery(getweightUOM);
						while(rsweightUOM.next())
						{
							weightUOMID.add(rsweightUOM.getString("W_UOM_CODE"));
							weightUOMName.add(rsweightUOM.getString("W_UOM_CODE")+" - "+rsweightUOM.getString("W_UOM_DESC"));
						}
						statusForm.setWeightUOMID(weightUOMID);
						statusForm.setWeightUOMName(weightUOMName);
						
						LinkedList packSizeID=new LinkedList();
						LinkedList packSizeName=new LinkedList();
						String getPackSize="select * from PACK_SIZE";
						ResultSet rsPackSize=ad.selectQuery(getPackSize);
						while(rsPackSize.next())
						{
							packSizeID.add(rsPackSize.getString("PACK_SIZE_CODE"));
							packSizeName.add(rsPackSize.getString("PACK_SIZE_DESC"));
						}
						statusForm.setPackSizeID(packSizeID);
						statusForm.setPackSizeName(packSizeName);
					
						LinkedList materTypeIDList=new LinkedList();
						LinkedList materialTypeIdValueList=new LinkedList();
						
						
						String getMaterials="select * from MATERIAL_TYPE";
						ResultSet rsMaterial=ad.selectQuery(getMaterials);
						while(rsMaterial.next())
						{
							materTypeIDList.add(rsMaterial.getString("id"));
							materialTypeIdValueList.add(rsMaterial.getString("MATERIAL_GROUP_ID")+" - "+rsMaterial.getString("M_DESC"));
						}
						statusForm.setMaterTypeIDList(materTypeIDList);
						statusForm.setMaterialTypeIdValueList(materialTypeIdValueList);
						
						
						
						
						ResultSet rs11 = ad.selectQuery("select * from location");
						ArrayList locationList=new ArrayList();
						ArrayList locationLabelList=new ArrayList();
						
						while(rs11.next()) {
							locationList.add(rs11.getString("LOCID"));
							locationLabelList.add(rs11.getString("LOCATION_CODE")+" - "+rs11.getString("LOCNAME"));
						}
						statusForm.setLocationIdList(locationList);
						statusForm.setLocationLabelList(locationLabelList);
						LinkedList storageID=new LinkedList();
						LinkedList storageName=new LinkedList();
						String getStorageDetails="select * from STORAGE_LOCATION where  MAT_TYPE='BULK'";
						ResultSet rsStrogeLocation=ad.selectQuery(getStorageDetails);
						while(rsStrogeLocation.next()){
							storageID.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID"));
							storageName.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID")+" - "+rsStrogeLocation.getString("STORAGE_LOCATION_NAME"));
						}
						statusForm.setStorageID(storageID);
						statusForm.setStorageIDName(storageName);
						LinkedList materGroupIDList=new LinkedList();
						LinkedList materialGroupIdValueList=new LinkedList();
						
						String getMaterialGroup="select * from MATERIAL_GROUP where MATERIAL_TYPE like '%"+matType+"%' order by STXT";
						ResultSet rsMaterialGroup=ad.selectQuery(getMaterialGroup);
						while(rsMaterialGroup.next())
						{
							materGroupIDList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID"));
							materialGroupIdValueList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID")+" - "+rsMaterialGroup.getString("STXT"));
						}
						statusForm.setMaterGroupIDList(materGroupIDList);
						statusForm.setMaterialGroupIdValueList(materialGroupIdValueList);
						
						
						LinkedList unitOfMeasIdList=new LinkedList();
						LinkedList unitOfMeasIdValues=new LinkedList();
						
						String getunitMesurement="select * from UNIT_MESUREMENT";
						ResultSet rsUnit=ad.selectQuery(getunitMesurement);
						while(rsUnit.next())
						{
							unitOfMeasIdList.add(rsUnit.getString("UNIT_OF_MEAS_ID"));
							unitOfMeasIdValues.add(rsUnit.getString("UNIT_OF_MEAS_ID")+" - "+rsUnit.getString("LTXT"));
						}
						statusForm.setUnitOfMeasIdList(unitOfMeasIdList);
						statusForm.setUnitOfMeasIdValues(unitOfMeasIdValues);
						
						LinkedList valuationClassID=new LinkedList();
						LinkedList valuationClassName=new LinkedList();
						String getValuation="select * from VALUATION_CLASS";
						ResultSet rsValuation=ad.selectQuery(getValuation);
						while(rsValuation.next())
						{
							valuationClassID.add(rsValuation.getString("VALUATION_ID"));
							valuationClassName.add(rsValuation.getString("VALUATION_ID")+" - "+rsValuation.getString("VALUATION_DESC"));
						}
						statusForm.setValuationClassID(valuationClassID);
						statusForm.setValuationClassName(valuationClassName);
						String getSemiFinished="select * from material_code_request where REQUEST_NO='"+reqId+"'";
						ResultSet rs=ad.selectQuery(getSemiFinished);
						while(rs.next())
						{

							statusForm.setRequestNo(reqId);
							reqDate=rs.getString("REQUEST_DATE");
							String a[]=reqDate.split(" ");
							reqDate=a[0];
							String b[]=reqDate.split("-");
							reqDate=b[2]+"/"+b[1]+"/"+b[0];
							statusForm.setRequestDate(reqDate);
							
							statusForm.setLocationId(rs.getString("LOCATION_ID"));
							statusForm.setMaterialTypeId(rs.getString("MATERIAL_TYPE_ID"));
							statusForm.setStorageLocationId(rs.getString("STORAGE_LOCATION_ID"));
							statusForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME"));
							statusForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME"));
							statusForm.setMaterialGroupId(rs.getString("MATERIAL_GROUP_ID"));
							
							statusForm.setUnitOfMeasId(rs.getString("UNIT_OF_MEAS_ID"));
							statusForm.setPackSize(rs.getString("PACK_SIZE"));
							statusForm.setCountryId(rs.getString("COUNTRY_ID"));
							statusForm.setCustomerName(rs.getString("CUSTOMER_NAME"));
							statusForm.setShelfLife(rs.getString("SHELF_LIFE"));
							statusForm.setShelfType(rs.getString("SHELF_LIFE_TYPE"));
							statusForm.setStandardBatchSize(rs.getString("STANDARD_BATCH_SIZE"));
							statusForm.setBatchCode(rs.getString("BATCH_CODE"));
							statusForm.setTargetWeight(rs.getString("TARGET_WEIGHT"));
							statusForm.setProdInspMemo(rs.getString("PROD_INSP_MEMO"));
					 		
							statusForm.setWeightUOM(rs.getString("WEIGHT_UOM"));
							statusForm.setRetestDays(rs.getString("RETEST_DAYS"));
							statusForm.setValuationClass(rs.getString("VALUATION_CLASS"));
							
							String sapCodeno=rs.getString("SAP_CODE_NO");
							if(sapCodeno!=null)
							{
								statusForm.setSapCodeNo(rs.getString("SAP_CODE_NO"));
								String sapCodeExist=rs.getString("SAP_CODE_EXISTS");
								if(sapCodeExist.equalsIgnoreCase("1"))
								{
									statusForm.setSapCodeExists("On");
								}
								if(sapCodeExist.equalsIgnoreCase("0"))
									statusForm.setSapCodeExistsNo("On");

								String createDate=rs.getString("SAP_CREATION_DATE");
								String a1[]=createDate.split(" ");
								createDate=a1[0];
								String b1[]=createDate.split("-");
								createDate=b1[2]+"/"+b1[1]+"/"+b1[0];
								statusForm.setSapCreationDate(createDate);
								statusForm.setSapCreatedBy(rs.getString("SAP_CREATED_BY"));
							}
						
						}
						
					}
					
				
					
					
				}
				
				if(matType.equalsIgnoreCase("PM"))
				{
					if((!userRole.equalsIgnoreCase("User"))){
						String getCountryDetails="select * from Country";
						LinkedList countryID=new LinkedList();
						LinkedList countryName=new LinkedList();
						ResultSet rsCountryDetails=ad.selectQuery(getCountryDetails);
						while(rsCountryDetails.next()){
							countryID.add(rsCountryDetails.getString("LAND1"));
							countryName.add(rsCountryDetails.getString("LAND1")+" - "+rsCountryDetails.getString("LANDX"));
						}
						statusForm.setCounID(countryID);
						statusForm.setCountryName(countryName);
						
						ResultSet rs11 = ad.selectQuery("select * from location");
						ArrayList locationList=new ArrayList();
						ArrayList locationLabelList=new ArrayList();
						
						while(rs11.next()) {
							locationList.add(rs11.getString("LOCID"));
							locationLabelList.add(rs11.getString("LOCATION_CODE")+" - "+rs11.getString("LOCNAME"));
						}
						statusForm.setLocationIdList(locationList);
						statusForm.setLocationLabelList(locationLabelList);
						
						
						LinkedList storageID=new LinkedList();
						LinkedList storageName=new LinkedList();
						String getStorageDetails="select * from STORAGE_LOCATION where MAT_TYPE='PM'";
						ResultSet rsStrogeLocation=ad.selectQuery(getStorageDetails);
						while(rsStrogeLocation.next()){
							storageID.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID"));
							storageName.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID")+" - "+rsStrogeLocation.getString("STORAGE_LOCATION_NAME"));
						}
						statusForm.setStorageID(storageID);
						statusForm.setStorageIDName(storageName);
						
						LinkedList materTypeIDList=new LinkedList();
						LinkedList materialTypeIdValueList=new LinkedList();
						String getMaterials="select * from MATERIAL_TYPE";
						ResultSet rsMaterial=ad.selectQuery(getMaterials);
						while(rsMaterial.next())
						{
							materTypeIDList.add(rsMaterial.getString("id"));
							materialTypeIdValueList.add(rsMaterial.getString("MATERIAL_GROUP_ID")+" - "+rsMaterial.getString("M_DESC"));
						}
						statusForm.setMaterTypeIDList(materTypeIDList);
						statusForm.setMaterialTypeIdValueList(materialTypeIdValueList);
						
						LinkedList materGroupIDList=new LinkedList();
						LinkedList materialGroupIdValueList=new LinkedList();
						
						String getMaterialGroup="select * from MATERIAL_GROUP";
						ResultSet rsMaterialGroup=ad.selectQuery(getMaterialGroup);
						while(rsMaterialGroup.next())
						{
							materGroupIDList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID"));
							materialGroupIdValueList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID")+" - "+rsMaterialGroup.getString("STXT"));
						}
						statusForm.setMaterGroupIDList(materGroupIDList);
						statusForm.setMaterialGroupIdValueList(materialGroupIdValueList);
						
						LinkedList unitOfMeasIdList=new LinkedList();
						LinkedList unitOfMeasIdValues=new LinkedList();
						
						String getunitMesurement="select * from UNIT_MESUREMENT";
						ResultSet rsUnit=ad.selectQuery(getunitMesurement);
						while(rsUnit.next())
						{
							unitOfMeasIdList.add(rsUnit.getString("UNIT_OF_MEAS_ID"));
							unitOfMeasIdValues.add(rsUnit.getString("UNIT_OF_MEAS_ID")+" - "+rsUnit.getString("LTXT"));
						}
						statusForm.setUnitOfMeasIdList(unitOfMeasIdList);
						statusForm.setUnitOfMeasIdValues(unitOfMeasIdValues);
						
						LinkedList puchaseGroupIdList=new LinkedList();
						LinkedList puchaseGroupIdValues=new LinkedList();
						
						String getPurchaseGroup="select * from PURCHASE_GROUP";
						ResultSet rsPurchaseGroup=ad.selectQuery(getPurchaseGroup);
						while(rsPurchaseGroup.next())
						{
							puchaseGroupIdList.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID"));
							puchaseGroupIdValues.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID")+" - "+rsPurchaseGroup.getString("PURCHASE_GROUP_DESC"));
						}
						statusForm.setPuchaseGroupIdList(puchaseGroupIdList);
						statusForm.setPuchaseGroupIdValues(puchaseGroupIdValues);
						
						LinkedList dmfGradeIDList=new LinkedList();
						LinkedList dmfGradeIDValueList=new LinkedList();
						
						String getDMFValues="select * from DMF_GRADE";
						ResultSet rsDMFValues=ad.selectQuery(getDMFValues);
						while(rsDMFValues.next())
						{
							dmfGradeIDList.add(rsDMFValues.getString("DMF_GRADE_ID"));
							dmfGradeIDValueList.add(rsDMFValues.getString("DMF_GRADE_ID")+" - "+rsDMFValues.getString("DMF_GRADE_DESC"));
						}
						statusForm.setDmfGradeIDList(dmfGradeIDList);
						statusForm.setDmfGradeIDValueList(dmfGradeIDValueList);
						
						LinkedList packageGroupID=new LinkedList();
						LinkedList packageGroupIDValue=new LinkedList();
						
						String getPackageGroup="select * from PACKAGE_MATERIAL_GROUP";
						ResultSet rsPackageGroup=ad.selectQuery(getPackageGroup);
						
						while(rsPackageGroup.next())
						{
							packageGroupID.add(rsPackageGroup.getString("PACKING_MATERIAL_GROUP_ID"));
							packageGroupIDValue.add(rsPackageGroup.getString("PACKING_MATERIAL_GROUP_ID")+" - "+rsPackageGroup.getString("PACKING_MATERIAL_GROUP_NAME"));
						}
						statusForm.setPackageGroupID(packageGroupID);
						statusForm.setPackageGroupIDValue(packageGroupIDValue);
						
						LinkedList valuationClassID=new LinkedList();
						LinkedList valuationClassName=new LinkedList();
						
						String getValuation="select * from VALUATION_CLASS where MAT_TYPE='PM'";
						ResultSet rsValuation=ad.selectQuery(getValuation);
						while(rsValuation.next())
						{
							valuationClassID.add(rsValuation.getString("VALUATION_ID"));
							valuationClassName.add(rsValuation.getString("VALUATION_ID")+" - "+rsValuation.getString("VALUATION_DESC"));
						}
						statusForm.setValuationClassID(valuationClassID);
						statusForm.setValuationClassName(valuationClassName);
						
						LinkedList tempIDList=new LinkedList();
						LinkedList temValueList=new LinkedList();
						String getTemp="select * from TEMP_CONDITION order by TEMP_CON_DESC";
						ResultSet rsTemp=ad.selectQuery(getTemp);
						while(rsTemp.next())
						{
							tempIDList.add(rsTemp.getString("TEMP_CON_ID"));
							temValueList.add(rsTemp.getString("TEMP_CON_ID")+" - "+rsTemp.getString("TEMP_CON_DESC"));
						}
						statusForm.setTempIDList(tempIDList);
						statusForm.setTemValueList(temValueList);
						
						LinkedList storageIDList=new LinkedList();
						LinkedList storageLocList=new LinkedList();
						String getStorageLoc="select * from STORAGE_CONDITION";
						ResultSet rsStorageLoc=ad.selectQuery(getStorageLoc);
						while(rsStorageLoc.next())
						{
							storageIDList.add(rsStorageLoc.getString("STO_COND_CODE"));
							storageLocList.add(rsStorageLoc.getString("STO_COND_CODE")+" - "+rsStorageLoc.getString("LTXT"));
						}
						statusForm.setStorageIDList(storageIDList);
						statusForm.setStorageLocList(storageLocList);
					// get material records
						
						String getMaterial="select * from material_code_request where REQUEST_NO='"+reqId+"'";
						ResultSet rs=ad.selectQuery(getMaterial);
						while(rs.next())
						{
							statusForm.setRequestNo(reqId);
							statusForm.setRequestNumber(reqId);
							reqDate=rs.getString("REQUEST_DATE");
							String a[]=reqDate.split(" ");
							reqDate=a[0];
							String b[]=reqDate.split("-");
							reqDate=b[2]+"/"+b[1]+"/"+b[0];
							statusForm.setRequestDate(reqDate);
							statusForm.setLocationId(rs.getString("LOCATION_ID"));
							statusForm.setStorageLocationId(rs.getString("STORAGE_LOCATION_ID"));
							statusForm.setStorage(rs
									.getString("STORAGE"));
							statusForm.setHsnCode(rs.getString("HSN_Code"));
							statusForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME"));
							statusForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME"));
							statusForm.setMaterialGroupId(rs.getString("MATERIAL_GROUP_ID"));
							String isDMFMaterial=rs.getString("IS_DMF_MATERIAL");
							if(isDMFMaterial.equalsIgnoreCase("1"))
							{
								statusForm.setIsDMFMaterial("1");
								request.setAttribute("dmfMandatory", "dmfMandatory");
								statusForm.setDmfGradeId(rs.getString("DMF_GRADE_ID"));
								statusForm.setCosGradeNo(rs.getString("COS_GRADE_AND_NO"));
							}
							if(isDMFMaterial.equalsIgnoreCase("0")){
								statusForm.setIsDMFMaterial("0");
								statusForm.setDmfGradeId(rs.getString("DMF_GRADE_ID"));
								statusForm.setCosGradeNo(rs.getString("COS_GRADE_AND_NO"));
								request.setAttribute("dmfNotMandatory", "dmfNotMandatory");
							}
							statusForm.setAdditionalTest(rs.getString("ADDITIONAL_TEST"));
							
							statusForm.setCountryId(rs.getString("COUNTRY_ID"));
							statusForm.setCustomerName(rs.getString("CUSTOMER_NAME"));
							statusForm.setToBeUsedInProducts(rs.getString("TO_BE_USED_IN_PRODUCTS"));
							String isVendorStatus=rs.getString("IS_VENDOR_SPECIFIC_MATERIAL");
							if(isVendorStatus.equalsIgnoreCase("1"))
							{
								statusForm.setIsVendorSpecificMaterial("1");
								request.setAttribute("vedorMandatory", "vedorMandatory");
								statusForm.setMfgrName(rs.getString("MFGR_NAME"));
								statusForm.setSiteOfManufacture(rs.getString("SITE_OF_MANUFACTURE"));
							}
							if(isVendorStatus.equalsIgnoreCase("0"))
							{
								statusForm.setIsVendorSpecificMaterial("0");
								request.setAttribute("vedorNotMandatory", "vedorNotMandatory");
							}
							statusForm.setMfgrName(rs.getString("MFGR_NAME"));
							statusForm.setSiteOfManufacture(rs.getString("SITE_OF_MANUFACTURE"));
							statusForm.setTempCondition(rs.getString("TEMP_CONDITION"));
							statusForm.setStorageCondition(rs.getString("STORAGE_CONDITION"));
							statusForm.setRetestDays(rs.getString("RETEST_DAYS"));
							statusForm.setRetestType(rs.getString("RETEST_DAYS_TYPE"));
							statusForm.setDutyElement(rs.getString("DUTY_ELEMENT"));
							
							statusForm.setPackageMaterialGroup(rs.getString("PACKING_MATERIAL_GROUP"));
							statusForm.setTypeOfMaterial(rs.getString("Type_Of_Material"));
							String typeOfMaterial=rs.getString("Type_Of_Material");
							
							if(typeOfMaterial.equalsIgnoreCase("Printed Material"))
							{
								request.setAttribute("materialTypeMandatory", "materialTypeMandatory");
								statusForm.setArtworkNo(rs.getString("ARTWORK_NO"));
								String isARTWORKRevisionStatus=rs.getString("IS_ARTWORK_REVISION");
								if(isARTWORKRevisionStatus.equalsIgnoreCase("1"))
								{
									statusForm.setIsArtworkRevision("1");
								}
								if(isARTWORKRevisionStatus.equalsIgnoreCase("0"))
									statusForm.setIsArtworkRevision("0");
								
							}
							else
								request.setAttribute("materialTypeNotMandatory", "materialTypeNotMandatory");
							
							statusForm.setExistingSAPItemCode(rs.getString("EXISTING_SAP_ITEM_CODE"));
							statusForm.setApproximateValue(rs.getString("APPROXIMATE_VALUE"));
						
						
							ArrayList fileList = new ArrayList();
							String uploadedFiles=rs.getString("Attachements");
							statusForm.setUnitOfMeasId(rs.getString("UNIT_OF_MEAS_ID"));
							statusForm.setValuationClass(rs.getString("VALUATION_CLASS"));
							statusForm.setPuchaseGroupId(rs.getString("PURCHASE_GROUP_ID"));
							if(uploadedFiles.equalsIgnoreCase(""))
							{
							}else{
							String v[] = uploadedFiles.split(",");
							int l = v.length;
							for (int i = 0; i < l; i++) 
							{
								PackageMaterialMasterForm pendAppForm2=new PackageMaterialMasterForm();
							int x=v[i].lastIndexOf("/");
							uploadedFiles=v[i].substring(x+1);		
							pendAppForm2.setFileList(uploadedFiles);
							pendAppForm2.setFilepath("jsp/EMicro Files/ESS/sapMasterRequest/PackageMaterial Files/UploadFiles/"+uploadedFiles+"");
							fileList.add(pendAppForm2);
							}
							request.setAttribute("listName", fileList);
							}
						
							String sapCodeno=rs.getString("SAP_CODE_NO");
							if(sapCodeno!=null)
							{
								statusForm.setSapCodeNo(rs.getString("SAP_CODE_NO"));
								String sapCodeExist=rs.getString("SAP_CODE_EXISTS");
								if(sapCodeExist.equalsIgnoreCase("1"))
								{
									statusForm.setSapCodeExists("On");
								}
								if(sapCodeExist.equalsIgnoreCase("0"))
									statusForm.setSapCodeExistsNo("On");

								String createDate=rs.getString("SAP_CREATION_DATE");
								String a1[]=createDate.split(" ");
								createDate=a1[0];
								String b1[]=createDate.split("-");
								createDate=b1[2]+"/"+b1[1]+"/"+b1[0];
								statusForm.setSapCreationDate(createDate);
								statusForm.setSapCreatedBy(rs.getString("SAP_CREATED_BY"));
							}
							
						
						}
							
						
						
					
					}else{
						
						String getMaterial="select mat.HSN_Code,mat.REQUEST_NO,mat.Storage,mat.Type,mat.MATERIAL_GROUP_ID,stLoc.MAT_TYPE,loc.LOCATION_CODE,mat.MATERIAL_GROUP_ID,mat.REQUEST_DATE,loc.LOCNAME,stLoc.STORAGE_LOCATION_NAME,mat.MATERIAL_SHORT_NAME," +
						"mat.MATERIAL_LONG_NAME,matGroup.STXT,uom.LTXT,pur.PURCHASE_GROUP_DESC,mat.DUTY_ELEMENT,pacgrp.PACKING_MATERIAL_GROUP_NAME," +
						"mat.Type_Of_Material,mat.ARTWORK_NO,mat.IS_ARTWORK_REVISION,mat.EXISTING_SAP_ITEM_CODE,mat.IS_DMF_MATERIAL,dmf.DMF_GRADE_DESC," +
						"mat.COS_GRADE_AND_NO,mat.ADDITIONAL_TEST,mat.IS_VENDOR_SPECIFIC_MATERIAL,mat.MFGR_NAME,mat.SITE_OF_MANUFACTURE,cou.LANDX," +
						"mat.CUSTOMER_NAME,mat.TO_BE_USED_IN_PRODUCTS,mat.RETEST_DAYS,mat.RETEST_DAYS_TYPE,val.VALUATION_DESC," +
						"mat.APPROXIMATE_VALUE,mat.Attachements,SAP_CODE_NO,SAP_CODE_EXISTS,SAP_CREATION_DATE,SAP_CREATED_BY from material_code_request as mat,Location as loc,STORAGE_LOCATION as stLoc," +
						"MATERIAL_GROUP as matGroup ,UNIT_MESUREMENT AS uom,PURCHASE_GROUP as pur,PACKAGE_MATERIAL_GROUP as pacgrp,DMF_GRADE as dmf," +
						"Country as cou,VALUATION_CLASS as val where REQUEST_NO='"+reqId+"' " +
						"and loc.LOCID=mat.LOCATION_ID and stLoc.STORAGE_LOCATION_ID=mat.STORAGE_LOCATION_ID and matGroup.MATERIAL_GROUP_ID=mat.MATERIAL_GROUP_ID" +
						" and uom.UNIT_OF_MEAS_ID=mat.UNIT_OF_MEAS_ID and pur.PURCHASE_GROUP_ID=mat.PURCHASE_GROUP_ID  and pacgrp.PACKING_MATERIAL_GROUP_ID=mat.PACKING_MATERIAL_GROUP " +
						" and dmf.DMF_GRADE_ID=mat.DMF_GRADE_ID and cou.LAND1=mat.COUNTRY_ID  " +
						" and val.VALUATION_ID=mat.VALUATION_CLASS";
						
						ResultSet rs=ad.selectQuery(getMaterial);
						while(rs.next())
						{	
							statusForm.setRequestNo(reqId);
							statusForm.setRequestNumber(reqId);
							statusForm.setReqMaterialGroup(rs.getString("MATERIAL_GROUP_ID"));
							matType=rs.getString("Type");
							matGroup=rs.getString("MATERIAL_GROUP_ID");
							location=rs.getString("LOCATION_CODE");
							 reqDate=rs.getString("REQUEST_DATE");
							 statusForm.setHsnCode(rs.getString("HSN_Code"));
							String a[]=reqDate.split(" ");
							reqDate=a[0];
							String b[]=reqDate.split("-");
							reqDate=b[2]+"/"+b[1]+"/"+b[0];
							statusForm.setRequestDate(reqDate);
							statusForm.setLocationId(rs.getString("LOCATION_CODE")+"-"+rs.getString("LOCNAME"));
							statusForm.setStorageLocationId(rs.getString("MAT_TYPE")+"-"+rs.getString("STORAGE_LOCATION_NAME"));
							statusForm.setStorage(rs
									.getString("STORAGE"));
							statusForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME"));
							statusForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME"));
							statusForm.setMaterialGroupId(rs.getString("STXT"));
							String isDMFMaterial=rs.getString("IS_DMF_MATERIAL");
							if(isDMFMaterial.equalsIgnoreCase("1"))
							{
								statusForm.setIsDMFMaterial("YES");
								request.setAttribute("dmfMandatory", "dmfMandatory");
								statusForm.setDmfGradeId(rs.getString("DMF_GRADE_DESC"));
								statusForm.setCosGradeNo(rs.getString("COS_GRADE_AND_NO"));
							}
							if(isDMFMaterial.equalsIgnoreCase("0")){
								statusForm.setIsDMFMaterial("NO");
								request.setAttribute("dmfNotMandatory", "dmfNotMandatory");
								statusForm.setDmfGradeId(rs.getString("DMF_GRADE_DESC"));
								statusForm.setCosGradeNo(rs.getString("COS_GRADE_AND_NO"));
							}
							statusForm.setAdditionalTest(rs.getString("ADDITIONAL_TEST"));
							
							statusForm.setCountryId(rs.getString("LANDX"));
							statusForm.setCustomerName(rs.getString("CUSTOMER_NAME"));
							statusForm.setToBeUsedInProducts(rs.getString("TO_BE_USED_IN_PRODUCTS"));
							String isVendorStatus=rs.getString("IS_VENDOR_SPECIFIC_MATERIAL");
							if(isVendorStatus.equalsIgnoreCase("1"))
							{
								statusForm.setIsVendorSpecificMaterial("YES");
								request.setAttribute("vedorMandatory", "vedorMandatory");
								statusForm.setMfgrName(rs.getString("MFGR_NAME"));
								statusForm.setSiteOfManufacture(rs.getString("SITE_OF_MANUFACTURE"));
							}
							if(isVendorStatus.equalsIgnoreCase("0"))
							{
								statusForm.setIsVendorSpecificMaterial("NO");
								request.setAttribute("vedorNotMandatory", "vedorNotMandatory");
							}
								statusForm.setMfgrName(rs.getString("MFGR_NAME"));
							statusForm.setSiteOfManufacture(rs.getString("SITE_OF_MANUFACTURE"));
							
							statusForm.setRetestDays(rs.getString("RETEST_DAYS"));
							statusForm.setRetestType(rs.getString("RETEST_DAYS_TYPE"));
							String dutyElement=rs.getString("DUTY_ELEMENT");
							if(dutyElement.equalsIgnoreCase("1"))
							{
								statusForm.setDutyElement("0-Indigenous Material with or without Cenvat");
							}
							if(dutyElement.equalsIgnoreCase("0"))
								statusForm.setDutyElement("1-Duty Exempted Packing Materials for Finished product");
							statusForm.setPackageMaterialGroup(rs.getString("PACKING_MATERIAL_GROUP_NAME"));
							statusForm.setTypeOfMaterial(rs.getString("Type_Of_Material"));
							String typeOfMaterial=rs.getString("Type_Of_Material");
							
							if(typeOfMaterial.equalsIgnoreCase("Printed Material"))
							{
								request.setAttribute("materialTypeMandatory", "materialTypeMandatory");
								statusForm.setArtworkNo(rs.getString("ARTWORK_NO"));
								String isARTWORKRevisionStatus=rs.getString("IS_ARTWORK_REVISION");
								if(isARTWORKRevisionStatus.equalsIgnoreCase("1"))
								{
									statusForm.setIsArtworkRevision("YES");
								}
								if(isARTWORKRevisionStatus.equalsIgnoreCase("0"))
									statusForm.setIsArtworkRevision("NO");
								
							}
							else
								request.setAttribute("materialTypeNotMandatory", "materialTypeNotMandatory");
							
							statusForm.setExistingSAPItemCode(rs.getString("EXISTING_SAP_ITEM_CODE"));
							statusForm.setApproximateValue(rs.getString("APPROXIMATE_VALUE"));
						
							
							ArrayList fileList = new ArrayList();
							String uploadedFiles=rs.getString("Attachements");
							statusForm.setUnitOfMeasId(rs.getString("LTXT"));
							statusForm.setValuationClass(rs.getString("VALUATION_DESC"));
							statusForm.setPuchaseGroupId(rs.getString("PURCHASE_GROUP_DESC"));
							if(uploadedFiles.equalsIgnoreCase(""))
							{
							}else{
							String v[] = uploadedFiles.split(",");
							int l = v.length;
							for (int i = 0; i < l; i++) 
							{
								PackageMaterialMasterForm statusForm2=new PackageMaterialMasterForm();
							int x=v[i].lastIndexOf("/");
							uploadedFiles=v[i].substring(x+1);		
							statusForm2.setFileList(uploadedFiles);
							statusForm2.setFilepath("jsp/EMicro Files/ESS/sapMasterRequest/PackageMaterial Files/UploadFiles/"+uploadedFiles+"");
							fileList.add(statusForm2);
							}
							request.setAttribute("listName", fileList);
							}
							String sapCodeno=rs.getString("SAP_CODE_NO");
							if(sapCodeno!=null)
							{
								statusForm.setSapCodeNo(rs.getString("SAP_CODE_NO"));
								String sapCodeExist=rs.getString("SAP_CODE_EXISTS");
								if(sapCodeExist.equalsIgnoreCase("1"))
								{
									statusForm.setSapCodeExists("On");
								}
								if(sapCodeExist.equalsIgnoreCase("0"))
									statusForm.setSapCodeExistsNo("On");
								String createDate=rs.getString("SAP_CREATION_DATE");
								String a1[]=createDate.split(" ");
								createDate=a1[0];
								String b1[]=createDate.split("-");
								createDate=b1[2]+"/"+b1[1]+"/"+b1[0];
								statusForm.setSapCreationDate(createDate);
								statusForm.setSapCreatedBy(rs.getString("SAP_CREATED_BY"));
							}
						}
						
						
						String getMaterial1="select tem.TEMP_CON_DESC from material_code_request as mat,TEMP_CONDITION as tem " +
						" where REQUEST_NO='"+reqId+"' and tem.TEMP_CON_ID=mat.TEMP_CONDITION ";
				
				ResultSet rs1=ad.selectQuery(getMaterial1);
				while(rs1.next())
				{
					statusForm.setTempCondition(rs1.getString("TEMP_CON_DESC"));
				}
				
				//STORAGE_CONDITION
				
				String getMaterial2="select stcon.LTXT from material_code_request as mat,STORAGE_CONDITION as stcon" +
						" where REQUEST_NO='"+reqId+"'  and stcon.STO_COND_CODE=mat.STORAGE_CONDITION";	
				
				ResultSet rs2=ad.selectQuery(getMaterial2);
				while(rs2.next())
				{
					statusForm.setStorageCondition(rs2.getString("LTXT"));
				}
						
				}
				}
				
				
				if(matType.equalsIgnoreCase("FG") || matType.equalsIgnoreCase("HAWA"))
				{
					
					LinkedList finDetails=new LinkedList();
					if(userRole.equalsIgnoreCase("User"))
					{

						String getFinishedProduct="select mat.HSN_Code, mat.REQUEST_NO,mat.Storage,mat.Type,loc.LOCATION_CODE,mat.MATERIAL_GROUP_ID,mat.REQUEST_DATE,loc.LOCNAME,mat.MANUFACTURED_AT," +
					 	  "mat.MATERIAL_SHORT_NAME, mat.MATERIAL_LONG_NAME,matGroup.STXT,uom.LTXT,mat.DOMESTIC_OR_EXPORTS,cou.LANDX,mat.CUSTOMER_NAME," +
					 	  "mat.SALEABLE_OR_SAMPLE,mat.SALES_PACK_ID,pac.P_TYPE_DESC,sal.S_UOM_DESC,div.DIV_DESC,the.THER_SEG_DESC,bran.BRAND_DESC, " +
					 	  "st.STRENGTH_DESC,gen.GEN_NAME_DESC,mat.GROSS_WEIGHT,mat.NET_WEIGHT,mat.DIMENSION," +
					 	  "mat.Material_Pricing,mat.SHELF_LIFE,mat.SHELF_LIFE_TYPE,mat.STANDARD_BATCH_SIZE,mat.BATCH_CODE ," +
					 	  "SAP_CODE_NO,SAP_CODE_EXISTS,SAP_CREATION_DATE,SAP_CREATED_BY from material_code_request as mat,Location as loc,MATERIAL_GROUP as matGroup ," +
					 	  "UNIT_MESUREMENT AS uom,Country as cou,PACK_TYPE as pac,SALES_UOM as sal,DIVISION as div,THERAPEUTIC_SEGMENT as the,BRAND as bran," +
					 	  "STRENGTH as st,GENERIC_NAME as gen " +
					 	  "where REQUEST_NO='"+reqId+"' and loc.LOCID=mat.LOCATION_ID  and " +
					 	  "cou.LAND1=mat.COUNTRY_ID and pac.P_TYPE_CODE=mat.PACK_TYPE_ID and sal.S_UOM_CODE=mat.SALES_UNIT_OF_MEAS_ID and " +
					 	  "uom.UNIT_OF_MEAS_ID=mat.UNIT_OF_MEAS_ID and matGroup.MATERIAL_GROUP_ID=mat.MATERIAL_GROUP_ID and div.DIV_CODE=mat.DIVISION_ID " +
					 	  "and the.THER_SEG_CODE=mat.THERAPEUTIC_SEGMENT_ID and bran.BRAND_CODE=mat.BRAND_ID and st.STRENGTH_CODE=mat.STRENGTH_ID" +
					 	  " and gen.GEN_NAME_CODE=mat.GENERIC_NAME    ";
						ResultSet rs=ad.selectQuery(getFinishedProduct);
						if(rs.next())
						{
							statusForm.setRequestNo(reqId);
							statusForm.setRequestNumber(reqId);
							statusForm.setReqMaterialGroup(rs.getString("MATERIAL_GROUP_ID"));
							matType=rs.getString("Type");
							matGroup=rs.getString("MATERIAL_GROUP_ID");
							location=rs.getString("LOCATION_CODE");
						    reqDate=rs.getString("REQUEST_DATE");
							String a[]=reqDate.split(" ");
							reqDate=a[0];
							String b[]=reqDate.split("-");
							reqDate=b[2]+"/"+b[1]+"/"+b[0];
							statusForm.setRequestDate(reqDate);
							statusForm.setLocationId(rs.getString("LOCATION_CODE")+"-"+rs.getString("LOCNAME"));
							statusForm.setStorage(rs
									.getString("STORAGE"));
							statusForm.setHsnCode(rs.getString("HSN_Code"));
							String manufacturedAt=rs.getString("MANUFACTURED_AT");
							
							if(manufacturedAt.equalsIgnoreCase("Third Party"))
							{
								request.setAttribute("standardBathcNotMandatory", "standardBathcNotMandatory");
								request.setAttribute("manufactureMandatory", "manufactureMandatory");
							}
							else{
								request.setAttribute("standardBathcMandatory", "standardBathcMandatory");
								request.setAttribute("manufactureNotMandatory", "manufactureNotMandatory");
							}
							
							statusForm.setManufacturedAt(manufacturedAt);
						
							statusForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME"));
							statusForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME"));
							statusForm.setMaterialGroupId(rs.getString("STXT"));
							
							statusForm.setCountryId(rs.getString("LANDX"));
							statusForm.setCustomerName(rs.getString("CUSTOMER_NAME"));
							statusForm.setShelfLife(rs.getString("SHELF_LIFE"));
							statusForm.setShelfType(rs.getString("SHELF_LIFE_TYPE"));
							statusForm.setStandardBatchSize(rs.getString("STANDARD_BATCH_SIZE"));
							statusForm.setBatchCode(rs.getString("BATCH_CODE"));
							String salorsam=rs.getString("SALEABLE_OR_SAMPLE");
							if(salorsam.equalsIgnoreCase("1")){
								statusForm.setSaleableOrSample("Saleable");
								}
								if(salorsam.equalsIgnoreCase("2")){
									statusForm.setSaleableOrSample("Sample");
									}
								
								if(salorsam.equalsIgnoreCase("3")){
									statusForm.setSaleableOrSample("Converted Sample");
									}
							String domorexp=rs.getString("DOMESTIC_OR_EXPORTS");
							if(domorexp.equalsIgnoreCase("D")){
							statusForm.setDomesticOrExports("DOMESTIC");
							}
							if(domorexp.equalsIgnoreCase("E")){
								statusForm.setDomesticOrExports("EXPORTS");
								}
							if(domorexp.equalsIgnoreCase("V")){
								statusForm.setDomesticOrExports("Validation");
								}
							String salesPackId=rs.getString("SALES_PACK_ID");
							statusForm.setSalesPackId(rs.getString("SALES_PACK_ID"));
							statusForm.setPackTypeId(rs.getString("P_TYPE_DESC"));
							statusForm.setSalesUnitOfMeaseurement(rs.getString("S_UOM_DESC"));
							statusForm.setDivisionId(rs.getString("DIV_DESC"));
							statusForm.setTherapeuticSegmentID(rs.getString("THER_SEG_DESC"));
							statusForm.setBrandID(rs.getString("BRAND_DESC"));
							statusForm.setSrengthId(rs.getString("STRENGTH_DESC"));
							statusForm.setGenericName(rs.getString("GEN_NAME_DESC"));
							
						
							String matpri=rs.getString("Material_Pricing");
							if(matpri.equalsIgnoreCase("1")){
								statusForm.setMaterialPricing("Normal");
								}
							if(matpri.equalsIgnoreCase("2")){
								statusForm.setMaterialPricing("Spare parts");
								}
							if(matpri.equalsIgnoreCase("11")){
								statusForm.setMaterialPricing("Scheduled(Controled)");
								}
							if(matpri.equalsIgnoreCase("12")){
								statusForm.setMaterialPricing("Un-Scheduled(De-Con)");
								}
							if(matpri.equalsIgnoreCase("13")){
								statusForm.setMaterialPricing("PS / Promo (Micro)");
								}
							if(matpri.equalsIgnoreCase("14")){
								statusForm.setMaterialPricing("No MRP ED Extra(Mic)");
								}
							if(matpri.equalsIgnoreCase("15")){
								statusForm.setMaterialPricing("No MRP ED Incl (Mic)");
								}
							if(matpri.equalsIgnoreCase("16")){
								statusForm.setMaterialPricing("Scrap IT Extra (Mic)");
								}
							if(matpri.equalsIgnoreCase("17")){
								statusForm.setMaterialPricing("MRP(Con)-ED Exe(Mic)");
								}
							if(matpri.equalsIgnoreCase("18")){
								statusForm.setMaterialPricing("MRP(DeC)-ED Exe(Mic)");
								}
							if(matpri.equalsIgnoreCase("19")){
								statusForm.setMaterialPricing("No MRP-ED Exe(Mic)");
								}
							if(matpri.equalsIgnoreCase("20")){
								statusForm.setMaterialPricing("Food Prod(MRP)-Micro)");
								}
							if(matpri.equalsIgnoreCase("21")){
								statusForm.setMaterialPricing("Vet Prod (MRP)-Micr");
								}
							if(matpri.equalsIgnoreCase("22")){
								statusForm.setMaterialPricing("Generic Price Grp-Mi");
								}
							if(matpri.equalsIgnoreCase("23")){
								statusForm.setMaterialPricing("MRP(Vet)-ED Exe(Mic)");
								}
							if(matpri.equalsIgnoreCase("24")){
								statusForm.setMaterialPricing("P-to-P ED Extra(Mic)");
								}
							if(matpri.equalsIgnoreCase("25")){
								statusForm.setMaterialPricing("Cosm Prod(MRP)-Micro");
								}
							if(matpri.equalsIgnoreCase("26")){
								statusForm.setMaterialPricing("Scrap - ED Exe(Mic))");
								}
							if(matpri.equalsIgnoreCase("27")){
								statusForm.setMaterialPricing("Import Items PG");
								}
						
							statusForm.setGrossWeight(rs.getString("GROSS_WEIGHT"));
							statusForm.setNetWeight(rs.getString("NET_WEIGHT"));
						
							statusForm.setDimension(rs.getString("DIMENSION"));
							statusForm.setUnitOfMeasId(rs.getString("LTXT"));
						
							String sapCodeno=rs.getString("SAP_CODE_NO");
							if(sapCodeno!=null)
							{
								statusForm.setSapCodeNo(rs.getString("SAP_CODE_NO"));
								String sapCodeExist=rs.getString("SAP_CODE_EXISTS");
								if(sapCodeExist.equalsIgnoreCase("1"))
								{
									statusForm.setSapCodeExists("Yes");
								}
								if(sapCodeExist.equalsIgnoreCase("0"))
									statusForm.setSapCodeExists("No");
								String createDate=rs.getString("SAP_CREATION_DATE");
								String a1[]=createDate.split(" ");
								createDate=a1[0];
								String b1[]=createDate.split("-");
								createDate=b1[2]+"/"+b1[1]+"/"+b1[0];
								statusForm.setSapCreationDate(createDate);
								statusForm.setSapCreatedBy(rs.getString("SAP_CREATED_BY"));
							}
							}
						statusForm.setStorageLocationId("");
						statusForm.setWeightUOM("");
						statusForm.setValuationClass("");
						//storage location	
						String getStorageLoc="select s.STORAGE_LOCATION_ID,s.STORAGE_LOCATION_NAME from material_code_request m,STORAGE_LOCATION s where "
								+ "REQUEST_NO='"+reqId+"' and m.STORAGE_LOCATION_ID=s.STORAGE_LOCATION_ID";
						ResultSet rsStLoc=ad.selectQuery(getStorageLoc);
						if(rsStLoc.next()){
							statusForm.setStorageLocationId(rsStLoc.getString("STORAGE_LOCATION_ID")+"-"+rsStLoc.getString("STORAGE_LOCATION_NAME"));
						}
						//weight wom
						String getweight="select w.W_UOM_CODE,w.W_UOM_DESC from material_code_request m,WEIGHT_UOM w where REQUEST_NO='"+reqId+"' "
								+ "and m.WEIGHT_UOM=w.W_UOM_CODE";
						ResultSet rsWt=ad.selectQuery(getweight);
						if(rsWt.next()){
							statusForm.setWeightUOM(rsWt.getString("W_UOM_CODE")+"-"+rsWt.getString("W_UOM_DESC"));
						}
						String getValuation="select v.VALUATION_DESC from material_code_request m,VALUATION_CLASS v where REQUEST_NO='"+reqId+"' "
								+ "and m.VALUATION_CLASS=v.VALUATION_ID";
						ResultSet rsValu=ad.selectQuery(getValuation);
						if(rsValu.next()){
							statusForm.setValuationClass(rsValu.getString("VALUATION_DESC"));
						}	
					String getFinishedProduct1="select pur.PURCHASE_GROUP_DESC from material_code_request as mat,PURCHASE_GROUP as pur" +
					" where REQUEST_NO='"+reqId+"' and pur.PURCHASE_GROUP_ID=mat.PURCHASE_GROUP_ID";
					ResultSet rs1=ad.selectQuery(getFinishedProduct1);
					if(rs1.next())
					{
						statusForm.setPuchaseGroupId(rs1.getString("PURCHASE_GROUP_DESC"));
					}
					
					//tax type
					String editRecord11="select tax.T_CLASS_NAME from material_code_request as m,TAX_CLASS as tax" +
							" where REQUEST_NO='"+reqId+"'and  tax.T_CLASS_ID=m.Tax_Classification";
		 		
		 		
		 		ResultSet rsEditRecord11=ad.selectQuery(editRecord11);
				if(rsEditRecord11.next())
				{
					statusForm.setTaxClassification(rsEditRecord11.getString("T_CLASS_NAME"));
					
				}
						
				
					}else{
						
						LinkedList packTypeID=new LinkedList();
						LinkedList packTypeName=new LinkedList();
						
						String getPackType="select * from PACK_TYPE";
						ResultSet rsPackType=ad.selectQuery(getPackType);
						while(rsPackType.next())
						{
							packTypeID.add(rsPackType.getString("P_TYPE_CODE"));
							packTypeName.add(rsPackType.getString("P_TYPE_CODE")+" - "+rsPackType.getString("P_TYPE_DESC"));
						}
						statusForm.setPackTypeID(packTypeID);
						statusForm.setPackTypeName(packTypeName);
					
						LinkedList packSizeID=new LinkedList();
						LinkedList packSizeName=new LinkedList();
						String getPackSize="select * from PACK_SIZE";
						ResultSet rsPackSize=ad.selectQuery(getPackSize);
						while(rsPackSize.next())
						{
							packSizeID.add(rsPackSize.getString("PACK_SIZE_CODE"));
							packSizeName.add(rsPackSize.getString("PACK_SIZE_CODE") );
						}
						statusForm.setPackSizeID(packSizeID);
						statusForm.setPackSizeName(packSizeName);
						
						LinkedList valuationClassID=new LinkedList();
						LinkedList valuationClassName=new LinkedList();
						String getValuation="select * from VALUATION_CLASS where MAT_TYPE='"+matType+"'";
						ResultSet rsValuation=ad.selectQuery(getValuation);
						while(rsValuation.next())
						{
							valuationClassID.add(rsValuation.getString("VALUATION_ID"));
							valuationClassName.add(rsValuation.getString("VALUATION_ID")+" - "+rsValuation.getString("VALUATION_DESC"));
						}
						statusForm.setValuationClassID(valuationClassID);
						statusForm.setValuationClassName(valuationClassName);
						
						LinkedList salesUOMID=new LinkedList();
						LinkedList salesUOMName=new LinkedList();
						String getSalesUOM="select * from SALES_UOM order by S_UOM_DESC";
						ResultSet rsSalesUOM=ad.selectQuery(getSalesUOM);
						while(rsSalesUOM.next())
						{
							salesUOMID.add(rsSalesUOM.getString("S_UOM_CODE"));
							packSizeName.add(rsSalesUOM.getString("S_UOM_CODE")+" - "+rsSalesUOM.getString("S_UOM_DESC"));
						}
						statusForm.setSalesUOMID(salesUOMID);
						statusForm.setSalesUOMName(salesUOMName);

						LinkedList divisonID=new LinkedList();
						LinkedList divisonName=new LinkedList();
						String getDivison="select * from DIVISION";
						ResultSet rsDivison=ad.selectQuery(getDivison);
						while(rsDivison.next())
						{
							divisonID.add(rsDivison.getString("DIV_CODE"));
							divisonName.add(rsDivison.getString("DIV_DESC"));
						}
						statusForm.setDivisonID(divisonID);
						statusForm.setDivisonName(divisonName);
						
						LinkedList therapeuticID=new LinkedList();
						LinkedList therapeuticName=new LinkedList();
						String getrstherapeutic="select * from THERAPEUTIC_SEGMENT";
						ResultSet rstherapeutic=ad.selectQuery(getrstherapeutic);
						while(rstherapeutic.next())
						{
							therapeuticID.add(rstherapeutic.getString("THER_SEG_CODE"));
							therapeuticName.add(rstherapeutic.getString("THER_SEG_DESC"));
						}
						statusForm.setTherapeuticID(therapeuticID);
						statusForm.setTherapeuticName(therapeuticName);
						
						LinkedList brandIDList=new LinkedList();
						LinkedList brandNameList=new LinkedList();
						String getBrand="select * from BRAND order by BRAND_DESC";
						ResultSet rsBrand=ad.selectQuery(getBrand);
						while(rsBrand.next())
						{
							brandIDList.add(rsBrand.getString("BRAND_CODE"));
							brandNameList.add(rsBrand.getString("BRAND_DESC"));
						}
						statusForm.setBrandIDList(brandIDList);
						statusForm.setBrandNameList(brandNameList);
						
						LinkedList strengthIDList=new LinkedList();
						LinkedList strengthNameList=new LinkedList();
						String getStrength="select * from STRENGTH";
						ResultSet rsStrength=ad.selectQuery(getStrength);
						while(rsStrength.next())
						{
							strengthIDList.add(rsStrength.getString("STRENGTH_CODE"));
							strengthNameList.add(rsStrength.getString("STRENGTH_DESC"));
						}
						statusForm.setStrengthIDList(strengthIDList);
						statusForm.setStrengthNameList(strengthNameList);
						
						LinkedList genericIDList=new LinkedList();
						LinkedList genericNameList=new LinkedList();
						String getGeneric="select * from GENERIC_NAME";
						ResultSet rsGeneric=ad.selectQuery(getGeneric);
						while(rsGeneric.next())
						{
							genericIDList.add(rsGeneric.getString("GEN_NAME_CODE"));
							genericNameList.add(rsGeneric.getString("GEN_NAME_DESC"));
						}
						statusForm.setGenericIDList(genericIDList);
						statusForm.setGenericNameList(genericNameList);
						
						LinkedList weightUOMID=new LinkedList();
						LinkedList weightUOMName=new LinkedList();
						String getweightUOM="select * from WEIGHT_UOM";
						ResultSet rsweightUOM=ad.selectQuery(getweightUOM);
						while(rsweightUOM.next())
						{
							weightUOMID.add(rsweightUOM.getString("W_UOM_CODE"));
							weightUOMName.add(rsweightUOM.getString("W_UOM_CODE")+" - "+rsweightUOM.getString("W_UOM_DESC"));
						}
						statusForm.setWeightUOMID(weightUOMID);
						statusForm.setWeightUOMName(weightUOMName);
						
						LinkedList puchaseGroupIdList=new LinkedList();
						LinkedList puchaseGroupIdValues=new LinkedList();
						
						String getPurchaseGroup="select * from PURCHASE_GROUP";
						ResultSet rsPurchaseGroup=ad.selectQuery(getPurchaseGroup);
						while(rsPurchaseGroup.next())
						{
							puchaseGroupIdList.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID"));
							puchaseGroupIdValues.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID")+" - "+rsPurchaseGroup.getString("PURCHASE_GROUP_DESC"));
						}
						statusForm.setPuchaseGroupIdList(puchaseGroupIdList);
						statusForm.setPuchaseGroupIdValues(puchaseGroupIdValues);
						
						
						
						LinkedList materTypeIDList=new LinkedList();
						LinkedList materialTypeIdValueList=new LinkedList();
						String materialTypeId=request.getParameter("materialType");

						String getMaterials="select * from MATERIAL_TYPE";
						ResultSet rsMaterial=ad.selectQuery(getMaterials);
						while(rsMaterial.next())
						{
							
							materTypeIDList.add(rsMaterial.getString("id"));
							materialTypeIdValueList.add(rsMaterial.getString("MATERIAL_GROUP_ID")+" - "+rsMaterial.getString("M_DESC"));
						}
						statusForm.setMaterTypeIDList(materTypeIDList);
						statusForm.setMaterialTypeIdValueList(materialTypeIdValueList);
						
						LinkedList storageID=new LinkedList();
						LinkedList storageName=new LinkedList();
						String getStorageDetails="select * from STORAGE_LOCATION where  MAT_TYPE='"+matType+"'";
						ResultSet rsStrogeLocation=ad.selectQuery(getStorageDetails);
						while(rsStrogeLocation.next()){
							storageID.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID"));
							storageName.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID")+" - "+rsStrogeLocation.getString("STORAGE_LOCATION_NAME"));
						}
						statusForm.setStorageID(storageID);
						statusForm.setStorageIDName(storageName);
						String getCountryDetails="select * from Country";
						LinkedList countryID=new LinkedList();
						LinkedList countryName=new LinkedList();
						ResultSet rsCountryDetails=ad.selectQuery(getCountryDetails);
						while(rsCountryDetails.next()){
							countryID.add(rsCountryDetails.getString("LAND1"));
							countryName.add(rsCountryDetails.getString("LAND1")+" - "+rsCountryDetails.getString("LANDX"));
						}
						statusForm.setCounID(countryID);
						statusForm.setCountryName(countryName);
						
						ResultSet rs11 = ad.selectQuery("select * from location");
						ArrayList locationList=new ArrayList();
						ArrayList locationLabelList=new ArrayList();
						
						while(rs11.next()) {
							locationList.add(rs11.getString("LOCID"));
							locationLabelList.add(rs11.getString("LOCATION_CODE")+" - "+rs11.getString("LOCNAME"));
						}
						statusForm.setLocationIdList(locationList);
						statusForm.setLocationLabelList(locationLabelList);
						
						LinkedList materGroupIDList=new LinkedList();
						LinkedList materialGroupIdValueList=new LinkedList();
						
						String getMaterialGroup="select * from MATERIAL_GROUP where MATERIAL_TYPE like '%"+matType+"%' order by STXT";
						ResultSet rsMaterialGroup=ad.selectQuery(getMaterialGroup);
						while(rsMaterialGroup.next())
						{
							materGroupIDList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID"));
							materialGroupIdValueList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID")+" - "+rsMaterialGroup.getString("STXT"));
						}
						statusForm.setMaterGroupIDList(materGroupIDList);
						statusForm.setMaterialGroupIdValueList(materialGroupIdValueList);
						
						
						
						LinkedList unitOfMeasIdList=new LinkedList();
						LinkedList unitOfMeasIdValues=new LinkedList();
						
						String getunitMesurement="select * from UNIT_MESUREMENT";
						ResultSet rsUnit=ad.selectQuery(getunitMesurement);
						while(rsUnit.next())
						{
							unitOfMeasIdList.add(rsUnit.getString("UNIT_OF_MEAS_ID"));
							unitOfMeasIdValues.add(rsUnit.getString("UNIT_OF_MEAS_ID")+" - "+rsUnit.getString("LTXT"));
						}
						statusForm.setUnitOfMeasIdList(unitOfMeasIdList);
						statusForm.setUnitOfMeasIdValues(unitOfMeasIdValues);
						
			// get material records
				
				String getFinishedProduct="select * from material_code_request where REQUEST_NO='"+reqId+"'";
				ResultSet rs=ad.selectQuery(getFinishedProduct);
				while(rs.next())
				{
					statusForm.setRequestNo(reqId);
					 reqDate=rs.getString("REQUEST_DATE");
					String a[]=reqDate.split(" ");
					reqDate=a[0];
					String b[]=reqDate.split("-");
					reqDate=b[2]+"/"+b[1]+"/"+b[0];
					statusForm.setRequestDate(reqDate);
					statusForm.setLocationId(rs.getString("LOCATION_ID"));
					statusForm.setMaterialTypeId(rs.getString("MATERIAL_TYPE_ID"));
					statusForm.setStorage(rs
							.getString("STORAGE"));
					String manufacturedAt=rs.getString("MANUFACTURED_AT");
					
					if(manufacturedAt.equalsIgnoreCase("Third Party"))
					{
						request.setAttribute("standardBathcNotMandatory", "standardBathcNotMandatory");
						request.setAttribute("manufactureMandatory", "manufactureMandatory");
					}
					else{
						request.setAttribute("standardBathcMandatory", "standardBathcMandatory");
						request.setAttribute("manufactureNotMandatory", "manufactureNotMandatory");
					}
					statusForm.setHsnCode(rs.getString("HSN_Code"));
					statusForm.setManufacturedAt(manufacturedAt);
					statusForm.setStorageLocationId(rs.getString("STORAGE_LOCATION_ID"));
					statusForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME"));
					statusForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME"));
					statusForm.setMaterialGroupId(rs.getString("MATERIAL_GROUP_ID"));
					statusForm.setValuationClass(rs.getString("VALUATION_CLASS"));
					statusForm.setCountryId(rs.getString("COUNTRY_ID"));
					statusForm.setCustomerName(rs.getString("CUSTOMER_NAME"));
					statusForm.setShelfLife(rs.getString("SHELF_LIFE"));
					statusForm.setShelfType(rs.getString("SHELF_LIFE_TYPE"));
					statusForm.setStandardBatchSize(rs.getString("STANDARD_BATCH_SIZE"));
					statusForm.setBatchCode(rs.getString("BATCH_CODE"));
					statusForm.setSaleableOrSample(rs.getString("SALEABLE_OR_SAMPLE"));
					statusForm.setDomesticOrExports(rs.getString("DOMESTIC_OR_EXPORTS"));
					String salesPackId=rs.getString("SALES_PACK_ID");
					statusForm.setSalesPackId(rs.getString("SALES_PACK_ID"));
					statusForm.setPackTypeId(rs.getString("PACK_TYPE_ID"));
					statusForm.setSalesUnitOfMeaseurement(rs.getString("SALES_UNIT_OF_MEAS_ID"));
					statusForm.setDivisionId(rs.getString("DIVISION_ID"));
					statusForm.setTherapeuticSegmentID(rs.getString("THERAPEUTIC_SEGMENT_ID"));
					statusForm.setBrandID(rs.getString("BRAND_ID"));
					statusForm.setSrengthId(rs.getString("STRENGTH_ID"));
					statusForm.setGenericName(rs.getString("GENERIC_NAME"));
					statusForm.setProdInspMemo(rs.getString("PROD_INSP_MEMO"));
					statusForm.setTaxClassification(rs.getString("Tax_Classification"));
					statusForm.setMaterialPricing(rs.getString("Material_Pricing"));
					statusForm.setGrossWeight(rs.getString("GROSS_WEIGHT"));
					statusForm.setNetWeight(rs.getString("NET_WEIGHT"));
					statusForm.setWeightUOM(rs.getString("WEIGHT_UOM"));
					statusForm.setDimension(rs.getString("DIMENSION"));
					statusForm.setUnitOfMeasId(rs.getString("UNIT_OF_MEAS_ID"));
					statusForm.setPuchaseGroupId(rs.getString("PURCHASE_GROUP_ID"));
				
					String sapCodeno=rs.getString("SAP_CODE_NO");
					if(sapCodeno!=null)
					{
						statusForm.setSapCodeNo(rs.getString("SAP_CODE_NO"));
						String sapCodeExist=rs.getString("SAP_CODE_EXISTS");
						if(sapCodeExist.equalsIgnoreCase("1"))
						{
							statusForm.setSapCodeExists("On");
						}
						if(sapCodeExist.equalsIgnoreCase("0"))
							statusForm.setSapCodeExistsNo("On");

						String createDate=rs.getString("SAP_CREATION_DATE");
						String a1[]=createDate.split(" ");
						createDate=a1[0];
						String b1[]=createDate.split("-");
						createDate=b1[2]+"/"+b1[1]+"/"+b1[0];
						statusForm.setSapCreationDate(createDate);
						statusForm.setSapCreatedBy(rs.getString("SAP_CREATED_BY"));
					}
					
					
					
				}
					}
				}
				
				if(matType.equalsIgnoreCase("RM"))
				{
					
					if(userRole.equalsIgnoreCase("User"))
					{
						
						
						String getMaterial="select  mat.HSN_Code,mat.REQUEST_NO,mat.Storage,mat.REQUEST_DATE,loc.LOCNAME,loc.LOCATION_CODE,mat.MATERIAL_GROUP_ID,stLoc.STORAGE_LOCATION_NAME,stLoc.MAT_TYPE," +
						" mat.MATERIAL_SHORT_NAME,mat.MATERIAL_LONG_NAME,matGroup.STXT,uom.LTXT,pur.PURCHASE_GROUP_DESC, mat.PHARMACOP_NAME," +
						"mat.PHARMACOP_GRADE,mat.GENERIC_NAME,mat.SYNONYM,mat.PHARMACOP_SPECIFICATION,mat.DUTY_ELEMENT, mat.IS_DMF_MATERIAL," +
						"dmf.DMF_GRADE_DESC,mat.MATERIAL_GRADE,mat.COS_GRADE_AND_NO,mat.ADDITIONAL_TEST, mat.IS_VENDOR_SPECIFIC_MATERIAL," +
						"mat.MFGR_NAME,mat.SITE_OF_MANUFACTURE,cou.LANDX,mat.CUSTOMER_NAME, mat.TO_BE_USED_IN_PRODUCTS,mat.SHELF_LIFE,mat.SHELF_LIFE_TYPE," +
						"mat.RETEST_DAYS ,mat.RETEST_DAYS_TYPE,val.VALUATION_DESC,mat.APPROXIMATE_VALUE,mat.Attachements,SAP_CODE_NO,SAP_CODE_EXISTS, " +
						"SAP_CREATION_DATE,SAP_CREATED_BY,rejected_flag from material_code_request as mat,Location as loc,STORAGE_LOCATION as stLoc,MATERIAL_GROUP " +
						"as matGroup ,UNIT_MESUREMENT AS uom,PURCHASE_GROUP as pur,DMF_GRADE as dmf,Country as cou, VALUATION_CLASS as val " +
						" where REQUEST_NO='"+reqId+"' and loc.LOCID=mat.LOCATION_ID and stLoc.STORAGE_LOCATION_ID=mat.STORAGE_LOCATION_ID and " +
						"matGroup.MATERIAL_GROUP_ID=mat.MATERIAL_GROUP_ID and uom.UNIT_OF_MEAS_ID=mat.UNIT_OF_MEAS_ID and pur.PURCHASE_GROUP_ID=mat.PURCHASE_GROUP_ID " +
						"and dmf.DMF_GRADE_ID=mat.DMF_GRADE_ID and cou.LAND1=mat.COUNTRY_ID and val.VALUATION_ID=mat.VALUATION_CLASS";	
						ResultSet rs=ad.selectQuery(getMaterial);
						while(rs.next())
						{
							statusForm.setRequestNo(reqId);
							statusForm.setRequestNumber(reqId);
							statusForm.setReqMaterialGroup(rs.getString("MATERIAL_GROUP_ID"));
						 reqDate=rs.getString("REQUEST_DATE");
						String a[]=reqDate.split(" ");
						reqDate=a[0];
						String b[]=reqDate.split("-");
						reqDate=b[2]+"/"+b[1]+"/"+b[0];
						statusForm.setRequestDate(reqDate);
						statusForm.setHsnCode(rs.getString("HSN_Code"));
						statusForm.setLocationId(rs.getString("LOCATION_CODE")+"-"+rs.getString("LOCNAME"));
						statusForm.setStorageLocationId(rs.getString("MAT_TYPE")+"-"+rs.getString("STORAGE_LOCATION_NAME"));
						statusForm.setStorage(rs
								.getString("STORAGE"));
						statusForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME")); 
						statusForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME"));
						statusForm.setMaterialGroupId(rs.getString("STXT"));
						statusForm.setPharmacopName(rs.getString("PHARMACOP_NAME"));
					    String pharmacopGrade=rs.getString("PHARMACOP_GRADE");
					    statusForm.setPharmacopGrade(pharmacopGrade);
						
						statusForm.setGenericName(rs.getString("GENERIC_NAME"));
						statusForm.setSynonym(rs.getString("SYNONYM"));
						statusForm.setPharmacopSpecification(rs.getString("PHARMACOP_SPECIFICATION"));
						String isDMfMaterial=rs.getString("IS_DMF_MATERIAL");
						if(isDMfMaterial.equalsIgnoreCase("1"))
						{
							statusForm.setIsDMFMaterial("YES");
						
							statusForm.setDmfGradeId(rs.getString("DMF_GRADE_DESC"));
							statusForm.setMaterialGrade(rs.getString("MATERIAL_GRADE"));
							statusForm.setCosGradeNo(rs.getString("COS_GRADE_AND_NO"));
							
						}
						statusForm.setAdditionalTest(rs.getString("ADDITIONAL_TEST"));
						if(isDMfMaterial.equalsIgnoreCase("0"))
						{
							statusForm.setIsDMFMaterial("NO");
							statusForm.setDmfGradeId(rs.getString("DMF_GRADE_DESC"));
							statusForm.setMaterialGrade(rs.getString("MATERIAL_GRADE"));
							statusForm.setCosGradeNo(rs.getString("COS_GRADE_AND_NO"));
							
							
						}
						
						statusForm.setCountryId(rs.getString("LANDX"));
						statusForm.setCustomerName(rs.getString("CUSTOMER_NAME"));
						statusForm.setToBeUsedInProducts(rs.getString("TO_BE_USED_IN_PRODUCTS"));
						
						String isVendorStatus=rs.getString("IS_VENDOR_SPECIFIC_MATERIAL");
						if(isVendorStatus.equalsIgnoreCase("1"))
						{
							statusForm.setIsVendorSpecificMaterial("YES");
							statusForm.setMfgrName(rs.getString("MFGR_NAME"));
							statusForm.setSiteOfManufacture(rs.getString("SITE_OF_MANUFACTURE"));
						}
						if(isVendorStatus.equalsIgnoreCase("0"))
						{
							statusForm.setIsVendorSpecificMaterial("NO");
						}
						
						
						statusForm.setShelfLife(rs.getString("SHELF_LIFE"));
						String dutyElement=rs.getString("DUTY_ELEMENT");
						if(dutyElement.equalsIgnoreCase("0"))
						{
							statusForm.setDutyElement("0-Duty Exempted Raw Materials for Finished product");
						}
						if(dutyElement.equalsIgnoreCase("2")){
							statusForm.setDutyElement("2-Indigenous Material with or without Cenvat");
						}
						if(dutyElement.equalsIgnoreCase("3")){
							statusForm.setDutyElement("N/A");
						}
						statusForm.setShelfLifeType(rs.getString("SHELF_LIFE_TYPE"));
						statusForm.setRetestDays(rs.getString("RETEST_DAYS"));
						statusForm.setRetestType(rs.getString("RETEST_DAYS_TYPE"));
						statusForm.setValuationClass(rs.getString("VALUATION_DESC"));
						statusForm.setApproximateValue(rs.getString("APPROXIMATE_VALUE"));
						statusForm.setUnitOfMeasId(rs.getString("LTXT"));
						statusForm.setPuchaseGroupId(rs.getString("PURCHASE_GROUP_DESC"));
					
					
						
						ArrayList fileList = new ArrayList();
						String uploadedFiles=rs.getString("Attachements");
						if(uploadedFiles.equalsIgnoreCase(""))
						{
							
						}else{
						String v[] = uploadedFiles.split(",");
						int l = v.length;
						for (int i = 0; i < l; i++) 
						{
							RawMaterialForm materialForm2=new RawMaterialForm();
							//String url=v[i];
							//materialForm2.setUrl(url);
						System.out.println(v[i]);
							materialForm2.setUploadFilePath(v[i]);
						int x=v[i].lastIndexOf("/");
						uploadedFiles=v[i].substring(x+1);		
						materialForm2.setFileList(uploadedFiles);
						
						fileList.add(materialForm2);
						}
						request.setAttribute("listName", fileList);
						
						String sapCodeno=rs.getString("SAP_CODE_NO");
						if(sapCodeno!=null)
						{
							statusForm.setSapCodeNo(rs.getString("SAP_CODE_NO"));
							String sapCodeExist=rs.getString("SAP_CODE_EXISTS");
							if(sapCodeExist.equalsIgnoreCase("1"))
							{
								statusForm.setSapCodeExists("Yes");
							}
							if(sapCodeExist.equalsIgnoreCase("0"))
								statusForm.setSapCodeExists("No");
							String createDate=rs.getString("SAP_CREATION_DATE");
							String a1[]=createDate.split(" ");
							createDate=a1[0];
							String b1[]=createDate.split("-");
							createDate=b1[2]+"/"+b1[1]+"/"+b1[0];
							statusForm.setSapCreationDate(createDate);
							statusForm.setSapCreatedBy(rs.getString("SAP_CREATED_BY"));
						}
						
						
					}
						String rejected_flag=rs.getString("rejected_flag");
						if(rejected_flag!=null)
						{
							if(rejected_flag.equalsIgnoreCase("y"))
								request.setAttribute("rejectedFLag", "rejectedFLag");
						}
					
					}
						String getMaterial1="select tem.TEMP_CON_DESC from material_code_request as mat,TEMP_CONDITION as tem " +
						" where REQUEST_NO='"+reqId+"' and tem.TEMP_CON_ID=mat.TEMP_CONDITION ";
				
				ResultSet rs1=ad.selectQuery(getMaterial1);
				while(rs1.next())
				{
					statusForm.setTempCondition(rs1.getString("TEMP_CON_DESC"));
				}
				
				//STORAGE_CONDITION
				
				String getMaterial2="select stcon.LTXT from material_code_request as mat,STORAGE_CONDITION as stcon" +
						" where REQUEST_NO='"+reqId+"'  and stcon.STO_COND_CODE=mat.STORAGE_CONDITION";	
				
				ResultSet rs2=ad.selectQuery(getMaterial2);
				while(rs2.next())
				{
					statusForm.setStorageCondition(rs2.getString("LTXT"));
				}
						
				}
					
					String getCountryDetails="select * from Country";
					LinkedList countryID=new LinkedList();
					LinkedList countryName=new LinkedList();
					ResultSet rsCountryDetails=ad.selectQuery(getCountryDetails);
					while(rsCountryDetails.next()){
						countryID.add(rsCountryDetails.getString("LAND1"));
						countryName.add(rsCountryDetails.getString("LAND1")+" - "+rsCountryDetails.getString("LANDX"));
					}
					statusForm.setCounID(countryID);
					statusForm.setCountryName(countryName);
					
					ResultSet rs11 = ad.selectQuery("select * from location");
					ArrayList locationList=new ArrayList();
					ArrayList locationLabelList=new ArrayList();
					
					while(rs11.next()) {
						locationList.add(rs11.getString("LOCID"));
						locationLabelList.add(rs11.getString("LOCATION_CODE")+" - "+rs11.getString("LOCNAME"));
					}
					statusForm.setLocationIdList(locationList);
					statusForm.setLocationLabelList(locationLabelList);
					
					
					LinkedList storageID=new LinkedList();
					LinkedList storageName=new LinkedList();
					String getStorageDetails="select * from STORAGE_LOCATION where MAT_TYPE='RM'";
					ResultSet rsStrogeLocation=ad.selectQuery(getStorageDetails);
					while(rsStrogeLocation.next()){
						storageID.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID"));
						storageName.add(rsStrogeLocation.getString("STORAGE_LOCATION_ID")+" - "+rsStrogeLocation.getString("STORAGE_LOCATION_NAME"));
					}
					statusForm.setStorageID(storageID);
					statusForm.setStorageIDName(storageName);
					
					LinkedList materTypeIDList=new LinkedList();
					LinkedList materialTypeIdValueList=new LinkedList();
					String getMaterials="select * from MATERIAL_TYPE";
					ResultSet rsMaterial=ad.selectQuery(getMaterials);
					while(rsMaterial.next())
					{
						materTypeIDList.add(rsMaterial.getString("id"));
						materialTypeIdValueList.add(rsMaterial.getString("MATERIAL_GROUP_ID")+" - "+rsMaterial.getString("M_DESC"));
					}
					statusForm.setMaterTypeIDList(materTypeIDList);
					statusForm.setMaterialTypeIdValueList(materialTypeIdValueList);
					
					LinkedList materGroupIDList=new LinkedList();
					LinkedList materialGroupIdValueList=new LinkedList();
					
					String getMaterialGroup="select * from MATERIAL_GROUP where MATERIAL_TYPE like '%"+matType+"%' order by STXT";
					ResultSet rsMaterialGroup=ad.selectQuery(getMaterialGroup);
					while(rsMaterialGroup.next())
					{
						materGroupIDList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID"));
						materialGroupIdValueList.add(rsMaterialGroup.getString("MATERIAL_GROUP_ID")+" - "+rsMaterialGroup.getString("STXT"));
					}
					statusForm.setMaterGroupIDList(materGroupIDList);
					statusForm.setMaterialGroupIdValueList(materialGroupIdValueList);
					
					LinkedList unitOfMeasIdList=new LinkedList();
					LinkedList unitOfMeasIdValues=new LinkedList();
					
					String getunitMesurement="select * from UNIT_MESUREMENT";
					ResultSet rsUnit=ad.selectQuery(getunitMesurement);
					while(rsUnit.next())
					{
						unitOfMeasIdList.add(rsUnit.getString("UNIT_OF_MEAS_ID"));
						unitOfMeasIdValues.add(rsUnit.getString("UNIT_OF_MEAS_ID")+" - "+rsUnit.getString("LTXT"));
					}
					statusForm.setUnitOfMeasIdList(unitOfMeasIdList);
					statusForm.setUnitOfMeasIdValues(unitOfMeasIdValues);
					
					LinkedList puchaseGroupIdList=new LinkedList();
					LinkedList puchaseGroupIdValues=new LinkedList();
					
					String getPurchaseGroup="select * from PURCHASE_GROUP";
					ResultSet rsPurchaseGroup=ad.selectQuery(getPurchaseGroup);
					while(rsPurchaseGroup.next())
					{
						puchaseGroupIdList.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID"));
						puchaseGroupIdValues.add(rsPurchaseGroup.getString("PURCHASE_GROUP_ID")+" - "+rsPurchaseGroup.getString("PURCHASE_GROUP_DESC"));
					}
					statusForm.setPuchaseGroupIdList(puchaseGroupIdList);
					statusForm.setPuchaseGroupIdValues(puchaseGroupIdValues);
					
					LinkedList dmfGradeIDList=new LinkedList();
					LinkedList dmfGradeIDValueList=new LinkedList();
					
					String getDMFValues="select * from DMF_GRADE";
					ResultSet rsDMFValues=ad.selectQuery(getDMFValues);
					while(rsDMFValues.next())
					{
						dmfGradeIDList.add(rsDMFValues.getString("DMF_GRADE_ID"));
						dmfGradeIDValueList.add(rsDMFValues.getString("DMF_GRADE_ID")+" - "+rsDMFValues.getString("DMF_GRADE_DESC"));
					}
					statusForm.setDmfGradeIDList(dmfGradeIDList);
					statusForm.setDmfGradeIDValueList(dmfGradeIDValueList);
					
					
					LinkedList valuationClassID=new LinkedList();
					LinkedList valuationClassName=new LinkedList();
					
					String getValuation="select * from VALUATION_CLASS";
					ResultSet rsValuation=ad.selectQuery(getValuation);
					while(rsValuation.next())
					{
						valuationClassID.add(rsValuation.getString("VALUATION_ID"));
						valuationClassName.add(rsValuation.getString("VALUATION_ID")+" - "+rsValuation.getString("VALUATION_DESC"));
					}
					statusForm.setValuationClassID(valuationClassID);
					statusForm.setValuationClassName(valuationClassName);
					
					LinkedList tempIDList=new LinkedList();
					LinkedList temValueList=new LinkedList();
					String getTemp="select * from TEMP_CONDITION order by TEMP_CON_DESC";
					ResultSet rsTemp=ad.selectQuery(getTemp);
					while(rsTemp.next())
					{
						tempIDList.add(rsTemp.getString("TEMP_CON_ID"));
						temValueList.add(rsTemp.getString("TEMP_CON_ID")+" - "+rsTemp.getString("TEMP_CON_DESC"));
					}
					statusForm.setTempIDList(tempIDList);
					statusForm.setTemValueList(temValueList);
					
					LinkedList storageIDList=new LinkedList();
					LinkedList storageLocList=new LinkedList();
					String getStorageLoc="select * from STORAGE_CONDITION";
					ResultSet rsStorageLoc=ad.selectQuery(getStorageLoc);
					while(rsStorageLoc.next())
					{
						storageIDList.add(rsStorageLoc.getString("STO_COND_CODE"));
						storageLocList.add(rsStorageLoc.getString("STO_COND_CODE")+" - "+rsStorageLoc.getString("LTXT"));
					}
					statusForm.setStorageIDList(storageIDList);
					statusForm.setStorageLocList(storageLocList);
					
					String getMaterial="select * from material_code_request where REQUEST_NO='"+reqId+"'";
					ResultSet rs=ad.selectQuery(getMaterial);
					while(rs.next())
					{
						statusForm.setRequestNumber(reqId);
						reqDate=rs.getString("REQUEST_DATE");
						String a[]=reqDate.split(" ");
						reqDate=a[0];
						String b[]=reqDate.split("-");
						reqDate=b[2]+"/"+b[1]+"/"+b[0];
						statusForm.setRequestDate(reqDate);
						statusForm.setHsnCode(rs.getString("HSN_Code"));
						statusForm.setLocationId(rs.getString("LOCATION_ID"));
						statusForm.setStorageLocationId(rs.getString("STORAGE_LOCATION_ID"));
						statusForm.setMaterialTypeId(rs.getString("MATERIAL_TYPE_ID"));
						statusForm.setMaterialShortName(rs.getString("MATERIAL_SHORT_NAME")); 
						statusForm.setMaterialLongName(rs.getString("MATERIAL_LONG_NAME"));
						statusForm.setMaterialGroupId(rs.getString("MATERIAL_GROUP_ID"));
						statusForm.setPharmacopName(rs.getString("PHARMACOP_NAME"));
					String pharmacopGrade=rs.getString("PHARMACOP_GRADE");
					statusForm.setPharmacopGrade(pharmacopGrade);
					statusForm.setStorage(rs
							.getString("STORAGE"));
						
					statusForm.setGenericName(rs.getString("GENERIC_NAME"));
					statusForm.setSynonym(rs.getString("SYNONYM"));
					statusForm.setPharmacopSpecification(rs.getString("PHARMACOP_SPECIFICATION"));
						String isDMfMaterial=rs.getString("IS_DMF_MATERIAL");
						if(isDMfMaterial.equalsIgnoreCase("1"))
						{
							statusForm.setIsDMFMaterial("1");
							statusForm.setDmfGradeId(rs.getString("DMF_GRADE_ID"));
							statusForm.setMaterialGrade(rs.getString("MATERIAL_GRADE"));
							statusForm.setCosGradeNo(rs.getString("COS_GRADE_AND_NO"));
							
						}
						statusForm.setAdditionalTest(rs.getString("ADDITIONAL_TEST"));
						if(isDMfMaterial.equalsIgnoreCase("0"))
						{
							statusForm.setIsDMFMaterial("0");
							statusForm.setDmfGradeId(rs.getString("DMF_GRADE_ID"));
							statusForm.setMaterialGrade(rs.getString("MATERIAL_GRADE"));
							statusForm.setCosGradeNo(rs.getString("COS_GRADE_AND_NO"));
							
							
						}
						
						statusForm.setCountryId(rs.getString("COUNTRY_ID"));
						statusForm.setCustomerName(rs.getString("CUSTOMER_NAME"));
						statusForm.setToBeUsedInProducts(rs.getString("TO_BE_USED_IN_PRODUCTS"));
						
						String isVendorStatus=rs.getString("IS_VENDOR_SPECIFIC_MATERIAL");
						if(isVendorStatus.equalsIgnoreCase("1"))
						{
							statusForm.setIsVendorSpecificMaterial("1");
							statusForm.setMfgrName(rs.getString("MFGR_NAME"));
							statusForm.setSiteOfManufacture(rs.getString("SITE_OF_MANUFACTURE"));
						}
						if(isVendorStatus.equalsIgnoreCase("0"))
						{
							statusForm.setIsVendorSpecificMaterial("0");
						}
						
						statusForm.setTempCondition(rs.getString("TEMP_CONDITION"));
						statusForm.setStorageCondition(rs.getString("STORAGE_CONDITION"));
						statusForm.setShelfLife(rs.getString("SHELF_LIFE"));
						String dutyElement=rs.getString("DUTY_ELEMENT");
						if(dutyElement.equalsIgnoreCase("0"))
						{
							statusForm.setDutyElement("0");
						}
						if(dutyElement.equalsIgnoreCase("2"))
							statusForm.setDutyElement("2");
						if(dutyElement.equalsIgnoreCase("3"))
							statusForm.setDutyElement("3");
						statusForm.setShelfLifeType(rs.getString("SHELF_LIFE_TYPE"));
						statusForm.setRetestDays(rs.getString("RETEST_DAYS"));
						statusForm.setRetestType(rs.getString("RETEST_DAYS_TYPE"));
						statusForm.setValuationClass(rs.getString("VALUATION_CLASS"));
						statusForm.setApproximateValue(rs.getString("APPROXIMATE_VALUE"));
						statusForm.setUnitOfMeasId(rs.getString("UNIT_OF_MEAS_ID"));
						statusForm.setPuchaseGroupId(rs.getString("PURCHASE_GROUP_ID"));
						statusForm.setRequestedBy(rs.getString("REQUESTED_BY"));
						
						ArrayList fileList = new ArrayList();
						String uploadedFiles=rs.getString("Attachements");
						if(uploadedFiles.equalsIgnoreCase(""))
						{
							
						}else{
						String v[] = uploadedFiles.split(",");
						int l = v.length;
						for (int i = 0; i < l; i++) 
						{
							RawMaterialForm statusForm2=new RawMaterialForm();
							//String url=v[i];
							//statusForm2.setUrl(url);
						System.out.println(v[i]);
							statusForm2.setUploadFilePath(v[i]);
						int x=v[i].lastIndexOf("/");
						uploadedFiles=v[i].substring(x+1);		
						statusForm2.setFileList(uploadedFiles);
						fileList.add(statusForm2);
						}
						request.setAttribute("listName", fileList);
						}
						String sapCodeno=rs.getString("SAP_CODE_NO");
						if(sapCodeno!=null)
						{
							statusForm.setSapCodeNo(rs.getString("SAP_CODE_NO"));
							String sapCodeExist=rs.getString("SAP_CODE_EXISTS");
							if(sapCodeExist.equalsIgnoreCase("1"))
							{
								statusForm.setSapCodeExists("On");
							}
							if(sapCodeExist.equalsIgnoreCase("0"))
								statusForm.setSapCodeExistsNo("On");
							
							
							String createDate=rs.getString("SAP_CREATION_DATE");
							String a1[]=createDate.split(" ");
							createDate=a1[0];
							String b1[]=createDate.split("-");
							createDate=b1[2]+"/"+b1[1]+"/"+b1[0];
							statusForm.setSapCreationDate(createDate);
							statusForm.setSapCreatedBy(rs.getString("SAP_CREATED_BY"));
						}

					
				}
				
				}//end of ROH VALUES
				
				
				
				statusForm.setUserRole(userRole);
				
				if(matType.equals("FG")||matType.equals("HAWA")){
				 matDetails="select loc.LOCATION_CODE,mat.Type,mat.CREATED_BY,mat.DOMESTIC_OR_EXPORTS from material_code_request as mat,Location as loc  where mat.REQUEST_NO='"+reqId+"' and mat.LOCATION_ID=loc.LOCID";
				 rsDetails=ad.selectQuery(matDetails);
				while(rsDetails.next())
				{
					
					matGroup=rsDetails.getString("DOMESTIC_OR_EXPORTS");
				}
		 		if(matGroup.equals("D"))
		 			matGroup="Domestic";
		 		if(matGroup.equals("E"))
		 			matGroup="Export";
		 		if(matGroup.equals("V"))
		 			matGroup="V";
				}
				//set ApproverDetails 
				checkStatus=0;int appStatus=0;
				LinkedList listApprers=new LinkedList();
				String getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
				"where mast.Location='"+location+"' AND  mast.Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and mast.Approver_Id=emp.PERNR order by Priority";
				ResultSet rsApprDetails=ad.selectQuery(getApprDetails);
				while(rsApprDetails.next())
				{
					checkStatus=1;
					ApprovalsForm apprvers=new ApprovalsForm();
					apprvers.setPriority(rsApprDetails.getString("Priority"));
					apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
					String empCode=rsApprDetails.getString("Approver_Id");
					String approveStatus="";
					String actualapprover="";
					boolean data=false;
					String recordStatus="select mast.Priority,mast.Approver_Id,mast.Parllel_Approver_1,mast.Parllel_Approver_2,all_r.Actual_Approver,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
					"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
					"mast.Material_Type='"+matType+"' AND Material_Group='"+matGroup+"' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
					"or mast.Role='Creator') and mast.Approver_Id=emp.PERNR  group by mast.Priority,mast.Priority,mast.Approver_Id,mast.Parllel_Approver_1,mast.Parllel_Approver_2,all_r.Actual_Approver,emp.EMP_FULLNAME,all_r.Req_Status," +
					"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
					ResultSet rsAppInfo=ad.selectQuery(recordStatus);
					while(rsAppInfo.next())
					{
						actualapprover=rsAppInfo.getString("Actual_Approver");
						if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Approver_Id")))
						{
							apprvers.setEmployeeCode(rsAppInfo.getString("Approver_Id"));
							data=true;
						}
						if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Parllel_Approver_1")))
						{
							apprvers.setEmployeeCode(rsAppInfo.getString("Parllel_Approver_1"));
							data=true;
						}
						if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Parllel_Approver_2")))
						{
							apprvers.setEmployeeCode(rsAppInfo.getString("Parllel_Approver_2"));
							data=true;
						}
						apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
						approveStatus=rsAppInfo.getString("Req_Status");
						if(approveStatus.equalsIgnoreCase(""))
						{
							apprvers.setApproveStatus("In Process");
						}
						if(approveStatus.equalsIgnoreCase("Approved")|| approveStatus.equalsIgnoreCase("Completed"))
						{
						apprvers.setDate(rsAppInfo.getString("approved_date"));
						}else{
							apprvers.setDate(rsAppInfo.getString("rejected_date"));
							appStatus=1;
						}
						 comments=rsAppInfo.getString("Comments");
						if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
						{
							apprvers.setComments("");
						}else{
							apprvers.setComments(rsAppInfo.getString("Comments"));
						}
						
						
					}
					if(approveStatus.equalsIgnoreCase("") && appStatus==0)
					{
						apprvers.setApproveStatus("In Process");
					}
					String pernr="";

					if(data==true)
					{
						pernr=actualapprover;
					}
					else
					{
						pernr=rsApprDetails.getString("Approver_Id");
					}						
				
						
						
					String name="select EMP_FULLNAME from emp_official_info where PERNR='"+pernr+"'";
					ResultSet rsname=ad.selectQuery(name);
					if(rsname.next())
					{
						apprvers.setEmployeeName(rsname.getString("EMP_FULLNAME"));
					}
					listApprers.add(apprvers);
				}
				if(checkStatus==0)
				{
					getApprDetails="select mast.Priority,mast.Approver_Id,emp.EMP_FULLNAME from Material_Approvers as mast,emp_official_info as emp " +
					"where mast.Location='"+location+"' AND  mast.Material_Type='"+matType+"' AND Material_Group='' and mast.Approver_Id=emp.PERNR order by Priority";
					rsApprDetails=ad.selectQuery(getApprDetails);
					while(rsApprDetails.next())
					{
						checkStatus=1;
						ApprovalsForm apprvers=new ApprovalsForm();
						apprvers.setPriority(rsApprDetails.getString("Priority"));
						apprvers.setEmployeeCode(rsApprDetails.getString("Approver_Id"));
						String empCode=rsApprDetails.getString("Approver_Id");
						String approveStatus="";
						String actualapprover="";
						boolean data=false;
						String recordStatus="select mast.Priority,mast.Approver_Id,mast.Parllel_Approver_1,mast.Parllel_Approver_2,all_r.Actual_Approver,emp.EMP_FULLNAME,all_r.Req_Status,all_r.approved_date,all_r.rejected_date,all_r.Comments " +
						"from Material_Approvers as mast,emp_official_info as emp,All_Request as all_r where all_r.Req_Id='"+reqId+"' and mast.Location='"+location+"' AND  " +
						"mast.Material_Type='"+matType+"' AND Material_Group='' and all_r.Last_Approver='"+empCode+"' and mast.Approver_Id=all_r.Last_Approver and (mast.Role='User' or mast.Role='Accounts' " +
						"or mast.Role='Creator') and mast.Approver_Id=emp.PERNR  group by mast.Priority,mast.Priority,mast.Approver_Id,mast.Parllel_Approver_1,mast.Parllel_Approver_2,all_r.Actual_Approver,emp.EMP_FULLNAME,all_r.Req_Status," +
						"all_r.approved_date,all_r.rejected_date,all_r.Comments  HAVING count(*) > 0";
						ResultSet rsAppInfo=ad.selectQuery(recordStatus);
						while(rsAppInfo.next())
						{
							
							actualapprover=rsAppInfo.getString("Actual_Approver");
							if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Approver_Id")))
							{
								apprvers.setEmployeeCode(rsAppInfo.getString("Approver_Id"));
								data=true;
							}
							if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Parllel_Approver_1")))
							{
								apprvers.setEmployeeCode(rsAppInfo.getString("Parllel_Approver_1"));
								data=true;
							}
							if(actualapprover.equalsIgnoreCase(rsAppInfo.getString("Parllel_Approver_2")))
							{
								apprvers.setEmployeeCode(rsAppInfo.getString("Parllel_Approver_2"));
								data=true;
							}
							apprvers.setApproveStatus(rsAppInfo.getString("Req_Status"));
							approveStatus=rsAppInfo.getString("Req_Status");
							
							if(approveStatus.equalsIgnoreCase("Approved")||approveStatus.equalsIgnoreCase("Completed"))
							{
							String approveDate=	rsAppInfo.getString("approved_date");
							
							String a[]=approveDate.split(" ");
							approveDate=a[0];
							String b[]=approveDate.split("-");
							approveDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
							
							apprvers.setDate(approveDate);
							}else{
								String rejectDate=	rsAppInfo.getString("rejected_date");
								appStatus=1;
								String a[]=rejectDate.split(" ");
								rejectDate=a[0];
								String b[]=rejectDate.split("-");
								rejectDate=b[2]+"/"+b[1]+"/"+b[0]+" "+a[1];
								apprvers.setDate(rejectDate);
							}
							 comments=rsAppInfo.getString("Comments");
							if(comments.equalsIgnoreCase("null") || comments.equalsIgnoreCase(""))
							{
								apprvers.setComments("");
							}else{
								apprvers.setComments(rsAppInfo.getString("Comments"));
							}
						}
						if(approveStatus.equalsIgnoreCase("") && appStatus==0)
						{
							apprvers.setApproveStatus("In Process");
						}
						String pernr="";

						if(data==true)
    					{
    						pernr=actualapprover;
    					}
    					else
    					{
    						pernr=rsApprDetails.getString("Approver_Id");
    					}						
							
							
						String name="select EMP_FULLNAME from emp_official_info where PERNR='"+pernr+"'";
						ResultSet rsname=ad.selectQuery(name);
						if(rsname.next())
						{
							apprvers.setEmployeeName(rsname.getString("EMP_FULLNAME"));
						}
						listApprers.add(apprvers);
				}
				}
				request.setAttribute("approverDetails", listApprers);
				
				if(matType.equalsIgnoreCase("ZCIV")||matType.equalsIgnoreCase("ZCON")||matType.equalsIgnoreCase("ZITC")||matType.equalsIgnoreCase("LC")
						||matType.equalsIgnoreCase("ZPFL")||matType.equalsIgnoreCase("ZSCR"))
			     {
				if(userRole.equalsIgnoreCase("User"))
				{
				return mapping.findForward("GeneralMaterial");
				}
				if(userRole.equalsIgnoreCase("Accounts"))
				{
				return mapping.findForward("GeneralMaterial_Account");
				}
				if(userRole.equalsIgnoreCase("Creator"))
				{
				 dNow = new Date( );
					  ft = new SimpleDateFormat ("dd/MM/yyyy");
						dateNow = ft.format(dNow);
						statusForm.setSapCreationDate(dateNow);
						statusForm.setSapCreatedBy(user.getEmployeeNo()+"-"+user.getFullName());
					
				return mapping.findForward("GeneralMaterial_Creator");
				}
				
			     }
				
				if(matType.equalsIgnoreCase("PPC") )
				{
					if(userRole.equalsIgnoreCase("User"))
    				{
    				return mapping.findForward("ZPPCDetails");
    				}
    				if(userRole.equalsIgnoreCase("Accounts"))
    				{
    				return mapping.findForward("ZPPC_Account");
    				}
    				if(userRole.equalsIgnoreCase("Creator"))
    				{
    				   					
    				return mapping.findForward("ZPPC_Creator");
    				}
				}
				if(matType.equalsIgnoreCase("OSE"))
				{
					if(userRole.equalsIgnoreCase("User"))
					{
					return mapping.findForward("ZPSRDetails");
					}
					if(userRole.equalsIgnoreCase("Accounts"))
					{
					return mapping.findForward("ZPSR_Account");
					}
					if(userRole.equalsIgnoreCase("Creator"))
					{
						dNow = new Date( );
						 ft = new SimpleDateFormat ("dd/MM/yyyy");
							dateNow = ft.format(dNow);
							statusForm.setSapCreationDate(dateNow);
							statusForm.setSapCreatedBy(user.getEmployeeNo()+"-"+user.getFullName());
						
					return mapping.findForward("ZPSR_Creator");
					}
				}
				if(matType.equalsIgnoreCase("BULK"))
				{
				if(userRole.equalsIgnoreCase("User"))
				{
				return mapping.findForward("HALBDetails");
				}
				if(userRole.equalsIgnoreCase("Accounts"))
				{
				return mapping.findForward("HALB_Account");
				}
				if(userRole.equalsIgnoreCase("Creator"))
				{
					dNow = new Date( );
					 ft = new SimpleDateFormat ("dd/MM/yyyy");
						dateNow = ft.format(dNow);
						statusForm.setSapCreationDate(dateNow);
						statusForm.setSapCreatedBy(user.getEmployeeNo()+"-"+user.getFullName());
					
				return mapping.findForward("HALB_Creator");
				}
				}
				if(matType.equalsIgnoreCase("FG") || matType.equalsIgnoreCase("HAWA"))
				{
					if(userRole.equalsIgnoreCase("User"))
					{
					return mapping.findForward("finishedProduct");
					}
					if(userRole.equalsIgnoreCase("Accounts"))
					{
					return mapping.findForward("finishedProduct_Account");
					}
					if(userRole.equalsIgnoreCase("Creator"))
					{
						dNow = new Date( );
						 ft = new SimpleDateFormat ("dd/MM/yyyy");
							dateNow = ft.format(dNow);
							statusForm.setSapCreationDate(dateNow);
							statusForm.setSapCreatedBy(user.getEmployeeNo()+"-"+user.getFullName());
					return mapping.findForward("finishedProduct_Creator");
					}
					
				}
				
				if(matType.equalsIgnoreCase("RM"))
				{
					if(userRole.equalsIgnoreCase("User"))
					{
					return mapping.findForward("ROHDetails");
					}
					if(userRole.equalsIgnoreCase("Accounts"))
					{
					return mapping.findForward("ROH_Account");
					}
					if(userRole.equalsIgnoreCase("Creator"))
					{
						dNow = new Date( );
						 ft = new SimpleDateFormat ("dd/MM/yyyy");
							dateNow = ft.format(dNow);
							statusForm.setSapCreationDate(dateNow);
							statusForm.setSapCreatedBy(user.getEmployeeNo()+"-"+user.getFullName());
					return mapping.findForward("ROH_Creator");
					}
				}
				
				if(matType.equalsIgnoreCase("PM"))
				 {
				
				    if(userRole.equalsIgnoreCase("User"))
				  {
				      return mapping.findForward("VERPDetails");
				  }
				if(userRole.equalsIgnoreCase("Accounts"))
				  {
				       return mapping.findForward("VERP_Account");
				  }
				if(userRole.equalsIgnoreCase("Creator"))
				  {
					dNow = new Date( );
					 ft = new SimpleDateFormat ("dd/MM/yyyy");
						dateNow = ft.format(dNow);
						statusForm.setSapCreationDate(dateNow);
						statusForm.setSapCreatedBy(user.getEmployeeNo()+"-"+user.getFullName());
				       return mapping.findForward("VERP_Creator");
				  }
			   }
				
			}
			//for Leave
			if(reqType.equalsIgnoreCase("Leave") ){
				if(reqStatus.equalsIgnoreCase("Approve")){
					boolean existStatus=false;
					
						Date dNow = new Date( );
						SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS");
						String dateNow = ft.format(dNow);
						boolean checkStatus=false;
						String empID="";
						String submit_date="";
						
						String getLeaveDetails="select * from leave_details where Req_Id='"+reqId+"'"; 
						ResultSet rsLeave=ad.selectQuery(getLeaveDetails);
						while(rsLeave.next())
						{
							empID=rsLeave.getString("firstname");
							submit_date=rsLeave.getString("submit_date");
							
						}
						int priorityCout=0;
						int totalApproverCount=0;
						String dataFlowType=""; 
						String checkESSApproverList="select count(*) from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave'";
						ResultSet rsCheckInEss=ad.selectQuery(checkESSApproverList);
						while(rsCheckInEss.next())
						{
							int number=rsCheckInEss.getInt(1);
							totalApproverCount=rsCheckInEss.getInt(1);
							if(number==0)
							{
								existStatus=false;
							}else{
								existStatus=true;
							}
						}
						
					
						
						if(existStatus==true){
							String getDataFlowType="select * from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave' ";
							ResultSet rsDataFlowType=ad.selectQuery(getDataFlowType);
							while(rsDataFlowType.next())
							{
								dataFlowType=rsDataFlowType.getString("reqType");
							}
							if(dataFlowType.equalsIgnoreCase("sequential"))
							{
								int approverPriority=0;
								String getApprPriority="select Priority from ESS_Approvers where employeeNumber='"+empID+"' and ApproverId='"+user.getEmployeeNo()+"' and essType='Leave'";
								ResultSet rsApprPriority=ad.selectQuery(getApprPriority);
								while(rsApprPriority.next())
								{
									approverPriority=rsApprPriority.getInt("Priority");
								}
								if(totalApproverCount==approverPriority)
								{
									//last approver
									existStatus=false;
									//check cancelled Record
	                                int cancelledCount=0;
	                                String getCheckCancelled="select COUNT(*) from All_Request where Req_Id='"+reqId+"' and Req_Type='Leave' and Req_Status='Cancelled'";
	                                ResultSet rsCheckCancel=ad.selectQuery(getCheckCancelled);
	                                while(rsCheckCancel.next())
	                                {
	                                	cancelledCount=rsCheckCancel.getInt(1);
	                                	if(cancelledCount>0)
	                                	{
	                                		existStatus=true;
	                                		 String updateSql= "update All_Request set Approved_Persons='"+uName+"', Last_approver='"+uName+"',Pending_approver='',Comments='"+comments+"'," +
	                                         "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' and Pending_approver='"+user.getEmployeeNo()+"' and Req_Type='Leave'";
	            							 int upd=ad.SqlExecuteUpdate(updateSql);
	         	   							 if(upd>0)
	         	   							 {
	         	   								request.setAttribute("statusMessage2", "statusMessage2");
												statusForm.setMessage2("This Request already has been Cancelled");
	         	   							 }
	                                	}
	                                }
								}else{
								String nextApprover="";
								String getNextApprDetails="select ApproverId from ESS_Approvers where employeeNumber='"+empID+"' and Priority='"+(approverPriority+1)+"' and essType='Leave'";
                                ResultSet rsNextApprDetails=ad.selectQuery(getNextApprDetails);
                                while(rsNextApprDetails.next())
                                {
                                	nextApprover=rsNextApprDetails.getString("ApproverId");
                                }
                                
                                //check cancelled Record
                                int cancelledCount=0;
                                String getCheckCancelled="select COUNT(*) from All_Request where Req_Id='"+reqId+"' and Req_Type='Leave' and Req_Status='Cancelled'";
                                ResultSet rsCheckCancel=ad.selectQuery(getCheckCancelled);
                                while(rsCheckCancel.next())
                                {
                                	cancelledCount=rsCheckCancel.getInt(1);
                                	if(cancelledCount>0)
                                	{
                                		existStatus=true;
                                		 String updateSql= "update All_Request set Approved_Persons='"+uName+"', Last_approver='"+uName+"',Pending_approver='',Comments='"+comments+"'," +
                                         "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' and Pending_approver='"+user.getEmployeeNo()+"' and Req_Type='Leave'";
            							 int upd=ad.SqlExecuteUpdate(updateSql);
         	   							 if(upd>0)
         	   							 {
         	   								request.setAttribute("statusMessage2", "statusMessage2");
											statusForm.setMessage2("This Request already has been Cancelled");
         	   							 }
                                	}
                                }
                                if(cancelledCount==0){
                                String updateSql= "update All_Request set Approved_Persons='"+uName+"', Last_approver='"+uName+"',Pending_approver='',Comments='"+comments+"'," +
                                "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' and Pending_approver='"+user.getEmployeeNo()+"' and Req_Type='Leave'";
   							 int upd=ad.SqlExecuteUpdate(updateSql);
	   							 if(upd>0)
	   							 {
	   								String saveRecReq="insert into All_Request (Req_Id, Req_Type, Requester_Name, Req_Date, Req_Status, Last_Approver, Pending_Approver,Approved_Persons,Requester_Id,Comments) values (";
	   								saveRecReq = saveRecReq + "'"+reqId+"','Leave','"+empID+"','"+submit_date+"','Pending','','"+nextApprover+"','No','"+empID+"','')";
	   								 int i=ad.SqlExecuteUpdate(saveRecReq);
	   								ad.connClose();
	   								 EMailer email = new EMailer();
	   								 int j=email.sendMailToNextSequentialApprover(request, "", reqId, "Leave",nextApprover,empID);
	   							 }
							  }
								}
							}
							
							
							
							if(dataFlowType.equalsIgnoreCase("parallel"))
							{
								String frstapp="";
								String par1app="";
								String par2app="";
								
								//Approvers
								String getNextApprDetails="select * from ESS_Approvers where employeeNumber='"+empID+"'  and essType='Leave'";
                                ResultSet rsNextApprDetails=ad.selectQuery(getNextApprDetails);
                                while(rsNextApprDetails.next())
                                {
                                	frstapp=rsNextApprDetails.getString("ApproverId");
                                	par1app=rsNextApprDetails.getString("Parallel_Approver1");
                                	par2app=rsNextApprDetails.getString("Parallel_Approver2");
                                }
								
								
								//check total Approve count
								int totalApproveCount=0;
								String getTotApprCount="select count(*) from All_Request where Req_Id='"+reqId+"' and Requester_Name='"+empID+"' and Req_Status='Approved' and Req_Type='Leave'";
								ResultSet rsTotApprCount=ad.selectQuery(getTotApprCount);
								while(rsTotApprCount.next())
								{
									totalApproveCount=rsTotApprCount.getInt(1);
								}
								if(totalApproveCount==0)
								{
									//check reject count 
									int totalRejectCount=0;
									String getTotRejectCount="select count(*) from All_Request where Req_Id='"+reqId+"' and Requester_Name='"+empID+"' and Req_Status='Rejected' and Req_Type='Leave'";
									ResultSet rsTotRejCount=ad.selectQuery(getTotRejectCount);
									while(rsTotRejCount.next())
									{
										totalRejectCount=rsTotRejCount.getInt(1);
									}
									getTotRejectCount="select count(*) from All_Request where Req_Id='"+reqId+"' and Requester_Name='"+empID+"' and Req_Status='Cancelled' and Req_Type='Leave'";
									 rsTotRejCount=ad.selectQuery(getTotRejectCount);
									while(rsTotRejCount.next())
									{
										
										totalRejectCount=totalRejectCount+rsTotRejCount.getInt(1);
									}
									if(totalRejectCount==0)
									{
									
									 String updateSql= "update All_Request set Approved_Persons='"+frstapp+"', Last_approver='"+frstapp+"',Pending_approver='',Comments='"+comments+"'," +
		                                "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved',Actual_Approver='"+user.getEmployeeNo()+"',Actual_Approver_status='Approved',Actual_Approved_Date='"+dateNow+"',Actual_Approved_Comments='"+comments+"' where Req_Id='"+reqId+"' and Pending_Approver='"+frstapp+"' and Req_Type='Leave'";
		   							 int upd=ad.SqlExecuteUpdate(updateSql);
			   							 if(upd>0)
			   							 {
			   								request.setAttribute("statusMessage2", "statusMessage2");
											statusForm.setMessage2("Request has been approved");
											
											if(par1app==null)
											{
												par1app="";
											}
											
											if(par2app==null)
											{
												par2app="";
											}
											
											if(!par1app.equalsIgnoreCase(""))
											{
												String updateSql1= "update All_Request set Approved_Persons='"+par1app+"', Last_approver='"+par1app+"',Pending_approver='',Comments='"+comments+"'," +
						                                "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved',Actual_Approver='"+user.getEmployeeNo()+"',Actual_Approver_status='Approved',Actual_Approved_Date='"+dateNow+"',Actual_Approved_Comments='"+comments+"' where Req_Id='"+reqId+"' and Pending_Approver='"+par1app+"' and Req_Type='Leave'";
						   							 int upd1=ad.SqlExecuteUpdate(updateSql1);
											}
											
											if(!par2app.equalsIgnoreCase(""))
											{
												String updateSql1= "update All_Request set Approved_Persons='"+par2app+"', Last_approver='"+par2app+"',Pending_approver='',Comments='"+comments+"'," +
						                                "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved',Actual_Approver='"+user.getEmployeeNo()+"',Actual_Approver_status='Approved',Actual_Approved_Date='"+dateNow+"',Actual_Approved_Comments='"+comments+"' where Req_Id='"+reqId+"' and Pending_Approver='"+par2app+"' and Req_Type='Leave'";
						   							 int upd1=ad.SqlExecuteUpdate(updateSql1);
											}
											///Leave master update
											
											existStatus=false;
											
											
			   							 }
									}
									if(totalRejectCount==2)
									{
										String updateSql1= "update All_Request set Req_Status='Approved', Comments='"+comments+"',approved_date='"+dateNow+"',rejected_date='',Last_Approver='"+user.getEmployeeNo()+"',Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Pending_Approver='"+user.getEmployeeNo()+"'  and Req_Type='Leave'";;
										int upd2=ad.SqlExecuteUpdate(updateSql1);
										if(upd2>0){
											request.setAttribute("statusMessage", "statusMessage");
											statusForm.setMessage("This request already has been rejected");
											
											
											
										}
									}
								}if(totalApproveCount==1){
									//no one leave request is approved
									existStatus=false;
								}
								if(totalApproveCount==2)
								{
									//show message Approve
									String updateSql= "update All_Request set Approved_Persons='"+uName+"', Last_approver='"+uName+"',Pending_approver='',Comments='"+comments+"'," +
	                                "approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved',Actual_Approver='"+user.getEmployeeNo()+"',Actual_Approver_status='Approved',Actual_Approved_Date='"+dateNow+"',Actual_Approved_Comments='"+comments+"' where Req_Id='"+reqId+"' and Pending_approver='"+user.getEmployeeNo()+"' and Req_Type='Leave'";
	   							 int upd=ad.SqlExecuteUpdate(updateSql);
		   							 if(upd>0)
		   							 {
		   								request.setAttribute("statusMessage2", "statusMessage2");
										statusForm.setMessage2("This  request already has been  approved");
		   							 }
								}
							}
						}
						if(existStatus==false){

							
							float noOfDays=0;
							String leaveType="";
							float lvBal=0;
							float avlBal=0;
							float closingBal=0;
							float leaveAvaild=0;
							String  stdate ="";
							int year=0;
									 getLeaveDetails="select *,year(start_date) as year from leave_details where Req_Id='"+reqId+"'"; 
									 rsLeave=ad.selectQuery(getLeaveDetails);
									while(rsLeave.next())
									{
										noOfDays=rsLeave.getFloat("no_of_days");
										leaveType=rsLeave.getString("leave_type");
										empID=rsLeave.getString("firstname");
										stdate=rsLeave.getString("start_date");
										year=Integer.parseInt(rsLeave.getString("year"));
									}
									int curyear = Calendar.getInstance().get(Calendar.YEAR);
									
									
									String leaveBal="select * from lv_type_d where lv_empcode='"+empID+"' and lv_typeid='"+leaveType+"' and lv_calyear='"+year+"'";
									ResultSet rsLeaveBal=ad.selectQuery(leaveBal);
									while(rsLeaveBal.next()){
										avlBal=rsLeaveBal.getFloat("lv_awtBal");
										closingBal=rsLeaveBal.getFloat("lv_clbal");
										leaveAvaild=rsLeaveBal.getFloat("lv_availed");
									
									}
									avlBal=avlBal-noOfDays;
									closingBal=closingBal-noOfDays;
									leaveAvaild=leaveAvaild+noOfDays;
									
									String updateSql= "update leave_details set Last_approver='"+uName+"',Pending_approver='',leave_status='1',Approvel_Status='Approved',approved_date='"+dateNow+"',rejected_date='',lv_balence='"+closingBal+"' where Req_Id='"+reqId+"'";
									int upd=ad.SqlExecuteUpdate(updateSql);
									///fianaicial year
									if(leaveType.equalsIgnoreCase("2") || leaveType.equalsIgnoreCase("3"))
									{
									if(curyear==year)
									{
								  String updateLeaveDetails="update lv_type_d set lv_clbal='"+closingBal+"',lv_awtBal='"+avlBal+"',lv_availed='"+leaveAvaild+"' where lv_typeid='"+leaveType+"' and lv_empcode='"+empID+"' and lv_calyear='"+year+"'";
								  int checkResult=ad.SqlExecuteUpdate(updateLeaveDetails);		
									}
									else
									{
										String updateLeaveDetails="update lv_type_d set lv_clbal='"+closingBal+"',lv_awtBal='"+avlBal+"',lv_availed='"+leaveAvaild+"' where lv_typeid='"+leaveType+"' and lv_empcode='"+empID+"' and lv_calyear='"+year+"'";
										  int checkResult=ad.SqlExecuteUpdate(updateLeaveDetails);	
										  
										  String updatecuryear="update lv_type_d set lv_clbal=lv_clbal-"+noOfDays+" ,lv_opbal=lv_opbal-"+noOfDays+" where lv_typeid='"+leaveType+"' and lv_empcode='"+empID+"' and lv_calyear='"+curyear+"'";
										  int curResult=ad.SqlExecuteUpdate(updatecuryear);	
									}
									}
									else
									{
										  String updateLeaveDetails="update lv_type_d set lv_clbal='"+closingBal+"',lv_awtBal='"+avlBal+"',lv_availed='"+leaveAvaild+"' where lv_typeid='"+leaveType+"' and lv_empcode='"+empID+"' and lv_calyear='"+year+"'";
										  int checkResult=ad.SqlExecuteUpdate(updateLeaveDetails);	
									}
								  
								 updateSql= "update All_Request set Approved_Persons='"+uName+"', Last_approver='"+uName+"',Pending_approver='', Comments='"+comments+"',approved_date='"+dateNow+"',rejected_date='',Req_Status='Approved' where Req_Id='"+reqId+"' and Pending_approver='"+user.getEmployeeNo()+"' and Req_Type='Leave'";
								 upd=ad.SqlExecuteUpdate(updateSql);
								
								if(upd>0){
									request.setAttribute("statusMessage2", "statusMessage2");
									statusForm.setMessage2("Request has been approved");
								}
							
								
								
								///update comp_oT
								if(leaveType.equalsIgnoreCase("6"))
																
								{
									
									Date dNow1 = new Date();
									SimpleDateFormat ft1 = new SimpleDateFormat("yyyy-MM-dd");
									String todaydate = ft1.format(dNow1);
									
									
									float reqnoOfDays=noOfDays;
								    String upadte="select * from COMP_OT_SAP where Employee_Number='"+empID+"' and Comp_Off_Balance>0 and  "
                                     		+ "DATEDIFF(DAY,Start_Date,'"+stdate+"') <=(select comp_off_days  from location where location_code="
                                     		+ "(select locid from emp_official_info where pernr='"+empID+"')) and '"+stdate+"'>=Start_Date order by Start_Date ";
                                     ResultSet rs=ad.selectQuery(upadte);
								
									while(rs.next())
									{
										int chk=0;
										if(reqnoOfDays>1)
										{
											String update="update COMP_OT_SAP set Comp_Off_Availed_Date='"+stdate+"',Comp_Off_Availed_Days=Number_of_Days,Processd_Date='"+dateNow+"',Leav_req_no='"+reqId+"' where Employee_Number='"+empID+"' and Start_Date='"+rs.getString("Start_Date")+"' ";
											chk=ad.SqlExecuteUpdate(update);	
											
											String updt2="update COMP_OT_SAP set Comp_Off_Balance=Number_of_Days-Comp_Off_Availed_Days,Processd_Date='"+dateNow+"',Leav_req_no='"+reqId+"' where Employee_Number='"+empID+"' and Start_Date='"+rs.getString("Start_Date")+"'";
											chk=ad.SqlExecuteUpdate(updt2);
										}
										if(reqnoOfDays==1)
										{
											String update="update COMP_OT_SAP set Comp_Off_Availed_Date='"+stdate+"',Comp_Off_Availed_Days=Number_of_Days,Processd_Date='"+dateNow+"',Leav_req_no='"+reqId+"' where Employee_Number='"+empID+"' and Start_Date='"+rs.getString("Start_Date")+"' ";
											chk=ad.SqlExecuteUpdate(update);	
											
											String updt2="update COMP_OT_SAP set Comp_Off_Balance=Number_of_Days-Comp_Off_Availed_Days,Processd_Date='"+dateNow+"',Leav_req_no='"+reqId+"' where Employee_Number='"+empID+"' and Start_Date='"+rs.getString("Start_Date")+"'";
											chk=ad.SqlExecuteUpdate(updt2);
										}
										if(reqnoOfDays==0.5)
										{
											String update="update COMP_OT_SAP set Comp_Off_Availed_Date='"+stdate+"',Comp_Off_Availed_Days=Comp_Off_Availed_Days+0.5,Processd_Date='"+dateNow+"',Leav_req_no='"+reqId+"' where Employee_Number='"+empID+"' and Start_Date='"+rs.getString("Start_Date")+"' ";
											chk=ad.SqlExecuteUpdate(update);	
											
											String updt2="update COMP_OT_SAP set Comp_Off_Balance=Number_of_Days-Comp_Off_Availed_Days,Processd_Date='"+dateNow+"',Leav_req_no='"+reqId+"' where Employee_Number='"+empID+"' and Start_Date='"+rs.getString("Start_Date")+"'";
											chk=ad.SqlExecuteUpdate(updt2);
										}
										
										if(chk>0)
										{
										reqnoOfDays=reqnoOfDays-rs.getFloat("Number_of_Days");
										}
										
										if(reqnoOfDays<=0)
										{
											break;
										}
										
									}
									
									
									
								}
							
							
						}
						
						
						
						
						
						
						
						}
				else{//for leave request reject
					int upd=0;
					String updateSql="";
					LinkedList paramList =  new LinkedList();
					Date dNow = new Date( );
					 SimpleDateFormat ft = new SimpleDateFormat ("yyyy-MM-dd HH:mm:ss.SSS");
						String dateNow = ft.format(dNow);
					
					//change leave Balence
					float noOfDays=0;
					String leaveType="";
					String empID="";
					float lvBal=0;
					float avlBal=0;
					float closingBal=0;
					int year=0;
					String getLeaveDetails="select *,year(start_date) as year from leave_details where Req_Id='"+reqId+"'"; 
					ResultSet rsLeave=ad.selectQuery(getLeaveDetails);
					while(rsLeave.next())
					{
						noOfDays=rsLeave.getFloat("no_of_days");
						leaveType=rsLeave.getString("leave_type");
						empID=rsLeave.getString("firstname");
						year=Integer.parseInt(rsLeave.getString("year"));
						
					}
					boolean existStatus=false;
					String dataFlowType=""; 
					String checkESSApproverList="select count(*) from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave'";
					ResultSet rsCheckInEss=ad.selectQuery(checkESSApproverList);
					while(rsCheckInEss.next())
					{
						int number=rsCheckInEss.getInt(1);
						if(number==0)
						{
							existStatus=false;
						}else{
							existStatus=true;
						}
					}
					if(existStatus==true){
						String getDataFlowType="select * from ESS_Approvers where employeeNumber='"+empID+"' and essType='Leave' ";
						ResultSet rsDataFlowType=ad.selectQuery(getDataFlowType);
						while(rsDataFlowType.next())
						{
							dataFlowType=rsDataFlowType.getString("reqType");
						}
						if(dataFlowType.equalsIgnoreCase("sequential")){
							existStatus=false;
						}
						if(dataFlowType.equalsIgnoreCase("parallel")){
							
							String frstapp="";
							String par1app="";
							String par2app="";
							
							//Approvers
							String getNextApprDetails="select * from ESS_Approvers where employeeNumber='"+empID+"'  and essType='Leave'";
                            ResultSet rsNextApprDetails=ad.selectQuery(getNextApprDetails);
                            while(rsNextApprDetails.next())
                            {
                            	frstapp=rsNextApprDetails.getString("ApproverId");
                            	par1app=rsNextApprDetails.getString("Parallel_Approver1");
                            	par2app=rsNextApprDetails.getString("Parallel_Approver2");
                            }
							
						//check reject count
							int totalRejectCount=0;
							String getTotApprCount="select count(*) from All_Request where Req_Id='"+reqId+"' and Requester_Name='"+empID+"' and Req_Status='Rejected' and Req_Type='Leave'";
							ResultSet rsTotApprCount=ad.selectQuery(getTotApprCount);
							while(rsTotApprCount.next())
							{
								totalRejectCount=rsTotApprCount.getInt(1);
							}
							if(totalRejectCount==0)
							{
								//check Approve Count
								int totalApproveCount=0;
								 getTotApprCount="select count(*) from All_Request where Req_Id='"+reqId+"' and Requester_Name='"+empID+"' and Req_Status='Approved' and Req_Type='Leave'";
								 rsTotApprCount=ad.selectQuery(getTotApprCount);
								while(rsTotApprCount.next())
								{
									totalApproveCount=rsTotApprCount.getInt(1);
								}
								if(totalApproveCount==1)
								{
									 updateSql= "update All_Request set Req_Status='Rejected', Comments='"+comments+"',approved_date='',rejected_date='"+dateNow+"',Last_Approver='"+user.getEmployeeNo()+"',Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',Actual_Approver='"+user.getEmployeeNo()+"',Actual_Approver_status='Rejected',Actual_Approved_Date='"+dateNow+"',Actual_Approved_Comments='"+comments+"' where Req_Id='"+reqId+"' and Pending_Approver='"+user.getEmployeeNo()+"'  and Req_Type='Leave'";;
									int upd1=exeQry.SqlExecuteUpdate(updateSql, paramList);
									if(upd1>0){
										request.setAttribute("statusMessage", "statusMessage");
										statusForm.setMessage("Request has been rejected");
									}
									
								
									
								}
								if(totalApproveCount==2)
								{
									updateSql= "update All_Request set Req_Status='Rejected', Comments='"+comments+"',approved_date='',rejected_date='"+dateNow+"',Last_Approver='"+user.getEmployeeNo()+"',Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',Actual_Approver='"+user.getEmployeeNo()+"',Actual_Approver_status='Rejected',Actual_Approved_Date='"+dateNow+"',Actual_Approved_Comments='"+comments+"' where Req_Id='"+reqId+"' and Pending_Approver='"+user.getEmployeeNo()+"'  and Req_Type='Leave'";;
									int upd1=exeQry.SqlExecuteUpdate(updateSql, paramList);
									if(upd1>0){
										request.setAttribute("statusMessage", "statusMessage");
										statusForm.setMessage("This request already has been  approved");
									}
								}
								if(totalApproveCount==0)
								{
								updateSql= "update All_Request set Req_Status='Rejected', Comments='"+comments+"',approved_date='',rejected_date='"+dateNow+"',Last_Approver='"+frstapp+"',Pending_Approver='',Approved_Persons='"+frstapp+"',Actual_Approver='"+user.getEmployeeNo()+"',Actual_Approver_status='Rejected',Actual_Approved_Date='"+dateNow+"',Actual_Approved_Comments='"+comments+"' where Req_Id='"+reqId+"' and Pending_Approver='"+frstapp+"'  and Req_Type='Leave'";;
								int upd1=exeQry.SqlExecuteUpdate(updateSql, paramList);
								if(upd1>0){
									request.setAttribute("statusMessage", "statusMessage");
									statusForm.setMessage("Request has been rejected");
									
									
									if(par1app==null)
									{
										par1app="";
									}
									
									if(par2app==null)
									{
										par2app="";
									}
									if(!par1app.equalsIgnoreCase(""))
									{
										updateSql= "update All_Request set Req_Status='Rejected', Comments='"+comments+"',approved_date='',rejected_date='"+dateNow+"',Last_Approver='"+par1app+"',Pending_Approver='',Approved_Persons='"+par1app+"',Actual_Approver='"+user.getEmployeeNo()+"',Actual_Approver_status='Rejected',Actual_Approved_Date='"+dateNow+"',Actual_Approved_Comments='"+comments+"' where Req_Id='"+reqId+"' and Pending_Approver='"+par1app+"'  and Req_Type='Leave'";;
										int upd11=exeQry.SqlExecuteUpdate(updateSql, paramList);
										
									}
									
									if(!par2app.equalsIgnoreCase(""))
									{
										updateSql= "update All_Request set Req_Status='Rejected', Comments='"+comments+"',approved_date='',rejected_date='"+dateNow+"',Last_Approver='"+par2app+"',Pending_Approver='',Approved_Persons='"+par2app+"',Actual_Approver='"+user.getEmployeeNo()+"',Actual_Approver_status='Rejected',Actual_Approved_Date='"+dateNow+"',Actual_Approved_Comments='"+comments+"' where Req_Id='"+reqId+"' and Pending_Approver='"+par2app+"'  and Req_Type='Leave'";;
										int upd21=exeQry.SqlExecuteUpdate(updateSql, paramList);
										
									}
									existStatus=false;
									
								}
								}
							}
							if(totalRejectCount==1)
							{
								existStatus=true;
							}
							if(totalRejectCount==2)
							{
								updateSql= "update All_Request set Req_Status='Rejected', Comments='"+comments+"',approved_date='',rejected_date='"+dateNow+"',Last_Approver='"+user.getEmployeeNo()+"',Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',Actual_Approver='"+user.getEmployeeNo()+"',Actual_Approver_status='Rejected',Actual_Approved_Date='"+dateNow+"',Actual_Approved_Comments='"+comments+"' where Req_Id='"+reqId+"' and Pending_Approver='"+user.getEmployeeNo()+"'  and Req_Type='Leave'";;
								int upd1=exeQry.SqlExecuteUpdate(updateSql, paramList);
								if(upd1>0){
									request.setAttribute("statusMessage", "statusMessage");
									statusForm.setMessage("This  request already has been  rejected");
								}
							}
							
							
						}
					}
					if(existStatus==false)
					{
						/*int year = Calendar.getInstance().get(Calendar.YEAR);*/
					String leaveBal="select * from lv_type_d where lv_empcode='"+empID+"' and lv_typeid='"+leaveType+"' and lv_calyear='"+year+"'";
					ResultSet rsLeaveBal=ad.selectQuery(leaveBal);
					while(rsLeaveBal.next()){
						avlBal=rsLeaveBal.getFloat("lv_awtBal");
						closingBal=rsLeaveBal.getFloat("lv_clbal");
					}
					avlBal=avlBal-noOfDays;
					closingBal=closingBal-noOfDays;
					
					updateSql= "update leave_details set Approvel_Status='Rejected',approved_date='',rejected_date='"+dateNow+"',Last_Approver='"+user.getEmployeeNo()+"',Pending_Approver='',lv_balence='"+closingBal+"'  where Req_Id='"+reqId+"'";
					upd=exeQry.SqlExecuteUpdate(updateSql, paramList);
					
				  String updateLeaveDetails="update lv_type_d set lv_awtBal='"+avlBal+"' where lv_typeid='"+leaveType+"' and lv_empcode='"+empID+"' and lv_calyear='"+year+"'";
				  int checkResult=ad.SqlExecuteUpdate(updateLeaveDetails);	
					
					updateSql= "update All_Request set Req_Status='Rejected', Comments='"+comments+"',approved_date='',rejected_date='"+dateNow+"',Last_Approver='"+user.getEmployeeNo()+"',Pending_Approver='',Approved_Persons='"+user.getEmployeeNo()+"',Actual_Approver='"+user.getEmployeeNo()+"' where Req_Id='"+reqId+"' and Pending_Approver='"+user.getEmployeeNo()+"'  and Req_Type='Leave'";;
					int upd1=exeQry.SqlExecuteUpdate(updateSql, paramList);
					if(upd1>0){
						request.setAttribute("statusMessage", "statusMessage");
						statusForm.setMessage("Request has been rejected");
					}
					}
					if(dataFlowType.equalsIgnoreCase("sequential")){
						LinkedList lvApprovers=new LinkedList();
						String getApproveTimings="select e.ApproverId,emp.EMP_FULLNAME,desg.DSGSTXT  from ESS_Approvers as e,emp_official_info as emp,DESIGNATION as desg " +
					"where employeeNumber='"+user.getEmployeeNo()+"' and  e.ApproverId=emp.PERNR and emp.DSGID=desg.DSGID order by Priority";
						ResultSet rsApprTim=ad.selectQuery(getApproveTimings);
						try{
						while(rsApprTim.next())
						{
							ApprovalsForm lvForm=new ApprovalsForm();
							lvForm.setApprover(rsApprTim.getString("EMP_FULLNAME"));
							lvForm.setDesignation(rsApprTim.getString("DSGSTXT"));
							/*String processType="Pending";
							lvForm.setApproveStatus("Pending");
							String approveStatus="";
							 approveStatus=rsApprTim.getString("Req_Status");
							lvForm.setApproveStatus(rsApprTim.getString("Req_Status"));
							String approveDt=rsApprTim.getString("approved_date");
							if(approveDt!=null)
							{
								if(approveStatus.equalsIgnoreCase("Approved"))
								{
								  lvForm.setApproveDate(rsApprTim.getString("approved_date"));	
								}
								if(approveStatus.equalsIgnoreCase("Rejected"))
								{
									lvForm.setApproveDate(rsApprTim.getString("rejected_date"));
								}
							}*/
							lvApprovers.add(lvForm);
						}
						request.setAttribute("leaveApprovers", lvApprovers);
						}catch (Exception e) {
							e.printStackTrace();
						}
				     	
					}
					
				}
				//set leave default values
				LeaveForm lForm = new LeaveForm();
				String pendingReq="select * from leave_details inner join All_Request on leave_details.Req_Id = All_Request.Req_Id where All_Request.Req_Id='"+reqId+"' and All_Request.Req_Type like '%"+reqType+"%'";
				//String pendingReq="select * from "+tName+" where Req_Id='"+reqId+"'";
				ResultSet rsGetReq=ad.selectQuery(pendingReq);
				while(rsGetReq.next()){
					LeaveAction lAction = new LeaveAction();
					String leaveType = lAction.getLeaveType(rsGetReq.getString("leave_type"));
					String  holidayType = lAction.getHolidayType(rsGetReq.getString("start_duration"));
					lForm.setLeaveType(leaveType);
					lForm.setHolidayType(holidayType);
					lForm.setEmployeeName(rsGetReq.getString("Requester_Name"));
					lForm.setStartDate(EMicroUtils.display1(rsGetReq.getDate("start_date")));
					
					String stDur=rsGetReq.getString("start_duration");
					if(stDur.equalsIgnoreCase("FD"))
						stDur="Full Day";
					if(stDur.equalsIgnoreCase("FH"))
						stDur="First Half";
					if(stDur.equalsIgnoreCase("FD"))
						stDur="Second Half";
					
					lForm.setStartDurationType(stDur);
					lForm.setEndDate(EMicroUtils.display1(rsGetReq.getDate("end_date")));
					
					String endDur=rsGetReq.getString("end_duration");
					if(endDur.equalsIgnoreCase("FD"))
						endDur="Full Day";
					if(endDur.equalsIgnoreCase("FH"))
						endDur="First Half";
					if(endDur.equalsIgnoreCase("FD"))
						endDur="Second Half";
					
					lForm.setEndDurationType(endDur);
					lForm.setNoOfDays(rsGetReq.getString("no_of_days"));
					lForm.setReason(rsGetReq.getString("reason"));
					lForm.setReasonType(rsGetReq.getString("reasonType"));
					
					String gender="";
					String pernr="";
					String name="";
					String doj="";
					String dep="";
					String desg="";
					String getGender="select emp.PERNR,emp.EMP_FULLNAME,emp.SEX,emp.DOJ,dep.DPTSTXT,desg.DSGSTXT from emp_official_info emp,DEPARTMENT as dep,DESIGNATION as desg where emp.PERNR='"+lForm.getEmployeeName()+"' and dep.DPTID=emp.DPTID and desg.DSGID=emp.DSGID";
					ResultSet rsGender=ad.selectQuery(getGender);
					while(rsGender.next())
					{
						gender=rsGender.getString("SEX");
						pernr=rsGender.getString("PERNR");
						name=rsGender.getString("EMP_FULLNAME");
						doj=rsGender.getString("DOJ");
						dep=rsGender.getString("DPTSTXT");
						desg=rsGender.getString("DSGSTXT");
						
					}
					
					lForm.setEmployeeNumber(pernr);
					lForm.setEmployeeName(name);
					lForm.setDepartment(dep);
					lForm.setDesignation(desg);
					lForm.setDoj(doj);
					
					LinkedList details = new LinkedList();
					details.add(lForm);
					request.setAttribute("details", details);
					statusForm.setRequestNo(reqId);
					statusForm.setRequestType(reqType);
					statusForm.setJobTitle(leaveType);
					statusForm.setEmpStatus(holidayType);
					statusForm.setRequestDate(rsGetReq.getString("submit_date"));
					statusForm.setDepartment(getDepartmentName(rsGetReq.getString("Requester_Id")));
					statusForm.setPrimaryLocation(getLocationName("plant",""+rsGetReq.getInt("plant_id")));
					String filepath="";
					ArrayList fileList = new ArrayList();
					String uploadedFiles=rsGetReq.getString("documents");
					if(uploadedFiles.equalsIgnoreCase(""))
					{
						
					}else{
					String v[] = uploadedFiles.split(",");
					int l = v.length;
					for (int i = 0; i < l; i++) 
					{
						LeaveForm pendAppForm1=new LeaveForm();
						filepath = "jsp/ess/leave/documents/";
						int x=v[i].lastIndexOf("/");
						uploadedFiles=v[i].substring(x+1);	
						pendAppForm1.setFileName(uploadedFiles);
						System.out.println(uploadedFiles);
						fileList.add(pendAppForm1);
					}
					request.setAttribute("fileList", fileList);
					
					}
					statusForm.setUrl(filepath);
					statusForm.setRequestedBy(rsGetReq.getString("Requester_Name"));
				
					
					 statusForm.setRemark(rsGetReq.getString("Comments"));
					if(rsGetReq.getString("Approved_Persons").contains(uName) || !reqStatus.equalsIgnoreCase("Pending")){
						request.setAttribute("approveRequest", "");
						request.setAttribute("uploadOpenings", "");
						if(reqStatus.equalsIgnoreCase("Rejected")){
							reqStatus = "Rejected";
						}
						
					}
					else{
						request.setAttribute("approveRequest", "approve");
						request.setAttribute("uploadOpenings", "");
					}
					statusForm.setReqStatus(reqStatus);
					
					if(reqStatus.equalsIgnoreCase("Cancelled")){
						request.setAttribute("commentField", "commentField");
						request.setAttribute("approveButton", "approveButton");
						request.setAttribute("rejectButton", "rejectButton");
					}
					
				
					if(reqStatus.equalsIgnoreCase("Pending")){
						statusForm.setRemark("");
						request.setAttribute("commentField", "commentField");
						request.setAttribute("approveButton", "approveButton");
						request.setAttribute("rejectButton", "rejectButton");
					}
					if(reqStatus.equalsIgnoreCase("Rejected")){
				
					}
					if(reqStatus.equalsIgnoreCase("Approved")||reqStatus.equalsIgnoreCase("Approved")){
						
					}
				
				
				}
				
				LinkedList leaveReason=new LinkedList();
				LinkedList leaveDetReason=new LinkedList();
				
				String reason="select * from LEAVE_REASON";
				ResultSet a=ad.selectQuery(reason);
				try {
					while(a.next())
					{
				leaveReason.add(a.getString("Reason"));
				leaveDetReason.add(a.getString("Detailed_Reason"));
					}
					statusForm.setLeaveReason(leaveReason);
					statusForm.setLeaveDetReason(leaveDetReason);
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				//leave approve timings
				boolean existStatus=false;
				String reqType1="";
			
				ArrayList paralist=new ArrayList();
				String checkESSApproverList="select count(*),reqType from ESS_Approvers where employeeNumber='"+lForm.getEmployeeNumber()+"' and essType='Leave' group by reqType";
				ResultSet rsCheckInEss=ad.selectQuery(checkESSApproverList);
				while(rsCheckInEss.next())
				{
					int number=rsCheckInEss.getInt(1);
					reqType=rsCheckInEss.getString("reqType");
					if(number==0)
					{
						existStatus=false;
					}else{
						existStatus=true;
					}
				}
				if(existStatus==true){
					if(reqType.equalsIgnoreCase("sequential"))
					{
						String getApproverDesig=" select e.ApproverId,emp.EMP_FULLNAME,desg.DSGSTXT  from ESS_Approvers as e,emp_official_info as emp,DESIGNATION as desg " +
						"where employeeNumber='"+lForm.getEmployeeNumber()+"' and  e.ApproverId=emp.PERNR and emp.DSGID=desg.DSGID and essType='Leave' order by Priority";
							 
							ResultSet rsA=ad.selectQuery(getApproverDesig);
								while(rsA.next())
								{
									LeaveForm lvform=new LeaveForm();
									 lvform.setApprover(rsA.getString("EMP_FULLNAME"));	
									 lvform.setAppDesig(rsA.getString("DSGSTXT"));	
									String getdetails=" select all_R.Comments,desg.DSGSTXT,emp.EMP_FULLNAME,all_R.Req_Status,all_R.approved_date," +
											"all_R.rejected_date from 	All_Request as all_R,emp_official_info as emp, DESIGNATION as desg   " +
											" where all_R.Req_Id='"+reqId+"' and all_R.Req_Type='Leave' and ((emp.PERNR=all_R.Last_Approver) or " +
											"(emp.PERNR=all_R.Pending_Approver))  and (emp.DSGID=desg.DSGID) and((Last_Approver='"+rsA.getString("ApproverId")+"') or " +
											"(Pending_Approver='"+rsA.getString("ApproverId")+"'))  and Requester_Name='"+lForm.getEmployeeNumber()+"'";
									
									ResultSet rsApproverDsg=ad.selectQuery(getdetails);
									
									while(rsApproverDsg.next())
									{
									
										String reqstatus=rsApproverDsg.getString("Req_Status");
										lvform.setStatus(rsApproverDsg.getString("Req_Status"));
										if(reqstatus.equalsIgnoreCase("Pending"))
										{
											
										
											
										}
										if(reqstatus.equalsIgnoreCase("Approved"))
										{
										lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));
										 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
									   lvform.setApprovedDate(rsApproverDsg.getString("approved_date"));
										}
										
										if(reqstatus.equalsIgnoreCase("Rejected"))
										{
											  lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
											  lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
										     lvform.setApprovedDate(rsApproverDsg.getString("rejected_date"));
										}
										if(reqstatus.equalsIgnoreCase("Cancelled"))
										{
											  lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
											  lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
										     lvform.setApprovedDate(rsApproverDsg.getString("rejected_date"));
										}
										lvform.setComments(rsApproverDsg.getString("Comments"));
									}
									paralist.add(lvform);
								}
								request.setAttribute("parallelapprovers", paralist);
							}
					if(reqType.equalsIgnoreCase("parallel"))
					{
						String getApproverDesig="  select all_R.Comments,desg.DSGSTXT,emp.EMP_FULLNAME,all_R.Req_Status,all_R.approved_date,all_R.rejected_date from " +
								"All_Request as all_R,emp_official_info as emp, DESIGNATION as desg    where all_R.Req_Id='"+reqId+"' and all_R.Req_Type='Leave' and " +
								"((emp.PERNR=all_R.Last_Approver) or (emp.PERNR=all_R.Pending_Approver))  and (emp.DSGID=desg.DSGID) ";
						    ResultSet rsApproverDsg=ad.selectQuery(getApproverDesig);
							while(rsApproverDsg.next())
							{
								LeaveForm lvform=new LeaveForm();
								String reqstatus=rsApproverDsg.getString("Req_Status");
								lvform.setStatus(rsApproverDsg.getString("Req_Status"));
								if(reqstatus.equalsIgnoreCase("Pending"))
								{
									
								 lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
								 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));	
									
								}
								if(reqstatus.equalsIgnoreCase("Approved"))
								{
								lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));
								 lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
							   lvform.setApprovedDate(rsApproverDsg.getString("approved_date"));
								}
								
								if(reqstatus.equalsIgnoreCase("Rejected"))
								{
									  lvform.setApprover(rsApproverDsg.getString("EMP_FULLNAME"));	
									  lvform.setAppDesig(rsApproverDsg.getString("DSGSTXT"));
								     lvform.setApprovedDate(rsApproverDsg.getString("rejected_date"));
								}
								lvform.setComments(rsApproverDsg.getString("Comments"));
								
								
								paralist.add(lvform);
								
							}
							
							request.setAttribute("parallelapprovers", paralist);
				//list.add(pendAppForm);
				
			}
					request.setAttribute("leave", "leave");	
		}else{
			
		}
				
				return mapping.findForward("leaveDetails");
			}
			
		}
		catch(SQLException se){
			System.out.println("Exception @ getting Approve");
			se.printStackTrace();
		}
		catch(Exception se){
			System.out.println("Exception @ getting Approve");
			se.printStackTrace();
		}
		request.setAttribute("header", "Pending Request");
		request.setAttribute("listDetails", list);
		request.setAttribute("openRequest", "");
		String result=(String)session.getAttribute("result");
		System.out.println("result="+result);
		if(result==null||result==" ")
		session.setAttribute("result"," ");
		
		
		if(request.getParameter("id")!=null){
		
		request.setAttribute("MenuIcon", request.getParameter("id"));
		}
		
		statusForm.setRequestType(reqType);
		statusForm.setRequestNo(reqId);
		
		getSelectedRequestToApprove(mapping, form, request, response);
		return mapping.findForward("leaveDetails");
	}
	
	private int updateStatus(String Status, String reqType, String reqId){
		MainDao exeQry = new MainDao();
		String updateSql= "update All_Request set Req_Status='"+Status+"' where Req_Id='"+reqId+"' and Request_Type='"+reqType+"'";
		LinkedList paramList =  new LinkedList();
		int upd=exeQry.SqlExecuteUpdate(updateSql, paramList);
		return upd;
	}
	
	private int getCount(String tName, String reqType){
		MainDao exeQry = new MainDao();
		int count=0;
		String sql="select count(*) from "+tName+" where Type='"+reqType+"'";
		try{
			ResultSet countrs=exeQry.selectQuery(sql);
			while(countrs.next()) {
					count=Integer.parseInt(countrs.getString(1));
			}
		}
		catch(SQLException se){
			System.out.println("Exception @ getting count");
			se.printStackTrace();
		}
		return count;
	}
	private String sendMailToApprover(HttpServletRequest request, int nextPriority, LinkedList reqDetails, String requesterName)
	{
		MainDao exeQry = new MainDao();
		String reqId = reqDetails.get(0).toString();
		String reqType = reqDetails.get(1).toString();
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		String reqStatus = request.getParameter("status");
		int user_Id = user.getId();
		String approvermail="";
		String approvername="";
		EMailer email = new EMailer();
		try{
			if(nextPriority != 0){
				if(reqType.contains("Leave") || reqType.contains("On Duty") || reqType.contains("Permission")){
					String getApproverID="select RPTMGR from emp_official_info where PERNR='"+requesterName+"'";
					ResultSet approverRS=exeQry.selectQuery(getApproverID);
					while(approverRS.next()){
						approvername = approverRS.getString("RPTMGR");
					}
					approvername = email.getApproverName(approvername);//check approver delegated or not
					String getNextApproverID="select emp_email from emp_master where emp_id like '%"+approvername+"%'";
					approverRS=exeQry.selectQuery(getNextApproverID);
					while(approverRS.next()){
						approvermail = approverRS.getString(1);
					}
				}
				else{
					String getNextApproverID="select * from Approvers_Details where Type='"+reqType+"' and Priority="+nextPriority;
					ResultSet approverRS=exeQry.selectQuery(getNextApproverID);
					/*while(rs.next()){
						approvername = rs.getString("Approver_id");
						approvermail = rs.getString("emailID");
					}*/
					while(approverRS.next()){
						approvername = approverRS.getString("Approver_id");
						approvername = email.getApproverName(approvername);//check approver delegated or not
						if(approvername.equalsIgnoreCase(approverRS.getString("Approver_id"))){
							approvermail = approverRS.getString("emailID");
						}
						else{
							getNextApproverID="select emp_email from emp_master where emp_id like '%"+approvername+"%'";
							approverRS=exeQry.selectQuery(getNextApproverID);
							while(approverRS.next()){
								approvermail = approverRS.getString(1);
							}
						}
						
					}
				}
			}
			else{
				String getNextApproverID="select * from emp_master where emp_id='"+requesterName+"'";
				ResultSet rs=exeQry.selectQuery(getNextApproverID);
				while(rs.next()){
					approvermail = rs.getString("emp_email");
				}
				if(reqStatus.equalsIgnoreCase("Approve") && reqType.equalsIgnoreCase("Material Code Request")){

					String getCodeCreaterID="select * from Approvers_Details where Type like '%Code Creat%'";
					ResultSet codeRS=exeQry.selectQuery(getCodeCreaterID);
					while(codeRS.next()){
						approvername = codeRS.getString("Approver_id");
						approvername = email.getApproverName(approvername);
						if(approvername.equalsIgnoreCase(codeRS.getString("Approver_id"))){
							approvermail = codeRS.getString("emailID");
						}
						else{
							getCodeCreaterID="select emp_email from emp_master emp_id like '%"+approvername+"%'";
							codeRS=exeQry.selectQuery(getNextApproverID);
							while(codeRS.next()){
								approvermail = codeRS.getString(1);
							}
						}
					}
					LinkedList paramList =  new LinkedList();
					String updateSql= "update All_Request set Pending_approver='"+approvername+"', Req_Status='Pending' where Req_Id='"+reqId+"' and Req_Type='"+reqType+"'";
					int upd=exeQry.SqlExecuteUpdate(updateSql, paramList);
				}
				
			}
			String tName = "Recruitment_Request";
			String getRequestDeatils="select * from "+tName+" inner join All_Request on "+tName+".Req_Id = All_Request.Req_Id where All_Request.Req_Id='"+reqId+"'";
			tName = email.getTableNameForRequest(reqType);
			
			
			if(reqType.contains("Vendor Master") || reqType.contains("Customer Master") || reqType.equalsIgnoreCase("Material Code Request")){
				getRequestDeatils="select * from "+tName+" inner join All_Request on "+tName+".REQUEST_NO = All_Request.Req_Id where All_Request.Req_Id='"+reqId+"'";
			}
			else if(reqType.equalsIgnoreCase("Recruitment Request") || reqType.equalsIgnoreCase("Add Man Power") || reqType.equalsIgnoreCase("Leave") || reqType.equalsIgnoreCase("Feedback")){
				getRequestDeatils="select * from "+tName+" inner join All_Request on "+tName+".Req_Id = All_Request.Req_Id where All_Request.Req_Id='"+reqId+"'";
			}
			else if(reqType.equalsIgnoreCase("On Duty") || reqType.contains("Service Master") || reqType.equalsIgnoreCase("Permission")){
				getRequestDeatils="select * from "+tName+" inner join All_Request on "+tName+".request_no = All_Request.Req_Id where All_Request.Req_Id='"+reqId+"'";
			}
			//String getRequestDeatils="select * from "+tName+" inner join All_Request on "+tName+".Req_Id = All_Request.Req_Id where  All_Request.Req_Id='"+reqId+"'";
			//String getRequestDeatils="select * from "+tName+" where Req_Id='"+reqId+"'";
			
			ResultSet rs1=exeQry.selectQuery(getRequestDeatils);
			
			while(rs1.next()){
				MailInboxForm mailForm = new MailInboxForm();
				MailInboxAction mailAction = new MailInboxAction();
				mailForm.setToAddress(approvermail);
				mailForm.setccAddress("");
				mailForm.setbccAddress("");
				mailForm.setSubject(reqType);
				if(nextPriority == 0){
					if(reqStatus.equalsIgnoreCase("Approve")){
						mailForm.setSubject("Your Request Approved");
						if(reqType.equalsIgnoreCase("Material Code Request")){
							mailForm.setSubject("New Request for Code Creation");
						}
						if(reqType.equalsIgnoreCase("Leave")){
							float noDays=0;
							int leaveType=0;
							String lvqry = "select no_of_days,leave_type from leave_details where Req_Id='"+reqId+"'";
							ResultSet lvqryRS=exeQry.selectQuery(lvqry);
							while(lvqryRS.next()){
								noDays = lvqryRS.getFloat("no_of_days");
								leaveType = lvqryRS.getInt("leave_type");
							}
							LeaveAction lA = new LeaveAction();
							int upd = lA.updateAvail(requesterName, ""+leaveType,""+noDays);
							
						}
					}
					else if(reqStatus.equalsIgnoreCase("Reject")){
						mailForm.setSubject("Your Request Rejected");
					}
					else{
						mailForm.setSubject("SAP Code Created for You Request!");
					}
				}
				String desc = "Requested By : "+rs1.getString("Requester_Name")+"</br>";
				desc = desc + "Requested Date : "+rs1.getString("Req_Date")+"</br>";
				desc = desc + "Department : "+getDepartmentName(rs1.getString("Requester_Id"))+"</br>";
				if(reqType.equalsIgnoreCase("Leave")){
					LeaveAction lAction = new LeaveAction();
					desc = desc + "Leave Type : "+lAction.getLeaveType(rs1.getString("leave_type"))+" for "+lAction.getHolidayType(rs1.getString("start_duration"))+"</br>";
					desc = desc + "From : "+EMicroUtils.display1(rs1.getDate("start_date"))+"</br>";
					desc = desc + "No.Of Days : "+rs1.getString("no_of_days")+"</br>";
				}
				else if(reqType.equalsIgnoreCase("On Duty")){
					desc = desc + "OnDuty Type : "+rs1.getString("onDuty_Type")+" for "+rs1.getString("duration")+"</br>";
					desc = desc + "From : "+EMicroUtils.display1(rs1.getDate("start_date"))+"</br>";
					desc = desc + "No.Of Days : "+rs1.getString("no_of_days")+"</br>";
				}
				else if(reqType.contains("Vendor Master")){
					desc = desc + "Vendar Name : "+rs1.getString("TITLE")+". "+rs1.getString("NAME")+"</br>";
					desc = desc + "PAN NO : "+rs1.getString("PAN_No")+"</br>";
					desc = desc + "EMAIL ID : "+rs1.getString("EMAIL_ID")+"</br>";
					desc = desc + "Vendor Type : "+rs1.getString("Type_Of_Vendor")+"</br>";
				}
				else if(reqType.contains("Customer Master")){
					desc = desc + "Customer Name : MR/MRS/MS. "+rs1.getString("NAME")+"</br>";
					desc = desc + "PAN NO : "+rs1.getString("PAN_No")+"</br>";
					desc = desc + "EMAIL ID : "+rs1.getString("EMAIL_ID")+"</br>";
					desc = desc + "Customer Type : "+rs1.getString("Customer_Type")+"</br>";
				}
				else if(reqType.equalsIgnoreCase("Feedback")){
					desc = desc + "Subject : "+rs1.getString("subject")+"</br>";
					desc = desc + "Comments : "+rs1.getString("comments")+"</br>";
				}
				else if(reqType.equalsIgnoreCase("Material Code Request")){
					desc = desc + "Material Type : "+rs1.getString("Type")+"</br>";
					desc = desc + "Material Short Name : "+rs1.getString("MATERIAL_SHORT_NAME")+"</br>";
					desc = desc + "Material Generic Name : "+rs1.getString("GENERIC_NAME")+"</br>";
					desc = desc + "Pharma Name : "+rs1.getString("PHARMACOP_NAME")+"</br>";
				}
				else if(reqType.contains("Service Master")){
					desc = desc + "Machine Name : "+rs1.getString("machine_name")+"</br>";
					desc = desc + "Service Category : "+rs1.getString("service_catagory")+"</br>";
					desc = desc + "Service Description : "+rs1.getString("service_description")+"</br>";
					desc = desc + "Purpose : "+rs1.getString("purpose")+"</br>";
					
				}
				else if(reqType.equalsIgnoreCase("Permission")){
					desc = desc + "Permission Date : "+rs1.getString("date")+"</br>";
					desc = desc + "Permission Time : "+rs1.getString("startTime")+"</br>";
					desc = desc + "Reason : "+rs1.getString("reason")+"</br>";
				}
				else{
					if(reqType.equalsIgnoreCase("Recruitment Request")){
						desc = desc + "Required Employee : "+rs1.getString("TotalEmp")+"</br>";
						desc = desc + "Required Qualification : "+rs1.getString("Qualification")+"</br>";
						desc = desc + "Salary Offered : "+rs1.getString("SalaryOffered")+"</br>";
					}
					else if(reqType.equalsIgnoreCase("Add Man Power")){
						desc = desc + "Required Man Power : "+rs1.getString("Req_Man_Power")+"</br>";
					}
				}
				desc = desc + "Comments : "+rs1.getString("Comments")+"</br>";
				mailForm.setDescription(desc);
				mailAction.mailSendToRecipient(request, mailForm, "request");
			}
		}
		catch(IOException e){System.out.println("Exception @ getting count");e.printStackTrace();}
		catch (ServletException se) { System.out.println("MessagingException @ get Inbox mail"); se.printStackTrace();}
		catch(SQLException sqe){System.out.println("Exception @ getting count");sqe.printStackTrace();}
		catch (MessagingException e) { System.out.println("MessagingException @ get mail"); e.printStackTrace();}
		
		return approvername;
	}
	
	public ActionForward getRequestUploadInOpenings(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response){
		LinkedList list = new LinkedList();
		HttpSession sesion=request.getSession();
		ApprovalsForm statusForm=(ApprovalsForm) form;
		//HRRecruitmentForm hrRRForm=(HRRecruitmentForm)form;
		request.setAttribute("header", "Request For Approve");
		String reqId = request.getParameter("reqId");
		String reqType = request.getParameter("reqType");
		String tName="leave";
		UserInfo user=(UserInfo)sesion.getAttribute("user");
		String uName = user.getFullName();
		if(reqType.equalsIgnoreCase("Recruitment Request")){
			tName="Recruitment_Request";
		}
		UserDao adMPM=new UserDao();
		try{
			String pendingReq="select * from "+tName+" where Req_Id='"+reqId+"'";
			ResultSet rsGetReq=adMPM.selectQuery(pendingReq);
			while(rsGetReq.next()){
				statusForm.setRequestNo(reqId);
				statusForm.setRequestType(reqType);
				statusForm.setJobTitle(rsGetReq.getString("Job_Title"));
				statusForm.setDepartment(rsGetReq.getString("Department"));
				statusForm.setPrimaryLocation(rsGetReq.getString("PrimaryLocation"));
				statusForm.setTotalEmp(rsGetReq.getString("TotalEmp"));
				statusForm.setEmpStatus(rsGetReq.getString("EmpStatus"));
				statusForm.setJobDescription(rsGetReq.getString("JobDescription"));
				statusForm.setQualifications(rsGetReq.getString("Qualification"));
				statusForm.setExperience(rsGetReq.getString("Experience"));
				statusForm.setSaleryOffered(rsGetReq.getString("SalaryOffered"));
				statusForm.setUrl("approvals.do?method=uploadInOpenings&reqId="+reqId);
				if(rsGetReq.getString("Requester_name").contains(uName)){
					request.setAttribute("approveRequest", "");
					request.setAttribute("uploadOpenings", "current");
				}
				else{
					request.setAttribute("uploadOpenings", "");
					request.setAttribute("approveRequest", "approve");
				}
				
				list.add(statusForm);
			}
		}
		catch (SQLException e) {
			System.out.println("exception @ upload request");
			e.printStackTrace();
		}
		request.setAttribute("openRequest", "open");
		request.setAttribute("listDetails", list);
		return mapping.findForward("displayRequest");
	}
	
	//uplad in current openings
	public ActionForward uploadInOpenings(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response){
		LinkedList list = new LinkedList();
		HttpSession sesion=request.getSession();
		ApprovalsForm statusForm=(ApprovalsForm) form;
		//HRRecruitmentForm hrRRForm=(HRRecruitmentForm)form;
		request.setAttribute("header", "Request For Approve");
		String reqId = request.getParameter("reqId");
		String reqType = request.getParameter("reqType");
		String tName="leave";
		UserInfo user=(UserInfo)sesion.getAttribute("user");
		String uName = user.getFullName();
		if(reqType.equalsIgnoreCase("Recruitment Request")){
			tName="Recruitment_Request";
		}
		UserDao adMPM=new UserDao();
		try{
			String pendingReq="select * from "+tName+" where Req_Id='"+reqId+"'";
			ResultSet rsGetReq=adMPM.selectQuery(pendingReq);
			while(rsGetReq.next()){
				statusForm.setRequestNo(reqId);
				statusForm.setRequestType(reqType);
				statusForm.setJobTitle(rsGetReq.getString("Job_Title"));
				statusForm.setDepartment(rsGetReq.getString("Department"));
				statusForm.setPrimaryLocation(rsGetReq.getString("PrimaryLocation"));
				statusForm.setTotalEmp(rsGetReq.getString("TotalEmp"));
				statusForm.setEmpStatus(rsGetReq.getString("EmpStatus"));
				statusForm.setJobDescription(rsGetReq.getString("JobDescription"));
				statusForm.setQualifications(rsGetReq.getString("Qualification"));
				statusForm.setExperience(rsGetReq.getString("Experience"));
				statusForm.setSaleryOffered(rsGetReq.getString("SalaryOffered"));
				statusForm.setUrl("approvals.do?method=uploadInOpenings&reqId="+reqId);
				if(rsGetReq.getString("Requester_name").contains(uName)){
					request.setAttribute("approveRequest", "");
					request.setAttribute("uploadOpenings", "current");
				}
				else{
					request.setAttribute("uploadOpenings", "");
					request.setAttribute("approveRequest", "approve");
				}
				
				list.add(statusForm);
			}
		}
		catch (SQLException e) {
			System.out.println("exception @ upload request");
			e.printStackTrace();
		}
		request.setAttribute("openRequest", "open");
		request.setAttribute("listDetails", list);
		return mapping.findForward("uploadRequest");
	}
	
	public String getLocationName(String type, String locId){
		MainDao exeQry = new MainDao();
		String locName="";
		try{
			if(type.equalsIgnoreCase("user")){
				int plantId=0;
				String getLocations="select plant_id from emp_master where emp_id='"+locId+"'";
				ResultSet rsGetPlant=exeQry.selectQuery(getLocations);
				while(rsGetPlant.next()){
						System.out.println("if "+rsGetPlant.getInt("plant_id"));
						plantId=rsGetPlant.getInt("plant_id");
				}
				locName = getLocationName("plant",""+plantId);
			}
			else{
				String getLocations="select * from Location where LOCID="+locId;
				ResultSet rsGetLocation=exeQry.selectQuery(getLocations);
				while(rsGetLocation.next()){
						System.out.println("if "+rsGetLocation.getInt("LOCID"));
						locName=rsGetLocation.getString("LOCNAME");
					
				}
			}
		}catch (SQLException e) {System.out.println("exception @ getting location");
			e.printStackTrace();
		}
		return locName;
	}
	public String getDepartmentName(String userId){
		MainDao exeQry = new MainDao();
		String deptName="";
		try{
			ResultSet rs1 = exeQry.selectQuery("select dept_name from emp_master where emp_id='"+userId+"'");
			while (rs1.next()) {
				deptName = rs1.getString("dept_name");
			}
		}catch (SQLException e) {System.out.println("exception @ getting department");
			e.printStackTrace();
		}
		return deptName;
	}
	public int getCountForTable(String reqStatus, String fullName, String reqType){
    	int rowCount = 0;
    	MainDao exeQry = new MainDao();
    	String reqList="select count(*) from All_Request where Pending_approver='"+fullName+"' and Req_Status='Pending' and Req_Type='"+reqType+"'";
    	if(reqStatus.equalsIgnoreCase("Approved")){
			reqList="select count(*) from All_Request where Last_Approver='"+fullName+"' and Req_Status='Approved' and   (Actual_Approver_status is null or Actual_Approver_status='')  and Req_Type='"+reqType+"'";
		}
    	else if(reqStatus.equalsIgnoreCase("Completed")){
			reqList="select count(*) from All_Request where Last_Approver='"+fullName+"' and Req_Status='Completed' and Req_Type='"+reqType+"'";
		}
		else if(reqStatus.equalsIgnoreCase("Rejected")){
			reqList="select count(*) from All_Request where Req_Status='"+reqStatus+"' and Last_Approver='"+fullName+"'  and Req_Type='"+reqType+"' ";
		}
		else if(reqStatus.equalsIgnoreCase("Cancelled")){
			reqList="select count(*) from All_Request where (Req_Status='"+reqStatus+"' OR Actual_Approver_status='"+reqStatus+"') and Last_Approver='"+fullName+"'  and Req_Type='"+reqType+"' ";
		}
		else if(reqStatus.equalsIgnoreCase("All")){
			reqList="select count(*) from All_Request where (Last_Approver ='"+fullName+"' or Pending_Approver = '"+fullName+"')  and Req_Type='"+reqType+"'";
		}
		else if(reqStatus.equalsIgnoreCase("Closed")){
			reqList="select count(*) from All_Request where Req_Status='"+reqStatus+"' and Last_Approver='"+fullName+"'  and Req_Type='"+reqType+"' ";
		}
    	
    	
    	try
    	{
    		
    		ResultSet countrs=exeQry.selectQuery(reqList);
    		while(countrs.next()) {
    			rowCount=Integer.parseInt(countrs.getString(1));
    		}
    	}
    	catch(SQLException se){
    		System.out.println("Exception @ getting count");
    		se.printStackTrace();
    	}
    	return rowCount;
    }
	
	private void setAllCount(ApprovalsForm mailForm,int totalCount, int sCount, int eCount){
		mailForm.setTotalAppCount(totalCount);
		mailForm.setStartAppCount(sCount);
		mailForm.setEndAppCount(eCount);
    }
	private void setFilterType(String requestType, ApprovalsForm statusForm){
		LinkedList defaultFilter=new LinkedList();
		defaultFilter.add(0,"Pending");
		defaultFilter.add(1,"Approved");
		defaultFilter.add(2,"Rejected");
		LinkedList filter=new LinkedList();
		System.out.println("size -> "+defaultFilter.size());
		for(int i = 0; i < defaultFilter.size(); i++){
			String selectedFilter = defaultFilter.get(i).toString();
			if(requestType.equalsIgnoreCase(selectedFilter)){
				System.out.println("if "+selectedFilter);
				filter.addFirst(selectedFilter);
			}
			else{
				System.out.println("else "+selectedFilter);
				filter.add(selectedFilter);
			}
		}
		statusForm.setFilterType(filter);
		
	}
	private LinkedList getLimitAndNavigation(ActionMapping mapping, ActionForm form, HttpServletRequest request, String requestType,int totalAppCount, int startAppCount, int endAppCount){
		ApprovalsForm AppForm = (ApprovalsForm)form;
		MailInboxAction mAction = new MailInboxAction();
		LinkedList naviCount = new LinkedList();
		if(startAppCount == 0)
		{
			if(totalAppCount == 0)
			{			
				AppForm.setAppMessage("No Records in Selected Filter/Request!");
				request.setAttribute("noRecords","noRecords");
			}
			else if(totalAppCount<=MAIL_PER_PAGE)
			{
				startAppCount=1;
				endAppCount=totalAppCount;
				//getRequestList(mapping, form, request, requestType,startAppCount,endAppCount);
				//setAllCount(AppForm,totalAppCount,startAppCount,endAppCount);
			}
			else{
				startAppCount=1;
				endAppCount=MAIL_PER_PAGE;
				//getRequestList(mapping, form, request, requestType,startAppCount,endAppCount);
				//setAllCount(AppForm,totalAppCount,startAppCount,endAppCount);
				mAction.enableNextNavigation(request);
			}
		}
		else{
			String naviType = request.getParameter("fnpl");
			if(naviType.equalsIgnoreCase("next")){
				startAppCount=(startAppCount+MAIL_PER_PAGE);
				endAppCount=(endAppCount+MAIL_PER_PAGE);
				mAction.enablePreviousNavigation(request);
				if(totalAppCount <= endAppCount)
				{
					mAction.disableNextNavigation(request);
					endAppCount = totalAppCount;
				}
				else
				{
					mAction.enableNextNavigation(request);
				}
				//setAllCount(AppForm,totalAppCount,startAppCount,endAppCount);
			}
			else if(naviType.equalsIgnoreCase("priv"))
			{
				startAppCount=(startAppCount-MAIL_PER_PAGE);
				int ecount=0;
				if(endAppCount == totalAppCount)
				{
					int ec = endAppCount/MAIL_PER_PAGE;
					ecount = ec;
					endAppCount=(ecount*MAIL_PER_PAGE);
				}
				else
					endAppCount=(endAppCount-MAIL_PER_PAGE);
				if(endAppCount == MAIL_PER_PAGE)
				{
					mAction.disablePreviousNavigation(request);
					mAction.enableNextNavigation(request);
				}
				else{
					mAction.enablePreviousNavigation(request);
					mAction.enableNextNavigation(request);
				}
				//setAllCount(AppForm,totalAppCount,startAppCount,endAppCount);
			}
			else if(naviType.equalsIgnoreCase("alast")){
				int ecount=0;
				endAppCount = totalAppCount;
				int typeStart = endAppCount%MAIL_PER_PAGE;
				System.out.println("mod "+typeStart);
				if(typeStart == 0){
					int ec = endAppCount-MAIL_PER_PAGE;
					ecount = ec;
					startAppCount=ecount+1;
				}
				else{
					int ec = endAppCount/MAIL_PER_PAGE;
					ecount = ec;
					startAppCount=(ecount*MAIL_PER_PAGE)+1;
				}
				mAction.enablePreviousNavigation(request);
				mAction.disableNextNavigation(request);

			}
			else if(naviType.equalsIgnoreCase("vfirst")){
				startAppCount=1;
				endAppCount = MAIL_PER_PAGE;
				mAction.disablePreviousNavigation(request);
				mAction.enableNextNavigation(request);
			}
			else{
				if(startAppCount == 1 && endAppCount == totalAppCount){
					mAction.disableNextNavigation(request);
					mAction.disablePreviousNavigation(request);
				}
				else if(startAppCount == 1 && endAppCount < totalAppCount){
					mAction.enableNextNavigation(request);
					mAction.disablePreviousNavigation(request);
				}
				else if(startAppCount != 1 && endAppCount == totalAppCount){
					mAction.enablePreviousNavigation(request);
					mAction.disableNextNavigation(request);
				}
				else if(startAppCount != 1 && endAppCount <= totalAppCount){
					mAction.enablePreviousNavigation(request);
					mAction.enableNextNavigation(request);
				}
			}
		}
		setAllCount(AppForm,totalAppCount,startAppCount,endAppCount);
		naviCount.add(0,startAppCount);
		naviCount.add(1,endAppCount);
		return naviCount;
	}
	
	public ActionForward saveCreatedCode(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response){
		LinkedList list = new LinkedList();
		HttpSession session=request.getSession();
		ApprovalsForm statusForm=(ApprovalsForm) form;
		String reqId = request.getParameter("reqId");
		MainDao exeQry = new MainDao();
		String reqType = request.getParameter("reqType");
		String reqStatus = request.getParameter("status");
		LinkedList reqDetails = new LinkedList();
		reqDetails.add(0, reqId);
		reqDetails.add(1, reqType);
		try{
			RawMaterialAction rmAction = new RawMaterialAction();
			LinkedList codeDetails = new LinkedList();
			codeDetails.add(0,statusForm.getSapCodeExists());
			codeDetails.add(1,statusForm.getSapCodeNo());
			codeDetails.add(2,statusForm.getSapCreationDate());
			codeDetails.add(3,statusForm.getSapCreatedBy());
			codeDetails.add(4,reqId);
			UserInfo user=(UserInfo)session.getAttribute("user");
			String lcode = user.getPlantId();
			int user_Id = user.getId();
			String uName = user.getFullName();
			int i = rmAction.updateCode(codeDetails);
			if( i == 0){
				statusForm.setAppMessage("No Records in Selected Filter/Request!");
			}
			else{
				ResultSet approvedPerson = exeQry.selectQuery("select * from All_Request where Req_Id='"+reqId+"'");//exeQry.selectQuery("select * from Recruitment_Request where Req_Id='"+reqId+"'");
				String appPerson=uName;
				String requesterName ="";
				while(approvedPerson.next()){
					appPerson = appPerson +","+approvedPerson.getString("Approved_Persons");
					requesterName = approvedPerson.getString("Requester_Name");//approvedPerson.getString("Requester_name");
				}
				LinkedList paramList = new LinkedList();
				String updateSql= "update All_Request set Pending_approver='No', Req_Status='Approved', Comments='Code Created by "+statusForm.getSapCreatedBy()+"' where Req_Id='"+reqId+"' and Req_Type='"+reqType+"'";
				i=exeQry.SqlExecuteUpdate(updateSql, paramList);
				System.out.println("maha req "+requesterName);
				String approverName = sendMailToApprover(request, 0, reqDetails, requesterName);
				//statusChangeForRequest(mapping, form, request, response);
			}
		}
		catch(SQLException se){
    		System.out.println("Exception @ saving SAP code");
    		se.printStackTrace();
    	}
		request.setAttribute("header", "Pending Request");
		request.setAttribute("listDetails", list);
		request.setAttribute("openRequest", "");
		String result=(String)session.getAttribute("result");
		System.out.println("result="+result);
		if(result==null||result==" ")
		session.setAttribute("result"," ");
		
		
		if(request.getParameter("id")!=null){
		
		request.setAttribute("MenuIcon", request.getParameter("id"));
		}
		return mapping.findForward("displayPendingRequest");
	}
	
	public ActionForward searchInApprovals(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
		HttpSession session=request.getSession();
		UserInfo user=(UserInfo)session.getAttribute("user");
		int userID=user.getId();
		MailInboxAction mAction = new MailInboxAction();
		
		ApprovalsForm appSearchForm=(ApprovalsForm)form;
		NewsandMediaDao ad=new NewsandMediaDao();
		String sTxt = request.getParameter("searchTxt");
		EMailer email = new EMailer();
		String filter = request.getParameter("filter");
		String requestName = appSearchForm.getReqRequstType();
		appSearchForm.setSearchText(sTxt);
		LinkedList searchList=new LinkedList();
		setFilterType(filter, appSearchForm);
		try{
			int  startAppCount=0;
			int  endAppCount=0;
			String scount = request.getParameter("sCount");
			if(scount != null){
				startAppCount=Integer.parseInt(scount);
				endAppCount=Integer.parseInt(request.getParameter("eCount"));
			}
			mAction.basicNavigation(request);
			int rowCount=0;
			String tName = email.getTableNameForRequest(requestName);
			String searchQueryCount="select count(*) from All_Request where Pending_Approver ='"+userID+"' and (Requester_Name like '%"+sTxt+"%' or Req_Date like '%"+sTxt+"%' or Last_Approver like '%"+sTxt+"%' or Comments like '%"+sTxt+"%')";
			ResultSet countrs=ad.selectQuery(searchQueryCount);
			while(countrs.next()) {
					rowCount=Integer.parseInt(countrs.getString(1));
			}
			int searchTotal = rowCount;
			if(startAppCount == 0){
				if(searchTotal == 0){
					appSearchForm.setAppMessage("No Result for Given Text");
					request.setAttribute("noRecords","noRecords");
				}
				else if(searchTotal <= MAIL_PER_PAGE)
				{
					startAppCount=1;
					endAppCount=searchTotal;
				}
				else
				{
					startAppCount=1;
					endAppCount=MAIL_PER_PAGE;
					mAction.enableNextNavigation(request);
				}
				/*InList = getLimitedItems(request,tablename,startAppCount,endAppCount);
				setAllCount(mailInForm,InboxTotal,startAppCount,endAppCount);*/
			}
			else{
				String naviType = request.getParameter("fnpl");
				if(naviType.equalsIgnoreCase("next")){
					startAppCount=(startAppCount+MAIL_PER_PAGE);
					endAppCount=(endAppCount+MAIL_PER_PAGE);
					mAction.enablePreviousNavigation(request);
					if(searchTotal <= endAppCount)
					{
						mAction.disableNextNavigation(request);
						endAppCount = searchTotal;
					}
					else
					{
						mAction.enableNextNavigation(request);
					}
				}
				else if(naviType.equalsIgnoreCase("priv"))
				{
					startAppCount=(startAppCount-MAIL_PER_PAGE);
					int ecount=0;
					if(endAppCount == searchTotal)
					{
						int ec = endAppCount/MAIL_PER_PAGE;
						ecount = ec;
						endAppCount=(ecount*MAIL_PER_PAGE);
					}
					else
						endAppCount=(endAppCount-MAIL_PER_PAGE);
					if(endAppCount == MAIL_PER_PAGE)
					{
						mAction.disablePreviousNavigation(request);
						mAction.enableNextNavigation(request);
					}
					else{
						mAction.enablePreviousNavigation(request);
						mAction.enableNextNavigation(request);
					}
				}
				else if(naviType.equalsIgnoreCase("alast")){
					int ecount=0;
					endAppCount = searchTotal;
					int typeStart = endAppCount%MAIL_PER_PAGE;
					System.out.println("mod "+typeStart);
					if(typeStart == 0){
						int ec = endAppCount-MAIL_PER_PAGE;
						ecount = ec;
						startAppCount=ecount+1;
					}
					else{
						int ec = endAppCount/MAIL_PER_PAGE;
						ecount = ec;
						startAppCount=(ecount*MAIL_PER_PAGE)+1;
					}
					mAction.enablePreviousNavigation(request);
					mAction.disableNextNavigation(request);
				}
				else{
					startAppCount=1;
					endAppCount = MAIL_PER_PAGE;
					mAction.disablePreviousNavigation(request);
					mAction.enableNextNavigation(request);
				}
				
				
				/*InList = getLimitedItems(request,tablename,startAppCount,endAppCount);
				setAllCount(mailInForm,InboxTotal,startAppCount,endAppCount);*/
			}
			setAllCount(appSearchForm,searchTotal,startAppCount,endAppCount);
			String searchQuery="select * from All_Request where Pending_Approver ='"+user.getUserName()+"' and (Requester_Name like '%"+sTxt+"%' or Req_Date like '%"+sTxt+"%' or Last_Approver like '%"+sTxt+"%' or Comments like '%"+sTxt+"%')";
			if(filter.equalsIgnoreCase("Approved")){
				searchQuery="select * from All_Request where Last_Approver like '%"+user.getUserName()+"%' and (Requester_Name like '%"+sTxt+"%' or Req_Date like '%"+sTxt+"%' or Last_Approver like '%"+sTxt+"%' or Comments like '%"+sTxt+"%')";
			}
			ResultSet srchRS=ad.selectQuery(searchQuery);
			int count = 0;
			String request_Name= "";
			Date today = new Date();
			while(srchRS.next()) {
				int startRow = srchRS.getRow();
				if(startRow >= startAppCount)
				{
					ApprovalsForm statusForm1 = new ApprovalsForm();
					statusForm1.setRequestNo(srchRS.getString("Req_Id"));
					statusForm1.setRequestedBy(srchRS.getString("Requester_name"));
					request_Name = srchRS.getString("Req_Type");
					statusForm1.setRequestType(request_Name);
					statusForm1.setRequestDate(srchRS.getString("Req_Date"));
					appSearchForm.setRequestType(request_Name);
					statusForm1.setUrl("approvals.do?method=getSelectedRequestToApprove&reqId="+srchRS.getString("Req_Id")+"&reqType="+request_Name+"&sCount="+startAppCount+"&eCount="+endAppCount+"&searchTxt="+sTxt);
					appSearchForm.setSelectedFilter(filter);
					searchList.add(statusForm1);
					count++;
					if(count == MAIL_PER_PAGE)
					{
						break;
					}
				}
			}
		}
		catch(SQLException se){
			se.printStackTrace();
		}
		request.setAttribute("header", "Pending Request");
		request.setAttribute("openRequest", "");
		request.setAttribute("listDetails", searchList);
		String result=(String)session.getAttribute("result");
		System.out.println("result="+result);
		if(result==null||result==" ")
		session.setAttribute("result"," ");
		
		
		if(request.getParameter("id")!=null){
		
		request.setAttribute("MenuIcon", request.getParameter("id"));
		}
		appSearchForm.setHeading("Search result for "+sTxt+" in "+filter);
		String returnMsg="displayRequest";
		return mapping.findForward(returnMsg);
	}
	
}